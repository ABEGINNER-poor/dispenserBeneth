
dispenserBeneth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d600  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004874  0801d790  0801d790  0001e790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022004  08022004  00024168  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08022004  08022004  00023004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802200c  0802200c  00024168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802200c  0802200c  0002300c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08022010  08022010  00023010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  08022014  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00024168  2**0
                  CONTENTS
 10 .bss          0000e600  20000168  20000168  00024168  2**2
                  ALLOC
 11 .eth_desc     00000018  2000e768  2000e768  00024168  2**0
                  ALLOC
 12 .eth_buf      00000000  2000e780  2000e780  00024168  2**0
                  CONTENTS
 13 ._user_heap_stack 00000600  2000e780  2000e780  00024168  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00024168  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003bce3  00000000  00000000  00024198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00009f9c  00000000  00000000  0005fe7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002ba8  00000000  00000000  00069e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002221  00000000  00000000  0006c9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003753e  00000000  00000000  0006ebe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00045fb3  00000000  00000000  000a611f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f709b  00000000  00000000  000ec0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001e316d  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000be98  00000000  00000000  001e31b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006b  00000000  00000000  001ef048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801d778 	.word	0x0801d778

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	0801d778 	.word	0x0801d778

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <app_business_init>:

/**
  * @brief  初始化应用层业务逻辑
  * @retval None
  */
void app_business_init(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    // 初始化寄存器默认值
    
    // 初始化舵机相关寄存器
    holding_regs[REG_ROTATION_TRIGGER] = 3;               // 40023 转动触发：3=上电初始化值
 80005b2:	4b31      	ldr	r3, [pc, #196]	@ (8000678 <app_business_init+0xcc>)
 80005b4:	2203      	movs	r2, #3
 80005b6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    // 初始化当前角度寄存器为默认值500 (40017-40022)
    holding_regs[REG_CURRENT_ANGLE1] = 500;
 80005b8:	4b2f      	ldr	r3, [pc, #188]	@ (8000678 <app_business_init+0xcc>)
 80005ba:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005be:	845a      	strh	r2, [r3, #34]	@ 0x22
    holding_regs[REG_CURRENT_ANGLE2] = 500;
 80005c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000678 <app_business_init+0xcc>)
 80005c2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005c6:	849a      	strh	r2, [r3, #36]	@ 0x24
    holding_regs[REG_CURRENT_ANGLE3] = 500;
 80005c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000678 <app_business_init+0xcc>)
 80005ca:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    holding_regs[REG_CURRENT_ANGLE4] = 500;
 80005d0:	4b29      	ldr	r3, [pc, #164]	@ (8000678 <app_business_init+0xcc>)
 80005d2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    holding_regs[REG_CURRENT_ANGLE5] = 500;
 80005d8:	4b27      	ldr	r3, [pc, #156]	@ (8000678 <app_business_init+0xcc>)
 80005da:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    holding_regs[REG_CURRENT_ANGLE6] = 500;
 80005e0:	4b25      	ldr	r3, [pc, #148]	@ (8000678 <app_business_init+0xcc>)
 80005e2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    
    // 初始化泵相关寄存器
    holding_regs[REG_PUMP1_STATUS] = 0;                   // 40029 泵1状态：直接显示错误码
 80005e8:	4b23      	ldr	r3, [pc, #140]	@ (8000678 <app_business_init+0xcc>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	875a      	strh	r2, [r3, #58]	@ 0x3a
    holding_regs[REG_PUMP2_STATUS] = 0;                   // 40034 泵2状态：直接显示错误码
 80005ee:	4b22      	ldr	r3, [pc, #136]	@ (8000678 <app_business_init+0xcc>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    
    // 初始化业务状态变量
    last_rotation_trigger = 3;    // 对应寄存器的初始值
 80005f6:	4b21      	ldr	r3, [pc, #132]	@ (800067c <app_business_init+0xd0>)
 80005f8:	2203      	movs	r2, #3
 80005fa:	601a      	str	r2, [r3, #0]
    last_weight_control = 0;
 80005fc:	4b20      	ldr	r3, [pc, #128]	@ (8000680 <app_business_init+0xd4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
    last_pump1_init_trigger = 0;
 8000602:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <app_business_init+0xd8>)
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
    last_pump1_control_trigger = 0;
 8000608:	4b1f      	ldr	r3, [pc, #124]	@ (8000688 <app_business_init+0xdc>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
    last_pump2_init_trigger = 0;
 800060e:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <app_business_init+0xe0>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
    last_pump2_control_trigger = 0;
 8000614:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <app_business_init+0xe4>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
    
    // 初始化泵状态变量
    pump1_busy = 0;
 800061a:	4b1e      	ldr	r3, [pc, #120]	@ (8000694 <app_business_init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
    pump2_busy = 0;
 8000620:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <app_business_init+0xec>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
    pump1_current_pos = 0;
 8000626:	4b1d      	ldr	r3, [pc, #116]	@ (800069c <app_business_init+0xf0>)
 8000628:	2200      	movs	r2, #0
 800062a:	801a      	strh	r2, [r3, #0]
    pump2_current_pos = 0;
 800062c:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <app_business_init+0xf4>)
 800062e:	2200      	movs	r2, #0
 8000630:	801a      	strh	r2, [r3, #0]
    pump1_move_start_time = 0;
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <app_business_init+0xf8>)
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
    pump2_move_start_time = 0;
 8000638:	4b1b      	ldr	r3, [pc, #108]	@ (80006a8 <app_business_init+0xfc>)
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
    
    // 初始化舵机状态变量
    servo_moving = 0;
 800063e:	4b1b      	ldr	r3, [pc, #108]	@ (80006ac <app_business_init+0x100>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
    servo_move_start_time = 0;
 8000644:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <app_business_init+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 6; i++) {
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	e008      	b.n	8000662 <app_business_init+0xb6>
        servo_current_positions[i] = 500;  // 默认位置500
 8000650:	4a18      	ldr	r2, [pc, #96]	@ (80006b4 <app_business_init+0x108>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000658:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 6; i++) {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3301      	adds	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b05      	cmp	r3, #5
 8000666:	ddf3      	ble.n	8000650 <app_business_init+0xa4>
    }
    
    cdc_debug_print("Business logic initialized");
 8000668:	4813      	ldr	r0, [pc, #76]	@ (80006b8 <app_business_init+0x10c>)
 800066a:	f000 f833 	bl	80006d4 <cdc_debug_print>
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000590 	.word	0x20000590
 800067c:	20000184 	.word	0x20000184
 8000680:	20000188 	.word	0x20000188
 8000684:	2000018c 	.word	0x2000018c
 8000688:	20000190 	.word	0x20000190
 800068c:	20000194 	.word	0x20000194
 8000690:	20000198 	.word	0x20000198
 8000694:	2000021c 	.word	0x2000021c
 8000698:	2000021d 	.word	0x2000021d
 800069c:	2000021e 	.word	0x2000021e
 80006a0:	20000220 	.word	0x20000220
 80006a4:	20000224 	.word	0x20000224
 80006a8:	20000228 	.word	0x20000228
 80006ac:	2000022c 	.word	0x2000022c
 80006b0:	20000230 	.word	0x20000230
 80006b4:	20000234 	.word	0x20000234
 80006b8:	0801d790 	.word	0x0801d790

080006bc <app_business_process>:

/**
  * @brief  主业务逻辑处理函数 - 每100ms调用一次
  * @retval None
  */
void app_business_process(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
    // 1. 处理舵机相关命令
    process_servo_commands();
 80006c0:	f000 f828 	bl	8000714 <process_servo_commands>
    
    // 2. 处理称重相关命令
    process_weight_commands();
 80006c4:	f000 f906 	bl	80008d4 <process_weight_commands>
    
    // 3. 处理泵相关命令
    process_pump_commands();
 80006c8:	f000 f926 	bl	8000918 <process_pump_commands>
    
    // 4. 更新传感器数据 (只读寄存器)
    update_sensor_data();
 80006cc:	f000 fa5e 	bl	8000b8c <update_sensor_data>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <cdc_debug_print>:
/**
  * @brief  调试信息输出函数
  * @param  message: 要输出的调试信息
  * @retval None
  */
static void cdc_debug_print(const char* message) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
    int len = snprintf(debug_buf, sizeof(debug_buf), "[BUSINESS] %s\r\n", message);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a0b      	ldr	r2, [pc, #44]	@ (800070c <cdc_debug_print+0x38>)
 80006e0:	2180      	movs	r1, #128	@ 0x80
 80006e2:	480b      	ldr	r0, [pc, #44]	@ (8000710 <cdc_debug_print+0x3c>)
 80006e4:	f01b feec 	bl	801c4c0 <sniprintf>
 80006e8:	60f8      	str	r0, [r7, #12]
    if (len > 0 && len < sizeof(debug_buf)) {
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	dd08      	ble.n	8000702 <cdc_debug_print+0x2e>
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80006f4:	d805      	bhi.n	8000702 <cdc_debug_print+0x2e>
        CDC_Transmit_FS((uint8_t*)debug_buf, len);
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	4619      	mov	r1, r3
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <cdc_debug_print+0x3c>)
 80006fe:	f01b f8e9 	bl	801b8d4 <CDC_Transmit_FS>
    }
}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	0801d7ac 	.word	0x0801d7ac
 8000710:	2000019c 	.word	0x2000019c

08000714 <process_servo_commands>:

/**
  * @brief  处理舵机相关命令
  * @retval None
  */
static void process_servo_commands(void) {
 8000714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000716:	b0ad      	sub	sp, #180	@ 0xb4
 8000718:	af06      	add	r7, sp, #24
    // 状态机逻辑：
    // 1 = 正在执行任务（忙）
    // 2 = 任务完成，可重新写入1开始新任务
    // 3 = 上电初始化值，可接受写入1
    // 当写入1时执行移动，执行期间保持状态1，完成后置为状态2
    if (holding_regs[REG_ROTATION_TRIGGER] == 1 && 
 800071a:	4b63      	ldr	r3, [pc, #396]	@ (80008a8 <process_servo_commands+0x194>)
 800071c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800071e:	2b01      	cmp	r3, #1
 8000720:	f040 80ac 	bne.w	800087c <process_servo_commands+0x168>
        (last_rotation_trigger == 2 || last_rotation_trigger == 3)) {  // 只有从状态2或3才能接受状态1
 8000724:	4b61      	ldr	r3, [pc, #388]	@ (80008ac <process_servo_commands+0x198>)
 8000726:	681b      	ldr	r3, [r3, #0]
    if (holding_regs[REG_ROTATION_TRIGGER] == 1 && 
 8000728:	2b02      	cmp	r3, #2
 800072a:	d004      	beq.n	8000736 <process_servo_commands+0x22>
        (last_rotation_trigger == 2 || last_rotation_trigger == 3)) {  // 只有从状态2或3才能接受状态1
 800072c:	4b5f      	ldr	r3, [pc, #380]	@ (80008ac <process_servo_commands+0x198>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b03      	cmp	r3, #3
 8000732:	f040 80a3 	bne.w	800087c <process_servo_commands+0x168>
        if (!servo_moving) {  // 只有在舵机不在移动时才处理新命令
 8000736:	4b5e      	ldr	r3, [pc, #376]	@ (80008b0 <process_servo_commands+0x19c>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	f040 809a 	bne.w	8000874 <process_servo_commands+0x160>
            cdc_debug_print("Servo rotation triggered, status 1 (busy)");
 8000740:	485c      	ldr	r0, [pc, #368]	@ (80008b4 <process_servo_commands+0x1a0>)
 8000742:	f7ff ffc7 	bl	80006d4 <cdc_debug_print>
            
            // 获取转动时间 (40010) - 现在只用一个寄存器
            uint16_t rotation_time = holding_regs[REG_ROTATION_TIME];
 8000746:	4b58      	ldr	r3, [pc, #352]	@ (80008a8 <process_servo_commands+0x194>)
 8000748:	8a9b      	ldrh	r3, [r3, #20]
 800074a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
            
            // 验证转动时间范围 (1-65535ms)
            if (rotation_time == 0) {
 800074e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000752:	2b00      	cmp	r3, #0
 8000754:	d106      	bne.n	8000764 <process_servo_commands+0x50>
                rotation_time = 1000;  // 默认1秒
 8000756:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
                cdc_debug_print("Using default rotation time: 1000ms");
 800075e:	4856      	ldr	r0, [pc, #344]	@ (80008b8 <process_servo_commands+0x1a4>)
 8000760:	f7ff ffb8 	bl	80006d4 <cdc_debug_print>
            }
            
            // 获取目标角度 (40011-40016，每个角度占用1个寄存器)
            uint16_t target_angles[6];
            target_angles[0] = holding_regs[REG_TARGET_ANGLE1];
 8000764:	4b50      	ldr	r3, [pc, #320]	@ (80008a8 <process_servo_commands+0x194>)
 8000766:	8adb      	ldrh	r3, [r3, #22]
 8000768:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
            target_angles[1] = holding_regs[REG_TARGET_ANGLE2];
 800076c:	4b4e      	ldr	r3, [pc, #312]	@ (80008a8 <process_servo_commands+0x194>)
 800076e:	8b1b      	ldrh	r3, [r3, #24]
 8000770:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
            target_angles[2] = holding_regs[REG_TARGET_ANGLE3];
 8000774:	4b4c      	ldr	r3, [pc, #304]	@ (80008a8 <process_servo_commands+0x194>)
 8000776:	8b5b      	ldrh	r3, [r3, #26]
 8000778:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
            target_angles[3] = holding_regs[REG_TARGET_ANGLE4];
 800077c:	4b4a      	ldr	r3, [pc, #296]	@ (80008a8 <process_servo_commands+0x194>)
 800077e:	8b9b      	ldrh	r3, [r3, #28]
 8000780:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
            target_angles[4] = holding_regs[REG_TARGET_ANGLE5];
 8000784:	4b48      	ldr	r3, [pc, #288]	@ (80008a8 <process_servo_commands+0x194>)
 8000786:	8bdb      	ldrh	r3, [r3, #30]
 8000788:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
            target_angles[5] = holding_regs[REG_TARGET_ANGLE6];
 800078c:	4b46      	ldr	r3, [pc, #280]	@ (80008a8 <process_servo_commands+0x194>)
 800078e:	8c1b      	ldrh	r3, [r3, #32]
 8000790:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
            
            // 验证角度范围 (0-1000)
            for (int i = 0; i < 6; i++) {
 8000794:	2300      	movs	r3, #0
 8000796:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800079a:	e02c      	b.n	80007f6 <process_servo_commands+0xe2>
                if (target_angles[i] > 1000) {
 800079c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	3398      	adds	r3, #152	@ 0x98
 80007a4:	443b      	add	r3, r7
 80007a6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80007aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007ae:	d91d      	bls.n	80007ec <process_servo_commands+0xd8>
                    char warning_msg[60];
                    snprintf(warning_msg, sizeof(warning_msg), "Servo%d angle limited to 1000 (was %d)", i+1, target_angles[i]);
 80007b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	3398      	adds	r3, #152	@ 0x98
 80007be:	443b      	add	r3, r7
 80007c0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80007c4:	1d38      	adds	r0, r7, #4
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	4613      	mov	r3, r2
 80007ca:	4a3c      	ldr	r2, [pc, #240]	@ (80008bc <process_servo_commands+0x1a8>)
 80007cc:	213c      	movs	r1, #60	@ 0x3c
 80007ce:	f01b fe77 	bl	801c4c0 <sniprintf>
                    cdc_debug_print(warning_msg);
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff7d 	bl	80006d4 <cdc_debug_print>
                    target_angles[i] = 1000;
 80007da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	3398      	adds	r3, #152	@ 0x98
 80007e2:	443b      	add	r3, r7
 80007e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007e8:	f823 2c14 	strh.w	r2, [r3, #-20]
            for (int i = 0; i < 6; i++) {
 80007ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007f0:	3301      	adds	r3, #1
 80007f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80007f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007fa:	2b05      	cmp	r3, #5
 80007fc:	ddce      	ble.n	800079c <process_servo_commands+0x88>
            }
            
            // 调试信息：显示所有目标角度
            char angles_msg[128];
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
                    target_angles[0], target_angles[1], target_angles[2], 
 80007fe:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 8000802:	469c      	mov	ip, r3
                    target_angles[0], target_angles[1], target_angles[2], 
 8000804:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 8000808:	461a      	mov	r2, r3
                    target_angles[0], target_angles[1], target_angles[2], 
 800080a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 800080e:	4619      	mov	r1, r3
                    target_angles[3], target_angles[4], target_angles[5], rotation_time);
 8000810:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 8000814:	461c      	mov	r4, r3
                    target_angles[3], target_angles[4], target_angles[5], rotation_time);
 8000816:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 800081a:	461d      	mov	r5, r3
                    target_angles[3], target_angles[4], target_angles[5], rotation_time);
 800081c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 8000820:	461e      	mov	r6, r3
 8000822:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000826:	1d38      	adds	r0, r7, #4
 8000828:	9305      	str	r3, [sp, #20]
 800082a:	9604      	str	r6, [sp, #16]
 800082c:	9503      	str	r5, [sp, #12]
 800082e:	9402      	str	r4, [sp, #8]
 8000830:	9101      	str	r1, [sp, #4]
 8000832:	9200      	str	r2, [sp, #0]
 8000834:	4663      	mov	r3, ip
 8000836:	4a22      	ldr	r2, [pc, #136]	@ (80008c0 <process_servo_commands+0x1ac>)
 8000838:	2180      	movs	r1, #128	@ 0x80
 800083a:	f01b fe41 	bl	801c4c0 <sniprintf>
            cdc_debug_print(angles_msg);
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff47 	bl	80006d4 <cdc_debug_print>
            
            // 发送舵机控制命令到各个舵机 (ID 1-6)
            servo_move_all(target_angles, rotation_time);
 8000846:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 800084a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fb61 	bl	8000f18 <servo_move_all>
            
            // 设置移动状态
            servo_moving = 1;
 8000856:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <process_servo_commands+0x19c>)
 8000858:	2201      	movs	r2, #1
 800085a:	701a      	strb	r2, [r3, #0]
            servo_move_start_time = HAL_GetTick();
 800085c:	f003 fde6 	bl	800442c <HAL_GetTick>
 8000860:	4603      	mov	r3, r0
 8000862:	4a18      	ldr	r2, [pc, #96]	@ (80008c4 <process_servo_commands+0x1b0>)
 8000864:	6013      	str	r3, [r2, #0]
            
            // 状态保持为1表示正在执行任务（忙）
            // holding_regs[REG_ROTATION_TRIGGER] = 1;  // 状态已经是1，不需要改变
            last_rotation_trigger = 1;
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <process_servo_commands+0x198>)
 8000868:	2201      	movs	r2, #1
 800086a:	601a      	str	r2, [r3, #0]
            
            cdc_debug_print("Servo rotation commands sent, status remains 1 (busy)");
 800086c:	4816      	ldr	r0, [pc, #88]	@ (80008c8 <process_servo_commands+0x1b4>)
 800086e:	f7ff ff31 	bl	80006d4 <cdc_debug_print>
        if (!servo_moving) {  // 只有在舵机不在移动时才处理新命令
 8000872:	e00e      	b.n	8000892 <process_servo_commands+0x17e>
        } else {
            cdc_debug_print("Servos are busy, ignoring rotation command");
 8000874:	4815      	ldr	r0, [pc, #84]	@ (80008cc <process_servo_commands+0x1b8>)
 8000876:	f7ff ff2d 	bl	80006d4 <cdc_debug_print>
        if (!servo_moving) {  // 只有在舵机不在移动时才处理新命令
 800087a:	e00a      	b.n	8000892 <process_servo_commands+0x17e>
        }
    } else if (holding_regs[REG_ROTATION_TRIGGER] == 1 && last_rotation_trigger == 1) {
 800087c:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <process_servo_commands+0x194>)
 800087e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8000880:	2b01      	cmp	r3, #1
 8000882:	d106      	bne.n	8000892 <process_servo_commands+0x17e>
 8000884:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <process_servo_commands+0x198>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d102      	bne.n	8000892 <process_servo_commands+0x17e>
        // 如果连续写入1，给出警告（系统正忙）
        cdc_debug_print("Warning: Servo rotation command ignored - system busy (status 1)");
 800088c:	4810      	ldr	r0, [pc, #64]	@ (80008d0 <process_servo_commands+0x1bc>)
 800088e:	f7ff ff21 	bl	80006d4 <cdc_debug_print>
    }
    
    // 更新舵机状态（检查是否完成移动）
    servo_update_status();
 8000892:	f000 fc0d 	bl	80010b0 <servo_update_status>
    
    // 更新上次状态
    last_rotation_trigger = holding_regs[REG_ROTATION_TRIGGER];
 8000896:	4b04      	ldr	r3, [pc, #16]	@ (80008a8 <process_servo_commands+0x194>)
 8000898:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800089a:	461a      	mov	r2, r3
 800089c:	4b03      	ldr	r3, [pc, #12]	@ (80008ac <process_servo_commands+0x198>)
 800089e:	601a      	str	r2, [r3, #0]
}
 80008a0:	bf00      	nop
 80008a2:	379c      	adds	r7, #156	@ 0x9c
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a8:	20000590 	.word	0x20000590
 80008ac:	20000184 	.word	0x20000184
 80008b0:	2000022c 	.word	0x2000022c
 80008b4:	0801d7bc 	.word	0x0801d7bc
 80008b8:	0801d7e8 	.word	0x0801d7e8
 80008bc:	0801d80c 	.word	0x0801d80c
 80008c0:	0801d834 	.word	0x0801d834
 80008c4:	20000230 	.word	0x20000230
 80008c8:	0801d864 	.word	0x0801d864
 80008cc:	0801d89c 	.word	0x0801d89c
 80008d0:	0801d8c8 	.word	0x0801d8c8

080008d4 <process_weight_commands>:

/**
  * @brief  处理称重相关命令
  * @retval None
  */
static void process_weight_commands(void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
    // 检查称重控制位 (40040)
    if (holding_regs[REG_WEIGHT_CONTROL] == 1 && last_weight_control != 1) {
 80008d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <process_weight_commands+0x34>)
 80008da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d10c      	bne.n	80008fa <process_weight_commands+0x26>
 80008e0:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <process_weight_commands+0x38>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d008      	beq.n	80008fa <process_weight_commands+0x26>
        cdc_debug_print("Weight measurement started");
 80008e8:	4809      	ldr	r0, [pc, #36]	@ (8000910 <process_weight_commands+0x3c>)
 80008ea:	f7ff fef3 	bl	80006d4 <cdc_debug_print>
        
        // 置为忙状态
        holding_regs[REG_WEIGHT_CONTROL] = 2;
 80008ee:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <process_weight_commands+0x34>)
 80008f0:	2202      	movs	r2, #2
 80008f2:	865a      	strh	r2, [r3, #50]	@ 0x32
        
        // 4. 称重完成，置状态为3
        holding_regs[REG_WEIGHT_CONTROL] = 3;
        */
        
        cdc_debug_print("Weight measurement in progress");
 80008f4:	4807      	ldr	r0, [pc, #28]	@ (8000914 <process_weight_commands+0x40>)
 80008f6:	f7ff feed 	bl	80006d4 <cdc_debug_print>
    }
    
    // 更新上次状态
    last_weight_control = holding_regs[REG_WEIGHT_CONTROL];
 80008fa:	4b03      	ldr	r3, [pc, #12]	@ (8000908 <process_weight_commands+0x34>)
 80008fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80008fe:	461a      	mov	r2, r3
 8000900:	4b02      	ldr	r3, [pc, #8]	@ (800090c <process_weight_commands+0x38>)
 8000902:	601a      	str	r2, [r3, #0]
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000590 	.word	0x20000590
 800090c:	20000188 	.word	0x20000188
 8000910:	0801d90c 	.word	0x0801d90c
 8000914:	0801d928 	.word	0x0801d928

08000918 <process_pump_commands>:

/**
  * @brief  处理泵相关命令
  * @retval None
  */
static void process_pump_commands(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b08e      	sub	sp, #56	@ 0x38
 800091c:	af00      	add	r7, sp, #0
    // 处理泵1命令
    // 检查泵1初始化触发 (40026) - 只有当状态位(40029)为0时才允许
    if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && 
 800091e:	4b80      	ldr	r3, [pc, #512]	@ (8000b20 <process_pump_commands+0x208>)
 8000920:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000922:	2b01      	cmp	r3, #1
 8000924:	d11a      	bne.n	800095c <process_pump_commands+0x44>
        holding_regs[REG_PUMP1_STATUS] == 0) {  // 状态位必须为0
 8000926:	4b7e      	ldr	r3, [pc, #504]	@ (8000b20 <process_pump_commands+0x208>)
 8000928:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && 
 800092a:	2b00      	cmp	r3, #0
 800092c:	d116      	bne.n	800095c <process_pump_commands+0x44>
        cdc_debug_print("Pump1 initialization triggered");
 800092e:	487d      	ldr	r0, [pc, #500]	@ (8000b24 <process_pump_commands+0x20c>)
 8000930:	f7ff fed0 	bl	80006d4 <cdc_debug_print>
        
        // 发送泵1初始化命令
        if (pump_init_device(1) == 0) {
 8000934:	2001      	movs	r0, #1
 8000936:	f000 f96f 	bl	8000c18 <pump_init_device>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d103      	bne.n	8000948 <process_pump_commands+0x30>
            cdc_debug_print("Pump1 init command sent successfully");
 8000940:	4879      	ldr	r0, [pc, #484]	@ (8000b28 <process_pump_commands+0x210>)
 8000942:	f7ff fec7 	bl	80006d4 <cdc_debug_print>
 8000946:	e002      	b.n	800094e <process_pump_commands+0x36>
            // 位置和状态将通过查询来更新，不在这里直接设置
        } else {
            cdc_debug_print("Pump1 init command failed");
 8000948:	4878      	ldr	r0, [pc, #480]	@ (8000b2c <process_pump_commands+0x214>)
 800094a:	f7ff fec3 	bl	80006d4 <cdc_debug_print>
        }
        
        // 发送后立即置状态为2
        holding_regs[REG_PUMP1_INIT_TRIGGER] = 2;
 800094e:	4b74      	ldr	r3, [pc, #464]	@ (8000b20 <process_pump_commands+0x208>)
 8000950:	2202      	movs	r2, #2
 8000952:	869a      	strh	r2, [r3, #52]	@ 0x34
        last_pump1_init_trigger = 2;
 8000954:	4b76      	ldr	r3, [pc, #472]	@ (8000b30 <process_pump_commands+0x218>)
 8000956:	2202      	movs	r2, #2
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	e00d      	b.n	8000978 <process_pump_commands+0x60>
    } else if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && 
 800095c:	4b70      	ldr	r3, [pc, #448]	@ (8000b20 <process_pump_commands+0x208>)
 800095e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000960:	2b01      	cmp	r3, #1
 8000962:	d109      	bne.n	8000978 <process_pump_commands+0x60>
               holding_regs[REG_PUMP1_STATUS] != 0) {
 8000964:	4b6e      	ldr	r3, [pc, #440]	@ (8000b20 <process_pump_commands+0x208>)
 8000966:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    } else if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && 
 8000968:	2b00      	cmp	r3, #0
 800096a:	d005      	beq.n	8000978 <process_pump_commands+0x60>
        cdc_debug_print("Pump1 init rejected: status not 0");
 800096c:	4871      	ldr	r0, [pc, #452]	@ (8000b34 <process_pump_commands+0x21c>)
 800096e:	f7ff feb1 	bl	80006d4 <cdc_debug_print>
        // 立即置初始化位为2，表示无法执行
        holding_regs[REG_PUMP1_INIT_TRIGGER] = 2;
 8000972:	4b6b      	ldr	r3, [pc, #428]	@ (8000b20 <process_pump_commands+0x208>)
 8000974:	2202      	movs	r2, #2
 8000976:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
    
    // 检查泵1控制触发 (40028) - 只有当状态位(40029)为0时才允许
    if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && 
 8000978:	4b69      	ldr	r3, [pc, #420]	@ (8000b20 <process_pump_commands+0x208>)
 800097a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800097c:	2b01      	cmp	r3, #1
 800097e:	d137      	bne.n	80009f0 <process_pump_commands+0xd8>
        holding_regs[REG_PUMP1_STATUS] == 0) {  // 状态位必须为0
 8000980:	4b67      	ldr	r3, [pc, #412]	@ (8000b20 <process_pump_commands+0x208>)
 8000982:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && 
 8000984:	2b00      	cmp	r3, #0
 8000986:	d133      	bne.n	80009f0 <process_pump_commands+0xd8>
        cdc_debug_print("Pump1 control triggered");
 8000988:	486b      	ldr	r0, [pc, #428]	@ (8000b38 <process_pump_commands+0x220>)
 800098a:	f7ff fea3 	bl	80006d4 <cdc_debug_print>
        
        // 获取目标位置 (40027)
        uint16_t target_position = holding_regs[REG_PUMP1_ABS_POSITION];
 800098e:	4b64      	ldr	r3, [pc, #400]	@ (8000b20 <process_pump_commands+0x208>)
 8000990:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000992:	86fb      	strh	r3, [r7, #54]	@ 0x36
        
        // 验证目标位置范围 (0-6000)
        if (target_position <= 6000) {
 8000994:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000996:	f241 7270 	movw	r2, #6000	@ 0x1770
 800099a:	4293      	cmp	r3, r2
 800099c:	d81e      	bhi.n	80009dc <process_pump_commands+0xc4>
            // 发送泵1移动命令
            if (pump_move_absolute_device(1, target_position) == 0) {
 800099e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80009a0:	4619      	mov	r1, r3
 80009a2:	2001      	movs	r0, #1
 80009a4:	f000 f946 	bl	8000c34 <pump_move_absolute_device>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d112      	bne.n	80009d4 <process_pump_commands+0xbc>
                pump1_move_start_time = HAL_GetTick();  // 记录开始时间
 80009ae:	f003 fd3d 	bl	800442c <HAL_GetTick>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4a61      	ldr	r2, [pc, #388]	@ (8000b3c <process_pump_commands+0x224>)
 80009b6:	6013      	str	r3, [r2, #0]
                // 状态将通过查询错误码来更新，不在这里直接设置
                cdc_debug_print("Pump1 move command sent successfully");
 80009b8:	4861      	ldr	r0, [pc, #388]	@ (8000b40 <process_pump_commands+0x228>)
 80009ba:	f7ff fe8b 	bl	80006d4 <cdc_debug_print>
                
                // 调试信息：显示目标位置
                char pos_msg[50];
                snprintf(pos_msg, sizeof(pos_msg), "Pump1 moving to position: %d", target_position);
 80009be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80009c0:	4638      	mov	r0, r7
 80009c2:	4a60      	ldr	r2, [pc, #384]	@ (8000b44 <process_pump_commands+0x22c>)
 80009c4:	2132      	movs	r1, #50	@ 0x32
 80009c6:	f01b fd7b 	bl	801c4c0 <sniprintf>
                cdc_debug_print(pos_msg);
 80009ca:	463b      	mov	r3, r7
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fe81 	bl	80006d4 <cdc_debug_print>
 80009d2:	e006      	b.n	80009e2 <process_pump_commands+0xca>
            } else {
                cdc_debug_print("Pump1 move command failed");
 80009d4:	485c      	ldr	r0, [pc, #368]	@ (8000b48 <process_pump_commands+0x230>)
 80009d6:	f7ff fe7d 	bl	80006d4 <cdc_debug_print>
 80009da:	e002      	b.n	80009e2 <process_pump_commands+0xca>
            }
        } else {
            cdc_debug_print("Pump1 target position out of range (0-6000)");
 80009dc:	485b      	ldr	r0, [pc, #364]	@ (8000b4c <process_pump_commands+0x234>)
 80009de:	f7ff fe79 	bl	80006d4 <cdc_debug_print>
        }
        
        // 发送后立即置状态为2
        holding_regs[REG_PUMP1_CONTROL_TRIGGER] = 2;
 80009e2:	4b4f      	ldr	r3, [pc, #316]	@ (8000b20 <process_pump_commands+0x208>)
 80009e4:	2202      	movs	r2, #2
 80009e6:	871a      	strh	r2, [r3, #56]	@ 0x38
        last_pump1_control_trigger = 2;
 80009e8:	4b59      	ldr	r3, [pc, #356]	@ (8000b50 <process_pump_commands+0x238>)
 80009ea:	2202      	movs	r2, #2
 80009ec:	601a      	str	r2, [r3, #0]
        holding_regs[REG_PUMP1_STATUS] == 0) {  // 状态位必须为0
 80009ee:	e00d      	b.n	8000a0c <process_pump_commands+0xf4>
    } else if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && 
 80009f0:	4b4b      	ldr	r3, [pc, #300]	@ (8000b20 <process_pump_commands+0x208>)
 80009f2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d109      	bne.n	8000a0c <process_pump_commands+0xf4>
               holding_regs[REG_PUMP1_STATUS] != 0) {
 80009f8:	4b49      	ldr	r3, [pc, #292]	@ (8000b20 <process_pump_commands+0x208>)
 80009fa:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    } else if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && 
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d005      	beq.n	8000a0c <process_pump_commands+0xf4>
        cdc_debug_print("Pump1 control rejected: status not 0");
 8000a00:	4854      	ldr	r0, [pc, #336]	@ (8000b54 <process_pump_commands+0x23c>)
 8000a02:	f7ff fe67 	bl	80006d4 <cdc_debug_print>
        // 立即置控制位为2，表示无法执行
        holding_regs[REG_PUMP1_CONTROL_TRIGGER] = 2;
 8000a06:	4b46      	ldr	r3, [pc, #280]	@ (8000b20 <process_pump_commands+0x208>)
 8000a08:	2202      	movs	r2, #2
 8000a0a:	871a      	strh	r2, [r3, #56]	@ 0x38
    }
    
    // 处理泵2命令 (类似泵1)
    // 检查泵2初始化触发 (40031) - 只有当状态位(40034)为0时才允许
    if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && 
 8000a0c:	4b44      	ldr	r3, [pc, #272]	@ (8000b20 <process_pump_commands+0x208>)
 8000a0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d11b      	bne.n	8000a4c <process_pump_commands+0x134>
        holding_regs[REG_PUMP2_STATUS] == 0) {  // 状态位必须为0
 8000a14:	4b42      	ldr	r3, [pc, #264]	@ (8000b20 <process_pump_commands+0x208>)
 8000a16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
    if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && 
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d116      	bne.n	8000a4c <process_pump_commands+0x134>
        cdc_debug_print("Pump2 initialization triggered");
 8000a1e:	484e      	ldr	r0, [pc, #312]	@ (8000b58 <process_pump_commands+0x240>)
 8000a20:	f7ff fe58 	bl	80006d4 <cdc_debug_print>
        
        // 发送泵2初始化命令
        if (pump_init_device(2) == 0) {
 8000a24:	2002      	movs	r0, #2
 8000a26:	f000 f8f7 	bl	8000c18 <pump_init_device>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d103      	bne.n	8000a38 <process_pump_commands+0x120>
            cdc_debug_print("Pump2 init command sent successfully");
 8000a30:	484a      	ldr	r0, [pc, #296]	@ (8000b5c <process_pump_commands+0x244>)
 8000a32:	f7ff fe4f 	bl	80006d4 <cdc_debug_print>
 8000a36:	e002      	b.n	8000a3e <process_pump_commands+0x126>
            // 位置和状态将通过查询来更新，不在这里直接设置
        } else {
            cdc_debug_print("Pump2 init command failed");
 8000a38:	4849      	ldr	r0, [pc, #292]	@ (8000b60 <process_pump_commands+0x248>)
 8000a3a:	f7ff fe4b 	bl	80006d4 <cdc_debug_print>
        }
        
        // 发送后立即置状态为2
        holding_regs[REG_PUMP2_INIT_TRIGGER] = 2;
 8000a3e:	4b38      	ldr	r3, [pc, #224]	@ (8000b20 <process_pump_commands+0x208>)
 8000a40:	2202      	movs	r2, #2
 8000a42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        last_pump2_init_trigger = 2;
 8000a44:	4b47      	ldr	r3, [pc, #284]	@ (8000b64 <process_pump_commands+0x24c>)
 8000a46:	2202      	movs	r2, #2
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	e00e      	b.n	8000a6a <process_pump_commands+0x152>
    } else if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && 
 8000a4c:	4b34      	ldr	r3, [pc, #208]	@ (8000b20 <process_pump_commands+0x208>)
 8000a4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d10a      	bne.n	8000a6a <process_pump_commands+0x152>
               holding_regs[REG_PUMP2_STATUS] != 0) {
 8000a54:	4b32      	ldr	r3, [pc, #200]	@ (8000b20 <process_pump_commands+0x208>)
 8000a56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
    } else if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && 
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d005      	beq.n	8000a6a <process_pump_commands+0x152>
        cdc_debug_print("Pump2 init rejected: status not 0");
 8000a5e:	4842      	ldr	r0, [pc, #264]	@ (8000b68 <process_pump_commands+0x250>)
 8000a60:	f7ff fe38 	bl	80006d4 <cdc_debug_print>
        // 立即置初始化位为2，表示无法执行
        holding_regs[REG_PUMP2_INIT_TRIGGER] = 2;
 8000a64:	4b2e      	ldr	r3, [pc, #184]	@ (8000b20 <process_pump_commands+0x208>)
 8000a66:	2202      	movs	r2, #2
 8000a68:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    
    // 检查泵2控制触发 (40033) - 只有当状态位(40034)为0时才允许
    if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && 
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b20 <process_pump_commands+0x208>)
 8000a6c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d13a      	bne.n	8000aea <process_pump_commands+0x1d2>
        holding_regs[REG_PUMP2_STATUS] == 0) {  // 状态位必须为0
 8000a74:	4b2a      	ldr	r3, [pc, #168]	@ (8000b20 <process_pump_commands+0x208>)
 8000a76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
    if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && 
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d135      	bne.n	8000aea <process_pump_commands+0x1d2>
            cdc_debug_print("Pump2 control triggered");
 8000a7e:	483b      	ldr	r0, [pc, #236]	@ (8000b6c <process_pump_commands+0x254>)
 8000a80:	f7ff fe28 	bl	80006d4 <cdc_debug_print>
            
            // 获取目标位置 (40032)
            uint16_t target_position = holding_regs[REG_PUMP2_ABS_POSITION];
 8000a84:	4b26      	ldr	r3, [pc, #152]	@ (8000b20 <process_pump_commands+0x208>)
 8000a86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000a8a:	86bb      	strh	r3, [r7, #52]	@ 0x34
            
            // 验证目标位置范围 (0-6000)
            if (target_position <= 6000) {
 8000a8c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000a8e:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d81e      	bhi.n	8000ad4 <process_pump_commands+0x1bc>
                // 发送泵2移动命令
                if (pump_move_absolute_device(2, target_position) == 0) {
 8000a96:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000a98:	4619      	mov	r1, r3
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	f000 f8ca 	bl	8000c34 <pump_move_absolute_device>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d112      	bne.n	8000acc <process_pump_commands+0x1b4>
                    pump2_move_start_time = HAL_GetTick();  // 记录开始时间
 8000aa6:	f003 fcc1 	bl	800442c <HAL_GetTick>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4a30      	ldr	r2, [pc, #192]	@ (8000b70 <process_pump_commands+0x258>)
 8000aae:	6013      	str	r3, [r2, #0]
                    // 状态将通过查询错误码来更新，不在这里直接设置
                    cdc_debug_print("Pump2 move command sent successfully");
 8000ab0:	4830      	ldr	r0, [pc, #192]	@ (8000b74 <process_pump_commands+0x25c>)
 8000ab2:	f7ff fe0f 	bl	80006d4 <cdc_debug_print>
                    
                    // 调试信息：显示目标位置
                    char pos_msg[50];
                    snprintf(pos_msg, sizeof(pos_msg), "Pump2 moving to position: %d", target_position);
 8000ab6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000ab8:	4638      	mov	r0, r7
 8000aba:	4a2f      	ldr	r2, [pc, #188]	@ (8000b78 <process_pump_commands+0x260>)
 8000abc:	2132      	movs	r1, #50	@ 0x32
 8000abe:	f01b fcff 	bl	801c4c0 <sniprintf>
                    cdc_debug_print(pos_msg);
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fe05 	bl	80006d4 <cdc_debug_print>
 8000aca:	e006      	b.n	8000ada <process_pump_commands+0x1c2>
                } else {
                    cdc_debug_print("Pump2 move command failed");
 8000acc:	482b      	ldr	r0, [pc, #172]	@ (8000b7c <process_pump_commands+0x264>)
 8000ace:	f7ff fe01 	bl	80006d4 <cdc_debug_print>
 8000ad2:	e002      	b.n	8000ada <process_pump_commands+0x1c2>
                }
            } else {
                cdc_debug_print("Pump2 target position out of range (0-6000)");
 8000ad4:	482a      	ldr	r0, [pc, #168]	@ (8000b80 <process_pump_commands+0x268>)
 8000ad6:	f7ff fdfd 	bl	80006d4 <cdc_debug_print>
            }
        
        // 发送后立即置状态为2
        holding_regs[REG_PUMP2_CONTROL_TRIGGER] = 2;
 8000ada:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <process_pump_commands+0x208>)
 8000adc:	2202      	movs	r2, #2
 8000ade:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
        last_pump2_control_trigger = 2;
 8000ae2:	4b28      	ldr	r3, [pc, #160]	@ (8000b84 <process_pump_commands+0x26c>)
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	601a      	str	r2, [r3, #0]
        holding_regs[REG_PUMP2_STATUS] == 0) {  // 状态位必须为0
 8000ae8:	e010      	b.n	8000b0c <process_pump_commands+0x1f4>
    } else if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && 
 8000aea:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <process_pump_commands+0x208>)
 8000aec:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d10b      	bne.n	8000b0c <process_pump_commands+0x1f4>
               holding_regs[REG_PUMP2_STATUS] != 0) {
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <process_pump_commands+0x208>)
 8000af6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
    } else if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && 
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d006      	beq.n	8000b0c <process_pump_commands+0x1f4>
        cdc_debug_print("Pump2 control rejected: status not 0");
 8000afe:	4822      	ldr	r0, [pc, #136]	@ (8000b88 <process_pump_commands+0x270>)
 8000b00:	f7ff fde8 	bl	80006d4 <cdc_debug_print>
        // 立即置控制位为2，表示无法执行
        holding_regs[REG_PUMP2_CONTROL_TRIGGER] = 2;
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <process_pump_commands+0x208>)
 8000b06:	2202      	movs	r2, #2
 8000b08:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    }
    
    // 更新泵状态（检查是否完成移动）
    pump_update_status(1);  // 更新泵1状态
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f000 f8a5 	bl	8000c5c <pump_update_status>
    pump_update_status(2);  // 更新泵2状态
 8000b12:	2002      	movs	r0, #2
 8000b14:	f000 f8a2 	bl	8000c5c <pump_update_status>
}
 8000b18:	bf00      	nop
 8000b1a:	3738      	adds	r7, #56	@ 0x38
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000590 	.word	0x20000590
 8000b24:	0801d948 	.word	0x0801d948
 8000b28:	0801d968 	.word	0x0801d968
 8000b2c:	0801d990 	.word	0x0801d990
 8000b30:	2000018c 	.word	0x2000018c
 8000b34:	0801d9ac 	.word	0x0801d9ac
 8000b38:	0801d9d0 	.word	0x0801d9d0
 8000b3c:	20000224 	.word	0x20000224
 8000b40:	0801d9e8 	.word	0x0801d9e8
 8000b44:	0801da10 	.word	0x0801da10
 8000b48:	0801da30 	.word	0x0801da30
 8000b4c:	0801da4c 	.word	0x0801da4c
 8000b50:	20000190 	.word	0x20000190
 8000b54:	0801da78 	.word	0x0801da78
 8000b58:	0801daa0 	.word	0x0801daa0
 8000b5c:	0801dac0 	.word	0x0801dac0
 8000b60:	0801dae8 	.word	0x0801dae8
 8000b64:	20000194 	.word	0x20000194
 8000b68:	0801db04 	.word	0x0801db04
 8000b6c:	0801db28 	.word	0x0801db28
 8000b70:	20000228 	.word	0x20000228
 8000b74:	0801db40 	.word	0x0801db40
 8000b78:	0801db68 	.word	0x0801db68
 8000b7c:	0801db88 	.word	0x0801db88
 8000b80:	0801dba4 	.word	0x0801dba4
 8000b84:	20000198 	.word	0x20000198
 8000b88:	0801dbd0 	.word	0x0801dbd0

08000b8c <update_sensor_data>:

/**
  * @brief  更新传感器数据 (只读寄存器)
  * @retval None
  */
static void update_sensor_data(void) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
    // TODO: 在这里添加传感器数据更新业务代码
    
    // 示例1：更新舵机当前角度 (40017-40022，每个角度占用1个寄存器)
    // 注意：舵机位置已在servo_update_status中更新，这里做周期性验证
    static uint32_t servo_read_counter = 0;
    if (servo_read_counter % 10 == 0 && !servo_moving) {  // 每1秒更新一次，且不在移动时
 8000b90:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <update_sensor_data+0x74>)
 8000b92:	6819      	ldr	r1, [r3, #0]
 8000b94:	4b1b      	ldr	r3, [pc, #108]	@ (8000c04 <update_sensor_data+0x78>)
 8000b96:	fba3 2301 	umull	r2, r3, r3, r1
 8000b9a:	08da      	lsrs	r2, r3, #3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	4413      	add	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	1aca      	subs	r2, r1, r3
 8000ba6:	2a00      	cmp	r2, #0
 8000ba8:	d11d      	bne.n	8000be6 <update_sensor_data+0x5a>
 8000baa:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <update_sensor_data+0x7c>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d119      	bne.n	8000be6 <update_sensor_data+0x5a>
        // 周期性读取舵机位置进行验证
        servo_read_all_positions();
 8000bb2:	f000 f9f9 	bl	8000fa8 <servo_read_all_positions>
        // 更新当前角度寄存器 (40017-40022)
        holding_regs[REG_CURRENT_ANGLE1] = servo_current_positions[0];
 8000bb6:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <update_sensor_data+0x80>)
 8000bb8:	881a      	ldrh	r2, [r3, #0]
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <update_sensor_data+0x84>)
 8000bbc:	845a      	strh	r2, [r3, #34]	@ 0x22
        holding_regs[REG_CURRENT_ANGLE2] = servo_current_positions[1];
 8000bbe:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <update_sensor_data+0x80>)
 8000bc0:	885a      	ldrh	r2, [r3, #2]
 8000bc2:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <update_sensor_data+0x84>)
 8000bc4:	849a      	strh	r2, [r3, #36]	@ 0x24
        holding_regs[REG_CURRENT_ANGLE3] = servo_current_positions[2];
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <update_sensor_data+0x80>)
 8000bc8:	889a      	ldrh	r2, [r3, #4]
 8000bca:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <update_sensor_data+0x84>)
 8000bcc:	84da      	strh	r2, [r3, #38]	@ 0x26
        holding_regs[REG_CURRENT_ANGLE4] = servo_current_positions[3];
 8000bce:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <update_sensor_data+0x80>)
 8000bd0:	88da      	ldrh	r2, [r3, #6]
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <update_sensor_data+0x84>)
 8000bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
        holding_regs[REG_CURRENT_ANGLE5] = servo_current_positions[4];
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <update_sensor_data+0x80>)
 8000bd8:	891a      	ldrh	r2, [r3, #8]
 8000bda:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <update_sensor_data+0x84>)
 8000bdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        holding_regs[REG_CURRENT_ANGLE6] = servo_current_positions[5];
 8000bde:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <update_sensor_data+0x80>)
 8000be0:	895a      	ldrh	r2, [r3, #10]
 8000be2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <update_sensor_data+0x84>)
 8000be4:	859a      	strh	r2, [r3, #44]	@ 0x2c
    }
    servo_read_counter++;
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <update_sensor_data+0x74>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	3301      	adds	r3, #1
 8000bec:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <update_sensor_data+0x74>)
 8000bee:	6013      	str	r3, [r2, #0]
        /*
        pump_get_status_device(1);
        pump_get_status_device(2);
        */
    }
    pump_read_counter++;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <update_sensor_data+0x88>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	4a07      	ldr	r2, [pc, #28]	@ (8000c14 <update_sensor_data+0x88>)
 8000bf8:	6013      	str	r3, [r2, #0]
        uint8_t object_detected = gpio_read_object_sensor();
        holding_regs[REG_OBJECT_DETECTION] = object_detected ? 2 : 1;  // 1=无物体；2=有
    }
    detection_read_counter++;
    */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000240 	.word	0x20000240
 8000c04:	cccccccd 	.word	0xcccccccd
 8000c08:	2000022c 	.word	0x2000022c
 8000c0c:	20000234 	.word	0x20000234
 8000c10:	20000590 	.word	0x20000590
 8000c14:	20000244 	.word	0x20000244

08000c18 <pump_init_device>:
/**
  * @brief  初始化指定泵
  * @param  pump_id: 泵ID (1或2)
  * @retval 0: 成功, -1: 失败
  */
static int pump_init_device(uint8_t pump_id) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
    return pump_init(pump_id);
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f002 fec3 	bl	80039b0 <pump_init>
 8000c2a:	4603      	mov	r3, r0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <pump_move_absolute_device>:
  * @brief  泵移动到绝对位置
  * @param  pump_id: 泵ID (1或2)
  * @param  position: 目标位置 (0-6000步)
  * @retval 0: 成功, -1: 失败
  */
static int pump_move_absolute_device(uint8_t pump_id, uint16_t position) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	460a      	mov	r2, r1
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	4613      	mov	r3, r2
 8000c42:	80bb      	strh	r3, [r7, #4]
    return pump_move_absolute(pump_id, position);
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	88ba      	ldrh	r2, [r7, #4]
 8000c48:	4611      	mov	r1, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fec2 	bl	80039d4 <pump_move_absolute>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <pump_update_status>:
/**
  * @brief  更新泵状态 - 使用实际的DT协议查询
  * @param  pump_id: 泵ID (1或2)
  * @retval None
  */
static void pump_update_status(uint8_t pump_id) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b0d8      	sub	sp, #352	@ 0x160
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4602      	mov	r2, r0
 8000c64:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c68:	f2a3 1359 	subw	r3, r3, #345	@ 0x159
 8000c6c:	701a      	strb	r2, [r3, #0]
    static uint32_t last_update_time = 0;
    static uint32_t comm_error_count = 0;
    uint32_t current_time = HAL_GetTick();
 8000c6e:	f003 fbdd 	bl	800442c <HAL_GetTick>
 8000c72:	f8c7 015c 	str.w	r0, [r7, #348]	@ 0x15c
    
    // 如果通信错误次数过多，进一步降低查询频率
    uint32_t query_interval = (comm_error_count > 5) ? 10000 : 3000;  // 10秒或3秒
 8000c76:	4b99      	ldr	r3, [pc, #612]	@ (8000edc <pump_update_status+0x280>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b05      	cmp	r3, #5
 8000c7c:	d902      	bls.n	8000c84 <pump_update_status+0x28>
 8000c7e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000c82:	e001      	b.n	8000c88 <pump_update_status+0x2c>
 8000c84:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000c88:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    
    // 降低查询频率，减少UART超时
    if (current_time - last_update_time < query_interval) {
 8000c8c:	4b94      	ldr	r3, [pc, #592]	@ (8000ee0 <pump_update_status+0x284>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	f200 8119 	bhi.w	8000ed2 <pump_update_status+0x276>
        return;
    }
    last_update_time = current_time;
 8000ca0:	4a8f      	ldr	r2, [pc, #572]	@ (8000ee0 <pump_update_status+0x284>)
 8000ca2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000ca6:	6013      	str	r3, [r2, #0]
    
    char error_response[256];
    int current_position;
    
    if (pump_id == 1) {
 8000ca8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000cac:	f2a3 1359 	subw	r3, r3, #345	@ 0x159
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	f040 8085 	bne.w	8000dc2 <pump_update_status+0x166>
        // 查询错误码 (/1QR)
        if (pump_query_error(1, error_response) == 0) {
 8000cb8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f002 fea2 	bl	8003a08 <pump_query_error>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d13f      	bne.n	8000d4a <pump_update_status+0xee>
            // 从响应中提取错误码数字部分
            char* code_start = strchr(error_response, '`');
 8000cca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000cce:	2160      	movs	r1, #96	@ 0x60
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f01b fcaf 	bl	801c634 <strchr>
 8000cd6:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
            if (code_start != NULL) {
 8000cda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d041      	beq.n	8000d66 <pump_update_status+0x10a>
                code_start++; // 跳过 '`' 字符
 8000ce2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                int error_code = atoi(code_start);
 8000cec:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 8000cf0:	f01b fa4c 	bl	801c18c <atoi>
 8000cf4:	f8c7 0148 	str.w	r0, [r7, #328]	@ 0x148
                
                // 直接将错误码写入状态寄存器
                holding_regs[REG_PUMP1_STATUS] = error_code;
 8000cf8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	4b79      	ldr	r3, [pc, #484]	@ (8000ee4 <pump_update_status+0x288>)
 8000d00:	875a      	strh	r2, [r3, #58]	@ 0x3a
                
                // 更新内部忙状态逻辑（用于内部判断）
                if (error_code == 15) {  // 指令溢出 = 忙
 8000d02:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000d06:	2b0f      	cmp	r3, #15
 8000d08:	d103      	bne.n	8000d12 <pump_update_status+0xb6>
                    pump1_busy = 1;
 8000d0a:	4b77      	ldr	r3, [pc, #476]	@ (8000ee8 <pump_update_status+0x28c>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e00a      	b.n	8000d28 <pump_update_status+0xcc>
                } else if (error_code == 0) {  // 无误 = 不忙
 8000d12:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d103      	bne.n	8000d22 <pump_update_status+0xc6>
                    pump1_busy = 0;
 8000d1a:	4b73      	ldr	r3, [pc, #460]	@ (8000ee8 <pump_update_status+0x28c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	e002      	b.n	8000d28 <pump_update_status+0xcc>
                } else {
                    pump1_busy = 1;  // 其他错误也认为是忙状态
 8000d22:	4b71      	ldr	r3, [pc, #452]	@ (8000ee8 <pump_update_status+0x28c>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
                }
                
                char debug_msg[60];
                snprintf(debug_msg, sizeof(debug_msg), "Pump1 error code: %d", error_code);
 8000d28:	f107 0008 	add.w	r0, r7, #8
 8000d2c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000d30:	4a6e      	ldr	r2, [pc, #440]	@ (8000eec <pump_update_status+0x290>)
 8000d32:	213c      	movs	r1, #60	@ 0x3c
 8000d34:	f01b fbc4 	bl	801c4c0 <sniprintf>
                cdc_debug_print(debug_msg);
 8000d38:	f107 0308 	add.w	r3, r7, #8
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fcc9 	bl	80006d4 <cdc_debug_print>
                
                comm_error_count = 0;  // 成功通信，重置错误计数
 8000d42:	4b66      	ldr	r3, [pc, #408]	@ (8000edc <pump_update_status+0x280>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	e00d      	b.n	8000d66 <pump_update_status+0x10a>
            }
        } else {
            // 查询失败，设置错误码255表示通信故障
            holding_regs[REG_PUMP1_STATUS] = 255;
 8000d4a:	4b66      	ldr	r3, [pc, #408]	@ (8000ee4 <pump_update_status+0x288>)
 8000d4c:	22ff      	movs	r2, #255	@ 0xff
 8000d4e:	875a      	strh	r2, [r3, #58]	@ 0x3a
            pump1_busy = 1;  // 通信故障时认为忙
 8000d50:	4b65      	ldr	r3, [pc, #404]	@ (8000ee8 <pump_update_status+0x28c>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	701a      	strb	r2, [r3, #0]
            comm_error_count++;  // 增加错误计数
 8000d56:	4b61      	ldr	r3, [pc, #388]	@ (8000edc <pump_update_status+0x280>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	4a5f      	ldr	r2, [pc, #380]	@ (8000edc <pump_update_status+0x280>)
 8000d5e:	6013      	str	r3, [r2, #0]
            cdc_debug_print("Pump1 query error failed - no response");
 8000d60:	4863      	ldr	r0, [pc, #396]	@ (8000ef0 <pump_update_status+0x294>)
 8000d62:	f7ff fcb7 	bl	80006d4 <cdc_debug_print>
        }
        
        // 查询当前活塞位置 (/1?4R)
        if (pump_query_position(1, &current_position) == 0) {
 8000d66:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f002 fe5f 	bl	8003a30 <pump_query_position>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d120      	bne.n	8000dba <pump_update_status+0x15e>
            pump1_current_pos = current_position;
 8000d78:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d7c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	4b5b      	ldr	r3, [pc, #364]	@ (8000ef4 <pump_update_status+0x298>)
 8000d86:	801a      	strh	r2, [r3, #0]
            holding_regs[REG_PUMP1_CURRENT_POSITION] = current_position;
 8000d88:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d8c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	4b53      	ldr	r3, [pc, #332]	@ (8000ee4 <pump_update_status+0x288>)
 8000d96:	879a      	strh	r2, [r3, #60]	@ 0x3c
            
            char pos_msg[50];
            snprintf(pos_msg, sizeof(pos_msg), "Pump1 position: %d", current_position);
 8000d98:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d9c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f107 0008 	add.w	r0, r7, #8
 8000da6:	4a54      	ldr	r2, [pc, #336]	@ (8000ef8 <pump_update_status+0x29c>)
 8000da8:	2132      	movs	r1, #50	@ 0x32
 8000daa:	f01b fb89 	bl	801c4c0 <sniprintf>
            cdc_debug_print(pos_msg);
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fc8e 	bl	80006d4 <cdc_debug_print>
 8000db8:	e08c      	b.n	8000ed4 <pump_update_status+0x278>
        } else {
            cdc_debug_print("Pump1 position query failed");
 8000dba:	4850      	ldr	r0, [pc, #320]	@ (8000efc <pump_update_status+0x2a0>)
 8000dbc:	f7ff fc8a 	bl	80006d4 <cdc_debug_print>
 8000dc0:	e088      	b.n	8000ed4 <pump_update_status+0x278>
        }
        
    } else if (pump_id == 2) {
 8000dc2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000dc6:	f2a3 1359 	subw	r3, r3, #345	@ 0x159
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	f040 8081 	bne.w	8000ed4 <pump_update_status+0x278>
        // 查询错误码 (/2QR)
        if (pump_query_error(2, error_response) == 0) {
 8000dd2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f002 fe15 	bl	8003a08 <pump_query_error>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d13d      	bne.n	8000e60 <pump_update_status+0x204>
            char* code_start = strchr(error_response, '`');
 8000de4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000de8:	2160      	movs	r1, #96	@ 0x60
 8000dea:	4618      	mov	r0, r3
 8000dec:	f01b fc22 	bl	801c634 <strchr>
 8000df0:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
            if (code_start != NULL) {
 8000df4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d03b      	beq.n	8000e74 <pump_update_status+0x218>
                code_start++; // 跳过 '`' 字符
 8000dfc:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000e00:	3301      	adds	r3, #1
 8000e02:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
                int error_code = atoi(code_start);
 8000e06:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 8000e0a:	f01b f9bf 	bl	801c18c <atoi>
 8000e0e:	f8c7 0150 	str.w	r0, [r7, #336]	@ 0x150
                
                // 直接将错误码写入状态寄存器
                holding_regs[REG_PUMP2_STATUS] = error_code;
 8000e12:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	4b32      	ldr	r3, [pc, #200]	@ (8000ee4 <pump_update_status+0x288>)
 8000e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
                
                // 更新内部忙状态逻辑（用于内部判断）
                if (error_code == 15) {  // 指令溢出 = 忙
 8000e1e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000e22:	2b0f      	cmp	r3, #15
 8000e24:	d103      	bne.n	8000e2e <pump_update_status+0x1d2>
                    pump2_busy = 1;
 8000e26:	4b36      	ldr	r3, [pc, #216]	@ (8000f00 <pump_update_status+0x2a4>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	701a      	strb	r2, [r3, #0]
 8000e2c:	e00a      	b.n	8000e44 <pump_update_status+0x1e8>
                } else if (error_code == 0) {  // 无误 = 不忙
 8000e2e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d103      	bne.n	8000e3e <pump_update_status+0x1e2>
                    pump2_busy = 0;
 8000e36:	4b32      	ldr	r3, [pc, #200]	@ (8000f00 <pump_update_status+0x2a4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
 8000e3c:	e002      	b.n	8000e44 <pump_update_status+0x1e8>
                } else {
                    pump2_busy = 1;  // 其他错误也认为是忙状态
 8000e3e:	4b30      	ldr	r3, [pc, #192]	@ (8000f00 <pump_update_status+0x2a4>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	701a      	strb	r2, [r3, #0]
                }
                
                char debug_msg[60];
                snprintf(debug_msg, sizeof(debug_msg), "Pump2 error code: %d", error_code);
 8000e44:	f107 0008 	add.w	r0, r7, #8
 8000e48:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8000f04 <pump_update_status+0x2a8>)
 8000e4e:	213c      	movs	r1, #60	@ 0x3c
 8000e50:	f01b fb36 	bl	801c4c0 <sniprintf>
                cdc_debug_print(debug_msg);
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fc3b 	bl	80006d4 <cdc_debug_print>
 8000e5e:	e009      	b.n	8000e74 <pump_update_status+0x218>
            }
        } else {
            // 查询失败，设置错误码255表示通信故障  
            holding_regs[REG_PUMP2_STATUS] = 255;
 8000e60:	4b20      	ldr	r3, [pc, #128]	@ (8000ee4 <pump_update_status+0x288>)
 8000e62:	22ff      	movs	r2, #255	@ 0xff
 8000e64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
            pump2_busy = 1;  // 通信故障时认为忙
 8000e68:	4b25      	ldr	r3, [pc, #148]	@ (8000f00 <pump_update_status+0x2a4>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]
            cdc_debug_print("Pump2 UART RX timeout - no response");
 8000e6e:	4826      	ldr	r0, [pc, #152]	@ (8000f08 <pump_update_status+0x2ac>)
 8000e70:	f7ff fc30 	bl	80006d4 <cdc_debug_print>
        }
        
        // 查询当前活塞位置 (/2?4R)
        if (pump_query_position(2, &current_position) == 0) {
 8000e74:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e78:	4619      	mov	r1, r3
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f002 fdd8 	bl	8003a30 <pump_query_position>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d121      	bne.n	8000eca <pump_update_status+0x26e>
            pump2_current_pos = current_position;
 8000e86:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000e8a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	4b1e      	ldr	r3, [pc, #120]	@ (8000f0c <pump_update_status+0x2b0>)
 8000e94:	801a      	strh	r2, [r3, #0]
            holding_regs[REG_PUMP2_CURRENT_POSITION] = current_position;
 8000e96:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000e9a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <pump_update_status+0x288>)
 8000ea4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
            
            char pos_msg[50];
            snprintf(pos_msg, sizeof(pos_msg), "Pump2 position: %d", current_position);
 8000ea8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000eac:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f107 0008 	add.w	r0, r7, #8
 8000eb6:	4a16      	ldr	r2, [pc, #88]	@ (8000f10 <pump_update_status+0x2b4>)
 8000eb8:	2132      	movs	r1, #50	@ 0x32
 8000eba:	f01b fb01 	bl	801c4c0 <sniprintf>
            cdc_debug_print(pos_msg);
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fc06 	bl	80006d4 <cdc_debug_print>
 8000ec8:	e004      	b.n	8000ed4 <pump_update_status+0x278>
        } else {
            cdc_debug_print("Pump2 position query failed");
 8000eca:	4812      	ldr	r0, [pc, #72]	@ (8000f14 <pump_update_status+0x2b8>)
 8000ecc:	f7ff fc02 	bl	80006d4 <cdc_debug_print>
 8000ed0:	e000      	b.n	8000ed4 <pump_update_status+0x278>
        return;
 8000ed2:	bf00      	nop
        }
    }
}
 8000ed4:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000248 	.word	0x20000248
 8000ee0:	2000024c 	.word	0x2000024c
 8000ee4:	20000590 	.word	0x20000590
 8000ee8:	2000021c 	.word	0x2000021c
 8000eec:	0801dbf8 	.word	0x0801dbf8
 8000ef0:	0801dc10 	.word	0x0801dc10
 8000ef4:	2000021e 	.word	0x2000021e
 8000ef8:	0801dc38 	.word	0x0801dc38
 8000efc:	0801dc4c 	.word	0x0801dc4c
 8000f00:	2000021d 	.word	0x2000021d
 8000f04:	0801dc68 	.word	0x0801dc68
 8000f08:	0801dc80 	.word	0x0801dc80
 8000f0c:	20000220 	.word	0x20000220
 8000f10:	0801dca4 	.word	0x0801dca4
 8000f14:	0801dcb8 	.word	0x0801dcb8

08000f18 <servo_move_all>:
  * @brief  控制所有舵机移动到目标位置
  * @param  target_angles: 6个舵机的目标角度数组
  * @param  move_time: 移动时间(ms)
  * @retval None
  */
static void servo_move_all(uint16_t* target_angles, uint32_t move_time) {
 8000f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f1a:	b0ab      	sub	sp, #172	@ 0xac
 8000f1c:	af06      	add	r7, sp, #24
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
    // 使用多舵机同时移动命令 - 更高效的方式
    uint8_t servo_ids[6] = {1, 2, 3, 4, 5, 6};
 8000f22:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa0 <servo_move_all+0x88>)
 8000f24:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000f28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f2c:	6018      	str	r0, [r3, #0]
 8000f2e:	3304      	adds	r3, #4
 8000f30:	8019      	strh	r1, [r3, #0]
    BusServo_MultMove(servo_ids, target_angles, 6, (uint16_t)move_time);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8000f3a:	2206      	movs	r2, #6
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	f000 f9c5 	bl	80012cc <BusServo_MultMove>
    
    // 调试信息：显示发送的命令
    char move_msg[128];
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
            target_angles[0], target_angles[1], target_angles[2], 
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f46:	469c      	mov	ip, r3
            target_angles[0], target_angles[1], target_angles[2], 
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f4e:	461a      	mov	r2, r3
            target_angles[0], target_angles[1], target_angles[2], 
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3304      	adds	r3, #4
 8000f54:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f56:	4619      	mov	r1, r3
            target_angles[3], target_angles[4], target_angles[5], move_time);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3306      	adds	r3, #6
 8000f5c:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f5e:	461c      	mov	r4, r3
            target_angles[3], target_angles[4], target_angles[5], move_time);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3308      	adds	r3, #8
 8000f64:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f66:	461d      	mov	r5, r3
            target_angles[3], target_angles[4], target_angles[5], move_time);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	330a      	adds	r3, #10
 8000f6c:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8000f6e:	461e      	mov	r6, r3
 8000f70:	f107 0008 	add.w	r0, r7, #8
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	9305      	str	r3, [sp, #20]
 8000f78:	9604      	str	r6, [sp, #16]
 8000f7a:	9503      	str	r5, [sp, #12]
 8000f7c:	9402      	str	r4, [sp, #8]
 8000f7e:	9101      	str	r1, [sp, #4]
 8000f80:	9200      	str	r2, [sp, #0]
 8000f82:	4663      	mov	r3, ip
 8000f84:	4a07      	ldr	r2, [pc, #28]	@ (8000fa4 <servo_move_all+0x8c>)
 8000f86:	2180      	movs	r1, #128	@ 0x80
 8000f88:	f01b fa9a 	bl	801c4c0 <sniprintf>
    cdc_debug_print(move_msg);
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fb9f 	bl	80006d4 <cdc_debug_print>
        snprintf(move_msg, sizeof(move_msg), "Servo%d -> %d (time:%lums) sent", 
                servo_id, target_angles[servo_id-1], move_time);
        cdc_debug_print(move_msg);
    }
    */
}
 8000f96:	bf00      	nop
 8000f98:	3794      	adds	r7, #148	@ 0x94
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	0801dd04 	.word	0x0801dd04
 8000fa4:	0801dcd4 	.word	0x0801dcd4

08000fa8 <servo_read_all_positions>:

/**
  * @brief  读取所有舵机的当前位置
  * @retval None
  */
static void servo_read_all_positions(void) {
 8000fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000faa:	b0bd      	sub	sp, #244	@ 0xf4
 8000fac:	af06      	add	r7, sp, #24
    uint8_t servo_ids[6] = {1, 2, 3, 4, 5, 6};
 8000fae:	4a3b      	ldr	r2, [pc, #236]	@ (800109c <servo_read_all_positions+0xf4>)
 8000fb0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000fb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fb8:	6018      	str	r0, [r3, #0]
 8000fba:	3304      	adds	r3, #4
 8000fbc:	8019      	strh	r1, [r3, #0]
    uint16_t positions[6];
    
    // 使用多舵机位置读取函数（非阻塞版本）
    BusServo_MultPosRead(servo_ids, 6, positions);
 8000fbe:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 8000fc2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000fc6:	2106      	movs	r1, #6
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fa31 	bl	8001430 <BusServo_MultPosRead>
    
    // 更新内部状态并记录调试信息
    char pos_debug[128];
    snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
            positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 8000fce:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
    snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 8000fd2:	461e      	mov	r6, r3
            positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 8000fd4:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 8000fd8:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	@ 0xc4
 8000fdc:	f8b7 10c6 	ldrh.w	r1, [r7, #198]	@ 0xc6
 8000fe0:	f8b7 00c8 	ldrh.w	r0, [r7, #200]	@ 0xc8
    snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 8000fe4:	4604      	mov	r4, r0
            positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 8000fe6:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	@ 0xca
    snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 8000fea:	4605      	mov	r5, r0
 8000fec:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000ff0:	9504      	str	r5, [sp, #16]
 8000ff2:	9403      	str	r4, [sp, #12]
 8000ff4:	9102      	str	r1, [sp, #8]
 8000ff6:	9201      	str	r2, [sp, #4]
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	4633      	mov	r3, r6
 8000ffc:	4a28      	ldr	r2, [pc, #160]	@ (80010a0 <servo_read_all_positions+0xf8>)
 8000ffe:	2180      	movs	r1, #128	@ 0x80
 8001000:	f01b fa5e 	bl	801c4c0 <sniprintf>
    cdc_debug_print(pos_debug);
 8001004:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fb63 	bl	80006d4 <cdc_debug_print>
    
    // 更新内部状态
    for (int i = 0; i < 6; i++) {
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001014:	e037      	b.n	8001086 <servo_read_all_positions+0xde>
        // 只有当读取到的值在合理范围内时才更新，否则保持原值
        if (positions[i] <= 1000) {
 8001016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	33d8      	adds	r3, #216	@ 0xd8
 800101e:	443b      	add	r3, r7
 8001020:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001024:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001028:	d80c      	bhi.n	8001044 <servo_read_all_positions+0x9c>
            servo_current_positions[i] = positions[i];
 800102a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	33d8      	adds	r3, #216	@ 0xd8
 8001032:	443b      	add	r3, r7
 8001034:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8001038:	4a1a      	ldr	r2, [pc, #104]	@ (80010a4 <servo_read_all_positions+0xfc>)
 800103a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800103e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001042:	e01b      	b.n	800107c <servo_read_all_positions+0xd4>
        } else {
            // 如果读取值异常，记录警告但保持原值
            char warning[60];
            snprintf(warning, sizeof(warning), "Servo%d invalid position %d, keeping %d", 
 8001044:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001048:	1c5a      	adds	r2, r3, #1
                    i+1, positions[i], servo_current_positions[i]);
 800104a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	33d8      	adds	r3, #216	@ 0xd8
 8001052:	443b      	add	r3, r7
 8001054:	f833 3c18 	ldrh.w	r3, [r3, #-24]
            snprintf(warning, sizeof(warning), "Servo%d invalid position %d, keeping %d", 
 8001058:	461c      	mov	r4, r3
                    i+1, positions[i], servo_current_positions[i]);
 800105a:	4912      	ldr	r1, [pc, #72]	@ (80010a4 <servo_read_all_positions+0xfc>)
 800105c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001060:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
            snprintf(warning, sizeof(warning), "Servo%d invalid position %d, keeping %d", 
 8001064:	1d38      	adds	r0, r7, #4
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	9400      	str	r4, [sp, #0]
 800106a:	4613      	mov	r3, r2
 800106c:	4a0e      	ldr	r2, [pc, #56]	@ (80010a8 <servo_read_all_positions+0x100>)
 800106e:	213c      	movs	r1, #60	@ 0x3c
 8001070:	f01b fa26 	bl	801c4c0 <sniprintf>
            cdc_debug_print(warning);
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fb2c 	bl	80006d4 <cdc_debug_print>
    for (int i = 0; i < 6; i++) {
 800107c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001080:	3301      	adds	r3, #1
 8001082:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800108a:	2b05      	cmp	r3, #5
 800108c:	ddc3      	ble.n	8001016 <servo_read_all_positions+0x6e>
        }
    }
    
    cdc_debug_print("Servo positions read with timeout protection");
 800108e:	4807      	ldr	r0, [pc, #28]	@ (80010ac <servo_read_all_positions+0x104>)
 8001090:	f7ff fb20 	bl	80006d4 <cdc_debug_print>
}
 8001094:	bf00      	nop
 8001096:	37dc      	adds	r7, #220	@ 0xdc
 8001098:	46bd      	mov	sp, r7
 800109a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800109c:	0801dd04 	.word	0x0801dd04
 80010a0:	0801dd0c 	.word	0x0801dd0c
 80010a4:	20000234 	.word	0x20000234
 80010a8:	0801dd34 	.word	0x0801dd34
 80010ac:	0801dd5c 	.word	0x0801dd5c

080010b0 <servo_update_status>:

/**
  * @brief  更新舵机状态
  * @retval None
  */
static void servo_update_status(void) {
 80010b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b2:	b0ab      	sub	sp, #172	@ 0xac
 80010b4:	af06      	add	r7, sp, #24
    if (servo_moving) {
 80010b6:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <servo_update_status+0xe8>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d068      	beq.n	8001190 <servo_update_status+0xe0>
        uint32_t current_time = HAL_GetTick();
 80010be:	f003 f9b5 	bl	800442c <HAL_GetTick>
 80010c2:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
        uint32_t elapsed_time = current_time - servo_move_start_time;
 80010c6:	4b35      	ldr	r3, [pc, #212]	@ (800119c <servo_update_status+0xec>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        
        // 获取当前设置的移动时间
        uint32_t expected_move_time = holding_regs[REG_ROTATION_TIME];
 80010d4:	4b32      	ldr	r3, [pc, #200]	@ (80011a0 <servo_update_status+0xf0>)
 80010d6:	8a9b      	ldrh	r3, [r3, #20]
 80010d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        
        if (expected_move_time == 0) {
 80010dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d103      	bne.n	80010ec <servo_update_status+0x3c>
            expected_move_time = 1000;  // 默认1秒
 80010e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        }
        
        // 添加500ms缓冲时间，确保舵机完全到位
        uint32_t timeout_time = expected_move_time + 500;
 80010ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010f0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80010f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        
        if (elapsed_time >= timeout_time) {
 80010f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80010fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001100:	429a      	cmp	r2, r3
 8001102:	d345      	bcc.n	8001190 <servo_update_status+0xe0>
            servo_moving = 0;
 8001104:	4b24      	ldr	r3, [pc, #144]	@ (8001198 <servo_update_status+0xe8>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
            
            // 读取当前位置并更新寄存器
            servo_read_all_positions();
 800110a:	f7ff ff4d 	bl	8000fa8 <servo_read_all_positions>
            // 更新当前角度寄存器 (40017-40022)
            holding_regs[REG_CURRENT_ANGLE1] = servo_current_positions[0];
 800110e:	4b25      	ldr	r3, [pc, #148]	@ (80011a4 <servo_update_status+0xf4>)
 8001110:	881a      	ldrh	r2, [r3, #0]
 8001112:	4b23      	ldr	r3, [pc, #140]	@ (80011a0 <servo_update_status+0xf0>)
 8001114:	845a      	strh	r2, [r3, #34]	@ 0x22
            holding_regs[REG_CURRENT_ANGLE2] = servo_current_positions[1];
 8001116:	4b23      	ldr	r3, [pc, #140]	@ (80011a4 <servo_update_status+0xf4>)
 8001118:	885a      	ldrh	r2, [r3, #2]
 800111a:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <servo_update_status+0xf0>)
 800111c:	849a      	strh	r2, [r3, #36]	@ 0x24
            holding_regs[REG_CURRENT_ANGLE3] = servo_current_positions[2];
 800111e:	4b21      	ldr	r3, [pc, #132]	@ (80011a4 <servo_update_status+0xf4>)
 8001120:	889a      	ldrh	r2, [r3, #4]
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <servo_update_status+0xf0>)
 8001124:	84da      	strh	r2, [r3, #38]	@ 0x26
            holding_regs[REG_CURRENT_ANGLE4] = servo_current_positions[3];
 8001126:	4b1f      	ldr	r3, [pc, #124]	@ (80011a4 <servo_update_status+0xf4>)
 8001128:	88da      	ldrh	r2, [r3, #6]
 800112a:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <servo_update_status+0xf0>)
 800112c:	851a      	strh	r2, [r3, #40]	@ 0x28
            holding_regs[REG_CURRENT_ANGLE5] = servo_current_positions[4];
 800112e:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <servo_update_status+0xf4>)
 8001130:	891a      	ldrh	r2, [r3, #8]
 8001132:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <servo_update_status+0xf0>)
 8001134:	855a      	strh	r2, [r3, #42]	@ 0x2a
            holding_regs[REG_CURRENT_ANGLE6] = servo_current_positions[5];
 8001136:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <servo_update_status+0xf4>)
 8001138:	895a      	ldrh	r2, [r3, #10]
 800113a:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <servo_update_status+0xf0>)
 800113c:	859a      	strh	r2, [r3, #44]	@ 0x2c
            
            // 转动时间到达后，置状态为2（完成状态，可以重新写1进行新转动）
            holding_regs[REG_ROTATION_TRIGGER] = 2;
 800113e:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <servo_update_status+0xf0>)
 8001140:	2202      	movs	r2, #2
 8001142:	85da      	strh	r2, [r3, #46]	@ 0x2e
            last_rotation_trigger = 2;
 8001144:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <servo_update_status+0xf8>)
 8001146:	2202      	movs	r2, #2
 8001148:	601a      	str	r2, [r3, #0]
            
            cdc_debug_print("Servo movement completed, status set to 2 (ready for new command)");
 800114a:	4818      	ldr	r0, [pc, #96]	@ (80011ac <servo_update_status+0xfc>)
 800114c:	f7ff fac2 	bl	80006d4 <cdc_debug_print>
            
            // 调试信息：显示最终位置
            char final_pos_msg[128];
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
                    servo_current_positions[0], servo_current_positions[1], servo_current_positions[2],
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <servo_update_status+0xf4>)
 8001152:	881b      	ldrh	r3, [r3, #0]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 8001154:	461e      	mov	r6, r3
                    servo_current_positions[0], servo_current_positions[1], servo_current_positions[2],
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <servo_update_status+0xf4>)
 8001158:	885b      	ldrh	r3, [r3, #2]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 800115a:	461a      	mov	r2, r3
                    servo_current_positions[0], servo_current_positions[1], servo_current_positions[2],
 800115c:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <servo_update_status+0xf4>)
 800115e:	889b      	ldrh	r3, [r3, #4]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 8001160:	4619      	mov	r1, r3
                    servo_current_positions[3], servo_current_positions[4], servo_current_positions[5]);
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <servo_update_status+0xf4>)
 8001164:	88db      	ldrh	r3, [r3, #6]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 8001166:	461c      	mov	r4, r3
                    servo_current_positions[3], servo_current_positions[4], servo_current_positions[5]);
 8001168:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <servo_update_status+0xf4>)
 800116a:	891b      	ldrh	r3, [r3, #8]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 800116c:	461d      	mov	r5, r3
                    servo_current_positions[3], servo_current_positions[4], servo_current_positions[5]);
 800116e:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <servo_update_status+0xf4>)
 8001170:	895b      	ldrh	r3, [r3, #10]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 8001172:	4638      	mov	r0, r7
 8001174:	9304      	str	r3, [sp, #16]
 8001176:	9503      	str	r5, [sp, #12]
 8001178:	9402      	str	r4, [sp, #8]
 800117a:	9101      	str	r1, [sp, #4]
 800117c:	9200      	str	r2, [sp, #0]
 800117e:	4633      	mov	r3, r6
 8001180:	4a0b      	ldr	r2, [pc, #44]	@ (80011b0 <servo_update_status+0x100>)
 8001182:	2180      	movs	r1, #128	@ 0x80
 8001184:	f01b f99c 	bl	801c4c0 <sniprintf>
            cdc_debug_print(final_pos_msg);
 8001188:	463b      	mov	r3, r7
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff faa2 	bl	80006d4 <cdc_debug_print>
        }
    }
}
 8001190:	bf00      	nop
 8001192:	3794      	adds	r7, #148	@ 0x94
 8001194:	46bd      	mov	sp, r7
 8001196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001198:	2000022c 	.word	0x2000022c
 800119c:	20000230 	.word	0x20000230
 80011a0:	20000590 	.word	0x20000590
 80011a4:	20000234 	.word	0x20000234
 80011a8:	20000184 	.word	0x20000184
 80011ac:	0801dd8c 	.word	0x0801dd8c
 80011b0:	0801ddd0 	.word	0x0801ddd0

080011b4 <BusServo_SendCmd>:
#include "bus_servo.h"
#include <string.h>

// 发送通用指令
void BusServo_SendCmd(uint8_t cmd, uint8_t *params, uint8_t param_cnt) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0c4      	sub	sp, #272	@ 0x110
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011be:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80011c2:	6019      	str	r1, [r3, #0]
 80011c4:	4611      	mov	r1, r2
 80011c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011ca:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80011ce:	4602      	mov	r2, r0
 80011d0:	701a      	strb	r2, [r3, #0]
 80011d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011d6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80011da:	460a      	mov	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
    uint8_t buf[256];  // 缓冲区，足够大
    uint8_t idx = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    buf[idx++] = 0x55;  // 帧头
 80011e4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 80011ee:	461a      	mov	r2, r3
 80011f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011f8:	2155      	movs	r1, #85	@ 0x55
 80011fa:	5499      	strb	r1, [r3, r2]
    buf[idx++] = 0x55;
 80011fc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001200:	1c5a      	adds	r2, r3, #1
 8001202:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 8001206:	461a      	mov	r2, r3
 8001208:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800120c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001210:	2155      	movs	r1, #85	@ 0x55
 8001212:	5499      	strb	r1, [r3, r2]
    buf[idx++] = param_cnt + 2;  // Length = N + 2
 8001214:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001218:	1c5a      	adds	r2, r3, #1
 800121a:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 800121e:	461a      	mov	r2, r3
 8001220:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001224:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	3302      	adds	r3, #2
 800122c:	b2d9      	uxtb	r1, r3
 800122e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001232:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001236:	5499      	strb	r1, [r3, r2]
    buf[idx++] = cmd;
 8001238:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 8001242:	4619      	mov	r1, r3
 8001244:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001248:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800124c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001250:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8001254:	7812      	ldrb	r2, [r2, #0]
 8001256:	545a      	strb	r2, [r3, r1]
    if (params && param_cnt > 0) {
 8001258:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800125c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d021      	beq.n	80012aa <BusServo_SendCmd+0xf6>
 8001266:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800126a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d01a      	beq.n	80012aa <BusServo_SendCmd+0xf6>
        memcpy(&buf[idx], params, param_cnt);
 8001274:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001278:	f107 020c 	add.w	r2, r7, #12
 800127c:	18d0      	adds	r0, r2, r3
 800127e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001282:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001286:	781a      	ldrb	r2, [r3, #0]
 8001288:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800128c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001290:	6819      	ldr	r1, [r3, #0]
 8001292:	f01b fab6 	bl	801c802 <memcpy>
        idx += param_cnt;
 8001296:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800129a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800129e:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4413      	add	r3, r2
 80012a6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    }
    HAL_UART_Transmit(&huart6, buf, idx, HAL_MAX_DELAY);  // 发送
 80012aa:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	f107 010c 	add.w	r1, r7, #12
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	4803      	ldr	r0, [pc, #12]	@ (80012c8 <BusServo_SendCmd+0x114>)
 80012ba:	f007 f835 	bl	8008328 <HAL_UART_Transmit>
}
 80012be:	bf00      	nop
 80012c0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000077c 	.word	0x2000077c

080012cc <BusServo_MultMove>:
    params[5] = (position >> 8) & 0xFF;  // 高8位
    BusServo_SendCmd(CMD_SERVO_MOVE, params, 6);
}

// 控制多舵机同时转动
void BusServo_MultMove(uint8_t *ids, uint16_t *positions, uint8_t servo_count, uint16_t time) {
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b0c7      	sub	sp, #284	@ 0x11c
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 80012d6:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 80012da:	6020      	str	r0, [r4, #0]
 80012dc:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 80012e0:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 80012e4:	6001      	str	r1, [r0, #0]
 80012e6:	4619      	mov	r1, r3
 80012e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80012ec:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80012f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80012fa:	460a      	mov	r2, r1
 80012fc:	801a      	strh	r2, [r3, #0]
    uint8_t params[256];  // 足够大的缓冲区
    uint8_t idx = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    params[idx++] = servo_count;    // 舵机数量
 8001304:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 800130e:	4619      	mov	r1, r3
 8001310:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001314:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001318:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800131c:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 8001320:	7812      	ldrb	r2, [r2, #0]
 8001322:	545a      	strb	r2, [r3, r1]
    params[idx++] = time & 0xFF;    // 时间低8位  
 8001324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 800132e:	461a      	mov	r2, r3
 8001330:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001334:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	b2d9      	uxtb	r1, r3
 800133c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001340:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001344:	5499      	strb	r1, [r3, r2]
    params[idx++] = (time >> 8) & 0xFF;  // 时间高8位
 8001346:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800134a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	b299      	uxth	r1, r3
 8001354:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001358:	1c5a      	adds	r2, r3, #1
 800135a:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 800135e:	461a      	mov	r2, r3
 8001360:	b2c9      	uxtb	r1, r1
 8001362:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001366:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800136a:	5499      	strb	r1, [r3, r2]
    
    // 添加每个舵机的ID和位置
    for (uint8_t i = 0; i < servo_count; i++) {
 800136c:	2300      	movs	r3, #0
 800136e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8001372:	e046      	b.n	8001402 <BusServo_MultMove+0x136>
        params[idx++] = ids[i];     // 舵机ID
 8001374:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001378:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800137c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	441a      	add	r2, r3
 8001384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001388:	1c59      	adds	r1, r3, #1
 800138a:	f887 1117 	strb.w	r1, [r7, #279]	@ 0x117
 800138e:	4619      	mov	r1, r3
 8001390:	7812      	ldrb	r2, [r2, #0]
 8001392:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001396:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800139a:	545a      	strb	r2, [r3, r1]
        params[idx++] = positions[i] & 0xFF;        // 位置低8位
 800139c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80013a6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80013aa:	6812      	ldr	r2, [r2, #0]
 80013ac:	4413      	add	r3, r2
 80013ae:	8819      	ldrh	r1, [r3, #0]
 80013b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80013ba:	461a      	mov	r2, r3
 80013bc:	b2c9      	uxtb	r1, r1
 80013be:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013c6:	5499      	strb	r1, [r3, r2]
        params[idx++] = (positions[i] >> 8) & 0xFF; // 位置高8位
 80013c8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80013d2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	4413      	add	r3, r2
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	b299      	uxth	r1, r3
 80013e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80013ea:	461a      	mov	r2, r3
 80013ec:	b2c9      	uxtb	r1, r1
 80013ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013f6:	5499      	strb	r1, [r3, r2]
    for (uint8_t i = 0; i < servo_count; i++) {
 80013f8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80013fc:	3301      	adds	r3, #1
 80013fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8001402:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001406:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800140a:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d3af      	bcc.n	8001374 <BusServo_MultMove+0xa8>
    }
    
    BusServo_SendCmd(CMD_SERVO_MOVE, params, idx);
 8001414:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	2003      	movs	r0, #3
 8001420:	f7ff fec8 	bl	80011b4 <BusServo_SendCmd>
}
 8001424:	bf00      	nop
 8001426:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 800142a:	46bd      	mov	sp, r7
 800142c:	bd90      	pop	{r4, r7, pc}
	...

08001430 <BusServo_MultPosRead>:
    memcpy(&params[1], ids, id_cnt);
    BusServo_SendCmd(CMD_MULT_SERVO_UNLOAD, params, id_cnt + 1);
}

// 读取多舵机位置（positions数组需预分配空间）
void BusServo_MultPosRead(uint8_t *ids, uint8_t id_cnt, uint16_t *positions) {
 8001430:	b580      	push	{r7, lr}
 8001432:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8001436:	af00      	add	r7, sp, #0
 8001438:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800143c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001440:	6018      	str	r0, [r3, #0]
 8001442:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001446:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001450:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8001454:	460a      	mov	r2, r1
 8001456:	701a      	strb	r2, [r3, #0]
    uint8_t params[256];
    params[0] = id_cnt;
 8001458:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800145c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001460:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001464:	f2a2 220d 	subw	r2, r2, #525	@ 0x20d
 8001468:	7812      	ldrb	r2, [r2, #0]
 800146a:	701a      	strb	r2, [r3, #0]
    memcpy(&params[1], ids, id_cnt);
 800146c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001470:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8001474:	7819      	ldrb	r1, [r3, #0]
 8001476:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800147a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800147e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001482:	1c50      	adds	r0, r2, #1
 8001484:	460a      	mov	r2, r1
 8001486:	6819      	ldr	r1, [r3, #0]
 8001488:	f01b f9bb 	bl	801c802 <memcpy>
    BusServo_SendCmd(CMD_MULT_SERVO_POS_READ, params, id_cnt + 1);
 800148c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001490:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	b2da      	uxtb	r2, r3
 800149a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800149e:	4619      	mov	r1, r3
 80014a0:	2015      	movs	r0, #21
 80014a2:	f7ff fe87 	bl	80011b4 <BusServo_SendCmd>

    // 接收响应：使用较短的超时时间，避免长时间阻塞
    uint8_t rx_len = id_cnt * 3 + 5;  // 总长度：头2 + len1 + cmd1 + data
 80014a6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80014aa:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	0052      	lsls	r2, r2, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	3305      	adds	r3, #5
 80014ba:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
    uint8_t rx_buf[256];
    
    // 初始化位置数组为默认值
    for (uint8_t i = 0; i < id_cnt; i++) {
 80014be:	2300      	movs	r3, #0
 80014c0:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 80014c4:	e00f      	b.n	80014e6 <BusServo_MultPosRead+0xb6>
        positions[i] = 3;  // 默认位置3代表读取失败
 80014c6:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80014d0:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	2203      	movs	r2, #3
 80014da:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < id_cnt; i++) {
 80014dc:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 80014e0:	3301      	adds	r3, #1
 80014e2:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 80014e6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80014ea:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80014ee:	f897 2217 	ldrb.w	r2, [r7, #535]	@ 0x217
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d3e6      	bcc.n	80014c6 <BusServo_MultPosRead+0x96>
    }
    
    // 使用较短超时时间 (200ms) 而不是HAL_MAX_DELAY
    HAL_StatusTypeDef status = HAL_UART_Receive(&huart6, rx_buf, rx_len, 200);
 80014f8:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	f107 0110 	add.w	r1, r7, #16
 8001502:	23c8      	movs	r3, #200	@ 0xc8
 8001504:	483c      	ldr	r0, [pc, #240]	@ (80015f8 <BusServo_MultPosRead+0x1c8>)
 8001506:	f006 ff9a 	bl	800843e <HAL_UART_Receive>
 800150a:	4603      	mov	r3, r0
 800150c:	f887 3214 	strb.w	r3, [r7, #532]	@ 0x214
    
    if (status == HAL_OK) {
 8001510:	f897 3214 	ldrb.w	r3, [r7, #532]	@ 0x214
 8001514:	2b00      	cmp	r3, #0
 8001516:	d169      	bne.n	80015ec <BusServo_MultPosRead+0x1bc>
        // 检查响应帧头和命令码
        if (rx_buf[0] == 0x55 && rx_buf[1] == 0x55 && rx_buf[3] == CMD_MULT_SERVO_POS_READ) {
 8001518:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800151c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b55      	cmp	r3, #85	@ 0x55
 8001524:	d162      	bne.n	80015ec <BusServo_MultPosRead+0x1bc>
 8001526:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800152a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800152e:	785b      	ldrb	r3, [r3, #1]
 8001530:	2b55      	cmp	r3, #85	@ 0x55
 8001532:	d15b      	bne.n	80015ec <BusServo_MultPosRead+0x1bc>
 8001534:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001538:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800153c:	78db      	ldrb	r3, [r3, #3]
 800153e:	2b15      	cmp	r3, #21
 8001540:	d154      	bne.n	80015ec <BusServo_MultPosRead+0x1bc>
            // 解析实际返回的舵机数量
            uint8_t actual_count = rx_buf[2] / 3;  // 数据长度除以3得到舵机数量
 8001542:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001546:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800154a:	789b      	ldrb	r3, [r3, #2]
 800154c:	4a2b      	ldr	r2, [pc, #172]	@ (80015fc <BusServo_MultPosRead+0x1cc>)
 800154e:	fba2 2303 	umull	r2, r3, r2, r3
 8001552:	085b      	lsrs	r3, r3, #1
 8001554:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
            uint8_t parse_count = (actual_count < id_cnt) ? actual_count : id_cnt;
 8001558:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800155c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8001560:	781a      	ldrb	r2, [r3, #0]
 8001562:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8001566:	4293      	cmp	r3, r2
 8001568:	bf28      	it	cs
 800156a:	4613      	movcs	r3, r2
 800156c:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
            
            for (uint8_t i = 0; i < parse_count; i++) {
 8001570:	2300      	movs	r3, #0
 8001572:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
 8001576:	e033      	b.n	80015e0 <BusServo_MultPosRead+0x1b0>
                uint8_t offset = 4 + i * 3;  // 数据从rx_buf[4]开始
 8001578:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 800157c:	461a      	mov	r2, r3
 800157e:	0052      	lsls	r2, r2, #1
 8001580:	4413      	add	r3, r2
 8001582:	b2db      	uxtb	r3, r3
 8001584:	3304      	adds	r3, #4
 8001586:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
                if (offset + 2 < sizeof(rx_buf)) {  // 边界检查
 800158a:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 800158e:	3302      	adds	r3, #2
 8001590:	2bff      	cmp	r3, #255	@ 0xff
 8001592:	d820      	bhi.n	80015d6 <BusServo_MultPosRead+0x1a6>
                    positions[i] = (rx_buf[offset + 2] << 8) | rx_buf[offset + 1];
 8001594:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8001598:	3302      	adds	r3, #2
 800159a:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800159e:	f5a2 7202 	sub.w	r2, r2, #520	@ 0x208
 80015a2:	5cd3      	ldrb	r3, [r2, r3]
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 80015ae:	3301      	adds	r3, #1
 80015b0:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 80015b4:	f5a1 7102 	sub.w	r1, r1, #520	@ 0x208
 80015b8:	5ccb      	ldrb	r3, [r1, r3]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b219      	sxth	r1, r3
 80015c0:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80015ca:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	4413      	add	r3, r2
 80015d2:	b28a      	uxth	r2, r1
 80015d4:	801a      	strh	r2, [r3, #0]
            for (uint8_t i = 0; i < parse_count; i++) {
 80015d6:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 80015da:	3301      	adds	r3, #1
 80015dc:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
 80015e0:	f897 2216 	ldrb.w	r2, [r7, #534]	@ 0x216
 80015e4:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d3c5      	bcc.n	8001578 <BusServo_MultPosRead+0x148>
    } else if (status == HAL_TIMEOUT) {
        // 超时情况下保持默认值，不做额外处理
        // positions数组已经初始化为默认值500
    }
    // 对于其他错误情况，也保持默认值
}
 80015ec:	bf00      	nop
 80015ee:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	2000077c 	.word	0x2000077c
 80015fc:	aaaaaaab 	.word	0xaaaaaaab

08001600 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4a07      	ldr	r2, [pc, #28]	@ (800162c <vApplicationGetIdleTaskMemory+0x2c>)
 8001610:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	4a06      	ldr	r2, [pc, #24]	@ (8001630 <vApplicationGetIdleTaskMemory+0x30>)
 8001616:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2280      	movs	r2, #128	@ 0x80
 800161c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	2000029c 	.word	0x2000029c
 8001630:	2000033c 	.word	0x2000033c

08001634 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001634:	b5b0      	push	{r4, r5, r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800163a:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <MX_FREERTOS_Init+0x30>)
 800163c:	1d3c      	adds	r4, r7, #4
 800163e:	461d      	mov	r5, r3
 8001640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001644:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f00c f9e1 	bl	800da18 <osThreadCreate>
 8001656:	4603      	mov	r3, r0
 8001658:	4a03      	ldr	r2, [pc, #12]	@ (8001668 <MX_FREERTOS_Init+0x34>)
 800165a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800165c:	bf00      	nop
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bdb0      	pop	{r4, r5, r7, pc}
 8001664:	0801de04 	.word	0x0801de04
 8001668:	20000298 	.word	0x20000298

0800166c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001674:	f01a f870 	bl	801b758 <MX_USB_DEVICE_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 8001678:	f008 ff00 	bl	800a47c <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  modbus_tcp_init();
 800167c:	f001 fa3e 	bl	8002afc <modbus_tcp_init>
  app_business_init();
 8001680:	f7fe ff94 	bl	80005ac <app_business_init>
  
  /* Infinite loop */
  for(;;)
  {
    // 每100ms执行一次业务逻辑处理
    if (business_cycle_counter % BUSINESS_PROCESS_CYCLE_MS == 0) {
 8001684:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <StartDefaultTask+0x90>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b1d      	ldr	r3, [pc, #116]	@ (8001700 <StartDefaultTask+0x94>)
 800168a:	fba3 1302 	umull	r1, r3, r3, r2
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	2164      	movs	r1, #100	@ 0x64
 8001692:	fb01 f303 	mul.w	r3, r1, r3
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <StartDefaultTask+0x34>
      app_business_process();
 800169c:	f7ff f80e 	bl	80006bc <app_business_process>
    }
    
    // Keep alive 消息每1000ms（约1秒）发送一次
    if (keep_alive_counter % 1000 == 0) {
 80016a0:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <StartDefaultTask+0x98>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <StartDefaultTask+0x9c>)
 80016a6:	fba3 1302 	umull	r1, r3, r3, r2
 80016aa:	099b      	lsrs	r3, r3, #6
 80016ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80016b0:	fb01 f303 	mul.w	r3, r1, r3
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d111      	bne.n	80016de <StartDefaultTask+0x72>
      int len = snprintf(debug_buf, sizeof(debug_buf), "Keep Alive: %lu\r\n", keep_alive_counter / 1000);
 80016ba:	4b12      	ldr	r3, [pc, #72]	@ (8001704 <StartDefaultTask+0x98>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a12      	ldr	r2, [pc, #72]	@ (8001708 <StartDefaultTask+0x9c>)
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	099b      	lsrs	r3, r3, #6
 80016c6:	4a11      	ldr	r2, [pc, #68]	@ (800170c <StartDefaultTask+0xa0>)
 80016c8:	2140      	movs	r1, #64	@ 0x40
 80016ca:	4811      	ldr	r0, [pc, #68]	@ (8001710 <StartDefaultTask+0xa4>)
 80016cc:	f01a fef8 	bl	801c4c0 <sniprintf>
 80016d0:	60f8      	str	r0, [r7, #12]
      CDC_Transmit_FS((uint8_t*)debug_buf, len);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	4619      	mov	r1, r3
 80016d8:	480d      	ldr	r0, [pc, #52]	@ (8001710 <StartDefaultTask+0xa4>)
 80016da:	f01a f8fb 	bl	801b8d4 <CDC_Transmit_FS>
    }
    
    business_cycle_counter++;
 80016de:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <StartDefaultTask+0x90>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	4a05      	ldr	r2, [pc, #20]	@ (80016fc <StartDefaultTask+0x90>)
 80016e6:	6013      	str	r3, [r2, #0]
    keep_alive_counter++;
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <StartDefaultTask+0x98>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	4a05      	ldr	r2, [pc, #20]	@ (8001704 <StartDefaultTask+0x98>)
 80016f0:	6013      	str	r3, [r2, #0]
    osDelay(1);  // 1ms延时
 80016f2:	2001      	movs	r0, #1
 80016f4:	f00c f9dc 	bl	800dab0 <osDelay>
    if (business_cycle_counter % BUSINESS_PROCESS_CYCLE_MS == 0) {
 80016f8:	e7c4      	b.n	8001684 <StartDefaultTask+0x18>
 80016fa:	bf00      	nop
 80016fc:	20000250 	.word	0x20000250
 8001700:	51eb851f 	.word	0x51eb851f
 8001704:	20000294 	.word	0x20000294
 8001708:	10624dd3 	.word	0x10624dd3
 800170c:	0801de20 	.word	0x0801de20
 8001710:	20000254 	.word	0x20000254

08001714 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram3;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	615a      	str	r2, [r3, #20]
 800172a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 800172c:	4b26      	ldr	r3, [pc, #152]	@ (80017c8 <MX_FSMC_Init+0xb4>)
 800172e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001732:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001734:	4b24      	ldr	r3, [pc, #144]	@ (80017c8 <MX_FSMC_Init+0xb4>)
 8001736:	4a25      	ldr	r2, [pc, #148]	@ (80017cc <MX_FSMC_Init+0xb8>)
 8001738:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 800173a:	4b23      	ldr	r3, [pc, #140]	@ (80017c8 <MX_FSMC_Init+0xb4>)
 800173c:	2204      	movs	r2, #4
 800173e:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001740:	4b21      	ldr	r3, [pc, #132]	@ (80017c8 <MX_FSMC_Init+0xb4>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001746:	4b20      	ldr	r3, [pc, #128]	@ (80017c8 <MX_FSMC_Init+0xb4>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800174c:	4b1e      	ldr	r3, [pc, #120]	@ (80017c8 <MX_FSMC_Init+0xb4>)
 800174e:	2210      	movs	r2, #16
 8001750:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001752:	4b1d      	ldr	r3, [pc, #116]	@ (80017c8 <MX_FSMC_Init+0xb4>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001758:	4b1b      	ldr	r3, [pc, #108]	@ (80017c8 <MX_FSMC_Init+0xb4>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800175e:	4b1a      	ldr	r3, [pc, #104]	@ (80017c8 <MX_FSMC_Init+0xb4>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001764:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <MX_FSMC_Init+0xb4>)
 8001766:	2200      	movs	r2, #0
 8001768:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 800176a:	4b17      	ldr	r3, [pc, #92]	@ (80017c8 <MX_FSMC_Init+0xb4>)
 800176c:	2200      	movs	r2, #0
 800176e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001770:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <MX_FSMC_Init+0xb4>)
 8001772:	2200      	movs	r2, #0
 8001774:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001776:	4b14      	ldr	r3, [pc, #80]	@ (80017c8 <MX_FSMC_Init+0xb4>)
 8001778:	2200      	movs	r2, #0
 800177a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800177c:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <MX_FSMC_Init+0xb4>)
 800177e:	2200      	movs	r2, #0
 8001780:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001782:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <MX_FSMC_Init+0xb4>)
 8001784:	2200      	movs	r2, #0
 8001786:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001788:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <MX_FSMC_Init+0xb4>)
 800178a:	2200      	movs	r2, #0
 800178c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800178e:	230f      	movs	r3, #15
 8001790:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001792:	230f      	movs	r3, #15
 8001794:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001796:	23ff      	movs	r3, #255	@ 0xff
 8001798:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800179a:	230f      	movs	r3, #15
 800179c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800179e:	2310      	movs	r3, #16
 80017a0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80017a2:	2311      	movs	r3, #17
 80017a4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2200      	movs	r2, #0
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	@ (80017c8 <MX_FSMC_Init+0xb4>)
 80017b2:	f006 fa13 	bl	8007bdc <HAL_SRAM_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 80017bc:	f000 f994 	bl	8001ae8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80017c0:	bf00      	nop
 80017c2:	3720      	adds	r7, #32
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	2000053c 	.word	0x2000053c
 80017cc:	a0000104 	.word	0xa0000104

080017d0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80017e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001898 <HAL_FSMC_MspInit+0xc8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d151      	bne.n	8001890 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 80017ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001898 <HAL_FSMC_MspInit+0xc8>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	4b29      	ldr	r3, [pc, #164]	@ (800189c <HAL_FSMC_MspInit+0xcc>)
 80017f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017fa:	4a28      	ldr	r2, [pc, #160]	@ (800189c <HAL_FSMC_MspInit+0xcc>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6393      	str	r3, [r2, #56]	@ 0x38
 8001802:	4b26      	ldr	r3, [pc, #152]	@ (800189c <HAL_FSMC_MspInit+0xcc>)
 8001804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800180e:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8001812:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001820:	230c      	movs	r3, #12
 8001822:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	4619      	mov	r1, r3
 8001828:	481d      	ldr	r0, [pc, #116]	@ (80018a0 <HAL_FSMC_MspInit+0xd0>)
 800182a:	f004 f945 	bl	8005ab8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800182e:	f240 433f 	movw	r3, #1087	@ 0x43f
 8001832:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001840:	230c      	movs	r3, #12
 8001842:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	4619      	mov	r1, r3
 8001848:	4816      	ldr	r0, [pc, #88]	@ (80018a4 <HAL_FSMC_MspInit+0xd4>)
 800184a:	f004 f935 	bl	8005ab8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800184e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001852:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001860:	230c      	movs	r3, #12
 8001862:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	4619      	mov	r1, r3
 8001868:	480f      	ldr	r0, [pc, #60]	@ (80018a8 <HAL_FSMC_MspInit+0xd8>)
 800186a:	f004 f925 	bl	8005ab8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800186e:	f64f 7333 	movw	r3, #65331	@ 0xff33
 8001872:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001880:	230c      	movs	r3, #12
 8001882:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	4619      	mov	r1, r3
 8001888:	4808      	ldr	r0, [pc, #32]	@ (80018ac <HAL_FSMC_MspInit+0xdc>)
 800188a:	f004 f915 	bl	8005ab8 <HAL_GPIO_Init>
 800188e:	e000      	b.n	8001892 <HAL_FSMC_MspInit+0xc2>
    return;
 8001890:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	2000058c 	.word	0x2000058c
 800189c:	40023800 	.word	0x40023800
 80018a0:	40021400 	.word	0x40021400
 80018a4:	40021800 	.word	0x40021800
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40020c00 	.word	0x40020c00

080018b0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80018b8:	f7ff ff8a 	bl	80017d0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	@ 0x24
 80018c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	4b3a      	ldr	r3, [pc, #232]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	4a39      	ldr	r2, [pc, #228]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018da:	4b37      	ldr	r3, [pc, #220]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	4b33      	ldr	r3, [pc, #204]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	4a32      	ldr	r2, [pc, #200]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 80018f0:	f043 0320 	orr.w	r3, r3, #32
 80018f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f6:	4b30      	ldr	r3, [pc, #192]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	f003 0320 	and.w	r3, r3, #32
 80018fe:	61bb      	str	r3, [r7, #24]
 8001900:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	4b2c      	ldr	r3, [pc, #176]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a2b      	ldr	r2, [pc, #172]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 800190c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b29      	ldr	r3, [pc, #164]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	4b25      	ldr	r3, [pc, #148]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	4a24      	ldr	r2, [pc, #144]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6313      	str	r3, [r2, #48]	@ 0x30
 800192e:	4b22      	ldr	r3, [pc, #136]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4a1d      	ldr	r2, [pc, #116]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 8001944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4b1b      	ldr	r3, [pc, #108]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4a16      	ldr	r2, [pc, #88]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 8001960:	f043 0310 	orr.w	r3, r3, #16
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f003 0310 	and.w	r3, r3, #16
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	4b10      	ldr	r3, [pc, #64]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a0f      	ldr	r2, [pc, #60]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	4a08      	ldr	r2, [pc, #32]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 8001998:	f043 0308 	orr.w	r3, r3, #8
 800199c:	6313      	str	r3, [r2, #48]	@ 0x30
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <MX_GPIO_Init+0xf4>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]

}
 80019aa:	bf00      	nop
 80019ac:	3724      	adds	r7, #36	@ 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800

080019bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c0:	f002 fcfe 	bl	80043c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c4:	f000 f814 	bl	80019f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c8:	f7ff ff7c 	bl	80018c4 <MX_GPIO_Init>
  MX_FSMC_Init();
 80019cc:	f7ff fea2 	bl	8001714 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 80019d0:	f002 f9c0 	bl	8003d54 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80019d4:	f002 fa12 	bl	8003dfc <MX_USART6_UART_Init>
  MX_TIM7_Init();
 80019d8:	f002 f95e 	bl	8003c98 <MX_TIM7_Init>
  MX_USART3_UART_Init();
 80019dc:	f002 f9e4 	bl	8003da8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80019e0:	f7ff fe28 	bl	8001634 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80019e4:	f00c f801 	bl	800d9ea <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(100);
 80019e8:	2064      	movs	r0, #100	@ 0x64
 80019ea:	f002 fd2b 	bl	8004444 <HAL_Delay>
 80019ee:	e7fb      	b.n	80019e8 <main+0x2c>

080019f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b094      	sub	sp, #80	@ 0x50
 80019f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f6:	f107 0320 	add.w	r3, r7, #32
 80019fa:	2230      	movs	r2, #48	@ 0x30
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f01a fe01 	bl	801c606 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	4b28      	ldr	r3, [pc, #160]	@ (8001abc <SystemClock_Config+0xcc>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1c:	4a27      	ldr	r2, [pc, #156]	@ (8001abc <SystemClock_Config+0xcc>)
 8001a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a24:	4b25      	ldr	r3, [pc, #148]	@ (8001abc <SystemClock_Config+0xcc>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a30:	2300      	movs	r3, #0
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	4b22      	ldr	r3, [pc, #136]	@ (8001ac0 <SystemClock_Config+0xd0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a21      	ldr	r2, [pc, #132]	@ (8001ac0 <SystemClock_Config+0xd0>)
 8001a3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac0 <SystemClock_Config+0xd0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a56:	2302      	movs	r3, #2
 8001a58:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a60:	2319      	movs	r3, #25
 8001a62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a64:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001a68:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a6e:	2307      	movs	r3, #7
 8001a70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a72:	f107 0320 	add.w	r3, r7, #32
 8001a76:	4618      	mov	r0, r3
 8001a78:	f005 fc26 	bl	80072c8 <HAL_RCC_OscConfig>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a82:	f000 f831 	bl	8001ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a86:	230f      	movs	r3, #15
 8001a88:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a92:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	2105      	movs	r1, #5
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f005 fe87 	bl	80077b8 <HAL_RCC_ClockConfig>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ab0:	f000 f81a 	bl	8001ae8 <Error_Handler>
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	3750      	adds	r7, #80	@ 0x50
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40007000 	.word	0x40007000

08001ac4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a04      	ldr	r2, [pc, #16]	@ (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d101      	bne.n	8001ada <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001ad6:	f002 fc95 	bl	8004404 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40002000 	.word	0x40002000

08001ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aec:	b672      	cpsid	i
}
 8001aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <Error_Handler+0x8>

08001af4 <cdc_debug_log>:
#include <string.h>
#include "usbd_cdc_if.h"  // 包含CDC传输函数

// 简单的调试日志函数，输出到CDC
static void cdc_debug_log(const char* tag, const char* message)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b0a4      	sub	sp, #144	@ 0x90
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
    char debug_buf[128];
    uint32_t len = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    
    // 手动拼接字符串，避免使用sprintf
    const char* ptr;
    
    // 复制tag
    ptr = tag;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (*ptr && len < 20) {
 8001b0a:	e00e      	b.n	8001b2a <cdc_debug_log+0x36>
        debug_buf[len++] = *ptr++;
 8001b0c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001b10:	1c53      	adds	r3, r2, #1
 8001b12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b1a:	1c59      	adds	r1, r3, #1
 8001b1c:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8001b20:	7812      	ldrb	r2, [r2, #0]
 8001b22:	3390      	adds	r3, #144	@ 0x90
 8001b24:	443b      	add	r3, r7
 8001b26:	f803 2c88 	strb.w	r2, [r3, #-136]
    while (*ptr && len < 20) {
 8001b2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <cdc_debug_log+0x48>
 8001b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b38:	2b13      	cmp	r3, #19
 8001b3a:	d9e7      	bls.n	8001b0c <cdc_debug_log+0x18>
    }
    
    // 添加分隔符
    debug_buf[len++] = ':';
 8001b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b46:	3390      	adds	r3, #144	@ 0x90
 8001b48:	443b      	add	r3, r7
 8001b4a:	223a      	movs	r2, #58	@ 0x3a
 8001b4c:	f803 2c88 	strb.w	r2, [r3, #-136]
    debug_buf[len++] = ' ';
 8001b50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b5a:	3390      	adds	r3, #144	@ 0x90
 8001b5c:	443b      	add	r3, r7
 8001b5e:	2220      	movs	r2, #32
 8001b60:	f803 2c88 	strb.w	r2, [r3, #-136]
    
    // 复制message
    ptr = message;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (*ptr && len < 120) {
 8001b6a:	e00e      	b.n	8001b8a <cdc_debug_log+0x96>
        debug_buf[len++] = *ptr++;
 8001b6c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001b70:	1c53      	adds	r3, r2, #1
 8001b72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b7a:	1c59      	adds	r1, r3, #1
 8001b7c:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	3390      	adds	r3, #144	@ 0x90
 8001b84:	443b      	add	r3, r7
 8001b86:	f803 2c88 	strb.w	r2, [r3, #-136]
    while (*ptr && len < 120) {
 8001b8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <cdc_debug_log+0xa8>
 8001b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b98:	2b77      	cmp	r3, #119	@ 0x77
 8001b9a:	d9e7      	bls.n	8001b6c <cdc_debug_log+0x78>
    }
    
    // 添加换行
    debug_buf[len++] = '\r';
 8001b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ba6:	3390      	adds	r3, #144	@ 0x90
 8001ba8:	443b      	add	r3, r7
 8001baa:	220d      	movs	r2, #13
 8001bac:	f803 2c88 	strb.w	r2, [r3, #-136]
    debug_buf[len++] = '\n';
 8001bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001bba:	3390      	adds	r3, #144	@ 0x90
 8001bbc:	443b      	add	r3, r7
 8001bbe:	220a      	movs	r2, #10
 8001bc0:	f803 2c88 	strb.w	r2, [r3, #-136]
    
    // 通过CDC发送
    if (len < sizeof(debug_buf)) {
 8001bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bca:	d808      	bhi.n	8001bde <cdc_debug_log+0xea>
        CDC_Transmit_FS((uint8_t*)debug_buf, len);
 8001bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	f107 0308 	add.w	r3, r7, #8
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f019 fe7b 	bl	801b8d4 <CDC_Transmit_FS>
    }
}
 8001bde:	bf00      	nop
 8001be0:	3790      	adds	r7, #144	@ 0x90
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <int_to_str>:

// 简单的整数转字符串函数
static void int_to_str(int value, char* str, int max_len)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b08b      	sub	sp, #44	@ 0x2c
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    int is_negative = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	623b      	str	r3, [r7, #32]
    
    if (value < 0) {
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	da04      	bge.n	8001c0c <int_to_str+0x24>
        is_negative = 1;
 8001c02:	2301      	movs	r3, #1
 8001c04:	623b      	str	r3, [r7, #32]
        value = -value;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	425b      	negs	r3, r3
 8001c0a:	60fb      	str	r3, [r7, #12]
    }
    
    // 处理特殊情况0
    if (value == 0) {
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d12b      	bne.n	8001c6a <int_to_str+0x82>
        str[i++] = '0';
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	627a      	str	r2, [r7, #36]	@ 0x24
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	2230      	movs	r2, #48	@ 0x30
 8001c20:	701a      	strb	r2, [r3, #0]
        str[i] = '\0';
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	4413      	add	r3, r2
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
        return;
 8001c2c:	e05c      	b.n	8001ce8 <int_to_str+0x100>
    }
    
    // 转换数字
    while (value > 0 && i < max_len - 2) {
        str[i++] = '0' + (value % 10);
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4b30      	ldr	r3, [pc, #192]	@ (8001cf4 <int_to_str+0x10c>)
 8001c32:	fb83 1302 	smull	r1, r3, r3, r2
 8001c36:	1099      	asrs	r1, r3, #2
 8001c38:	17d3      	asrs	r3, r2, #31
 8001c3a:	1ac9      	subs	r1, r1, r3
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	1ad1      	subs	r1, r2, r3
 8001c46:	b2ca      	uxtb	r2, r1
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	1c59      	adds	r1, r3, #1
 8001c4c:	6279      	str	r1, [r7, #36]	@ 0x24
 8001c4e:	4619      	mov	r1, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	440b      	add	r3, r1
 8001c54:	3230      	adds	r2, #48	@ 0x30
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	701a      	strb	r2, [r3, #0]
        value /= 10;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4a25      	ldr	r2, [pc, #148]	@ (8001cf4 <int_to_str+0x10c>)
 8001c5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c62:	1092      	asrs	r2, r2, #2
 8001c64:	17db      	asrs	r3, r3, #31
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	60fb      	str	r3, [r7, #12]
    while (value > 0 && i < max_len - 2) {
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	dd04      	ble.n	8001c7a <int_to_str+0x92>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b02      	subs	r3, #2
 8001c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c76:	429a      	cmp	r2, r3
 8001c78:	dbd9      	blt.n	8001c2e <int_to_str+0x46>
    }
    
    // 添加负号
    if (is_negative && i < max_len - 1) {
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00c      	beq.n	8001c9a <int_to_str+0xb2>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c86:	429a      	cmp	r2, r3
 8001c88:	da07      	bge.n	8001c9a <int_to_str+0xb2>
        str[i++] = '-';
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001c90:	461a      	mov	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	4413      	add	r3, r2
 8001c96:	222d      	movs	r2, #45	@ 0x2d
 8001c98:	701a      	strb	r2, [r3, #0]
    }
    
    str[i] = '\0';
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
    
    // 反转字符串
    int start = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
    int end = i - 1;
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001caa:	3b01      	subs	r3, #1
 8001cac:	61bb      	str	r3, [r7, #24]
    while (start < end) {
 8001cae:	e017      	b.n	8001ce0 <int_to_str+0xf8>
        char temp = str[start];
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	75fb      	strb	r3, [r7, #23]
        str[start] = str[end];
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	441a      	add	r2, r3
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	68b9      	ldr	r1, [r7, #8]
 8001cc4:	440b      	add	r3, r1
 8001cc6:	7812      	ldrb	r2, [r2, #0]
 8001cc8:	701a      	strb	r2, [r3, #0]
        str[end] = temp;
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	4413      	add	r3, r2
 8001cd0:	7dfa      	ldrb	r2, [r7, #23]
 8001cd2:	701a      	strb	r2, [r3, #0]
        start++;
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
        end--;
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	61bb      	str	r3, [r7, #24]
    while (start < end) {
 8001ce0:	69fa      	ldr	r2, [r7, #28]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dbe3      	blt.n	8001cb0 <int_to_str+0xc8>
    }
}
 8001ce8:	372c      	adds	r7, #44	@ 0x2c
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	66666667 	.word	0x66666667

08001cf8 <hex_to_str>:

// 十六进制转换函数
static void hex_to_str(uint8_t value, char* str)
{
 8001cf8:	b4b0      	push	{r4, r5, r7}
 8001cfa:	b089      	sub	sp, #36	@ 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
    const char hex_chars[] = "0123456789ABCDEF";
 8001d04:	4b11      	ldr	r3, [pc, #68]	@ (8001d4c <hex_to_str+0x54>)
 8001d06:	f107 040c 	add.w	r4, r7, #12
 8001d0a:	461d      	mov	r5, r3
 8001d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d10:	682b      	ldr	r3, [r5, #0]
 8001d12:	7023      	strb	r3, [r4, #0]
    str[0] = hex_chars[value >> 4];
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	091b      	lsrs	r3, r3, #4
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	3320      	adds	r3, #32
 8001d1c:	443b      	add	r3, r7
 8001d1e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	701a      	strb	r2, [r3, #0]
    str[1] = hex_chars[value & 0x0F];
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	f003 020f 	and.w	r2, r3, #15
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	3220      	adds	r2, #32
 8001d32:	443a      	add	r2, r7
 8001d34:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001d38:	701a      	strb	r2, [r3, #0]
    str[2] = '\0';
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
}
 8001d42:	bf00      	nop
 8001d44:	3724      	adds	r7, #36	@ 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bcb0      	pop	{r4, r5, r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	0801de34 	.word	0x0801de34

08001d50 <dump_data>:

// 数据转储函数 - 显示接收到的原始数据
static void dump_data(const uint8_t* data, uint16_t len)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b0a8      	sub	sp, #160	@ 0xa0
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
    char dump_buf[128];
    char hex_str[3];
    uint16_t dump_len = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    
    // 添加前缀
    const char* prefix = "Data: ";
 8001d62:	4b3d      	ldr	r3, [pc, #244]	@ (8001e58 <dump_data+0x108>)
 8001d64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    strcpy(dump_buf, prefix);
 8001d68:	f107 0310 	add.w	r3, r7, #16
 8001d6c:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001d70:	4618      	mov	r0, r3
 8001d72:	f01a fd3e 	bl	801c7f2 <strcpy>
    dump_len = strlen(prefix);
 8001d76:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8001d7a:	f7fe fa29 	bl	80001d0 <strlen>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    
    // 最多显示前16字节的数据
    uint16_t max_bytes = (len > 16) ? 16 : len;
 8001d84:	887b      	ldrh	r3, [r7, #2]
 8001d86:	2b10      	cmp	r3, #16
 8001d88:	bf28      	it	cs
 8001d8a:	2310      	movcs	r3, #16
 8001d8c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    
    for (uint16_t i = 0; i < max_bytes && dump_len < 120; i++) {
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 8001d96:	e032      	b.n	8001dfe <dump_data+0xae>
        hex_to_str(data[i], hex_str);
 8001d98:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	4413      	add	r3, r2
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	f107 020c 	add.w	r2, r7, #12
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ffa5 	bl	8001cf8 <hex_to_str>
        if (dump_len + 3 < sizeof(dump_buf)) {
 8001dae:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001db2:	3303      	adds	r3, #3
 8001db4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001db6:	d81d      	bhi.n	8001df4 <dump_data+0xa4>
            dump_buf[dump_len++] = hex_str[0];
 8001db8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 8001dc2:	7b3a      	ldrb	r2, [r7, #12]
 8001dc4:	33a0      	adds	r3, #160	@ 0xa0
 8001dc6:	443b      	add	r3, r7
 8001dc8:	f803 2c90 	strb.w	r2, [r3, #-144]
            dump_buf[dump_len++] = hex_str[1];
 8001dcc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 8001dd6:	7b7a      	ldrb	r2, [r7, #13]
 8001dd8:	33a0      	adds	r3, #160	@ 0xa0
 8001dda:	443b      	add	r3, r7
 8001ddc:	f803 2c90 	strb.w	r2, [r3, #-144]
            dump_buf[dump_len++] = ' ';
 8001de0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 8001dea:	33a0      	adds	r3, #160	@ 0xa0
 8001dec:	443b      	add	r3, r7
 8001dee:	2220      	movs	r2, #32
 8001df0:	f803 2c90 	strb.w	r2, [r3, #-144]
    for (uint16_t i = 0; i < max_bytes && dump_len < 120; i++) {
 8001df4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 8001dfe:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 8001e02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d203      	bcs.n	8001e12 <dump_data+0xc2>
 8001e0a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001e0e:	2b77      	cmp	r3, #119	@ 0x77
 8001e10:	d9c2      	bls.n	8001d98 <dump_data+0x48>
        }
    }
    
    if (len > 16) {
 8001e12:	887b      	ldrh	r3, [r7, #2]
 8001e14:	2b10      	cmp	r3, #16
 8001e16:	d90e      	bls.n	8001e36 <dump_data+0xe6>
        const char* more = "...";
 8001e18:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <dump_data+0x10c>)
 8001e1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        strcat(dump_buf, more);
 8001e1e:	f107 0310 	add.w	r3, r7, #16
 8001e22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001e26:	4618      	mov	r0, r3
 8001e28:	f01a fbf5 	bl	801c616 <strcat>
        dump_len += 3;
 8001e2c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001e30:	3303      	adds	r3, #3
 8001e32:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    }
    
    dump_buf[dump_len] = '\0';
 8001e36:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001e3a:	33a0      	adds	r3, #160	@ 0xa0
 8001e3c:	443b      	add	r3, r7
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f803 2c90 	strb.w	r2, [r3, #-144]
    cdc_debug_log("MODBUS_TCP", dump_buf);
 8001e44:	f107 0310 	add.w	r3, r7, #16
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <dump_data+0x110>)
 8001e4c:	f7ff fe52 	bl	8001af4 <cdc_debug_log>
}
 8001e50:	bf00      	nop
 8001e52:	37a0      	adds	r7, #160	@ 0xa0
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	0801de48 	.word	0x0801de48
 8001e5c:	0801de50 	.word	0x0801de50
 8001e60:	0801de54 	.word	0x0801de54

08001e64 <process_modbus_request>:
// Holding Registers数组（根据PDF初始化默认值）
uint16_t holding_regs[100]; // 100个寄存器足够使用

// 处理单个Modbus TCP请求
static err_t process_modbus_request(struct tcp_pcb *tpcb, uint8_t* buf, uint16_t offset)
{
 8001e64:	b5b0      	push	{r4, r5, r7, lr}
 8001e66:	f5ad 6d9e 	sub.w	sp, sp, #1264	@ 0x4f0
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001e70:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8001e74:	6018      	str	r0, [r3, #0]
 8001e76:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001e7a:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8001e7e:	6019      	str	r1, [r3, #0]
 8001e80:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001e84:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001e88:	801a      	strh	r2, [r3, #0]
    // 解析Modbus TCP帧头
    uint16_t trans_id = (buf[offset] << 8) | buf[offset+1];     // 事务ID
 8001e8a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001e8e:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001e98:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	b21b      	sxth	r3, r3
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	b21a      	sxth	r2, r3
 8001ea8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001eac:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8001eb8:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8001ebc:	6809      	ldr	r1, [r1, #0]
 8001ebe:	440b      	add	r3, r1
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	b21b      	sxth	r3, r3
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	b21b      	sxth	r3, r3
 8001ec8:	f8a7 34e4 	strh.w	r3, [r7, #1252]	@ 0x4e4
    uint16_t protocol_id = (buf[offset+2] << 8) | buf[offset+3];  // 协议ID (应该是0)
 8001ecc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001ed0:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001edc:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	b21b      	sxth	r3, r3
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	b21a      	sxth	r2, r3
 8001eec:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001ef0:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	3303      	adds	r3, #3
 8001ef8:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8001efc:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8001f00:	6809      	ldr	r1, [r1, #0]
 8001f02:	440b      	add	r3, r1
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	b21b      	sxth	r3, r3
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	f8a7 34e2 	strh.w	r3, [r7, #1250]	@ 0x4e2
    uint16_t length = (buf[offset+4] << 8) | buf[offset+5];       // 长度字段
 8001f10:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001f14:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001f20:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	b21a      	sxth	r2, r3
 8001f30:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001f34:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	3305      	adds	r3, #5
 8001f3c:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8001f40:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8001f44:	6809      	ldr	r1, [r1, #0]
 8001f46:	440b      	add	r3, r1
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	b21b      	sxth	r3, r3
 8001f50:	f8a7 34e0 	strh.w	r3, [r7, #1248]	@ 0x4e0
    
    // 验证协议ID
    if (protocol_id != 0) {
 8001f54:	f8b7 34e2 	ldrh.w	r3, [r7, #1250]	@ 0x4e2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <process_modbus_request+0x108>
        cdc_debug_log("MODBUS_TCP", "Invalid protocol ID");
 8001f5c:	49d7      	ldr	r1, [pc, #860]	@ (80022bc <process_modbus_request+0x458>)
 8001f5e:	48d8      	ldr	r0, [pc, #864]	@ (80022c0 <process_modbus_request+0x45c>)
 8001f60:	f7ff fdc8 	bl	8001af4 <cdc_debug_log>
        return ERR_VAL;
 8001f64:	f06f 0305 	mvn.w	r3, #5
 8001f68:	f000 bdb5 	b.w	8002ad6 <process_modbus_request+0xc72>
    }
    
    // 验证最小长度（至少要有单元ID和功能码）
    if (length < 2) {
 8001f6c:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d807      	bhi.n	8001f84 <process_modbus_request+0x120>
        cdc_debug_log("MODBUS_TCP", "Invalid length field");
 8001f74:	49d3      	ldr	r1, [pc, #844]	@ (80022c4 <process_modbus_request+0x460>)
 8001f76:	48d2      	ldr	r0, [pc, #840]	@ (80022c0 <process_modbus_request+0x45c>)
 8001f78:	f7ff fdbc 	bl	8001af4 <cdc_debug_log>
        return ERR_VAL;
 8001f7c:	f06f 0305 	mvn.w	r3, #5
 8001f80:	f000 bda9 	b.w	8002ad6 <process_modbus_request+0xc72>
    }

    uint8_t unit_id = buf[offset+6];                       // 单元ID
 8001f84:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001f88:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	3306      	adds	r3, #6
 8001f90:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001f94:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	f887 34df 	strb.w	r3, [r7, #1247]	@ 0x4df
    uint8_t fc = buf[offset+7];                            // 函数码
 8001fa2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001fa6:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	3307      	adds	r3, #7
 8001fae:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001fb2:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	f887 34de 	strb.w	r3, [r7, #1246]	@ 0x4de

    // 添加调试信息
    char frame_info[80];
    strcpy(frame_info, "Frame: TID=");
 8001fc0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001fc4:	4ac0      	ldr	r2, [pc, #768]	@ (80022c8 <process_modbus_request+0x464>)
 8001fc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int_to_str(trans_id, frame_info + strlen(frame_info), 10);
 8001fcc:	f8b7 44e4 	ldrh.w	r4, [r7, #1252]	@ 0x4e4
 8001fd0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe f8fb 	bl	80001d0 <strlen>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001fe0:	4413      	add	r3, r2
 8001fe2:	220a      	movs	r2, #10
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	f7ff fdfe 	bl	8001be8 <int_to_str>
    const char* len_prefix = " Len=";
 8001fec:	4bb7      	ldr	r3, [pc, #732]	@ (80022cc <process_modbus_request+0x468>)
 8001fee:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
    strcat(frame_info, len_prefix);
 8001ff2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001ff6:	f8d7 14d8 	ldr.w	r1, [r7, #1240]	@ 0x4d8
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f01a fb0b 	bl	801c616 <strcat>
    int_to_str(length, frame_info + strlen(frame_info), 10);
 8002000:	f8b7 44e0 	ldrh.w	r4, [r7, #1248]	@ 0x4e0
 8002004:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe f8e1 	bl	80001d0 <strlen>
 800200e:	4602      	mov	r2, r0
 8002010:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002014:	4413      	add	r3, r2
 8002016:	220a      	movs	r2, #10
 8002018:	4619      	mov	r1, r3
 800201a:	4620      	mov	r0, r4
 800201c:	f7ff fde4 	bl	8001be8 <int_to_str>
    const char* fc_prefix = " FC=";
 8002020:	4bab      	ldr	r3, [pc, #684]	@ (80022d0 <process_modbus_request+0x46c>)
 8002022:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
    strcat(frame_info, fc_prefix);
 8002026:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800202a:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	@ 0x4d4
 800202e:	4618      	mov	r0, r3
 8002030:	f01a faf1 	bl	801c616 <strcat>
    int_to_str(fc, frame_info + strlen(frame_info), 10);
 8002034:	f897 44de 	ldrb.w	r4, [r7, #1246]	@ 0x4de
 8002038:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe f8c7 	bl	80001d0 <strlen>
 8002042:	4602      	mov	r2, r0
 8002044:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002048:	4413      	add	r3, r2
 800204a:	220a      	movs	r2, #10
 800204c:	4619      	mov	r1, r3
 800204e:	4620      	mov	r0, r4
 8002050:	f7ff fdca 	bl	8001be8 <int_to_str>
    cdc_debug_log("MODBUS_TCP", frame_info);
 8002054:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002058:	4619      	mov	r1, r3
 800205a:	4899      	ldr	r0, [pc, #612]	@ (80022c0 <process_modbus_request+0x45c>)
 800205c:	f7ff fd4a 	bl	8001af4 <cdc_debug_log>

    uint8_t reply[1024];
    reply[0] = buf[offset]; reply[1] = buf[offset+1]; // 事务ID
 8002060:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002064:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 800206e:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	4413      	add	r3, r2
 8002076:	781a      	ldrb	r2, [r3, #0]
 8002078:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800207c:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002080:	701a      	strb	r2, [r3, #0]
 8002082:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002086:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	3301      	adds	r3, #1
 800208e:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002092:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	4413      	add	r3, r2
 800209a:	781a      	ldrb	r2, [r3, #0]
 800209c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80020a0:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80020a4:	705a      	strb	r2, [r3, #1]
    reply[2] = 0; reply[3] = 0;           // 协议ID (0)
 80020a6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80020aa:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80020ae:	2200      	movs	r2, #0
 80020b0:	709a      	strb	r2, [r3, #2]
 80020b2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80020b6:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80020ba:	2200      	movs	r2, #0
 80020bc:	70da      	strb	r2, [r3, #3]
    reply[6] = unit_id;                   // 单元ID
 80020be:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80020c2:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80020c6:	f897 24df 	ldrb.w	r2, [r7, #1247]	@ 0x4df
 80020ca:	719a      	strb	r2, [r3, #6]
    uint16_t reply_data_len = 0;          // 数据部分长度（不包含单元ID）
 80020cc:	2300      	movs	r3, #0
 80020ce:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee

    if (fc == FC_READ_HOLDING) {
 80020d2:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	f040 8145 	bne.w	8002366 <process_modbus_request+0x502>
        cdc_debug_log("MODBUS_TCP", "Processing read holding");
 80020dc:	497d      	ldr	r1, [pc, #500]	@ (80022d4 <process_modbus_request+0x470>)
 80020de:	4878      	ldr	r0, [pc, #480]	@ (80022c0 <process_modbus_request+0x45c>)
 80020e0:	f7ff fd08 	bl	8001af4 <cdc_debug_log>
        
        // 检查数据长度是否足够
        if (length < 6) { // 单元ID + 功能码 + 起始地址 + 数量 = 1+1+2+2 = 6
 80020e4:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d817      	bhi.n	800211c <process_modbus_request+0x2b8>
            cdc_debug_log("MODBUS_TCP", "Read request too short");
 80020ec:	497a      	ldr	r1, [pc, #488]	@ (80022d8 <process_modbus_request+0x474>)
 80020ee:	4874      	ldr	r0, [pc, #464]	@ (80022c0 <process_modbus_request+0x45c>)
 80020f0:	f7ff fd00 	bl	8001af4 <cdc_debug_log>
            reply[7] = fc + 0x80;  // 异常函数码
 80020f4:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80020f8:	3b80      	subs	r3, #128	@ 0x80
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002100:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002104:	71da      	strb	r2, [r3, #7]
            reply[8] = 0x03;       // 异常代码：非法数据值
 8002106:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800210a:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800210e:	2203      	movs	r2, #3
 8002110:	721a      	strb	r2, [r3, #8]
            reply_data_len = 2;
 8002112:	2302      	movs	r3, #2
 8002114:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002118:	f000 bc0e 	b.w	8002938 <process_modbus_request+0xad4>
        } else {
            uint16_t addr = (buf[offset+8] << 8) | buf[offset+9]; // 起始地址
 800211c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002120:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	3308      	adds	r3, #8
 8002128:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 800212c:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	4413      	add	r3, r2
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	b21b      	sxth	r3, r3
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	b21a      	sxth	r2, r3
 800213c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002140:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	3309      	adds	r3, #9
 8002148:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 800214c:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002150:	6809      	ldr	r1, [r1, #0]
 8002152:	440b      	add	r3, r1
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b21b      	sxth	r3, r3
 8002158:	4313      	orrs	r3, r2
 800215a:	b21b      	sxth	r3, r3
 800215c:	f8a7 34b6 	strh.w	r3, [r7, #1206]	@ 0x4b6
            uint16_t qty = (buf[offset+10] << 8) | buf[offset+11]; // 数量
 8002160:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002164:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	330a      	adds	r3, #10
 800216c:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002170:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	4413      	add	r3, r2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	b21b      	sxth	r3, r3
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	b21a      	sxth	r2, r3
 8002180:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002184:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	330b      	adds	r3, #11
 800218c:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002190:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002194:	6809      	ldr	r1, [r1, #0]
 8002196:	440b      	add	r3, r1
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	b21b      	sxth	r3, r3
 800219c:	4313      	orrs	r3, r2
 800219e:	b21b      	sxth	r3, r3
 80021a0:	f8a7 34b4 	strh.w	r3, [r7, #1204]	@ 0x4b4
            
            char addr_info[50];
            strcpy(addr_info, "Read addr=");
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	4a4c      	ldr	r2, [pc, #304]	@ (80022dc <process_modbus_request+0x478>)
 80021aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80021ac:	c303      	stmia	r3!, {r0, r1}
 80021ae:	801a      	strh	r2, [r3, #0]
 80021b0:	3302      	adds	r3, #2
 80021b2:	0c12      	lsrs	r2, r2, #16
 80021b4:	701a      	strb	r2, [r3, #0]
            int_to_str(addr, addr_info + strlen(addr_info), 10);
 80021b6:	f8b7 44b6 	ldrh.w	r4, [r7, #1206]	@ 0x4b6
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe f806 	bl	80001d0 <strlen>
 80021c4:	4602      	mov	r2, r0
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4413      	add	r3, r2
 80021cc:	220a      	movs	r2, #10
 80021ce:	4619      	mov	r1, r3
 80021d0:	4620      	mov	r0, r4
 80021d2:	f7ff fd09 	bl	8001be8 <int_to_str>
            const char* qty_prefix = " qty=";
 80021d6:	4b42      	ldr	r3, [pc, #264]	@ (80022e0 <process_modbus_request+0x47c>)
 80021d8:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
            strcat(addr_info, qty_prefix);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	@ 0x4b0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f01a fa16 	bl	801c616 <strcat>
            int_to_str(qty, addr_info + strlen(addr_info), 10);
 80021ea:	f8b7 44b4 	ldrh.w	r4, [r7, #1204]	@ 0x4b4
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fd ffec 	bl	80001d0 <strlen>
 80021f8:	4602      	mov	r2, r0
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4413      	add	r3, r2
 8002200:	220a      	movs	r2, #10
 8002202:	4619      	mov	r1, r3
 8002204:	4620      	mov	r0, r4
 8002206:	f7ff fcef 	bl	8001be8 <int_to_str>
            cdc_debug_log("MODBUS_TCP", addr_info);
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	4619      	mov	r1, r3
 8002210:	482b      	ldr	r0, [pc, #172]	@ (80022c0 <process_modbus_request+0x45c>)
 8002212:	f7ff fc6f 	bl	8001af4 <cdc_debug_log>
            
            // 验证数量范围
            if (qty == 0 || qty > 125) { // Modbus标准限制单次最多读125个寄存器
 8002216:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <process_modbus_request+0x3c2>
 800221e:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 8002222:	2b7d      	cmp	r3, #125	@ 0x7d
 8002224:	d916      	bls.n	8002254 <process_modbus_request+0x3f0>
                cdc_debug_log("MODBUS_TCP", "Invalid quantity");
 8002226:	492f      	ldr	r1, [pc, #188]	@ (80022e4 <process_modbus_request+0x480>)
 8002228:	4825      	ldr	r0, [pc, #148]	@ (80022c0 <process_modbus_request+0x45c>)
 800222a:	f7ff fc63 	bl	8001af4 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 800222e:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002232:	3b80      	subs	r3, #128	@ 0x80
 8002234:	b2da      	uxtb	r2, r3
 8002236:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800223a:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800223e:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x03;       // 异常代码：非法数据值
 8002240:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002244:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002248:	2203      	movs	r2, #3
 800224a:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 800224c:	2302      	movs	r3, #2
 800224e:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002252:	e371      	b.n	8002938 <process_modbus_request+0xad4>
            } else if (addr + qty > 100) { // 错误：越界，现在只有100个寄存器
 8002254:	f8b7 24b6 	ldrh.w	r2, [r7, #1206]	@ 0x4b6
 8002258:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 800225c:	4413      	add	r3, r2
 800225e:	2b64      	cmp	r3, #100	@ 0x64
 8002260:	dd16      	ble.n	8002290 <process_modbus_request+0x42c>
                cdc_debug_log("MODBUS_TCP", "Address out of bounds");
 8002262:	4921      	ldr	r1, [pc, #132]	@ (80022e8 <process_modbus_request+0x484>)
 8002264:	4816      	ldr	r0, [pc, #88]	@ (80022c0 <process_modbus_request+0x45c>)
 8002266:	f7ff fc45 	bl	8001af4 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 800226a:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 800226e:	3b80      	subs	r3, #128	@ 0x80
 8002270:	b2da      	uxtb	r2, r3
 8002272:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002276:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800227a:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x02;       // 异常代码：非法数据地址
 800227c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002280:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002284:	2202      	movs	r2, #2
 8002286:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8002288:	2302      	movs	r3, #2
 800228a:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 800228e:	e353      	b.n	8002938 <process_modbus_request+0xad4>
            } else {
                reply[7] = fc;              // 函数码
 8002290:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002294:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002298:	f897 24de 	ldrb.w	r2, [r7, #1246]	@ 0x4de
 800229c:	71da      	strb	r2, [r3, #7]
                reply[8] = qty * 2;         // 字节数
 800229e:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80022ac:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80022b0:	721a      	strb	r2, [r3, #8]
                for (uint16_t i = 0; i < qty; i++) {
 80022b2:	2300      	movs	r3, #0
 80022b4:	f8a7 34ec 	strh.w	r3, [r7, #1260]	@ 0x4ec
 80022b8:	e043      	b.n	8002342 <process_modbus_request+0x4de>
 80022ba:	bf00      	nop
 80022bc:	0801de60 	.word	0x0801de60
 80022c0:	0801de54 	.word	0x0801de54
 80022c4:	0801de74 	.word	0x0801de74
 80022c8:	0801de8c 	.word	0x0801de8c
 80022cc:	0801de98 	.word	0x0801de98
 80022d0:	0801dea0 	.word	0x0801dea0
 80022d4:	0801dea8 	.word	0x0801dea8
 80022d8:	0801dec0 	.word	0x0801dec0
 80022dc:	0801ded8 	.word	0x0801ded8
 80022e0:	0801dee4 	.word	0x0801dee4
 80022e4:	0801deec 	.word	0x0801deec
 80022e8:	0801df00 	.word	0x0801df00
                    reply[9 + i*2] = holding_regs[addr + i] >> 8;
 80022ec:	f8b7 24b6 	ldrh.w	r2, [r7, #1206]	@ 0x4b6
 80022f0:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 80022f4:	4413      	add	r3, r2
 80022f6:	4abe      	ldr	r2, [pc, #760]	@ (80025f0 <process_modbus_request+0x78c>)
 80022f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	b29a      	uxth	r2, r3
 8002300:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	3309      	adds	r3, #9
 8002308:	b2d1      	uxtb	r1, r2
 800230a:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 800230e:	f5a2 6293 	sub.w	r2, r2, #1176	@ 0x498
 8002312:	54d1      	strb	r1, [r2, r3]
                    reply[10 + i*2] = holding_regs[addr + i] & 0xFF;
 8002314:	f8b7 24b6 	ldrh.w	r2, [r7, #1206]	@ 0x4b6
 8002318:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 800231c:	4413      	add	r3, r2
 800231e:	4ab4      	ldr	r2, [pc, #720]	@ (80025f0 <process_modbus_request+0x78c>)
 8002320:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002324:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8002328:	3305      	adds	r3, #5
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	b2d1      	uxtb	r1, r2
 800232e:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002332:	f5a2 6293 	sub.w	r2, r2, #1176	@ 0x498
 8002336:	54d1      	strb	r1, [r2, r3]
                for (uint16_t i = 0; i < qty; i++) {
 8002338:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 800233c:	3301      	adds	r3, #1
 800233e:	f8a7 34ec 	strh.w	r3, [r7, #1260]	@ 0x4ec
 8002342:	f8b7 24ec 	ldrh.w	r2, [r7, #1260]	@ 0x4ec
 8002346:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 800234a:	429a      	cmp	r2, r3
 800234c:	d3ce      	bcc.n	80022ec <process_modbus_request+0x488>
                }
                reply_data_len = 2 + qty * 2; // 单元ID + 函数码 + 字节数 + 数据
 800234e:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 8002352:	3301      	adds	r3, #1
 8002354:	b29b      	uxth	r3, r3
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
                cdc_debug_log("MODBUS_TCP", "Read success");
 800235c:	49a5      	ldr	r1, [pc, #660]	@ (80025f4 <process_modbus_request+0x790>)
 800235e:	48a6      	ldr	r0, [pc, #664]	@ (80025f8 <process_modbus_request+0x794>)
 8002360:	f7ff fbc8 	bl	8001af4 <cdc_debug_log>
 8002364:	e2e8      	b.n	8002938 <process_modbus_request+0xad4>
            }
        }
    } else if (fc == FC_WRITE_SINGLE) {
 8002366:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 800236a:	2b06      	cmp	r3, #6
 800236c:	f040 811c 	bne.w	80025a8 <process_modbus_request+0x744>
        cdc_debug_log("MODBUS_TCP", "Processing write single");
 8002370:	49a2      	ldr	r1, [pc, #648]	@ (80025fc <process_modbus_request+0x798>)
 8002372:	48a1      	ldr	r0, [pc, #644]	@ (80025f8 <process_modbus_request+0x794>)
 8002374:	f7ff fbbe 	bl	8001af4 <cdc_debug_log>
        
        // 检查数据长度是否足够：单元ID + 功能码 + 地址 + 值 = 1+1+2+2 = 6
        if (length < 6) {
 8002378:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 800237c:	2b05      	cmp	r3, #5
 800237e:	d816      	bhi.n	80023ae <process_modbus_request+0x54a>
            cdc_debug_log("MODBUS_TCP", "Write single request too short");
 8002380:	499f      	ldr	r1, [pc, #636]	@ (8002600 <process_modbus_request+0x79c>)
 8002382:	489d      	ldr	r0, [pc, #628]	@ (80025f8 <process_modbus_request+0x794>)
 8002384:	f7ff fbb6 	bl	8001af4 <cdc_debug_log>
            reply[7] = fc + 0x80;  // 异常函数码
 8002388:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 800238c:	3b80      	subs	r3, #128	@ 0x80
 800238e:	b2da      	uxtb	r2, r3
 8002390:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002394:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002398:	71da      	strb	r2, [r3, #7]
            reply[8] = 0x03;       // 异常代码：非法数据值
 800239a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800239e:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80023a2:	2203      	movs	r2, #3
 80023a4:	721a      	strb	r2, [r3, #8]
            reply_data_len = 2;
 80023a6:	2302      	movs	r3, #2
 80023a8:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 80023ac:	e2c4      	b.n	8002938 <process_modbus_request+0xad4>
        } else {
            uint16_t addr = (buf[offset+8] << 8) | buf[offset+9];   // 寄存器地址
 80023ae:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80023b2:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	3308      	adds	r3, #8
 80023ba:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80023be:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	4413      	add	r3, r2
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	b21b      	sxth	r3, r3
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	b21a      	sxth	r2, r3
 80023ce:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80023d2:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	3309      	adds	r3, #9
 80023da:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 80023de:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 80023e2:	6809      	ldr	r1, [r1, #0]
 80023e4:	440b      	add	r3, r1
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	b21b      	sxth	r3, r3
 80023ea:	4313      	orrs	r3, r2
 80023ec:	b21b      	sxth	r3, r3
 80023ee:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
            uint16_t value = (buf[offset+10] << 8) | buf[offset+11]; // 要写入的值
 80023f2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80023f6:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	330a      	adds	r3, #10
 80023fe:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002402:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	4413      	add	r3, r2
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	b21b      	sxth	r3, r3
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	b21a      	sxth	r2, r3
 8002412:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002416:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	330b      	adds	r3, #11
 800241e:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002422:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002426:	6809      	ldr	r1, [r1, #0]
 8002428:	440b      	add	r3, r1
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	b21b      	sxth	r3, r3
 800242e:	4313      	orrs	r3, r2
 8002430:	b21b      	sxth	r3, r3
 8002432:	f8a7 34c2 	strh.w	r3, [r7, #1218]	@ 0x4c2
            
            char write_info[60];
            strcpy(write_info, "Write addr=");
 8002436:	f107 0314 	add.w	r3, r7, #20
 800243a:	4a72      	ldr	r2, [pc, #456]	@ (8002604 <process_modbus_request+0x7a0>)
 800243c:	ca07      	ldmia	r2, {r0, r1, r2}
 800243e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            int_to_str(addr, write_info + strlen(write_info), 10);
 8002442:	f8b7 44c4 	ldrh.w	r4, [r7, #1220]	@ 0x4c4
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	4618      	mov	r0, r3
 800244c:	f7fd fec0 	bl	80001d0 <strlen>
 8002450:	4602      	mov	r2, r0
 8002452:	f107 0314 	add.w	r3, r7, #20
 8002456:	4413      	add	r3, r2
 8002458:	220a      	movs	r2, #10
 800245a:	4619      	mov	r1, r3
 800245c:	4620      	mov	r0, r4
 800245e:	f7ff fbc3 	bl	8001be8 <int_to_str>
            const char* val_prefix = " val=0x";
 8002462:	4b69      	ldr	r3, [pc, #420]	@ (8002608 <process_modbus_request+0x7a4>)
 8002464:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
            strcat(write_info, val_prefix);
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	@ 0x4bc
 8002470:	4618      	mov	r0, r3
 8002472:	f01a f8d0 	bl	801c616 <strcat>
            // 简单的十六进制转换
            char hex_str[5];
            hex_str[4] = '\0';
 8002476:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800247a:	f5a3 6394 	sub.w	r3, r3, #1184	@ 0x4a0
 800247e:	2200      	movs	r2, #0
 8002480:	711a      	strb	r2, [r3, #4]
            for (int j = 3; j >= 0; j--) {
 8002482:	2303      	movs	r3, #3
 8002484:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 8002488:	e027      	b.n	80024da <process_modbus_request+0x676>
                int nibble = (value >> (j * 4)) & 0xF;
 800248a:	f8b7 24c2 	ldrh.w	r2, [r7, #1218]	@ 0x4c2
 800248e:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	fa42 f303 	asr.w	r3, r2, r3
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	f8c7 34b8 	str.w	r3, [r7, #1208]	@ 0x4b8
                hex_str[3-j] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10);
 80024a0:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80024a4:	2b09      	cmp	r3, #9
 80024a6:	dc05      	bgt.n	80024b4 <process_modbus_request+0x650>
 80024a8:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	3330      	adds	r3, #48	@ 0x30
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	e004      	b.n	80024be <process_modbus_request+0x65a>
 80024b4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	3337      	adds	r3, #55	@ 0x37
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	@ 0x4e8
 80024c2:	f1c2 0203 	rsb	r2, r2, #3
 80024c6:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 80024ca:	f5a1 6194 	sub.w	r1, r1, #1184	@ 0x4a0
 80024ce:	548b      	strb	r3, [r1, r2]
            for (int j = 3; j >= 0; j--) {
 80024d0:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 80024d4:	3b01      	subs	r3, #1
 80024d6:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 80024da:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	dad3      	bge.n	800248a <process_modbus_request+0x626>
            }
            strcat(write_info, hex_str);
 80024e2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80024e6:	f107 0314 	add.w	r3, r7, #20
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f01a f892 	bl	801c616 <strcat>
            cdc_debug_log("MODBUS_TCP", write_info);
 80024f2:	f107 0314 	add.w	r3, r7, #20
 80024f6:	4619      	mov	r1, r3
 80024f8:	483f      	ldr	r0, [pc, #252]	@ (80025f8 <process_modbus_request+0x794>)
 80024fa:	f7ff fafb 	bl	8001af4 <cdc_debug_log>
            
            // 验证地址范围
            if (addr >= 100) {
 80024fe:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8002502:	2b63      	cmp	r3, #99	@ 0x63
 8002504:	d916      	bls.n	8002534 <process_modbus_request+0x6d0>
                cdc_debug_log("MODBUS_TCP", "Write address out of bounds");
 8002506:	4941      	ldr	r1, [pc, #260]	@ (800260c <process_modbus_request+0x7a8>)
 8002508:	483b      	ldr	r0, [pc, #236]	@ (80025f8 <process_modbus_request+0x794>)
 800250a:	f7ff faf3 	bl	8001af4 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 800250e:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002512:	3b80      	subs	r3, #128	@ 0x80
 8002514:	b2da      	uxtb	r2, r3
 8002516:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800251a:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800251e:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x02;       // 异常代码：非法数据地址
 8002520:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002524:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002528:	2202      	movs	r2, #2
 800252a:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 800252c:	2302      	movs	r3, #2
 800252e:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002532:	e201      	b.n	8002938 <process_modbus_request+0xad4>
            } else {
                // 写入寄存器
                holding_regs[addr] = value;
 8002534:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8002538:	492d      	ldr	r1, [pc, #180]	@ (80025f0 <process_modbus_request+0x78c>)
 800253a:	f8b7 24c2 	ldrh.w	r2, [r7, #1218]	@ 0x4c2
 800253e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                
                // 回显请求（标准Modbus写单个寄存器响应）
                reply[7] = fc;                           // 函数码
 8002542:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002546:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800254a:	f897 24de 	ldrb.w	r2, [r7, #1246]	@ 0x4de
 800254e:	71da      	strb	r2, [r3, #7]
                reply[8] = (addr >> 8) & 0xFF;          // 地址高字节
 8002550:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	b29b      	uxth	r3, r3
 8002558:	b2da      	uxtb	r2, r3
 800255a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800255e:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002562:	721a      	strb	r2, [r3, #8]
                reply[9] = addr & 0xFF;                 // 地址低字节
 8002564:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8002568:	b2da      	uxtb	r2, r3
 800256a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800256e:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002572:	725a      	strb	r2, [r3, #9]
                reply[10] = (value >> 8) & 0xFF;        // 值高字节
 8002574:	f8b7 34c2 	ldrh.w	r3, [r7, #1218]	@ 0x4c2
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	b29b      	uxth	r3, r3
 800257c:	b2da      	uxtb	r2, r3
 800257e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002582:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002586:	729a      	strb	r2, [r3, #10]
                reply[11] = value & 0xFF;               // 值低字节
 8002588:	f8b7 34c2 	ldrh.w	r3, [r7, #1218]	@ 0x4c2
 800258c:	b2da      	uxtb	r2, r3
 800258e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002592:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002596:	72da      	strb	r2, [r3, #11]
                reply_data_len = 5; // 功能码 + 地址 + 值 = 1+2+2 = 5
 8002598:	2305      	movs	r3, #5
 800259a:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
                cdc_debug_log("MODBUS_TCP", "Write single success");
 800259e:	491c      	ldr	r1, [pc, #112]	@ (8002610 <process_modbus_request+0x7ac>)
 80025a0:	4815      	ldr	r0, [pc, #84]	@ (80025f8 <process_modbus_request+0x794>)
 80025a2:	f7ff faa7 	bl	8001af4 <cdc_debug_log>
 80025a6:	e1c7      	b.n	8002938 <process_modbus_request+0xad4>
            }
        }
    } else if (fc == FC_WRITE_MULTIPLE) {
 80025a8:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80025ac:	2b10      	cmp	r3, #16
 80025ae:	f040 81ad 	bne.w	800290c <process_modbus_request+0xaa8>
        cdc_debug_log("MODBUS_TCP", "Processing write multiple");
 80025b2:	4918      	ldr	r1, [pc, #96]	@ (8002614 <process_modbus_request+0x7b0>)
 80025b4:	4810      	ldr	r0, [pc, #64]	@ (80025f8 <process_modbus_request+0x794>)
 80025b6:	f7ff fa9d 	bl	8001af4 <cdc_debug_log>
        
        // 检查数据长度是否足够：单元ID + 功能码 + 起始地址 + 数量 + 字节数 = 1+1+2+2+1 = 7
        if (length < 7) {
 80025ba:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 80025be:	2b06      	cmp	r3, #6
 80025c0:	d82c      	bhi.n	800261c <process_modbus_request+0x7b8>
            cdc_debug_log("MODBUS_TCP", "Write multiple request too short");
 80025c2:	4915      	ldr	r1, [pc, #84]	@ (8002618 <process_modbus_request+0x7b4>)
 80025c4:	480c      	ldr	r0, [pc, #48]	@ (80025f8 <process_modbus_request+0x794>)
 80025c6:	f7ff fa95 	bl	8001af4 <cdc_debug_log>
            reply[7] = fc + 0x80;  // 异常函数码
 80025ca:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80025ce:	3b80      	subs	r3, #128	@ 0x80
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80025d6:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80025da:	71da      	strb	r2, [r3, #7]
            reply[8] = 0x03;       // 异常代码：非法数据值
 80025dc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80025e0:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80025e4:	2203      	movs	r2, #3
 80025e6:	721a      	strb	r2, [r3, #8]
            reply_data_len = 2;
 80025e8:	2302      	movs	r3, #2
 80025ea:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 80025ee:	e1a3      	b.n	8002938 <process_modbus_request+0xad4>
 80025f0:	20000590 	.word	0x20000590
 80025f4:	0801df18 	.word	0x0801df18
 80025f8:	0801de54 	.word	0x0801de54
 80025fc:	0801df28 	.word	0x0801df28
 8002600:	0801df40 	.word	0x0801df40
 8002604:	0801df60 	.word	0x0801df60
 8002608:	0801df6c 	.word	0x0801df6c
 800260c:	0801df74 	.word	0x0801df74
 8002610:	0801df90 	.word	0x0801df90
 8002614:	0801dfa8 	.word	0x0801dfa8
 8002618:	0801dfc4 	.word	0x0801dfc4
        } else {
            uint16_t addr = (buf[offset+8] << 8) | buf[offset+9];   // 起始地址
 800261c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002620:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	3308      	adds	r3, #8
 8002628:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 800262c:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	4413      	add	r3, r2
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	b21b      	sxth	r3, r3
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	b21a      	sxth	r2, r3
 800263c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002640:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	3309      	adds	r3, #9
 8002648:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 800264c:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002650:	6809      	ldr	r1, [r1, #0]
 8002652:	440b      	add	r3, r1
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	b21b      	sxth	r3, r3
 8002658:	4313      	orrs	r3, r2
 800265a:	b21b      	sxth	r3, r3
 800265c:	f8a7 34d2 	strh.w	r3, [r7, #1234]	@ 0x4d2
            uint16_t qty = (buf[offset+10] << 8) | buf[offset+11];  // 寄存器数量
 8002660:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002664:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	330a      	adds	r3, #10
 800266c:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002670:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	4413      	add	r3, r2
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	b21b      	sxth	r3, r3
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	b21a      	sxth	r2, r3
 8002680:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002684:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	330b      	adds	r3, #11
 800268c:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002690:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002694:	6809      	ldr	r1, [r1, #0]
 8002696:	440b      	add	r3, r1
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	b21b      	sxth	r3, r3
 800269c:	4313      	orrs	r3, r2
 800269e:	b21b      	sxth	r3, r3
 80026a0:	f8a7 34d0 	strh.w	r3, [r7, #1232]	@ 0x4d0
            uint8_t byte_count = buf[offset+12];                    // 字节数
 80026a4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80026a8:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	330c      	adds	r3, #12
 80026b0:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80026b4:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
            
            char write_info[60];
            strcpy(write_info, "Write mult addr=");
 80026c2:	f107 0314 	add.w	r3, r7, #20
 80026c6:	4a89      	ldr	r2, [pc, #548]	@ (80028ec <process_modbus_request+0xa88>)
 80026c8:	461c      	mov	r4, r3
 80026ca:	4615      	mov	r5, r2
 80026cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026d0:	682b      	ldr	r3, [r5, #0]
 80026d2:	7023      	strb	r3, [r4, #0]
            int_to_str(addr, write_info + strlen(write_info), 10);
 80026d4:	f8b7 44d2 	ldrh.w	r4, [r7, #1234]	@ 0x4d2
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fd fd77 	bl	80001d0 <strlen>
 80026e2:	4602      	mov	r2, r0
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	4413      	add	r3, r2
 80026ea:	220a      	movs	r2, #10
 80026ec:	4619      	mov	r1, r3
 80026ee:	4620      	mov	r0, r4
 80026f0:	f7ff fa7a 	bl	8001be8 <int_to_str>
            const char* qty_prefix = " qty=";
 80026f4:	4b7e      	ldr	r3, [pc, #504]	@ (80028f0 <process_modbus_request+0xa8c>)
 80026f6:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
            strcat(write_info, qty_prefix);
 80026fa:	f107 0314 	add.w	r3, r7, #20
 80026fe:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	@ 0x4c8
 8002702:	4618      	mov	r0, r3
 8002704:	f019 ff87 	bl	801c616 <strcat>
            int_to_str(qty, write_info + strlen(write_info), 10);
 8002708:	f8b7 44d0 	ldrh.w	r4, [r7, #1232]	@ 0x4d0
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	4618      	mov	r0, r3
 8002712:	f7fd fd5d 	bl	80001d0 <strlen>
 8002716:	4602      	mov	r2, r0
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	4413      	add	r3, r2
 800271e:	220a      	movs	r2, #10
 8002720:	4619      	mov	r1, r3
 8002722:	4620      	mov	r0, r4
 8002724:	f7ff fa60 	bl	8001be8 <int_to_str>
            cdc_debug_log("MODBUS_TCP", write_info);
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	4619      	mov	r1, r3
 800272e:	4871      	ldr	r0, [pc, #452]	@ (80028f4 <process_modbus_request+0xa90>)
 8002730:	f7ff f9e0 	bl	8001af4 <cdc_debug_log>
            
            // 验证参数
            if (qty == 0 || qty > 123 || byte_count != qty * 2) { // Modbus标准限制
 8002734:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <process_modbus_request+0x8ee>
 800273c:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002740:	2b7b      	cmp	r3, #123	@ 0x7b
 8002742:	d806      	bhi.n	8002752 <process_modbus_request+0x8ee>
 8002744:	f897 24cf 	ldrb.w	r2, [r7, #1231]	@ 0x4cf
 8002748:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	429a      	cmp	r2, r3
 8002750:	d016      	beq.n	8002780 <process_modbus_request+0x91c>
                cdc_debug_log("MODBUS_TCP", "Invalid write multiple parameters");
 8002752:	4969      	ldr	r1, [pc, #420]	@ (80028f8 <process_modbus_request+0xa94>)
 8002754:	4867      	ldr	r0, [pc, #412]	@ (80028f4 <process_modbus_request+0xa90>)
 8002756:	f7ff f9cd 	bl	8001af4 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 800275a:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 800275e:	3b80      	subs	r3, #128	@ 0x80
 8002760:	b2da      	uxtb	r2, r3
 8002762:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002766:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800276a:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x03;       // 异常代码：非法数据值
 800276c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002770:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002774:	2203      	movs	r2, #3
 8002776:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8002778:	2302      	movs	r3, #2
 800277a:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 800277e:	e0db      	b.n	8002938 <process_modbus_request+0xad4>
            } else if (addr + qty > 100) { // 地址越界检查
 8002780:	f8b7 24d2 	ldrh.w	r2, [r7, #1234]	@ 0x4d2
 8002784:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002788:	4413      	add	r3, r2
 800278a:	2b64      	cmp	r3, #100	@ 0x64
 800278c:	dd16      	ble.n	80027bc <process_modbus_request+0x958>
                cdc_debug_log("MODBUS_TCP", "Write multiple address out of bounds");
 800278e:	495b      	ldr	r1, [pc, #364]	@ (80028fc <process_modbus_request+0xa98>)
 8002790:	4858      	ldr	r0, [pc, #352]	@ (80028f4 <process_modbus_request+0xa90>)
 8002792:	f7ff f9af 	bl	8001af4 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 8002796:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 800279a:	3b80      	subs	r3, #128	@ 0x80
 800279c:	b2da      	uxtb	r2, r3
 800279e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80027a2:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80027a6:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x02;       // 异常代码：非法数据地址
 80027a8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80027ac:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80027b0:	2202      	movs	r2, #2
 80027b2:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 80027b4:	2302      	movs	r3, #2
 80027b6:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 80027ba:	e0bd      	b.n	8002938 <process_modbus_request+0xad4>
            } else if (length < 7 + byte_count) { // 检查是否有足够的数据
 80027bc:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 80027c0:	1d9a      	adds	r2, r3, #6
 80027c2:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 80027c6:	429a      	cmp	r2, r3
 80027c8:	db16      	blt.n	80027f8 <process_modbus_request+0x994>
                cdc_debug_log("MODBUS_TCP", "Write multiple data incomplete");
 80027ca:	494d      	ldr	r1, [pc, #308]	@ (8002900 <process_modbus_request+0xa9c>)
 80027cc:	4849      	ldr	r0, [pc, #292]	@ (80028f4 <process_modbus_request+0xa90>)
 80027ce:	f7ff f991 	bl	8001af4 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 80027d2:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80027d6:	3b80      	subs	r3, #128	@ 0x80
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80027de:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80027e2:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x03;       // 异常代码：非法数据值
 80027e4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80027e8:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80027ec:	2203      	movs	r2, #3
 80027ee:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 80027f0:	2302      	movs	r3, #2
 80027f2:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 80027f6:	e09f      	b.n	8002938 <process_modbus_request+0xad4>
            } else {
                // 写入多个寄存器
                for (uint16_t i = 0; i < qty; i++) {
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8a7 34e6 	strh.w	r3, [r7, #1254]	@ 0x4e6
 80027fe:	e03c      	b.n	800287a <process_modbus_request+0xa16>
                    uint16_t value = (buf[offset+13+i*2] << 8) | buf[offset+14+i*2];
 8002800:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002804:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	f103 020d 	add.w	r2, r3, #13
 800280e:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	461a      	mov	r2, r3
 8002818:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800281c:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4413      	add	r3, r2
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	b21b      	sxth	r3, r3
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	b21a      	sxth	r2, r3
 800282c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002830:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	f103 010e 	add.w	r1, r3, #14
 800283a:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	440b      	add	r3, r1
 8002842:	4619      	mov	r1, r3
 8002844:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002848:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	440b      	add	r3, r1
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b21b      	sxth	r3, r3
 8002854:	4313      	orrs	r3, r2
 8002856:	b21b      	sxth	r3, r3
 8002858:	f8a7 34c6 	strh.w	r3, [r7, #1222]	@ 0x4c6
                    holding_regs[addr + i] = value;
 800285c:	f8b7 24d2 	ldrh.w	r2, [r7, #1234]	@ 0x4d2
 8002860:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 8002864:	4413      	add	r3, r2
 8002866:	4927      	ldr	r1, [pc, #156]	@ (8002904 <process_modbus_request+0xaa0>)
 8002868:	f8b7 24c6 	ldrh.w	r2, [r7, #1222]	@ 0x4c6
 800286c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (uint16_t i = 0; i < qty; i++) {
 8002870:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 8002874:	3301      	adds	r3, #1
 8002876:	f8a7 34e6 	strh.w	r3, [r7, #1254]	@ 0x4e6
 800287a:	f8b7 24e6 	ldrh.w	r2, [r7, #1254]	@ 0x4e6
 800287e:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002882:	429a      	cmp	r2, r3
 8002884:	d3bc      	bcc.n	8002800 <process_modbus_request+0x99c>
                }
                
                // 响应：功能码 + 起始地址 + 寄存器数量
                reply[7] = fc;                          // 函数码
 8002886:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800288a:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800288e:	f897 24de 	ldrb.w	r2, [r7, #1246]	@ 0x4de
 8002892:	71da      	strb	r2, [r3, #7]
                reply[8] = (addr >> 8) & 0xFF;         // 起始地址高字节
 8002894:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8002898:	0a1b      	lsrs	r3, r3, #8
 800289a:	b29b      	uxth	r3, r3
 800289c:	b2da      	uxtb	r2, r3
 800289e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80028a2:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80028a6:	721a      	strb	r2, [r3, #8]
                reply[9] = addr & 0xFF;                // 起始地址低字节
 80028a8:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80028b2:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80028b6:	725a      	strb	r2, [r3, #9]
                reply[10] = (qty >> 8) & 0xFF;         // 数量高字节
 80028b8:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 80028bc:	0a1b      	lsrs	r3, r3, #8
 80028be:	b29b      	uxth	r3, r3
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80028c6:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80028ca:	729a      	strb	r2, [r3, #10]
                reply[11] = qty & 0xFF;                // 数量低字节
 80028cc:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80028d6:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80028da:	72da      	strb	r2, [r3, #11]
                reply_data_len = 5; // 功能码 + 地址 + 数量 = 1+2+2 = 5
 80028dc:	2305      	movs	r3, #5
 80028de:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
                cdc_debug_log("MODBUS_TCP", "Write multiple success");
 80028e2:	4909      	ldr	r1, [pc, #36]	@ (8002908 <process_modbus_request+0xaa4>)
 80028e4:	4803      	ldr	r0, [pc, #12]	@ (80028f4 <process_modbus_request+0xa90>)
 80028e6:	f7ff f905 	bl	8001af4 <cdc_debug_log>
 80028ea:	e025      	b.n	8002938 <process_modbus_request+0xad4>
 80028ec:	0801dfe8 	.word	0x0801dfe8
 80028f0:	0801dee4 	.word	0x0801dee4
 80028f4:	0801de54 	.word	0x0801de54
 80028f8:	0801dffc 	.word	0x0801dffc
 80028fc:	0801e020 	.word	0x0801e020
 8002900:	0801e048 	.word	0x0801e048
 8002904:	20000590 	.word	0x20000590
 8002908:	0801e068 	.word	0x0801e068
            }
        }
    } else {
        // 其他功能码暂时返回不支持
        cdc_debug_log("MODBUS_TCP", "Unsupported function code");
 800290c:	4974      	ldr	r1, [pc, #464]	@ (8002ae0 <process_modbus_request+0xc7c>)
 800290e:	4875      	ldr	r0, [pc, #468]	@ (8002ae4 <process_modbus_request+0xc80>)
 8002910:	f7ff f8f0 	bl	8001af4 <cdc_debug_log>
        reply[7] = fc + 0x80;  // 异常函数码
 8002914:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002918:	3b80      	subs	r3, #128	@ 0x80
 800291a:	b2da      	uxtb	r2, r3
 800291c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002920:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002924:	71da      	strb	r2, [r3, #7]
        reply[8] = 0x01;       // 异常代码：非法函数码
 8002926:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800292a:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800292e:	2201      	movs	r2, #1
 8002930:	721a      	strb	r2, [r3, #8]
        reply_data_len = 2;
 8002932:	2302      	movs	r3, #2
 8002934:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
    }

    // 设置长度字段 (包含单元ID + 数据部分)
    uint16_t total_length = reply_data_len + 1; // +1 for unit_id
 8002938:	f8b7 34ee 	ldrh.w	r3, [r7, #1262]	@ 0x4ee
 800293c:	3301      	adds	r3, #1
 800293e:	f8a7 34ae 	strh.w	r3, [r7, #1198]	@ 0x4ae
    reply[4] = (total_length >> 8) & 0xFF; 
 8002942:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	@ 0x4ae
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	b29b      	uxth	r3, r3
 800294a:	b2da      	uxtb	r2, r3
 800294c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002950:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002954:	711a      	strb	r2, [r3, #4]
    reply[5] = total_length & 0xFF;
 8002956:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	@ 0x4ae
 800295a:	b2da      	uxtb	r2, r3
 800295c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002960:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002964:	715a      	strb	r2, [r3, #5]
    
    cdc_debug_log("MODBUS_TCP", "Sending reply");
 8002966:	4960      	ldr	r1, [pc, #384]	@ (8002ae8 <process_modbus_request+0xc84>)
 8002968:	485e      	ldr	r0, [pc, #376]	@ (8002ae4 <process_modbus_request+0xc80>)
 800296a:	f7ff f8c3 	bl	8001af4 <cdc_debug_log>
    
    // 发送完整的TCP帧 (6字节头 + 数据部分)
    uint16_t total_frame_len = 6 + total_length;
 800296e:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	@ 0x4ae
 8002972:	3306      	adds	r3, #6
 8002974:	f8a7 34ac 	strh.w	r3, [r7, #1196]	@ 0x4ac
    
    // 检查TCP发送缓冲区是否有足够空间
    u16_t available_space = tcp_sndbuf(tpcb);
 8002978:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800297c:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002986:	f8a7 34aa 	strh.w	r3, [r7, #1194]	@ 0x4aa
    if (available_space < total_frame_len) {
 800298a:	f8b7 24aa 	ldrh.w	r2, [r7, #1194]	@ 0x4aa
 800298e:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	@ 0x4ac
 8002992:	429a      	cmp	r2, r3
 8002994:	d223      	bcs.n	80029de <process_modbus_request+0xb7a>
        char space_msg[50];
        strcpy(space_msg, "TCP buffer low: available=");
 8002996:	f107 0314 	add.w	r3, r7, #20
 800299a:	4a54      	ldr	r2, [pc, #336]	@ (8002aec <process_modbus_request+0xc88>)
 800299c:	461c      	mov	r4, r3
 800299e:	4615      	mov	r5, r2
 80029a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80029a8:	c403      	stmia	r4!, {r0, r1}
 80029aa:	8022      	strh	r2, [r4, #0]
 80029ac:	3402      	adds	r4, #2
 80029ae:	0c13      	lsrs	r3, r2, #16
 80029b0:	7023      	strb	r3, [r4, #0]
        int_to_str(available_space, space_msg + strlen(space_msg), 10);
 80029b2:	f8b7 44aa 	ldrh.w	r4, [r7, #1194]	@ 0x4aa
 80029b6:	f107 0314 	add.w	r3, r7, #20
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fd fc08 	bl	80001d0 <strlen>
 80029c0:	4602      	mov	r2, r0
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	4413      	add	r3, r2
 80029c8:	220a      	movs	r2, #10
 80029ca:	4619      	mov	r1, r3
 80029cc:	4620      	mov	r0, r4
 80029ce:	f7ff f90b 	bl	8001be8 <int_to_str>
        cdc_debug_log("MODBUS_TCP", space_msg);
 80029d2:	f107 0314 	add.w	r3, r7, #20
 80029d6:	4619      	mov	r1, r3
 80029d8:	4842      	ldr	r0, [pc, #264]	@ (8002ae4 <process_modbus_request+0xc80>)
 80029da:	f7ff f88b 	bl	8001af4 <cdc_debug_log>
        // 仍然尝试发送，但记录警告
    }
    
    err_t write_err = tcp_write(tpcb, reply, total_frame_len, TCP_WRITE_FLAG_COPY);
 80029de:	f8b7 24ac 	ldrh.w	r2, [r7, #1196]	@ 0x4ac
 80029e2:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80029e6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80029ea:	f2a3 40e4 	subw	r0, r3, #1252	@ 0x4e4
 80029ee:	2301      	movs	r3, #1
 80029f0:	6800      	ldr	r0, [r0, #0]
 80029f2:	f014 f9e3 	bl	8016dbc <tcp_write>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f887 34a9 	strb.w	r3, [r7, #1193]	@ 0x4a9
    if (write_err != ERR_OK) {
 80029fc:	f997 34a9 	ldrsb.w	r3, [r7, #1193]	@ 0x4a9
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d02f      	beq.n	8002a64 <process_modbus_request+0xc00>
        char write_err_msg[40];
        strcpy(write_err_msg, "TCP write failed err=");
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	4a39      	ldr	r2, [pc, #228]	@ (8002af0 <process_modbus_request+0xc8c>)
 8002a0a:	461c      	mov	r4, r3
 8002a0c:	4615      	mov	r5, r2
 8002a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a16:	6020      	str	r0, [r4, #0]
 8002a18:	3404      	adds	r4, #4
 8002a1a:	8021      	strh	r1, [r4, #0]
        int_to_str(write_err, write_err_msg + strlen(write_err_msg), 10);
 8002a1c:	f997 44a9 	ldrsb.w	r4, [r7, #1193]	@ 0x4a9
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fd fbd3 	bl	80001d0 <strlen>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	4413      	add	r3, r2
 8002a32:	220a      	movs	r2, #10
 8002a34:	4619      	mov	r1, r3
 8002a36:	4620      	mov	r0, r4
 8002a38:	f7ff f8d6 	bl	8001be8 <int_to_str>
        cdc_debug_log("MODBUS_TCP", write_err_msg);
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	4619      	mov	r1, r3
 8002a42:	4828      	ldr	r0, [pc, #160]	@ (8002ae4 <process_modbus_request+0xc80>)
 8002a44:	f7ff f856 	bl	8001af4 <cdc_debug_log>
        
        // 如果发送缓冲区满了，强制输出
        if (write_err == ERR_MEM) {
 8002a48:	f997 34a9 	ldrsb.w	r3, [r7, #1193]	@ 0x4a9
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a50:	d106      	bne.n	8002a60 <process_modbus_request+0xbfc>
            tcp_output(tpcb);
 8002a52:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002a56:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	f014 ff98 	bl	8017990 <tcp_output>
        }
        return ERR_OK; // 即使写入失败也返回OK，避免连接中断
 8002a60:	2300      	movs	r3, #0
 8002a62:	e038      	b.n	8002ad6 <process_modbus_request+0xc72>
    }
    
    err_t output_err = tcp_output(tpcb);
 8002a64:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002a68:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	f014 ff8f 	bl	8017990 <tcp_output>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f887 34a8 	strb.w	r3, [r7, #1192]	@ 0x4a8
    if (output_err != ERR_OK) {
 8002a78:	f997 34a8 	ldrsb.w	r3, [r7, #1192]	@ 0x4a8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d025      	beq.n	8002acc <process_modbus_request+0xc68>
        char output_err_msg[40];
        strcpy(output_err_msg, "TCP output failed err=");
 8002a80:	f107 0314 	add.w	r3, r7, #20
 8002a84:	4a1b      	ldr	r2, [pc, #108]	@ (8002af4 <process_modbus_request+0xc90>)
 8002a86:	461c      	mov	r4, r3
 8002a88:	4615      	mov	r5, r2
 8002a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a8e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a92:	6020      	str	r0, [r4, #0]
 8002a94:	3404      	adds	r4, #4
 8002a96:	8021      	strh	r1, [r4, #0]
 8002a98:	3402      	adds	r4, #2
 8002a9a:	0c0b      	lsrs	r3, r1, #16
 8002a9c:	7023      	strb	r3, [r4, #0]
        int_to_str(output_err, output_err_msg + strlen(output_err_msg), 10);
 8002a9e:	f997 44a8 	ldrsb.w	r4, [r7, #1192]	@ 0x4a8
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fd fb92 	bl	80001d0 <strlen>
 8002aac:	4602      	mov	r2, r0
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	4413      	add	r3, r2
 8002ab4:	220a      	movs	r2, #10
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f7ff f895 	bl	8001be8 <int_to_str>
        cdc_debug_log("MODBUS_TCP", output_err_msg);
 8002abe:	f107 0314 	add.w	r3, r7, #20
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4807      	ldr	r0, [pc, #28]	@ (8002ae4 <process_modbus_request+0xc80>)
 8002ac6:	f7ff f815 	bl	8001af4 <cdc_debug_log>
 8002aca:	e003      	b.n	8002ad4 <process_modbus_request+0xc70>
    } else {
        cdc_debug_log("MODBUS_TCP", "Reply sent successfully");
 8002acc:	490a      	ldr	r1, [pc, #40]	@ (8002af8 <process_modbus_request+0xc94>)
 8002ace:	4805      	ldr	r0, [pc, #20]	@ (8002ae4 <process_modbus_request+0xc80>)
 8002ad0:	f7ff f810 	bl	8001af4 <cdc_debug_log>
    }
    
    return ERR_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f507 679e 	add.w	r7, r7, #1264	@ 0x4f0
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bdb0      	pop	{r4, r5, r7, pc}
 8002ae0:	0801e080 	.word	0x0801e080
 8002ae4:	0801de54 	.word	0x0801de54
 8002ae8:	0801e09c 	.word	0x0801e09c
 8002aec:	0801e0ac 	.word	0x0801e0ac
 8002af0:	0801e0c8 	.word	0x0801e0c8
 8002af4:	0801e0e0 	.word	0x0801e0e0
 8002af8:	0801e0f8 	.word	0x0801e0f8

08002afc <modbus_tcp_init>:

// 初始化TCP Server
void modbus_tcp_init(void) {
 8002afc:	b5b0      	push	{r4, r5, r7, lr}
 8002afe:	b0ac      	sub	sp, #176	@ 0xb0
 8002b00:	af00      	add	r7, sp, #0
    // 首先清零所有寄存器
    for (int i = 0; i < 100; i++) {
 8002b02:	2300      	movs	r3, #0
 8002b04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b08:	e00a      	b.n	8002b20 <modbus_tcp_init+0x24>
        holding_regs[i] = 3;
 8002b0a:	4a8f      	ldr	r2, [pc, #572]	@ (8002d48 <modbus_tcp_init+0x24c>)
 8002b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b10:	2103      	movs	r1, #3
 8002b12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 100; i++) {
 8002b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b24:	2b63      	cmp	r3, #99	@ 0x63
 8002b26:	ddf0      	ble.n	8002b0a <modbus_tcp_init+0xe>
    }
    

    
    cdc_debug_log("MODBUS_TCP", "Clearing and initializing registers");
 8002b28:	4988      	ldr	r1, [pc, #544]	@ (8002d4c <modbus_tcp_init+0x250>)
 8002b2a:	4889      	ldr	r0, [pc, #548]	@ (8002d50 <modbus_tcp_init+0x254>)
 8002b2c:	f7fe ffe2 	bl	8001af4 <cdc_debug_log>
    
    // 验证寄存器初始值并输出调试信息
    char reg_info[80];
    for (int i = 0; i < 4; i++) {
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b36:	e09f      	b.n	8002c78 <modbus_tcp_init+0x17c>
        strcpy(reg_info, "Reg[");
 8002b38:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b3c:	4a85      	ldr	r2, [pc, #532]	@ (8002d54 <modbus_tcp_init+0x258>)
 8002b3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b42:	6018      	str	r0, [r3, #0]
 8002b44:	3304      	adds	r3, #4
 8002b46:	7019      	strb	r1, [r3, #0]
        int_to_str(i, reg_info + strlen(reg_info), 10);
 8002b48:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fd fb3f 	bl	80001d0 <strlen>
 8002b52:	4602      	mov	r2, r0
 8002b54:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b58:	4413      	add	r3, r2
 8002b5a:	220a      	movs	r2, #10
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8002b62:	f7ff f841 	bl	8001be8 <int_to_str>
        strcat(reg_info, "]=0x");
 8002b66:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fd fb30 	bl	80001d0 <strlen>
 8002b70:	4603      	mov	r3, r0
 8002b72:	461a      	mov	r2, r3
 8002b74:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b78:	4413      	add	r3, r2
 8002b7a:	4a77      	ldr	r2, [pc, #476]	@ (8002d58 <modbus_tcp_init+0x25c>)
 8002b7c:	6810      	ldr	r0, [r2, #0]
 8002b7e:	6018      	str	r0, [r3, #0]
 8002b80:	7912      	ldrb	r2, [r2, #4]
 8002b82:	711a      	strb	r2, [r3, #4]
        // 简单的十六进制转换
        uint16_t val = holding_regs[i];
 8002b84:	4a70      	ldr	r2, [pc, #448]	@ (8002d48 <modbus_tcp_init+0x24c>)
 8002b86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b8e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
        char hex_str[5];
        hex_str[4] = '\0';
 8002b92:	2300      	movs	r3, #0
 8002b94:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        for (int j = 3; j >= 0; j--) {
 8002b98:	2303      	movs	r3, #3
 8002b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002b9e:	e026      	b.n	8002bee <modbus_tcp_init+0xf2>
            int nibble = (val >> (j * 4)) & 0xF;
 8002ba0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 8002ba4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	fa42 f303 	asr.w	r3, r2, r3
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            hex_str[3-j] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10);
 8002bb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bba:	2b09      	cmp	r3, #9
 8002bbc:	dc05      	bgt.n	8002bca <modbus_tcp_init+0xce>
 8002bbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	3330      	adds	r3, #48	@ 0x30
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	e004      	b.n	8002bd4 <modbus_tcp_init+0xd8>
 8002bca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	3337      	adds	r3, #55	@ 0x37
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002bd8:	f1c2 0203 	rsb	r2, r2, #3
 8002bdc:	32b0      	adds	r2, #176	@ 0xb0
 8002bde:	443a      	add	r2, r7
 8002be0:	f802 3c78 	strb.w	r3, [r2, #-120]
        for (int j = 3; j >= 0; j--) {
 8002be4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002be8:	3b01      	subs	r3, #1
 8002bea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002bee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	dad4      	bge.n	8002ba0 <modbus_tcp_init+0xa4>
        }
        strcat(reg_info, hex_str);
 8002bf6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002bfa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f019 fd08 	bl	801c616 <strcat>
        strcat(reg_info, " (");
 8002c06:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fae0 	bl	80001d0 <strlen>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c18:	4413      	add	r3, r2
 8002c1a:	4a50      	ldr	r2, [pc, #320]	@ (8002d5c <modbus_tcp_init+0x260>)
 8002c1c:	8811      	ldrh	r1, [r2, #0]
 8002c1e:	7892      	ldrb	r2, [r2, #2]
 8002c20:	8019      	strh	r1, [r3, #0]
 8002c22:	709a      	strb	r2, [r3, #2]
        int_to_str(val, reg_info + strlen(reg_info), 10);
 8002c24:	f8b7 4096 	ldrh.w	r4, [r7, #150]	@ 0x96
 8002c28:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd facf 	bl	80001d0 <strlen>
 8002c32:	4602      	mov	r2, r0
 8002c34:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c38:	4413      	add	r3, r2
 8002c3a:	220a      	movs	r2, #10
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f7fe ffd2 	bl	8001be8 <int_to_str>
        strcat(reg_info, ")");
 8002c44:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fd fac1 	bl	80001d0 <strlen>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	461a      	mov	r2, r3
 8002c52:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c56:	4413      	add	r3, r2
 8002c58:	4941      	ldr	r1, [pc, #260]	@ (8002d60 <modbus_tcp_init+0x264>)
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	8013      	strh	r3, [r2, #0]
        cdc_debug_log("MODBUS_TCP", reg_info);
 8002c62:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c66:	4619      	mov	r1, r3
 8002c68:	4839      	ldr	r0, [pc, #228]	@ (8002d50 <modbus_tcp_init+0x254>)
 8002c6a:	f7fe ff43 	bl	8001af4 <cdc_debug_log>
    for (int i = 0; i < 4; i++) {
 8002c6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c72:	3301      	adds	r3, #1
 8002c74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	f77f af5b 	ble.w	8002b38 <modbus_tcp_init+0x3c>
    }
    
    cdc_debug_log("MODBUS_TCP", "Register initialization verified");
 8002c82:	4938      	ldr	r1, [pc, #224]	@ (8002d64 <modbus_tcp_init+0x268>)
 8002c84:	4832      	ldr	r0, [pc, #200]	@ (8002d50 <modbus_tcp_init+0x254>)
 8002c86:	f7fe ff35 	bl	8001af4 <cdc_debug_log>
    
    struct tcp_pcb *tpcb = tcp_new();
 8002c8a:	f011 f995 	bl	8013fb8 <tcp_new>
 8002c8e:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    if (tpcb == NULL) {
 8002c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d104      	bne.n	8002ca4 <modbus_tcp_init+0x1a8>
        cdc_debug_log("MODBUS_TCP", "Failed to create TCP PCB");
 8002c9a:	4933      	ldr	r1, [pc, #204]	@ (8002d68 <modbus_tcp_init+0x26c>)
 8002c9c:	482c      	ldr	r0, [pc, #176]	@ (8002d50 <modbus_tcp_init+0x254>)
 8002c9e:	f7fe ff29 	bl	8001af4 <cdc_debug_log>
        return;
 8002ca2:	e04e      	b.n	8002d42 <modbus_tcp_init+0x246>
    }
    
    err_t bind_err = tcp_bind(tpcb, IP_ADDR_ANY, 502); // Modbus TCP端口502
 8002ca4:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 8002ca8:	4930      	ldr	r1, [pc, #192]	@ (8002d6c <modbus_tcp_init+0x270>)
 8002caa:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002cae:	f010 f8dd 	bl	8012e6c <tcp_bind>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    if (bind_err != ERR_OK) {
 8002cb8:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d027      	beq.n	8002d10 <modbus_tcp_init+0x214>
        char err_msg[50];
        const char* prefix = "TCP bind failed: ";
 8002cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d70 <modbus_tcp_init+0x274>)
 8002cc2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        strcpy(err_msg, prefix);
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f019 fd90 	bl	801c7f2 <strcpy>
        int_to_str(bind_err, err_msg + strlen(prefix), sizeof(err_msg) - strlen(prefix));
 8002cd2:	f997 409f 	ldrsb.w	r4, [r7, #159]	@ 0x9f
 8002cd6:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8002cda:	f7fd fa79 	bl	80001d0 <strlen>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	1d3b      	adds	r3, r7, #4
 8002ce2:	189d      	adds	r5, r3, r2
 8002ce4:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8002ce8:	f7fd fa72 	bl	80001d0 <strlen>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	f7fe ff76 	bl	8001be8 <int_to_str>
        cdc_debug_log("MODBUS_TCP", err_msg);
 8002cfc:	1d3b      	adds	r3, r7, #4
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4813      	ldr	r0, [pc, #76]	@ (8002d50 <modbus_tcp_init+0x254>)
 8002d02:	f7fe fef7 	bl	8001af4 <cdc_debug_log>
        tcp_close(tpcb);
 8002d06:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002d0a:	f00f ffb9 	bl	8012c80 <tcp_close>
 8002d0e:	e018      	b.n	8002d42 <modbus_tcp_init+0x246>
        return;
    }
    
    tpcb = tcp_listen(tpcb);
 8002d10:	21ff      	movs	r1, #255	@ 0xff
 8002d12:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002d16:	f010 f961 	bl	8012fdc <tcp_listen_with_backlog>
 8002d1a:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    if (tpcb == NULL) {
 8002d1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d104      	bne.n	8002d30 <modbus_tcp_init+0x234>
        cdc_debug_log("MODBUS_TCP", "Failed to set TCP to listen mode");
 8002d26:	4913      	ldr	r1, [pc, #76]	@ (8002d74 <modbus_tcp_init+0x278>)
 8002d28:	4809      	ldr	r0, [pc, #36]	@ (8002d50 <modbus_tcp_init+0x254>)
 8002d2a:	f7fe fee3 	bl	8001af4 <cdc_debug_log>
        return;
 8002d2e:	e008      	b.n	8002d42 <modbus_tcp_init+0x246>
    }
    
    tcp_accept(tpcb, modbus_tcp_accept);
 8002d30:	4911      	ldr	r1, [pc, #68]	@ (8002d78 <modbus_tcp_init+0x27c>)
 8002d32:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002d36:	f011 f9ad 	bl	8014094 <tcp_accept>
    cdc_debug_log("MODBUS_TCP", "TCP server started on port 502");
 8002d3a:	4910      	ldr	r1, [pc, #64]	@ (8002d7c <modbus_tcp_init+0x280>)
 8002d3c:	4804      	ldr	r0, [pc, #16]	@ (8002d50 <modbus_tcp_init+0x254>)
 8002d3e:	f7fe fed9 	bl	8001af4 <cdc_debug_log>
}
 8002d42:	37b0      	adds	r7, #176	@ 0xb0
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bdb0      	pop	{r4, r5, r7, pc}
 8002d48:	20000590 	.word	0x20000590
 8002d4c:	0801e110 	.word	0x0801e110
 8002d50:	0801de54 	.word	0x0801de54
 8002d54:	0801e134 	.word	0x0801e134
 8002d58:	0801e13c 	.word	0x0801e13c
 8002d5c:	0801e144 	.word	0x0801e144
 8002d60:	0801e148 	.word	0x0801e148
 8002d64:	0801e14c 	.word	0x0801e14c
 8002d68:	0801e170 	.word	0x0801e170
 8002d6c:	08021e08 	.word	0x08021e08
 8002d70:	0801e18c 	.word	0x0801e18c
 8002d74:	0801e1a0 	.word	0x0801e1a0
 8002d78:	08002e51 	.word	0x08002e51
 8002d7c:	0801e1c4 	.word	0x0801e1c4

08002d80 <modbus_tcp_sent>:

// 发送确认回调
err_t modbus_tcp_sent(void *arg, struct tcp_pcb *tpcb, u16_t len) {
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	b08f      	sub	sp, #60	@ 0x3c
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	80fb      	strh	r3, [r7, #6]
    // 简单记录发送确认
    char sent_msg[40];
    strcpy(sent_msg, "TCP sent ");
 8002d8e:	f107 0310 	add.w	r3, r7, #16
 8002d92:	4a17      	ldr	r2, [pc, #92]	@ (8002df0 <modbus_tcp_sent+0x70>)
 8002d94:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d96:	c303      	stmia	r3!, {r0, r1}
 8002d98:	801a      	strh	r2, [r3, #0]
    int_to_str(len, sent_msg + strlen(sent_msg), 10);
 8002d9a:	88fc      	ldrh	r4, [r7, #6]
 8002d9c:	f107 0310 	add.w	r3, r7, #16
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fd fa15 	bl	80001d0 <strlen>
 8002da6:	4602      	mov	r2, r0
 8002da8:	f107 0310 	add.w	r3, r7, #16
 8002dac:	4413      	add	r3, r2
 8002dae:	220a      	movs	r2, #10
 8002db0:	4619      	mov	r1, r3
 8002db2:	4620      	mov	r0, r4
 8002db4:	f7fe ff18 	bl	8001be8 <int_to_str>
    strcat(sent_msg, " bytes");
 8002db8:	f107 0310 	add.w	r3, r7, #16
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fd fa07 	bl	80001d0 <strlen>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f107 0310 	add.w	r3, r7, #16
 8002dca:	4413      	add	r3, r2
 8002dcc:	4a09      	ldr	r2, [pc, #36]	@ (8002df4 <modbus_tcp_sent+0x74>)
 8002dce:	6810      	ldr	r0, [r2, #0]
 8002dd0:	6018      	str	r0, [r3, #0]
 8002dd2:	8891      	ldrh	r1, [r2, #4]
 8002dd4:	7992      	ldrb	r2, [r2, #6]
 8002dd6:	8099      	strh	r1, [r3, #4]
 8002dd8:	719a      	strb	r2, [r3, #6]
    cdc_debug_log("MODBUS_TCP", sent_msg);
 8002dda:	f107 0310 	add.w	r3, r7, #16
 8002dde:	4619      	mov	r1, r3
 8002de0:	4805      	ldr	r0, [pc, #20]	@ (8002df8 <modbus_tcp_sent+0x78>)
 8002de2:	f7fe fe87 	bl	8001af4 <cdc_debug_log>
    return ERR_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	373c      	adds	r7, #60	@ 0x3c
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd90      	pop	{r4, r7, pc}
 8002df0:	0801e1e4 	.word	0x0801e1e4
 8002df4:	0801e1f0 	.word	0x0801e1f0
 8002df8:	0801de54 	.word	0x0801de54

08002dfc <modbus_tcp_error>:

// 连接错误回调
void modbus_tcp_error(void *arg, err_t err) {
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b08d      	sub	sp, #52	@ 0x34
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
    char err_msg[40];
    strcpy(err_msg, "TCP error: ");
 8002e08:	f107 0308 	add.w	r3, r7, #8
 8002e0c:	4a0e      	ldr	r2, [pc, #56]	@ (8002e48 <modbus_tcp_error+0x4c>)
 8002e0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int_to_str(err, err_msg + strlen(err_msg), 10);
 8002e14:	f997 4003 	ldrsb.w	r4, [r7, #3]
 8002e18:	f107 0308 	add.w	r3, r7, #8
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd f9d7 	bl	80001d0 <strlen>
 8002e22:	4602      	mov	r2, r0
 8002e24:	f107 0308 	add.w	r3, r7, #8
 8002e28:	4413      	add	r3, r2
 8002e2a:	220a      	movs	r2, #10
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4620      	mov	r0, r4
 8002e30:	f7fe feda 	bl	8001be8 <int_to_str>
    cdc_debug_log("MODBUS_TCP", err_msg);
 8002e34:	f107 0308 	add.w	r3, r7, #8
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4804      	ldr	r0, [pc, #16]	@ (8002e4c <modbus_tcp_error+0x50>)
 8002e3c:	f7fe fe5a 	bl	8001af4 <cdc_debug_log>
}
 8002e40:	bf00      	nop
 8002e42:	3734      	adds	r7, #52	@ 0x34
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd90      	pop	{r4, r7, pc}
 8002e48:	0801e1f8 	.word	0x0801e1f8
 8002e4c:	0801de54 	.word	0x0801de54

08002e50 <modbus_tcp_accept>:

// Accept回调
err_t modbus_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	71fb      	strb	r3, [r7, #7]
    if (err != ERR_OK || newpcb == NULL) {
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d102      	bne.n	8002e6c <modbus_tcp_accept+0x1c>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d106      	bne.n	8002e7a <modbus_tcp_accept+0x2a>
        cdc_debug_log("MODBUS_TCP", "Accept failed");
 8002e6c:	4911      	ldr	r1, [pc, #68]	@ (8002eb4 <modbus_tcp_accept+0x64>)
 8002e6e:	4812      	ldr	r0, [pc, #72]	@ (8002eb8 <modbus_tcp_accept+0x68>)
 8002e70:	f7fe fe40 	bl	8001af4 <cdc_debug_log>
        return err;
 8002e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e78:	e017      	b.n	8002eaa <modbus_tcp_accept+0x5a>
    }
    
    cdc_debug_log("MODBUS_TCP", "Client connected");
 8002e7a:	4910      	ldr	r1, [pc, #64]	@ (8002ebc <modbus_tcp_accept+0x6c>)
 8002e7c:	480e      	ldr	r0, [pc, #56]	@ (8002eb8 <modbus_tcp_accept+0x68>)
 8002e7e:	f7fe fe39 	bl	8001af4 <cdc_debug_log>
    
    // 设置连接参数
    tcp_setprio(newpcb, TCP_PRIO_MIN);
 8002e82:	2101      	movs	r1, #1
 8002e84:	68b8      	ldr	r0, [r7, #8]
 8002e86:	f010 fea5 	bl	8013bd4 <tcp_setprio>
    tcp_recv(newpcb, modbus_tcp_recv);
 8002e8a:	490d      	ldr	r1, [pc, #52]	@ (8002ec0 <modbus_tcp_accept+0x70>)
 8002e8c:	68b8      	ldr	r0, [r7, #8]
 8002e8e:	f011 f89b 	bl	8013fc8 <tcp_recv>
    tcp_sent(newpcb, modbus_tcp_sent);  // 添加发送确认回调
 8002e92:	490c      	ldr	r1, [pc, #48]	@ (8002ec4 <modbus_tcp_accept+0x74>)
 8002e94:	68b8      	ldr	r0, [r7, #8]
 8002e96:	f011 f8b9 	bl	801400c <tcp_sent>
    tcp_err(newpcb, modbus_tcp_error);
 8002e9a:	490b      	ldr	r1, [pc, #44]	@ (8002ec8 <modbus_tcp_accept+0x78>)
 8002e9c:	68b8      	ldr	r0, [r7, #8]
 8002e9e:	f011 f8d7 	bl	8014050 <tcp_err>
    
    // 设置保活参数，防止连接超时
    tcp_keepalive(newpcb);
 8002ea2:	68b8      	ldr	r0, [r7, #8]
 8002ea4:	f015 fbdc 	bl	8018660 <tcp_keepalive>
    
    return ERR_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	0801e204 	.word	0x0801e204
 8002eb8:	0801de54 	.word	0x0801de54
 8002ebc:	0801e214 	.word	0x0801e214
 8002ec0:	08002ecd 	.word	0x08002ecd
 8002ec4:	08002d81 	.word	0x08002d81
 8002ec8:	08002dfd 	.word	0x08002dfd

08002ecc <modbus_tcp_recv>:

// Recv回调：处理Modbus请求
err_t modbus_tcp_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err) {
 8002ecc:	b5b0      	push	{r4, r5, r7, lr}
 8002ece:	f5ad 6d9c 	sub.w	sp, sp, #1248	@ 0x4e0
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	f507 649c 	add.w	r4, r7, #1248	@ 0x4e0
 8002ed8:	f2a4 44d4 	subw	r4, r4, #1236	@ 0x4d4
 8002edc:	6020      	str	r0, [r4, #0]
 8002ede:	f507 609c 	add.w	r0, r7, #1248	@ 0x4e0
 8002ee2:	f5a0 609b 	sub.w	r0, r0, #1240	@ 0x4d8
 8002ee6:	6001      	str	r1, [r0, #0]
 8002ee8:	f507 619c 	add.w	r1, r7, #1248	@ 0x4e0
 8002eec:	f2a1 41dc 	subw	r1, r1, #1244	@ 0x4dc
 8002ef0:	600a      	str	r2, [r1, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002ef8:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 8002efc:	701a      	strb	r2, [r3, #0]
    if (err != ERR_OK) {
 8002efe:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002f02:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 8002f06:	f993 3000 	ldrsb.w	r3, [r3]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d018      	beq.n	8002f40 <modbus_tcp_recv+0x74>
        cdc_debug_log("MODBUS_TCP", "Receive error");
 8002f0e:	49bf      	ldr	r1, [pc, #764]	@ (800320c <modbus_tcp_recv+0x340>)
 8002f10:	48bf      	ldr	r0, [pc, #764]	@ (8003210 <modbus_tcp_recv+0x344>)
 8002f12:	f7fe fdef 	bl	8001af4 <cdc_debug_log>
        if (p != NULL) {
 8002f16:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002f1a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d006      	beq.n	8002f32 <modbus_tcp_recv+0x66>
            pbuf_free(p);
 8002f24:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002f28:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	f00f f9fd 	bl	801232c <pbuf_free>
        }
        return err;
 8002f32:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002f36:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 8002f3a:	f993 3000 	ldrsb.w	r3, [r3]
 8002f3e:	e15f      	b.n	8003200 <modbus_tcp_recv+0x334>
    }
    
    if (p == NULL) { // 连接关闭
 8002f40:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002f44:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10c      	bne.n	8002f68 <modbus_tcp_recv+0x9c>
        cdc_debug_log("MODBUS_TCP", "Client disconnected");
 8002f4e:	49b1      	ldr	r1, [pc, #708]	@ (8003214 <modbus_tcp_recv+0x348>)
 8002f50:	48af      	ldr	r0, [pc, #700]	@ (8003210 <modbus_tcp_recv+0x344>)
 8002f52:	f7fe fdcf 	bl	8001af4 <cdc_debug_log>
        tcp_close(tpcb);
 8002f56:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002f5a:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8002f5e:	6818      	ldr	r0, [r3, #0]
 8002f60:	f00f fe8e 	bl	8012c80 <tcp_close>
        return ERR_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e14b      	b.n	8003200 <modbus_tcp_recv+0x334>
    }

    // 获取数据长度并通知TCP栈已接收
    uint16_t data_len = p->tot_len;
 8002f68:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002f6c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	891b      	ldrh	r3, [r3, #8]
 8002f74:	f8a7 34da 	strh.w	r3, [r7, #1242]	@ 0x4da
    tcp_recved(tpcb, data_len); // 重要：通知LwIP已处理数据
 8002f78:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	@ 0x4da
 8002f7c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002f80:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8002f84:	4611      	mov	r1, r2
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	f010 f93e 	bl	8013208 <tcp_recved>
    
    // 添加更详细的接收数据信息
    char recv_info[60];
    const char* prefix = "Received data len=";
 8002f8c:	4ba2      	ldr	r3, [pc, #648]	@ (8003218 <modbus_tcp_recv+0x34c>)
 8002f8e:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
    strcpy(recv_info, prefix);
 8002f92:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8002f96:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	@ 0x4d4
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f019 fc29 	bl	801c7f2 <strcpy>
    int_to_str(data_len, recv_info + strlen(prefix), sizeof(recv_info) - strlen(prefix));
 8002fa0:	f8b7 44da 	ldrh.w	r4, [r7, #1242]	@ 0x4da
 8002fa4:	f8d7 04d4 	ldr.w	r0, [r7, #1236]	@ 0x4d4
 8002fa8:	f7fd f912 	bl	80001d0 <strlen>
 8002fac:	4602      	mov	r2, r0
 8002fae:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8002fb2:	189d      	adds	r5, r3, r2
 8002fb4:	f8d7 04d4 	ldr.w	r0, [r7, #1236]	@ 0x4d4
 8002fb8:	f7fd f90a 	bl	80001d0 <strlen>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	f7fe fe0e 	bl	8001be8 <int_to_str>
    cdc_debug_log("MODBUS_TCP", recv_info);
 8002fcc:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	488f      	ldr	r0, [pc, #572]	@ (8003210 <modbus_tcp_recv+0x344>)
 8002fd4:	f7fe fd8e 	bl	8001af4 <cdc_debug_log>

    uint8_t buf[1024];
    uint16_t len = pbuf_copy_partial(p, buf, data_len, 0);
 8002fd8:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	@ 0x4da
 8002fdc:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8002fe0:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002fe4:	f2a3 40dc 	subw	r0, r3, #1244	@ 0x4dc
 8002fe8:	2300      	movs	r3, #0
 8002fea:	6800      	ldr	r0, [r0, #0]
 8002fec:	f00f fb94 	bl	8012718 <pbuf_copy_partial>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f8a7 34d2 	strh.w	r3, [r7, #1234]	@ 0x4d2
    pbuf_free(p);
 8002ff6:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002ffa:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	f00f f994 	bl	801232c <pbuf_free>

    // 转储接收到的原始数据用于调试
    dump_data(buf, len);
 8003004:	f8b7 24d2 	ldrh.w	r2, [r7, #1234]	@ 0x4d2
 8003008:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fe9e 	bl	8001d50 <dump_data>

    // 检查最小帧长度
    if (len < 8) { // Modbus TCP最小长度: 6字节头 + 2字节最小数据
 8003014:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8003018:	2b07      	cmp	r3, #7
 800301a:	d806      	bhi.n	800302a <modbus_tcp_recv+0x15e>
        cdc_debug_log("MODBUS_TCP", "Frame too short");
 800301c:	497f      	ldr	r1, [pc, #508]	@ (800321c <modbus_tcp_recv+0x350>)
 800301e:	487c      	ldr	r0, [pc, #496]	@ (8003210 <modbus_tcp_recv+0x344>)
 8003020:	f7fe fd68 	bl	8001af4 <cdc_debug_log>
        return ERR_VAL;
 8003024:	f06f 0305 	mvn.w	r3, #5
 8003028:	e0ea      	b.n	8003200 <modbus_tcp_recv+0x334>
    }

    // 处理可能包含多个Modbus请求的数据包
    uint16_t offset = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de
    uint16_t processed_frames = 0;
 8003030:	2300      	movs	r3, #0
 8003032:	f8a7 34dc 	strh.w	r3, [r7, #1244]	@ 0x4dc
    
    while (offset < len && processed_frames < 10) { // 最多处理10个帧，防止无限循环
 8003036:	e092      	b.n	800315e <modbus_tcp_recv+0x292>
        // 检查是否还有足够的数据读取帧头
        if (offset + 6 > len) {
 8003038:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 800303c:	1d5a      	adds	r2, r3, #5
 800303e:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8003042:	429a      	cmp	r2, r3
 8003044:	db04      	blt.n	8003050 <modbus_tcp_recv+0x184>
            cdc_debug_log("MODBUS_TCP", "No more complete frames");
 8003046:	4976      	ldr	r1, [pc, #472]	@ (8003220 <modbus_tcp_recv+0x354>)
 8003048:	4871      	ldr	r0, [pc, #452]	@ (8003210 <modbus_tcp_recv+0x344>)
 800304a:	f7fe fd53 	bl	8001af4 <cdc_debug_log>
            break;
 800304e:	e093      	b.n	8003178 <modbus_tcp_recv+0x2ac>
        }
        
        // 获取长度字段
        uint16_t frame_length = (buf[offset+4] << 8) | buf[offset+5];
 8003050:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 8003054:	3304      	adds	r3, #4
 8003056:	f507 629c 	add.w	r2, r7, #1248	@ 0x4e0
 800305a:	f5a2 628b 	sub.w	r2, r2, #1112	@ 0x458
 800305e:	5cd3      	ldrb	r3, [r2, r3]
 8003060:	b21b      	sxth	r3, r3
 8003062:	021b      	lsls	r3, r3, #8
 8003064:	b21a      	sxth	r2, r3
 8003066:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 800306a:	3305      	adds	r3, #5
 800306c:	f507 619c 	add.w	r1, r7, #1248	@ 0x4e0
 8003070:	f5a1 618b 	sub.w	r1, r1, #1112	@ 0x458
 8003074:	5ccb      	ldrb	r3, [r1, r3]
 8003076:	b21b      	sxth	r3, r3
 8003078:	4313      	orrs	r3, r2
 800307a:	b21b      	sxth	r3, r3
 800307c:	f8a7 34d0 	strh.w	r3, [r7, #1232]	@ 0x4d0
        uint16_t total_frame_size = 6 + frame_length; // 6字节头 + 数据部分
 8003080:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8003084:	3306      	adds	r3, #6
 8003086:	f8a7 34ce 	strh.w	r3, [r7, #1230]	@ 0x4ce
        
        // 检查是否有完整的帧
        if (offset + total_frame_size > len) {
 800308a:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 800308e:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	@ 0x4ce
 8003092:	441a      	add	r2, r3
 8003094:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8003098:	429a      	cmp	r2, r3
 800309a:	dd21      	ble.n	80030e0 <modbus_tcp_recv+0x214>
            char incomplete_msg[60];
            strcpy(incomplete_msg, "Incomplete frame at offset=");
 800309c:	f107 0310 	add.w	r3, r7, #16
 80030a0:	4a60      	ldr	r2, [pc, #384]	@ (8003224 <modbus_tcp_recv+0x358>)
 80030a2:	461c      	mov	r4, r3
 80030a4:	4615      	mov	r5, r2
 80030a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            int_to_str(offset, incomplete_msg + strlen(incomplete_msg), 10);
 80030b2:	f8b7 44de 	ldrh.w	r4, [r7, #1246]	@ 0x4de
 80030b6:	f107 0310 	add.w	r3, r7, #16
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd f888 	bl	80001d0 <strlen>
 80030c0:	4602      	mov	r2, r0
 80030c2:	f107 0310 	add.w	r3, r7, #16
 80030c6:	4413      	add	r3, r2
 80030c8:	220a      	movs	r2, #10
 80030ca:	4619      	mov	r1, r3
 80030cc:	4620      	mov	r0, r4
 80030ce:	f7fe fd8b 	bl	8001be8 <int_to_str>
            cdc_debug_log("MODBUS_TCP", incomplete_msg);
 80030d2:	f107 0310 	add.w	r3, r7, #16
 80030d6:	4619      	mov	r1, r3
 80030d8:	484d      	ldr	r0, [pc, #308]	@ (8003210 <modbus_tcp_recv+0x344>)
 80030da:	f7fe fd0b 	bl	8001af4 <cdc_debug_log>
            break;
 80030de:	e04b      	b.n	8003178 <modbus_tcp_recv+0x2ac>
        }
        
        // 处理这个帧
        char frame_msg[50];
        strcpy(frame_msg, "Processing frame ");
 80030e0:	f107 0310 	add.w	r3, r7, #16
 80030e4:	4a50      	ldr	r2, [pc, #320]	@ (8003228 <modbus_tcp_recv+0x35c>)
 80030e6:	461c      	mov	r4, r3
 80030e8:	4615      	mov	r5, r2
 80030ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030ee:	682b      	ldr	r3, [r5, #0]
 80030f0:	8023      	strh	r3, [r4, #0]
        int_to_str(processed_frames + 1, frame_msg + strlen(frame_msg), 10);
 80030f2:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 80030f6:	1c5c      	adds	r4, r3, #1
 80030f8:	f107 0310 	add.w	r3, r7, #16
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd f867 	bl	80001d0 <strlen>
 8003102:	4602      	mov	r2, r0
 8003104:	f107 0310 	add.w	r3, r7, #16
 8003108:	4413      	add	r3, r2
 800310a:	220a      	movs	r2, #10
 800310c:	4619      	mov	r1, r3
 800310e:	4620      	mov	r0, r4
 8003110:	f7fe fd6a 	bl	8001be8 <int_to_str>
        cdc_debug_log("MODBUS_TCP", frame_msg);
 8003114:	f107 0310 	add.w	r3, r7, #16
 8003118:	4619      	mov	r1, r3
 800311a:	483d      	ldr	r0, [pc, #244]	@ (8003210 <modbus_tcp_recv+0x344>)
 800311c:	f7fe fcea 	bl	8001af4 <cdc_debug_log>
        
        process_modbus_request(tpcb, buf, offset);
 8003120:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 8003124:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8003128:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800312c:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	f7fe fe97 	bl	8001e64 <process_modbus_request>
        
        // 移动到下一个帧
        offset += total_frame_size;
 8003136:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 800313a:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	@ 0x4ce
 800313e:	4413      	add	r3, r2
 8003140:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de
        processed_frames++;
 8003144:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 8003148:	3301      	adds	r3, #1
 800314a:	f8a7 34dc 	strh.w	r3, [r7, #1244]	@ 0x4dc
        
        // 如果只有一个标准的12字节请求，直接退出
        if (len == 12 && processed_frames == 1) {
 800314e:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8003152:	2b0c      	cmp	r3, #12
 8003154:	d103      	bne.n	800315e <modbus_tcp_recv+0x292>
 8003156:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 800315a:	2b01      	cmp	r3, #1
 800315c:	d00b      	beq.n	8003176 <modbus_tcp_recv+0x2aa>
    while (offset < len && processed_frames < 10) { // 最多处理10个帧，防止无限循环
 800315e:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 8003162:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8003166:	429a      	cmp	r2, r3
 8003168:	d206      	bcs.n	8003178 <modbus_tcp_recv+0x2ac>
 800316a:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 800316e:	2b09      	cmp	r3, #9
 8003170:	f67f af62 	bls.w	8003038 <modbus_tcp_recv+0x16c>
 8003174:	e000      	b.n	8003178 <modbus_tcp_recv+0x2ac>
            break;
 8003176:	bf00      	nop
        }
    }
    
    char summary_msg[60];
    strcpy(summary_msg, "Processed ");
 8003178:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800317c:	4a2b      	ldr	r2, [pc, #172]	@ (800322c <modbus_tcp_recv+0x360>)
 800317e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003180:	c303      	stmia	r3!, {r0, r1}
 8003182:	801a      	strh	r2, [r3, #0]
 8003184:	3302      	adds	r3, #2
 8003186:	0c12      	lsrs	r2, r2, #16
 8003188:	701a      	strb	r2, [r3, #0]
    int_to_str(processed_frames, summary_msg + strlen(summary_msg), 10);
 800318a:	f8b7 44dc 	ldrh.w	r4, [r7, #1244]	@ 0x4dc
 800318e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd f81c 	bl	80001d0 <strlen>
 8003198:	4602      	mov	r2, r0
 800319a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800319e:	4413      	add	r3, r2
 80031a0:	220a      	movs	r2, #10
 80031a2:	4619      	mov	r1, r3
 80031a4:	4620      	mov	r0, r4
 80031a6:	f7fe fd1f 	bl	8001be8 <int_to_str>
    const char* frames_suffix = " frames from ";
 80031aa:	4b21      	ldr	r3, [pc, #132]	@ (8003230 <modbus_tcp_recv+0x364>)
 80031ac:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
    strcat(summary_msg, frames_suffix);
 80031b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80031b4:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	@ 0x4c8
 80031b8:	4618      	mov	r0, r3
 80031ba:	f019 fa2c 	bl	801c616 <strcat>
    int_to_str(len, summary_msg + strlen(summary_msg), 10);
 80031be:	f8b7 44d2 	ldrh.w	r4, [r7, #1234]	@ 0x4d2
 80031c2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd f802 	bl	80001d0 <strlen>
 80031cc:	4602      	mov	r2, r0
 80031ce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80031d2:	4413      	add	r3, r2
 80031d4:	220a      	movs	r2, #10
 80031d6:	4619      	mov	r1, r3
 80031d8:	4620      	mov	r0, r4
 80031da:	f7fe fd05 	bl	8001be8 <int_to_str>
    const char* bytes_suffix = " bytes";
 80031de:	4b15      	ldr	r3, [pc, #84]	@ (8003234 <modbus_tcp_recv+0x368>)
 80031e0:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
    strcat(summary_msg, bytes_suffix);
 80031e4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80031e8:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	@ 0x4c4
 80031ec:	4618      	mov	r0, r3
 80031ee:	f019 fa12 	bl	801c616 <strcat>
    cdc_debug_log("MODBUS_TCP", summary_msg);
 80031f2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80031f6:	4619      	mov	r1, r3
 80031f8:	4805      	ldr	r0, [pc, #20]	@ (8003210 <modbus_tcp_recv+0x344>)
 80031fa:	f7fe fc7b 	bl	8001af4 <cdc_debug_log>

    return ERR_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	4618      	mov	r0, r3
 8003202:	f507 679c 	add.w	r7, r7, #1248	@ 0x4e0
 8003206:	46bd      	mov	sp, r7
 8003208:	bdb0      	pop	{r4, r5, r7, pc}
 800320a:	bf00      	nop
 800320c:	0801e228 	.word	0x0801e228
 8003210:	0801de54 	.word	0x0801de54
 8003214:	0801e238 	.word	0x0801e238
 8003218:	0801e24c 	.word	0x0801e24c
 800321c:	0801e260 	.word	0x0801e260
 8003220:	0801e270 	.word	0x0801e270
 8003224:	0801e288 	.word	0x0801e288
 8003228:	0801e2a4 	.word	0x0801e2a4
 800322c:	0801e2b8 	.word	0x0801e2b8
 8003230:	0801e2c4 	.word	0x0801e2c4
 8003234:	0801e1f0 	.word	0x0801e1f0

08003238 <HAL_ETH_MspInit>:
  *   - Peripheral's GPIO Configuration  
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b092      	sub	sp, #72	@ 0x48
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a84      	ldr	r2, [pc, #528]	@ (8003468 <HAL_ETH_MspInit+0x230>)
 8003256:	4293      	cmp	r3, r2
 8003258:	f040 8101 	bne.w	800345e <HAL_ETH_MspInit+0x226>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800325c:	2300      	movs	r3, #0
 800325e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003260:	4b82      	ldr	r3, [pc, #520]	@ (800346c <HAL_ETH_MspInit+0x234>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003264:	4a81      	ldr	r2, [pc, #516]	@ (800346c <HAL_ETH_MspInit+0x234>)
 8003266:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800326a:	6313      	str	r3, [r2, #48]	@ 0x30
 800326c:	4b7f      	ldr	r3, [pc, #508]	@ (800346c <HAL_ETH_MspInit+0x234>)
 800326e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003274:	633b      	str	r3, [r7, #48]	@ 0x30
 8003276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003278:	2300      	movs	r3, #0
 800327a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800327c:	4b7b      	ldr	r3, [pc, #492]	@ (800346c <HAL_ETH_MspInit+0x234>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003280:	4a7a      	ldr	r2, [pc, #488]	@ (800346c <HAL_ETH_MspInit+0x234>)
 8003282:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003286:	6313      	str	r3, [r2, #48]	@ 0x30
 8003288:	4b78      	ldr	r3, [pc, #480]	@ (800346c <HAL_ETH_MspInit+0x234>)
 800328a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003290:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003294:	2300      	movs	r3, #0
 8003296:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003298:	4b74      	ldr	r3, [pc, #464]	@ (800346c <HAL_ETH_MspInit+0x234>)
 800329a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329c:	4a73      	ldr	r2, [pc, #460]	@ (800346c <HAL_ETH_MspInit+0x234>)
 800329e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80032a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a4:	4b71      	ldr	r3, [pc, #452]	@ (800346c <HAL_ETH_MspInit+0x234>)
 80032a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_ETHMAC_CLK_ENABLE();
 80032b0:	2300      	movs	r3, #0
 80032b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80032b4:	4b6d      	ldr	r3, [pc, #436]	@ (800346c <HAL_ETH_MspInit+0x234>)
 80032b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b8:	4a6c      	ldr	r2, [pc, #432]	@ (800346c <HAL_ETH_MspInit+0x234>)
 80032ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032be:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c0:	4b6a      	ldr	r3, [pc, #424]	@ (800346c <HAL_ETH_MspInit+0x234>)
 80032c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_ETHMACTX_CLK_ENABLE();
 80032cc:	2300      	movs	r3, #0
 80032ce:	623b      	str	r3, [r7, #32]
 80032d0:	4b66      	ldr	r3, [pc, #408]	@ (800346c <HAL_ETH_MspInit+0x234>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d4:	4a65      	ldr	r2, [pc, #404]	@ (800346c <HAL_ETH_MspInit+0x234>)
 80032d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80032da:	6313      	str	r3, [r2, #48]	@ 0x30
 80032dc:	4b63      	ldr	r3, [pc, #396]	@ (800346c <HAL_ETH_MspInit+0x234>)
 80032de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032e4:	623b      	str	r3, [r7, #32]
 80032e6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHMACRX_CLK_ENABLE();
 80032e8:	2300      	movs	r3, #0
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	4b5f      	ldr	r3, [pc, #380]	@ (800346c <HAL_ETH_MspInit+0x234>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	4a5e      	ldr	r2, [pc, #376]	@ (800346c <HAL_ETH_MspInit+0x234>)
 80032f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80032f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f8:	4b5c      	ldr	r3, [pc, #368]	@ (800346c <HAL_ETH_MspInit+0x234>)
 80032fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	69fb      	ldr	r3, [r7, #28]
    
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003304:	2300      	movs	r3, #0
 8003306:	61bb      	str	r3, [r7, #24]
 8003308:	4b58      	ldr	r3, [pc, #352]	@ (800346c <HAL_ETH_MspInit+0x234>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330c:	4a57      	ldr	r2, [pc, #348]	@ (800346c <HAL_ETH_MspInit+0x234>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	6313      	str	r3, [r2, #48]	@ 0x30
 8003314:	4b55      	ldr	r3, [pc, #340]	@ (800346c <HAL_ETH_MspInit+0x234>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	61bb      	str	r3, [r7, #24]
 800331e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	4b51      	ldr	r3, [pc, #324]	@ (800346c <HAL_ETH_MspInit+0x234>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003328:	4a50      	ldr	r2, [pc, #320]	@ (800346c <HAL_ETH_MspInit+0x234>)
 800332a:	f043 0302 	orr.w	r3, r3, #2
 800332e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003330:	4b4e      	ldr	r3, [pc, #312]	@ (800346c <HAL_ETH_MspInit+0x234>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800333c:	2300      	movs	r3, #0
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	4b4a      	ldr	r3, [pc, #296]	@ (800346c <HAL_ETH_MspInit+0x234>)
 8003342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003344:	4a49      	ldr	r2, [pc, #292]	@ (800346c <HAL_ETH_MspInit+0x234>)
 8003346:	f043 0304 	orr.w	r3, r3, #4
 800334a:	6313      	str	r3, [r2, #48]	@ 0x30
 800334c:	4b47      	ldr	r3, [pc, #284]	@ (800346c <HAL_ETH_MspInit+0x234>)
 800334e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	4b43      	ldr	r3, [pc, #268]	@ (800346c <HAL_ETH_MspInit+0x234>)
 800335e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003360:	4a42      	ldr	r2, [pc, #264]	@ (800346c <HAL_ETH_MspInit+0x234>)
 8003362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003366:	6313      	str	r3, [r2, #48]	@ 0x30
 8003368:	4b40      	ldr	r3, [pc, #256]	@ (800346c <HAL_ETH_MspInit+0x234>)
 800336a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003374:	2300      	movs	r3, #0
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	4b3c      	ldr	r3, [pc, #240]	@ (800346c <HAL_ETH_MspInit+0x234>)
 800337a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337c:	4a3b      	ldr	r2, [pc, #236]	@ (800346c <HAL_ETH_MspInit+0x234>)
 800337e:	f043 0308 	orr.w	r3, r3, #8
 8003382:	6313      	str	r3, [r2, #48]	@ 0x30
 8003384:	4b39      	ldr	r3, [pc, #228]	@ (800346c <HAL_ETH_MspInit+0x234>)
 8003386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    PD3      ------> ETH_RESET
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003390:	2302      	movs	r3, #2
 8003392:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	2302      	movs	r3, #2
 8003396:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339c:	2303      	movs	r3, #3
 800339e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033a0:	230b      	movs	r3, #11
 80033a2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033a8:	4619      	mov	r1, r3
 80033aa:	4831      	ldr	r0, [pc, #196]	@ (8003470 <HAL_ETH_MspInit+0x238>)
 80033ac:	f002 fb84 	bl	8005ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80033b0:	2386      	movs	r3, #134	@ 0x86
 80033b2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b4:	2302      	movs	r3, #2
 80033b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033bc:	2303      	movs	r3, #3
 80033be:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033c0:	230b      	movs	r3, #11
 80033c2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033c8:	4619      	mov	r1, r3
 80033ca:	482a      	ldr	r0, [pc, #168]	@ (8003474 <HAL_ETH_MspInit+0x23c>)
 80033cc:	f002 fb74 	bl	8005ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80033d0:	2330      	movs	r3, #48	@ 0x30
 80033d2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d4:	2302      	movs	r3, #2
 80033d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033dc:	2303      	movs	r3, #3
 80033de:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033e0:	230b      	movs	r3, #11
 80033e2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033e8:	4619      	mov	r1, r3
 80033ea:	4821      	ldr	r0, [pc, #132]	@ (8003470 <HAL_ETH_MspInit+0x238>)
 80033ec:	f002 fb64 	bl	8005ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80033f0:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80033f4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f6:	2302      	movs	r3, #2
 80033f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fe:	2303      	movs	r3, #3
 8003400:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003402:	230b      	movs	r3, #11
 8003404:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003406:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800340a:	4619      	mov	r1, r3
 800340c:	481a      	ldr	r0, [pc, #104]	@ (8003478 <HAL_ETH_MspInit+0x240>)
 800340e:	f002 fb53 	bl	8005ab8 <HAL_GPIO_Init>

    /* Configure ETH_RESET Pin (PD3) */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003412:	2308      	movs	r3, #8
 8003414:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003416:	2301      	movs	r3, #1
 8003418:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800341a:	2301      	movs	r3, #1
 800341c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341e:	2300      	movs	r3, #0
 8003420:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003422:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003426:	4619      	mov	r1, r3
 8003428:	4814      	ldr	r0, [pc, #80]	@ (800347c <HAL_ETH_MspInit+0x244>)
 800342a:	f002 fb45 	bl	8005ab8 <HAL_GPIO_Init>
    
    /* Reset PHY */

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 800342e:	2200      	movs	r2, #0
 8003430:	2108      	movs	r1, #8
 8003432:	4812      	ldr	r0, [pc, #72]	@ (800347c <HAL_ETH_MspInit+0x244>)
 8003434:	f002 fcdc 	bl	8005df0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8003438:	200a      	movs	r0, #10
 800343a:	f001 f803 	bl	8004444 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 800343e:	2201      	movs	r2, #1
 8003440:	2108      	movs	r1, #8
 8003442:	480e      	ldr	r0, [pc, #56]	@ (800347c <HAL_ETH_MspInit+0x244>)
 8003444:	f002 fcd4 	bl	8005df0 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 8003448:	2064      	movs	r0, #100	@ 0x64
 800344a:	f000 fffb 	bl	8004444 <HAL_Delay>

    /* USER CODE BEGIN ETH_MspInit 1 */
    /* Configure ETH interrupt */
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 800344e:	2200      	movs	r2, #0
 8003450:	2106      	movs	r1, #6
 8003452:	203d      	movs	r0, #61	@ 0x3d
 8003454:	f001 f8d2 	bl	80045fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003458:	203d      	movs	r0, #61	@ 0x3d
 800345a:	f001 f8eb 	bl	8004634 <HAL_NVIC_EnableIRQ>
    /* USER CODE END ETH_MspInit 1 */
  }
}
 800345e:	bf00      	nop
 8003460:	3748      	adds	r7, #72	@ 0x48
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40028000 	.word	0x40028000
 800346c:	40023800 	.word	0x40023800
 8003470:	40020800 	.word	0x40020800
 8003474:	40020000 	.word	0x40020000
 8003478:	40021800 	.word	0x40021800
 800347c:	40020c00 	.word	0x40020c00

08003480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	4b12      	ldr	r3, [pc, #72]	@ (80034d4 <HAL_MspInit+0x54>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348e:	4a11      	ldr	r2, [pc, #68]	@ (80034d4 <HAL_MspInit+0x54>)
 8003490:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003494:	6453      	str	r3, [r2, #68]	@ 0x44
 8003496:	4b0f      	ldr	r3, [pc, #60]	@ (80034d4 <HAL_MspInit+0x54>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800349e:	607b      	str	r3, [r7, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	603b      	str	r3, [r7, #0]
 80034a6:	4b0b      	ldr	r3, [pc, #44]	@ (80034d4 <HAL_MspInit+0x54>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	4a0a      	ldr	r2, [pc, #40]	@ (80034d4 <HAL_MspInit+0x54>)
 80034ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80034b2:	4b08      	ldr	r3, [pc, #32]	@ (80034d4 <HAL_MspInit+0x54>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80034be:	2200      	movs	r2, #0
 80034c0:	210f      	movs	r1, #15
 80034c2:	f06f 0001 	mvn.w	r0, #1
 80034c6:	f001 f899 	bl	80045fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40023800 	.word	0x40023800

080034d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08e      	sub	sp, #56	@ 0x38
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	4b33      	ldr	r3, [pc, #204]	@ (80035bc <HAL_InitTick+0xe4>)
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	4a32      	ldr	r2, [pc, #200]	@ (80035bc <HAL_InitTick+0xe4>)
 80034f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80034f8:	4b30      	ldr	r3, [pc, #192]	@ (80035bc <HAL_InitTick+0xe4>)
 80034fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003504:	f107 0210 	add.w	r2, r7, #16
 8003508:	f107 0314 	add.w	r3, r7, #20
 800350c:	4611      	mov	r1, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f004 fb32 	bl	8007b78 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d103      	bne.n	8003526 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800351e:	f004 fb03 	bl	8007b28 <HAL_RCC_GetPCLK1Freq>
 8003522:	6378      	str	r0, [r7, #52]	@ 0x34
 8003524:	e004      	b.n	8003530 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003526:	f004 faff 	bl	8007b28 <HAL_RCC_GetPCLK1Freq>
 800352a:	4603      	mov	r3, r0
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003532:	4a23      	ldr	r2, [pc, #140]	@ (80035c0 <HAL_InitTick+0xe8>)
 8003534:	fba2 2303 	umull	r2, r3, r2, r3
 8003538:	0c9b      	lsrs	r3, r3, #18
 800353a:	3b01      	subs	r3, #1
 800353c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800353e:	4b21      	ldr	r3, [pc, #132]	@ (80035c4 <HAL_InitTick+0xec>)
 8003540:	4a21      	ldr	r2, [pc, #132]	@ (80035c8 <HAL_InitTick+0xf0>)
 8003542:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8003544:	4b1f      	ldr	r3, [pc, #124]	@ (80035c4 <HAL_InitTick+0xec>)
 8003546:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800354a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800354c:	4a1d      	ldr	r2, [pc, #116]	@ (80035c4 <HAL_InitTick+0xec>)
 800354e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003550:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8003552:	4b1c      	ldr	r3, [pc, #112]	@ (80035c4 <HAL_InitTick+0xec>)
 8003554:	2200      	movs	r2, #0
 8003556:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003558:	4b1a      	ldr	r3, [pc, #104]	@ (80035c4 <HAL_InitTick+0xec>)
 800355a:	2200      	movs	r2, #0
 800355c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800355e:	4b19      	ldr	r3, [pc, #100]	@ (80035c4 <HAL_InitTick+0xec>)
 8003560:	2200      	movs	r2, #0
 8003562:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8003564:	4817      	ldr	r0, [pc, #92]	@ (80035c4 <HAL_InitTick+0xec>)
 8003566:	f004 fb81 	bl	8007c6c <HAL_TIM_Base_Init>
 800356a:	4603      	mov	r3, r0
 800356c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003570:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003574:	2b00      	cmp	r3, #0
 8003576:	d11b      	bne.n	80035b0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8003578:	4812      	ldr	r0, [pc, #72]	@ (80035c4 <HAL_InitTick+0xec>)
 800357a:	f004 fbc7 	bl	8007d0c <HAL_TIM_Base_Start_IT>
 800357e:	4603      	mov	r3, r0
 8003580:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003584:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003588:	2b00      	cmp	r3, #0
 800358a:	d111      	bne.n	80035b0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800358c:	202d      	movs	r0, #45	@ 0x2d
 800358e:	f001 f851 	bl	8004634 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b0f      	cmp	r3, #15
 8003596:	d808      	bhi.n	80035aa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8003598:	2200      	movs	r2, #0
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	202d      	movs	r0, #45	@ 0x2d
 800359e:	f001 f82d 	bl	80045fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035a2:	4a0a      	ldr	r2, [pc, #40]	@ (80035cc <HAL_InitTick+0xf4>)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	e002      	b.n	80035b0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80035b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3738      	adds	r7, #56	@ 0x38
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40023800 	.word	0x40023800
 80035c0:	431bde83 	.word	0x431bde83
 80035c4:	20000658 	.word	0x20000658
 80035c8:	40002000 	.word	0x40002000
 80035cc:	20000004 	.word	0x20000004

080035d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035d4:	bf00      	nop
 80035d6:	e7fd      	b.n	80035d4 <NMI_Handler+0x4>

080035d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035dc:	bf00      	nop
 80035de:	e7fd      	b.n	80035dc <HardFault_Handler+0x4>

080035e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035e4:	bf00      	nop
 80035e6:	e7fd      	b.n	80035e4 <MemManage_Handler+0x4>

080035e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035ec:	bf00      	nop
 80035ee:	e7fd      	b.n	80035ec <BusFault_Handler+0x4>

080035f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035f4:	bf00      	nop
 80035f6:	e7fd      	b.n	80035f4 <UsageFault_Handler+0x4>

080035f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035fc:	bf00      	nop
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
	...

08003608 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800360c:	4802      	ldr	r0, [pc, #8]	@ (8003618 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800360e:	f004 fbed 	bl	8007dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000658 	.word	0x20000658

0800361c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003620:	4802      	ldr	r0, [pc, #8]	@ (800362c <TIM7_IRQHandler+0x10>)
 8003622:	f004 fbe3 	bl	8007dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	200006a4 	.word	0x200006a4

08003630 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003630:	b5b0      	push	{r4, r5, r7, lr}
 8003632:	b0ae      	sub	sp, #184	@ 0xb8
 8003634:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN ETH_IRQn 0 */
  uint32_t dma_status = ETH->DMASR;
 8003636:	4b27      	ldr	r3, [pc, #156]	@ (80036d4 <ETH_IRQHandler+0xa4>)
 8003638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  char debug_msg[128];
  
  snprintf(debug_msg, sizeof(debug_msg), 
           "ETH_IRQ: DMASR=0x%08lX, NIS=%lu, AIS=%lu, RS=%lu, TS=%lu", 
           dma_status,
           (dma_status & ETH_DMASR_NIS) ? 1UL : 0UL,  // Normal interrupt
 8003642:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003646:	0c1b      	lsrs	r3, r3, #16
  snprintf(debug_msg, sizeof(debug_msg), 
 8003648:	f003 0301 	and.w	r3, r3, #1
           (dma_status & ETH_DMASR_AIS) ? 1UL : 0UL,  // Abnormal interrupt  
 800364c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003650:	0bd2      	lsrs	r2, r2, #15
  snprintf(debug_msg, sizeof(debug_msg), 
 8003652:	f002 0201 	and.w	r2, r2, #1
           (dma_status & ETH_DMASR_RS) ? 1UL : 0UL,   // Receive status
 8003656:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800365a:	0989      	lsrs	r1, r1, #6
  snprintf(debug_msg, sizeof(debug_msg), 
 800365c:	f001 0101 	and.w	r1, r1, #1
 8003660:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003664:	f000 0001 	and.w	r0, r0, #1
 8003668:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800366c:	9003      	str	r0, [sp, #12]
 800366e:	9102      	str	r1, [sp, #8]
 8003670:	9201      	str	r2, [sp, #4]
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003678:	4a17      	ldr	r2, [pc, #92]	@ (80036d8 <ETH_IRQHandler+0xa8>)
 800367a:	2180      	movs	r1, #128	@ 0x80
 800367c:	4620      	mov	r0, r4
 800367e:	f018 ff1f 	bl	801c4c0 <sniprintf>
           (dma_status & ETH_DMASR_TS) ? 1UL : 0UL);  // Transmit status
  
  CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 8003682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003686:	4618      	mov	r0, r3
 8003688:	f7fc fda2 	bl	80001d0 <strlen>
 800368c:	4603      	mov	r3, r0
 800368e:	b29a      	uxth	r2, r3
 8003690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003694:	4611      	mov	r1, r2
 8003696:	4618      	mov	r0, r3
 8003698:	f018 f91c 	bl	801b8d4 <CDC_Transmit_FS>
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800369c:	480f      	ldr	r0, [pc, #60]	@ (80036dc <ETH_IRQHandler+0xac>)
 800369e:	f001 fb65 	bl	8004d6c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */
  char completion_msg[] = "[ETH_IRQ] IRQ Handler completed\r\n";
 80036a2:	4b0f      	ldr	r3, [pc, #60]	@ (80036e0 <ETH_IRQHandler+0xb0>)
 80036a4:	463c      	mov	r4, r7
 80036a6:	461d      	mov	r5, r3
 80036a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036b0:	682b      	ldr	r3, [r5, #0]
 80036b2:	8023      	strh	r3, [r4, #0]
  CDC_Transmit_FS((uint8_t*)completion_msg, strlen(completion_msg));
 80036b4:	463b      	mov	r3, r7
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fc fd8a 	bl	80001d0 <strlen>
 80036bc:	4603      	mov	r3, r0
 80036be:	b29a      	uxth	r2, r3
 80036c0:	463b      	mov	r3, r7
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f018 f905 	bl	801b8d4 <CDC_Transmit_FS>
  /* USER CODE END ETH_IRQn 1 */
}
 80036ca:	bf00      	nop
 80036cc:	37a8      	adds	r7, #168	@ 0xa8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bdb0      	pop	{r4, r5, r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40028000 	.word	0x40028000
 80036d8:	0801e2d4 	.word	0x0801e2d4
 80036dc:	20005328 	.word	0x20005328
 80036e0:	0801e310 	.word	0x0801e310

080036e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80036e8:	4802      	ldr	r0, [pc, #8]	@ (80036f4 <OTG_FS_IRQHandler+0x10>)
 80036ea:	f002 fcde 	bl	80060aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	2000df18 	.word	0x2000df18

080036f8 <send_command>:
#include "usart.h"  // STM32 USART头文件
#include "main.h"   // HAL头文件
#include "usbd_cdc_if.h"  // 用于调试输出

// 发送命令并读取响应 - STM32 USART3版本
int send_command(int pump_id, const char* cmd, char* response, size_t resp_size) {
 80036f8:	b590      	push	{r4, r7, lr}
 80036fa:	b0e9      	sub	sp, #420	@ 0x1a4
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	f507 74cc 	add.w	r4, r7, #408	@ 0x198
 8003702:	f5a4 74c6 	sub.w	r4, r4, #396	@ 0x18c
 8003706:	6020      	str	r0, [r4, #0]
 8003708:	f507 70cc 	add.w	r0, r7, #408	@ 0x198
 800370c:	f5a0 70c8 	sub.w	r0, r0, #400	@ 0x190
 8003710:	6001      	str	r1, [r0, #0]
 8003712:	f507 71cc 	add.w	r1, r7, #408	@ 0x198
 8003716:	f5a1 71ca 	sub.w	r1, r1, #404	@ 0x194
 800371a:	600a      	str	r2, [r1, #0]
 800371c:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8003720:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 8003724:	6013      	str	r3, [r2, #0]
    char debug_msg[128];
    char pump_address;
    HAL_StatusTypeDef status;
    
    // 根据pump_id选择地址
    if (pump_id == 1) {
 8003726:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800372a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d103      	bne.n	800373c <send_command+0x44>
        pump_address = '1';  // 泵1地址为'1'
 8003734:	2331      	movs	r3, #49	@ 0x31
 8003736:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
 800373a:	e025      	b.n	8003788 <send_command+0x90>
    } else if (pump_id == 2) {
 800373c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003740:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d103      	bne.n	8003752 <send_command+0x5a>
        pump_address = '2';  // 泵2地址为'2'
 800374a:	2332      	movs	r3, #50	@ 0x32
 800374c:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
 8003750:	e01a      	b.n	8003788 <send_command+0x90>
    } else {
        snprintf(debug_msg, sizeof(debug_msg), "Invalid pump_id: %d\r\n", pump_id);
 8003752:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003756:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800375a:	f107 0010 	add.w	r0, r7, #16
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a8b      	ldr	r2, [pc, #556]	@ (8003990 <send_command+0x298>)
 8003762:	2180      	movs	r1, #128	@ 0x80
 8003764:	f018 feac 	bl	801c4c0 <sniprintf>
        CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 8003768:	f107 0310 	add.w	r3, r7, #16
 800376c:	4618      	mov	r0, r3
 800376e:	f7fc fd2f 	bl	80001d0 <strlen>
 8003772:	4603      	mov	r3, r0
 8003774:	b29a      	uxth	r2, r3
 8003776:	f107 0310 	add.w	r3, r7, #16
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f018 f8a9 	bl	801b8d4 <CDC_Transmit_FS>
        return -1;
 8003782:	f04f 33ff 	mov.w	r3, #4294967295
 8003786:	e0fe      	b.n	8003986 <send_command+0x28e>
    }
    
    // 格式化命令: /地址命令CR
    snprintf(buffer, sizeof(buffer), "/%c%s\r", pump_address, cmd);
 8003788:	f897 2197 	ldrb.w	r2, [r7, #407]	@ 0x197
 800378c:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8003790:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003794:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	4613      	mov	r3, r2
 800379e:	4a7d      	ldr	r2, [pc, #500]	@ (8003994 <send_command+0x29c>)
 80037a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80037a4:	f018 fe8c 	bl	801c4c0 <sniprintf>
    
    // 调试信息
    snprintf(debug_msg, sizeof(debug_msg), "Pump%d TX: %s", pump_id, buffer);
 80037a8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80037ac:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80037b0:	f107 0010 	add.w	r0, r7, #16
 80037b4:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80037b8:	9200      	str	r2, [sp, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a76      	ldr	r2, [pc, #472]	@ (8003998 <send_command+0x2a0>)
 80037be:	2180      	movs	r1, #128	@ 0x80
 80037c0:	f018 fe7e 	bl	801c4c0 <sniprintf>
    CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 80037c4:	f107 0310 	add.w	r3, r7, #16
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fc fd01 	bl	80001d0 <strlen>
 80037ce:	4603      	mov	r3, r0
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	f107 0310 	add.w	r3, r7, #16
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f018 f87b 	bl	801b8d4 <CDC_Transmit_FS>
    
    // 通过USART3发送命令
    status = HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 1000);
 80037de:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fc fcf4 	bl	80001d0 <strlen>
 80037e8:	4603      	mov	r3, r0
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80037f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037f4:	4869      	ldr	r0, [pc, #420]	@ (800399c <send_command+0x2a4>)
 80037f6:	f004 fd97 	bl	8008328 <HAL_UART_Transmit>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f887 3196 	strb.w	r3, [r7, #406]	@ 0x196
    if (status != HAL_OK) {
 8003800:	f897 3196 	ldrb.w	r3, [r7, #406]	@ 0x196
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01d      	beq.n	8003844 <send_command+0x14c>
        snprintf(debug_msg, sizeof(debug_msg), "Pump%d UART TX failed: %d\r\n", pump_id, status);
 8003808:	f897 2196 	ldrb.w	r2, [r7, #406]	@ 0x196
 800380c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003810:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003814:	f107 0010 	add.w	r0, r7, #16
 8003818:	9200      	str	r2, [sp, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a60      	ldr	r2, [pc, #384]	@ (80039a0 <send_command+0x2a8>)
 800381e:	2180      	movs	r1, #128	@ 0x80
 8003820:	f018 fe4e 	bl	801c4c0 <sniprintf>
        CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 8003824:	f107 0310 	add.w	r3, r7, #16
 8003828:	4618      	mov	r0, r3
 800382a:	f7fc fcd1 	bl	80001d0 <strlen>
 800382e:	4603      	mov	r3, r0
 8003830:	b29a      	uxth	r2, r3
 8003832:	f107 0310 	add.w	r3, r7, #16
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f018 f84b 	bl	801b8d4 <CDC_Transmit_FS>
        return -1;
 800383e:	f04f 33ff 	mov.w	r3, #4294967295
 8003842:	e0a0      	b.n	8003986 <send_command+0x28e>
    }
    
    // 读取响应（如果需要）
    if (response && resp_size > 0) {
 8003844:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003848:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 8098 	beq.w	8003984 <send_command+0x28c>
 8003854:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003858:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 8090 	beq.w	8003984 <send_command+0x28c>
        memset(response, 0, resp_size);
 8003864:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003868:	f5a3 72cc 	sub.w	r2, r3, #408	@ 0x198
 800386c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003870:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	2100      	movs	r1, #0
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	f018 fec4 	bl	801c606 <memset>
        
        // 等待响应，超时时间200ms
        status = HAL_UART_Receive(&huart3, (uint8_t*)response, resp_size - 1, 200);
 800387e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003882:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003892:	f5a3 71ca 	sub.w	r1, r3, #404	@ 0x194
 8003896:	23c8      	movs	r3, #200	@ 0xc8
 8003898:	6809      	ldr	r1, [r1, #0]
 800389a:	4840      	ldr	r0, [pc, #256]	@ (800399c <send_command+0x2a4>)
 800389c:	f004 fdcf 	bl	800843e <HAL_UART_Receive>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f887 3196 	strb.w	r3, [r7, #406]	@ 0x196
        if (status == HAL_OK) {
 80038a6:	f897 3196 	ldrb.w	r3, [r7, #406]	@ 0x196
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d12d      	bne.n	800390a <send_command+0x212>
            // 找到实际接收到的数据长度
            size_t actual_len = strlen(response);
 80038ae:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80038b2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80038b6:	6818      	ldr	r0, [r3, #0]
 80038b8:	f7fc fc8a 	bl	80001d0 <strlen>
 80038bc:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
            if (actual_len > 0) {
 80038c0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d05d      	beq.n	8003984 <send_command+0x28c>
                // 调试信息：显示响应
                snprintf(debug_msg, sizeof(debug_msg), "Pump%d RX: %s", pump_id, response);
 80038c8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80038cc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80038d0:	f107 0010 	add.w	r0, r7, #16
 80038d4:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 80038d8:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	9200      	str	r2, [sp, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a30      	ldr	r2, [pc, #192]	@ (80039a4 <send_command+0x2ac>)
 80038e4:	2180      	movs	r1, #128	@ 0x80
 80038e6:	f018 fdeb 	bl	801c4c0 <sniprintf>
                CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 80038ea:	f107 0310 	add.w	r3, r7, #16
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fc fc6e 	bl	80001d0 <strlen>
 80038f4:	4603      	mov	r3, r0
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	f107 0310 	add.w	r3, r7, #16
 80038fc:	4611      	mov	r1, r2
 80038fe:	4618      	mov	r0, r3
 8003900:	f017 ffe8 	bl	801b8d4 <CDC_Transmit_FS>
                return actual_len;
 8003904:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003908:	e03d      	b.n	8003986 <send_command+0x28e>
            }
        } else if (status == HAL_TIMEOUT) {
 800390a:	f897 3196 	ldrb.w	r3, [r7, #406]	@ 0x196
 800390e:	2b03      	cmp	r3, #3
 8003910:	d11a      	bne.n	8003948 <send_command+0x250>
            snprintf(debug_msg, sizeof(debug_msg), "Pump%d UART RX timeout\r\n", pump_id);
 8003912:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003916:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800391a:	f107 0010 	add.w	r0, r7, #16
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a21      	ldr	r2, [pc, #132]	@ (80039a8 <send_command+0x2b0>)
 8003922:	2180      	movs	r1, #128	@ 0x80
 8003924:	f018 fdcc 	bl	801c4c0 <sniprintf>
            CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 8003928:	f107 0310 	add.w	r3, r7, #16
 800392c:	4618      	mov	r0, r3
 800392e:	f7fc fc4f 	bl	80001d0 <strlen>
 8003932:	4603      	mov	r3, r0
 8003934:	b29a      	uxth	r2, r3
 8003936:	f107 0310 	add.w	r3, r7, #16
 800393a:	4611      	mov	r1, r2
 800393c:	4618      	mov	r0, r3
 800393e:	f017 ffc9 	bl	801b8d4 <CDC_Transmit_FS>
            return -2;  // 超时错误码
 8003942:	f06f 0301 	mvn.w	r3, #1
 8003946:	e01e      	b.n	8003986 <send_command+0x28e>
        } else {
            snprintf(debug_msg, sizeof(debug_msg), "Pump%d UART RX failed: %d\r\n", pump_id, status);
 8003948:	f897 2196 	ldrb.w	r2, [r7, #406]	@ 0x196
 800394c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003950:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003954:	f107 0010 	add.w	r0, r7, #16
 8003958:	9200      	str	r2, [sp, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a13      	ldr	r2, [pc, #76]	@ (80039ac <send_command+0x2b4>)
 800395e:	2180      	movs	r1, #128	@ 0x80
 8003960:	f018 fdae 	bl	801c4c0 <sniprintf>
            CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 8003964:	f107 0310 	add.w	r3, r7, #16
 8003968:	4618      	mov	r0, r3
 800396a:	f7fc fc31 	bl	80001d0 <strlen>
 800396e:	4603      	mov	r3, r0
 8003970:	b29a      	uxth	r2, r3
 8003972:	f107 0310 	add.w	r3, r7, #16
 8003976:	4611      	mov	r1, r2
 8003978:	4618      	mov	r0, r3
 800397a:	f017 ffab 	bl	801b8d4 <CDC_Transmit_FS>
            return -1;
 800397e:	f04f 33ff 	mov.w	r3, #4294967295
 8003982:	e000      	b.n	8003986 <send_command+0x28e>
        }
    }
    
    return 0;  // 成功发送，无需响应
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	f507 77ce 	add.w	r7, r7, #412	@ 0x19c
 800398c:	46bd      	mov	sp, r7
 800398e:	bd90      	pop	{r4, r7, pc}
 8003990:	0801e334 	.word	0x0801e334
 8003994:	0801e34c 	.word	0x0801e34c
 8003998:	0801e354 	.word	0x0801e354
 800399c:	20000734 	.word	0x20000734
 80039a0:	0801e364 	.word	0x0801e364
 80039a4:	0801e380 	.word	0x0801e380
 80039a8:	0801e390 	.word	0x0801e390
 80039ac:	0801e3ac 	.word	0x0801e3ac

080039b0 <pump_init>:

// 初始化泵
int pump_init(int pump_id) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
    return send_command(pump_id, CMD_INIT, NULL, 0);
 80039b8:	2300      	movs	r3, #0
 80039ba:	2200      	movs	r2, #0
 80039bc:	4904      	ldr	r1, [pc, #16]	@ (80039d0 <pump_init+0x20>)
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff fe9a 	bl	80036f8 <send_command>
 80039c4:	4603      	mov	r3, r0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	0801e3c8 	.word	0x0801e3c8

080039d4 <pump_move_absolute>:

// 绝对位置移动
int pump_move_absolute(int pump_id, int position) {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08a      	sub	sp, #40	@ 0x28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), CMD_ABS_MOVE, position);
 80039de:	f107 0008 	add.w	r0, r7, #8
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	4a07      	ldr	r2, [pc, #28]	@ (8003a04 <pump_move_absolute+0x30>)
 80039e6:	2120      	movs	r1, #32
 80039e8:	f018 fd6a 	bl	801c4c0 <sniprintf>
    return send_command(pump_id, cmd, NULL, 0);
 80039ec:	f107 0108 	add.w	r1, r7, #8
 80039f0:	2300      	movs	r3, #0
 80039f2:	2200      	movs	r2, #0
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff fe7f 	bl	80036f8 <send_command>
 80039fa:	4603      	mov	r3, r0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3728      	adds	r7, #40	@ 0x28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	0801e3cc 	.word	0x0801e3cc

08003a08 <pump_query_error>:
int pump_get_status(int pump_id, char* status) {
    return send_command(pump_id, CMD_STATUS, status, 256);
}

// 查询错误码
int pump_query_error(int pump_id, char* error_code) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
    return send_command(pump_id, CMD_ERROR_QUERY, error_code, 256);
 8003a12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	4904      	ldr	r1, [pc, #16]	@ (8003a2c <pump_query_error+0x24>)
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff fe6c 	bl	80036f8 <send_command>
 8003a20:	4603      	mov	r3, r0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	0801e3f4 	.word	0x0801e3f4

08003a30 <pump_query_position>:

// 查询当前活塞位置
int pump_query_position(int pump_id, int* position) {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b0c4      	sub	sp, #272	@ 0x110
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003a3e:	6018      	str	r0, [r3, #0]
 8003a40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a44:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003a48:	6019      	str	r1, [r3, #0]
    char response[256];
    int result = send_command(pump_id, CMD_POSITION_QUERY, response, sizeof(response));
 8003a4a:	f107 0208 	add.w	r2, r7, #8
 8003a4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a52:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8003a56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a5a:	4920      	ldr	r1, [pc, #128]	@ (8003adc <pump_query_position+0xac>)
 8003a5c:	6800      	ldr	r0, [r0, #0]
 8003a5e:	f7ff fe4b 	bl	80036f8 <send_command>
 8003a62:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
    
    if (result == 0 && position != NULL) {
 8003a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d12e      	bne.n	8003acc <pump_query_position+0x9c>
 8003a6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a72:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d027      	beq.n	8003acc <pump_query_position+0x9c>
        // 解析响应，从类似 "FF /0`3000 03 0D 0A" 格式中提取位置
        // 寻找 '`' 字符后的数字
        char* pos_start = strchr(response, '`');
 8003a7c:	f107 0308 	add.w	r3, r7, #8
 8003a80:	2160      	movs	r1, #96	@ 0x60
 8003a82:	4618      	mov	r0, r3
 8003a84:	f018 fdd6 	bl	801c634 <strchr>
 8003a88:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
        if (pos_start != NULL) {
 8003a8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d010      	beq.n	8003ab6 <pump_query_position+0x86>
            pos_start++; // 跳过 '`' 字符
 8003a94:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            *position = atoi(pos_start);
 8003a9e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8003aa2:	f018 fb73 	bl	801c18c <atoi>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003aac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	e00a      	b.n	8003acc <pump_query_position+0x9c>
        } else {
            *position = -1;  // 解析失败
 8003ab6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003aba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac4:	601a      	str	r2, [r3, #0]
            return -1;
 8003ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aca:	e001      	b.n	8003ad0 <pump_query_position+0xa0>
        }
    }
    
    return result;
 8003acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	0801e3f8 	.word	0x0801e3f8

08003ae0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  return 1;
 8003ae4:	2301      	movs	r3, #1
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <_kill>:

int _kill(int pid, int sig)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003afa:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <_kill+0x20>)
 8003afc:	2216      	movs	r2, #22
 8003afe:	601a      	str	r2, [r3, #0]
  return -1;
 8003b00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	2000e758 	.word	0x2000e758

08003b14 <_exit>:

void _exit (int status)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7ff ffe5 	bl	8003af0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b26:	bf00      	nop
 8003b28:	e7fd      	b.n	8003b26 <_exit+0x12>

08003b2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b086      	sub	sp, #24
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	e00a      	b.n	8003b52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b3c:	f3af 8000 	nop.w
 8003b40:	4601      	mov	r1, r0
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	60ba      	str	r2, [r7, #8]
 8003b48:	b2ca      	uxtb	r2, r1
 8003b4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	dbf0      	blt.n	8003b3c <_read+0x12>
  }

  return len;
 8003b5a:	687b      	ldr	r3, [r7, #4]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	e009      	b.n	8003b8a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	60ba      	str	r2, [r7, #8]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	3301      	adds	r3, #1
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	dbf1      	blt.n	8003b76 <_write+0x12>
  }
  return len;
 8003b92:	687b      	ldr	r3, [r7, #4]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <_close>:

int _close(int file)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ba4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003bc4:	605a      	str	r2, [r3, #4]
  return 0;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <_isatty>:

int _isatty(int file)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003bdc:	2301      	movs	r3, #1
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b085      	sub	sp, #20
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c0c:	4a14      	ldr	r2, [pc, #80]	@ (8003c60 <_sbrk+0x5c>)
 8003c0e:	4b15      	ldr	r3, [pc, #84]	@ (8003c64 <_sbrk+0x60>)
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c18:	4b13      	ldr	r3, [pc, #76]	@ (8003c68 <_sbrk+0x64>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d102      	bne.n	8003c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c20:	4b11      	ldr	r3, [pc, #68]	@ (8003c68 <_sbrk+0x64>)
 8003c22:	4a12      	ldr	r2, [pc, #72]	@ (8003c6c <_sbrk+0x68>)
 8003c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c26:	4b10      	ldr	r3, [pc, #64]	@ (8003c68 <_sbrk+0x64>)
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d205      	bcs.n	8003c40 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003c34:	4b0e      	ldr	r3, [pc, #56]	@ (8003c70 <_sbrk+0x6c>)
 8003c36:	220c      	movs	r2, #12
 8003c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3e:	e009      	b.n	8003c54 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c40:	4b09      	ldr	r3, [pc, #36]	@ (8003c68 <_sbrk+0x64>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c46:	4b08      	ldr	r3, [pc, #32]	@ (8003c68 <_sbrk+0x64>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	4a06      	ldr	r2, [pc, #24]	@ (8003c68 <_sbrk+0x64>)
 8003c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c52:	68fb      	ldr	r3, [r7, #12]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	20020000 	.word	0x20020000
 8003c64:	00000400 	.word	0x00000400
 8003c68:	200006a0 	.word	0x200006a0
 8003c6c:	2000e780 	.word	0x2000e780
 8003c70:	2000e758 	.word	0x2000e758

08003c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c78:	4b06      	ldr	r3, [pc, #24]	@ (8003c94 <SystemInit+0x20>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7e:	4a05      	ldr	r2, [pc, #20]	@ (8003c94 <SystemInit+0x20>)
 8003c80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c88:	bf00      	nop
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c9e:	463b      	mov	r3, r7
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003ca6:	4b15      	ldr	r3, [pc, #84]	@ (8003cfc <MX_TIM7_Init+0x64>)
 8003ca8:	4a15      	ldr	r2, [pc, #84]	@ (8003d00 <MX_TIM7_Init+0x68>)
 8003caa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8003cac:	4b13      	ldr	r3, [pc, #76]	@ (8003cfc <MX_TIM7_Init+0x64>)
 8003cae:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003cb2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cb4:	4b11      	ldr	r3, [pc, #68]	@ (8003cfc <MX_TIM7_Init+0x64>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8003cba:	4b10      	ldr	r3, [pc, #64]	@ (8003cfc <MX_TIM7_Init+0x64>)
 8003cbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003cc0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003cfc <MX_TIM7_Init+0x64>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003cc8:	480c      	ldr	r0, [pc, #48]	@ (8003cfc <MX_TIM7_Init+0x64>)
 8003cca:	f003 ffcf 	bl	8007c6c <HAL_TIM_Base_Init>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003cd4:	f7fd ff08 	bl	8001ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003ce0:	463b      	mov	r3, r7
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4805      	ldr	r0, [pc, #20]	@ (8003cfc <MX_TIM7_Init+0x64>)
 8003ce6:	f004 fa3f 	bl	8008168 <HAL_TIMEx_MasterConfigSynchronization>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003cf0:	f7fd fefa 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003cf4:	bf00      	nop
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	200006a4 	.word	0x200006a4
 8003d00:	40001400 	.word	0x40001400

08003d04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a0e      	ldr	r2, [pc, #56]	@ (8003d4c <HAL_TIM_Base_MspInit+0x48>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d115      	bne.n	8003d42 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d50 <HAL_TIM_Base_MspInit+0x4c>)
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8003d50 <HAL_TIM_Base_MspInit+0x4c>)
 8003d20:	f043 0320 	orr.w	r3, r3, #32
 8003d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d26:	4b0a      	ldr	r3, [pc, #40]	@ (8003d50 <HAL_TIM_Base_MspInit+0x4c>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003d32:	2200      	movs	r2, #0
 8003d34:	2105      	movs	r1, #5
 8003d36:	2037      	movs	r0, #55	@ 0x37
 8003d38:	f000 fc60 	bl	80045fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003d3c:	2037      	movs	r0, #55	@ 0x37
 8003d3e:	f000 fc79 	bl	8004634 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003d42:	bf00      	nop
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40001400 	.word	0x40001400
 8003d50:	40023800 	.word	0x40023800

08003d54 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d58:	4b11      	ldr	r3, [pc, #68]	@ (8003da0 <MX_USART1_UART_Init+0x4c>)
 8003d5a:	4a12      	ldr	r2, [pc, #72]	@ (8003da4 <MX_USART1_UART_Init+0x50>)
 8003d5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d5e:	4b10      	ldr	r3, [pc, #64]	@ (8003da0 <MX_USART1_UART_Init+0x4c>)
 8003d60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003d64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d66:	4b0e      	ldr	r3, [pc, #56]	@ (8003da0 <MX_USART1_UART_Init+0x4c>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003da0 <MX_USART1_UART_Init+0x4c>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d72:	4b0b      	ldr	r3, [pc, #44]	@ (8003da0 <MX_USART1_UART_Init+0x4c>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d78:	4b09      	ldr	r3, [pc, #36]	@ (8003da0 <MX_USART1_UART_Init+0x4c>)
 8003d7a:	220c      	movs	r2, #12
 8003d7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d7e:	4b08      	ldr	r3, [pc, #32]	@ (8003da0 <MX_USART1_UART_Init+0x4c>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d84:	4b06      	ldr	r3, [pc, #24]	@ (8003da0 <MX_USART1_UART_Init+0x4c>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d8a:	4805      	ldr	r0, [pc, #20]	@ (8003da0 <MX_USART1_UART_Init+0x4c>)
 8003d8c:	f004 fa7c 	bl	8008288 <HAL_UART_Init>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003d96:	f7fd fea7 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d9a:	bf00      	nop
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	200006ec 	.word	0x200006ec
 8003da4:	40011000 	.word	0x40011000

08003da8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003dac:	4b11      	ldr	r3, [pc, #68]	@ (8003df4 <MX_USART3_UART_Init+0x4c>)
 8003dae:	4a12      	ldr	r2, [pc, #72]	@ (8003df8 <MX_USART3_UART_Init+0x50>)
 8003db0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003db2:	4b10      	ldr	r3, [pc, #64]	@ (8003df4 <MX_USART3_UART_Init+0x4c>)
 8003db4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003db8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003dba:	4b0e      	ldr	r3, [pc, #56]	@ (8003df4 <MX_USART3_UART_Init+0x4c>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003df4 <MX_USART3_UART_Init+0x4c>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003df4 <MX_USART3_UART_Init+0x4c>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003dcc:	4b09      	ldr	r3, [pc, #36]	@ (8003df4 <MX_USART3_UART_Init+0x4c>)
 8003dce:	220c      	movs	r2, #12
 8003dd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dd2:	4b08      	ldr	r3, [pc, #32]	@ (8003df4 <MX_USART3_UART_Init+0x4c>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dd8:	4b06      	ldr	r3, [pc, #24]	@ (8003df4 <MX_USART3_UART_Init+0x4c>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003dde:	4805      	ldr	r0, [pc, #20]	@ (8003df4 <MX_USART3_UART_Init+0x4c>)
 8003de0:	f004 fa52 	bl	8008288 <HAL_UART_Init>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003dea:	f7fd fe7d 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003dee:	bf00      	nop
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20000734 	.word	0x20000734
 8003df8:	40004800 	.word	0x40004800

08003dfc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003e00:	4b11      	ldr	r3, [pc, #68]	@ (8003e48 <MX_USART6_UART_Init+0x4c>)
 8003e02:	4a12      	ldr	r2, [pc, #72]	@ (8003e4c <MX_USART6_UART_Init+0x50>)
 8003e04:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003e06:	4b10      	ldr	r3, [pc, #64]	@ (8003e48 <MX_USART6_UART_Init+0x4c>)
 8003e08:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003e0c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e48 <MX_USART6_UART_Init+0x4c>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003e14:	4b0c      	ldr	r3, [pc, #48]	@ (8003e48 <MX_USART6_UART_Init+0x4c>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e48 <MX_USART6_UART_Init+0x4c>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003e20:	4b09      	ldr	r3, [pc, #36]	@ (8003e48 <MX_USART6_UART_Init+0x4c>)
 8003e22:	220c      	movs	r2, #12
 8003e24:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e26:	4b08      	ldr	r3, [pc, #32]	@ (8003e48 <MX_USART6_UART_Init+0x4c>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e2c:	4b06      	ldr	r3, [pc, #24]	@ (8003e48 <MX_USART6_UART_Init+0x4c>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003e32:	4805      	ldr	r0, [pc, #20]	@ (8003e48 <MX_USART6_UART_Init+0x4c>)
 8003e34:	f004 fa28 	bl	8008288 <HAL_UART_Init>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003e3e:	f7fd fe53 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003e42:	bf00      	nop
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	2000077c 	.word	0x2000077c
 8003e4c:	40011400 	.word	0x40011400

08003e50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08e      	sub	sp, #56	@ 0x38
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	605a      	str	r2, [r3, #4]
 8003e62:	609a      	str	r2, [r3, #8]
 8003e64:	60da      	str	r2, [r3, #12]
 8003e66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a4c      	ldr	r2, [pc, #304]	@ (8003fa0 <HAL_UART_MspInit+0x150>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d12d      	bne.n	8003ece <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	623b      	str	r3, [r7, #32]
 8003e76:	4b4b      	ldr	r3, [pc, #300]	@ (8003fa4 <HAL_UART_MspInit+0x154>)
 8003e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7a:	4a4a      	ldr	r2, [pc, #296]	@ (8003fa4 <HAL_UART_MspInit+0x154>)
 8003e7c:	f043 0310 	orr.w	r3, r3, #16
 8003e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e82:	4b48      	ldr	r3, [pc, #288]	@ (8003fa4 <HAL_UART_MspInit+0x154>)
 8003e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e86:	f003 0310 	and.w	r3, r3, #16
 8003e8a:	623b      	str	r3, [r7, #32]
 8003e8c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	4b44      	ldr	r3, [pc, #272]	@ (8003fa4 <HAL_UART_MspInit+0x154>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e96:	4a43      	ldr	r2, [pc, #268]	@ (8003fa4 <HAL_UART_MspInit+0x154>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e9e:	4b41      	ldr	r3, [pc, #260]	@ (8003fa4 <HAL_UART_MspInit+0x154>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	61fb      	str	r3, [r7, #28]
 8003ea8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003eaa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003eae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ebc:	2307      	movs	r3, #7
 8003ebe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4838      	ldr	r0, [pc, #224]	@ (8003fa8 <HAL_UART_MspInit+0x158>)
 8003ec8:	f001 fdf6 	bl	8005ab8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003ecc:	e063      	b.n	8003f96 <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART3)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a36      	ldr	r2, [pc, #216]	@ (8003fac <HAL_UART_MspInit+0x15c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d12d      	bne.n	8003f34 <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61bb      	str	r3, [r7, #24]
 8003edc:	4b31      	ldr	r3, [pc, #196]	@ (8003fa4 <HAL_UART_MspInit+0x154>)
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	4a30      	ldr	r2, [pc, #192]	@ (8003fa4 <HAL_UART_MspInit+0x154>)
 8003ee2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ee6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ee8:	4b2e      	ldr	r3, [pc, #184]	@ (8003fa4 <HAL_UART_MspInit+0x154>)
 8003eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8003fa4 <HAL_UART_MspInit+0x154>)
 8003efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efc:	4a29      	ldr	r2, [pc, #164]	@ (8003fa4 <HAL_UART_MspInit+0x154>)
 8003efe:	f043 0302 	orr.w	r3, r3, #2
 8003f02:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f04:	4b27      	ldr	r3, [pc, #156]	@ (8003fa4 <HAL_UART_MspInit+0x154>)
 8003f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003f10:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003f14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f16:	2302      	movs	r3, #2
 8003f18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f22:	2307      	movs	r3, #7
 8003f24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4820      	ldr	r0, [pc, #128]	@ (8003fb0 <HAL_UART_MspInit+0x160>)
 8003f2e:	f001 fdc3 	bl	8005ab8 <HAL_GPIO_Init>
}
 8003f32:	e030      	b.n	8003f96 <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART6)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a1e      	ldr	r2, [pc, #120]	@ (8003fb4 <HAL_UART_MspInit+0x164>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d12b      	bne.n	8003f96 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	4b18      	ldr	r3, [pc, #96]	@ (8003fa4 <HAL_UART_MspInit+0x154>)
 8003f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f46:	4a17      	ldr	r2, [pc, #92]	@ (8003fa4 <HAL_UART_MspInit+0x154>)
 8003f48:	f043 0320 	orr.w	r3, r3, #32
 8003f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f4e:	4b15      	ldr	r3, [pc, #84]	@ (8003fa4 <HAL_UART_MspInit+0x154>)
 8003f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	4b11      	ldr	r3, [pc, #68]	@ (8003fa4 <HAL_UART_MspInit+0x154>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	4a10      	ldr	r2, [pc, #64]	@ (8003fa4 <HAL_UART_MspInit+0x154>)
 8003f64:	f043 0304 	orr.w	r3, r3, #4
 8003f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa4 <HAL_UART_MspInit+0x154>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f76:	23c0      	movs	r3, #192	@ 0xc0
 8003f78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f82:	2303      	movs	r3, #3
 8003f84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003f86:	2308      	movs	r3, #8
 8003f88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4809      	ldr	r0, [pc, #36]	@ (8003fb8 <HAL_UART_MspInit+0x168>)
 8003f92:	f001 fd91 	bl	8005ab8 <HAL_GPIO_Init>
}
 8003f96:	bf00      	nop
 8003f98:	3738      	adds	r7, #56	@ 0x38
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40011000 	.word	0x40011000
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	40020000 	.word	0x40020000
 8003fac:	40004800 	.word	0x40004800
 8003fb0:	40020400 	.word	0x40020400
 8003fb4:	40011400 	.word	0x40011400
 8003fb8:	40020800 	.word	0x40020800

08003fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003fbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ff4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003fc0:	f7ff fe58 	bl	8003c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fc4:	480c      	ldr	r0, [pc, #48]	@ (8003ff8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fc6:	490d      	ldr	r1, [pc, #52]	@ (8003ffc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8004000 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fcc:	e002      	b.n	8003fd4 <LoopCopyDataInit>

08003fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fd2:	3304      	adds	r3, #4

08003fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fd8:	d3f9      	bcc.n	8003fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fda:	4a0a      	ldr	r2, [pc, #40]	@ (8004004 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fdc:	4c0a      	ldr	r4, [pc, #40]	@ (8004008 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fe0:	e001      	b.n	8003fe6 <LoopFillZerobss>

08003fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fe4:	3204      	adds	r2, #4

08003fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fe8:	d3fb      	bcc.n	8003fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fea:	f018 fbdb 	bl	801c7a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fee:	f7fd fce5 	bl	80019bc <main>
  bx  lr    
 8003ff2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003ff4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ffc:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8004000:	08022014 	.word	0x08022014
  ldr r2, =_sbss
 8004004:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8004008:	2000e768 	.word	0x2000e768

0800400c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800400c:	e7fe      	b.n	800400c <ADC_IRQHandler>

0800400e <eth_chip_regster_bus_io>:
  * @param       ioctx�������豸IO����
  * @retval      ETH_CHIP_STATUS_OK��OK
  *              ETH_CHIP_STATUS_ERROR��ȱ�ٹ���
  */
int32_t  eth_chip_regster_bus_io(eth_chip_object_t *pobj, eth_chip_ioc_tx_t *ioctx)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
    if (!pobj || !ioctx->readreg || !ioctx->writereg || !ioctx->gettick)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <eth_chip_regster_bus_io+0x28>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d007      	beq.n	8004036 <eth_chip_regster_bus_io+0x28>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <eth_chip_regster_bus_io+0x28>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d102      	bne.n	800403c <eth_chip_regster_bus_io+0x2e>
    {
        return ETH_CHIP_STATUS_ERROR;
 8004036:	f04f 33ff 	mov.w	r3, #4294967295
 800403a:	e014      	b.n	8004066 <eth_chip_regster_bus_io+0x58>
    }

    pobj->io.init = ioctx->init;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	609a      	str	r2, [r3, #8]
    pobj->io.deinit = ioctx->deinit;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	60da      	str	r2, [r3, #12]
    pobj->io.readreg = ioctx->readreg;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	615a      	str	r2, [r3, #20]
    pobj->io.writereg = ioctx->writereg;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	611a      	str	r2, [r3, #16]
    pobj->io.gettick = ioctx->gettick;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	619a      	str	r2, [r3, #24]

    return ETH_CHIP_STATUS_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
	...

08004074 <eth_chip_init>:
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д��Ĵ���
                 ETH_CHIP_STATUS_RESET_TIMEOUT���޷�ִ��������λ
  */
int32_t eth_chip_init(eth_chip_object_t *pobj)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	2300      	movs	r3, #0
 8004082:	60bb      	str	r3, [r7, #8]
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
    int32_t status = ETH_CHIP_STATUS_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	613b      	str	r3, [r7, #16]
        LAN8720A    Register 2    0x0007
                    Register 3    0xC0F0

        RTL8201BL   Register 2    0x0000
                    Register 3    0x8201 */
    pobj->io.readreg(addr, PHY_REGISTER2, &regvalue);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f107 0208 	add.w	r2, r7, #8
 8004094:	2102      	movs	r1, #2
 8004096:	6978      	ldr	r0, [r7, #20]
 8004098:	4798      	blx	r3

    switch (regvalue)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b1c      	cmp	r3, #28
 800409e:	d02d      	beq.n	80040fc <eth_chip_init+0x88>
 80040a0:	2b1c      	cmp	r3, #28
 80040a2:	d847      	bhi.n	8004134 <eth_chip_init+0xc0>
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <eth_chip_init+0x3a>
 80040a8:	2b07      	cmp	r3, #7
 80040aa:	d036      	beq.n	800411a <eth_chip_init+0xa6>
 80040ac:	e042      	b.n	8004134 <eth_chip_init+0xc0>
    {
        case YT8512C_AND_RTL8201BL_PHYREGISTER2:
            pobj->io.readreg(addr, PHY_REGISTER3, &regvalue);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f107 0208 	add.w	r2, r7, #8
 80040b6:	2103      	movs	r1, #3
 80040b8:	6978      	ldr	r0, [r7, #20]
 80040ba:	4798      	blx	r3

            if (regvalue == 0x128)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 80040c2:	d10e      	bne.n	80040e2 <eth_chip_init+0x6e>
            {
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x11);
 80040c4:	4b6a      	ldr	r3, [pc, #424]	@ (8004270 <eth_chip_init+0x1fc>)
 80040c6:	2211      	movs	r2, #17
 80040c8:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x4010);
 80040ca:	4b6a      	ldr	r3, [pc, #424]	@ (8004274 <eth_chip_init+0x200>)
 80040cc:	f244 0210 	movw	r2, #16400	@ 0x4010
 80040d0:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x2000);
 80040d2:	4b69      	ldr	r3, [pc, #420]	@ (8004278 <eth_chip_init+0x204>)
 80040d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80040d8:	801a      	strh	r2, [r3, #0]
                PHY_TYPE = YT8512C;
 80040da:	4b68      	ldr	r3, [pc, #416]	@ (800427c <eth_chip_init+0x208>)
 80040dc:	2202      	movs	r2, #2
 80040de:	601a      	str	r2, [r3, #0]
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x10);
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0022);
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0004);
                PHY_TYPE = RTL8201;
            }
            break;
 80040e0:	e028      	b.n	8004134 <eth_chip_init+0xc0>
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x10);
 80040e2:	4b63      	ldr	r3, [pc, #396]	@ (8004270 <eth_chip_init+0x1fc>)
 80040e4:	2210      	movs	r2, #16
 80040e6:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0022);
 80040e8:	4b62      	ldr	r3, [pc, #392]	@ (8004274 <eth_chip_init+0x200>)
 80040ea:	2222      	movs	r2, #34	@ 0x22
 80040ec:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0004);
 80040ee:	4b62      	ldr	r3, [pc, #392]	@ (8004278 <eth_chip_init+0x204>)
 80040f0:	2204      	movs	r2, #4
 80040f2:	801a      	strh	r2, [r3, #0]
                PHY_TYPE = RTL8201;
 80040f4:	4b61      	ldr	r3, [pc, #388]	@ (800427c <eth_chip_init+0x208>)
 80040f6:	2203      	movs	r2, #3
 80040f8:	601a      	str	r2, [r3, #0]
            break;
 80040fa:	e01b      	b.n	8004134 <eth_chip_init+0xc0>
        case SR8201F_PHYREGISTER2:
            ETH_CHIP_PHYSCSR  = ((uint16_t)0x00);
 80040fc:	4b5c      	ldr	r3, [pc, #368]	@ (8004270 <eth_chip_init+0x1fc>)
 80040fe:	2200      	movs	r2, #0
 8004100:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_SPEED_STATUS = ((uint16_t)0x2020);
 8004102:	4b5c      	ldr	r3, [pc, #368]	@ (8004274 <eth_chip_init+0x200>)
 8004104:	f242 0220 	movw	r2, #8224	@ 0x2020
 8004108:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0100);
 800410a:	4b5b      	ldr	r3, [pc, #364]	@ (8004278 <eth_chip_init+0x204>)
 800410c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004110:	801a      	strh	r2, [r3, #0]
            PHY_TYPE = SR8201F;
 8004112:	4b5a      	ldr	r3, [pc, #360]	@ (800427c <eth_chip_init+0x208>)
 8004114:	2201      	movs	r2, #1
 8004116:	601a      	str	r2, [r3, #0]
            break;
 8004118:	e00c      	b.n	8004134 <eth_chip_init+0xc0>
        case LAN8720A_PHYREGISTER2:
            ETH_CHIP_PHYSCSR  = ((uint16_t)0x1F);
 800411a:	4b55      	ldr	r3, [pc, #340]	@ (8004270 <eth_chip_init+0x1fc>)
 800411c:	221f      	movs	r2, #31
 800411e:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0004);
 8004120:	4b54      	ldr	r3, [pc, #336]	@ (8004274 <eth_chip_init+0x200>)
 8004122:	2204      	movs	r2, #4
 8004124:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0010);
 8004126:	4b54      	ldr	r3, [pc, #336]	@ (8004278 <eth_chip_init+0x204>)
 8004128:	2210      	movs	r2, #16
 800412a:	801a      	strh	r2, [r3, #0]
            PHY_TYPE = LAN8720;
 800412c:	4b53      	ldr	r3, [pc, #332]	@ (800427c <eth_chip_init+0x208>)
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
            break;
 8004132:	bf00      	nop
    }
#endif

    if (pobj->is_initialized == 0)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d17e      	bne.n	800423a <eth_chip_init+0x1c6>
    {
        if (pobj->io.init != 0)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <eth_chip_init+0xd6>
        {
            /* MDCʱ�� */
            pobj->io.init();
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	4798      	blx	r3
        }

        /* ����PHY��ַΪ32 */
        pobj->devaddr = ETH_CHIP_MAX_DEV_ADDR + 1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2220      	movs	r2, #32
 800414e:	601a      	str	r2, [r3, #0]

        /* ��ҪΪ�˲���PHY��ַ */
        for (addr = 0; addr <= ETH_CHIP_MAX_DEV_ADDR; addr ++)
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	e01e      	b.n	8004194 <eth_chip_init+0x120>
        {
            if (pobj->io.readreg(addr, ETH_CHIP_PHYSCSR, &regvalue) < 0)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	4a45      	ldr	r2, [pc, #276]	@ (8004270 <eth_chip_init+0x1fc>)
 800415c:	8812      	ldrh	r2, [r2, #0]
 800415e:	4611      	mov	r1, r2
 8004160:	f107 0208 	add.w	r2, r7, #8
 8004164:	6978      	ldr	r0, [r7, #20]
 8004166:	4798      	blx	r3
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	da03      	bge.n	8004176 <eth_chip_init+0x102>
            {
                status = ETH_CHIP_STATUS_READ_ERROR;
 800416e:	f06f 0304 	mvn.w	r3, #4
 8004172:	613b      	str	r3, [r7, #16]
                /* �޷���ȡ����豸��ַ������һ����ַ */
                continue;
 8004174:	e00b      	b.n	800418e <eth_chip_init+0x11a>
            }
            /* �Ѿ��ҵ�PHY��ַ�� */
            if ((regvalue & ETH_CHIP_PHY_COUNT) == addr)
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f003 031f 	and.w	r3, r3, #31
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	429a      	cmp	r2, r3
 8004180:	d105      	bne.n	800418e <eth_chip_init+0x11a>
            {
                pobj->devaddr = addr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	601a      	str	r2, [r3, #0]
                status = ETH_CHIP_STATUS_OK;
 8004188:	2300      	movs	r3, #0
 800418a:	613b      	str	r3, [r7, #16]
                break;
 800418c:	e005      	b.n	800419a <eth_chip_init+0x126>
        for (addr = 0; addr <= ETH_CHIP_MAX_DEV_ADDR; addr ++)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	3301      	adds	r3, #1
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	2b1f      	cmp	r3, #31
 8004198:	d9dd      	bls.n	8004156 <eth_chip_init+0xe2>
            }
        }

        /* �ж����PHY��ַ�Ƿ����32��2^5��*/
        if (pobj->devaddr > ETH_CHIP_MAX_DEV_ADDR)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b1f      	cmp	r3, #31
 80041a0:	d902      	bls.n	80041a8 <eth_chip_init+0x134>
        {
            status = ETH_CHIP_STATUS_ADDRESS_ERROR;
 80041a2:	f06f 0302 	mvn.w	r3, #2
 80041a6:	613b      	str	r3, [r7, #16]
        }

        /* ���PHY��ַ��Ч */
        if (status == ETH_CHIP_STATUS_OK)
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d145      	bne.n	800423a <eth_chip_init+0x1c6>
        {
            /* ����������λ  */
            if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, ETH_CHIP_BCR_SOFT_RESET) >= 0)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6810      	ldr	r0, [r2, #0]
 80041b6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80041ba:	2100      	movs	r1, #0
 80041bc:	4798      	blx	r3
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	db37      	blt.n	8004234 <eth_chip_init+0x1c0>
            {
                /* ��ȡ��������״̬ */
                if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &regvalue) >= 0)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6810      	ldr	r0, [r2, #0]
 80041cc:	f107 0208 	add.w	r2, r7, #8
 80041d0:	2100      	movs	r1, #0
 80041d2:	4798      	blx	r3
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	db28      	blt.n	800422c <eth_chip_init+0x1b8>
                {
                    tickstart = pobj->io.gettick();
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	4798      	blx	r3
 80041e0:	4603      	mov	r3, r0
 80041e2:	60fb      	str	r3, [r7, #12]

                    /* �ȴ�������λ��ɻ�ʱ  */
                    while (regvalue & ETH_CHIP_BCR_SOFT_RESET)
 80041e4:	e01c      	b.n	8004220 <eth_chip_init+0x1ac>
                    {
                        if ((pobj->io.gettick() - tickstart) <= ETH_CHIP_SW_RESET_TO)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	4798      	blx	r3
 80041ec:	4603      	mov	r3, r0
 80041ee:	461a      	mov	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80041f8:	d80e      	bhi.n	8004218 <eth_chip_init+0x1a4>
                        {
                            if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &regvalue) < 0)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6810      	ldr	r0, [r2, #0]
 8004202:	f107 0208 	add.w	r2, r7, #8
 8004206:	2100      	movs	r1, #0
 8004208:	4798      	blx	r3
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	da07      	bge.n	8004220 <eth_chip_init+0x1ac>
                            {
                                status = ETH_CHIP_STATUS_READ_ERROR;
 8004210:	f06f 0304 	mvn.w	r3, #4
 8004214:	613b      	str	r3, [r7, #16]
                                break;
 8004216:	e010      	b.n	800423a <eth_chip_init+0x1c6>
                            }
                        }
                        else
                        {
                            status = ETH_CHIP_STATUS_RESET_TIMEOUT;
 8004218:	f06f 0301 	mvn.w	r3, #1
 800421c:	613b      	str	r3, [r7, #16]
                            break;
 800421e:	e00c      	b.n	800423a <eth_chip_init+0x1c6>
                    while (regvalue & ETH_CHIP_BCR_SOFT_RESET)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1dd      	bne.n	80041e6 <eth_chip_init+0x172>
 800422a:	e006      	b.n	800423a <eth_chip_init+0x1c6>
                        }
                    }
                }
                else
                {
                    status = ETH_CHIP_STATUS_READ_ERROR;
 800422c:	f06f 0304 	mvn.w	r3, #4
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	e002      	b.n	800423a <eth_chip_init+0x1c6>
                }
            }
            else
            {
                status = ETH_CHIP_STATUS_WRITE_ERROR;
 8004234:	f06f 0303 	mvn.w	r3, #3
 8004238:	613b      	str	r3, [r7, #16]
            }
        }
    }

    /* ���������ʼ����ɣ����� */
    if (status == ETH_CHIP_STATUS_OK)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d112      	bne.n	8004266 <eth_chip_init+0x1f2>
    {
        tickstart =  pobj->io.gettick();
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	4798      	blx	r3
 8004246:	4603      	mov	r3, r0
 8004248:	60fb      	str	r3, [r7, #12]

        /* �ȴ�2s���г�ʼ�� */
        while ((pobj->io.gettick() - tickstart) <= ETH_CHIP_INIT_TO)
 800424a:	bf00      	nop
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	4798      	blx	r3
 8004252:	4603      	mov	r3, r0
 8004254:	461a      	mov	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800425e:	d9f5      	bls.n	800424c <eth_chip_init+0x1d8>
        {
        }
        pobj->is_initialized = 1;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	605a      	str	r2, [r3, #4]
    }

    return status;
 8004266:	693b      	ldr	r3, [r7, #16]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	200007c8 	.word	0x200007c8
 8004274:	200007ca 	.word	0x200007ca
 8004278:	200007cc 	.word	0x200007cc
 800427c:	200007c4 	.word	0x200007c4

08004280 <eth_chip_disable_power_down_mode>:
  * @retval      ETH_CHIP_STATUS_OK���رճɹ�
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д�Ĵ���
  */
int32_t eth_chip_disable_power_down_mode(eth_chip_object_t *pobj)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	60bb      	str	r3, [r7, #8]
    int32_t status = ETH_CHIP_STATUS_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]

    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &readval) >= 0)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6810      	ldr	r0, [r2, #0]
 8004298:	f107 0208 	add.w	r2, r7, #8
 800429c:	2100      	movs	r1, #0
 800429e:	4798      	blx	r3
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	db11      	blt.n	80042ca <eth_chip_disable_power_down_mode+0x4a>
    {
        readval &= ~ETH_CHIP_BCR_POWER_DOWN;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042ac:	60bb      	str	r3, [r7, #8]

        /* ����µ�ģʽ */
        if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, readval) < 0)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6810      	ldr	r0, [r2, #0]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	2100      	movs	r1, #0
 80042ba:	4798      	blx	r3
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	da06      	bge.n	80042d0 <eth_chip_disable_power_down_mode+0x50>
        {
            status =  ETH_CHIP_STATUS_WRITE_ERROR;
 80042c2:	f06f 0303 	mvn.w	r3, #3
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	e002      	b.n	80042d0 <eth_chip_disable_power_down_mode+0x50>
        }
    }
    else
    {
        status = ETH_CHIP_STATUS_READ_ERROR;
 80042ca:	f06f 0304 	mvn.w	r3, #4
 80042ce:	60fb      	str	r3, [r7, #12]
    }

    return status;
 80042d0:	68fb      	ldr	r3, [r7, #12]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <eth_chip_start_auto_nego>:
  * @retval      ETH_CHIP_STATUS_OK���رճɹ�
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д�Ĵ���
  */
int32_t eth_chip_start_auto_nego(eth_chip_object_t *pobj)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b084      	sub	sp, #16
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	60bb      	str	r3, [r7, #8]
    int32_t status = ETH_CHIP_STATUS_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]

    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &readval) >= 0)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6810      	ldr	r0, [r2, #0]
 80042f2:	f107 0208 	add.w	r2, r7, #8
 80042f6:	2100      	movs	r1, #0
 80042f8:	4798      	blx	r3
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	db11      	blt.n	8004324 <eth_chip_start_auto_nego+0x4a>
    {
        readval |= ETH_CHIP_BCR_AUTONEGO_EN;
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004306:	60bb      	str	r3, [r7, #8]

        /* �����Զ�Э�� */
        if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, readval) < 0)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6810      	ldr	r0, [r2, #0]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	2100      	movs	r1, #0
 8004314:	4798      	blx	r3
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	da06      	bge.n	800432a <eth_chip_start_auto_nego+0x50>
        {
            status =  ETH_CHIP_STATUS_WRITE_ERROR;
 800431c:	f06f 0303 	mvn.w	r3, #3
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	e002      	b.n	800432a <eth_chip_start_auto_nego+0x50>
        }
    }
    else
    {
        status = ETH_CHIP_STATUS_READ_ERROR;
 8004324:	f06f 0304 	mvn.w	r3, #4
 8004328:	60fb      	str	r3, [r7, #12]
    }

    return status;
 800432a:	68fb      	ldr	r3, [r7, #12]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <eth_chip_get_link_state>:
                 ETH_CHIP_STATUS_10MBITS_FULLDUPLEX��10M��ȫ˫��
                 ETH_CHIP_STATUS_10MBITS_HALFDUPLEX ��10M����˫��
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
  */
int32_t eth_chip_get_link_state(eth_chip_object_t *pobj)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]

    /* ������⹦�ܼĴ�������ֵ */
    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_PHYSCSR, &readval) < 0)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6810      	ldr	r0, [r2, #0]
 8004348:	4a1a      	ldr	r2, [pc, #104]	@ (80043b4 <eth_chip_get_link_state+0x80>)
 800434a:	8812      	ldrh	r2, [r2, #0]
 800434c:	4611      	mov	r1, r2
 800434e:	f107 020c 	add.w	r2, r7, #12
 8004352:	4798      	blx	r3
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	da02      	bge.n	8004360 <eth_chip_get_link_state+0x2c>
    {
        return ETH_CHIP_STATUS_READ_ERROR;
 800435a:	f06f 0304 	mvn.w	r3, #4
 800435e:	e024      	b.n	80043aa <eth_chip_get_link_state+0x76>
    }

    if (((readval & ETH_CHIP_SPEED_STATUS) != ETH_CHIP_SPEED_STATUS) && ((readval & ETH_CHIP_DUPLEX_STATUS) != 0))
 8004360:	4b15      	ldr	r3, [pc, #84]	@ (80043b8 <eth_chip_get_link_state+0x84>)
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	461a      	mov	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4013      	ands	r3, r2
 800436a:	4a13      	ldr	r2, [pc, #76]	@ (80043b8 <eth_chip_get_link_state+0x84>)
 800436c:	8812      	ldrh	r2, [r2, #0]
 800436e:	4293      	cmp	r3, r2
 8004370:	d008      	beq.n	8004384 <eth_chip_get_link_state+0x50>
 8004372:	4b12      	ldr	r3, [pc, #72]	@ (80043bc <eth_chip_get_link_state+0x88>)
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	461a      	mov	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <eth_chip_get_link_state+0x50>
    {
        return ETH_CHIP_STATUS_100MBITS_FULLDUPLEX;
 8004380:	2302      	movs	r3, #2
 8004382:	e012      	b.n	80043aa <eth_chip_get_link_state+0x76>
    }
    else if (((readval & ETH_CHIP_SPEED_STATUS) != ETH_CHIP_SPEED_STATUS))
 8004384:	4b0c      	ldr	r3, [pc, #48]	@ (80043b8 <eth_chip_get_link_state+0x84>)
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4013      	ands	r3, r2
 800438e:	4a0a      	ldr	r2, [pc, #40]	@ (80043b8 <eth_chip_get_link_state+0x84>)
 8004390:	8812      	ldrh	r2, [r2, #0]
 8004392:	4293      	cmp	r3, r2
 8004394:	d001      	beq.n	800439a <eth_chip_get_link_state+0x66>
    {
        return ETH_CHIP_STATUS_100MBITS_HALFDUPLEX;
 8004396:	2303      	movs	r3, #3
 8004398:	e007      	b.n	80043aa <eth_chip_get_link_state+0x76>
    }
    else if (((readval & ETH_CHIP_BCR_DUPLEX_MODE) != ETH_CHIP_BCR_DUPLEX_MODE))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <eth_chip_get_link_state+0x74>
    {
        return ETH_CHIP_STATUS_10MBITS_FULLDUPLEX;
 80043a4:	2304      	movs	r3, #4
 80043a6:	e000      	b.n	80043aa <eth_chip_get_link_state+0x76>
    }
    else
    {
        return ETH_CHIP_STATUS_10MBITS_HALFDUPLEX;
 80043a8:	2305      	movs	r3, #5
    }
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	200007c8 	.word	0x200007c8
 80043b8:	200007ca 	.word	0x200007ca
 80043bc:	200007cc 	.word	0x200007cc

080043c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004400 <HAL_Init+0x40>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004400 <HAL_Init+0x40>)
 80043ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004400 <HAL_Init+0x40>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004400 <HAL_Init+0x40>)
 80043d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043dc:	4b08      	ldr	r3, [pc, #32]	@ (8004400 <HAL_Init+0x40>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a07      	ldr	r2, [pc, #28]	@ (8004400 <HAL_Init+0x40>)
 80043e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043e8:	2003      	movs	r0, #3
 80043ea:	f000 f8fc 	bl	80045e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043ee:	200f      	movs	r0, #15
 80043f0:	f7ff f872 	bl	80034d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043f4:	f7ff f844 	bl	8003480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40023c00 	.word	0x40023c00

08004404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004408:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <HAL_IncTick+0x20>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	4b06      	ldr	r3, [pc, #24]	@ (8004428 <HAL_IncTick+0x24>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4413      	add	r3, r2
 8004414:	4a04      	ldr	r2, [pc, #16]	@ (8004428 <HAL_IncTick+0x24>)
 8004416:	6013      	str	r3, [r2, #0]
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20000008 	.word	0x20000008
 8004428:	200007d0 	.word	0x200007d0

0800442c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  return uwTick;
 8004430:	4b03      	ldr	r3, [pc, #12]	@ (8004440 <HAL_GetTick+0x14>)
 8004432:	681b      	ldr	r3, [r3, #0]
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	200007d0 	.word	0x200007d0

08004444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800444c:	f7ff ffee 	bl	800442c <HAL_GetTick>
 8004450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445c:	d005      	beq.n	800446a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800445e:	4b0a      	ldr	r3, [pc, #40]	@ (8004488 <HAL_Delay+0x44>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800446a:	bf00      	nop
 800446c:	f7ff ffde 	bl	800442c <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	429a      	cmp	r2, r3
 800447a:	d8f7      	bhi.n	800446c <HAL_Delay+0x28>
  {
  }
}
 800447c:	bf00      	nop
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000008 	.word	0x20000008

0800448c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800449c:	4b0c      	ldr	r3, [pc, #48]	@ (80044d0 <__NVIC_SetPriorityGrouping+0x44>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044a8:	4013      	ands	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044be:	4a04      	ldr	r2, [pc, #16]	@ (80044d0 <__NVIC_SetPriorityGrouping+0x44>)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	60d3      	str	r3, [r2, #12]
}
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	e000ed00 	.word	0xe000ed00

080044d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d8:	4b04      	ldr	r3, [pc, #16]	@ (80044ec <__NVIC_GetPriorityGrouping+0x18>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	0a1b      	lsrs	r3, r3, #8
 80044de:	f003 0307 	and.w	r3, r3, #7
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	e000ed00 	.word	0xe000ed00

080044f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	db0b      	blt.n	800451a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	f003 021f 	and.w	r2, r3, #31
 8004508:	4907      	ldr	r1, [pc, #28]	@ (8004528 <__NVIC_EnableIRQ+0x38>)
 800450a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	2001      	movs	r0, #1
 8004512:	fa00 f202 	lsl.w	r2, r0, r2
 8004516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	e000e100 	.word	0xe000e100

0800452c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	6039      	str	r1, [r7, #0]
 8004536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453c:	2b00      	cmp	r3, #0
 800453e:	db0a      	blt.n	8004556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	b2da      	uxtb	r2, r3
 8004544:	490c      	ldr	r1, [pc, #48]	@ (8004578 <__NVIC_SetPriority+0x4c>)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	0112      	lsls	r2, r2, #4
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	440b      	add	r3, r1
 8004550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004554:	e00a      	b.n	800456c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4908      	ldr	r1, [pc, #32]	@ (800457c <__NVIC_SetPriority+0x50>)
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	3b04      	subs	r3, #4
 8004564:	0112      	lsls	r2, r2, #4
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	440b      	add	r3, r1
 800456a:	761a      	strb	r2, [r3, #24]
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	e000e100 	.word	0xe000e100
 800457c:	e000ed00 	.word	0xe000ed00

08004580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004580:	b480      	push	{r7}
 8004582:	b089      	sub	sp, #36	@ 0x24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f1c3 0307 	rsb	r3, r3, #7
 800459a:	2b04      	cmp	r3, #4
 800459c:	bf28      	it	cs
 800459e:	2304      	movcs	r3, #4
 80045a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3304      	adds	r3, #4
 80045a6:	2b06      	cmp	r3, #6
 80045a8:	d902      	bls.n	80045b0 <NVIC_EncodePriority+0x30>
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3b03      	subs	r3, #3
 80045ae:	e000      	b.n	80045b2 <NVIC_EncodePriority+0x32>
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b4:	f04f 32ff 	mov.w	r2, #4294967295
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43da      	mvns	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	401a      	ands	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c8:	f04f 31ff 	mov.w	r1, #4294967295
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	fa01 f303 	lsl.w	r3, r1, r3
 80045d2:	43d9      	mvns	r1, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d8:	4313      	orrs	r3, r2
         );
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3724      	adds	r7, #36	@ 0x24
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff ff4c 	bl	800448c <__NVIC_SetPriorityGrouping>
}
 80045f4:	bf00      	nop
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800460e:	f7ff ff61 	bl	80044d4 <__NVIC_GetPriorityGrouping>
 8004612:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	6978      	ldr	r0, [r7, #20]
 800461a:	f7ff ffb1 	bl	8004580 <NVIC_EncodePriority>
 800461e:	4602      	mov	r2, r0
 8004620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004624:	4611      	mov	r1, r2
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff ff80 	bl	800452c <__NVIC_SetPriority>
}
 800462c:	bf00      	nop
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800463e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff ff54 	bl	80044f0 <__NVIC_EnableIRQ>
}
 8004648:	bf00      	nop
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e08a      	b.n	8004778 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004668:	2b00      	cmp	r3, #0
 800466a:	d106      	bne.n	800467a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7fe fddf 	bl	8003238 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800467a:	2300      	movs	r3, #0
 800467c:	60bb      	str	r3, [r7, #8]
 800467e:	4b40      	ldr	r3, [pc, #256]	@ (8004780 <HAL_ETH_Init+0x130>)
 8004680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004682:	4a3f      	ldr	r2, [pc, #252]	@ (8004780 <HAL_ETH_Init+0x130>)
 8004684:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004688:	6453      	str	r3, [r2, #68]	@ 0x44
 800468a:	4b3d      	ldr	r3, [pc, #244]	@ (8004780 <HAL_ETH_Init+0x130>)
 800468c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004692:	60bb      	str	r3, [r7, #8]
 8004694:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004696:	4b3b      	ldr	r3, [pc, #236]	@ (8004784 <HAL_ETH_Init+0x134>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	4a3a      	ldr	r2, [pc, #232]	@ (8004784 <HAL_ETH_Init+0x134>)
 800469c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80046a0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80046a2:	4b38      	ldr	r3, [pc, #224]	@ (8004784 <HAL_ETH_Init+0x134>)
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	4936      	ldr	r1, [pc, #216]	@ (8004784 <HAL_ETH_Init+0x134>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80046b0:	4b34      	ldr	r3, [pc, #208]	@ (8004784 <HAL_ETH_Init+0x134>)
 80046b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6812      	ldr	r2, [r2, #0]
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80046ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046cc:	f7ff feae 	bl	800442c <HAL_GetTick>
 80046d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80046d2:	e011      	b.n	80046f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80046d4:	f7ff feaa 	bl	800442c <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80046e2:	d909      	bls.n	80046f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2204      	movs	r2, #4
 80046e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	22e0      	movs	r2, #224	@ 0xe0
 80046f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e03f      	b.n	8004778 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e4      	bne.n	80046d4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 ff16 	bl	800553c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 ffc1 	bl	8005698 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f001 f817 	bl	800574a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	461a      	mov	r2, r3
 8004722:	2100      	movs	r1, #0
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 ff7f 	bl	8005628 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8004738:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800474a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800474e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8004762:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2210      	movs	r2, #16
 8004772:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40023800 	.word	0x40023800
 8004784:	40013800 	.word	0x40013800

08004788 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004796:	2b10      	cmp	r3, #16
 8004798:	d161      	bne.n	800485e <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2204      	movs	r2, #4
 80047ac:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f9f4 	bl	8004b9c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80047bc:	2001      	movs	r0, #1
 80047be:	f7ff fe41 	bl	8004444 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6812      	ldr	r2, [r2, #0]
 80047d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80047dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80047e0:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6812      	ldr	r2, [r2, #0]
 80047f0:	f043 0302 	orr.w	r3, r3, #2
 80047f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80047f8:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 fd3b 	bl	8005276 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0208 	orr.w	r2, r2, #8
 800480e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004818:	2001      	movs	r0, #1
 800481a:	f7ff fe13 	bl	8004444 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f042 0204 	orr.w	r2, r2, #4
 8004834:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8004848:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 800484c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004850:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2240      	movs	r2, #64	@ 0x40
 8004856:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	e000      	b.n	8004860 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
  }
}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004876:	2b40      	cmp	r3, #64	@ 0x40
 8004878:	d170      	bne.n	800495c <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8004894:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8004898:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800489c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80048b4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6812      	ldr	r2, [r2, #0]
 80048c4:	f023 0302 	bic.w	r3, r3, #2
 80048c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80048cc:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0204 	bic.w	r2, r2, #4
 80048dc:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80048e6:	2001      	movs	r0, #1
 80048e8:	f7ff fdac 	bl	8004444 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fcbe 	bl	8005276 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0208 	bic.w	r2, r2, #8
 8004908:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004912:	2001      	movs	r0, #1
 8004914:	f7ff fd96 	bl	8004444 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	e00e      	b.n	8004944 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	3212      	adds	r2, #18
 800492c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004930:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	3301      	adds	r3, #1
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d9ed      	bls.n	8004926 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2210      	movs	r2, #16
 8004954:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	e000      	b.n	800495e <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
  }
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800497c:	f043 0201 	orr.w	r2, r3, #1
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e045      	b.n	8004a16 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004990:	2b40      	cmp	r3, #64	@ 0x40
 8004992:	d13f      	bne.n	8004a14 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800499c:	2201      	movs	r2, #1
 800499e:	6839      	ldr	r1, [r7, #0]
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 ff41 	bl	8005828 <ETH_Prepare_Tx_Descriptors>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d009      	beq.n	80049c0 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b2:	f043 0202 	orr.w	r2, r3, #2
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e02a      	b.n	8004a16 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80049c0:	f3bf 8f4f 	dsb	sy
}
 80049c4:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d904      	bls.n	80049e2 <HAL_ETH_Transmit_IT+0x7c>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049dc:	1f1a      	subs	r2, r3, #4
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00d      	beq.n	8004a10 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049fc:	461a      	mov	r2, r3
 80049fe:	2304      	movs	r3, #4
 8004a00:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e000      	b.n	8004a16 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
  }
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b088      	sub	sp, #32
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d109      	bne.n	8004a4a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3c:	f043 0201 	orr.w	r2, r3, #1
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e0a4      	b.n	8004b94 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a50:	2b40      	cmp	r3, #64	@ 0x40
 8004a52:	d001      	beq.n	8004a58 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e09d      	b.n	8004b94 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	3212      	adds	r2, #18
 8004a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a68:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a6e:	f1c3 0304 	rsb	r3, r3, #4
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004a74:	e066      	b.n	8004b44 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d007      	beq.n	8004a92 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	69da      	ldr	r2, [r3, #28]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d103      	bne.n	8004aa6 <HAL_ETH_ReadData+0x88>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d03c      	beq.n	8004b20 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	0c1b      	lsrs	r3, r3, #16
 8004ac4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004ac8:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d005      	beq.n	8004ae2 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004afa:	461a      	mov	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	f006 ff0e 	bl	800b920 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	441a      	add	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	3301      	adds	r3, #1
 8004b24:	61fb      	str	r3, [r7, #28]
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d902      	bls.n	8004b32 <HAL_ETH_ReadData+0x114>
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	3b04      	subs	r3, #4
 8004b30:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69fa      	ldr	r2, [r7, #28]
 8004b36:	3212      	adds	r2, #18
 8004b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b3c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	3301      	adds	r3, #1
 8004b42:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	db06      	blt.n	8004b5a <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d202      	bcs.n	8004b5a <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8004b54:	7cfb      	ldrb	r3, [r7, #19]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d08d      	beq.n	8004a76 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	441a      	add	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f814 	bl	8004b9c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	69fa      	ldr	r2, [r7, #28]
 8004b78:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8004b7a:	7cfb      	ldrb	r3, [r7, #19]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d108      	bne.n	8004b92 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e000      	b.n	8004b94 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3720      	adds	r7, #32
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bb0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	3212      	adds	r2, #18
 8004bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bbc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bc2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004bc4:	e044      	b.n	8004c50 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d112      	bne.n	8004bf4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004bce:	f107 0308 	add.w	r3, r7, #8
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f006 fe74 	bl	800b8c0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d102      	bne.n	8004be4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	74fb      	strb	r3, [r7, #19]
 8004be2:	e007      	b.n	8004bf4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	461a      	mov	r2, r3
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004bf4:	7cfb      	ldrb	r3, [r7, #19]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d02a      	beq.n	8004c50 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d108      	bne.n	8004c14 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	6053      	str	r3, [r2, #4]
 8004c12:	e005      	b.n	8004c20 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	61fb      	str	r3, [r7, #28]
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d902      	bls.n	8004c3e <ETH_UpdateDescriptor+0xa2>
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	3b04      	subs	r3, #4
 8004c3c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69fa      	ldr	r2, [r7, #28]
 8004c42:	3212      	adds	r2, #18
 8004c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c48:	617b      	str	r3, [r7, #20]
      desccount--;
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <ETH_UpdateDescriptor+0xc0>
 8004c56:	7cfb      	ldrb	r3, [r7, #19]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1b4      	bne.n	8004bc6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d01a      	beq.n	8004c9c <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	3303      	adds	r3, #3
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004c70:	f3bf 8f5f 	dmb	sy
}
 8004c74:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6919      	ldr	r1, [r3, #16]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	18ca      	adds	r2, r1, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c8e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004c9c:	bf00      	nop
 8004c9e:	3720      	adds	r7, #32
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3318      	adds	r3, #24
 8004cb0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbc:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004cc2:	e047      	b.n	8004d54 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10a      	bne.n	8004cf4 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	613b      	str	r3, [r7, #16]
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d902      	bls.n	8004cf0 <HAL_ETH_ReleaseTxPacket+0x4c>
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	3b04      	subs	r3, #4
 8004cee:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004cf4:	7bbb      	ldrb	r3, [r7, #14]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d02c      	beq.n	8004d54 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68d9      	ldr	r1, [r3, #12]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	440b      	add	r3, r1
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	db1f      	blt.n	8004d50 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	3304      	adds	r3, #4
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f006 fe3f 	bl	800b9a0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	3304      	adds	r3, #4
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	3301      	adds	r3, #1
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d902      	bls.n	8004d42 <HAL_ETH_ReleaseTxPacket+0x9e>
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	3b04      	subs	r3, #4
 8004d40:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004d4e:	e001      	b.n	8004d54 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_ETH_ReleaseTxPacket+0xbc>
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1b1      	bne.n	8004cc4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7a:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8004d94:	4b4b      	ldr	r3, [pc, #300]	@ (8004ec4 <HAL_ETH_IRQHandler+0x158>)
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00e      	beq.n	8004dc2 <HAL_ETH_IRQHandler+0x56>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d009      	beq.n	8004dc2 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004db6:	461a      	mov	r2, r3
 8004db8:	4b43      	ldr	r3, [pc, #268]	@ (8004ec8 <HAL_ETH_IRQHandler+0x15c>)
 8004dba:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f005 fee5 	bl	800ab8c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00f      	beq.n	8004dec <HAL_ETH_IRQHandler+0x80>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dde:	461a      	mov	r2, r3
 8004de0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004de4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f005 fee0 	bl	800abac <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d042      	beq.n	8004e7c <HAL_ETH_IRQHandler+0x110>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d03d      	beq.n	8004e7c <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e06:	f043 0208 	orr.w	r2, r3, #8
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d01a      	beq.n	8004e50 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e22:	695a      	ldr	r2, [r3, #20]
 8004e24:	4b29      	ldr	r3, [pc, #164]	@ (8004ecc <HAL_ETH_IRQHandler+0x160>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8004e40:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004e44:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	22e0      	movs	r2, #224	@ 0xe0
 8004e4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004e4e:	e012      	b.n	8004e76 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004e5e:	4013      	ands	r3, r2
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004e74:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f005 fea8 	bl	800abcc <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00e      	beq.n	8004ea4 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f81a 	bl	8004ed0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d006      	beq.n	8004ebc <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004eae:	4b05      	ldr	r3, [pc, #20]	@ (8004ec4 <HAL_ETH_IRQHandler+0x158>)
 8004eb0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004eb4:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f814 	bl	8004ee4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004ebc:	bf00      	nop
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40013c00 	.word	0x40013c00
 8004ec8:	00010040 	.word	0x00010040
 8004ecc:	007e2000 	.word	0x007e2000

08004ed0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f003 031c 	and.w	r3, r3, #28
 8004f14:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	02db      	lsls	r3, r3, #11
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	019b      	lsls	r3, r3, #6
 8004f26:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f023 0302 	bic.w	r3, r3, #2
 8004f36:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f043 0301 	orr.w	r3, r3, #1
 8004f3e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004f48:	f7ff fa70 	bl	800442c <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004f4e:	e00d      	b.n	8004f6c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004f50:	f7ff fa6c 	bl	800442c <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f5e:	d301      	bcc.n	8004f64 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e010      	b.n	8004f86 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1ec      	bne.n	8004f50 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b086      	sub	sp, #24
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	607a      	str	r2, [r7, #4]
 8004f9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f003 031c 	and.w	r3, r3, #28
 8004faa:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	02db      	lsls	r3, r3, #11
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	019b      	lsls	r3, r3, #6
 8004fbc:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f043 0302 	orr.w	r3, r3, #2
 8004fcc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f043 0301 	orr.w	r3, r3, #1
 8004fd4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fe8:	f7ff fa20 	bl	800442c <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004fee:	e00d      	b.n	800500c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004ff0:	f7ff fa1c 	bl	800442c <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ffe:	d301      	bcc.n	8005004 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e009      	b.n	8005018 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1ec      	bne.n	8004ff0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0e6      	b.n	8005202 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0310 	and.w	r3, r3, #16
 800503e:	2b00      	cmp	r3, #0
 8005040:	bf14      	ite	ne
 8005042:	2301      	movne	r3, #1
 8005044:	2300      	moveq	r3, #0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	461a      	mov	r2, r3
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005068:	2b00      	cmp	r3, #0
 800506a:	bf0c      	ite	eq
 800506c:	2301      	moveq	r3, #1
 800506e:	2300      	movne	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	461a      	mov	r2, r3
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8005084:	2b00      	cmp	r3, #0
 8005086:	bf14      	ite	ne
 8005088:	2301      	movne	r3, #1
 800508a:	2300      	moveq	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	bf0c      	ite	eq
 80050a2:	2301      	moveq	r3, #1
 80050a4:	2300      	movne	r3, #0
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	461a      	mov	r2, r3
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	bf14      	ite	ne
 80050bc:	2301      	movne	r3, #1
 80050be:	2300      	moveq	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	461a      	mov	r2, r3
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	bf0c      	ite	eq
 80050f2:	2301      	moveq	r3, #1
 80050f4:	2300      	movne	r3, #0
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	461a      	mov	r2, r3
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005108:	2b00      	cmp	r3, #0
 800510a:	bf0c      	ite	eq
 800510c:	2301      	moveq	r3, #1
 800510e:	2300      	movne	r3, #0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	461a      	mov	r2, r3
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005122:	2b00      	cmp	r3, #0
 8005124:	bf14      	ite	ne
 8005126:	2301      	movne	r3, #1
 8005128:	2300      	moveq	r3, #0
 800512a:	b2db      	uxtb	r3, r3
 800512c:	461a      	mov	r2, r3
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800514a:	2b00      	cmp	r3, #0
 800514c:	bf14      	ite	ne
 800514e:	2301      	movne	r3, #1
 8005150:	2300      	moveq	r3, #0
 8005152:	b2db      	uxtb	r3, r3
 8005154:	461a      	mov	r2, r3
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005164:	2b00      	cmp	r3, #0
 8005166:	bf14      	ite	ne
 8005168:	2301      	movne	r3, #1
 800516a:	2300      	moveq	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	461a      	mov	r2, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	bf14      	ite	ne
 8005182:	2301      	movne	r3, #1
 8005184:	2300      	moveq	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800519a:	2b00      	cmp	r3, #0
 800519c:	bf0c      	ite	eq
 800519e:	2301      	moveq	r3, #1
 80051a0:	2300      	movne	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	461a      	mov	r2, r3
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	0c1b      	lsrs	r3, r3, #16
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bf14      	ite	ne
 80051d6:	2301      	movne	r3, #1
 80051d8:	2300      	moveq	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	461a      	mov	r2, r3
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	bf14      	ite	ne
 80051f2:	2301      	movne	r3, #1
 80051f4:	2300      	moveq	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b082      	sub	sp, #8
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e00b      	b.n	800523a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005228:	2b10      	cmp	r3, #16
 800522a:	d105      	bne.n	8005238 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800522c:	6839      	ldr	r1, [r7, #0]
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f846 	bl	80052c0 <ETH_SetMACConfig>

    return HAL_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	e000      	b.n	800523a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
  }
}
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8005250:	4618      	mov	r0, r3
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800526a:	4618      	mov	r0, r3
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b084      	sub	sp, #16
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6812      	ldr	r2, [r2, #0]
 8005290:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005294:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005298:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80052a6:	2001      	movs	r0, #1
 80052a8:	f7ff f8cc 	bl	8004444 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80052b6:	6193      	str	r3, [r2, #24]
}
 80052b8:	bf00      	nop
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4b53      	ldr	r3, [pc, #332]	@ (8005424 <ETH_SetMACConfig+0x164>)
 80052d6:	4013      	ands	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	7b9b      	ldrb	r3, [r3, #14]
 80052de:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	7c12      	ldrb	r2, [r2, #16]
 80052e4:	2a00      	cmp	r2, #0
 80052e6:	d102      	bne.n	80052ee <ETH_SetMACConfig+0x2e>
 80052e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80052ec:	e000      	b.n	80052f0 <ETH_SetMACConfig+0x30>
 80052ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80052f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	7c52      	ldrb	r2, [r2, #17]
 80052f6:	2a00      	cmp	r2, #0
 80052f8:	d102      	bne.n	8005300 <ETH_SetMACConfig+0x40>
 80052fa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80052fe:	e000      	b.n	8005302 <ETH_SetMACConfig+0x42>
 8005300:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005302:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005308:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	7fdb      	ldrb	r3, [r3, #31]
 800530e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005310:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005316:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	7f92      	ldrb	r2, [r2, #30]
 800531c:	2a00      	cmp	r2, #0
 800531e:	d102      	bne.n	8005326 <ETH_SetMACConfig+0x66>
 8005320:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005324:	e000      	b.n	8005328 <ETH_SetMACConfig+0x68>
 8005326:	2200      	movs	r2, #0
                        macconf->Speed |
 8005328:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	7f1b      	ldrb	r3, [r3, #28]
 800532e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005330:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005336:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	791b      	ldrb	r3, [r3, #4]
 800533c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800533e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005346:	2a00      	cmp	r2, #0
 8005348:	d102      	bne.n	8005350 <ETH_SetMACConfig+0x90>
 800534a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800534e:	e000      	b.n	8005352 <ETH_SetMACConfig+0x92>
 8005350:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005352:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	7bdb      	ldrb	r3, [r3, #15]
 8005358:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800535a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005360:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005368:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800536a:	4313      	orrs	r3, r2
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005382:	2001      	movs	r0, #1
 8005384:	f7ff f85e 	bl	8004444 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800539e:	4013      	ands	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053a6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80053ae:	2a00      	cmp	r2, #0
 80053b0:	d101      	bne.n	80053b6 <ETH_SetMACConfig+0xf6>
 80053b2:	2280      	movs	r2, #128	@ 0x80
 80053b4:	e000      	b.n	80053b8 <ETH_SetMACConfig+0xf8>
 80053b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80053b8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80053be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80053c6:	2a01      	cmp	r2, #1
 80053c8:	d101      	bne.n	80053ce <ETH_SetMACConfig+0x10e>
 80053ca:	2208      	movs	r2, #8
 80053cc:	e000      	b.n	80053d0 <ETH_SetMACConfig+0x110>
 80053ce:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80053d0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80053d8:	2a01      	cmp	r2, #1
 80053da:	d101      	bne.n	80053e0 <ETH_SetMACConfig+0x120>
 80053dc:	2204      	movs	r2, #4
 80053de:	e000      	b.n	80053e2 <ETH_SetMACConfig+0x122>
 80053e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80053e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80053ea:	2a01      	cmp	r2, #1
 80053ec:	d101      	bne.n	80053f2 <ETH_SetMACConfig+0x132>
 80053ee:	2202      	movs	r2, #2
 80053f0:	e000      	b.n	80053f4 <ETH_SetMACConfig+0x134>
 80053f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80053f4:	4313      	orrs	r3, r2
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800540c:	2001      	movs	r0, #1
 800540e:	f7ff f819 	bl	8004444 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	619a      	str	r2, [r3, #24]
}
 800541a:	bf00      	nop
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	fd20810f 	.word	0xfd20810f

08005428 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4b3d      	ldr	r3, [pc, #244]	@ (8005538 <ETH_SetDMAConfig+0x110>)
 8005442:	4013      	ands	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	7b1b      	ldrb	r3, [r3, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d102      	bne.n	8005454 <ETH_SetDMAConfig+0x2c>
 800544e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005452:	e000      	b.n	8005456 <ETH_SetDMAConfig+0x2e>
 8005454:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	7b5b      	ldrb	r3, [r3, #13]
 800545a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800545c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	7f52      	ldrb	r2, [r2, #29]
 8005462:	2a00      	cmp	r2, #0
 8005464:	d102      	bne.n	800546c <ETH_SetDMAConfig+0x44>
 8005466:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800546a:	e000      	b.n	800546e <ETH_SetDMAConfig+0x46>
 800546c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800546e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	7b9b      	ldrb	r3, [r3, #14]
 8005474:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005476:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800547c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	7f1b      	ldrb	r3, [r3, #28]
 8005482:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005484:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	7f9b      	ldrb	r3, [r3, #30]
 800548a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800548c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005492:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800549a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800549c:	4313      	orrs	r3, r2
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054ac:	461a      	mov	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80054be:	2001      	movs	r0, #1
 80054c0:	f7fe ffc0 	bl	8004444 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054cc:	461a      	mov	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	791b      	ldrb	r3, [r3, #4]
 80054d6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80054dc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80054e2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80054e8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80054f0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80054f2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80054fa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005500:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6812      	ldr	r2, [r2, #0]
 8005506:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800550a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800550e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800551c:	2001      	movs	r0, #1
 800551e:	f7fe ff91 	bl	8004444 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800552a:	461a      	mov	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6013      	str	r3, [r2, #0]
}
 8005530:	bf00      	nop
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	f8de3f23 	.word	0xf8de3f23

0800553c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b0a6      	sub	sp, #152	@ 0x98
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005544:	2301      	movs	r3, #1
 8005546:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005550:	2300      	movs	r3, #0
 8005552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005554:	2300      	movs	r3, #0
 8005556:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800555a:	2301      	movs	r3, #1
 800555c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005560:	2300      	movs	r3, #0
 8005562:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005566:	2301      	movs	r3, #1
 8005568:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800556c:	2301      	movs	r3, #1
 800556e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005572:	2300      	movs	r3, #0
 8005574:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005578:	2300      	movs	r3, #0
 800557a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800557e:	2300      	movs	r3, #0
 8005580:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005582:	2300      	movs	r3, #0
 8005584:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005588:	2300      	movs	r3, #0
 800558a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800558c:	2300      	movs	r3, #0
 800558e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005592:	2300      	movs	r3, #0
 8005594:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005598:	2300      	movs	r3, #0
 800559a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800559e:	2300      	movs	r3, #0
 80055a0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80055a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80055a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80055aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80055ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80055b0:	2300      	movs	r3, #0
 80055b2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80055b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80055ba:	4619      	mov	r1, r3
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7ff fe7f 	bl	80052c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80055c2:	2301      	movs	r3, #1
 80055c4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80055c6:	2301      	movs	r3, #1
 80055c8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80055ca:	2301      	movs	r3, #1
 80055cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80055d0:	2301      	movs	r3, #1
 80055d2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80055d4:	2300      	movs	r3, #0
 80055d6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80055d8:	2300      	movs	r3, #0
 80055da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80055de:	2300      	movs	r3, #0
 80055e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80055e4:	2300      	movs	r3, #0
 80055e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80055e8:	2301      	movs	r3, #1
 80055ea:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80055ee:	2301      	movs	r3, #1
 80055f0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80055f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80055f6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80055f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80055fc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80055fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005602:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005604:	2301      	movs	r3, #1
 8005606:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800560a:	2300      	movs	r3, #0
 800560c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800560e:	2300      	movs	r3, #0
 8005610:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005612:	f107 0308 	add.w	r3, r7, #8
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff ff05 	bl	8005428 <ETH_SetDMAConfig>
}
 800561e:	bf00      	nop
 8005620:	3798      	adds	r7, #152	@ 0x98
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
	...

08005628 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	3305      	adds	r3, #5
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	021b      	lsls	r3, r3, #8
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	3204      	adds	r2, #4
 8005640:	7812      	ldrb	r2, [r2, #0]
 8005642:	4313      	orrs	r3, r2
 8005644:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	4b11      	ldr	r3, [pc, #68]	@ (8005690 <ETH_MACAddressConfig+0x68>)
 800564a:	4413      	add	r3, r2
 800564c:	461a      	mov	r2, r3
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	3303      	adds	r3, #3
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	061a      	lsls	r2, r3, #24
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3302      	adds	r3, #2
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	041b      	lsls	r3, r3, #16
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3301      	adds	r3, #1
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	021b      	lsls	r3, r3, #8
 800566c:	4313      	orrs	r3, r2
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	7812      	ldrb	r2, [r2, #0]
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	4b06      	ldr	r3, [pc, #24]	@ (8005694 <ETH_MACAddressConfig+0x6c>)
 800567a:	4413      	add	r3, r2
 800567c:	461a      	mov	r2, r3
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	6013      	str	r3, [r2, #0]
}
 8005682:	bf00      	nop
 8005684:	371c      	adds	r7, #28
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40028040 	.word	0x40028040
 8005694:	40028044 	.word	0x40028044

08005698 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	e03e      	b.n	8005724 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68d9      	ldr	r1, [r3, #12]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	440b      	add	r3, r1
 80056b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2200      	movs	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2200      	movs	r2, #0
 80056c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2200      	movs	r2, #0
 80056c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2200      	movs	r2, #0
 80056ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	3206      	adds	r2, #6
 80056d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d80c      	bhi.n	8005708 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68d9      	ldr	r1, [r3, #12]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	1c5a      	adds	r2, r3, #1
 80056f6:	4613      	mov	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	440b      	add	r3, r1
 8005700:	461a      	mov	r2, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	60da      	str	r2, [r3, #12]
 8005706:	e004      	b.n	8005712 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	461a      	mov	r2, r3
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3301      	adds	r3, #1
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b03      	cmp	r3, #3
 8005728:	d9bd      	bls.n	80056a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800573c:	611a      	str	r2, [r3, #16]
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	e048      	b.n	80057ea <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6919      	ldr	r1, [r3, #16]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	440b      	add	r3, r1
 8005768:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2200      	movs	r2, #0
 8005774:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2200      	movs	r2, #0
 800577a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2200      	movs	r2, #0
 8005780:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2200      	movs	r2, #0
 8005786:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2200      	movs	r2, #0
 800578c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005794:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80057ae:	68b9      	ldr	r1, [r7, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	3212      	adds	r2, #18
 80057b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d80c      	bhi.n	80057da <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6919      	ldr	r1, [r3, #16]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	440b      	add	r3, r1
 80057d2:	461a      	mov	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	60da      	str	r2, [r3, #12]
 80057d8:	e004      	b.n	80057e4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	461a      	mov	r2, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3301      	adds	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d9b3      	bls.n	8005758 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691a      	ldr	r2, [r3, #16]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800581a:	60da      	str	r2, [r3, #12]
}
 800581c:	bf00      	nop
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8005828:	b480      	push	{r7}
 800582a:	b091      	sub	sp, #68	@ 0x44
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3318      	adds	r3, #24
 8005838:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800583a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005846:	2300      	movs	r3, #0
 8005848:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800584a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800584e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005852:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800585a:	2300      	movs	r3, #0
 800585c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005866:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800586a:	d007      	beq.n	800587c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800586c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800586e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005870:	3304      	adds	r3, #4
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800587c:	2302      	movs	r3, #2
 800587e:	e115      	b.n	8005aac <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8005880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005882:	3301      	adds	r3, #1
 8005884:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8005898:	f023 031f 	bic.w	r3, r3, #31
 800589c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800589e:	6852      	ldr	r2, [r2, #4]
 80058a0:	431a      	orrs	r2, r3
 80058a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d008      	beq.n	80058c4 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80058b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	431a      	orrs	r2, r3
 80058c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80058d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	431a      	orrs	r2, r3
 80058de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0304 	and.w	r3, r3, #4
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d005      	beq.n	80058fa <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80058ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80058fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005904:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005906:	e084      	b.n	8005a12 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005912:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d006      	beq.n	8005928 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800591a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	e005      	b.n	8005934 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005932:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005936:	3301      	adds	r3, #1
 8005938:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800593a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800593c:	2b03      	cmp	r3, #3
 800593e:	d902      	bls.n	8005946 <ETH_Prepare_Tx_Descriptors+0x11e>
 8005940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005942:	3b04      	subs	r3, #4
 8005944:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800594a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800594e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005958:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800595c:	d007      	beq.n	800596e <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800595e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005962:	3304      	adds	r3, #4
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d029      	beq.n	80059c2 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800597a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800597c:	2300      	movs	r3, #0
 800597e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005980:	e019      	b.n	80059b6 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8005982:	f3bf 8f5f 	dmb	sy
}
 8005986:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005992:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005996:	3301      	adds	r3, #1
 8005998:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800599a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800599c:	2b03      	cmp	r3, #3
 800599e:	d902      	bls.n	80059a6 <ETH_Prepare_Tx_Descriptors+0x17e>
 80059a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059a2:	3b04      	subs	r3, #4
 80059a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80059a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80059aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ae:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80059b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b2:	3301      	adds	r3, #1
 80059b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d3e1      	bcc.n	8005982 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 80059be:	2302      	movs	r3, #2
 80059c0:	e074      	b.n	8005aac <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80059c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80059ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059cc:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80059ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d0:	3301      	adds	r3, #1
 80059d2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80059d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80059da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	461a      	mov	r2, r3
 80059e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e2:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80059e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80059ec:	f023 031f 	bic.w	r3, r3, #31
 80059f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059f2:	6852      	ldr	r2, [r2, #4]
 80059f4:	431a      	orrs	r2, r3
 80059f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f8:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80059fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fc:	3301      	adds	r3, #1
 80059fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005a00:	f3bf 8f5f 	dmb	sy
}
 8005a04:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a10:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f47f af76 	bne.w	8005908 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d006      	beq.n	8005a30 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	e005      	b.n	8005a3c <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a46:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4a:	6a3a      	ldr	r2, [r7, #32]
 8005a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a50:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8005a52:	f3bf 8f5f 	dmb	sy
}
 8005a56:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a62:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	440b      	add	r3, r1
 8005a72:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005a78:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a7e:	613b      	str	r3, [r7, #16]
  return(result);
 8005a80:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005a82:	61fb      	str	r3, [r7, #28]
 8005a84:	2301      	movs	r3, #1
 8005a86:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f383 8810 	msr	PRIMASK, r3
}
 8005a8e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a96:	4413      	add	r3, r2
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	f383 8810 	msr	PRIMASK, r3
}
 8005aa8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3744      	adds	r7, #68	@ 0x44
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b089      	sub	sp, #36	@ 0x24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61fb      	str	r3, [r7, #28]
 8005ad2:	e16b      	b.n	8005dac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8005adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	f040 815a 	bne.w	8005da6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d005      	beq.n	8005b0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d130      	bne.n	8005b6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	2203      	movs	r2, #3
 8005b16:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b40:	2201      	movs	r2, #1
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	091b      	lsrs	r3, r3, #4
 8005b56:	f003 0201 	and.w	r2, r3, #1
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f003 0303 	and.w	r3, r3, #3
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d017      	beq.n	8005ba8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	2203      	movs	r2, #3
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f003 0303 	and.w	r3, r3, #3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d123      	bne.n	8005bfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	08da      	lsrs	r2, r3, #3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3208      	adds	r2, #8
 8005bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	220f      	movs	r2, #15
 8005bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd0:	43db      	mvns	r3, r3
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	691a      	ldr	r2, [r3, #16]
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	fa02 f303 	lsl.w	r3, r2, r3
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	08da      	lsrs	r2, r3, #3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3208      	adds	r2, #8
 8005bf6:	69b9      	ldr	r1, [r7, #24]
 8005bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	2203      	movs	r2, #3
 8005c08:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	4013      	ands	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f003 0203 	and.w	r2, r3, #3
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	fa02 f303 	lsl.w	r3, r2, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 80b4 	beq.w	8005da6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	4b60      	ldr	r3, [pc, #384]	@ (8005dc4 <HAL_GPIO_Init+0x30c>)
 8005c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c46:	4a5f      	ldr	r2, [pc, #380]	@ (8005dc4 <HAL_GPIO_Init+0x30c>)
 8005c48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c4e:	4b5d      	ldr	r3, [pc, #372]	@ (8005dc4 <HAL_GPIO_Init+0x30c>)
 8005c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c5a:	4a5b      	ldr	r2, [pc, #364]	@ (8005dc8 <HAL_GPIO_Init+0x310>)
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	089b      	lsrs	r3, r3, #2
 8005c60:	3302      	adds	r3, #2
 8005c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	f003 0303 	and.w	r3, r3, #3
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	220f      	movs	r2, #15
 8005c72:	fa02 f303 	lsl.w	r3, r2, r3
 8005c76:	43db      	mvns	r3, r3
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a52      	ldr	r2, [pc, #328]	@ (8005dcc <HAL_GPIO_Init+0x314>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d02b      	beq.n	8005cde <HAL_GPIO_Init+0x226>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a51      	ldr	r2, [pc, #324]	@ (8005dd0 <HAL_GPIO_Init+0x318>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d025      	beq.n	8005cda <HAL_GPIO_Init+0x222>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a50      	ldr	r2, [pc, #320]	@ (8005dd4 <HAL_GPIO_Init+0x31c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d01f      	beq.n	8005cd6 <HAL_GPIO_Init+0x21e>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a4f      	ldr	r2, [pc, #316]	@ (8005dd8 <HAL_GPIO_Init+0x320>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d019      	beq.n	8005cd2 <HAL_GPIO_Init+0x21a>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a4e      	ldr	r2, [pc, #312]	@ (8005ddc <HAL_GPIO_Init+0x324>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d013      	beq.n	8005cce <HAL_GPIO_Init+0x216>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a4d      	ldr	r2, [pc, #308]	@ (8005de0 <HAL_GPIO_Init+0x328>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00d      	beq.n	8005cca <HAL_GPIO_Init+0x212>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a4c      	ldr	r2, [pc, #304]	@ (8005de4 <HAL_GPIO_Init+0x32c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d007      	beq.n	8005cc6 <HAL_GPIO_Init+0x20e>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a4b      	ldr	r2, [pc, #300]	@ (8005de8 <HAL_GPIO_Init+0x330>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d101      	bne.n	8005cc2 <HAL_GPIO_Init+0x20a>
 8005cbe:	2307      	movs	r3, #7
 8005cc0:	e00e      	b.n	8005ce0 <HAL_GPIO_Init+0x228>
 8005cc2:	2308      	movs	r3, #8
 8005cc4:	e00c      	b.n	8005ce0 <HAL_GPIO_Init+0x228>
 8005cc6:	2306      	movs	r3, #6
 8005cc8:	e00a      	b.n	8005ce0 <HAL_GPIO_Init+0x228>
 8005cca:	2305      	movs	r3, #5
 8005ccc:	e008      	b.n	8005ce0 <HAL_GPIO_Init+0x228>
 8005cce:	2304      	movs	r3, #4
 8005cd0:	e006      	b.n	8005ce0 <HAL_GPIO_Init+0x228>
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e004      	b.n	8005ce0 <HAL_GPIO_Init+0x228>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	e002      	b.n	8005ce0 <HAL_GPIO_Init+0x228>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <HAL_GPIO_Init+0x228>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	69fa      	ldr	r2, [r7, #28]
 8005ce2:	f002 0203 	and.w	r2, r2, #3
 8005ce6:	0092      	lsls	r2, r2, #2
 8005ce8:	4093      	lsls	r3, r2
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cf0:	4935      	ldr	r1, [pc, #212]	@ (8005dc8 <HAL_GPIO_Init+0x310>)
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	089b      	lsrs	r3, r3, #2
 8005cf6:	3302      	adds	r3, #2
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8005dec <HAL_GPIO_Init+0x334>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	43db      	mvns	r3, r3
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d22:	4a32      	ldr	r2, [pc, #200]	@ (8005dec <HAL_GPIO_Init+0x334>)
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d28:	4b30      	ldr	r3, [pc, #192]	@ (8005dec <HAL_GPIO_Init+0x334>)
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	43db      	mvns	r3, r3
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	4013      	ands	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d4c:	4a27      	ldr	r2, [pc, #156]	@ (8005dec <HAL_GPIO_Init+0x334>)
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d52:	4b26      	ldr	r3, [pc, #152]	@ (8005dec <HAL_GPIO_Init+0x334>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	43db      	mvns	r3, r3
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d76:	4a1d      	ldr	r2, [pc, #116]	@ (8005dec <HAL_GPIO_Init+0x334>)
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005dec <HAL_GPIO_Init+0x334>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	43db      	mvns	r3, r3
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005da0:	4a12      	ldr	r2, [pc, #72]	@ (8005dec <HAL_GPIO_Init+0x334>)
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	3301      	adds	r3, #1
 8005daa:	61fb      	str	r3, [r7, #28]
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	2b0f      	cmp	r3, #15
 8005db0:	f67f ae90 	bls.w	8005ad4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop
 8005db8:	3724      	adds	r7, #36	@ 0x24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40023800 	.word	0x40023800
 8005dc8:	40013800 	.word	0x40013800
 8005dcc:	40020000 	.word	0x40020000
 8005dd0:	40020400 	.word	0x40020400
 8005dd4:	40020800 	.word	0x40020800
 8005dd8:	40020c00 	.word	0x40020c00
 8005ddc:	40021000 	.word	0x40021000
 8005de0:	40021400 	.word	0x40021400
 8005de4:	40021800 	.word	0x40021800
 8005de8:	40021c00 	.word	0x40021c00
 8005dec:	40013c00 	.word	0x40013c00

08005df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	807b      	strh	r3, [r7, #2]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e00:	787b      	ldrb	r3, [r7, #1]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e06:	887a      	ldrh	r2, [r7, #2]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005e0c:	e003      	b.n	8005e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005e0e:	887b      	ldrh	r3, [r7, #2]
 8005e10:	041a      	lsls	r2, r3, #16
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	619a      	str	r2, [r3, #24]
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b086      	sub	sp, #24
 8005e26:	af02      	add	r7, sp, #8
 8005e28:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e101      	b.n	8006038 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f015 fe88 	bl	801bb64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2203      	movs	r2, #3
 8005e58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e62:	d102      	bne.n	8005e6a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f003 f893 	bl	8008f9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6818      	ldr	r0, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	7c1a      	ldrb	r2, [r3, #16]
 8005e7c:	f88d 2000 	strb.w	r2, [sp]
 8005e80:	3304      	adds	r3, #4
 8005e82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e84:	f002 ff72 	bl	8008d6c <USB_CoreInit>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d005      	beq.n	8005e9a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2202      	movs	r2, #2
 8005e92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e0ce      	b.n	8006038 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f003 f88b 	bl	8008fbc <USB_SetCurrentMode>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e0bf      	b.n	8006038 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005eb8:	2300      	movs	r3, #0
 8005eba:	73fb      	strb	r3, [r7, #15]
 8005ebc:	e04a      	b.n	8005f54 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005ebe:	7bfa      	ldrb	r2, [r7, #15]
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	4413      	add	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	440b      	add	r3, r1
 8005ecc:	3315      	adds	r3, #21
 8005ece:	2201      	movs	r2, #1
 8005ed0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005ed2:	7bfa      	ldrb	r2, [r7, #15]
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	4413      	add	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	440b      	add	r3, r1
 8005ee0:	3314      	adds	r3, #20
 8005ee2:	7bfa      	ldrb	r2, [r7, #15]
 8005ee4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ee6:	7bfa      	ldrb	r2, [r7, #15]
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
 8005eea:	b298      	uxth	r0, r3
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	00db      	lsls	r3, r3, #3
 8005ef2:	4413      	add	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	440b      	add	r3, r1
 8005ef8:	332e      	adds	r3, #46	@ 0x2e
 8005efa:	4602      	mov	r2, r0
 8005efc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005efe:	7bfa      	ldrb	r2, [r7, #15]
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	4613      	mov	r3, r2
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	3318      	adds	r3, #24
 8005f0e:	2200      	movs	r2, #0
 8005f10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005f12:	7bfa      	ldrb	r2, [r7, #15]
 8005f14:	6879      	ldr	r1, [r7, #4]
 8005f16:	4613      	mov	r3, r2
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	440b      	add	r3, r1
 8005f20:	331c      	adds	r3, #28
 8005f22:	2200      	movs	r2, #0
 8005f24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005f26:	7bfa      	ldrb	r2, [r7, #15]
 8005f28:	6879      	ldr	r1, [r7, #4]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	4413      	add	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	440b      	add	r3, r1
 8005f34:	3320      	adds	r3, #32
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f3a:	7bfa      	ldrb	r2, [r7, #15]
 8005f3c:	6879      	ldr	r1, [r7, #4]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	4413      	add	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	440b      	add	r3, r1
 8005f48:	3324      	adds	r3, #36	@ 0x24
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
 8005f50:	3301      	adds	r3, #1
 8005f52:	73fb      	strb	r3, [r7, #15]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	791b      	ldrb	r3, [r3, #4]
 8005f58:	7bfa      	ldrb	r2, [r7, #15]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d3af      	bcc.n	8005ebe <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f5e:	2300      	movs	r3, #0
 8005f60:	73fb      	strb	r3, [r7, #15]
 8005f62:	e044      	b.n	8005fee <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f64:	7bfa      	ldrb	r2, [r7, #15]
 8005f66:	6879      	ldr	r1, [r7, #4]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	4413      	add	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	440b      	add	r3, r1
 8005f72:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005f76:	2200      	movs	r2, #0
 8005f78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f7a:	7bfa      	ldrb	r2, [r7, #15]
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	4413      	add	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	440b      	add	r3, r1
 8005f88:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005f8c:	7bfa      	ldrb	r2, [r7, #15]
 8005f8e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f90:	7bfa      	ldrb	r2, [r7, #15]
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	4613      	mov	r3, r2
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	4413      	add	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005fa6:	7bfa      	ldrb	r2, [r7, #15]
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	4613      	mov	r3, r2
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	440b      	add	r3, r1
 8005fb4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005fbc:	7bfa      	ldrb	r2, [r7, #15]
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	4413      	add	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005fce:	2200      	movs	r2, #0
 8005fd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005fd2:	7bfa      	ldrb	r2, [r7, #15]
 8005fd4:	6879      	ldr	r1, [r7, #4]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	4413      	add	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	440b      	add	r3, r1
 8005fe0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	3301      	adds	r3, #1
 8005fec:	73fb      	strb	r3, [r7, #15]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	791b      	ldrb	r3, [r3, #4]
 8005ff2:	7bfa      	ldrb	r2, [r7, #15]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d3b5      	bcc.n	8005f64 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6818      	ldr	r0, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	7c1a      	ldrb	r2, [r3, #16]
 8006000:	f88d 2000 	strb.w	r2, [sp]
 8006004:	3304      	adds	r3, #4
 8006006:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006008:	f003 f824 	bl	8009054 <USB_DevInit>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d005      	beq.n	800601e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2202      	movs	r2, #2
 8006016:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e00c      	b.n	8006038 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4618      	mov	r0, r3
 8006032:	f004 f86e 	bl	800a112 <USB_DevDisconnect>

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <HAL_PCD_Start+0x1c>
 8006058:	2302      	movs	r3, #2
 800605a:	e022      	b.n	80060a2 <HAL_PCD_Start+0x62>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800606c:	2b00      	cmp	r3, #0
 800606e:	d009      	beq.n	8006084 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006074:	2b01      	cmp	r3, #1
 8006076:	d105      	bne.n	8006084 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4618      	mov	r0, r3
 800608a:	f002 ff75 	bl	8008f78 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f004 f81c 	bl	800a0d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80060aa:	b590      	push	{r4, r7, lr}
 80060ac:	b08d      	sub	sp, #52	@ 0x34
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f004 f8da 	bl	800a27a <USB_GetMode>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f040 848c 	bne.w	80069e6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f004 f83e 	bl	800a154 <USB_ReadInterrupts>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 8482 	beq.w	80069e4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	0a1b      	lsrs	r3, r3, #8
 80060ea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f004 f82b 	bl	800a154 <USB_ReadInterrupts>
 80060fe:	4603      	mov	r3, r0
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b02      	cmp	r3, #2
 8006106:	d107      	bne.n	8006118 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695a      	ldr	r2, [r3, #20]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f002 0202 	and.w	r2, r2, #2
 8006116:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4618      	mov	r0, r3
 800611e:	f004 f819 	bl	800a154 <USB_ReadInterrupts>
 8006122:	4603      	mov	r3, r0
 8006124:	f003 0310 	and.w	r3, r3, #16
 8006128:	2b10      	cmp	r3, #16
 800612a:	d161      	bne.n	80061f0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699a      	ldr	r2, [r3, #24]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0210 	bic.w	r2, r2, #16
 800613a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	f003 020f 	and.w	r2, r3, #15
 8006148:	4613      	mov	r3, r2
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	4413      	add	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	4413      	add	r3, r2
 8006158:	3304      	adds	r3, #4
 800615a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006162:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006166:	d124      	bne.n	80061b2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800616e:	4013      	ands	r3, r2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d035      	beq.n	80061e0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	091b      	lsrs	r3, r3, #4
 800617c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800617e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006182:	b29b      	uxth	r3, r3
 8006184:	461a      	mov	r2, r3
 8006186:	6a38      	ldr	r0, [r7, #32]
 8006188:	f003 fe50 	bl	8009e2c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	091b      	lsrs	r3, r3, #4
 8006194:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006198:	441a      	add	r2, r3
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	695a      	ldr	r2, [r3, #20]
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	091b      	lsrs	r3, r3, #4
 80061a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061aa:	441a      	add	r2, r3
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	615a      	str	r2, [r3, #20]
 80061b0:	e016      	b.n	80061e0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80061b8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80061bc:	d110      	bne.n	80061e0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80061c4:	2208      	movs	r2, #8
 80061c6:	4619      	mov	r1, r3
 80061c8:	6a38      	ldr	r0, [r7, #32]
 80061ca:	f003 fe2f 	bl	8009e2c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	695a      	ldr	r2, [r3, #20]
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	091b      	lsrs	r3, r3, #4
 80061d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061da:	441a      	add	r2, r3
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0210 	orr.w	r2, r2, #16
 80061ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f003 ffad 	bl	800a154 <USB_ReadInterrupts>
 80061fa:	4603      	mov	r3, r0
 80061fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006200:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006204:	f040 80a7 	bne.w	8006356 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006208:	2300      	movs	r3, #0
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4618      	mov	r0, r3
 8006212:	f003 ffb2 	bl	800a17a <USB_ReadDevAllOutEpInterrupt>
 8006216:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006218:	e099      	b.n	800634e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800621a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 808e 	beq.w	8006342 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800622c:	b2d2      	uxtb	r2, r2
 800622e:	4611      	mov	r1, r2
 8006230:	4618      	mov	r0, r3
 8006232:	f003 ffd6 	bl	800a1e2 <USB_ReadDevOutEPInterrupt>
 8006236:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00c      	beq.n	800625c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800624e:	461a      	mov	r2, r3
 8006250:	2301      	movs	r3, #1
 8006252:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006254:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fea4 	bl	8006fa4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f003 0308 	and.w	r3, r3, #8
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00c      	beq.n	8006280 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	4413      	add	r3, r2
 800626e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006272:	461a      	mov	r2, r3
 8006274:	2308      	movs	r3, #8
 8006276:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006278:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 ff7a 	bl	8007174 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f003 0310 	and.w	r3, r3, #16
 8006286:	2b00      	cmp	r3, #0
 8006288:	d008      	beq.n	800629c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800628a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006296:	461a      	mov	r2, r3
 8006298:	2310      	movs	r3, #16
 800629a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d030      	beq.n	8006308 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ae:	2b80      	cmp	r3, #128	@ 0x80
 80062b0:	d109      	bne.n	80062c6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	69fa      	ldr	r2, [r7, #28]
 80062bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80062c4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80062c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062c8:	4613      	mov	r3, r2
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	4413      	add	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	4413      	add	r3, r2
 80062d8:	3304      	adds	r3, #4
 80062da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	78db      	ldrb	r3, [r3, #3]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d108      	bne.n	80062f6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	2200      	movs	r2, #0
 80062e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f015 fd3d 	bl	801bd70 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80062f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006302:	461a      	mov	r2, r3
 8006304:	2302      	movs	r3, #2
 8006306:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f003 0320 	and.w	r3, r3, #32
 800630e:	2b00      	cmp	r3, #0
 8006310:	d008      	beq.n	8006324 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800631e:	461a      	mov	r2, r3
 8006320:	2320      	movs	r3, #32
 8006322:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d009      	beq.n	8006342 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	4413      	add	r3, r2
 8006336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800633a:	461a      	mov	r2, r3
 800633c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006340:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006344:	3301      	adds	r3, #1
 8006346:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634a:	085b      	lsrs	r3, r3, #1
 800634c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800634e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006350:	2b00      	cmp	r3, #0
 8006352:	f47f af62 	bne.w	800621a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4618      	mov	r0, r3
 800635c:	f003 fefa 	bl	800a154 <USB_ReadInterrupts>
 8006360:	4603      	mov	r3, r0
 8006362:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006366:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800636a:	f040 80db 	bne.w	8006524 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f003 ff1b 	bl	800a1ae <USB_ReadDevAllInEpInterrupt>
 8006378:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800637e:	e0cd      	b.n	800651c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 80c2 	beq.w	8006510 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	4611      	mov	r1, r2
 8006396:	4618      	mov	r0, r3
 8006398:	f003 ff41 	bl	800a21e <USB_ReadDevInEPInterrupt>
 800639c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d057      	beq.n	8006458 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80063a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	2201      	movs	r2, #1
 80063b0:	fa02 f303 	lsl.w	r3, r2, r3
 80063b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	43db      	mvns	r3, r3
 80063c2:	69f9      	ldr	r1, [r7, #28]
 80063c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063c8:	4013      	ands	r3, r2
 80063ca:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80063cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063d8:	461a      	mov	r2, r3
 80063da:	2301      	movs	r3, #1
 80063dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	799b      	ldrb	r3, [r3, #6]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d132      	bne.n	800644c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063ea:	4613      	mov	r3, r2
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	4413      	add	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	440b      	add	r3, r1
 80063f4:	3320      	adds	r3, #32
 80063f6:	6819      	ldr	r1, [r3, #0]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063fc:	4613      	mov	r3, r2
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	4413      	add	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4403      	add	r3, r0
 8006406:	331c      	adds	r3, #28
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4419      	add	r1, r3
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006410:	4613      	mov	r3, r2
 8006412:	00db      	lsls	r3, r3, #3
 8006414:	4413      	add	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4403      	add	r3, r0
 800641a:	3320      	adds	r3, #32
 800641c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	d113      	bne.n	800644c <HAL_PCD_IRQHandler+0x3a2>
 8006424:	6879      	ldr	r1, [r7, #4]
 8006426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006428:	4613      	mov	r3, r2
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	4413      	add	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	440b      	add	r3, r1
 8006432:	3324      	adds	r3, #36	@ 0x24
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d108      	bne.n	800644c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6818      	ldr	r0, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006444:	461a      	mov	r2, r3
 8006446:	2101      	movs	r1, #1
 8006448:	f003 ff48 	bl	800a2dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800644c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644e:	b2db      	uxtb	r3, r3
 8006450:	4619      	mov	r1, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f015 fc07 	bl	801bc66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f003 0308 	and.w	r3, r3, #8
 800645e:	2b00      	cmp	r3, #0
 8006460:	d008      	beq.n	8006474 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800646e:	461a      	mov	r2, r3
 8006470:	2308      	movs	r3, #8
 8006472:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	f003 0310 	and.w	r3, r3, #16
 800647a:	2b00      	cmp	r3, #0
 800647c:	d008      	beq.n	8006490 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800647e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800648a:	461a      	mov	r2, r3
 800648c:	2310      	movs	r3, #16
 800648e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006496:	2b00      	cmp	r3, #0
 8006498:	d008      	beq.n	80064ac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064a6:	461a      	mov	r2, r3
 80064a8:	2340      	movs	r3, #64	@ 0x40
 80064aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d023      	beq.n	80064fe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80064b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064b8:	6a38      	ldr	r0, [r7, #32]
 80064ba:	f002 ff2f 	bl	800931c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80064be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064c0:	4613      	mov	r3, r2
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	4413      	add	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	3310      	adds	r3, #16
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	4413      	add	r3, r2
 80064ce:	3304      	adds	r3, #4
 80064d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	78db      	ldrb	r3, [r3, #3]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d108      	bne.n	80064ec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2200      	movs	r2, #0
 80064de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80064e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f015 fc54 	bl	801bd94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80064ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f8:	461a      	mov	r2, r3
 80064fa:	2302      	movs	r3, #2
 80064fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006504:	2b00      	cmp	r3, #0
 8006506:	d003      	beq.n	8006510 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006508:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fcbd 	bl	8006e8a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006512:	3301      	adds	r3, #1
 8006514:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006518:	085b      	lsrs	r3, r3, #1
 800651a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800651c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651e:	2b00      	cmp	r3, #0
 8006520:	f47f af2e 	bne.w	8006380 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4618      	mov	r0, r3
 800652a:	f003 fe13 	bl	800a154 <USB_ReadInterrupts>
 800652e:	4603      	mov	r3, r0
 8006530:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006534:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006538:	d122      	bne.n	8006580 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	69fa      	ldr	r2, [r7, #28]
 8006544:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006548:	f023 0301 	bic.w	r3, r3, #1
 800654c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006554:	2b01      	cmp	r3, #1
 8006556:	d108      	bne.n	800656a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006560:	2100      	movs	r1, #0
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fea4 	bl	80072b0 <HAL_PCDEx_LPM_Callback>
 8006568:	e002      	b.n	8006570 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f015 fbf2 	bl	801bd54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695a      	ldr	r2, [r3, #20]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800657e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4618      	mov	r0, r3
 8006586:	f003 fde5 	bl	800a154 <USB_ReadInterrupts>
 800658a:	4603      	mov	r3, r0
 800658c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006590:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006594:	d112      	bne.n	80065bc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d102      	bne.n	80065ac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f015 fbae 	bl	801bd08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	695a      	ldr	r2, [r3, #20]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80065ba:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f003 fdc7 	bl	800a154 <USB_ReadInterrupts>
 80065c6:	4603      	mov	r3, r0
 80065c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065d0:	f040 80b7 	bne.w	8006742 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	69fa      	ldr	r2, [r7, #28]
 80065de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065e2:	f023 0301 	bic.w	r3, r3, #1
 80065e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2110      	movs	r1, #16
 80065ee:	4618      	mov	r0, r3
 80065f0:	f002 fe94 	bl	800931c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065f4:	2300      	movs	r3, #0
 80065f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065f8:	e046      	b.n	8006688 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80065fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006606:	461a      	mov	r2, r3
 8006608:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800660c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800660e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800661e:	0151      	lsls	r1, r2, #5
 8006620:	69fa      	ldr	r2, [r7, #28]
 8006622:	440a      	add	r2, r1
 8006624:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006628:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800662c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800662e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	4413      	add	r3, r2
 8006636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800663a:	461a      	mov	r2, r3
 800663c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006640:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	69fa      	ldr	r2, [r7, #28]
 8006656:	440a      	add	r2, r1
 8006658:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800665c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006660:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006672:	0151      	lsls	r1, r2, #5
 8006674:	69fa      	ldr	r2, [r7, #28]
 8006676:	440a      	add	r2, r1
 8006678:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800667c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006680:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006684:	3301      	adds	r3, #1
 8006686:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	791b      	ldrb	r3, [r3, #4]
 800668c:	461a      	mov	r2, r3
 800668e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006690:	4293      	cmp	r3, r2
 8006692:	d3b2      	bcc.n	80065fa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	69fa      	ldr	r2, [r7, #28]
 800669e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066a2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80066a6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	7bdb      	ldrb	r3, [r3, #15]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d016      	beq.n	80066de <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066ba:	69fa      	ldr	r2, [r7, #28]
 80066bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066c0:	f043 030b 	orr.w	r3, r3, #11
 80066c4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d0:	69fa      	ldr	r2, [r7, #28]
 80066d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066d6:	f043 030b 	orr.w	r3, r3, #11
 80066da:	6453      	str	r3, [r2, #68]	@ 0x44
 80066dc:	e015      	b.n	800670a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	69fa      	ldr	r2, [r7, #28]
 80066e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80066f0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80066f4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006704:	f043 030b 	orr.w	r3, r3, #11
 8006708:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69fa      	ldr	r2, [r7, #28]
 8006714:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006718:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800671c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800672c:	461a      	mov	r2, r3
 800672e:	f003 fdd5 	bl	800a2dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	695a      	ldr	r2, [r3, #20]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006740:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4618      	mov	r0, r3
 8006748:	f003 fd04 	bl	800a154 <USB_ReadInterrupts>
 800674c:	4603      	mov	r3, r0
 800674e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006752:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006756:	d123      	bne.n	80067a0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4618      	mov	r0, r3
 800675e:	f003 fd9a 	bl	800a296 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4618      	mov	r0, r3
 8006768:	f002 fe51 	bl	800940e <USB_GetDevSpeed>
 800676c:	4603      	mov	r3, r0
 800676e:	461a      	mov	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681c      	ldr	r4, [r3, #0]
 8006778:	f001 f9ca 	bl	8007b10 <HAL_RCC_GetHCLKFreq>
 800677c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006782:	461a      	mov	r2, r3
 8006784:	4620      	mov	r0, r4
 8006786:	f002 fb55 	bl	8008e34 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f015 fa93 	bl	801bcb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695a      	ldr	r2, [r3, #20]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800679e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f003 fcd5 	bl	800a154 <USB_ReadInterrupts>
 80067aa:	4603      	mov	r3, r0
 80067ac:	f003 0308 	and.w	r3, r3, #8
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	d10a      	bne.n	80067ca <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f015 fa70 	bl	801bc9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695a      	ldr	r2, [r3, #20]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f002 0208 	and.w	r2, r2, #8
 80067c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f003 fcc0 	bl	800a154 <USB_ReadInterrupts>
 80067d4:	4603      	mov	r3, r0
 80067d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067da:	2b80      	cmp	r3, #128	@ 0x80
 80067dc:	d123      	bne.n	8006826 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067ea:	2301      	movs	r3, #1
 80067ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80067ee:	e014      	b.n	800681a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067f4:	4613      	mov	r3, r2
 80067f6:	00db      	lsls	r3, r3, #3
 80067f8:	4413      	add	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	440b      	add	r3, r1
 80067fe:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d105      	bne.n	8006814 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680a:	b2db      	uxtb	r3, r3
 800680c:	4619      	mov	r1, r3
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fb0a 	bl	8006e28 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	3301      	adds	r3, #1
 8006818:	627b      	str	r3, [r7, #36]	@ 0x24
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	791b      	ldrb	r3, [r3, #4]
 800681e:	461a      	mov	r2, r3
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	4293      	cmp	r3, r2
 8006824:	d3e4      	bcc.n	80067f0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4618      	mov	r0, r3
 800682c:	f003 fc92 	bl	800a154 <USB_ReadInterrupts>
 8006830:	4603      	mov	r3, r0
 8006832:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006836:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800683a:	d13c      	bne.n	80068b6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800683c:	2301      	movs	r3, #1
 800683e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006840:	e02b      	b.n	800689a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006856:	4613      	mov	r3, r2
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	4413      	add	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	440b      	add	r3, r1
 8006860:	3318      	adds	r3, #24
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d115      	bne.n	8006894 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006868:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800686a:	2b00      	cmp	r3, #0
 800686c:	da12      	bge.n	8006894 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800686e:	6879      	ldr	r1, [r7, #4]
 8006870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006872:	4613      	mov	r3, r2
 8006874:	00db      	lsls	r3, r3, #3
 8006876:	4413      	add	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	440b      	add	r3, r1
 800687c:	3317      	adds	r3, #23
 800687e:	2201      	movs	r2, #1
 8006880:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006884:	b2db      	uxtb	r3, r3
 8006886:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800688a:	b2db      	uxtb	r3, r3
 800688c:	4619      	mov	r1, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 faca 	bl	8006e28 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006896:	3301      	adds	r3, #1
 8006898:	627b      	str	r3, [r7, #36]	@ 0x24
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	791b      	ldrb	r3, [r3, #4]
 800689e:	461a      	mov	r2, r3
 80068a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d3cd      	bcc.n	8006842 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	695a      	ldr	r2, [r3, #20]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80068b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f003 fc4a 	bl	800a154 <USB_ReadInterrupts>
 80068c0:	4603      	mov	r3, r0
 80068c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80068c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068ca:	d156      	bne.n	800697a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068cc:	2301      	movs	r3, #1
 80068ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80068d0:	e045      	b.n	800695e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068e6:	4613      	mov	r3, r2
 80068e8:	00db      	lsls	r3, r3, #3
 80068ea:	4413      	add	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	440b      	add	r3, r1
 80068f0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d12e      	bne.n	8006958 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80068fa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	da2b      	bge.n	8006958 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	0c1a      	lsrs	r2, r3, #16
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800690a:	4053      	eors	r3, r2
 800690c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006910:	2b00      	cmp	r3, #0
 8006912:	d121      	bne.n	8006958 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006918:	4613      	mov	r3, r2
 800691a:	00db      	lsls	r3, r3, #3
 800691c:	4413      	add	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	440b      	add	r3, r1
 8006922:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006926:	2201      	movs	r2, #1
 8006928:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10a      	bne.n	8006958 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	69fa      	ldr	r2, [r7, #28]
 800694c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006950:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006954:	6053      	str	r3, [r2, #4]
            break;
 8006956:	e008      	b.n	800696a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695a:	3301      	adds	r3, #1
 800695c:	627b      	str	r3, [r7, #36]	@ 0x24
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	791b      	ldrb	r3, [r3, #4]
 8006962:	461a      	mov	r2, r3
 8006964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006966:	4293      	cmp	r3, r2
 8006968:	d3b3      	bcc.n	80068d2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	695a      	ldr	r2, [r3, #20]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006978:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	f003 fbe8 	bl	800a154 <USB_ReadInterrupts>
 8006984:	4603      	mov	r3, r0
 8006986:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800698a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800698e:	d10a      	bne.n	80069a6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f015 fa11 	bl	801bdb8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	695a      	ldr	r2, [r3, #20]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80069a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f003 fbd2 	bl	800a154 <USB_ReadInterrupts>
 80069b0:	4603      	mov	r3, r0
 80069b2:	f003 0304 	and.w	r3, r3, #4
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d115      	bne.n	80069e6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f015 fa01 	bl	801bdd4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6859      	ldr	r1, [r3, #4]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	430a      	orrs	r2, r1
 80069e0:	605a      	str	r2, [r3, #4]
 80069e2:	e000      	b.n	80069e6 <HAL_PCD_IRQHandler+0x93c>
      return;
 80069e4:	bf00      	nop
    }
  }
}
 80069e6:	3734      	adds	r7, #52	@ 0x34
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd90      	pop	{r4, r7, pc}

080069ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	460b      	mov	r3, r1
 80069f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_PCD_SetAddress+0x1a>
 8006a02:	2302      	movs	r3, #2
 8006a04:	e012      	b.n	8006a2c <HAL_PCD_SetAddress+0x40>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	78fa      	ldrb	r2, [r7, #3]
 8006a12:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	78fa      	ldrb	r2, [r7, #3]
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f003 fb31 	bl	800a084 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	4611      	mov	r1, r2
 8006a40:	461a      	mov	r2, r3
 8006a42:	4603      	mov	r3, r0
 8006a44:	70fb      	strb	r3, [r7, #3]
 8006a46:	460b      	mov	r3, r1
 8006a48:	803b      	strh	r3, [r7, #0]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	da0f      	bge.n	8006a7a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a5a:	78fb      	ldrb	r3, [r7, #3]
 8006a5c:	f003 020f 	and.w	r2, r3, #15
 8006a60:	4613      	mov	r3, r2
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	4413      	add	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	3310      	adds	r3, #16
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	3304      	adds	r3, #4
 8006a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2201      	movs	r2, #1
 8006a76:	705a      	strb	r2, [r3, #1]
 8006a78:	e00f      	b.n	8006a9a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a7a:	78fb      	ldrb	r3, [r7, #3]
 8006a7c:	f003 020f 	and.w	r2, r3, #15
 8006a80:	4613      	mov	r3, r2
 8006a82:	00db      	lsls	r3, r3, #3
 8006a84:	4413      	add	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	4413      	add	r3, r2
 8006a90:	3304      	adds	r3, #4
 8006a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006a9a:	78fb      	ldrb	r3, [r7, #3]
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006aa6:	883b      	ldrh	r3, [r7, #0]
 8006aa8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	78ba      	ldrb	r2, [r7, #2]
 8006ab4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	785b      	ldrb	r3, [r3, #1]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d004      	beq.n	8006ac8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006ac8:	78bb      	ldrb	r3, [r7, #2]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d102      	bne.n	8006ad4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <HAL_PCD_EP_Open+0xae>
 8006ade:	2302      	movs	r3, #2
 8006ae0:	e00e      	b.n	8006b00 <HAL_PCD_EP_Open+0xcc>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68f9      	ldr	r1, [r7, #12]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f002 fcb1 	bl	8009458 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006afe:	7afb      	ldrb	r3, [r7, #11]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006b14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	da0f      	bge.n	8006b3c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b1c:	78fb      	ldrb	r3, [r7, #3]
 8006b1e:	f003 020f 	and.w	r2, r3, #15
 8006b22:	4613      	mov	r3, r2
 8006b24:	00db      	lsls	r3, r3, #3
 8006b26:	4413      	add	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	3310      	adds	r3, #16
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	4413      	add	r3, r2
 8006b30:	3304      	adds	r3, #4
 8006b32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2201      	movs	r2, #1
 8006b38:	705a      	strb	r2, [r3, #1]
 8006b3a:	e00f      	b.n	8006b5c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b3c:	78fb      	ldrb	r3, [r7, #3]
 8006b3e:	f003 020f 	and.w	r2, r3, #15
 8006b42:	4613      	mov	r3, r2
 8006b44:	00db      	lsls	r3, r3, #3
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	4413      	add	r3, r2
 8006b52:	3304      	adds	r3, #4
 8006b54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b5c:	78fb      	ldrb	r3, [r7, #3]
 8006b5e:	f003 030f 	and.w	r3, r3, #15
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d101      	bne.n	8006b76 <HAL_PCD_EP_Close+0x6e>
 8006b72:	2302      	movs	r3, #2
 8006b74:	e00e      	b.n	8006b94 <HAL_PCD_EP_Close+0x8c>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68f9      	ldr	r1, [r7, #12]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f002 fcef 	bl	8009568 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	607a      	str	r2, [r7, #4]
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bac:	7afb      	ldrb	r3, [r7, #11]
 8006bae:	f003 020f 	and.w	r2, r3, #15
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	00db      	lsls	r3, r3, #3
 8006bb6:	4413      	add	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bde:	7afb      	ldrb	r3, [r7, #11]
 8006be0:	f003 030f 	and.w	r3, r3, #15
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	799b      	ldrb	r3, [r3, #6]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d102      	bne.n	8006bf8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6818      	ldr	r0, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	799b      	ldrb	r3, [r3, #6]
 8006c00:	461a      	mov	r2, r3
 8006c02:	6979      	ldr	r1, [r7, #20]
 8006c04:	f002 fd8c 	bl	8009720 <USB_EPStartXfer>

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b083      	sub	sp, #12
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006c1e:	78fb      	ldrb	r3, [r7, #3]
 8006c20:	f003 020f 	and.w	r2, r3, #15
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	4613      	mov	r3, r2
 8006c28:	00db      	lsls	r3, r3, #3
 8006c2a:	4413      	add	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	440b      	add	r3, r1
 8006c30:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006c34:	681b      	ldr	r3, [r3, #0]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b086      	sub	sp, #24
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	603b      	str	r3, [r7, #0]
 8006c4e:	460b      	mov	r3, r1
 8006c50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c52:	7afb      	ldrb	r3, [r7, #11]
 8006c54:	f003 020f 	and.w	r2, r3, #15
 8006c58:	4613      	mov	r3, r2
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	3310      	adds	r3, #16
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4413      	add	r3, r2
 8006c66:	3304      	adds	r3, #4
 8006c68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c82:	7afb      	ldrb	r3, [r7, #11]
 8006c84:	f003 030f 	and.w	r3, r3, #15
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	799b      	ldrb	r3, [r3, #6]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d102      	bne.n	8006c9c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6818      	ldr	r0, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	799b      	ldrb	r3, [r3, #6]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	6979      	ldr	r1, [r7, #20]
 8006ca8:	f002 fd3a 	bl	8009720 <USB_EPStartXfer>

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b084      	sub	sp, #16
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	f003 030f 	and.w	r3, r3, #15
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	7912      	ldrb	r2, [r2, #4]
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d901      	bls.n	8006cd4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e04f      	b.n	8006d74 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006cd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	da0f      	bge.n	8006cfc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cdc:	78fb      	ldrb	r3, [r7, #3]
 8006cde:	f003 020f 	and.w	r2, r3, #15
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	00db      	lsls	r3, r3, #3
 8006ce6:	4413      	add	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	3310      	adds	r3, #16
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	4413      	add	r3, r2
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	705a      	strb	r2, [r3, #1]
 8006cfa:	e00d      	b.n	8006d18 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006cfc:	78fa      	ldrb	r2, [r7, #3]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	3304      	adds	r3, #4
 8006d10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d1e:	78fb      	ldrb	r3, [r7, #3]
 8006d20:	f003 030f 	and.w	r3, r3, #15
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d101      	bne.n	8006d38 <HAL_PCD_EP_SetStall+0x82>
 8006d34:	2302      	movs	r3, #2
 8006d36:	e01d      	b.n	8006d74 <HAL_PCD_EP_SetStall+0xbe>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68f9      	ldr	r1, [r7, #12]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f003 f8c8 	bl	8009edc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d4c:	78fb      	ldrb	r3, [r7, #3]
 8006d4e:	f003 030f 	and.w	r3, r3, #15
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d109      	bne.n	8006d6a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6818      	ldr	r0, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	7999      	ldrb	r1, [r3, #6]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006d64:	461a      	mov	r2, r3
 8006d66:	f003 fab9 	bl	800a2dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	460b      	mov	r3, r1
 8006d86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006d88:	78fb      	ldrb	r3, [r7, #3]
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	7912      	ldrb	r2, [r2, #4]
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d901      	bls.n	8006d9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e042      	b.n	8006e20 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	da0f      	bge.n	8006dc2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006da2:	78fb      	ldrb	r3, [r7, #3]
 8006da4:	f003 020f 	and.w	r2, r3, #15
 8006da8:	4613      	mov	r3, r2
 8006daa:	00db      	lsls	r3, r3, #3
 8006dac:	4413      	add	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	3310      	adds	r3, #16
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	4413      	add	r3, r2
 8006db6:	3304      	adds	r3, #4
 8006db8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	705a      	strb	r2, [r3, #1]
 8006dc0:	e00f      	b.n	8006de2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006dc2:	78fb      	ldrb	r3, [r7, #3]
 8006dc4:	f003 020f 	and.w	r2, r3, #15
 8006dc8:	4613      	mov	r3, r2
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	4413      	add	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	3304      	adds	r3, #4
 8006dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006de8:	78fb      	ldrb	r3, [r7, #3]
 8006dea:	f003 030f 	and.w	r3, r3, #15
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d101      	bne.n	8006e02 <HAL_PCD_EP_ClrStall+0x86>
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e00e      	b.n	8006e20 <HAL_PCD_EP_ClrStall+0xa4>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68f9      	ldr	r1, [r7, #12]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f003 f8d1 	bl	8009fb8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	460b      	mov	r3, r1
 8006e32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006e34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	da0c      	bge.n	8006e56 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e3c:	78fb      	ldrb	r3, [r7, #3]
 8006e3e:	f003 020f 	and.w	r2, r3, #15
 8006e42:	4613      	mov	r3, r2
 8006e44:	00db      	lsls	r3, r3, #3
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	3310      	adds	r3, #16
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	4413      	add	r3, r2
 8006e50:	3304      	adds	r3, #4
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	e00c      	b.n	8006e70 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e56:	78fb      	ldrb	r3, [r7, #3]
 8006e58:	f003 020f 	and.w	r2, r3, #15
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	4413      	add	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68f9      	ldr	r1, [r7, #12]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f002 fef0 	bl	8009c5c <USB_EPStopXfer>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006e80:	7afb      	ldrb	r3, [r7, #11]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b08a      	sub	sp, #40	@ 0x28
 8006e8e:	af02      	add	r7, sp, #8
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	4413      	add	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	3310      	adds	r3, #16
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	4413      	add	r3, r2
 8006eae:	3304      	adds	r3, #4
 8006eb0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	695a      	ldr	r2, [r3, #20]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d901      	bls.n	8006ec2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e06b      	b.n	8006f9a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	691a      	ldr	r2, [r3, #16]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	69fa      	ldr	r2, [r7, #28]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d902      	bls.n	8006ede <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	3303      	adds	r3, #3
 8006ee2:	089b      	lsrs	r3, r3, #2
 8006ee4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ee6:	e02a      	b.n	8006f3e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	691a      	ldr	r2, [r3, #16]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d902      	bls.n	8006f04 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	3303      	adds	r3, #3
 8006f08:	089b      	lsrs	r3, r3, #2
 8006f0a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	68d9      	ldr	r1, [r3, #12]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	b2da      	uxtb	r2, r3
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	4603      	mov	r3, r0
 8006f20:	6978      	ldr	r0, [r7, #20]
 8006f22:	f002 ff45 	bl	8009db0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	441a      	add	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	695a      	ldr	r2, [r3, #20]
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	441a      	add	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d809      	bhi.n	8006f68 <PCD_WriteEmptyTxFifo+0xde>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	695a      	ldr	r2, [r3, #20]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d203      	bcs.n	8006f68 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1bf      	bne.n	8006ee8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	691a      	ldr	r2, [r3, #16]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d811      	bhi.n	8006f98 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	f003 030f 	and.w	r3, r3, #15
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f80:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	43db      	mvns	r3, r3
 8006f8e:	6939      	ldr	r1, [r7, #16]
 8006f90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f94:	4013      	ands	r3, r2
 8006f96:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3720      	adds	r7, #32
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
	...

08006fa4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	333c      	adds	r3, #60	@ 0x3c
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	799b      	ldrb	r3, [r3, #6]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d17b      	bne.n	80070d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	f003 0308 	and.w	r3, r3, #8
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d015      	beq.n	8007010 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	4a61      	ldr	r2, [pc, #388]	@ (800716c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	f240 80b9 	bls.w	8007160 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 80b3 	beq.w	8007160 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007006:	461a      	mov	r2, r3
 8007008:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800700c:	6093      	str	r3, [r2, #8]
 800700e:	e0a7      	b.n	8007160 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f003 0320 	and.w	r3, r3, #32
 8007016:	2b00      	cmp	r3, #0
 8007018:	d009      	beq.n	800702e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	4413      	add	r3, r2
 8007022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007026:	461a      	mov	r2, r3
 8007028:	2320      	movs	r3, #32
 800702a:	6093      	str	r3, [r2, #8]
 800702c:	e098      	b.n	8007160 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007034:	2b00      	cmp	r3, #0
 8007036:	f040 8093 	bne.w	8007160 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	4a4b      	ldr	r2, [pc, #300]	@ (800716c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d90f      	bls.n	8007062 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00a      	beq.n	8007062 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007058:	461a      	mov	r2, r3
 800705a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800705e:	6093      	str	r3, [r2, #8]
 8007060:	e07e      	b.n	8007160 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	4613      	mov	r3, r2
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	4413      	add	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	4413      	add	r3, r2
 8007074:	3304      	adds	r3, #4
 8007076:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6a1a      	ldr	r2, [r3, #32]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	0159      	lsls	r1, r3, #5
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	440b      	add	r3, r1
 8007084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800708e:	1ad2      	subs	r2, r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d114      	bne.n	80070c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d109      	bne.n	80070b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6818      	ldr	r0, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80070ac:	461a      	mov	r2, r3
 80070ae:	2101      	movs	r1, #1
 80070b0:	f003 f914 	bl	800a2dc <USB_EP0_OutStart>
 80070b4:	e006      	b.n	80070c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	441a      	add	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	4619      	mov	r1, r3
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f014 fdb0 	bl	801bc30 <HAL_PCD_DataOutStageCallback>
 80070d0:	e046      	b.n	8007160 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	4a26      	ldr	r2, [pc, #152]	@ (8007170 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d124      	bne.n	8007124 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00a      	beq.n	80070fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070f0:	461a      	mov	r2, r3
 80070f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070f6:	6093      	str	r3, [r2, #8]
 80070f8:	e032      	b.n	8007160 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f003 0320 	and.w	r3, r3, #32
 8007100:	2b00      	cmp	r3, #0
 8007102:	d008      	beq.n	8007116 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	4413      	add	r3, r2
 800710c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007110:	461a      	mov	r2, r3
 8007112:	2320      	movs	r3, #32
 8007114:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	b2db      	uxtb	r3, r3
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f014 fd87 	bl	801bc30 <HAL_PCD_DataOutStageCallback>
 8007122:	e01d      	b.n	8007160 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d114      	bne.n	8007154 <PCD_EP_OutXfrComplete_int+0x1b0>
 800712a:	6879      	ldr	r1, [r7, #4]
 800712c:	683a      	ldr	r2, [r7, #0]
 800712e:	4613      	mov	r3, r2
 8007130:	00db      	lsls	r3, r3, #3
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	440b      	add	r3, r1
 8007138:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d108      	bne.n	8007154 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6818      	ldr	r0, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800714c:	461a      	mov	r2, r3
 800714e:	2100      	movs	r1, #0
 8007150:	f003 f8c4 	bl	800a2dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	b2db      	uxtb	r3, r3
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f014 fd68 	bl	801bc30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3720      	adds	r7, #32
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	4f54300a 	.word	0x4f54300a
 8007170:	4f54310a 	.word	0x4f54310a

08007174 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	333c      	adds	r3, #60	@ 0x3c
 800718c:	3304      	adds	r3, #4
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	4413      	add	r3, r2
 800719a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4a15      	ldr	r2, [pc, #84]	@ (80071fc <PCD_EP_OutSetupPacket_int+0x88>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d90e      	bls.n	80071c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d009      	beq.n	80071c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071c0:	461a      	mov	r2, r3
 80071c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f014 fd1f 	bl	801bc0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4a0a      	ldr	r2, [pc, #40]	@ (80071fc <PCD_EP_OutSetupPacket_int+0x88>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d90c      	bls.n	80071f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	799b      	ldrb	r3, [r3, #6]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d108      	bne.n	80071f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6818      	ldr	r0, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80071e8:	461a      	mov	r2, r3
 80071ea:	2101      	movs	r1, #1
 80071ec:	f003 f876 	bl	800a2dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	4f54300a 	.word	0x4f54300a

08007200 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	70fb      	strb	r3, [r7, #3]
 800720c:	4613      	mov	r3, r2
 800720e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007216:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007218:	78fb      	ldrb	r3, [r7, #3]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d107      	bne.n	800722e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800721e:	883b      	ldrh	r3, [r7, #0]
 8007220:	0419      	lsls	r1, r3, #16
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	430a      	orrs	r2, r1
 800722a:	629a      	str	r2, [r3, #40]	@ 0x28
 800722c:	e028      	b.n	8007280 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007234:	0c1b      	lsrs	r3, r3, #16
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	4413      	add	r3, r2
 800723a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800723c:	2300      	movs	r3, #0
 800723e:	73fb      	strb	r3, [r7, #15]
 8007240:	e00d      	b.n	800725e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	7bfb      	ldrb	r3, [r7, #15]
 8007248:	3340      	adds	r3, #64	@ 0x40
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	0c1b      	lsrs	r3, r3, #16
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	4413      	add	r3, r2
 8007256:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007258:	7bfb      	ldrb	r3, [r7, #15]
 800725a:	3301      	adds	r3, #1
 800725c:	73fb      	strb	r3, [r7, #15]
 800725e:	7bfa      	ldrb	r2, [r7, #15]
 8007260:	78fb      	ldrb	r3, [r7, #3]
 8007262:	3b01      	subs	r3, #1
 8007264:	429a      	cmp	r2, r3
 8007266:	d3ec      	bcc.n	8007242 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007268:	883b      	ldrh	r3, [r7, #0]
 800726a:	0418      	lsls	r0, r3, #16
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6819      	ldr	r1, [r3, #0]
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	3b01      	subs	r3, #1
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	4302      	orrs	r2, r0
 8007278:	3340      	adds	r3, #64	@ 0x40
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	440b      	add	r3, r1
 800727e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	460b      	mov	r3, r1
 8007298:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	887a      	ldrh	r2, [r7, #2]
 80072a0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e267      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d075      	beq.n	80073d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80072e6:	4b88      	ldr	r3, [pc, #544]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f003 030c 	and.w	r3, r3, #12
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d00c      	beq.n	800730c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072f2:	4b85      	ldr	r3, [pc, #532]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80072fa:	2b08      	cmp	r3, #8
 80072fc:	d112      	bne.n	8007324 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072fe:	4b82      	ldr	r3, [pc, #520]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007306:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800730a:	d10b      	bne.n	8007324 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800730c:	4b7e      	ldr	r3, [pc, #504]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d05b      	beq.n	80073d0 <HAL_RCC_OscConfig+0x108>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d157      	bne.n	80073d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e242      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800732c:	d106      	bne.n	800733c <HAL_RCC_OscConfig+0x74>
 800732e:	4b76      	ldr	r3, [pc, #472]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a75      	ldr	r2, [pc, #468]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 8007334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	e01d      	b.n	8007378 <HAL_RCC_OscConfig+0xb0>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007344:	d10c      	bne.n	8007360 <HAL_RCC_OscConfig+0x98>
 8007346:	4b70      	ldr	r3, [pc, #448]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a6f      	ldr	r2, [pc, #444]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 800734c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	4b6d      	ldr	r3, [pc, #436]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a6c      	ldr	r2, [pc, #432]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 8007358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800735c:	6013      	str	r3, [r2, #0]
 800735e:	e00b      	b.n	8007378 <HAL_RCC_OscConfig+0xb0>
 8007360:	4b69      	ldr	r3, [pc, #420]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a68      	ldr	r2, [pc, #416]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 8007366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	4b66      	ldr	r3, [pc, #408]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a65      	ldr	r2, [pc, #404]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 8007372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d013      	beq.n	80073a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007380:	f7fd f854 	bl	800442c <HAL_GetTick>
 8007384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007386:	e008      	b.n	800739a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007388:	f7fd f850 	bl	800442c <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b64      	cmp	r3, #100	@ 0x64
 8007394:	d901      	bls.n	800739a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e207      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800739a:	4b5b      	ldr	r3, [pc, #364]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d0f0      	beq.n	8007388 <HAL_RCC_OscConfig+0xc0>
 80073a6:	e014      	b.n	80073d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a8:	f7fd f840 	bl	800442c <HAL_GetTick>
 80073ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073ae:	e008      	b.n	80073c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073b0:	f7fd f83c 	bl	800442c <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b64      	cmp	r3, #100	@ 0x64
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e1f3      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073c2:	4b51      	ldr	r3, [pc, #324]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1f0      	bne.n	80073b0 <HAL_RCC_OscConfig+0xe8>
 80073ce:	e000      	b.n	80073d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0302 	and.w	r3, r3, #2
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d063      	beq.n	80074a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80073de:	4b4a      	ldr	r3, [pc, #296]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f003 030c 	and.w	r3, r3, #12
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00b      	beq.n	8007402 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073ea:	4b47      	ldr	r3, [pc, #284]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80073f2:	2b08      	cmp	r3, #8
 80073f4:	d11c      	bne.n	8007430 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073f6:	4b44      	ldr	r3, [pc, #272]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d116      	bne.n	8007430 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007402:	4b41      	ldr	r3, [pc, #260]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d005      	beq.n	800741a <HAL_RCC_OscConfig+0x152>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d001      	beq.n	800741a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e1c7      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800741a:	4b3b      	ldr	r3, [pc, #236]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	00db      	lsls	r3, r3, #3
 8007428:	4937      	ldr	r1, [pc, #220]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 800742a:	4313      	orrs	r3, r2
 800742c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800742e:	e03a      	b.n	80074a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d020      	beq.n	800747a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007438:	4b34      	ldr	r3, [pc, #208]	@ (800750c <HAL_RCC_OscConfig+0x244>)
 800743a:	2201      	movs	r2, #1
 800743c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800743e:	f7fc fff5 	bl	800442c <HAL_GetTick>
 8007442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007444:	e008      	b.n	8007458 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007446:	f7fc fff1 	bl	800442c <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	2b02      	cmp	r3, #2
 8007452:	d901      	bls.n	8007458 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e1a8      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007458:	4b2b      	ldr	r3, [pc, #172]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b00      	cmp	r3, #0
 8007462:	d0f0      	beq.n	8007446 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007464:	4b28      	ldr	r3, [pc, #160]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	00db      	lsls	r3, r3, #3
 8007472:	4925      	ldr	r1, [pc, #148]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 8007474:	4313      	orrs	r3, r2
 8007476:	600b      	str	r3, [r1, #0]
 8007478:	e015      	b.n	80074a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800747a:	4b24      	ldr	r3, [pc, #144]	@ (800750c <HAL_RCC_OscConfig+0x244>)
 800747c:	2200      	movs	r2, #0
 800747e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007480:	f7fc ffd4 	bl	800442c <HAL_GetTick>
 8007484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007486:	e008      	b.n	800749a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007488:	f7fc ffd0 	bl	800442c <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	2b02      	cmp	r3, #2
 8007494:	d901      	bls.n	800749a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e187      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800749a:	4b1b      	ldr	r3, [pc, #108]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0302 	and.w	r3, r3, #2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1f0      	bne.n	8007488 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0308 	and.w	r3, r3, #8
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d036      	beq.n	8007520 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d016      	beq.n	80074e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074ba:	4b15      	ldr	r3, [pc, #84]	@ (8007510 <HAL_RCC_OscConfig+0x248>)
 80074bc:	2201      	movs	r2, #1
 80074be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c0:	f7fc ffb4 	bl	800442c <HAL_GetTick>
 80074c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074c6:	e008      	b.n	80074da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074c8:	f7fc ffb0 	bl	800442c <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d901      	bls.n	80074da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e167      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074da:	4b0b      	ldr	r3, [pc, #44]	@ (8007508 <HAL_RCC_OscConfig+0x240>)
 80074dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074de:	f003 0302 	and.w	r3, r3, #2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d0f0      	beq.n	80074c8 <HAL_RCC_OscConfig+0x200>
 80074e6:	e01b      	b.n	8007520 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074e8:	4b09      	ldr	r3, [pc, #36]	@ (8007510 <HAL_RCC_OscConfig+0x248>)
 80074ea:	2200      	movs	r2, #0
 80074ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074ee:	f7fc ff9d 	bl	800442c <HAL_GetTick>
 80074f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074f4:	e00e      	b.n	8007514 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074f6:	f7fc ff99 	bl	800442c <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d907      	bls.n	8007514 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e150      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
 8007508:	40023800 	.word	0x40023800
 800750c:	42470000 	.word	0x42470000
 8007510:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007514:	4b88      	ldr	r3, [pc, #544]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 8007516:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1ea      	bne.n	80074f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 8097 	beq.w	800765c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800752e:	2300      	movs	r3, #0
 8007530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007532:	4b81      	ldr	r3, [pc, #516]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 8007534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10f      	bne.n	800755e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800753e:	2300      	movs	r3, #0
 8007540:	60bb      	str	r3, [r7, #8]
 8007542:	4b7d      	ldr	r3, [pc, #500]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 8007544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007546:	4a7c      	ldr	r2, [pc, #496]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 8007548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800754c:	6413      	str	r3, [r2, #64]	@ 0x40
 800754e:	4b7a      	ldr	r3, [pc, #488]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 8007550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007556:	60bb      	str	r3, [r7, #8]
 8007558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800755a:	2301      	movs	r3, #1
 800755c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800755e:	4b77      	ldr	r3, [pc, #476]	@ (800773c <HAL_RCC_OscConfig+0x474>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007566:	2b00      	cmp	r3, #0
 8007568:	d118      	bne.n	800759c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800756a:	4b74      	ldr	r3, [pc, #464]	@ (800773c <HAL_RCC_OscConfig+0x474>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a73      	ldr	r2, [pc, #460]	@ (800773c <HAL_RCC_OscConfig+0x474>)
 8007570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007576:	f7fc ff59 	bl	800442c <HAL_GetTick>
 800757a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800757c:	e008      	b.n	8007590 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800757e:	f7fc ff55 	bl	800442c <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	2b02      	cmp	r3, #2
 800758a:	d901      	bls.n	8007590 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e10c      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007590:	4b6a      	ldr	r3, [pc, #424]	@ (800773c <HAL_RCC_OscConfig+0x474>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007598:	2b00      	cmp	r3, #0
 800759a:	d0f0      	beq.n	800757e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d106      	bne.n	80075b2 <HAL_RCC_OscConfig+0x2ea>
 80075a4:	4b64      	ldr	r3, [pc, #400]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 80075a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a8:	4a63      	ldr	r2, [pc, #396]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 80075aa:	f043 0301 	orr.w	r3, r3, #1
 80075ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80075b0:	e01c      	b.n	80075ec <HAL_RCC_OscConfig+0x324>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	2b05      	cmp	r3, #5
 80075b8:	d10c      	bne.n	80075d4 <HAL_RCC_OscConfig+0x30c>
 80075ba:	4b5f      	ldr	r3, [pc, #380]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 80075bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075be:	4a5e      	ldr	r2, [pc, #376]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 80075c0:	f043 0304 	orr.w	r3, r3, #4
 80075c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80075c6:	4b5c      	ldr	r3, [pc, #368]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 80075c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ca:	4a5b      	ldr	r2, [pc, #364]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 80075cc:	f043 0301 	orr.w	r3, r3, #1
 80075d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80075d2:	e00b      	b.n	80075ec <HAL_RCC_OscConfig+0x324>
 80075d4:	4b58      	ldr	r3, [pc, #352]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 80075d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075d8:	4a57      	ldr	r2, [pc, #348]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 80075da:	f023 0301 	bic.w	r3, r3, #1
 80075de:	6713      	str	r3, [r2, #112]	@ 0x70
 80075e0:	4b55      	ldr	r3, [pc, #340]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 80075e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075e4:	4a54      	ldr	r2, [pc, #336]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 80075e6:	f023 0304 	bic.w	r3, r3, #4
 80075ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d015      	beq.n	8007620 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f4:	f7fc ff1a 	bl	800442c <HAL_GetTick>
 80075f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075fa:	e00a      	b.n	8007612 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075fc:	f7fc ff16 	bl	800442c <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800760a:	4293      	cmp	r3, r2
 800760c:	d901      	bls.n	8007612 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e0cb      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007612:	4b49      	ldr	r3, [pc, #292]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 8007614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007616:	f003 0302 	and.w	r3, r3, #2
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0ee      	beq.n	80075fc <HAL_RCC_OscConfig+0x334>
 800761e:	e014      	b.n	800764a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007620:	f7fc ff04 	bl	800442c <HAL_GetTick>
 8007624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007626:	e00a      	b.n	800763e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007628:	f7fc ff00 	bl	800442c <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007636:	4293      	cmp	r3, r2
 8007638:	d901      	bls.n	800763e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e0b5      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800763e:	4b3e      	ldr	r3, [pc, #248]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 8007640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1ee      	bne.n	8007628 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800764a:	7dfb      	ldrb	r3, [r7, #23]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d105      	bne.n	800765c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007650:	4b39      	ldr	r3, [pc, #228]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 8007652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007654:	4a38      	ldr	r2, [pc, #224]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 8007656:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800765a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 80a1 	beq.w	80077a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007666:	4b34      	ldr	r3, [pc, #208]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f003 030c 	and.w	r3, r3, #12
 800766e:	2b08      	cmp	r3, #8
 8007670:	d05c      	beq.n	800772c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	2b02      	cmp	r3, #2
 8007678:	d141      	bne.n	80076fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800767a:	4b31      	ldr	r3, [pc, #196]	@ (8007740 <HAL_RCC_OscConfig+0x478>)
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007680:	f7fc fed4 	bl	800442c <HAL_GetTick>
 8007684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007686:	e008      	b.n	800769a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007688:	f7fc fed0 	bl	800442c <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	2b02      	cmp	r3, #2
 8007694:	d901      	bls.n	800769a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e087      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800769a:	4b27      	ldr	r3, [pc, #156]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1f0      	bne.n	8007688 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	69da      	ldr	r2, [r3, #28]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b4:	019b      	lsls	r3, r3, #6
 80076b6:	431a      	orrs	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076bc:	085b      	lsrs	r3, r3, #1
 80076be:	3b01      	subs	r3, #1
 80076c0:	041b      	lsls	r3, r3, #16
 80076c2:	431a      	orrs	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c8:	061b      	lsls	r3, r3, #24
 80076ca:	491b      	ldr	r1, [pc, #108]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007740 <HAL_RCC_OscConfig+0x478>)
 80076d2:	2201      	movs	r2, #1
 80076d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076d6:	f7fc fea9 	bl	800442c <HAL_GetTick>
 80076da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076dc:	e008      	b.n	80076f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076de:	f7fc fea5 	bl	800442c <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d901      	bls.n	80076f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e05c      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076f0:	4b11      	ldr	r3, [pc, #68]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d0f0      	beq.n	80076de <HAL_RCC_OscConfig+0x416>
 80076fc:	e054      	b.n	80077a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076fe:	4b10      	ldr	r3, [pc, #64]	@ (8007740 <HAL_RCC_OscConfig+0x478>)
 8007700:	2200      	movs	r2, #0
 8007702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007704:	f7fc fe92 	bl	800442c <HAL_GetTick>
 8007708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800770a:	e008      	b.n	800771e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800770c:	f7fc fe8e 	bl	800442c <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b02      	cmp	r3, #2
 8007718:	d901      	bls.n	800771e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e045      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800771e:	4b06      	ldr	r3, [pc, #24]	@ (8007738 <HAL_RCC_OscConfig+0x470>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1f0      	bne.n	800770c <HAL_RCC_OscConfig+0x444>
 800772a:	e03d      	b.n	80077a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d107      	bne.n	8007744 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e038      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
 8007738:	40023800 	.word	0x40023800
 800773c:	40007000 	.word	0x40007000
 8007740:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007744:	4b1b      	ldr	r3, [pc, #108]	@ (80077b4 <HAL_RCC_OscConfig+0x4ec>)
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d028      	beq.n	80077a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800775c:	429a      	cmp	r2, r3
 800775e:	d121      	bne.n	80077a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800776a:	429a      	cmp	r2, r3
 800776c:	d11a      	bne.n	80077a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007774:	4013      	ands	r3, r2
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800777a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800777c:	4293      	cmp	r3, r2
 800777e:	d111      	bne.n	80077a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800778a:	085b      	lsrs	r3, r3, #1
 800778c:	3b01      	subs	r3, #1
 800778e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007790:	429a      	cmp	r2, r3
 8007792:	d107      	bne.n	80077a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d001      	beq.n	80077a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e000      	b.n	80077aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	40023800 	.word	0x40023800

080077b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e0cc      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077cc:	4b68      	ldr	r3, [pc, #416]	@ (8007970 <HAL_RCC_ClockConfig+0x1b8>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0307 	and.w	r3, r3, #7
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d90c      	bls.n	80077f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077da:	4b65      	ldr	r3, [pc, #404]	@ (8007970 <HAL_RCC_ClockConfig+0x1b8>)
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	b2d2      	uxtb	r2, r2
 80077e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077e2:	4b63      	ldr	r3, [pc, #396]	@ (8007970 <HAL_RCC_ClockConfig+0x1b8>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0307 	and.w	r3, r3, #7
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d001      	beq.n	80077f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e0b8      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0302 	and.w	r3, r3, #2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d020      	beq.n	8007842 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0304 	and.w	r3, r3, #4
 8007808:	2b00      	cmp	r3, #0
 800780a:	d005      	beq.n	8007818 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800780c:	4b59      	ldr	r3, [pc, #356]	@ (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	4a58      	ldr	r2, [pc, #352]	@ (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007812:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007816:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0308 	and.w	r3, r3, #8
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007824:	4b53      	ldr	r3, [pc, #332]	@ (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	4a52      	ldr	r2, [pc, #328]	@ (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800782a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800782e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007830:	4b50      	ldr	r3, [pc, #320]	@ (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	494d      	ldr	r1, [pc, #308]	@ (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800783e:	4313      	orrs	r3, r2
 8007840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d044      	beq.n	80078d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d107      	bne.n	8007866 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007856:	4b47      	ldr	r3, [pc, #284]	@ (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d119      	bne.n	8007896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e07f      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2b02      	cmp	r3, #2
 800786c:	d003      	beq.n	8007876 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007872:	2b03      	cmp	r3, #3
 8007874:	d107      	bne.n	8007886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007876:	4b3f      	ldr	r3, [pc, #252]	@ (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d109      	bne.n	8007896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e06f      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007886:	4b3b      	ldr	r3, [pc, #236]	@ (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e067      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007896:	4b37      	ldr	r3, [pc, #220]	@ (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f023 0203 	bic.w	r2, r3, #3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	4934      	ldr	r1, [pc, #208]	@ (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078a8:	f7fc fdc0 	bl	800442c <HAL_GetTick>
 80078ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ae:	e00a      	b.n	80078c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078b0:	f7fc fdbc 	bl	800442c <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078be:	4293      	cmp	r3, r2
 80078c0:	d901      	bls.n	80078c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e04f      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078c6:	4b2b      	ldr	r3, [pc, #172]	@ (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f003 020c 	and.w	r2, r3, #12
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d1eb      	bne.n	80078b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078d8:	4b25      	ldr	r3, [pc, #148]	@ (8007970 <HAL_RCC_ClockConfig+0x1b8>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0307 	and.w	r3, r3, #7
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d20c      	bcs.n	8007900 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078e6:	4b22      	ldr	r3, [pc, #136]	@ (8007970 <HAL_RCC_ClockConfig+0x1b8>)
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	b2d2      	uxtb	r2, r2
 80078ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ee:	4b20      	ldr	r3, [pc, #128]	@ (8007970 <HAL_RCC_ClockConfig+0x1b8>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d001      	beq.n	8007900 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e032      	b.n	8007966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0304 	and.w	r3, r3, #4
 8007908:	2b00      	cmp	r3, #0
 800790a:	d008      	beq.n	800791e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800790c:	4b19      	ldr	r3, [pc, #100]	@ (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	4916      	ldr	r1, [pc, #88]	@ (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800791a:	4313      	orrs	r3, r2
 800791c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 0308 	and.w	r3, r3, #8
 8007926:	2b00      	cmp	r3, #0
 8007928:	d009      	beq.n	800793e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800792a:	4b12      	ldr	r3, [pc, #72]	@ (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	00db      	lsls	r3, r3, #3
 8007938:	490e      	ldr	r1, [pc, #56]	@ (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 800793a:	4313      	orrs	r3, r2
 800793c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800793e:	f000 f821 	bl	8007984 <HAL_RCC_GetSysClockFreq>
 8007942:	4602      	mov	r2, r0
 8007944:	4b0b      	ldr	r3, [pc, #44]	@ (8007974 <HAL_RCC_ClockConfig+0x1bc>)
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	091b      	lsrs	r3, r3, #4
 800794a:	f003 030f 	and.w	r3, r3, #15
 800794e:	490a      	ldr	r1, [pc, #40]	@ (8007978 <HAL_RCC_ClockConfig+0x1c0>)
 8007950:	5ccb      	ldrb	r3, [r1, r3]
 8007952:	fa22 f303 	lsr.w	r3, r2, r3
 8007956:	4a09      	ldr	r2, [pc, #36]	@ (800797c <HAL_RCC_ClockConfig+0x1c4>)
 8007958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800795a:	4b09      	ldr	r3, [pc, #36]	@ (8007980 <HAL_RCC_ClockConfig+0x1c8>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4618      	mov	r0, r3
 8007960:	f7fb fdba 	bl	80034d8 <HAL_InitTick>

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	40023c00 	.word	0x40023c00
 8007974:	40023800 	.word	0x40023800
 8007978:	08021cd4 	.word	0x08021cd4
 800797c:	20000000 	.word	0x20000000
 8007980:	20000004 	.word	0x20000004

08007984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007988:	b090      	sub	sp, #64	@ 0x40
 800798a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007990:	2300      	movs	r3, #0
 8007992:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007994:	2300      	movs	r3, #0
 8007996:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800799c:	4b59      	ldr	r3, [pc, #356]	@ (8007b04 <HAL_RCC_GetSysClockFreq+0x180>)
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f003 030c 	and.w	r3, r3, #12
 80079a4:	2b08      	cmp	r3, #8
 80079a6:	d00d      	beq.n	80079c4 <HAL_RCC_GetSysClockFreq+0x40>
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	f200 80a1 	bhi.w	8007af0 <HAL_RCC_GetSysClockFreq+0x16c>
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <HAL_RCC_GetSysClockFreq+0x34>
 80079b2:	2b04      	cmp	r3, #4
 80079b4:	d003      	beq.n	80079be <HAL_RCC_GetSysClockFreq+0x3a>
 80079b6:	e09b      	b.n	8007af0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079b8:	4b53      	ldr	r3, [pc, #332]	@ (8007b08 <HAL_RCC_GetSysClockFreq+0x184>)
 80079ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80079bc:	e09b      	b.n	8007af6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079be:	4b53      	ldr	r3, [pc, #332]	@ (8007b0c <HAL_RCC_GetSysClockFreq+0x188>)
 80079c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80079c2:	e098      	b.n	8007af6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079c4:	4b4f      	ldr	r3, [pc, #316]	@ (8007b04 <HAL_RCC_GetSysClockFreq+0x180>)
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079ce:	4b4d      	ldr	r3, [pc, #308]	@ (8007b04 <HAL_RCC_GetSysClockFreq+0x180>)
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d028      	beq.n	8007a2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079da:	4b4a      	ldr	r3, [pc, #296]	@ (8007b04 <HAL_RCC_GetSysClockFreq+0x180>)
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	099b      	lsrs	r3, r3, #6
 80079e0:	2200      	movs	r2, #0
 80079e2:	623b      	str	r3, [r7, #32]
 80079e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80079ec:	2100      	movs	r1, #0
 80079ee:	4b47      	ldr	r3, [pc, #284]	@ (8007b0c <HAL_RCC_GetSysClockFreq+0x188>)
 80079f0:	fb03 f201 	mul.w	r2, r3, r1
 80079f4:	2300      	movs	r3, #0
 80079f6:	fb00 f303 	mul.w	r3, r0, r3
 80079fa:	4413      	add	r3, r2
 80079fc:	4a43      	ldr	r2, [pc, #268]	@ (8007b0c <HAL_RCC_GetSysClockFreq+0x188>)
 80079fe:	fba0 1202 	umull	r1, r2, r0, r2
 8007a02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a04:	460a      	mov	r2, r1
 8007a06:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007a08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a0a:	4413      	add	r3, r2
 8007a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a10:	2200      	movs	r2, #0
 8007a12:	61bb      	str	r3, [r7, #24]
 8007a14:	61fa      	str	r2, [r7, #28]
 8007a16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007a1e:	f7f8 fc2f 	bl	8000280 <__aeabi_uldivmod>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4613      	mov	r3, r2
 8007a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a2a:	e053      	b.n	8007ad4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a2c:	4b35      	ldr	r3, [pc, #212]	@ (8007b04 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	099b      	lsrs	r3, r3, #6
 8007a32:	2200      	movs	r2, #0
 8007a34:	613b      	str	r3, [r7, #16]
 8007a36:	617a      	str	r2, [r7, #20]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007a3e:	f04f 0b00 	mov.w	fp, #0
 8007a42:	4652      	mov	r2, sl
 8007a44:	465b      	mov	r3, fp
 8007a46:	f04f 0000 	mov.w	r0, #0
 8007a4a:	f04f 0100 	mov.w	r1, #0
 8007a4e:	0159      	lsls	r1, r3, #5
 8007a50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a54:	0150      	lsls	r0, r2, #5
 8007a56:	4602      	mov	r2, r0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	ebb2 080a 	subs.w	r8, r2, sl
 8007a5e:	eb63 090b 	sbc.w	r9, r3, fp
 8007a62:	f04f 0200 	mov.w	r2, #0
 8007a66:	f04f 0300 	mov.w	r3, #0
 8007a6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007a6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007a72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007a76:	ebb2 0408 	subs.w	r4, r2, r8
 8007a7a:	eb63 0509 	sbc.w	r5, r3, r9
 8007a7e:	f04f 0200 	mov.w	r2, #0
 8007a82:	f04f 0300 	mov.w	r3, #0
 8007a86:	00eb      	lsls	r3, r5, #3
 8007a88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a8c:	00e2      	lsls	r2, r4, #3
 8007a8e:	4614      	mov	r4, r2
 8007a90:	461d      	mov	r5, r3
 8007a92:	eb14 030a 	adds.w	r3, r4, sl
 8007a96:	603b      	str	r3, [r7, #0]
 8007a98:	eb45 030b 	adc.w	r3, r5, fp
 8007a9c:	607b      	str	r3, [r7, #4]
 8007a9e:	f04f 0200 	mov.w	r2, #0
 8007aa2:	f04f 0300 	mov.w	r3, #0
 8007aa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007aaa:	4629      	mov	r1, r5
 8007aac:	028b      	lsls	r3, r1, #10
 8007aae:	4621      	mov	r1, r4
 8007ab0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	028a      	lsls	r2, r1, #10
 8007ab8:	4610      	mov	r0, r2
 8007aba:	4619      	mov	r1, r3
 8007abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007abe:	2200      	movs	r2, #0
 8007ac0:	60bb      	str	r3, [r7, #8]
 8007ac2:	60fa      	str	r2, [r7, #12]
 8007ac4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ac8:	f7f8 fbda 	bl	8000280 <__aeabi_uldivmod>
 8007acc:	4602      	mov	r2, r0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8007b04 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	0c1b      	lsrs	r3, r3, #16
 8007ada:	f003 0303 	and.w	r3, r3, #3
 8007ade:	3301      	adds	r3, #1
 8007ae0:	005b      	lsls	r3, r3, #1
 8007ae2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007ae4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007aee:	e002      	b.n	8007af6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007af0:	4b05      	ldr	r3, [pc, #20]	@ (8007b08 <HAL_RCC_GetSysClockFreq+0x184>)
 8007af2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3740      	adds	r7, #64	@ 0x40
 8007afc:	46bd      	mov	sp, r7
 8007afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b02:	bf00      	nop
 8007b04:	40023800 	.word	0x40023800
 8007b08:	00f42400 	.word	0x00f42400
 8007b0c:	017d7840 	.word	0x017d7840

08007b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b10:	b480      	push	{r7}
 8007b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b14:	4b03      	ldr	r3, [pc, #12]	@ (8007b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b16:	681b      	ldr	r3, [r3, #0]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	20000000 	.word	0x20000000

08007b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b2c:	f7ff fff0 	bl	8007b10 <HAL_RCC_GetHCLKFreq>
 8007b30:	4602      	mov	r2, r0
 8007b32:	4b05      	ldr	r3, [pc, #20]	@ (8007b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	0a9b      	lsrs	r3, r3, #10
 8007b38:	f003 0307 	and.w	r3, r3, #7
 8007b3c:	4903      	ldr	r1, [pc, #12]	@ (8007b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b3e:	5ccb      	ldrb	r3, [r1, r3]
 8007b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	40023800 	.word	0x40023800
 8007b4c:	08021ce4 	.word	0x08021ce4

08007b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b54:	f7ff ffdc 	bl	8007b10 <HAL_RCC_GetHCLKFreq>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	4b05      	ldr	r3, [pc, #20]	@ (8007b70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	0b5b      	lsrs	r3, r3, #13
 8007b60:	f003 0307 	and.w	r3, r3, #7
 8007b64:	4903      	ldr	r1, [pc, #12]	@ (8007b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b66:	5ccb      	ldrb	r3, [r1, r3]
 8007b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	40023800 	.word	0x40023800
 8007b74:	08021ce4 	.word	0x08021ce4

08007b78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	220f      	movs	r2, #15
 8007b86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007b88:	4b12      	ldr	r3, [pc, #72]	@ (8007bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f003 0203 	and.w	r2, r3, #3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007b94:	4b0f      	ldr	r3, [pc, #60]	@ (8007bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007bac:	4b09      	ldr	r3, [pc, #36]	@ (8007bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	08db      	lsrs	r3, r3, #3
 8007bb2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007bba:	4b07      	ldr	r3, [pc, #28]	@ (8007bd8 <HAL_RCC_GetClockConfig+0x60>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0207 	and.w	r2, r3, #7
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	601a      	str	r2, [r3, #0]
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	40023800 	.word	0x40023800
 8007bd8:	40023c00 	.word	0x40023c00

08007bdc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e038      	b.n	8007c64 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d106      	bne.n	8007c0c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f7f9 fe52 	bl	80018b0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3308      	adds	r3, #8
 8007c14:	4619      	mov	r1, r3
 8007c16:	4610      	mov	r0, r2
 8007c18:	f000 ffd8 	bl	8008bcc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6818      	ldr	r0, [r3, #0]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	461a      	mov	r2, r3
 8007c26:	68b9      	ldr	r1, [r7, #8]
 8007c28:	f001 f83a 	bl	8008ca0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6858      	ldr	r0, [r3, #4]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c38:	6879      	ldr	r1, [r7, #4]
 8007c3a:	f001 f85f 	bl	8008cfc <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	6892      	ldr	r2, [r2, #8]
 8007c46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	6892      	ldr	r2, [r2, #8]
 8007c52:	f041 0101 	orr.w	r1, r1, #1
 8007c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e041      	b.n	8007d02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d106      	bne.n	8007c98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7fc f836 	bl	8003d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	4619      	mov	r1, r3
 8007caa:	4610      	mov	r0, r2
 8007cac:	f000 f9b6 	bl	800801c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
	...

08007d0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d001      	beq.n	8007d24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e04e      	b.n	8007dc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68da      	ldr	r2, [r3, #12]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f042 0201 	orr.w	r2, r2, #1
 8007d3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a23      	ldr	r2, [pc, #140]	@ (8007dd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d022      	beq.n	8007d8c <HAL_TIM_Base_Start_IT+0x80>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d4e:	d01d      	beq.n	8007d8c <HAL_TIM_Base_Start_IT+0x80>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a1f      	ldr	r2, [pc, #124]	@ (8007dd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d018      	beq.n	8007d8c <HAL_TIM_Base_Start_IT+0x80>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8007dd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d013      	beq.n	8007d8c <HAL_TIM_Base_Start_IT+0x80>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a1c      	ldr	r2, [pc, #112]	@ (8007ddc <HAL_TIM_Base_Start_IT+0xd0>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d00e      	beq.n	8007d8c <HAL_TIM_Base_Start_IT+0x80>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a1b      	ldr	r2, [pc, #108]	@ (8007de0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d009      	beq.n	8007d8c <HAL_TIM_Base_Start_IT+0x80>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a19      	ldr	r2, [pc, #100]	@ (8007de4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d004      	beq.n	8007d8c <HAL_TIM_Base_Start_IT+0x80>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a18      	ldr	r2, [pc, #96]	@ (8007de8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d111      	bne.n	8007db0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f003 0307 	and.w	r3, r3, #7
 8007d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2b06      	cmp	r3, #6
 8007d9c:	d010      	beq.n	8007dc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f042 0201 	orr.w	r2, r2, #1
 8007dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dae:	e007      	b.n	8007dc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f042 0201 	orr.w	r2, r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3714      	adds	r7, #20
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	40010000 	.word	0x40010000
 8007dd4:	40000400 	.word	0x40000400
 8007dd8:	40000800 	.word	0x40000800
 8007ddc:	40000c00 	.word	0x40000c00
 8007de0:	40010400 	.word	0x40010400
 8007de4:	40014000 	.word	0x40014000
 8007de8:	40001800 	.word	0x40001800

08007dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d020      	beq.n	8007e50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d01b      	beq.n	8007e50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f06f 0202 	mvn.w	r2, #2
 8007e20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	f003 0303 	and.w	r3, r3, #3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f8d2 	bl	8007fe0 <HAL_TIM_IC_CaptureCallback>
 8007e3c:	e005      	b.n	8007e4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f8c4 	bl	8007fcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f8d5 	bl	8007ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f003 0304 	and.w	r3, r3, #4
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d020      	beq.n	8007e9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f003 0304 	and.w	r3, r3, #4
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d01b      	beq.n	8007e9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f06f 0204 	mvn.w	r2, #4
 8007e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2202      	movs	r2, #2
 8007e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f8ac 	bl	8007fe0 <HAL_TIM_IC_CaptureCallback>
 8007e88:	e005      	b.n	8007e96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f89e 	bl	8007fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f8af 	bl	8007ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	f003 0308 	and.w	r3, r3, #8
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d020      	beq.n	8007ee8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f003 0308 	and.w	r3, r3, #8
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d01b      	beq.n	8007ee8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f06f 0208 	mvn.w	r2, #8
 8007eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2204      	movs	r2, #4
 8007ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	f003 0303 	and.w	r3, r3, #3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f886 	bl	8007fe0 <HAL_TIM_IC_CaptureCallback>
 8007ed4:	e005      	b.n	8007ee2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f878 	bl	8007fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f889 	bl	8007ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	f003 0310 	and.w	r3, r3, #16
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d020      	beq.n	8007f34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f003 0310 	and.w	r3, r3, #16
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d01b      	beq.n	8007f34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f06f 0210 	mvn.w	r2, #16
 8007f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2208      	movs	r2, #8
 8007f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d003      	beq.n	8007f22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f860 	bl	8007fe0 <HAL_TIM_IC_CaptureCallback>
 8007f20:	e005      	b.n	8007f2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f852 	bl	8007fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f863 	bl	8007ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00c      	beq.n	8007f58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d007      	beq.n	8007f58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f06f 0201 	mvn.w	r2, #1
 8007f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7f9 fdb6 	bl	8001ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00c      	beq.n	8007f7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d007      	beq.n	8007f7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f97c 	bl	8008274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00c      	beq.n	8007fa0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d007      	beq.n	8007fa0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f834 	bl	8008008 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	f003 0320 	and.w	r3, r3, #32
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00c      	beq.n	8007fc4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f003 0320 	and.w	r3, r3, #32
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d007      	beq.n	8007fc4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f06f 0220 	mvn.w	r2, #32
 8007fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f94e 	bl	8008260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fc4:	bf00      	nop
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a43      	ldr	r2, [pc, #268]	@ (800813c <TIM_Base_SetConfig+0x120>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d013      	beq.n	800805c <TIM_Base_SetConfig+0x40>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800803a:	d00f      	beq.n	800805c <TIM_Base_SetConfig+0x40>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a40      	ldr	r2, [pc, #256]	@ (8008140 <TIM_Base_SetConfig+0x124>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d00b      	beq.n	800805c <TIM_Base_SetConfig+0x40>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a3f      	ldr	r2, [pc, #252]	@ (8008144 <TIM_Base_SetConfig+0x128>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d007      	beq.n	800805c <TIM_Base_SetConfig+0x40>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a3e      	ldr	r2, [pc, #248]	@ (8008148 <TIM_Base_SetConfig+0x12c>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d003      	beq.n	800805c <TIM_Base_SetConfig+0x40>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a3d      	ldr	r2, [pc, #244]	@ (800814c <TIM_Base_SetConfig+0x130>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d108      	bne.n	800806e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a32      	ldr	r2, [pc, #200]	@ (800813c <TIM_Base_SetConfig+0x120>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d02b      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800807c:	d027      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a2f      	ldr	r2, [pc, #188]	@ (8008140 <TIM_Base_SetConfig+0x124>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d023      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a2e      	ldr	r2, [pc, #184]	@ (8008144 <TIM_Base_SetConfig+0x128>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d01f      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a2d      	ldr	r2, [pc, #180]	@ (8008148 <TIM_Base_SetConfig+0x12c>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d01b      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a2c      	ldr	r2, [pc, #176]	@ (800814c <TIM_Base_SetConfig+0x130>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d017      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a2b      	ldr	r2, [pc, #172]	@ (8008150 <TIM_Base_SetConfig+0x134>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d013      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a2a      	ldr	r2, [pc, #168]	@ (8008154 <TIM_Base_SetConfig+0x138>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d00f      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a29      	ldr	r2, [pc, #164]	@ (8008158 <TIM_Base_SetConfig+0x13c>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d00b      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a28      	ldr	r2, [pc, #160]	@ (800815c <TIM_Base_SetConfig+0x140>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d007      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a27      	ldr	r2, [pc, #156]	@ (8008160 <TIM_Base_SetConfig+0x144>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d003      	beq.n	80080ce <TIM_Base_SetConfig+0xb2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a26      	ldr	r2, [pc, #152]	@ (8008164 <TIM_Base_SetConfig+0x148>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d108      	bne.n	80080e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	4313      	orrs	r3, r2
 80080de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	689a      	ldr	r2, [r3, #8]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a0e      	ldr	r2, [pc, #56]	@ (800813c <TIM_Base_SetConfig+0x120>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d003      	beq.n	800810e <TIM_Base_SetConfig+0xf2>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a10      	ldr	r2, [pc, #64]	@ (800814c <TIM_Base_SetConfig+0x130>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d103      	bne.n	8008116 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	691a      	ldr	r2, [r3, #16]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f043 0204 	orr.w	r2, r3, #4
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	601a      	str	r2, [r3, #0]
}
 800812e:	bf00      	nop
 8008130:	3714      	adds	r7, #20
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	40010000 	.word	0x40010000
 8008140:	40000400 	.word	0x40000400
 8008144:	40000800 	.word	0x40000800
 8008148:	40000c00 	.word	0x40000c00
 800814c:	40010400 	.word	0x40010400
 8008150:	40014000 	.word	0x40014000
 8008154:	40014400 	.word	0x40014400
 8008158:	40014800 	.word	0x40014800
 800815c:	40001800 	.word	0x40001800
 8008160:	40001c00 	.word	0x40001c00
 8008164:	40002000 	.word	0x40002000

08008168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008178:	2b01      	cmp	r3, #1
 800817a:	d101      	bne.n	8008180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800817c:	2302      	movs	r3, #2
 800817e:	e05a      	b.n	8008236 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2202      	movs	r2, #2
 800818c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a21      	ldr	r2, [pc, #132]	@ (8008244 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d022      	beq.n	800820a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081cc:	d01d      	beq.n	800820a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a1d      	ldr	r2, [pc, #116]	@ (8008248 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d018      	beq.n	800820a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a1b      	ldr	r2, [pc, #108]	@ (800824c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d013      	beq.n	800820a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a1a      	ldr	r2, [pc, #104]	@ (8008250 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d00e      	beq.n	800820a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a18      	ldr	r2, [pc, #96]	@ (8008254 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d009      	beq.n	800820a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a17      	ldr	r2, [pc, #92]	@ (8008258 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d004      	beq.n	800820a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a15      	ldr	r2, [pc, #84]	@ (800825c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d10c      	bne.n	8008224 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008210:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	4313      	orrs	r3, r2
 800821a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	40010000 	.word	0x40010000
 8008248:	40000400 	.word	0x40000400
 800824c:	40000800 	.word	0x40000800
 8008250:	40000c00 	.word	0x40000c00
 8008254:	40010400 	.word	0x40010400
 8008258:	40014000 	.word	0x40014000
 800825c:	40001800 	.word	0x40001800

08008260 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e042      	b.n	8008320 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d106      	bne.n	80082b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7fb fdce 	bl	8003e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2224      	movs	r2, #36	@ 0x24
 80082b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68da      	ldr	r2, [r3, #12]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80082ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fa09 	bl	80086e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	691a      	ldr	r2, [r3, #16]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80082e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	695a      	ldr	r2, [r3, #20]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80082f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68da      	ldr	r2, [r3, #12]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008300:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2220      	movs	r2, #32
 800830c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2220      	movs	r2, #32
 8008314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08a      	sub	sp, #40	@ 0x28
 800832c:	af02      	add	r7, sp, #8
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	603b      	str	r3, [r7, #0]
 8008334:	4613      	mov	r3, r2
 8008336:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b20      	cmp	r3, #32
 8008346:	d175      	bne.n	8008434 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <HAL_UART_Transmit+0x2c>
 800834e:	88fb      	ldrh	r3, [r7, #6]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d101      	bne.n	8008358 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e06e      	b.n	8008436 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2221      	movs	r2, #33	@ 0x21
 8008362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008366:	f7fc f861 	bl	800442c <HAL_GetTick>
 800836a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	88fa      	ldrh	r2, [r7, #6]
 8008370:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	88fa      	ldrh	r2, [r7, #6]
 8008376:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008380:	d108      	bne.n	8008394 <HAL_UART_Transmit+0x6c>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d104      	bne.n	8008394 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800838a:	2300      	movs	r3, #0
 800838c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	61bb      	str	r3, [r7, #24]
 8008392:	e003      	b.n	800839c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008398:	2300      	movs	r3, #0
 800839a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800839c:	e02e      	b.n	80083fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	2200      	movs	r2, #0
 80083a6:	2180      	movs	r1, #128	@ 0x80
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 f8df 	bl	800856c <UART_WaitOnFlagUntilTimeout>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d005      	beq.n	80083c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2220      	movs	r2, #32
 80083b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e03a      	b.n	8008436 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10b      	bne.n	80083de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	881b      	ldrh	r3, [r3, #0]
 80083ca:	461a      	mov	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	3302      	adds	r3, #2
 80083da:	61bb      	str	r3, [r7, #24]
 80083dc:	e007      	b.n	80083ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	781a      	ldrb	r2, [r3, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	3301      	adds	r3, #1
 80083ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	3b01      	subs	r3, #1
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008400:	b29b      	uxth	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1cb      	bne.n	800839e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2200      	movs	r2, #0
 800840e:	2140      	movs	r1, #64	@ 0x40
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f000 f8ab 	bl	800856c <UART_WaitOnFlagUntilTimeout>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d005      	beq.n	8008428 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2220      	movs	r2, #32
 8008420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e006      	b.n	8008436 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2220      	movs	r2, #32
 800842c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	e000      	b.n	8008436 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008434:	2302      	movs	r3, #2
  }
}
 8008436:	4618      	mov	r0, r3
 8008438:	3720      	adds	r7, #32
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b08a      	sub	sp, #40	@ 0x28
 8008442:	af02      	add	r7, sp, #8
 8008444:	60f8      	str	r0, [r7, #12]
 8008446:	60b9      	str	r1, [r7, #8]
 8008448:	603b      	str	r3, [r7, #0]
 800844a:	4613      	mov	r3, r2
 800844c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b20      	cmp	r3, #32
 800845c:	f040 8081 	bne.w	8008562 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d002      	beq.n	800846c <HAL_UART_Receive+0x2e>
 8008466:	88fb      	ldrh	r3, [r7, #6]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d101      	bne.n	8008470 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e079      	b.n	8008564 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2222      	movs	r2, #34	@ 0x22
 800847a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008484:	f7fb ffd2 	bl	800442c <HAL_GetTick>
 8008488:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	88fa      	ldrh	r2, [r7, #6]
 800848e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	88fa      	ldrh	r2, [r7, #6]
 8008494:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800849e:	d108      	bne.n	80084b2 <HAL_UART_Receive+0x74>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d104      	bne.n	80084b2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80084a8:	2300      	movs	r3, #0
 80084aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	61bb      	str	r3, [r7, #24]
 80084b0:	e003      	b.n	80084ba <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084b6:	2300      	movs	r3, #0
 80084b8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80084ba:	e047      	b.n	800854c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	2200      	movs	r2, #0
 80084c4:	2120      	movs	r1, #32
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f000 f850 	bl	800856c <UART_WaitOnFlagUntilTimeout>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d005      	beq.n	80084de <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2220      	movs	r2, #32
 80084d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e042      	b.n	8008564 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10c      	bne.n	80084fe <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	3302      	adds	r3, #2
 80084fa:	61bb      	str	r3, [r7, #24]
 80084fc:	e01f      	b.n	800853e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008506:	d007      	beq.n	8008518 <HAL_UART_Receive+0xda>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10a      	bne.n	8008526 <HAL_UART_Receive+0xe8>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d106      	bne.n	8008526 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	b2da      	uxtb	r2, r3
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	701a      	strb	r2, [r3, #0]
 8008524:	e008      	b.n	8008538 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	b2db      	uxtb	r3, r3
 800852e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008532:	b2da      	uxtb	r2, r3
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	3301      	adds	r3, #1
 800853c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008542:	b29b      	uxth	r3, r3
 8008544:	3b01      	subs	r3, #1
 8008546:	b29a      	uxth	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008550:	b29b      	uxth	r3, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1b2      	bne.n	80084bc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2220      	movs	r2, #32
 800855a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	e000      	b.n	8008564 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008562:	2302      	movs	r3, #2
  }
}
 8008564:	4618      	mov	r0, r3
 8008566:	3720      	adds	r7, #32
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	603b      	str	r3, [r7, #0]
 8008578:	4613      	mov	r3, r2
 800857a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800857c:	e03b      	b.n	80085f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008584:	d037      	beq.n	80085f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008586:	f7fb ff51 	bl	800442c <HAL_GetTick>
 800858a:	4602      	mov	r2, r0
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	6a3a      	ldr	r2, [r7, #32]
 8008592:	429a      	cmp	r2, r3
 8008594:	d302      	bcc.n	800859c <UART_WaitOnFlagUntilTimeout+0x30>
 8008596:	6a3b      	ldr	r3, [r7, #32]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d101      	bne.n	80085a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e03a      	b.n	8008616 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	f003 0304 	and.w	r3, r3, #4
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d023      	beq.n	80085f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2b80      	cmp	r3, #128	@ 0x80
 80085b2:	d020      	beq.n	80085f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2b40      	cmp	r3, #64	@ 0x40
 80085b8:	d01d      	beq.n	80085f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 0308 	and.w	r3, r3, #8
 80085c4:	2b08      	cmp	r3, #8
 80085c6:	d116      	bne.n	80085f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80085c8:	2300      	movs	r3, #0
 80085ca:	617b      	str	r3, [r7, #20]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	617b      	str	r3, [r7, #20]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	617b      	str	r3, [r7, #20]
 80085dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f000 f81d 	bl	800861e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2208      	movs	r2, #8
 80085e8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e00f      	b.n	8008616 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	4013      	ands	r3, r2
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	429a      	cmp	r2, r3
 8008604:	bf0c      	ite	eq
 8008606:	2301      	moveq	r3, #1
 8008608:	2300      	movne	r3, #0
 800860a:	b2db      	uxtb	r3, r3
 800860c:	461a      	mov	r2, r3
 800860e:	79fb      	ldrb	r3, [r7, #7]
 8008610:	429a      	cmp	r2, r3
 8008612:	d0b4      	beq.n	800857e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3718      	adds	r7, #24
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800861e:	b480      	push	{r7}
 8008620:	b095      	sub	sp, #84	@ 0x54
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	330c      	adds	r3, #12
 800862c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008630:	e853 3f00 	ldrex	r3, [r3]
 8008634:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008638:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800863c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	330c      	adds	r3, #12
 8008644:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008646:	643a      	str	r2, [r7, #64]	@ 0x40
 8008648:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800864c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800864e:	e841 2300 	strex	r3, r2, [r1]
 8008652:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1e5      	bne.n	8008626 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3314      	adds	r3, #20
 8008660:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	e853 3f00 	ldrex	r3, [r3]
 8008668:	61fb      	str	r3, [r7, #28]
   return(result);
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	f023 0301 	bic.w	r3, r3, #1
 8008670:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	3314      	adds	r3, #20
 8008678:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800867a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800867c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008680:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008682:	e841 2300 	strex	r3, r2, [r1]
 8008686:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1e5      	bne.n	800865a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008692:	2b01      	cmp	r3, #1
 8008694:	d119      	bne.n	80086ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	330c      	adds	r3, #12
 800869c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	e853 3f00 	ldrex	r3, [r3]
 80086a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	f023 0310 	bic.w	r3, r3, #16
 80086ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	330c      	adds	r3, #12
 80086b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086b6:	61ba      	str	r2, [r7, #24]
 80086b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ba:	6979      	ldr	r1, [r7, #20]
 80086bc:	69ba      	ldr	r2, [r7, #24]
 80086be:	e841 2300 	strex	r3, r2, [r1]
 80086c2:	613b      	str	r3, [r7, #16]
   return(result);
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1e5      	bne.n	8008696 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2220      	movs	r2, #32
 80086ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80086d8:	bf00      	nop
 80086da:	3754      	adds	r7, #84	@ 0x54
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086e8:	b0c0      	sub	sp, #256	@ 0x100
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80086fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008700:	68d9      	ldr	r1, [r3, #12]
 8008702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	ea40 0301 	orr.w	r3, r0, r1
 800870c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800870e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008712:	689a      	ldr	r2, [r3, #8]
 8008714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	431a      	orrs	r2, r3
 800871c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	431a      	orrs	r2, r3
 8008724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008728:	69db      	ldr	r3, [r3, #28]
 800872a:	4313      	orrs	r3, r2
 800872c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800873c:	f021 010c 	bic.w	r1, r1, #12
 8008740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800874a:	430b      	orrs	r3, r1
 800874c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800874e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800875a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800875e:	6999      	ldr	r1, [r3, #24]
 8008760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	ea40 0301 	orr.w	r3, r0, r1
 800876a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800876c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	4b8f      	ldr	r3, [pc, #572]	@ (80089b0 <UART_SetConfig+0x2cc>)
 8008774:	429a      	cmp	r2, r3
 8008776:	d005      	beq.n	8008784 <UART_SetConfig+0xa0>
 8008778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	4b8d      	ldr	r3, [pc, #564]	@ (80089b4 <UART_SetConfig+0x2d0>)
 8008780:	429a      	cmp	r2, r3
 8008782:	d104      	bne.n	800878e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008784:	f7ff f9e4 	bl	8007b50 <HAL_RCC_GetPCLK2Freq>
 8008788:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800878c:	e003      	b.n	8008796 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800878e:	f7ff f9cb 	bl	8007b28 <HAL_RCC_GetPCLK1Freq>
 8008792:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087a0:	f040 810c 	bne.w	80089bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087a8:	2200      	movs	r2, #0
 80087aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80087ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80087b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80087b6:	4622      	mov	r2, r4
 80087b8:	462b      	mov	r3, r5
 80087ba:	1891      	adds	r1, r2, r2
 80087bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80087be:	415b      	adcs	r3, r3
 80087c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80087c6:	4621      	mov	r1, r4
 80087c8:	eb12 0801 	adds.w	r8, r2, r1
 80087cc:	4629      	mov	r1, r5
 80087ce:	eb43 0901 	adc.w	r9, r3, r1
 80087d2:	f04f 0200 	mov.w	r2, #0
 80087d6:	f04f 0300 	mov.w	r3, #0
 80087da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087e6:	4690      	mov	r8, r2
 80087e8:	4699      	mov	r9, r3
 80087ea:	4623      	mov	r3, r4
 80087ec:	eb18 0303 	adds.w	r3, r8, r3
 80087f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80087f4:	462b      	mov	r3, r5
 80087f6:	eb49 0303 	adc.w	r3, r9, r3
 80087fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80087fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800880a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800880e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008812:	460b      	mov	r3, r1
 8008814:	18db      	adds	r3, r3, r3
 8008816:	653b      	str	r3, [r7, #80]	@ 0x50
 8008818:	4613      	mov	r3, r2
 800881a:	eb42 0303 	adc.w	r3, r2, r3
 800881e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008820:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008824:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008828:	f7f7 fd2a 	bl	8000280 <__aeabi_uldivmod>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4b61      	ldr	r3, [pc, #388]	@ (80089b8 <UART_SetConfig+0x2d4>)
 8008832:	fba3 2302 	umull	r2, r3, r3, r2
 8008836:	095b      	lsrs	r3, r3, #5
 8008838:	011c      	lsls	r4, r3, #4
 800883a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800883e:	2200      	movs	r2, #0
 8008840:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008844:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008848:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800884c:	4642      	mov	r2, r8
 800884e:	464b      	mov	r3, r9
 8008850:	1891      	adds	r1, r2, r2
 8008852:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008854:	415b      	adcs	r3, r3
 8008856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008858:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800885c:	4641      	mov	r1, r8
 800885e:	eb12 0a01 	adds.w	sl, r2, r1
 8008862:	4649      	mov	r1, r9
 8008864:	eb43 0b01 	adc.w	fp, r3, r1
 8008868:	f04f 0200 	mov.w	r2, #0
 800886c:	f04f 0300 	mov.w	r3, #0
 8008870:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008874:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008878:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800887c:	4692      	mov	sl, r2
 800887e:	469b      	mov	fp, r3
 8008880:	4643      	mov	r3, r8
 8008882:	eb1a 0303 	adds.w	r3, sl, r3
 8008886:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800888a:	464b      	mov	r3, r9
 800888c:	eb4b 0303 	adc.w	r3, fp, r3
 8008890:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80088a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80088a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80088a8:	460b      	mov	r3, r1
 80088aa:	18db      	adds	r3, r3, r3
 80088ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80088ae:	4613      	mov	r3, r2
 80088b0:	eb42 0303 	adc.w	r3, r2, r3
 80088b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80088b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80088ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80088be:	f7f7 fcdf 	bl	8000280 <__aeabi_uldivmod>
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	4611      	mov	r1, r2
 80088c8:	4b3b      	ldr	r3, [pc, #236]	@ (80089b8 <UART_SetConfig+0x2d4>)
 80088ca:	fba3 2301 	umull	r2, r3, r3, r1
 80088ce:	095b      	lsrs	r3, r3, #5
 80088d0:	2264      	movs	r2, #100	@ 0x64
 80088d2:	fb02 f303 	mul.w	r3, r2, r3
 80088d6:	1acb      	subs	r3, r1, r3
 80088d8:	00db      	lsls	r3, r3, #3
 80088da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80088de:	4b36      	ldr	r3, [pc, #216]	@ (80089b8 <UART_SetConfig+0x2d4>)
 80088e0:	fba3 2302 	umull	r2, r3, r3, r2
 80088e4:	095b      	lsrs	r3, r3, #5
 80088e6:	005b      	lsls	r3, r3, #1
 80088e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80088ec:	441c      	add	r4, r3
 80088ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088f2:	2200      	movs	r2, #0
 80088f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80088f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80088fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008900:	4642      	mov	r2, r8
 8008902:	464b      	mov	r3, r9
 8008904:	1891      	adds	r1, r2, r2
 8008906:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008908:	415b      	adcs	r3, r3
 800890a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800890c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008910:	4641      	mov	r1, r8
 8008912:	1851      	adds	r1, r2, r1
 8008914:	6339      	str	r1, [r7, #48]	@ 0x30
 8008916:	4649      	mov	r1, r9
 8008918:	414b      	adcs	r3, r1
 800891a:	637b      	str	r3, [r7, #52]	@ 0x34
 800891c:	f04f 0200 	mov.w	r2, #0
 8008920:	f04f 0300 	mov.w	r3, #0
 8008924:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008928:	4659      	mov	r1, fp
 800892a:	00cb      	lsls	r3, r1, #3
 800892c:	4651      	mov	r1, sl
 800892e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008932:	4651      	mov	r1, sl
 8008934:	00ca      	lsls	r2, r1, #3
 8008936:	4610      	mov	r0, r2
 8008938:	4619      	mov	r1, r3
 800893a:	4603      	mov	r3, r0
 800893c:	4642      	mov	r2, r8
 800893e:	189b      	adds	r3, r3, r2
 8008940:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008944:	464b      	mov	r3, r9
 8008946:	460a      	mov	r2, r1
 8008948:	eb42 0303 	adc.w	r3, r2, r3
 800894c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800895c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008960:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008964:	460b      	mov	r3, r1
 8008966:	18db      	adds	r3, r3, r3
 8008968:	62bb      	str	r3, [r7, #40]	@ 0x28
 800896a:	4613      	mov	r3, r2
 800896c:	eb42 0303 	adc.w	r3, r2, r3
 8008970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008972:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008976:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800897a:	f7f7 fc81 	bl	8000280 <__aeabi_uldivmod>
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	4b0d      	ldr	r3, [pc, #52]	@ (80089b8 <UART_SetConfig+0x2d4>)
 8008984:	fba3 1302 	umull	r1, r3, r3, r2
 8008988:	095b      	lsrs	r3, r3, #5
 800898a:	2164      	movs	r1, #100	@ 0x64
 800898c:	fb01 f303 	mul.w	r3, r1, r3
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	00db      	lsls	r3, r3, #3
 8008994:	3332      	adds	r3, #50	@ 0x32
 8008996:	4a08      	ldr	r2, [pc, #32]	@ (80089b8 <UART_SetConfig+0x2d4>)
 8008998:	fba2 2303 	umull	r2, r3, r2, r3
 800899c:	095b      	lsrs	r3, r3, #5
 800899e:	f003 0207 	and.w	r2, r3, #7
 80089a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4422      	add	r2, r4
 80089aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80089ac:	e106      	b.n	8008bbc <UART_SetConfig+0x4d8>
 80089ae:	bf00      	nop
 80089b0:	40011000 	.word	0x40011000
 80089b4:	40011400 	.word	0x40011400
 80089b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089c0:	2200      	movs	r2, #0
 80089c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80089c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80089ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80089ce:	4642      	mov	r2, r8
 80089d0:	464b      	mov	r3, r9
 80089d2:	1891      	adds	r1, r2, r2
 80089d4:	6239      	str	r1, [r7, #32]
 80089d6:	415b      	adcs	r3, r3
 80089d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80089da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089de:	4641      	mov	r1, r8
 80089e0:	1854      	adds	r4, r2, r1
 80089e2:	4649      	mov	r1, r9
 80089e4:	eb43 0501 	adc.w	r5, r3, r1
 80089e8:	f04f 0200 	mov.w	r2, #0
 80089ec:	f04f 0300 	mov.w	r3, #0
 80089f0:	00eb      	lsls	r3, r5, #3
 80089f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80089f6:	00e2      	lsls	r2, r4, #3
 80089f8:	4614      	mov	r4, r2
 80089fa:	461d      	mov	r5, r3
 80089fc:	4643      	mov	r3, r8
 80089fe:	18e3      	adds	r3, r4, r3
 8008a00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008a04:	464b      	mov	r3, r9
 8008a06:	eb45 0303 	adc.w	r3, r5, r3
 8008a0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008a1e:	f04f 0200 	mov.w	r2, #0
 8008a22:	f04f 0300 	mov.w	r3, #0
 8008a26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	008b      	lsls	r3, r1, #2
 8008a2e:	4621      	mov	r1, r4
 8008a30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a34:	4621      	mov	r1, r4
 8008a36:	008a      	lsls	r2, r1, #2
 8008a38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008a3c:	f7f7 fc20 	bl	8000280 <__aeabi_uldivmod>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	4b60      	ldr	r3, [pc, #384]	@ (8008bc8 <UART_SetConfig+0x4e4>)
 8008a46:	fba3 2302 	umull	r2, r3, r3, r2
 8008a4a:	095b      	lsrs	r3, r3, #5
 8008a4c:	011c      	lsls	r4, r3, #4
 8008a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a52:	2200      	movs	r2, #0
 8008a54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008a58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008a5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008a60:	4642      	mov	r2, r8
 8008a62:	464b      	mov	r3, r9
 8008a64:	1891      	adds	r1, r2, r2
 8008a66:	61b9      	str	r1, [r7, #24]
 8008a68:	415b      	adcs	r3, r3
 8008a6a:	61fb      	str	r3, [r7, #28]
 8008a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a70:	4641      	mov	r1, r8
 8008a72:	1851      	adds	r1, r2, r1
 8008a74:	6139      	str	r1, [r7, #16]
 8008a76:	4649      	mov	r1, r9
 8008a78:	414b      	adcs	r3, r1
 8008a7a:	617b      	str	r3, [r7, #20]
 8008a7c:	f04f 0200 	mov.w	r2, #0
 8008a80:	f04f 0300 	mov.w	r3, #0
 8008a84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a88:	4659      	mov	r1, fp
 8008a8a:	00cb      	lsls	r3, r1, #3
 8008a8c:	4651      	mov	r1, sl
 8008a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a92:	4651      	mov	r1, sl
 8008a94:	00ca      	lsls	r2, r1, #3
 8008a96:	4610      	mov	r0, r2
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	4642      	mov	r2, r8
 8008a9e:	189b      	adds	r3, r3, r2
 8008aa0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008aa4:	464b      	mov	r3, r9
 8008aa6:	460a      	mov	r2, r1
 8008aa8:	eb42 0303 	adc.w	r3, r2, r3
 8008aac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008aba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008abc:	f04f 0200 	mov.w	r2, #0
 8008ac0:	f04f 0300 	mov.w	r3, #0
 8008ac4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008ac8:	4649      	mov	r1, r9
 8008aca:	008b      	lsls	r3, r1, #2
 8008acc:	4641      	mov	r1, r8
 8008ace:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ad2:	4641      	mov	r1, r8
 8008ad4:	008a      	lsls	r2, r1, #2
 8008ad6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008ada:	f7f7 fbd1 	bl	8000280 <__aeabi_uldivmod>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	4b38      	ldr	r3, [pc, #224]	@ (8008bc8 <UART_SetConfig+0x4e4>)
 8008ae6:	fba3 2301 	umull	r2, r3, r3, r1
 8008aea:	095b      	lsrs	r3, r3, #5
 8008aec:	2264      	movs	r2, #100	@ 0x64
 8008aee:	fb02 f303 	mul.w	r3, r2, r3
 8008af2:	1acb      	subs	r3, r1, r3
 8008af4:	011b      	lsls	r3, r3, #4
 8008af6:	3332      	adds	r3, #50	@ 0x32
 8008af8:	4a33      	ldr	r2, [pc, #204]	@ (8008bc8 <UART_SetConfig+0x4e4>)
 8008afa:	fba2 2303 	umull	r2, r3, r2, r3
 8008afe:	095b      	lsrs	r3, r3, #5
 8008b00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008b04:	441c      	add	r4, r3
 8008b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8008b0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008b10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008b14:	4642      	mov	r2, r8
 8008b16:	464b      	mov	r3, r9
 8008b18:	1891      	adds	r1, r2, r2
 8008b1a:	60b9      	str	r1, [r7, #8]
 8008b1c:	415b      	adcs	r3, r3
 8008b1e:	60fb      	str	r3, [r7, #12]
 8008b20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b24:	4641      	mov	r1, r8
 8008b26:	1851      	adds	r1, r2, r1
 8008b28:	6039      	str	r1, [r7, #0]
 8008b2a:	4649      	mov	r1, r9
 8008b2c:	414b      	adcs	r3, r1
 8008b2e:	607b      	str	r3, [r7, #4]
 8008b30:	f04f 0200 	mov.w	r2, #0
 8008b34:	f04f 0300 	mov.w	r3, #0
 8008b38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008b3c:	4659      	mov	r1, fp
 8008b3e:	00cb      	lsls	r3, r1, #3
 8008b40:	4651      	mov	r1, sl
 8008b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b46:	4651      	mov	r1, sl
 8008b48:	00ca      	lsls	r2, r1, #3
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	4603      	mov	r3, r0
 8008b50:	4642      	mov	r2, r8
 8008b52:	189b      	adds	r3, r3, r2
 8008b54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b56:	464b      	mov	r3, r9
 8008b58:	460a      	mov	r2, r1
 8008b5a:	eb42 0303 	adc.w	r3, r2, r3
 8008b5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8008b6c:	f04f 0200 	mov.w	r2, #0
 8008b70:	f04f 0300 	mov.w	r3, #0
 8008b74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008b78:	4649      	mov	r1, r9
 8008b7a:	008b      	lsls	r3, r1, #2
 8008b7c:	4641      	mov	r1, r8
 8008b7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b82:	4641      	mov	r1, r8
 8008b84:	008a      	lsls	r2, r1, #2
 8008b86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008b8a:	f7f7 fb79 	bl	8000280 <__aeabi_uldivmod>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	460b      	mov	r3, r1
 8008b92:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc8 <UART_SetConfig+0x4e4>)
 8008b94:	fba3 1302 	umull	r1, r3, r3, r2
 8008b98:	095b      	lsrs	r3, r3, #5
 8008b9a:	2164      	movs	r1, #100	@ 0x64
 8008b9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	011b      	lsls	r3, r3, #4
 8008ba4:	3332      	adds	r3, #50	@ 0x32
 8008ba6:	4a08      	ldr	r2, [pc, #32]	@ (8008bc8 <UART_SetConfig+0x4e4>)
 8008ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bac:	095b      	lsrs	r3, r3, #5
 8008bae:	f003 020f 	and.w	r2, r3, #15
 8008bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4422      	add	r2, r4
 8008bba:	609a      	str	r2, [r3, #8]
}
 8008bbc:	bf00      	nop
 8008bbe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bc8:	51eb851f 	.word	0x51eb851f

08008bcc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b087      	sub	sp, #28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be0:	683a      	ldr	r2, [r7, #0]
 8008be2:	6812      	ldr	r2, [r2, #0]
 8008be4:	f023 0101 	bic.w	r1, r3, #1
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	2b08      	cmp	r3, #8
 8008bf4:	d102      	bne.n	8008bfc <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008bf6:	2340      	movs	r3, #64	@ 0x40
 8008bf8:	617b      	str	r3, [r7, #20]
 8008bfa:	e001      	b.n	8008c00 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008c0c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008c12:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008c18:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008c1e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8008c24:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8008c2a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8008c30:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8008c36:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8008c3c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8008c42:	4313      	orrs	r3, r2
 8008c44:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8008c5a:	4b10      	ldr	r3, [pc, #64]	@ (8008c9c <FSMC_NORSRAM_Init+0xd0>)
 8008c5c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008c64:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8008c6c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	43db      	mvns	r3, r3
 8008c7c:	ea02 0103 	and.w	r1, r2, r3
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	4319      	orrs	r1, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	371c      	adds	r7, #28
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr
 8008c9c:	0008fb7f 	.word	0x0008fb7f

08008ca0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8008cb6:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8008cbe:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8008cc6:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8008cd0:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	3b02      	subs	r3, #2
 8008cd8:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8008cda:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8008ce6:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
 8008d08:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d10:	d11d      	bne.n	8008d4e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d1a:	4b13      	ldr	r3, [pc, #76]	@ (8008d68 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	6811      	ldr	r1, [r2, #0]
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	6852      	ldr	r2, [r2, #4]
 8008d26:	0112      	lsls	r2, r2, #4
 8008d28:	4311      	orrs	r1, r2
 8008d2a:	68ba      	ldr	r2, [r7, #8]
 8008d2c:	6892      	ldr	r2, [r2, #8]
 8008d2e:	0212      	lsls	r2, r2, #8
 8008d30:	4311      	orrs	r1, r2
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	6992      	ldr	r2, [r2, #24]
 8008d36:	4311      	orrs	r1, r2
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	68d2      	ldr	r2, [r2, #12]
 8008d3c:	0412      	lsls	r2, r2, #16
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	ea43 0102 	orr.w	r1, r3, r2
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008d4c:	e005      	b.n	8008d5a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8008d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3714      	adds	r7, #20
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	cff00000 	.word	0xcff00000

08008d6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	f107 001c 	add.w	r0, r7, #28
 8008d7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d7e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d123      	bne.n	8008dce <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008d9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008dae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d105      	bne.n	8008dc2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f001 fae8 	bl	800a398 <USB_CoreReset>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	73fb      	strb	r3, [r7, #15]
 8008dcc:	e01b      	b.n	8008e06 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f001 fadc 	bl	800a398 <USB_CoreReset>
 8008de0:	4603      	mov	r3, r0
 8008de2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008de4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d106      	bne.n	8008dfa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	639a      	str	r2, [r3, #56]	@ 0x38
 8008df8:	e005      	b.n	8008e06 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dfe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008e06:	7fbb      	ldrb	r3, [r7, #30]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d10b      	bne.n	8008e24 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	f043 0206 	orr.w	r2, r3, #6
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f043 0220 	orr.w	r2, r3, #32
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e30:	b004      	add	sp, #16
 8008e32:	4770      	bx	lr

08008e34 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b087      	sub	sp, #28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008e42:	79fb      	ldrb	r3, [r7, #7]
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d165      	bne.n	8008f14 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	4a41      	ldr	r2, [pc, #260]	@ (8008f50 <USB_SetTurnaroundTime+0x11c>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d906      	bls.n	8008e5e <USB_SetTurnaroundTime+0x2a>
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	4a40      	ldr	r2, [pc, #256]	@ (8008f54 <USB_SetTurnaroundTime+0x120>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d202      	bcs.n	8008e5e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008e58:	230f      	movs	r3, #15
 8008e5a:	617b      	str	r3, [r7, #20]
 8008e5c:	e062      	b.n	8008f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	4a3c      	ldr	r2, [pc, #240]	@ (8008f54 <USB_SetTurnaroundTime+0x120>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d306      	bcc.n	8008e74 <USB_SetTurnaroundTime+0x40>
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	4a3b      	ldr	r2, [pc, #236]	@ (8008f58 <USB_SetTurnaroundTime+0x124>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d202      	bcs.n	8008e74 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008e6e:	230e      	movs	r3, #14
 8008e70:	617b      	str	r3, [r7, #20]
 8008e72:	e057      	b.n	8008f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	4a38      	ldr	r2, [pc, #224]	@ (8008f58 <USB_SetTurnaroundTime+0x124>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d306      	bcc.n	8008e8a <USB_SetTurnaroundTime+0x56>
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	4a37      	ldr	r2, [pc, #220]	@ (8008f5c <USB_SetTurnaroundTime+0x128>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d202      	bcs.n	8008e8a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008e84:	230d      	movs	r3, #13
 8008e86:	617b      	str	r3, [r7, #20]
 8008e88:	e04c      	b.n	8008f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	4a33      	ldr	r2, [pc, #204]	@ (8008f5c <USB_SetTurnaroundTime+0x128>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d306      	bcc.n	8008ea0 <USB_SetTurnaroundTime+0x6c>
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	4a32      	ldr	r2, [pc, #200]	@ (8008f60 <USB_SetTurnaroundTime+0x12c>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d802      	bhi.n	8008ea0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008e9a:	230c      	movs	r3, #12
 8008e9c:	617b      	str	r3, [r7, #20]
 8008e9e:	e041      	b.n	8008f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	4a2f      	ldr	r2, [pc, #188]	@ (8008f60 <USB_SetTurnaroundTime+0x12c>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d906      	bls.n	8008eb6 <USB_SetTurnaroundTime+0x82>
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	4a2e      	ldr	r2, [pc, #184]	@ (8008f64 <USB_SetTurnaroundTime+0x130>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d802      	bhi.n	8008eb6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008eb0:	230b      	movs	r3, #11
 8008eb2:	617b      	str	r3, [r7, #20]
 8008eb4:	e036      	b.n	8008f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8008f64 <USB_SetTurnaroundTime+0x130>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d906      	bls.n	8008ecc <USB_SetTurnaroundTime+0x98>
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	4a29      	ldr	r2, [pc, #164]	@ (8008f68 <USB_SetTurnaroundTime+0x134>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d802      	bhi.n	8008ecc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008ec6:	230a      	movs	r3, #10
 8008ec8:	617b      	str	r3, [r7, #20]
 8008eca:	e02b      	b.n	8008f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	4a26      	ldr	r2, [pc, #152]	@ (8008f68 <USB_SetTurnaroundTime+0x134>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d906      	bls.n	8008ee2 <USB_SetTurnaroundTime+0xae>
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	4a25      	ldr	r2, [pc, #148]	@ (8008f6c <USB_SetTurnaroundTime+0x138>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d202      	bcs.n	8008ee2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008edc:	2309      	movs	r3, #9
 8008ede:	617b      	str	r3, [r7, #20]
 8008ee0:	e020      	b.n	8008f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	4a21      	ldr	r2, [pc, #132]	@ (8008f6c <USB_SetTurnaroundTime+0x138>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d306      	bcc.n	8008ef8 <USB_SetTurnaroundTime+0xc4>
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	4a20      	ldr	r2, [pc, #128]	@ (8008f70 <USB_SetTurnaroundTime+0x13c>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d802      	bhi.n	8008ef8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008ef2:	2308      	movs	r3, #8
 8008ef4:	617b      	str	r3, [r7, #20]
 8008ef6:	e015      	b.n	8008f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	4a1d      	ldr	r2, [pc, #116]	@ (8008f70 <USB_SetTurnaroundTime+0x13c>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d906      	bls.n	8008f0e <USB_SetTurnaroundTime+0xda>
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	4a1c      	ldr	r2, [pc, #112]	@ (8008f74 <USB_SetTurnaroundTime+0x140>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d202      	bcs.n	8008f0e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008f08:	2307      	movs	r3, #7
 8008f0a:	617b      	str	r3, [r7, #20]
 8008f0c:	e00a      	b.n	8008f24 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008f0e:	2306      	movs	r3, #6
 8008f10:	617b      	str	r3, [r7, #20]
 8008f12:	e007      	b.n	8008f24 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008f14:	79fb      	ldrb	r3, [r7, #7]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d102      	bne.n	8008f20 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008f1a:	2309      	movs	r3, #9
 8008f1c:	617b      	str	r3, [r7, #20]
 8008f1e:	e001      	b.n	8008f24 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008f20:	2309      	movs	r3, #9
 8008f22:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	68da      	ldr	r2, [r3, #12]
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	029b      	lsls	r3, r3, #10
 8008f38:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008f3c:	431a      	orrs	r2, r3
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	371c      	adds	r7, #28
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	00d8acbf 	.word	0x00d8acbf
 8008f54:	00e4e1c0 	.word	0x00e4e1c0
 8008f58:	00f42400 	.word	0x00f42400
 8008f5c:	01067380 	.word	0x01067380
 8008f60:	011a499f 	.word	0x011a499f
 8008f64:	01312cff 	.word	0x01312cff
 8008f68:	014ca43f 	.word	0x014ca43f
 8008f6c:	016e3600 	.word	0x016e3600
 8008f70:	01a6ab1f 	.word	0x01a6ab1f
 8008f74:	01e84800 	.word	0x01e84800

08008f78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f043 0201 	orr.w	r2, r3, #1
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr

08008f9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f9a:	b480      	push	{r7}
 8008f9c:	b083      	sub	sp, #12
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	f023 0201 	bic.w	r2, r3, #1
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008fd8:	78fb      	ldrb	r3, [r7, #3]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d115      	bne.n	800900a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008fea:	200a      	movs	r0, #10
 8008fec:	f7fb fa2a 	bl	8004444 <HAL_Delay>
      ms += 10U;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	330a      	adds	r3, #10
 8008ff4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f001 f93f 	bl	800a27a <USB_GetMode>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d01e      	beq.n	8009040 <USB_SetCurrentMode+0x84>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2bc7      	cmp	r3, #199	@ 0xc7
 8009006:	d9f0      	bls.n	8008fea <USB_SetCurrentMode+0x2e>
 8009008:	e01a      	b.n	8009040 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800900a:	78fb      	ldrb	r3, [r7, #3]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d115      	bne.n	800903c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800901c:	200a      	movs	r0, #10
 800901e:	f7fb fa11 	bl	8004444 <HAL_Delay>
      ms += 10U;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	330a      	adds	r3, #10
 8009026:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f001 f926 	bl	800a27a <USB_GetMode>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d005      	beq.n	8009040 <USB_SetCurrentMode+0x84>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2bc7      	cmp	r3, #199	@ 0xc7
 8009038:	d9f0      	bls.n	800901c <USB_SetCurrentMode+0x60>
 800903a:	e001      	b.n	8009040 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	e005      	b.n	800904c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2bc8      	cmp	r3, #200	@ 0xc8
 8009044:	d101      	bne.n	800904a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e000      	b.n	800904c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009054:	b084      	sub	sp, #16
 8009056:	b580      	push	{r7, lr}
 8009058:	b086      	sub	sp, #24
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009062:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800906e:	2300      	movs	r3, #0
 8009070:	613b      	str	r3, [r7, #16]
 8009072:	e009      	b.n	8009088 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	3340      	adds	r3, #64	@ 0x40
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	4413      	add	r3, r2
 800907e:	2200      	movs	r2, #0
 8009080:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	3301      	adds	r3, #1
 8009086:	613b      	str	r3, [r7, #16]
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	2b0e      	cmp	r3, #14
 800908c:	d9f2      	bls.n	8009074 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800908e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009092:	2b00      	cmp	r3, #0
 8009094:	d11c      	bne.n	80090d0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090a4:	f043 0302 	orr.w	r3, r3, #2
 80090a8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ba:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090c6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80090ce:	e00b      	b.n	80090e8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090d4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80090ee:	461a      	mov	r2, r3
 80090f0:	2300      	movs	r3, #0
 80090f2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090f4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d10d      	bne.n	8009118 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80090fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009100:	2b00      	cmp	r3, #0
 8009102:	d104      	bne.n	800910e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009104:	2100      	movs	r1, #0
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f968 	bl	80093dc <USB_SetDevSpeed>
 800910c:	e008      	b.n	8009120 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800910e:	2101      	movs	r1, #1
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f963 	bl	80093dc <USB_SetDevSpeed>
 8009116:	e003      	b.n	8009120 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009118:	2103      	movs	r1, #3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f95e 	bl	80093dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009120:	2110      	movs	r1, #16
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f8fa 	bl	800931c <USB_FlushTxFifo>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f924 	bl	8009380 <USB_FlushRxFifo>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009148:	461a      	mov	r2, r3
 800914a:	2300      	movs	r3, #0
 800914c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009154:	461a      	mov	r2, r3
 8009156:	2300      	movs	r3, #0
 8009158:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009160:	461a      	mov	r2, r3
 8009162:	2300      	movs	r3, #0
 8009164:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009166:	2300      	movs	r3, #0
 8009168:	613b      	str	r3, [r7, #16]
 800916a:	e043      	b.n	80091f4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4413      	add	r3, r2
 8009174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800917e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009182:	d118      	bne.n	80091b6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10a      	bne.n	80091a0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	015a      	lsls	r2, r3, #5
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	4413      	add	r3, r2
 8009192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009196:	461a      	mov	r2, r3
 8009198:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	e013      	b.n	80091c8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	015a      	lsls	r2, r3, #5
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	4413      	add	r3, r2
 80091a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091ac:	461a      	mov	r2, r3
 80091ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80091b2:	6013      	str	r3, [r2, #0]
 80091b4:	e008      	b.n	80091c8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	015a      	lsls	r2, r3, #5
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	4413      	add	r3, r2
 80091be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091c2:	461a      	mov	r2, r3
 80091c4:	2300      	movs	r3, #0
 80091c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091d4:	461a      	mov	r2, r3
 80091d6:	2300      	movs	r3, #0
 80091d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	015a      	lsls	r2, r3, #5
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	4413      	add	r3, r2
 80091e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091e6:	461a      	mov	r2, r3
 80091e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80091ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	3301      	adds	r3, #1
 80091f2:	613b      	str	r3, [r7, #16]
 80091f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80091f8:	461a      	mov	r2, r3
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d3b5      	bcc.n	800916c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009200:	2300      	movs	r3, #0
 8009202:	613b      	str	r3, [r7, #16]
 8009204:	e043      	b.n	800928e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	4413      	add	r3, r2
 800920e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009218:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800921c:	d118      	bne.n	8009250 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10a      	bne.n	800923a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	015a      	lsls	r2, r3, #5
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	4413      	add	r3, r2
 800922c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009230:	461a      	mov	r2, r3
 8009232:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009236:	6013      	str	r3, [r2, #0]
 8009238:	e013      	b.n	8009262 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	015a      	lsls	r2, r3, #5
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	4413      	add	r3, r2
 8009242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009246:	461a      	mov	r2, r3
 8009248:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800924c:	6013      	str	r3, [r2, #0]
 800924e:	e008      	b.n	8009262 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	015a      	lsls	r2, r3, #5
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	4413      	add	r3, r2
 8009258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800925c:	461a      	mov	r2, r3
 800925e:	2300      	movs	r3, #0
 8009260:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	015a      	lsls	r2, r3, #5
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	4413      	add	r3, r2
 800926a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800926e:	461a      	mov	r2, r3
 8009270:	2300      	movs	r3, #0
 8009272:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	015a      	lsls	r2, r3, #5
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	4413      	add	r3, r2
 800927c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009280:	461a      	mov	r2, r3
 8009282:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009286:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	3301      	adds	r3, #1
 800928c:	613b      	str	r3, [r7, #16]
 800928e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009292:	461a      	mov	r2, r3
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	4293      	cmp	r3, r2
 8009298:	d3b5      	bcc.n	8009206 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092ac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80092ba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80092bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d105      	bne.n	80092d0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	f043 0210 	orr.w	r2, r3, #16
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	699a      	ldr	r2, [r3, #24]
 80092d4:	4b10      	ldr	r3, [pc, #64]	@ (8009318 <USB_DevInit+0x2c4>)
 80092d6:	4313      	orrs	r3, r2
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80092dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d005      	beq.n	80092f0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	f043 0208 	orr.w	r2, r3, #8
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80092f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d107      	bne.n	8009308 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	699b      	ldr	r3, [r3, #24]
 80092fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009300:	f043 0304 	orr.w	r3, r3, #4
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009308:	7dfb      	ldrb	r3, [r7, #23]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3718      	adds	r7, #24
 800930e:	46bd      	mov	sp, r7
 8009310:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009314:	b004      	add	sp, #16
 8009316:	4770      	bx	lr
 8009318:	803c3800 	.word	0x803c3800

0800931c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009326:	2300      	movs	r3, #0
 8009328:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	3301      	adds	r3, #1
 800932e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009336:	d901      	bls.n	800933c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009338:	2303      	movs	r3, #3
 800933a:	e01b      	b.n	8009374 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	2b00      	cmp	r3, #0
 8009342:	daf2      	bge.n	800932a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009344:	2300      	movs	r3, #0
 8009346:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	019b      	lsls	r3, r3, #6
 800934c:	f043 0220 	orr.w	r2, r3, #32
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	3301      	adds	r3, #1
 8009358:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009360:	d901      	bls.n	8009366 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	e006      	b.n	8009374 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	f003 0320 	and.w	r3, r3, #32
 800936e:	2b20      	cmp	r3, #32
 8009370:	d0f0      	beq.n	8009354 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009388:	2300      	movs	r3, #0
 800938a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	3301      	adds	r3, #1
 8009390:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009398:	d901      	bls.n	800939e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800939a:	2303      	movs	r3, #3
 800939c:	e018      	b.n	80093d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	daf2      	bge.n	800938c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80093a6:	2300      	movs	r3, #0
 80093a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2210      	movs	r2, #16
 80093ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	3301      	adds	r3, #1
 80093b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093bc:	d901      	bls.n	80093c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80093be:	2303      	movs	r3, #3
 80093c0:	e006      	b.n	80093d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	f003 0310 	and.w	r3, r3, #16
 80093ca:	2b10      	cmp	r3, #16
 80093cc:	d0f0      	beq.n	80093b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	460b      	mov	r3, r1
 80093e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	78fb      	ldrb	r3, [r7, #3]
 80093f6:	68f9      	ldr	r1, [r7, #12]
 80093f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093fc:	4313      	orrs	r3, r2
 80093fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr

0800940e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800940e:	b480      	push	{r7}
 8009410:	b087      	sub	sp, #28
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	f003 0306 	and.w	r3, r3, #6
 8009426:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d102      	bne.n	8009434 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800942e:	2300      	movs	r3, #0
 8009430:	75fb      	strb	r3, [r7, #23]
 8009432:	e00a      	b.n	800944a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2b02      	cmp	r3, #2
 8009438:	d002      	beq.n	8009440 <USB_GetDevSpeed+0x32>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2b06      	cmp	r3, #6
 800943e:	d102      	bne.n	8009446 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009440:	2302      	movs	r3, #2
 8009442:	75fb      	strb	r3, [r7, #23]
 8009444:	e001      	b.n	800944a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009446:	230f      	movs	r3, #15
 8009448:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800944a:	7dfb      	ldrb	r3, [r7, #23]
}
 800944c:	4618      	mov	r0, r3
 800944e:	371c      	adds	r7, #28
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	785b      	ldrb	r3, [r3, #1]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d13a      	bne.n	80094ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800947a:	69da      	ldr	r2, [r3, #28]
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	f003 030f 	and.w	r3, r3, #15
 8009484:	2101      	movs	r1, #1
 8009486:	fa01 f303 	lsl.w	r3, r1, r3
 800948a:	b29b      	uxth	r3, r3
 800948c:	68f9      	ldr	r1, [r7, #12]
 800948e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009492:	4313      	orrs	r3, r2
 8009494:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	015a      	lsls	r2, r3, #5
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	4413      	add	r3, r2
 800949e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d155      	bne.n	8009558 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	015a      	lsls	r2, r3, #5
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	4413      	add	r3, r2
 80094b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	791b      	ldrb	r3, [r3, #4]
 80094c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80094c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	059b      	lsls	r3, r3, #22
 80094ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80094d0:	4313      	orrs	r3, r2
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	0151      	lsls	r1, r2, #5
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	440a      	add	r2, r1
 80094da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094e6:	6013      	str	r3, [r2, #0]
 80094e8:	e036      	b.n	8009558 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094f0:	69da      	ldr	r2, [r3, #28]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	f003 030f 	and.w	r3, r3, #15
 80094fa:	2101      	movs	r1, #1
 80094fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009500:	041b      	lsls	r3, r3, #16
 8009502:	68f9      	ldr	r1, [r7, #12]
 8009504:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009508:	4313      	orrs	r3, r2
 800950a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	015a      	lsls	r2, r3, #5
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	4413      	add	r3, r2
 8009514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800951e:	2b00      	cmp	r3, #0
 8009520:	d11a      	bne.n	8009558 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	015a      	lsls	r2, r3, #5
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	4413      	add	r3, r2
 800952a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	791b      	ldrb	r3, [r3, #4]
 800953c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800953e:	430b      	orrs	r3, r1
 8009540:	4313      	orrs	r3, r2
 8009542:	68ba      	ldr	r2, [r7, #8]
 8009544:	0151      	lsls	r1, r2, #5
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	440a      	add	r2, r1
 800954a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800954e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009556:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
	...

08009568 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	785b      	ldrb	r3, [r3, #1]
 8009580:	2b01      	cmp	r3, #1
 8009582:	d161      	bne.n	8009648 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	4413      	add	r3, r2
 800958c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009596:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800959a:	d11f      	bne.n	80095dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	015a      	lsls	r2, r3, #5
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	0151      	lsls	r1, r2, #5
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	440a      	add	r2, r1
 80095b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80095ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	015a      	lsls	r2, r3, #5
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	4413      	add	r3, r2
 80095c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	0151      	lsls	r1, r2, #5
 80095ce:	68fa      	ldr	r2, [r7, #12]
 80095d0:	440a      	add	r2, r1
 80095d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	f003 030f 	and.w	r3, r3, #15
 80095ec:	2101      	movs	r1, #1
 80095ee:	fa01 f303 	lsl.w	r3, r1, r3
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	43db      	mvns	r3, r3
 80095f6:	68f9      	ldr	r1, [r7, #12]
 80095f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80095fc:	4013      	ands	r3, r2
 80095fe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009606:	69da      	ldr	r2, [r3, #28]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	f003 030f 	and.w	r3, r3, #15
 8009610:	2101      	movs	r1, #1
 8009612:	fa01 f303 	lsl.w	r3, r1, r3
 8009616:	b29b      	uxth	r3, r3
 8009618:	43db      	mvns	r3, r3
 800961a:	68f9      	ldr	r1, [r7, #12]
 800961c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009620:	4013      	ands	r3, r2
 8009622:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	015a      	lsls	r2, r3, #5
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	4413      	add	r3, r2
 800962c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	0159      	lsls	r1, r3, #5
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	440b      	add	r3, r1
 800963a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800963e:	4619      	mov	r1, r3
 8009640:	4b35      	ldr	r3, [pc, #212]	@ (8009718 <USB_DeactivateEndpoint+0x1b0>)
 8009642:	4013      	ands	r3, r2
 8009644:	600b      	str	r3, [r1, #0]
 8009646:	e060      	b.n	800970a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	015a      	lsls	r2, r3, #5
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	4413      	add	r3, r2
 8009650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800965a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800965e:	d11f      	bne.n	80096a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	015a      	lsls	r2, r3, #5
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	4413      	add	r3, r2
 8009668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	0151      	lsls	r1, r2, #5
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	440a      	add	r2, r1
 8009676:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800967a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800967e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	015a      	lsls	r2, r3, #5
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	4413      	add	r3, r2
 8009688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	0151      	lsls	r1, r2, #5
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	440a      	add	r2, r1
 8009696:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800969a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800969e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	f003 030f 	and.w	r3, r3, #15
 80096b0:	2101      	movs	r1, #1
 80096b2:	fa01 f303 	lsl.w	r3, r1, r3
 80096b6:	041b      	lsls	r3, r3, #16
 80096b8:	43db      	mvns	r3, r3
 80096ba:	68f9      	ldr	r1, [r7, #12]
 80096bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096c0:	4013      	ands	r3, r2
 80096c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096ca:	69da      	ldr	r2, [r3, #28]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	f003 030f 	and.w	r3, r3, #15
 80096d4:	2101      	movs	r1, #1
 80096d6:	fa01 f303 	lsl.w	r3, r1, r3
 80096da:	041b      	lsls	r3, r3, #16
 80096dc:	43db      	mvns	r3, r3
 80096de:	68f9      	ldr	r1, [r7, #12]
 80096e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096e4:	4013      	ands	r3, r2
 80096e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	015a      	lsls	r2, r3, #5
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	4413      	add	r3, r2
 80096f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	0159      	lsls	r1, r3, #5
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	440b      	add	r3, r1
 80096fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009702:	4619      	mov	r1, r3
 8009704:	4b05      	ldr	r3, [pc, #20]	@ (800971c <USB_DeactivateEndpoint+0x1b4>)
 8009706:	4013      	ands	r3, r2
 8009708:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3714      	adds	r7, #20
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr
 8009718:	ec337800 	.word	0xec337800
 800971c:	eff37800 	.word	0xeff37800

08009720 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08a      	sub	sp, #40	@ 0x28
 8009724:	af02      	add	r7, sp, #8
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	4613      	mov	r3, r2
 800972c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	785b      	ldrb	r3, [r3, #1]
 800973c:	2b01      	cmp	r3, #1
 800973e:	f040 817f 	bne.w	8009a40 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	691b      	ldr	r3, [r3, #16]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d132      	bne.n	80097b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	015a      	lsls	r2, r3, #5
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	4413      	add	r3, r2
 8009752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	69ba      	ldr	r2, [r7, #24]
 800975a:	0151      	lsls	r1, r2, #5
 800975c:	69fa      	ldr	r2, [r7, #28]
 800975e:	440a      	add	r2, r1
 8009760:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009764:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009768:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800976c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	015a      	lsls	r2, r3, #5
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	4413      	add	r3, r2
 8009776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	69ba      	ldr	r2, [r7, #24]
 800977e:	0151      	lsls	r1, r2, #5
 8009780:	69fa      	ldr	r2, [r7, #28]
 8009782:	440a      	add	r2, r1
 8009784:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009788:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800978c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	015a      	lsls	r2, r3, #5
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	4413      	add	r3, r2
 8009796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800979a:	691b      	ldr	r3, [r3, #16]
 800979c:	69ba      	ldr	r2, [r7, #24]
 800979e:	0151      	lsls	r1, r2, #5
 80097a0:	69fa      	ldr	r2, [r7, #28]
 80097a2:	440a      	add	r2, r1
 80097a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097a8:	0cdb      	lsrs	r3, r3, #19
 80097aa:	04db      	lsls	r3, r3, #19
 80097ac:	6113      	str	r3, [r2, #16]
 80097ae:	e097      	b.n	80098e0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	69ba      	ldr	r2, [r7, #24]
 80097c0:	0151      	lsls	r1, r2, #5
 80097c2:	69fa      	ldr	r2, [r7, #28]
 80097c4:	440a      	add	r2, r1
 80097c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097ca:	0cdb      	lsrs	r3, r3, #19
 80097cc:	04db      	lsls	r3, r3, #19
 80097ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	015a      	lsls	r2, r3, #5
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	4413      	add	r3, r2
 80097d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	69ba      	ldr	r2, [r7, #24]
 80097e0:	0151      	lsls	r1, r2, #5
 80097e2:	69fa      	ldr	r2, [r7, #28]
 80097e4:	440a      	add	r2, r1
 80097e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097ea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80097ee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80097f2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d11a      	bne.n	8009830 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	691a      	ldr	r2, [r3, #16]
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	429a      	cmp	r2, r3
 8009804:	d903      	bls.n	800980e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	689a      	ldr	r2, [r3, #8]
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	015a      	lsls	r2, r3, #5
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	4413      	add	r3, r2
 8009816:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800981a:	691b      	ldr	r3, [r3, #16]
 800981c:	69ba      	ldr	r2, [r7, #24]
 800981e:	0151      	lsls	r1, r2, #5
 8009820:	69fa      	ldr	r2, [r7, #28]
 8009822:	440a      	add	r2, r1
 8009824:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009828:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800982c:	6113      	str	r3, [r2, #16]
 800982e:	e044      	b.n	80098ba <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	691a      	ldr	r2, [r3, #16]
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	4413      	add	r3, r2
 800983a:	1e5a      	subs	r2, r3, #1
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	fbb2 f3f3 	udiv	r3, r2, r3
 8009844:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	015a      	lsls	r2, r3, #5
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	4413      	add	r3, r2
 800984e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009852:	691a      	ldr	r2, [r3, #16]
 8009854:	8afb      	ldrh	r3, [r7, #22]
 8009856:	04d9      	lsls	r1, r3, #19
 8009858:	4ba4      	ldr	r3, [pc, #656]	@ (8009aec <USB_EPStartXfer+0x3cc>)
 800985a:	400b      	ands	r3, r1
 800985c:	69b9      	ldr	r1, [r7, #24]
 800985e:	0148      	lsls	r0, r1, #5
 8009860:	69f9      	ldr	r1, [r7, #28]
 8009862:	4401      	add	r1, r0
 8009864:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009868:	4313      	orrs	r3, r2
 800986a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	791b      	ldrb	r3, [r3, #4]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d122      	bne.n	80098ba <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	015a      	lsls	r2, r3, #5
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	4413      	add	r3, r2
 800987c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	69ba      	ldr	r2, [r7, #24]
 8009884:	0151      	lsls	r1, r2, #5
 8009886:	69fa      	ldr	r2, [r7, #28]
 8009888:	440a      	add	r2, r1
 800988a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800988e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009892:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	015a      	lsls	r2, r3, #5
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	4413      	add	r3, r2
 800989c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098a0:	691a      	ldr	r2, [r3, #16]
 80098a2:	8afb      	ldrh	r3, [r7, #22]
 80098a4:	075b      	lsls	r3, r3, #29
 80098a6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80098aa:	69b9      	ldr	r1, [r7, #24]
 80098ac:	0148      	lsls	r0, r1, #5
 80098ae:	69f9      	ldr	r1, [r7, #28]
 80098b0:	4401      	add	r1, r0
 80098b2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80098b6:	4313      	orrs	r3, r2
 80098b8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	015a      	lsls	r2, r3, #5
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098c6:	691a      	ldr	r2, [r3, #16]
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098d0:	69b9      	ldr	r1, [r7, #24]
 80098d2:	0148      	lsls	r0, r1, #5
 80098d4:	69f9      	ldr	r1, [r7, #28]
 80098d6:	4401      	add	r1, r0
 80098d8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80098dc:	4313      	orrs	r3, r2
 80098de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80098e0:	79fb      	ldrb	r3, [r7, #7]
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d14b      	bne.n	800997e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	69db      	ldr	r3, [r3, #28]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d009      	beq.n	8009902 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	015a      	lsls	r2, r3, #5
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	4413      	add	r3, r2
 80098f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098fa:	461a      	mov	r2, r3
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	69db      	ldr	r3, [r3, #28]
 8009900:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	791b      	ldrb	r3, [r3, #4]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d128      	bne.n	800995c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009916:	2b00      	cmp	r3, #0
 8009918:	d110      	bne.n	800993c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	015a      	lsls	r2, r3, #5
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	4413      	add	r3, r2
 8009922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	69ba      	ldr	r2, [r7, #24]
 800992a:	0151      	lsls	r1, r2, #5
 800992c:	69fa      	ldr	r2, [r7, #28]
 800992e:	440a      	add	r2, r1
 8009930:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009934:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009938:	6013      	str	r3, [r2, #0]
 800993a:	e00f      	b.n	800995c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	015a      	lsls	r2, r3, #5
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	4413      	add	r3, r2
 8009944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	69ba      	ldr	r2, [r7, #24]
 800994c:	0151      	lsls	r1, r2, #5
 800994e:	69fa      	ldr	r2, [r7, #28]
 8009950:	440a      	add	r2, r1
 8009952:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009956:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800995a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	015a      	lsls	r2, r3, #5
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	4413      	add	r3, r2
 8009964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	69ba      	ldr	r2, [r7, #24]
 800996c:	0151      	lsls	r1, r2, #5
 800996e:	69fa      	ldr	r2, [r7, #28]
 8009970:	440a      	add	r2, r1
 8009972:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009976:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800997a:	6013      	str	r3, [r2, #0]
 800997c:	e166      	b.n	8009c4c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	015a      	lsls	r2, r3, #5
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	4413      	add	r3, r2
 8009986:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	69ba      	ldr	r2, [r7, #24]
 800998e:	0151      	lsls	r1, r2, #5
 8009990:	69fa      	ldr	r2, [r7, #28]
 8009992:	440a      	add	r2, r1
 8009994:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009998:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800999c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	791b      	ldrb	r3, [r3, #4]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d015      	beq.n	80099d2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f000 814e 	beq.w	8009c4c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	f003 030f 	and.w	r3, r3, #15
 80099c0:	2101      	movs	r1, #1
 80099c2:	fa01 f303 	lsl.w	r3, r1, r3
 80099c6:	69f9      	ldr	r1, [r7, #28]
 80099c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80099cc:	4313      	orrs	r3, r2
 80099ce:	634b      	str	r3, [r1, #52]	@ 0x34
 80099d0:	e13c      	b.n	8009c4c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d110      	bne.n	8009a04 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	015a      	lsls	r2, r3, #5
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	4413      	add	r3, r2
 80099ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	69ba      	ldr	r2, [r7, #24]
 80099f2:	0151      	lsls	r1, r2, #5
 80099f4:	69fa      	ldr	r2, [r7, #28]
 80099f6:	440a      	add	r2, r1
 80099f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009a00:	6013      	str	r3, [r2, #0]
 8009a02:	e00f      	b.n	8009a24 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009a04:	69bb      	ldr	r3, [r7, #24]
 8009a06:	015a      	lsls	r2, r3, #5
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	69ba      	ldr	r2, [r7, #24]
 8009a14:	0151      	lsls	r1, r2, #5
 8009a16:	69fa      	ldr	r2, [r7, #28]
 8009a18:	440a      	add	r2, r1
 8009a1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a22:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	68d9      	ldr	r1, [r3, #12]
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	781a      	ldrb	r2, [r3, #0]
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	b298      	uxth	r0, r3
 8009a32:	79fb      	ldrb	r3, [r7, #7]
 8009a34:	9300      	str	r3, [sp, #0]
 8009a36:	4603      	mov	r3, r0
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f000 f9b9 	bl	8009db0 <USB_WritePacket>
 8009a3e:	e105      	b.n	8009c4c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	69ba      	ldr	r2, [r7, #24]
 8009a50:	0151      	lsls	r1, r2, #5
 8009a52:	69fa      	ldr	r2, [r7, #28]
 8009a54:	440a      	add	r2, r1
 8009a56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a5a:	0cdb      	lsrs	r3, r3, #19
 8009a5c:	04db      	lsls	r3, r3, #19
 8009a5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	69ba      	ldr	r2, [r7, #24]
 8009a70:	0151      	lsls	r1, r2, #5
 8009a72:	69fa      	ldr	r2, [r7, #28]
 8009a74:	440a      	add	r2, r1
 8009a76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a7a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009a7e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009a82:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d132      	bne.n	8009af0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d003      	beq.n	8009a9a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	689a      	ldr	r2, [r3, #8]
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	689a      	ldr	r2, [r3, #8]
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	015a      	lsls	r2, r3, #5
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aae:	691a      	ldr	r2, [r3, #16]
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	6a1b      	ldr	r3, [r3, #32]
 8009ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ab8:	69b9      	ldr	r1, [r7, #24]
 8009aba:	0148      	lsls	r0, r1, #5
 8009abc:	69f9      	ldr	r1, [r7, #28]
 8009abe:	4401      	add	r1, r0
 8009ac0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ac8:	69bb      	ldr	r3, [r7, #24]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	69ba      	ldr	r2, [r7, #24]
 8009ad8:	0151      	lsls	r1, r2, #5
 8009ada:	69fa      	ldr	r2, [r7, #28]
 8009adc:	440a      	add	r2, r1
 8009ade:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ae2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ae6:	6113      	str	r3, [r2, #16]
 8009ae8:	e062      	b.n	8009bb0 <USB_EPStartXfer+0x490>
 8009aea:	bf00      	nop
 8009aec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d123      	bne.n	8009b40 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	015a      	lsls	r2, r3, #5
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	4413      	add	r3, r2
 8009b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b04:	691a      	ldr	r2, [r3, #16]
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b0e:	69b9      	ldr	r1, [r7, #24]
 8009b10:	0148      	lsls	r0, r1, #5
 8009b12:	69f9      	ldr	r1, [r7, #28]
 8009b14:	4401      	add	r1, r0
 8009b16:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	015a      	lsls	r2, r3, #5
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	4413      	add	r3, r2
 8009b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	69ba      	ldr	r2, [r7, #24]
 8009b2e:	0151      	lsls	r1, r2, #5
 8009b30:	69fa      	ldr	r2, [r7, #28]
 8009b32:	440a      	add	r2, r1
 8009b34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b3c:	6113      	str	r3, [r2, #16]
 8009b3e:	e037      	b.n	8009bb0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	691a      	ldr	r2, [r3, #16]
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	4413      	add	r3, r2
 8009b4a:	1e5a      	subs	r2, r3, #1
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b54:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	8afa      	ldrh	r2, [r7, #22]
 8009b5c:	fb03 f202 	mul.w	r2, r3, r2
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	015a      	lsls	r2, r3, #5
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b70:	691a      	ldr	r2, [r3, #16]
 8009b72:	8afb      	ldrh	r3, [r7, #22]
 8009b74:	04d9      	lsls	r1, r3, #19
 8009b76:	4b38      	ldr	r3, [pc, #224]	@ (8009c58 <USB_EPStartXfer+0x538>)
 8009b78:	400b      	ands	r3, r1
 8009b7a:	69b9      	ldr	r1, [r7, #24]
 8009b7c:	0148      	lsls	r0, r1, #5
 8009b7e:	69f9      	ldr	r1, [r7, #28]
 8009b80:	4401      	add	r1, r0
 8009b82:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009b86:	4313      	orrs	r3, r2
 8009b88:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	015a      	lsls	r2, r3, #5
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	4413      	add	r3, r2
 8009b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b96:	691a      	ldr	r2, [r3, #16]
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	6a1b      	ldr	r3, [r3, #32]
 8009b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ba0:	69b9      	ldr	r1, [r7, #24]
 8009ba2:	0148      	lsls	r0, r1, #5
 8009ba4:	69f9      	ldr	r1, [r7, #28]
 8009ba6:	4401      	add	r1, r0
 8009ba8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009bac:	4313      	orrs	r3, r2
 8009bae:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009bb0:	79fb      	ldrb	r3, [r7, #7]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d10d      	bne.n	8009bd2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d009      	beq.n	8009bd2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	68d9      	ldr	r1, [r3, #12]
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	015a      	lsls	r2, r3, #5
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	4413      	add	r3, r2
 8009bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bce:	460a      	mov	r2, r1
 8009bd0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	791b      	ldrb	r3, [r3, #4]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d128      	bne.n	8009c2c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d110      	bne.n	8009c0c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	015a      	lsls	r2, r3, #5
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	69ba      	ldr	r2, [r7, #24]
 8009bfa:	0151      	lsls	r1, r2, #5
 8009bfc:	69fa      	ldr	r2, [r7, #28]
 8009bfe:	440a      	add	r2, r1
 8009c00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c04:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009c08:	6013      	str	r3, [r2, #0]
 8009c0a:	e00f      	b.n	8009c2c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	015a      	lsls	r2, r3, #5
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	4413      	add	r3, r2
 8009c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	69ba      	ldr	r2, [r7, #24]
 8009c1c:	0151      	lsls	r1, r2, #5
 8009c1e:	69fa      	ldr	r2, [r7, #28]
 8009c20:	440a      	add	r2, r1
 8009c22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c2a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	015a      	lsls	r2, r3, #5
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	4413      	add	r3, r2
 8009c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	69ba      	ldr	r2, [r7, #24]
 8009c3c:	0151      	lsls	r1, r2, #5
 8009c3e:	69fa      	ldr	r2, [r7, #28]
 8009c40:	440a      	add	r2, r1
 8009c42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c46:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009c4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3720      	adds	r7, #32
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	1ff80000 	.word	0x1ff80000

08009c5c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b087      	sub	sp, #28
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009c66:	2300      	movs	r3, #0
 8009c68:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	785b      	ldrb	r3, [r3, #1]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d14a      	bne.n	8009d10 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	015a      	lsls	r2, r3, #5
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	4413      	add	r3, r2
 8009c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c92:	f040 8086 	bne.w	8009da2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	015a      	lsls	r2, r3, #5
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	7812      	ldrb	r2, [r2, #0]
 8009caa:	0151      	lsls	r1, r2, #5
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	440a      	add	r2, r1
 8009cb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cb4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009cb8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	015a      	lsls	r2, r3, #5
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	683a      	ldr	r2, [r7, #0]
 8009ccc:	7812      	ldrb	r2, [r2, #0]
 8009cce:	0151      	lsls	r1, r2, #5
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	440a      	add	r2, r1
 8009cd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009cdc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d902      	bls.n	8009cf4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	75fb      	strb	r3, [r7, #23]
          break;
 8009cf2:	e056      	b.n	8009da2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	015a      	lsls	r2, r3, #5
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d0c:	d0e7      	beq.n	8009cde <USB_EPStopXfer+0x82>
 8009d0e:	e048      	b.n	8009da2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	015a      	lsls	r2, r3, #5
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	4413      	add	r3, r2
 8009d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d28:	d13b      	bne.n	8009da2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	015a      	lsls	r2, r3, #5
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	4413      	add	r3, r2
 8009d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	7812      	ldrb	r2, [r2, #0]
 8009d3e:	0151      	lsls	r1, r2, #5
 8009d40:	693a      	ldr	r2, [r7, #16]
 8009d42:	440a      	add	r2, r1
 8009d44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d48:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d4c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	015a      	lsls	r2, r3, #5
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	4413      	add	r3, r2
 8009d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	683a      	ldr	r2, [r7, #0]
 8009d60:	7812      	ldrb	r2, [r2, #0]
 8009d62:	0151      	lsls	r1, r2, #5
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	440a      	add	r2, r1
 8009d68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	3301      	adds	r3, #1
 8009d76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d902      	bls.n	8009d88 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	75fb      	strb	r3, [r7, #23]
          break;
 8009d86:	e00c      	b.n	8009da2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	015a      	lsls	r2, r3, #5
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	4413      	add	r3, r2
 8009d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009da0:	d0e7      	beq.n	8009d72 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	371c      	adds	r7, #28
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b089      	sub	sp, #36	@ 0x24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	4611      	mov	r1, r2
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	71fb      	strb	r3, [r7, #7]
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009dce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d123      	bne.n	8009e1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009dd6:	88bb      	ldrh	r3, [r7, #4]
 8009dd8:	3303      	adds	r3, #3
 8009dda:	089b      	lsrs	r3, r3, #2
 8009ddc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009dde:	2300      	movs	r3, #0
 8009de0:	61bb      	str	r3, [r7, #24]
 8009de2:	e018      	b.n	8009e16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009de4:	79fb      	ldrb	r3, [r7, #7]
 8009de6:	031a      	lsls	r2, r3, #12
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	4413      	add	r3, r2
 8009dec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009df0:	461a      	mov	r2, r3
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	3301      	adds	r3, #1
 8009e02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	3301      	adds	r3, #1
 8009e08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	3301      	adds	r3, #1
 8009e14:	61bb      	str	r3, [r7, #24]
 8009e16:	69ba      	ldr	r2, [r7, #24]
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d3e2      	bcc.n	8009de4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3724      	adds	r7, #36	@ 0x24
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b08b      	sub	sp, #44	@ 0x2c
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	4613      	mov	r3, r2
 8009e38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009e42:	88fb      	ldrh	r3, [r7, #6]
 8009e44:	089b      	lsrs	r3, r3, #2
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009e4a:	88fb      	ldrh	r3, [r7, #6]
 8009e4c:	f003 0303 	and.w	r3, r3, #3
 8009e50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009e52:	2300      	movs	r3, #0
 8009e54:	623b      	str	r3, [r7, #32]
 8009e56:	e014      	b.n	8009e82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e62:	601a      	str	r2, [r3, #0]
    pDest++;
 8009e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e66:	3301      	adds	r3, #1
 8009e68:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e72:	3301      	adds	r3, #1
 8009e74:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e78:	3301      	adds	r3, #1
 8009e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009e7c:	6a3b      	ldr	r3, [r7, #32]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	623b      	str	r3, [r7, #32]
 8009e82:	6a3a      	ldr	r2, [r7, #32]
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d3e6      	bcc.n	8009e58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009e8a:	8bfb      	ldrh	r3, [r7, #30]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d01e      	beq.n	8009ece <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009e90:	2300      	movs	r3, #0
 8009e92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f107 0310 	add.w	r3, r7, #16
 8009ea0:	6812      	ldr	r2, [r2, #0]
 8009ea2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009ea4:	693a      	ldr	r2, [r7, #16]
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	00db      	lsls	r3, r3, #3
 8009eac:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb4:	701a      	strb	r2, [r3, #0]
      i++;
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	623b      	str	r3, [r7, #32]
      pDest++;
 8009ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009ec2:	8bfb      	ldrh	r3, [r7, #30]
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009ec8:	8bfb      	ldrh	r3, [r7, #30]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1ea      	bne.n	8009ea4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	372c      	adds	r7, #44	@ 0x2c
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	785b      	ldrb	r3, [r3, #1]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d12c      	bne.n	8009f52 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	015a      	lsls	r2, r3, #5
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	4413      	add	r3, r2
 8009f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	db12      	blt.n	8009f30 <USB_EPSetStall+0x54>
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00f      	beq.n	8009f30 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	015a      	lsls	r2, r3, #5
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	4413      	add	r3, r2
 8009f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	0151      	lsls	r1, r2, #5
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	440a      	add	r2, r1
 8009f26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f2a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009f2e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	015a      	lsls	r2, r3, #5
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4413      	add	r3, r2
 8009f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	0151      	lsls	r1, r2, #5
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	440a      	add	r2, r1
 8009f46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f4a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009f4e:	6013      	str	r3, [r2, #0]
 8009f50:	e02b      	b.n	8009faa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	015a      	lsls	r2, r3, #5
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	4413      	add	r3, r2
 8009f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	db12      	blt.n	8009f8a <USB_EPSetStall+0xae>
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00f      	beq.n	8009f8a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	015a      	lsls	r2, r3, #5
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	4413      	add	r3, r2
 8009f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	0151      	lsls	r1, r2, #5
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	440a      	add	r2, r1
 8009f80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f84:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009f88:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	015a      	lsls	r2, r3, #5
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	4413      	add	r3, r2
 8009f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	0151      	lsls	r1, r2, #5
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	440a      	add	r2, r1
 8009fa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fa4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009fa8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009faa:	2300      	movs	r3, #0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3714      	adds	r7, #20
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	785b      	ldrb	r3, [r3, #1]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d128      	bne.n	800a026 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	015a      	lsls	r2, r3, #5
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	4413      	add	r3, r2
 8009fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	0151      	lsls	r1, r2, #5
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	440a      	add	r2, r1
 8009fea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009ff2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	791b      	ldrb	r3, [r3, #4]
 8009ff8:	2b03      	cmp	r3, #3
 8009ffa:	d003      	beq.n	800a004 <USB_EPClearStall+0x4c>
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	791b      	ldrb	r3, [r3, #4]
 800a000:	2b02      	cmp	r3, #2
 800a002:	d138      	bne.n	800a076 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	015a      	lsls	r2, r3, #5
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	4413      	add	r3, r2
 800a00c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	68ba      	ldr	r2, [r7, #8]
 800a014:	0151      	lsls	r1, r2, #5
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	440a      	add	r2, r1
 800a01a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a01e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a022:	6013      	str	r3, [r2, #0]
 800a024:	e027      	b.n	800a076 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	015a      	lsls	r2, r3, #5
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	4413      	add	r3, r2
 800a02e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68ba      	ldr	r2, [r7, #8]
 800a036:	0151      	lsls	r1, r2, #5
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	440a      	add	r2, r1
 800a03c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a040:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a044:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	791b      	ldrb	r3, [r3, #4]
 800a04a:	2b03      	cmp	r3, #3
 800a04c:	d003      	beq.n	800a056 <USB_EPClearStall+0x9e>
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	791b      	ldrb	r3, [r3, #4]
 800a052:	2b02      	cmp	r3, #2
 800a054:	d10f      	bne.n	800a076 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	015a      	lsls	r2, r3, #5
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	4413      	add	r3, r2
 800a05e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	0151      	lsls	r1, r2, #5
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	440a      	add	r2, r1
 800a06c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a074:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3714      	adds	r7, #20
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a084:	b480      	push	{r7}
 800a086:	b085      	sub	sp, #20
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	460b      	mov	r3, r1
 800a08e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a0a2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a0a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	78fb      	ldrb	r3, [r7, #3]
 800a0b2:	011b      	lsls	r3, r3, #4
 800a0b4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a0b8:	68f9      	ldr	r1, [r7, #12]
 800a0ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a0ea:	f023 0303 	bic.w	r3, r3, #3
 800a0ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a0fe:	f023 0302 	bic.w	r3, r3, #2
 800a102:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3714      	adds	r7, #20
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr

0800a112 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a112:	b480      	push	{r7}
 800a114:	b085      	sub	sp, #20
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a12c:	f023 0303 	bic.w	r3, r3, #3
 800a130:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a140:	f043 0302 	orr.w	r3, r3, #2
 800a144:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3714      	adds	r7, #20
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	695b      	ldr	r3, [r3, #20]
 800a160:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	4013      	ands	r3, r2
 800a16a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a16c:	68fb      	ldr	r3, [r7, #12]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3714      	adds	r7, #20
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a17a:	b480      	push	{r7}
 800a17c:	b085      	sub	sp, #20
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a196:	69db      	ldr	r3, [r3, #28]
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	4013      	ands	r3, r2
 800a19c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	0c1b      	lsrs	r3, r3, #16
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3714      	adds	r7, #20
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr

0800a1ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1ae:	b480      	push	{r7}
 800a1b0:	b085      	sub	sp, #20
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1c0:	699b      	ldr	r3, [r3, #24]
 800a1c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1ca:	69db      	ldr	r3, [r3, #28]
 800a1cc:	68ba      	ldr	r2, [r7, #8]
 800a1ce:	4013      	ands	r3, r2
 800a1d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	b29b      	uxth	r3, r3
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3714      	adds	r7, #20
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr

0800a1e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b085      	sub	sp, #20
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a1f2:	78fb      	ldrb	r3, [r7, #3]
 800a1f4:	015a      	lsls	r2, r3, #5
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	4013      	ands	r3, r2
 800a20e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a210:	68bb      	ldr	r3, [r7, #8]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3714      	adds	r7, #20
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a21e:	b480      	push	{r7}
 800a220:	b087      	sub	sp, #28
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	460b      	mov	r3, r1
 800a228:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a23e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a240:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a242:	78fb      	ldrb	r3, [r7, #3]
 800a244:	f003 030f 	and.w	r3, r3, #15
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	fa22 f303 	lsr.w	r3, r2, r3
 800a24e:	01db      	lsls	r3, r3, #7
 800a250:	b2db      	uxtb	r3, r3
 800a252:	693a      	ldr	r2, [r7, #16]
 800a254:	4313      	orrs	r3, r2
 800a256:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a258:	78fb      	ldrb	r3, [r7, #3]
 800a25a:	015a      	lsls	r2, r3, #5
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	4413      	add	r3, r2
 800a260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	693a      	ldr	r2, [r7, #16]
 800a268:	4013      	ands	r3, r2
 800a26a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a26c:	68bb      	ldr	r3, [r7, #8]
}
 800a26e:	4618      	mov	r0, r3
 800a270:	371c      	adds	r7, #28
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr

0800a27a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a27a:	b480      	push	{r7}
 800a27c:	b083      	sub	sp, #12
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	695b      	ldr	r3, [r3, #20]
 800a286:	f003 0301 	and.w	r3, r3, #1
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	370c      	adds	r7, #12
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a296:	b480      	push	{r7}
 800a298:	b085      	sub	sp, #20
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2b0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a2b4:	f023 0307 	bic.w	r3, r3, #7
 800a2b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a2c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3714      	adds	r7, #20
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b087      	sub	sp, #28
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	607a      	str	r2, [r7, #4]
 800a2e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	333c      	adds	r3, #60	@ 0x3c
 800a2f2:	3304      	adds	r3, #4
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	4a26      	ldr	r2, [pc, #152]	@ (800a394 <USB_EP0_OutStart+0xb8>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d90a      	bls.n	800a316 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a30c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a310:	d101      	bne.n	800a316 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a312:	2300      	movs	r3, #0
 800a314:	e037      	b.n	800a386 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a31c:	461a      	mov	r2, r3
 800a31e:	2300      	movs	r3, #0
 800a320:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a330:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a334:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	697a      	ldr	r2, [r7, #20]
 800a340:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a344:	f043 0318 	orr.w	r3, r3, #24
 800a348:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	697a      	ldr	r2, [r7, #20]
 800a354:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a358:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a35c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a35e:	7afb      	ldrb	r3, [r7, #11]
 800a360:	2b01      	cmp	r3, #1
 800a362:	d10f      	bne.n	800a384 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a36a:	461a      	mov	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	697a      	ldr	r2, [r7, #20]
 800a37a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a37e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a382:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	371c      	adds	r7, #28
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	4f54300a 	.word	0x4f54300a

0800a398 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a3b0:	d901      	bls.n	800a3b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e022      	b.n	800a3fc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	daf2      	bge.n	800a3a4 <USB_CoreReset+0xc>

  count = 10U;
 800a3be:	230a      	movs	r3, #10
 800a3c0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800a3c2:	e002      	b.n	800a3ca <USB_CoreReset+0x32>
  {
    count--;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	3b01      	subs	r3, #1
 800a3c8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1f9      	bne.n	800a3c4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	691b      	ldr	r3, [r3, #16]
 800a3d4:	f043 0201 	orr.w	r2, r3, #1
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a3e8:	d901      	bls.n	800a3ee <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	e006      	b.n	800a3fc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	f003 0301 	and.w	r3, r3, #1
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d0f0      	beq.n	800a3dc <USB_CoreReset+0x44>

  return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3714      	adds	r7, #20
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <lwip_cdc_debug_printf>:
  * @brief  Send debug message via CDC
  * @param  msg: debug message string
  * @retval None
  */
static void lwip_cdc_debug_printf(const char *msg)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  uint8_t len = strlen(msg);
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f7f5 fedd 	bl	80001d0 <strlen>
 800a416:	4603      	mov	r3, r0
 800a418:	73fb      	strb	r3, [r7, #15]
  if (len > 0)
 800a41a:	7bfb      	ldrb	r3, [r7, #15]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d008      	beq.n	800a432 <lwip_cdc_debug_printf+0x2a>
  {
    CDC_Transmit_FS((uint8_t*)msg, len);
 800a420:	7bfb      	ldrb	r3, [r7, #15]
 800a422:	b29b      	uxth	r3, r3
 800a424:	4619      	mov	r1, r3
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f011 fa54 	bl	801b8d4 <CDC_Transmit_FS>
    HAL_Delay(1); // Small delay to ensure transmission
 800a42c:	2001      	movs	r0, #1
 800a42e:	f7fa f809 	bl	8004444 <HAL_Delay>
  }
}
 800a432:	bf00      	nop
 800a434:	3710      	adds	r7, #16
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
	...

0800a43c <lwip_cdc_debug_log>:
  * @param  prefix: message prefix
  * @param  msg: debug message string
  * @retval None
  */
static void lwip_cdc_debug_log(const char *prefix, const char *msg)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b0a6      	sub	sp, #152	@ 0x98
 800a440:	af02      	add	r7, sp, #8
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  char debug_buf[128];
  uint32_t tick = HAL_GetTick();
 800a446:	f7f9 fff1 	bl	800442c <HAL_GetTick>
 800a44a:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
  snprintf(debug_buf, sizeof(debug_buf), "[%lu] %s: %s\r\n", tick, prefix, msg);
 800a44e:	f107 000c 	add.w	r0, r7, #12
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	9301      	str	r3, [sp, #4]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a45e:	4a06      	ldr	r2, [pc, #24]	@ (800a478 <lwip_cdc_debug_log+0x3c>)
 800a460:	2180      	movs	r1, #128	@ 0x80
 800a462:	f012 f82d 	bl	801c4c0 <sniprintf>
  lwip_cdc_debug_printf(debug_buf);
 800a466:	f107 030c 	add.w	r3, r7, #12
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7ff ffcc 	bl	800a408 <lwip_cdc_debug_printf>
}
 800a470:	bf00      	nop
 800a472:	3790      	adds	r7, #144	@ 0x90
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	0801e3fc 	.word	0x0801e3fc

0800a47c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a47c:	b5b0      	push	{r4, r5, r7, lr}
 800a47e:	b0ac      	sub	sp, #176	@ 0xb0
 800a480:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800a482:	4bac      	ldr	r3, [pc, #688]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a484:	22c0      	movs	r2, #192	@ 0xc0
 800a486:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800a488:	4baa      	ldr	r3, [pc, #680]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a48a:	22a8      	movs	r2, #168	@ 0xa8
 800a48c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 800a48e:	4ba9      	ldr	r3, [pc, #676]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a490:	220a      	movs	r2, #10
 800a492:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 88;
 800a494:	4ba7      	ldr	r3, [pc, #668]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a496:	2258      	movs	r2, #88	@ 0x58
 800a498:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a49a:	4ba7      	ldr	r3, [pc, #668]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a49c:	22ff      	movs	r2, #255	@ 0xff
 800a49e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a4a0:	4ba5      	ldr	r3, [pc, #660]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a4a2:	22ff      	movs	r2, #255	@ 0xff
 800a4a4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a4a6:	4ba4      	ldr	r3, [pc, #656]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a4a8:	22ff      	movs	r2, #255	@ 0xff
 800a4aa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a4ac:	4ba2      	ldr	r3, [pc, #648]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800a4b2:	4ba2      	ldr	r3, [pc, #648]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800a4b8:	4ba0      	ldr	r3, [pc, #640]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800a4be:	4b9f      	ldr	r3, [pc, #636]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800a4c4:	4b9d      	ldr	r3, [pc, #628]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
  char ip_msg[128];
  snprintf(ip_msg, sizeof(ip_msg), "IP: %d.%d.%d.%d", IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a4ca:	4b9a      	ldr	r3, [pc, #616]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	461c      	mov	r4, r3
 800a4d0:	4b98      	ldr	r3, [pc, #608]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a4d2:	785b      	ldrb	r3, [r3, #1]
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	4b97      	ldr	r3, [pc, #604]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a4d8:	789b      	ldrb	r3, [r3, #2]
 800a4da:	4619      	mov	r1, r3
 800a4dc:	4b95      	ldr	r3, [pc, #596]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a4de:	78db      	ldrb	r3, [r3, #3]
 800a4e0:	f107 0020 	add.w	r0, r7, #32
 800a4e4:	9302      	str	r3, [sp, #8]
 800a4e6:	9101      	str	r1, [sp, #4]
 800a4e8:	9200      	str	r2, [sp, #0]
 800a4ea:	4623      	mov	r3, r4
 800a4ec:	4a94      	ldr	r2, [pc, #592]	@ (800a740 <MX_LWIP_Init+0x2c4>)
 800a4ee:	2180      	movs	r1, #128	@ 0x80
 800a4f0:	f011 ffe6 	bl	801c4c0 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 800a4f4:	f107 0320 	add.w	r3, r7, #32
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	4892      	ldr	r0, [pc, #584]	@ (800a744 <MX_LWIP_Init+0x2c8>)
 800a4fc:	f7ff ff9e 	bl	800a43c <lwip_cdc_debug_log>
  
  snprintf(ip_msg, sizeof(ip_msg), "Netmask: %d.%d.%d.%d", NETMASK_ADDRESS[0], NETMASK_ADDRESS[1], NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a500:	4b8d      	ldr	r3, [pc, #564]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	461c      	mov	r4, r3
 800a506:	4b8c      	ldr	r3, [pc, #560]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a508:	785b      	ldrb	r3, [r3, #1]
 800a50a:	461a      	mov	r2, r3
 800a50c:	4b8a      	ldr	r3, [pc, #552]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a50e:	789b      	ldrb	r3, [r3, #2]
 800a510:	4619      	mov	r1, r3
 800a512:	4b89      	ldr	r3, [pc, #548]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a514:	78db      	ldrb	r3, [r3, #3]
 800a516:	f107 0020 	add.w	r0, r7, #32
 800a51a:	9302      	str	r3, [sp, #8]
 800a51c:	9101      	str	r1, [sp, #4]
 800a51e:	9200      	str	r2, [sp, #0]
 800a520:	4623      	mov	r3, r4
 800a522:	4a89      	ldr	r2, [pc, #548]	@ (800a748 <MX_LWIP_Init+0x2cc>)
 800a524:	2180      	movs	r1, #128	@ 0x80
 800a526:	f011 ffcb 	bl	801c4c0 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 800a52a:	f107 0320 	add.w	r3, r7, #32
 800a52e:	4619      	mov	r1, r3
 800a530:	4884      	ldr	r0, [pc, #528]	@ (800a744 <MX_LWIP_Init+0x2c8>)
 800a532:	f7ff ff83 	bl	800a43c <lwip_cdc_debug_log>
  
  snprintf(ip_msg, sizeof(ip_msg), "Gateway: %d.%d.%d.%d", GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a536:	4b81      	ldr	r3, [pc, #516]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	461c      	mov	r4, r3
 800a53c:	4b7f      	ldr	r3, [pc, #508]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a53e:	785b      	ldrb	r3, [r3, #1]
 800a540:	461a      	mov	r2, r3
 800a542:	4b7e      	ldr	r3, [pc, #504]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a544:	789b      	ldrb	r3, [r3, #2]
 800a546:	4619      	mov	r1, r3
 800a548:	4b7c      	ldr	r3, [pc, #496]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a54a:	78db      	ldrb	r3, [r3, #3]
 800a54c:	f107 0020 	add.w	r0, r7, #32
 800a550:	9302      	str	r3, [sp, #8]
 800a552:	9101      	str	r1, [sp, #4]
 800a554:	9200      	str	r2, [sp, #0]
 800a556:	4623      	mov	r3, r4
 800a558:	4a7c      	ldr	r2, [pc, #496]	@ (800a74c <MX_LWIP_Init+0x2d0>)
 800a55a:	2180      	movs	r1, #128	@ 0x80
 800a55c:	f011 ffb0 	bl	801c4c0 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 800a560:	f107 0320 	add.w	r3, r7, #32
 800a564:	4619      	mov	r1, r3
 800a566:	4877      	ldr	r0, [pc, #476]	@ (800a744 <MX_LWIP_Init+0x2c8>)
 800a568:	f7ff ff68 	bl	800a43c <lwip_cdc_debug_log>
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800a56c:	2100      	movs	r1, #0
 800a56e:	2000      	movs	r0, #0
 800a570:	f006 fad2 	bl	8010b18 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a574:	4b6f      	ldr	r3, [pc, #444]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	061a      	lsls	r2, r3, #24
 800a57a:	4b6e      	ldr	r3, [pc, #440]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a57c:	785b      	ldrb	r3, [r3, #1]
 800a57e:	041b      	lsls	r3, r3, #16
 800a580:	431a      	orrs	r2, r3
 800a582:	4b6c      	ldr	r3, [pc, #432]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a584:	789b      	ldrb	r3, [r3, #2]
 800a586:	021b      	lsls	r3, r3, #8
 800a588:	4313      	orrs	r3, r2
 800a58a:	4a6a      	ldr	r2, [pc, #424]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a58c:	78d2      	ldrb	r2, [r2, #3]
 800a58e:	4313      	orrs	r3, r2
 800a590:	061a      	lsls	r2, r3, #24
 800a592:	4b68      	ldr	r3, [pc, #416]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	0619      	lsls	r1, r3, #24
 800a598:	4b66      	ldr	r3, [pc, #408]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a59a:	785b      	ldrb	r3, [r3, #1]
 800a59c:	041b      	lsls	r3, r3, #16
 800a59e:	4319      	orrs	r1, r3
 800a5a0:	4b64      	ldr	r3, [pc, #400]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a5a2:	789b      	ldrb	r3, [r3, #2]
 800a5a4:	021b      	lsls	r3, r3, #8
 800a5a6:	430b      	orrs	r3, r1
 800a5a8:	4962      	ldr	r1, [pc, #392]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a5aa:	78c9      	ldrb	r1, [r1, #3]
 800a5ac:	430b      	orrs	r3, r1
 800a5ae:	021b      	lsls	r3, r3, #8
 800a5b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a5b4:	431a      	orrs	r2, r3
 800a5b6:	4b5f      	ldr	r3, [pc, #380]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	0619      	lsls	r1, r3, #24
 800a5bc:	4b5d      	ldr	r3, [pc, #372]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a5be:	785b      	ldrb	r3, [r3, #1]
 800a5c0:	041b      	lsls	r3, r3, #16
 800a5c2:	4319      	orrs	r1, r3
 800a5c4:	4b5b      	ldr	r3, [pc, #364]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a5c6:	789b      	ldrb	r3, [r3, #2]
 800a5c8:	021b      	lsls	r3, r3, #8
 800a5ca:	430b      	orrs	r3, r1
 800a5cc:	4959      	ldr	r1, [pc, #356]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a5ce:	78c9      	ldrb	r1, [r1, #3]
 800a5d0:	430b      	orrs	r3, r1
 800a5d2:	0a1b      	lsrs	r3, r3, #8
 800a5d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a5d8:	431a      	orrs	r2, r3
 800a5da:	4b56      	ldr	r3, [pc, #344]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	0619      	lsls	r1, r3, #24
 800a5e0:	4b54      	ldr	r3, [pc, #336]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a5e2:	785b      	ldrb	r3, [r3, #1]
 800a5e4:	041b      	lsls	r3, r3, #16
 800a5e6:	4319      	orrs	r1, r3
 800a5e8:	4b52      	ldr	r3, [pc, #328]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a5ea:	789b      	ldrb	r3, [r3, #2]
 800a5ec:	021b      	lsls	r3, r3, #8
 800a5ee:	430b      	orrs	r3, r1
 800a5f0:	4950      	ldr	r1, [pc, #320]	@ (800a734 <MX_LWIP_Init+0x2b8>)
 800a5f2:	78c9      	ldrb	r1, [r1, #3]
 800a5f4:	430b      	orrs	r3, r1
 800a5f6:	0e1b      	lsrs	r3, r3, #24
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	4a55      	ldr	r2, [pc, #340]	@ (800a750 <MX_LWIP_Init+0x2d4>)
 800a5fc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a5fe:	4b4e      	ldr	r3, [pc, #312]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	061a      	lsls	r2, r3, #24
 800a604:	4b4c      	ldr	r3, [pc, #304]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a606:	785b      	ldrb	r3, [r3, #1]
 800a608:	041b      	lsls	r3, r3, #16
 800a60a:	431a      	orrs	r2, r3
 800a60c:	4b4a      	ldr	r3, [pc, #296]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a60e:	789b      	ldrb	r3, [r3, #2]
 800a610:	021b      	lsls	r3, r3, #8
 800a612:	4313      	orrs	r3, r2
 800a614:	4a48      	ldr	r2, [pc, #288]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a616:	78d2      	ldrb	r2, [r2, #3]
 800a618:	4313      	orrs	r3, r2
 800a61a:	061a      	lsls	r2, r3, #24
 800a61c:	4b46      	ldr	r3, [pc, #280]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	0619      	lsls	r1, r3, #24
 800a622:	4b45      	ldr	r3, [pc, #276]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a624:	785b      	ldrb	r3, [r3, #1]
 800a626:	041b      	lsls	r3, r3, #16
 800a628:	4319      	orrs	r1, r3
 800a62a:	4b43      	ldr	r3, [pc, #268]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a62c:	789b      	ldrb	r3, [r3, #2]
 800a62e:	021b      	lsls	r3, r3, #8
 800a630:	430b      	orrs	r3, r1
 800a632:	4941      	ldr	r1, [pc, #260]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a634:	78c9      	ldrb	r1, [r1, #3]
 800a636:	430b      	orrs	r3, r1
 800a638:	021b      	lsls	r3, r3, #8
 800a63a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a63e:	431a      	orrs	r2, r3
 800a640:	4b3d      	ldr	r3, [pc, #244]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	0619      	lsls	r1, r3, #24
 800a646:	4b3c      	ldr	r3, [pc, #240]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a648:	785b      	ldrb	r3, [r3, #1]
 800a64a:	041b      	lsls	r3, r3, #16
 800a64c:	4319      	orrs	r1, r3
 800a64e:	4b3a      	ldr	r3, [pc, #232]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a650:	789b      	ldrb	r3, [r3, #2]
 800a652:	021b      	lsls	r3, r3, #8
 800a654:	430b      	orrs	r3, r1
 800a656:	4938      	ldr	r1, [pc, #224]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a658:	78c9      	ldrb	r1, [r1, #3]
 800a65a:	430b      	orrs	r3, r1
 800a65c:	0a1b      	lsrs	r3, r3, #8
 800a65e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a662:	431a      	orrs	r2, r3
 800a664:	4b34      	ldr	r3, [pc, #208]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	0619      	lsls	r1, r3, #24
 800a66a:	4b33      	ldr	r3, [pc, #204]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a66c:	785b      	ldrb	r3, [r3, #1]
 800a66e:	041b      	lsls	r3, r3, #16
 800a670:	4319      	orrs	r1, r3
 800a672:	4b31      	ldr	r3, [pc, #196]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a674:	789b      	ldrb	r3, [r3, #2]
 800a676:	021b      	lsls	r3, r3, #8
 800a678:	430b      	orrs	r3, r1
 800a67a:	492f      	ldr	r1, [pc, #188]	@ (800a738 <MX_LWIP_Init+0x2bc>)
 800a67c:	78c9      	ldrb	r1, [r1, #3]
 800a67e:	430b      	orrs	r3, r1
 800a680:	0e1b      	lsrs	r3, r3, #24
 800a682:	4313      	orrs	r3, r2
 800a684:	4a33      	ldr	r2, [pc, #204]	@ (800a754 <MX_LWIP_Init+0x2d8>)
 800a686:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a688:	4b2c      	ldr	r3, [pc, #176]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	061a      	lsls	r2, r3, #24
 800a68e:	4b2b      	ldr	r3, [pc, #172]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a690:	785b      	ldrb	r3, [r3, #1]
 800a692:	041b      	lsls	r3, r3, #16
 800a694:	431a      	orrs	r2, r3
 800a696:	4b29      	ldr	r3, [pc, #164]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a698:	789b      	ldrb	r3, [r3, #2]
 800a69a:	021b      	lsls	r3, r3, #8
 800a69c:	4313      	orrs	r3, r2
 800a69e:	4a27      	ldr	r2, [pc, #156]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a6a0:	78d2      	ldrb	r2, [r2, #3]
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	061a      	lsls	r2, r3, #24
 800a6a6:	4b25      	ldr	r3, [pc, #148]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	0619      	lsls	r1, r3, #24
 800a6ac:	4b23      	ldr	r3, [pc, #140]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a6ae:	785b      	ldrb	r3, [r3, #1]
 800a6b0:	041b      	lsls	r3, r3, #16
 800a6b2:	4319      	orrs	r1, r3
 800a6b4:	4b21      	ldr	r3, [pc, #132]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a6b6:	789b      	ldrb	r3, [r3, #2]
 800a6b8:	021b      	lsls	r3, r3, #8
 800a6ba:	430b      	orrs	r3, r1
 800a6bc:	491f      	ldr	r1, [pc, #124]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a6be:	78c9      	ldrb	r1, [r1, #3]
 800a6c0:	430b      	orrs	r3, r1
 800a6c2:	021b      	lsls	r3, r3, #8
 800a6c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a6c8:	431a      	orrs	r2, r3
 800a6ca:	4b1c      	ldr	r3, [pc, #112]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	0619      	lsls	r1, r3, #24
 800a6d0:	4b1a      	ldr	r3, [pc, #104]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a6d2:	785b      	ldrb	r3, [r3, #1]
 800a6d4:	041b      	lsls	r3, r3, #16
 800a6d6:	4319      	orrs	r1, r3
 800a6d8:	4b18      	ldr	r3, [pc, #96]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a6da:	789b      	ldrb	r3, [r3, #2]
 800a6dc:	021b      	lsls	r3, r3, #8
 800a6de:	430b      	orrs	r3, r1
 800a6e0:	4916      	ldr	r1, [pc, #88]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a6e2:	78c9      	ldrb	r1, [r1, #3]
 800a6e4:	430b      	orrs	r3, r1
 800a6e6:	0a1b      	lsrs	r3, r3, #8
 800a6e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a6ec:	431a      	orrs	r2, r3
 800a6ee:	4b13      	ldr	r3, [pc, #76]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	0619      	lsls	r1, r3, #24
 800a6f4:	4b11      	ldr	r3, [pc, #68]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a6f6:	785b      	ldrb	r3, [r3, #1]
 800a6f8:	041b      	lsls	r3, r3, #16
 800a6fa:	4319      	orrs	r1, r3
 800a6fc:	4b0f      	ldr	r3, [pc, #60]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a6fe:	789b      	ldrb	r3, [r3, #2]
 800a700:	021b      	lsls	r3, r3, #8
 800a702:	430b      	orrs	r3, r1
 800a704:	490d      	ldr	r1, [pc, #52]	@ (800a73c <MX_LWIP_Init+0x2c0>)
 800a706:	78c9      	ldrb	r1, [r1, #3]
 800a708:	430b      	orrs	r3, r1
 800a70a:	0e1b      	lsrs	r3, r3, #24
 800a70c:	4313      	orrs	r3, r2
 800a70e:	4a12      	ldr	r2, [pc, #72]	@ (800a758 <MX_LWIP_Init+0x2dc>)
 800a710:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800a712:	4b12      	ldr	r3, [pc, #72]	@ (800a75c <MX_LWIP_Init+0x2e0>)
 800a714:	9302      	str	r3, [sp, #8]
 800a716:	4b12      	ldr	r3, [pc, #72]	@ (800a760 <MX_LWIP_Init+0x2e4>)
 800a718:	9301      	str	r3, [sp, #4]
 800a71a:	2300      	movs	r3, #0
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	4b0e      	ldr	r3, [pc, #56]	@ (800a758 <MX_LWIP_Init+0x2dc>)
 800a720:	4a0c      	ldr	r2, [pc, #48]	@ (800a754 <MX_LWIP_Init+0x2d8>)
 800a722:	490b      	ldr	r1, [pc, #44]	@ (800a750 <MX_LWIP_Init+0x2d4>)
 800a724:	480f      	ldr	r0, [pc, #60]	@ (800a764 <MX_LWIP_Init+0x2e8>)
 800a726:	f006 ffc1 	bl	80116ac <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a72a:	480e      	ldr	r0, [pc, #56]	@ (800a764 <MX_LWIP_Init+0x2e8>)
 800a72c:	f007 f970 	bl	8011a10 <netif_set_default>
 800a730:	e01a      	b.n	800a768 <MX_LWIP_Init+0x2ec>
 800a732:	bf00      	nop
 800a734:	20000814 	.word	0x20000814
 800a738:	20000818 	.word	0x20000818
 800a73c:	2000081c 	.word	0x2000081c
 800a740:	0801e624 	.word	0x0801e624
 800a744:	0801e634 	.word	0x0801e634
 800a748:	0801e640 	.word	0x0801e640
 800a74c:	0801e658 	.word	0x0801e658
 800a750:	20000808 	.word	0x20000808
 800a754:	2000080c 	.word	0x2000080c
 800a758:	20000810 	.word	0x20000810
 800a75c:	08010a55 	.word	0x08010a55
 800a760:	0800b2a9 	.word	0x0800b2a9
 800a764:	200007d4 	.word	0x200007d4

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800a768:	4812      	ldr	r0, [pc, #72]	@ (800a7b4 <MX_LWIP_Init+0x338>)
 800a76a:	f007 f961 	bl	8011a30 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a76e:	4912      	ldr	r1, [pc, #72]	@ (800a7b8 <MX_LWIP_Init+0x33c>)
 800a770:	4810      	ldr	r0, [pc, #64]	@ (800a7b4 <MX_LWIP_Init+0x338>)
 800a772:	f007 fa2d 	bl	8011bd0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  lwip_cdc_debug_log("LWIP_INIT", "Creating Ethernet link handler thread");
 800a776:	4911      	ldr	r1, [pc, #68]	@ (800a7bc <MX_LWIP_Init+0x340>)
 800a778:	4811      	ldr	r0, [pc, #68]	@ (800a7c0 <MX_LWIP_Init+0x344>)
 800a77a:	f7ff fe5f 	bl	800a43c <lwip_cdc_debug_log>
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800a77e:	4b11      	ldr	r3, [pc, #68]	@ (800a7c4 <MX_LWIP_Init+0x348>)
 800a780:	1d3c      	adds	r4, r7, #4
 800a782:	461d      	mov	r5, r3
 800a784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a788:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a78c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800a790:	1d3b      	adds	r3, r7, #4
 800a792:	4908      	ldr	r1, [pc, #32]	@ (800a7b4 <MX_LWIP_Init+0x338>)
 800a794:	4618      	mov	r0, r3
 800a796:	f003 f93f 	bl	800da18 <osThreadCreate>
  lwip_cdc_debug_log("LWIP_INIT", "Ethernet link handler thread created");
 800a79a:	490b      	ldr	r1, [pc, #44]	@ (800a7c8 <MX_LWIP_Init+0x34c>)
 800a79c:	4808      	ldr	r0, [pc, #32]	@ (800a7c0 <MX_LWIP_Init+0x344>)
 800a79e:	f7ff fe4d 	bl	800a43c <lwip_cdc_debug_log>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */
  lwip_cdc_debug_log("LWIP_INIT", "LwIP initialization completed successfully");
 800a7a2:	490a      	ldr	r1, [pc, #40]	@ (800a7cc <MX_LWIP_Init+0x350>)
 800a7a4:	4806      	ldr	r0, [pc, #24]	@ (800a7c0 <MX_LWIP_Init+0x344>)
 800a7a6:	f7ff fe49 	bl	800a43c <lwip_cdc_debug_log>
/* USER CODE END 3 */
}
 800a7aa:	bf00      	nop
 800a7ac:	37a0      	adds	r7, #160	@ 0xa0
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bdb0      	pop	{r4, r5, r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	200007d4 	.word	0x200007d4
 800a7b8:	0800a7d1 	.word	0x0800a7d1
 800a7bc:	0801e670 	.word	0x0801e670
 800a7c0:	0801e634 	.word	0x0801e634
 800a7c4:	0801e6f4 	.word	0x0801e6f4
 800a7c8:	0801e698 	.word	0x0801e698
 800a7cc:	0801e6c0 	.word	0x0801e6c0

0800a7d0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b0a2      	sub	sp, #136	@ 0x88
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a7de:	f003 0301 	and.w	r3, r3, #1
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d016      	beq.n	800a816 <ethernet_link_status_updated+0x46>
  {
/* USER CODE BEGIN 5 */
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is UP");
 800a7e8:	490f      	ldr	r1, [pc, #60]	@ (800a828 <ethernet_link_status_updated+0x58>)
 800a7ea:	4810      	ldr	r0, [pc, #64]	@ (800a82c <ethernet_link_status_updated+0x5c>)
 800a7ec:	f7ff fe26 	bl	800a43c <lwip_cdc_debug_log>
    
    char status_msg[128];
    snprintf(status_msg, sizeof(status_msg), "Interface UP - IP: %s", ip4addr_ntoa(netif_ip4_addr(netif)));
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	3304      	adds	r3, #4
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f00f fef5 	bl	801a5e4 <ip4addr_ntoa>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	f107 0008 	add.w	r0, r7, #8
 800a800:	4a0b      	ldr	r2, [pc, #44]	@ (800a830 <ethernet_link_status_updated+0x60>)
 800a802:	2180      	movs	r1, #128	@ 0x80
 800a804:	f011 fe5c 	bl	801c4c0 <sniprintf>
    lwip_cdc_debug_log("LINK_STATUS", status_msg);
 800a808:	f107 0308 	add.w	r3, r7, #8
 800a80c:	4619      	mov	r1, r3
 800a80e:	4807      	ldr	r0, [pc, #28]	@ (800a82c <ethernet_link_status_updated+0x5c>)
 800a810:	f7ff fe14 	bl	800a43c <lwip_cdc_debug_log>
  {
/* USER CODE BEGIN 6 */
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is DOWN");
/* USER CODE END 6 */
  }
}
 800a814:	e003      	b.n	800a81e <ethernet_link_status_updated+0x4e>
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is DOWN");
 800a816:	4907      	ldr	r1, [pc, #28]	@ (800a834 <ethernet_link_status_updated+0x64>)
 800a818:	4804      	ldr	r0, [pc, #16]	@ (800a82c <ethernet_link_status_updated+0x5c>)
 800a81a:	f7ff fe0f 	bl	800a43c <lwip_cdc_debug_log>
}
 800a81e:	bf00      	nop
 800a820:	3788      	adds	r7, #136	@ 0x88
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	0801e710 	.word	0x0801e710
 800a82c:	0801e728 	.word	0x0801e728
 800a830:	0801e734 	.word	0x0801e734
 800a834:	0801e74c 	.word	0x0801e74c

0800a838 <cdc_debug_printf>:
  * @brief  Send debug message via CDC
  * @param  msg: debug message string
  * @retval None
  */
static void cdc_debug_printf(const char *msg)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  uint8_t len = strlen(msg);
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f7f5 fcc5 	bl	80001d0 <strlen>
 800a846:	4603      	mov	r3, r0
 800a848:	73fb      	strb	r3, [r7, #15]
  if (len > 0)
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d008      	beq.n	800a862 <cdc_debug_printf+0x2a>
  {
    CDC_Transmit_FS((uint8_t*)msg, len);
 800a850:	7bfb      	ldrb	r3, [r7, #15]
 800a852:	b29b      	uxth	r3, r3
 800a854:	4619      	mov	r1, r3
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f011 f83c 	bl	801b8d4 <CDC_Transmit_FS>
    HAL_Delay(1); // Small delay to ensure transmission
 800a85c:	2001      	movs	r0, #1
 800a85e:	f7f9 fdf1 	bl	8004444 <HAL_Delay>
  }
}
 800a862:	bf00      	nop
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
	...

0800a86c <cdc_debug_log>:
  * @param  prefix: message prefix
  * @param  msg: debug message string
  * @retval None
  */
static void cdc_debug_log(const char *prefix, const char *msg)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b0a6      	sub	sp, #152	@ 0x98
 800a870:	af02      	add	r7, sp, #8
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  char debug_buf[128];
  uint32_t tick = HAL_GetTick();
 800a876:	f7f9 fdd9 	bl	800442c <HAL_GetTick>
 800a87a:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
  snprintf(debug_buf, sizeof(debug_buf), "[%lu] %s: %s\r\n", tick, prefix, msg);
 800a87e:	f107 000c 	add.w	r0, r7, #12
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	9301      	str	r3, [sp, #4]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	9300      	str	r3, [sp, #0]
 800a88a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a88e:	4a06      	ldr	r2, [pc, #24]	@ (800a8a8 <cdc_debug_log+0x3c>)
 800a890:	2180      	movs	r1, #128	@ 0x80
 800a892:	f011 fe15 	bl	801c4c0 <sniprintf>
  cdc_debug_printf(debug_buf);
 800a896:	f107 030c 	add.w	r3, r7, #12
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7ff ffcc 	bl	800a838 <cdc_debug_printf>
}
 800a8a0:	bf00      	nop
 800a8a2:	3790      	adds	r7, #144	@ 0x90
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	0801e768 	.word	0x0801e768

0800a8ac <debug_eth_dma_descriptors>:
/**
  * @brief  Debug ETH DMA descriptors
  * @retval None
  */
static void debug_eth_dma_descriptors(void)
{
 800a8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ae:	b0cf      	sub	sp, #316	@ 0x13c
 800a8b0:	af06      	add	r7, sp, #24
  char debug_msg[256];
  
  cdc_debug_log("DMA_DESC", "=== RX Descriptors Status ===");
 800a8b2:	495d      	ldr	r1, [pc, #372]	@ (800aa28 <debug_eth_dma_descriptors+0x17c>)
 800a8b4:	485d      	ldr	r0, [pc, #372]	@ (800aa2c <debug_eth_dma_descriptors+0x180>)
 800a8b6:	f7ff ffd9 	bl	800a86c <cdc_debug_log>
  // 检查RX描述符状态
  for(int i = 0; i < ETH_RX_DESC_CNT; i++) {
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800a8c0:	e048      	b.n	800a954 <debug_eth_dma_descriptors+0xa8>
    uint32_t desc0 = DMARxDscrTab[i].DESC0;
 800a8c2:	495b      	ldr	r1, [pc, #364]	@ (800aa30 <debug_eth_dma_descriptors+0x184>)
 800a8c4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	4413      	add	r3, r2
 800a8ce:	00db      	lsls	r3, r3, #3
 800a8d0:	440b      	add	r3, r1
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    uint32_t desc2 = DMARxDscrTab[i].DESC2;
 800a8d8:	4955      	ldr	r1, [pc, #340]	@ (800aa30 <debug_eth_dma_descriptors+0x184>)
 800a8da:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800a8de:	4613      	mov	r3, r2
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	4413      	add	r3, r2
 800a8e4:	00db      	lsls	r3, r3, #3
 800a8e6:	440b      	add	r3, r1
 800a8e8:	3308      	adds	r3, #8
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    
    snprintf(debug_msg, sizeof(debug_msg),
             "RX[%d]: OWN=%lu ES=%lu FS=%lu LS=%lu FL=%lu Buf1=0x%08lX",
             i, 
             (desc0 & ETH_DMARXDESC_OWN) ? 1UL : 0UL,      // Owner bit
 800a8f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800a8f4:	0fdb      	lsrs	r3, r3, #31
             (desc0 & ETH_DMARXDESC_ES) ? 1UL : 0UL,       // Error Summary
 800a8f6:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800a8fa:	0bd2      	lsrs	r2, r2, #15
    snprintf(debug_msg, sizeof(debug_msg),
 800a8fc:	f002 0201 	and.w	r2, r2, #1
             (desc0 & ETH_DMARXDESC_FS) ? 1UL : 0UL,       // First Segment
 800a900:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 800a904:	0a49      	lsrs	r1, r1, #9
    snprintf(debug_msg, sizeof(debug_msg),
 800a906:	f001 0101 	and.w	r1, r1, #1
             (desc0 & ETH_DMARXDESC_LS) ? 1UL : 0UL,       // Last Segment
 800a90a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800a90e:	0a00      	lsrs	r0, r0, #8
    snprintf(debug_msg, sizeof(debug_msg),
 800a910:	f000 0001 	and.w	r0, r0, #1
             (desc0 & ETH_DMARXDESC_FL) >> 16,             // Frame Length
 800a914:	f8d7 4108 	ldr.w	r4, [r7, #264]	@ 0x108
 800a918:	0c24      	lsrs	r4, r4, #16
    snprintf(debug_msg, sizeof(debug_msg),
 800a91a:	f3c4 040d 	ubfx	r4, r4, #0, #14
 800a91e:	1d3e      	adds	r6, r7, #4
 800a920:	f8d7 5104 	ldr.w	r5, [r7, #260]	@ 0x104
 800a924:	9505      	str	r5, [sp, #20]
 800a926:	9404      	str	r4, [sp, #16]
 800a928:	9003      	str	r0, [sp, #12]
 800a92a:	9102      	str	r1, [sp, #8]
 800a92c:	9201      	str	r2, [sp, #4]
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a934:	4a3f      	ldr	r2, [pc, #252]	@ (800aa34 <debug_eth_dma_descriptors+0x188>)
 800a936:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a93a:	4630      	mov	r0, r6
 800a93c:	f011 fdc0 	bl	801c4c0 <sniprintf>
             desc2);                                        // Buffer1 Address
    cdc_debug_log("DMA_DESC", debug_msg);
 800a940:	1d3b      	adds	r3, r7, #4
 800a942:	4619      	mov	r1, r3
 800a944:	4839      	ldr	r0, [pc, #228]	@ (800aa2c <debug_eth_dma_descriptors+0x180>)
 800a946:	f7ff ff91 	bl	800a86c <cdc_debug_log>
  for(int i = 0; i < ETH_RX_DESC_CNT; i++) {
 800a94a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a94e:	3301      	adds	r3, #1
 800a950:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800a954:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a958:	2b03      	cmp	r3, #3
 800a95a:	d9b2      	bls.n	800a8c2 <debug_eth_dma_descriptors+0x16>
  }
  
  cdc_debug_log("DMA_DESC", "=== TX Descriptors Status ===");
 800a95c:	4936      	ldr	r1, [pc, #216]	@ (800aa38 <debug_eth_dma_descriptors+0x18c>)
 800a95e:	4833      	ldr	r0, [pc, #204]	@ (800aa2c <debug_eth_dma_descriptors+0x180>)
 800a960:	f7ff ff84 	bl	800a86c <cdc_debug_log>
  // 检查TX描述符状态
  for(int i = 0; i < ETH_TX_DESC_CNT; i++) {
 800a964:	2300      	movs	r3, #0
 800a966:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800a96a:	e053      	b.n	800aa14 <debug_eth_dma_descriptors+0x168>
    uint32_t desc0 = DMATxDscrTab[i].DESC0;
 800a96c:	4933      	ldr	r1, [pc, #204]	@ (800aa3c <debug_eth_dma_descriptors+0x190>)
 800a96e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800a972:	4613      	mov	r3, r2
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	4413      	add	r3, r2
 800a978:	00db      	lsls	r3, r3, #3
 800a97a:	440b      	add	r3, r1
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    uint32_t desc1 = DMATxDscrTab[i].DESC1;
 800a982:	492e      	ldr	r1, [pc, #184]	@ (800aa3c <debug_eth_dma_descriptors+0x190>)
 800a984:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800a988:	4613      	mov	r3, r2
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	4413      	add	r3, r2
 800a98e:	00db      	lsls	r3, r3, #3
 800a990:	440b      	add	r3, r1
 800a992:	3304      	adds	r3, #4
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    uint32_t desc2 = DMATxDscrTab[i].DESC2;
 800a99a:	4928      	ldr	r1, [pc, #160]	@ (800aa3c <debug_eth_dma_descriptors+0x190>)
 800a99c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800a9a0:	4613      	mov	r3, r2
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	4413      	add	r3, r2
 800a9a6:	00db      	lsls	r3, r3, #3
 800a9a8:	440b      	add	r3, r1
 800a9aa:	3308      	adds	r3, #8
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    
    snprintf(debug_msg, sizeof(debug_msg),
             "TX[%d]: OWN=%lu ES=%lu FS=%lu LS=%lu TBS1=%lu Buf1=0x%08lX",
             i,
             (desc0 & ETH_DMATXDESC_OWN) ? 1UL : 0UL,      // Owner bit
 800a9b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9b6:	0fdb      	lsrs	r3, r3, #31
             (desc0 & ETH_DMATXDESC_ES) ? 1UL : 0UL,       // Error Summary
 800a9b8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800a9bc:	0bd2      	lsrs	r2, r2, #15
    snprintf(debug_msg, sizeof(debug_msg),
 800a9be:	f002 0201 	and.w	r2, r2, #1
             (desc0 & ETH_DMATXDESC_FS) ? 1UL : 0UL,       // First Segment
 800a9c2:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800a9c6:	0f09      	lsrs	r1, r1, #28
    snprintf(debug_msg, sizeof(debug_msg),
 800a9c8:	f001 0101 	and.w	r1, r1, #1
             (desc0 & ETH_DMATXDESC_LS) ? 1UL : 0UL,       // Last Segment
 800a9cc:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800a9d0:	0f40      	lsrs	r0, r0, #29
    snprintf(debug_msg, sizeof(debug_msg),
 800a9d2:	f000 0001 	and.w	r0, r0, #1
 800a9d6:	f8d7 4110 	ldr.w	r4, [r7, #272]	@ 0x110
 800a9da:	f3c4 040c 	ubfx	r4, r4, #0, #13
 800a9de:	1d3e      	adds	r6, r7, #4
 800a9e0:	f8d7 510c 	ldr.w	r5, [r7, #268]	@ 0x10c
 800a9e4:	9505      	str	r5, [sp, #20]
 800a9e6:	9404      	str	r4, [sp, #16]
 800a9e8:	9003      	str	r0, [sp, #12]
 800a9ea:	9102      	str	r1, [sp, #8]
 800a9ec:	9201      	str	r2, [sp, #4]
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a9f4:	4a12      	ldr	r2, [pc, #72]	@ (800aa40 <debug_eth_dma_descriptors+0x194>)
 800a9f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	f011 fd60 	bl	801c4c0 <sniprintf>
             desc1 & ETH_DMATXDESC_TBS1,                   // Transmit Buffer1 Size
             desc2);                                        // Buffer1 Address
    cdc_debug_log("DMA_DESC", debug_msg);
 800aa00:	1d3b      	adds	r3, r7, #4
 800aa02:	4619      	mov	r1, r3
 800aa04:	4809      	ldr	r0, [pc, #36]	@ (800aa2c <debug_eth_dma_descriptors+0x180>)
 800aa06:	f7ff ff31 	bl	800a86c <cdc_debug_log>
  for(int i = 0; i < ETH_TX_DESC_CNT; i++) {
 800aa0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800aa0e:	3301      	adds	r3, #1
 800aa10:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800aa14:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800aa18:	2b03      	cmp	r3, #3
 800aa1a:	d9a7      	bls.n	800a96c <debug_eth_dma_descriptors+0xc0>
  }
}
 800aa1c:	bf00      	nop
 800aa1e:	bf00      	nop
 800aa20:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa28:	0801e848 	.word	0x0801e848
 800aa2c:	0801e868 	.word	0x0801e868
 800aa30:	200051ac 	.word	0x200051ac
 800aa34:	0801e874 	.word	0x0801e874
 800aa38:	0801e8b0 	.word	0x0801e8b0
 800aa3c:	2000524c 	.word	0x2000524c
 800aa40:	0801e8d0 	.word	0x0801e8d0

0800aa44 <debug_eth_dma_registers>:
/**
  * @brief  Debug ETH DMA registers
  * @retval None
  */
static void debug_eth_dma_registers(void)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b0a0      	sub	sp, #128	@ 0x80
 800aa48:	af00      	add	r7, sp, #0
  char debug_msg[128];
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_BMR=0x%08lX", ETH->DMABMR);
 800aa4a:	4b25      	ldr	r3, [pc, #148]	@ (800aae0 <debug_eth_dma_registers+0x9c>)
 800aa4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4638      	mov	r0, r7
 800aa54:	4a23      	ldr	r2, [pc, #140]	@ (800aae4 <debug_eth_dma_registers+0xa0>)
 800aa56:	2180      	movs	r1, #128	@ 0x80
 800aa58:	f011 fd32 	bl	801c4c0 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800aa5c:	463b      	mov	r3, r7
 800aa5e:	4619      	mov	r1, r3
 800aa60:	4821      	ldr	r0, [pc, #132]	@ (800aae8 <debug_eth_dma_registers+0xa4>)
 800aa62:	f7ff ff03 	bl	800a86c <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_SR=0x%08lX", ETH->DMASR);
 800aa66:	4b1e      	ldr	r3, [pc, #120]	@ (800aae0 <debug_eth_dma_registers+0x9c>)
 800aa68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa6c:	695b      	ldr	r3, [r3, #20]
 800aa6e:	4638      	mov	r0, r7
 800aa70:	4a1e      	ldr	r2, [pc, #120]	@ (800aaec <debug_eth_dma_registers+0xa8>)
 800aa72:	2180      	movs	r1, #128	@ 0x80
 800aa74:	f011 fd24 	bl	801c4c0 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800aa78:	463b      	mov	r3, r7
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	481a      	ldr	r0, [pc, #104]	@ (800aae8 <debug_eth_dma_registers+0xa4>)
 800aa7e:	f7ff fef5 	bl	800a86c <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_IER=0x%08lX", ETH->DMAIER);
 800aa82:	4b17      	ldr	r3, [pc, #92]	@ (800aae0 <debug_eth_dma_registers+0x9c>)
 800aa84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa88:	69db      	ldr	r3, [r3, #28]
 800aa8a:	4638      	mov	r0, r7
 800aa8c:	4a18      	ldr	r2, [pc, #96]	@ (800aaf0 <debug_eth_dma_registers+0xac>)
 800aa8e:	2180      	movs	r1, #128	@ 0x80
 800aa90:	f011 fd16 	bl	801c4c0 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800aa94:	463b      	mov	r3, r7
 800aa96:	4619      	mov	r1, r3
 800aa98:	4813      	ldr	r0, [pc, #76]	@ (800aae8 <debug_eth_dma_registers+0xa4>)
 800aa9a:	f7ff fee7 	bl	800a86c <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_RDLAR=0x%08lX", ETH->DMARDLAR);
 800aa9e:	4b10      	ldr	r3, [pc, #64]	@ (800aae0 <debug_eth_dma_registers+0x9c>)
 800aaa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	4638      	mov	r0, r7
 800aaa8:	4a12      	ldr	r2, [pc, #72]	@ (800aaf4 <debug_eth_dma_registers+0xb0>)
 800aaaa:	2180      	movs	r1, #128	@ 0x80
 800aaac:	f011 fd08 	bl	801c4c0 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800aab0:	463b      	mov	r3, r7
 800aab2:	4619      	mov	r1, r3
 800aab4:	480c      	ldr	r0, [pc, #48]	@ (800aae8 <debug_eth_dma_registers+0xa4>)
 800aab6:	f7ff fed9 	bl	800a86c <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_TDLAR=0x%08lX", ETH->DMATDLAR);
 800aaba:	4b09      	ldr	r3, [pc, #36]	@ (800aae0 <debug_eth_dma_registers+0x9c>)
 800aabc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	4638      	mov	r0, r7
 800aac4:	4a0c      	ldr	r2, [pc, #48]	@ (800aaf8 <debug_eth_dma_registers+0xb4>)
 800aac6:	2180      	movs	r1, #128	@ 0x80
 800aac8:	f011 fcfa 	bl	801c4c0 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800aacc:	463b      	mov	r3, r7
 800aace:	4619      	mov	r1, r3
 800aad0:	4805      	ldr	r0, [pc, #20]	@ (800aae8 <debug_eth_dma_registers+0xa4>)
 800aad2:	f7ff fecb 	bl	800a86c <cdc_debug_log>
}
 800aad6:	bf00      	nop
 800aad8:	3780      	adds	r7, #128	@ 0x80
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	40028000 	.word	0x40028000
 800aae4:	0801e90c 	.word	0x0801e90c
 800aae8:	0801e91c 	.word	0x0801e91c
 800aaec:	0801e924 	.word	0x0801e924
 800aaf0:	0801e934 	.word	0x0801e934
 800aaf4:	0801e944 	.word	0x0801e944
 800aaf8:	0801e958 	.word	0x0801e958

0800aafc <debug_eth_config>:
/**
  * @brief  Debug ETH configuration and status
  * @retval None
  */
static void debug_eth_config(void)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b0a2      	sub	sp, #136	@ 0x88
 800ab00:	af02      	add	r7, sp, #8
  char debug_msg[128];
  
  // MAC configuration
  snprintf(debug_msg, sizeof(debug_msg), "MAC_CR=0x%08lX", ETH->MACCR);
 800ab02:	4b1c      	ldr	r3, [pc, #112]	@ (800ab74 <debug_eth_config+0x78>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4638      	mov	r0, r7
 800ab08:	4a1b      	ldr	r2, [pc, #108]	@ (800ab78 <debug_eth_config+0x7c>)
 800ab0a:	2180      	movs	r1, #128	@ 0x80
 800ab0c:	f011 fcd8 	bl	801c4c0 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 800ab10:	463b      	mov	r3, r7
 800ab12:	4619      	mov	r1, r3
 800ab14:	4819      	ldr	r0, [pc, #100]	@ (800ab7c <debug_eth_config+0x80>)
 800ab16:	f7ff fea9 	bl	800a86c <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "MAC_FCR=0x%08lX", ETH->MACFCR);
 800ab1a:	4b16      	ldr	r3, [pc, #88]	@ (800ab74 <debug_eth_config+0x78>)
 800ab1c:	699b      	ldr	r3, [r3, #24]
 800ab1e:	4638      	mov	r0, r7
 800ab20:	4a17      	ldr	r2, [pc, #92]	@ (800ab80 <debug_eth_config+0x84>)
 800ab22:	2180      	movs	r1, #128	@ 0x80
 800ab24:	f011 fccc 	bl	801c4c0 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 800ab28:	463b      	mov	r3, r7
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	4813      	ldr	r0, [pc, #76]	@ (800ab7c <debug_eth_config+0x80>)
 800ab2e:	f7ff fe9d 	bl	800a86c <cdc_debug_log>
  
  // DMA configuration  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_OMR=0x%08lX", ETH->DMAOMR);
 800ab32:	4b10      	ldr	r3, [pc, #64]	@ (800ab74 <debug_eth_config+0x78>)
 800ab34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab38:	699b      	ldr	r3, [r3, #24]
 800ab3a:	4638      	mov	r0, r7
 800ab3c:	4a11      	ldr	r2, [pc, #68]	@ (800ab84 <debug_eth_config+0x88>)
 800ab3e:	2180      	movs	r1, #128	@ 0x80
 800ab40:	f011 fcbe 	bl	801c4c0 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 800ab44:	463b      	mov	r3, r7
 800ab46:	4619      	mov	r1, r3
 800ab48:	480c      	ldr	r0, [pc, #48]	@ (800ab7c <debug_eth_config+0x80>)
 800ab4a:	f7ff fe8f 	bl	800a86c <cdc_debug_log>
  
  // Debug descriptor counts
  snprintf(debug_msg, sizeof(debug_msg), "RX_DESC_CNT=%d, TX_DESC_CNT=%d, RX_BUF_CNT=%d", 
 800ab4e:	4638      	mov	r0, r7
 800ab50:	230c      	movs	r3, #12
 800ab52:	9301      	str	r3, [sp, #4]
 800ab54:	2304      	movs	r3, #4
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	2304      	movs	r3, #4
 800ab5a:	4a0b      	ldr	r2, [pc, #44]	@ (800ab88 <debug_eth_config+0x8c>)
 800ab5c:	2180      	movs	r1, #128	@ 0x80
 800ab5e:	f011 fcaf 	bl	801c4c0 <sniprintf>
           ETH_RX_DESC_CNT, ETH_TX_DESC_CNT, ETH_RX_BUFFER_CNT);
  cdc_debug_log("ETH_CFG", debug_msg);
 800ab62:	463b      	mov	r3, r7
 800ab64:	4619      	mov	r1, r3
 800ab66:	4805      	ldr	r0, [pc, #20]	@ (800ab7c <debug_eth_config+0x80>)
 800ab68:	f7ff fe80 	bl	800a86c <cdc_debug_log>
}
 800ab6c:	bf00      	nop
 800ab6e:	3780      	adds	r7, #128	@ 0x80
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	40028000 	.word	0x40028000
 800ab78:	0801e96c 	.word	0x0801e96c
 800ab7c:	0801e97c 	.word	0x0801e97c
 800ab80:	0801e984 	.word	0x0801e984
 800ab84:	0801e994 	.word	0x0801e994
 800ab88:	0801e9a4 	.word	0x0801e9a4

0800ab8c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800ab94:	4b04      	ldr	r3, [pc, #16]	@ (800aba8 <HAL_ETH_RxCpltCallback+0x1c>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f003 f8b9 	bl	800dd10 <osSemaphoreRelease>
}
 800ab9e:	bf00      	nop
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	20005320 	.word	0x20005320

0800abac <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800abb4:	4b04      	ldr	r3, [pc, #16]	@ (800abc8 <HAL_ETH_TxCpltCallback+0x1c>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4618      	mov	r0, r3
 800abba:	f003 f8a9 	bl	800dd10 <osSemaphoreRelease>
}
 800abbe:	bf00      	nop
 800abc0:	3708      	adds	r7, #8
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	20005324 	.word	0x20005324

0800abcc <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f7fa fb41 	bl	800525c <HAL_ETH_GetDMAError>
 800abda:	4603      	mov	r3, r0
 800abdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abe0:	2b80      	cmp	r3, #128	@ 0x80
 800abe2:	d104      	bne.n	800abee <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800abe4:	4b04      	ldr	r3, [pc, #16]	@ (800abf8 <HAL_ETH_ErrorCallback+0x2c>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4618      	mov	r0, r3
 800abea:	f003 f891 	bl	800dd10 <osSemaphoreRelease>
  }
}
 800abee:	bf00      	nop
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	20005320 	.word	0x20005320

0800abfc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800abfc:	b5b0      	push	{r4, r5, r7, lr}
 800abfe:	b0ce      	sub	sp, #312	@ 0x138
 800ac00:	af02      	add	r7, sp, #8
 800ac02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ac06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ac0a:	6018      	str	r0, [r3, #0]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  ETH_MACConfigTypeDef macConfig;
/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ac12:	4bba      	ldr	r3, [pc, #744]	@ (800aefc <low_level_init+0x300>)
 800ac14:	4aba      	ldr	r2, [pc, #744]	@ (800af00 <low_level_init+0x304>)
 800ac16:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
  MACAddr[1] = 0x80;
 800ac1e:	2380      	movs	r3, #128	@ 0x80
 800ac20:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
  MACAddr[2] = 0xE1;
 800ac24:	23e1      	movs	r3, #225	@ 0xe1
 800ac26:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
  MACAddr[3] = 0x00;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
  MACAddr[4] = 0x00;
 800ac30:	2300      	movs	r3, #0
 800ac32:	f887 30b8 	strb.w	r3, [r7, #184]	@ 0xb8
  MACAddr[5] = 0x00;
 800ac36:	2300      	movs	r3, #0
 800ac38:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
  heth.Init.MACAddr = &MACAddr[0];
 800ac3c:	4aaf      	ldr	r2, [pc, #700]	@ (800aefc <low_level_init+0x300>)
 800ac3e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800ac42:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800ac44:	4bad      	ldr	r3, [pc, #692]	@ (800aefc <low_level_init+0x300>)
 800ac46:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800ac4a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800ac4c:	4bab      	ldr	r3, [pc, #684]	@ (800aefc <low_level_init+0x300>)
 800ac4e:	4aad      	ldr	r2, [pc, #692]	@ (800af04 <low_level_init+0x308>)
 800ac50:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800ac52:	4baa      	ldr	r3, [pc, #680]	@ (800aefc <low_level_init+0x300>)
 800ac54:	4aac      	ldr	r2, [pc, #688]	@ (800af08 <low_level_init+0x30c>)
 800ac56:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800ac58:	4ba8      	ldr	r3, [pc, #672]	@ (800aefc <low_level_init+0x300>)
 800ac5a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800ac5e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ac60:	48a6      	ldr	r0, [pc, #664]	@ (800aefc <low_level_init+0x300>)
 800ac62:	f7f9 fcf5 	bl	8004650 <HAL_ETH_Init>
 800ac66:	4603      	mov	r3, r0
 800ac68:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800ac6c:	2238      	movs	r2, #56	@ 0x38
 800ac6e:	2100      	movs	r1, #0
 800ac70:	48a6      	ldr	r0, [pc, #664]	@ (800af0c <low_level_init+0x310>)
 800ac72:	f011 fcc8 	bl	801c606 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800ac76:	4ba5      	ldr	r3, [pc, #660]	@ (800af0c <low_level_init+0x310>)
 800ac78:	2221      	movs	r2, #33	@ 0x21
 800ac7a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800ac7c:	4ba3      	ldr	r3, [pc, #652]	@ (800af0c <low_level_init+0x310>)
 800ac7e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800ac82:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800ac84:	4ba1      	ldr	r3, [pc, #644]	@ (800af0c <low_level_init+0x310>)
 800ac86:	2200      	movs	r2, #0
 800ac88:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800ac8a:	48a1      	ldr	r0, [pc, #644]	@ (800af10 <low_level_init+0x314>)
 800ac8c:	f006 fbc8 	bl	8011420 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ac90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ac94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2206      	movs	r2, #6
 800ac9c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800aca0:	4b96      	ldr	r3, [pc, #600]	@ (800aefc <low_level_init+0x300>)
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	781a      	ldrb	r2, [r3, #0]
 800aca6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800acaa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800acb4:	4b91      	ldr	r3, [pc, #580]	@ (800aefc <low_level_init+0x300>)
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	785a      	ldrb	r2, [r3, #1]
 800acba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800acbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800acc8:	4b8c      	ldr	r3, [pc, #560]	@ (800aefc <low_level_init+0x300>)
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	789a      	ldrb	r2, [r3, #2]
 800acce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800acd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800acdc:	4b87      	ldr	r3, [pc, #540]	@ (800aefc <low_level_init+0x300>)
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	78da      	ldrb	r2, [r3, #3]
 800ace2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ace6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800acf0:	4b82      	ldr	r3, [pc, #520]	@ (800aefc <low_level_init+0x300>)
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	791a      	ldrb	r2, [r3, #4]
 800acf6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800acfa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800ad04:	4b7d      	ldr	r3, [pc, #500]	@ (800aefc <low_level_init+0x300>)
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	795a      	ldrb	r2, [r3, #5]
 800ad0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ad0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800ad18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ad1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800ad26:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ad28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ad2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ad36:	f043 030a 	orr.w	r3, r3, #10
 800ad3a:	b2da      	uxtb	r2, r3
 800ad3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ad40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ad50:	2300      	movs	r3, #0
 800ad52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 800ad56:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f002 ff57 	bl	800dc10 <osSemaphoreCreate>
 800ad62:	4603      	mov	r3, r0
 800ad64:	4a6b      	ldr	r2, [pc, #428]	@ (800af14 <low_level_init+0x318>)
 800ad66:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 800ad68:	2300      	movs	r3, #0
 800ad6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ad6e:	2300      	movs	r3, #0
 800ad70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800ad74:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ad78:	2101      	movs	r1, #1
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f002 ff48 	bl	800dc10 <osSemaphoreCreate>
 800ad80:	4603      	mov	r3, r0
 800ad82:	4a65      	ldr	r2, [pc, #404]	@ (800af18 <low_level_init+0x31c>)
 800ad84:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 800ad86:	4b63      	ldr	r3, [pc, #396]	@ (800af14 <low_level_init+0x318>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f002 ff71 	bl	800dc74 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800ad92:	4b61      	ldr	r3, [pc, #388]	@ (800af18 <low_level_init+0x31c>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	2100      	movs	r1, #0
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f002 ff6b 	bl	800dc74 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800ad9e:	4b5f      	ldr	r3, [pc, #380]	@ (800af1c <low_level_init+0x320>)
 800ada0:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 800ada4:	461d      	mov	r5, r3
 800ada6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ada8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800adaa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800adae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800adb2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800adb6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800adba:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 800adbe:	6819      	ldr	r1, [r3, #0]
 800adc0:	4610      	mov	r0, r2
 800adc2:	f002 fe29 	bl	800da18 <osThreadCreate>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 800adc6:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f040 8158 	bne.w	800b080 <low_level_init+0x484>
  {
/* USER CODE BEGIN low_level_init Code 2 for User BSP */
    cdc_debug_log("PHY_INIT", "Starting PHY chip initialization");
 800add0:	4953      	ldr	r1, [pc, #332]	@ (800af20 <low_level_init+0x324>)
 800add2:	4854      	ldr	r0, [pc, #336]	@ (800af24 <low_level_init+0x328>)
 800add4:	f7ff fd4a 	bl	800a86c <cdc_debug_log>
    
    /* Set up PHY chip IO context */
    PHYchip_io_ctx.init = PHY_IO_Init;
 800add8:	4b53      	ldr	r3, [pc, #332]	@ (800af28 <low_level_init+0x32c>)
 800adda:	4a54      	ldr	r2, [pc, #336]	@ (800af2c <low_level_init+0x330>)
 800addc:	601a      	str	r2, [r3, #0]
    PHYchip_io_ctx.deinit = PHY_IO_DeInit;
 800adde:	4b52      	ldr	r3, [pc, #328]	@ (800af28 <low_level_init+0x32c>)
 800ade0:	4a53      	ldr	r2, [pc, #332]	@ (800af30 <low_level_init+0x334>)
 800ade2:	605a      	str	r2, [r3, #4]
    PHYchip_io_ctx.readreg = PHY_IO_ReadReg;
 800ade4:	4b50      	ldr	r3, [pc, #320]	@ (800af28 <low_level_init+0x32c>)
 800ade6:	4a53      	ldr	r2, [pc, #332]	@ (800af34 <low_level_init+0x338>)
 800ade8:	60da      	str	r2, [r3, #12]
    PHYchip_io_ctx.writereg = PHY_IO_WriteReg;
 800adea:	4b4f      	ldr	r3, [pc, #316]	@ (800af28 <low_level_init+0x32c>)
 800adec:	4a52      	ldr	r2, [pc, #328]	@ (800af38 <low_level_init+0x33c>)
 800adee:	609a      	str	r2, [r3, #8]
    PHYchip_io_ctx.gettick = PHY_IO_GetTick;
 800adf0:	4b4d      	ldr	r3, [pc, #308]	@ (800af28 <low_level_init+0x32c>)
 800adf2:	4a52      	ldr	r2, [pc, #328]	@ (800af3c <low_level_init+0x340>)
 800adf4:	611a      	str	r2, [r3, #16]

    /* Register PHY chip IO functions */
    if (eth_chip_regster_bus_io(&PHYchip, &PHYchip_io_ctx) != ETH_CHIP_STATUS_OK)
 800adf6:	494c      	ldr	r1, [pc, #304]	@ (800af28 <low_level_init+0x32c>)
 800adf8:	4851      	ldr	r0, [pc, #324]	@ (800af40 <low_level_init+0x344>)
 800adfa:	f7f9 f908 	bl	800400e <eth_chip_regster_bus_io>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d005      	beq.n	800ae10 <low_level_init+0x214>
    {
      cdc_debug_log("PHY_INIT", "Failed to register PHY IO functions");
 800ae04:	494f      	ldr	r1, [pc, #316]	@ (800af44 <low_level_init+0x348>)
 800ae06:	4847      	ldr	r0, [pc, #284]	@ (800af24 <low_level_init+0x328>)
 800ae08:	f7ff fd30 	bl	800a86c <cdc_debug_log>
      Error_Handler();
 800ae0c:	f7f6 fe6c 	bl	8001ae8 <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "PHY IO functions registered successfully");
 800ae10:	494d      	ldr	r1, [pc, #308]	@ (800af48 <low_level_init+0x34c>)
 800ae12:	4844      	ldr	r0, [pc, #272]	@ (800af24 <low_level_init+0x328>)
 800ae14:	f7ff fd2a 	bl	800a86c <cdc_debug_log>

    /* Initialize PHY chip */
    if (eth_chip_init(&PHYchip) != ETH_CHIP_STATUS_OK)
 800ae18:	4849      	ldr	r0, [pc, #292]	@ (800af40 <low_level_init+0x344>)
 800ae1a:	f7f9 f92b 	bl	8004074 <eth_chip_init>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d005      	beq.n	800ae30 <low_level_init+0x234>
    {
      cdc_debug_log("PHY_INIT", "PHY chip initialization failed");
 800ae24:	4949      	ldr	r1, [pc, #292]	@ (800af4c <low_level_init+0x350>)
 800ae26:	483f      	ldr	r0, [pc, #252]	@ (800af24 <low_level_init+0x328>)
 800ae28:	f7ff fd20 	bl	800a86c <cdc_debug_log>
      Error_Handler();
 800ae2c:	f7f6 fe5c 	bl	8001ae8 <Error_Handler>
    }
    
    char phy_addr_msg[64];
    snprintf(phy_addr_msg, sizeof(phy_addr_msg), "PHY chip initialized, address: %lu", PHYchip.devaddr);
 800ae30:	4b43      	ldr	r3, [pc, #268]	@ (800af40 <low_level_init+0x344>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f107 0008 	add.w	r0, r7, #8
 800ae38:	4a45      	ldr	r2, [pc, #276]	@ (800af50 <low_level_init+0x354>)
 800ae3a:	2140      	movs	r1, #64	@ 0x40
 800ae3c:	f011 fb40 	bl	801c4c0 <sniprintf>
    cdc_debug_log("PHY_INIT", phy_addr_msg);
 800ae40:	f107 0308 	add.w	r3, r7, #8
 800ae44:	4619      	mov	r1, r3
 800ae46:	4837      	ldr	r0, [pc, #220]	@ (800af24 <low_level_init+0x328>)
 800ae48:	f7ff fd10 	bl	800a86c <cdc_debug_log>

    /* Disable PHY power down mode */
    if (eth_chip_disable_power_down_mode(&PHYchip) != ETH_CHIP_STATUS_OK)
 800ae4c:	483c      	ldr	r0, [pc, #240]	@ (800af40 <low_level_init+0x344>)
 800ae4e:	f7f9 fa17 	bl	8004280 <eth_chip_disable_power_down_mode>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d005      	beq.n	800ae64 <low_level_init+0x268>
    {
      cdc_debug_log("PHY_INIT", "Failed to disable PHY power down mode");
 800ae58:	493e      	ldr	r1, [pc, #248]	@ (800af54 <low_level_init+0x358>)
 800ae5a:	4832      	ldr	r0, [pc, #200]	@ (800af24 <low_level_init+0x328>)
 800ae5c:	f7ff fd06 	bl	800a86c <cdc_debug_log>
      Error_Handler();
 800ae60:	f7f6 fe42 	bl	8001ae8 <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "PHY power down mode disabled");
 800ae64:	493c      	ldr	r1, [pc, #240]	@ (800af58 <low_level_init+0x35c>)
 800ae66:	482f      	ldr	r0, [pc, #188]	@ (800af24 <low_level_init+0x328>)
 800ae68:	f7ff fd00 	bl	800a86c <cdc_debug_log>

    /* 启动自动协商 */
    if (eth_chip_start_auto_nego(&PHYchip) != ETH_CHIP_STATUS_OK)
 800ae6c:	4834      	ldr	r0, [pc, #208]	@ (800af40 <low_level_init+0x344>)
 800ae6e:	f7f9 fa34 	bl	80042da <eth_chip_start_auto_nego>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d005      	beq.n	800ae84 <low_level_init+0x288>
    {
      cdc_debug_log("PHY_INIT", "Failed to start auto-negotiation");
 800ae78:	4938      	ldr	r1, [pc, #224]	@ (800af5c <low_level_init+0x360>)
 800ae7a:	482a      	ldr	r0, [pc, #168]	@ (800af24 <low_level_init+0x328>)
 800ae7c:	f7ff fcf6 	bl	800a86c <cdc_debug_log>
      Error_Handler();
 800ae80:	f7f6 fe32 	bl	8001ae8 <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "Auto-negotiation started successfully");
 800ae84:	4936      	ldr	r1, [pc, #216]	@ (800af60 <low_level_init+0x364>)
 800ae86:	4827      	ldr	r0, [pc, #156]	@ (800af24 <low_level_init+0x328>)
 800ae88:	f7ff fcf0 	bl	800a86c <cdc_debug_log>

    /* 等待自动协商完成 */
    uint32_t autoneg_timeout = 0;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    int32_t nego_state;
    do {
      HAL_Delay(100);
 800ae92:	2064      	movs	r0, #100	@ 0x64
 800ae94:	f7f9 fad6 	bl	8004444 <HAL_Delay>
      nego_state = eth_chip_get_link_state(&PHYchip);
 800ae98:	4829      	ldr	r0, [pc, #164]	@ (800af40 <low_level_init+0x344>)
 800ae9a:	f7f9 fa4b 	bl	8004334 <eth_chip_get_link_state>
 800ae9e:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
      autoneg_timeout++;
 800aea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aea6:	3301      	adds	r3, #1
 800aea8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
      
      if (autoneg_timeout % 10 == 0) {
 800aeac:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800aeb0:	4b2c      	ldr	r3, [pc, #176]	@ (800af64 <low_level_init+0x368>)
 800aeb2:	fba3 2301 	umull	r2, r3, r3, r1
 800aeb6:	08da      	lsrs	r2, r3, #3
 800aeb8:	4613      	mov	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	005b      	lsls	r3, r3, #1
 800aec0:	1aca      	subs	r2, r1, r3
 800aec2:	2a00      	cmp	r2, #0
 800aec4:	d110      	bne.n	800aee8 <low_level_init+0x2ec>
        char timeout_msg[64];
        snprintf(timeout_msg, sizeof(timeout_msg), "Auto-nego timeout: %lu, state: %ld", autoneg_timeout, nego_state);
 800aec6:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800aeca:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aed4:	4a24      	ldr	r2, [pc, #144]	@ (800af68 <low_level_init+0x36c>)
 800aed6:	2140      	movs	r1, #64	@ 0x40
 800aed8:	f011 faf2 	bl	801c4c0 <sniprintf>
        cdc_debug_log("PHY_INIT", timeout_msg);
 800aedc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800aee0:	4619      	mov	r1, r3
 800aee2:	4810      	ldr	r0, [pc, #64]	@ (800af24 <low_level_init+0x328>)
 800aee4:	f7ff fcc2 	bl	800a86c <cdc_debug_log>
      }
      
      /* 超时保护 */
      if (autoneg_timeout > 50) { // 5秒超时
 800aee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aeec:	2b32      	cmp	r3, #50	@ 0x32
 800aeee:	d93f      	bls.n	800af70 <low_level_init+0x374>
        cdc_debug_log("PHY_INIT", "Auto-negotiation timeout, using current state");
 800aef0:	491e      	ldr	r1, [pc, #120]	@ (800af6c <low_level_init+0x370>)
 800aef2:	480c      	ldr	r0, [pc, #48]	@ (800af24 <low_level_init+0x328>)
 800aef4:	f7ff fcba 	bl	800a86c <cdc_debug_log>
        break;
 800aef8:	e043      	b.n	800af82 <low_level_init+0x386>
 800aefa:	bf00      	nop
 800aefc:	20005328 	.word	0x20005328
 800af00:	40028000 	.word	0x40028000
 800af04:	2000524c 	.word	0x2000524c
 800af08:	200051ac 	.word	0x200051ac
 800af0c:	200053d8 	.word	0x200053d8
 800af10:	08021cec 	.word	0x08021cec
 800af14:	20005320 	.word	0x20005320
 800af18:	20005324 	.word	0x20005324
 800af1c:	0801ecd4 	.word	0x0801ecd4
 800af20:	0801e9d4 	.word	0x0801e9d4
 800af24:	0801e9f8 	.word	0x0801e9f8
 800af28:	2000530c 	.word	0x2000530c
 800af2c:	0800b355 	.word	0x0800b355
 800af30:	0800b381 	.word	0x0800b381
 800af34:	0800b3a9 	.word	0x0800b3a9
 800af38:	0800b401 	.word	0x0800b401
 800af3c:	0800b45d 	.word	0x0800b45d
 800af40:	200052ec 	.word	0x200052ec
 800af44:	0801ea04 	.word	0x0801ea04
 800af48:	0801ea28 	.word	0x0801ea28
 800af4c:	0801ea54 	.word	0x0801ea54
 800af50:	0801ea74 	.word	0x0801ea74
 800af54:	0801ea98 	.word	0x0801ea98
 800af58:	0801eac0 	.word	0x0801eac0
 800af5c:	0801eae0 	.word	0x0801eae0
 800af60:	0801eb04 	.word	0x0801eb04
 800af64:	cccccccd 	.word	0xcccccccd
 800af68:	0801eb2c 	.word	0x0801eb2c
 800af6c:	0801eb50 	.word	0x0801eb50
      }
    } while (nego_state == ETH_CHIP_STATUS_AUTONEGO_NOTDONE || nego_state == ETH_CHIP_STATUS_READ_ERROR);
 800af70:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800af74:	2b06      	cmp	r3, #6
 800af76:	d08c      	beq.n	800ae92 <low_level_init+0x296>
 800af78:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800af7c:	f113 0f05 	cmn.w	r3, #5
 800af80:	d087      	beq.n	800ae92 <low_level_init+0x296>

    /* Get PHY link state and configure ETH accordingly */
    phy_link_state = eth_chip_get_link_state(&PHYchip);
 800af82:	4843      	ldr	r0, [pc, #268]	@ (800b090 <low_level_init+0x494>)
 800af84:	f7f9 f9d6 	bl	8004334 <eth_chip_get_link_state>
 800af88:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
    
    char link_msg[64];
    snprintf(link_msg, sizeof(link_msg), "Initial PHY link state: %ld", phy_link_state);
 800af8c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800af90:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800af94:	4a3f      	ldr	r2, [pc, #252]	@ (800b094 <low_level_init+0x498>)
 800af96:	2140      	movs	r1, #64	@ 0x40
 800af98:	f011 fa92 	bl	801c4c0 <sniprintf>
    cdc_debug_log("PHY_INIT", link_msg);
 800af9c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800afa0:	4619      	mov	r1, r3
 800afa2:	483d      	ldr	r0, [pc, #244]	@ (800b098 <low_level_init+0x49c>)
 800afa4:	f7ff fc62 	bl	800a86c <cdc_debug_log>
    
    if (phy_link_state != ETH_CHIP_STATUS_READ_ERROR)
 800afa8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800afac:	f113 0f05 	cmn.w	r3, #5
 800afb0:	d053      	beq.n	800b05a <low_level_init+0x45e>
    {
      /* Get current MAC configuration */
      HAL_ETH_GetMACConfig(&heth, &macConfig);
 800afb2:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800afb6:	4619      	mov	r1, r3
 800afb8:	4838      	ldr	r0, [pc, #224]	@ (800b09c <low_level_init+0x4a0>)
 800afba:	f7fa f831 	bl	8005020 <HAL_ETH_GetMACConfig>
      
      switch (phy_link_state)
 800afbe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800afc2:	3b02      	subs	r3, #2
 800afc4:	2b03      	cmp	r3, #3
 800afc6:	d83b      	bhi.n	800b040 <low_level_init+0x444>
 800afc8:	a201      	add	r2, pc, #4	@ (adr r2, 800afd0 <low_level_init+0x3d4>)
 800afca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afce:	bf00      	nop
 800afd0:	0800afe1 	.word	0x0800afe1
 800afd4:	0800affb 	.word	0x0800affb
 800afd8:	0800b013 	.word	0x0800b013
 800afdc:	0800b02b 	.word	0x0800b02b
      {
        case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800afe0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800afe4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 800afe8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800afec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 100M Full Duplex");
 800aff0:	492b      	ldr	r1, [pc, #172]	@ (800b0a0 <low_level_init+0x4a4>)
 800aff2:	4829      	ldr	r0, [pc, #164]	@ (800b098 <low_level_init+0x49c>)
 800aff4:	f7ff fc3a 	bl	800a86c <cdc_debug_log>
          break;
 800aff8:	e02f      	b.n	800b05a <low_level_init+0x45e>
        case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
          macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800affa:	2300      	movs	r3, #0
 800affc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 800b000:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b004:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 100M Half Duplex");
 800b008:	4926      	ldr	r1, [pc, #152]	@ (800b0a4 <low_level_init+0x4a8>)
 800b00a:	4823      	ldr	r0, [pc, #140]	@ (800b098 <low_level_init+0x49c>)
 800b00c:	f7ff fc2e 	bl	800a86c <cdc_debug_log>
          break;
 800b010:	e023      	b.n	800b05a <low_level_init+0x45e>
        case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800b012:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b016:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_10M;
 800b01a:	2300      	movs	r3, #0
 800b01c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 10M Full Duplex");
 800b020:	4921      	ldr	r1, [pc, #132]	@ (800b0a8 <low_level_init+0x4ac>)
 800b022:	481d      	ldr	r0, [pc, #116]	@ (800b098 <low_level_init+0x49c>)
 800b024:	f7ff fc22 	bl	800a86c <cdc_debug_log>
          break;
 800b028:	e017      	b.n	800b05a <low_level_init+0x45e>
        case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
          macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800b02a:	2300      	movs	r3, #0
 800b02c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_10M;
 800b030:	2300      	movs	r3, #0
 800b032:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 10M Half Duplex");
 800b036:	491d      	ldr	r1, [pc, #116]	@ (800b0ac <low_level_init+0x4b0>)
 800b038:	4817      	ldr	r0, [pc, #92]	@ (800b098 <low_level_init+0x49c>)
 800b03a:	f7ff fc17 	bl	800a86c <cdc_debug_log>
          break;
 800b03e:	e00c      	b.n	800b05a <low_level_init+0x45e>
        default:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800b040:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b044:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 800b048:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b04c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Default: 100M Full Duplex");
 800b050:	4917      	ldr	r1, [pc, #92]	@ (800b0b0 <low_level_init+0x4b4>)
 800b052:	4811      	ldr	r0, [pc, #68]	@ (800b098 <low_level_init+0x49c>)
 800b054:	f7ff fc0a 	bl	800a86c <cdc_debug_log>
          break;
 800b058:	bf00      	nop

    }

    /* 重要：在启动ETH中断之前，不要调用HAL_ETH_Start_IT！
     * 信号量必须先创建，否则会在中断回调中造成HardFault */
    cdc_debug_log("PHY_INIT", "PHY configuration completed, deferring ETH start until after semaphore creation");
 800b05a:	4916      	ldr	r1, [pc, #88]	@ (800b0b4 <low_level_init+0x4b8>)
 800b05c:	480e      	ldr	r0, [pc, #56]	@ (800b098 <low_level_init+0x49c>)
 800b05e:	f7ff fc05 	bl	800a86c <cdc_debug_log>
    
    /* Debug ETH configuration after initialization */
    cdc_debug_log("ETH_INIT", "=== ETH Initialization Debug ===");
 800b062:	4915      	ldr	r1, [pc, #84]	@ (800b0b8 <low_level_init+0x4bc>)
 800b064:	4815      	ldr	r0, [pc, #84]	@ (800b0bc <low_level_init+0x4c0>)
 800b066:	f7ff fc01 	bl	800a86c <cdc_debug_log>
    debug_eth_config();
 800b06a:	f7ff fd47 	bl	800aafc <debug_eth_config>
    debug_eth_dma_registers();
 800b06e:	f7ff fce9 	bl	800aa44 <debug_eth_dma_registers>
    debug_eth_dma_descriptors();
 800b072:	f7ff fc1b 	bl	800a8ac <debug_eth_dma_descriptors>
    cdc_debug_log("ETH_INIT", "=== ETH Debug Complete ===");
 800b076:	4912      	ldr	r1, [pc, #72]	@ (800b0c0 <low_level_init+0x4c4>)
 800b078:	4810      	ldr	r0, [pc, #64]	@ (800b0bc <low_level_init+0x4c0>)
 800b07a:	f7ff fbf7 	bl	800a86c <cdc_debug_log>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b07e:	e001      	b.n	800b084 <low_level_init+0x488>
    Error_Handler();
 800b080:	f7f6 fd32 	bl	8001ae8 <Error_Handler>
}
 800b084:	bf00      	nop
 800b086:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bdb0      	pop	{r4, r5, r7, pc}
 800b08e:	bf00      	nop
 800b090:	200052ec 	.word	0x200052ec
 800b094:	0801eb80 	.word	0x0801eb80
 800b098:	0801e9f8 	.word	0x0801e9f8
 800b09c:	20005328 	.word	0x20005328
 800b0a0:	0801eb9c 	.word	0x0801eb9c
 800b0a4:	0801ebbc 	.word	0x0801ebbc
 800b0a8:	0801ebdc 	.word	0x0801ebdc
 800b0ac:	0801ebf8 	.word	0x0801ebf8
 800b0b0:	0801ec14 	.word	0x0801ec14
 800b0b4:	0801ec30 	.word	0x0801ec30
 800b0b8:	0801ec80 	.word	0x0801ec80
 800b0bc:	0801eca4 	.word	0x0801eca4
 800b0c0:	0801ecb0 	.word	0x0801ecb0

0800b0c4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b092      	sub	sp, #72	@ 0x48
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b0dc:	f107 030c 	add.w	r3, r7, #12
 800b0e0:	2230      	movs	r2, #48	@ 0x30
 800b0e2:	2100      	movs	r1, #0
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f011 fa8e 	bl	801c606 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b0ea:	f107 030c 	add.w	r3, r7, #12
 800b0ee:	2230      	movs	r2, #48	@ 0x30
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f011 fa87 	bl	801c606 <memset>

  for(q = p; q != NULL; q = q->next)
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0fc:	e045      	b.n	800b18a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b0fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b100:	2b03      	cmp	r3, #3
 800b102:	d902      	bls.n	800b10a <low_level_output+0x46>
      return ERR_IF;
 800b104:	f06f 030b 	mvn.w	r3, #11
 800b108:	e07f      	b.n	800b20a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800b10a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b10c:	6859      	ldr	r1, [r3, #4]
 800b10e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b110:	4613      	mov	r3, r2
 800b112:	005b      	lsls	r3, r3, #1
 800b114:	4413      	add	r3, r2
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	3348      	adds	r3, #72	@ 0x48
 800b11a:	443b      	add	r3, r7
 800b11c:	3b3c      	subs	r3, #60	@ 0x3c
 800b11e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b120:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b122:	895b      	ldrh	r3, [r3, #10]
 800b124:	4619      	mov	r1, r3
 800b126:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b128:	4613      	mov	r3, r2
 800b12a:	005b      	lsls	r3, r3, #1
 800b12c:	4413      	add	r3, r2
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	3348      	adds	r3, #72	@ 0x48
 800b132:	443b      	add	r3, r7
 800b134:	3b38      	subs	r3, #56	@ 0x38
 800b136:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d011      	beq.n	800b162 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b13e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b140:	1e5a      	subs	r2, r3, #1
 800b142:	f107 000c 	add.w	r0, r7, #12
 800b146:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b148:	460b      	mov	r3, r1
 800b14a:	005b      	lsls	r3, r3, #1
 800b14c:	440b      	add	r3, r1
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	18c1      	adds	r1, r0, r3
 800b152:	4613      	mov	r3, r2
 800b154:	005b      	lsls	r3, r3, #1
 800b156:	4413      	add	r3, r2
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	3348      	adds	r3, #72	@ 0x48
 800b15c:	443b      	add	r3, r7
 800b15e:	3b34      	subs	r3, #52	@ 0x34
 800b160:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d109      	bne.n	800b17e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800b16a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b16c:	4613      	mov	r3, r2
 800b16e:	005b      	lsls	r3, r3, #1
 800b170:	4413      	add	r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	3348      	adds	r3, #72	@ 0x48
 800b176:	443b      	add	r3, r7
 800b178:	3b34      	subs	r3, #52	@ 0x34
 800b17a:	2200      	movs	r2, #0
 800b17c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b17e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b180:	3301      	adds	r3, #1
 800b182:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800b184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	643b      	str	r3, [r7, #64]	@ 0x40
 800b18a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1b6      	bne.n	800b0fe <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	891b      	ldrh	r3, [r3, #8]
 800b194:	461a      	mov	r2, r3
 800b196:	4b1f      	ldr	r3, [pc, #124]	@ (800b214 <low_level_output+0x150>)
 800b198:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b19a:	4a1e      	ldr	r2, [pc, #120]	@ (800b214 <low_level_output+0x150>)
 800b19c:	f107 030c 	add.w	r3, r7, #12
 800b1a0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800b1a2:	4a1c      	ldr	r2, [pc, #112]	@ (800b214 <low_level_output+0x150>)
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800b1a8:	6838      	ldr	r0, [r7, #0]
 800b1aa:	f007 f965 	bl	8012478 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800b1ae:	4919      	ldr	r1, [pc, #100]	@ (800b214 <low_level_output+0x150>)
 800b1b0:	4819      	ldr	r0, [pc, #100]	@ (800b218 <low_level_output+0x154>)
 800b1b2:	f7f9 fbd8 	bl	8004966 <HAL_ETH_Transmit_IT>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d103      	bne.n	800b1c4 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800b1c2:	e01b      	b.n	800b1fc <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800b1c4:	4814      	ldr	r0, [pc, #80]	@ (800b218 <low_level_output+0x154>)
 800b1c6:	f7fa f83c 	bl	8005242 <HAL_ETH_GetError>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	f003 0302 	and.w	r3, r3, #2
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d00d      	beq.n	800b1f0 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800b1d4:	4b11      	ldr	r3, [pc, #68]	@ (800b21c <low_level_output+0x158>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f002 fd49 	bl	800dc74 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 800b1e2:	480d      	ldr	r0, [pc, #52]	@ (800b218 <low_level_output+0x154>)
 800b1e4:	f7f9 fd5e 	bl	8004ca4 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800b1e8:	23fe      	movs	r3, #254	@ 0xfe
 800b1ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800b1ee:	e005      	b.n	800b1fc <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800b1f0:	6838      	ldr	r0, [r7, #0]
 800b1f2:	f007 f89b 	bl	801232c <pbuf_free>
        errval =  ERR_IF;
 800b1f6:	23f4      	movs	r3, #244	@ 0xf4
 800b1f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800b1fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b200:	f113 0f02 	cmn.w	r3, #2
 800b204:	d0d3      	beq.n	800b1ae <low_level_output+0xea>

  return errval;
 800b206:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3748      	adds	r7, #72	@ 0x48
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	200053d8 	.word	0x200053d8
 800b218:	20005328 	.word	0x20005328
 800b21c:	20005324 	.word	0x20005324

0800b220 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b228:	2300      	movs	r3, #0
 800b22a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800b22c:	4b07      	ldr	r3, [pc, #28]	@ (800b24c <low_level_input+0x2c>)
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d105      	bne.n	800b240 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800b234:	f107 030c 	add.w	r3, r7, #12
 800b238:	4619      	mov	r1, r3
 800b23a:	4805      	ldr	r0, [pc, #20]	@ (800b250 <low_level_input+0x30>)
 800b23c:	f7f9 fbef 	bl	8004a1e <HAL_ETH_ReadData>
  }

  return p;
 800b240:	68fb      	ldr	r3, [r7, #12]
}
 800b242:	4618      	mov	r0, r3
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	200051a8 	.word	0x200051a8
 800b250:	20005328 	.word	0x20005328

0800b254 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b25c:	2300      	movs	r3, #0
 800b25e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b264:	4b0f      	ldr	r3, [pc, #60]	@ (800b2a4 <ethernetif_input+0x50>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f04f 31ff 	mov.w	r1, #4294967295
 800b26c:	4618      	mov	r0, r3
 800b26e:	f002 fd01 	bl	800dc74 <osSemaphoreWait>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d1f5      	bne.n	800b264 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800b278:	68b8      	ldr	r0, [r7, #8]
 800b27a:	f7ff ffd1 	bl	800b220 <low_level_input>
 800b27e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00a      	beq.n	800b29c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	68b9      	ldr	r1, [r7, #8]
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	4798      	blx	r3
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d002      	beq.n	800b29c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800b296:	68f8      	ldr	r0, [r7, #12]
 800b298:	f007 f848 	bl	801232c <pbuf_free>
          }
        }
      } while(p!=NULL);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d1ea      	bne.n	800b278 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b2a2:	e7df      	b.n	800b264 <ethernetif_input+0x10>
 800b2a4:	20005320 	.word	0x20005320

0800b2a8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d106      	bne.n	800b2c4 <ethernetif_init+0x1c>
 800b2b6:	4b0e      	ldr	r3, [pc, #56]	@ (800b2f0 <ethernetif_init+0x48>)
 800b2b8:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 800b2bc:	490d      	ldr	r1, [pc, #52]	@ (800b2f4 <ethernetif_init+0x4c>)
 800b2be:	480e      	ldr	r0, [pc, #56]	@ (800b2f8 <ethernetif_init+0x50>)
 800b2c0:	f011 f8ec 	bl	801c49c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2273      	movs	r2, #115	@ 0x73
 800b2c8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2274      	movs	r2, #116	@ 0x74
 800b2d0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a09      	ldr	r2, [pc, #36]	@ (800b2fc <ethernetif_init+0x54>)
 800b2d8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a08      	ldr	r2, [pc, #32]	@ (800b300 <ethernetif_init+0x58>)
 800b2de:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f7ff fc8b 	bl	800abfc <low_level_init>

  return ERR_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3708      	adds	r7, #8
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	0801ecf0 	.word	0x0801ecf0
 800b2f4:	0801ed0c 	.word	0x0801ed0c
 800b2f8:	0801ed1c 	.word	0x0801ed1c
 800b2fc:	0801971d 	.word	0x0801971d
 800b300:	0800b0c5 	.word	0x0800b0c5

0800b304 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b310:	68f9      	ldr	r1, [r7, #12]
 800b312:	4809      	ldr	r0, [pc, #36]	@ (800b338 <pbuf_free_custom+0x34>)
 800b314:	f006 f974 	bl	8011600 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800b318:	4b08      	ldr	r3, [pc, #32]	@ (800b33c <pbuf_free_custom+0x38>)
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d107      	bne.n	800b330 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800b320:	4b06      	ldr	r3, [pc, #24]	@ (800b33c <pbuf_free_custom+0x38>)
 800b322:	2200      	movs	r2, #0
 800b324:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800b326:	4b06      	ldr	r3, [pc, #24]	@ (800b340 <pbuf_free_custom+0x3c>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4618      	mov	r0, r3
 800b32c:	f002 fcf0 	bl	800dd10 <osSemaphoreRelease>
  }
}
 800b330:	bf00      	nop
 800b332:	3710      	adds	r7, #16
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	08021cec 	.word	0x08021cec
 800b33c:	200051a8 	.word	0x200051a8
 800b340:	20005320 	.word	0x20005320

0800b344 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b348:	f7f9 f870 	bl	800442c <HAL_GetTick>
 800b34c:	4603      	mov	r3, r0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	bd80      	pop	{r7, pc}
	...

0800b354 <PHY_IO_Init>:
/**
  * @brief  Initialize the PHY interface
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_Init(void)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	af00      	add	r7, sp, #0
  /* 基本的PHY硬件初始化已经由HAL_ETH_Init处理 */
  /* 这里进行PHY芯片特定的初始化 */
  cdc_debug_log("PHY_IO", "PHY_IO_Init called - performing PHY-specific initialization");
 800b358:	4906      	ldr	r1, [pc, #24]	@ (800b374 <PHY_IO_Init+0x20>)
 800b35a:	4807      	ldr	r0, [pc, #28]	@ (800b378 <PHY_IO_Init+0x24>)
 800b35c:	f7ff fa86 	bl	800a86c <cdc_debug_log>
  
  /* 等待PHY准备就绪 */
  HAL_Delay(10);
 800b360:	200a      	movs	r0, #10
 800b362:	f7f9 f86f 	bl	8004444 <HAL_Delay>
  
  cdc_debug_log("PHY_IO", "PHY_IO_Init completed successfully");
 800b366:	4905      	ldr	r1, [pc, #20]	@ (800b37c <PHY_IO_Init+0x28>)
 800b368:	4803      	ldr	r0, [pc, #12]	@ (800b378 <PHY_IO_Init+0x24>)
 800b36a:	f7ff fa7f 	bl	800a86c <cdc_debug_log>
  return 0;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	bd80      	pop	{r7, pc}
 800b374:	0801ed44 	.word	0x0801ed44
 800b378:	0801ed80 	.word	0x0801ed80
 800b37c:	0801ed88 	.word	0x0801ed88

0800b380 <PHY_IO_DeInit>:
/**
  * @brief  De-Initialize the PHY interface
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_DeInit(void)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	af00      	add	r7, sp, #0
  cdc_debug_log("PHY_IO", "PHY_IO_DeInit called - performing PHY-specific cleanup");
 800b384:	4905      	ldr	r1, [pc, #20]	@ (800b39c <PHY_IO_DeInit+0x1c>)
 800b386:	4806      	ldr	r0, [pc, #24]	@ (800b3a0 <PHY_IO_DeInit+0x20>)
 800b388:	f7ff fa70 	bl	800a86c <cdc_debug_log>
  
  /* 可以在这里添加特定的PHY去初始化操作 */
  /* 例如：使能省电模式 */
  
  cdc_debug_log("PHY_IO", "PHY_IO_DeInit completed");
 800b38c:	4905      	ldr	r1, [pc, #20]	@ (800b3a4 <PHY_IO_DeInit+0x24>)
 800b38e:	4804      	ldr	r0, [pc, #16]	@ (800b3a0 <PHY_IO_DeInit+0x20>)
 800b390:	f7ff fa6c 	bl	800a86c <cdc_debug_log>
  return 0;
 800b394:	2300      	movs	r3, #0
}
 800b396:	4618      	mov	r0, r3
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	0801edac 	.word	0x0801edac
 800b3a0:	0801ed80 	.word	0x0801ed80
 800b3a4:	0801ede4 	.word	0x0801ede4

0800b3a8 <PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: Pointer to register value
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b096      	sub	sp, #88	@ 0x58
 800b3ac:	af02      	add	r7, sp, #8
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	607a      	str	r2, [r7, #4]
  if (HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	68ba      	ldr	r2, [r7, #8]
 800b3b8:	68f9      	ldr	r1, [r7, #12]
 800b3ba:	480e      	ldr	r0, [pc, #56]	@ (800b3f4 <PHY_IO_ReadReg+0x4c>)
 800b3bc:	f7f9 fd9c 	bl	8004ef8 <HAL_ETH_ReadPHYRegister>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d011      	beq.n	800b3ea <PHY_IO_ReadReg+0x42>
  {
    char error_msg[64];
    snprintf(error_msg, sizeof(error_msg), "Read failed - Addr:0x%02lX Reg:0x%02lX", DevAddr, RegAddr);
 800b3c6:	f107 0010 	add.w	r0, r7, #16
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	9300      	str	r3, [sp, #0]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	4a09      	ldr	r2, [pc, #36]	@ (800b3f8 <PHY_IO_ReadReg+0x50>)
 800b3d2:	2140      	movs	r1, #64	@ 0x40
 800b3d4:	f011 f874 	bl	801c4c0 <sniprintf>
    cdc_debug_log("PHY_IO", error_msg);
 800b3d8:	f107 0310 	add.w	r3, r7, #16
 800b3dc:	4619      	mov	r1, r3
 800b3de:	4807      	ldr	r0, [pc, #28]	@ (800b3fc <PHY_IO_ReadReg+0x54>)
 800b3e0:	f7ff fa44 	bl	800a86c <cdc_debug_log>
    return -1;
 800b3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b3e8:	e000      	b.n	800b3ec <PHY_IO_ReadReg+0x44>
  }
  return 0;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3750      	adds	r7, #80	@ 0x50
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	20005328 	.word	0x20005328
 800b3f8:	0801edfc 	.word	0x0801edfc
 800b3fc:	0801ed80 	.word	0x0801ed80

0800b400 <PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Register value to write
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b096      	sub	sp, #88	@ 0x58
 800b404:	af02      	add	r7, sp, #8
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	607a      	str	r2, [r7, #4]
  if (HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	68ba      	ldr	r2, [r7, #8]
 800b410:	68f9      	ldr	r1, [r7, #12]
 800b412:	480f      	ldr	r0, [pc, #60]	@ (800b450 <PHY_IO_WriteReg+0x50>)
 800b414:	f7f9 fdbb 	bl	8004f8e <HAL_ETH_WritePHYRegister>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d013      	beq.n	800b446 <PHY_IO_WriteReg+0x46>
  {
    char error_msg[64];
    snprintf(error_msg, sizeof(error_msg), "Write failed - Addr:0x%02lX Reg:0x%02lX Val:0x%04lX", DevAddr, RegAddr, RegVal);
 800b41e:	f107 0010 	add.w	r0, r7, #16
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	9301      	str	r3, [sp, #4]
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	9300      	str	r3, [sp, #0]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	4a09      	ldr	r2, [pc, #36]	@ (800b454 <PHY_IO_WriteReg+0x54>)
 800b42e:	2140      	movs	r1, #64	@ 0x40
 800b430:	f011 f846 	bl	801c4c0 <sniprintf>
    cdc_debug_log("PHY_IO", error_msg);
 800b434:	f107 0310 	add.w	r3, r7, #16
 800b438:	4619      	mov	r1, r3
 800b43a:	4807      	ldr	r0, [pc, #28]	@ (800b458 <PHY_IO_WriteReg+0x58>)
 800b43c:	f7ff fa16 	bl	800a86c <cdc_debug_log>
    return -1;
 800b440:	f04f 33ff 	mov.w	r3, #4294967295
 800b444:	e000      	b.n	800b448 <PHY_IO_WriteReg+0x48>
  }
  return 0;
 800b446:	2300      	movs	r3, #0
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3750      	adds	r7, #80	@ 0x50
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	20005328 	.word	0x20005328
 800b454:	0801ee24 	.word	0x0801ee24
 800b458:	0801ed80 	.word	0x0801ed80

0800b45c <PHY_IO_GetTick>:
/**
  * @brief  Get system tick for timing
  * @retval Current tick value
  */
static int32_t PHY_IO_GetTick(void)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b460:	f7f8 ffe4 	bl	800442c <HAL_GetTick>
 800b464:	4603      	mov	r3, r0
}
 800b466:	4618      	mov	r0, r3
 800b468:	bd80      	pop	{r7, pc}
	...

0800b46c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b0b0      	sub	sp, #192	@ 0xc0
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link init */
  struct netif *netif = (struct netif *) argument;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  int32_t phy_link_state;
  ETH_MACConfigTypeDef macConfig;
  uint32_t linkchanged = 0, linkup = 0;
 800b47a:	2300      	movs	r3, #0
 800b47c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b480:	2300      	movs	r3, #0
 800b482:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t link_check_counter = 0;
 800b486:	2300      	movs	r3, #0
 800b488:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  
  cdc_debug_log("LINK_THREAD", "Ethernet link monitoring started");
 800b48c:	49be      	ldr	r1, [pc, #760]	@ (800b788 <ethernet_link_thread+0x31c>)
 800b48e:	48bf      	ldr	r0, [pc, #764]	@ (800b78c <ethernet_link_thread+0x320>)
 800b490:	f7ff f9ec 	bl	800a86c <cdc_debug_log>

  for(;;)
  {

/* USER CODE BEGIN ETH link Thread core code for User BSP */
    link_check_counter++;
 800b494:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b498:	3301      	adds	r3, #1
 800b49a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    
    /* Only log every 50th check to avoid flooding (approximately every 5 seconds) */
    if (link_check_counter % 50 == 0)
 800b49e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b4a2:	4bbb      	ldr	r3, [pc, #748]	@ (800b790 <ethernet_link_thread+0x324>)
 800b4a4:	fba3 1302 	umull	r1, r3, r3, r2
 800b4a8:	091b      	lsrs	r3, r3, #4
 800b4aa:	2132      	movs	r1, #50	@ 0x32
 800b4ac:	fb01 f303 	mul.w	r3, r1, r3
 800b4b0:	1ad3      	subs	r3, r2, r3
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d10d      	bne.n	800b4d2 <ethernet_link_thread+0x66>
    {
      char counter_msg[32];
      snprintf(counter_msg, sizeof(counter_msg), "Link check #%lu", link_check_counter);
 800b4b6:	f107 0008 	add.w	r0, r7, #8
 800b4ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b4be:	4ab5      	ldr	r2, [pc, #724]	@ (800b794 <ethernet_link_thread+0x328>)
 800b4c0:	2120      	movs	r1, #32
 800b4c2:	f010 fffd 	bl	801c4c0 <sniprintf>
      cdc_debug_log("LINK_THREAD", counter_msg);
 800b4c6:	f107 0308 	add.w	r3, r7, #8
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	48af      	ldr	r0, [pc, #700]	@ (800b78c <ethernet_link_thread+0x320>)
 800b4ce:	f7ff f9cd 	bl	800a86c <cdc_debug_log>
    }
    
    phy_link_state = eth_chip_get_link_state(&PHYchip);
 800b4d2:	48b1      	ldr	r0, [pc, #708]	@ (800b798 <ethernet_link_thread+0x32c>)
 800b4d4:	f7f8 ff2e 	bl	8004334 <eth_chip_get_link_state>
 800b4d8:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    
    if (phy_link_state != ETH_CHIP_STATUS_READ_ERROR && phy_link_state != ETH_CHIP_STATUS_LINK_DOWN)
 800b4dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b4e0:	f113 0f05 	cmn.w	r3, #5
 800b4e4:	f000 8111 	beq.w	800b70a <ethernet_link_thread+0x29e>
 800b4e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	f000 810c 	beq.w	800b70a <ethernet_link_thread+0x29e>
    {
      /* PHY link is up */
      switch (phy_link_state)
 800b4f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b4f6:	3b02      	subs	r3, #2
 800b4f8:	2b04      	cmp	r3, #4
 800b4fa:	d874      	bhi.n	800b5e6 <ethernet_link_thread+0x17a>
 800b4fc:	a201      	add	r2, pc, #4	@ (adr r2, 800b504 <ethernet_link_thread+0x98>)
 800b4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b502:	bf00      	nop
 800b504:	0800b519 	.word	0x0800b519
 800b508:	0800b541 	.word	0x0800b541
 800b50c:	0800b569 	.word	0x0800b569
 800b510:	0800b591 	.word	0x0800b591
 800b514:	0800b5b9 	.word	0x0800b5b9
      {
        case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 100M Full Duplex");
 800b518:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b51c:	4b9c      	ldr	r3, [pc, #624]	@ (800b790 <ethernet_link_thread+0x324>)
 800b51e:	fba3 1302 	umull	r1, r3, r3, r2
 800b522:	091b      	lsrs	r3, r3, #4
 800b524:	2132      	movs	r1, #50	@ 0x32
 800b526:	fb01 f303 	mul.w	r3, r1, r3
 800b52a:	1ad3      	subs	r3, r2, r3
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d103      	bne.n	800b538 <ethernet_link_thread+0xcc>
 800b530:	499a      	ldr	r1, [pc, #616]	@ (800b79c <ethernet_link_thread+0x330>)
 800b532:	4896      	ldr	r0, [pc, #600]	@ (800b78c <ethernet_link_thread+0x320>)
 800b534:	f7ff f99a 	bl	800a86c <cdc_debug_log>
          linkup = 1;
 800b538:	2301      	movs	r3, #1
 800b53a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800b53e:	e066      	b.n	800b60e <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 100M Half Duplex");
 800b540:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b544:	4b92      	ldr	r3, [pc, #584]	@ (800b790 <ethernet_link_thread+0x324>)
 800b546:	fba3 1302 	umull	r1, r3, r3, r2
 800b54a:	091b      	lsrs	r3, r3, #4
 800b54c:	2132      	movs	r1, #50	@ 0x32
 800b54e:	fb01 f303 	mul.w	r3, r1, r3
 800b552:	1ad3      	subs	r3, r2, r3
 800b554:	2b00      	cmp	r3, #0
 800b556:	d103      	bne.n	800b560 <ethernet_link_thread+0xf4>
 800b558:	4991      	ldr	r1, [pc, #580]	@ (800b7a0 <ethernet_link_thread+0x334>)
 800b55a:	488c      	ldr	r0, [pc, #560]	@ (800b78c <ethernet_link_thread+0x320>)
 800b55c:	f7ff f986 	bl	800a86c <cdc_debug_log>
          linkup = 1;
 800b560:	2301      	movs	r3, #1
 800b562:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800b566:	e052      	b.n	800b60e <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 10M Full Duplex");
 800b568:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b56c:	4b88      	ldr	r3, [pc, #544]	@ (800b790 <ethernet_link_thread+0x324>)
 800b56e:	fba3 1302 	umull	r1, r3, r3, r2
 800b572:	091b      	lsrs	r3, r3, #4
 800b574:	2132      	movs	r1, #50	@ 0x32
 800b576:	fb01 f303 	mul.w	r3, r1, r3
 800b57a:	1ad3      	subs	r3, r2, r3
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d103      	bne.n	800b588 <ethernet_link_thread+0x11c>
 800b580:	4988      	ldr	r1, [pc, #544]	@ (800b7a4 <ethernet_link_thread+0x338>)
 800b582:	4882      	ldr	r0, [pc, #520]	@ (800b78c <ethernet_link_thread+0x320>)
 800b584:	f7ff f972 	bl	800a86c <cdc_debug_log>
          linkup = 1;
 800b588:	2301      	movs	r3, #1
 800b58a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800b58e:	e03e      	b.n	800b60e <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 10M Half Duplex");
 800b590:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b594:	4b7e      	ldr	r3, [pc, #504]	@ (800b790 <ethernet_link_thread+0x324>)
 800b596:	fba3 1302 	umull	r1, r3, r3, r2
 800b59a:	091b      	lsrs	r3, r3, #4
 800b59c:	2132      	movs	r1, #50	@ 0x32
 800b59e:	fb01 f303 	mul.w	r3, r1, r3
 800b5a2:	1ad3      	subs	r3, r2, r3
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d103      	bne.n	800b5b0 <ethernet_link_thread+0x144>
 800b5a8:	497f      	ldr	r1, [pc, #508]	@ (800b7a8 <ethernet_link_thread+0x33c>)
 800b5aa:	4878      	ldr	r0, [pc, #480]	@ (800b78c <ethernet_link_thread+0x320>)
 800b5ac:	f7ff f95e 	bl	800a86c <cdc_debug_log>
          linkup = 1;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800b5b6:	e02a      	b.n	800b60e <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_AUTONEGO_NOTDONE:
          if (link_check_counter % 50 == 0) {
 800b5b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b5bc:	4b74      	ldr	r3, [pc, #464]	@ (800b790 <ethernet_link_thread+0x324>)
 800b5be:	fba3 1302 	umull	r1, r3, r3, r2
 800b5c2:	091b      	lsrs	r3, r3, #4
 800b5c4:	2132      	movs	r1, #50	@ 0x32
 800b5c6:	fb01 f303 	mul.w	r3, r1, r3
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d106      	bne.n	800b5de <ethernet_link_thread+0x172>
            cdc_debug_log("LINK_THREAD", "Auto-negotiation in progress, restarting...");
 800b5d0:	4976      	ldr	r1, [pc, #472]	@ (800b7ac <ethernet_link_thread+0x340>)
 800b5d2:	486e      	ldr	r0, [pc, #440]	@ (800b78c <ethernet_link_thread+0x320>)
 800b5d4:	f7ff f94a 	bl	800a86c <cdc_debug_log>
            eth_chip_start_auto_nego(&PHYchip);
 800b5d8:	486f      	ldr	r0, [pc, #444]	@ (800b798 <ethernet_link_thread+0x32c>)
 800b5da:	f7f8 fe7e 	bl	80042da <eth_chip_start_auto_nego>
          }
          linkup = 0;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800b5e4:	e013      	b.n	800b60e <ethernet_link_thread+0x1a2>
        default:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: Unknown state");
 800b5e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b5ea:	4b69      	ldr	r3, [pc, #420]	@ (800b790 <ethernet_link_thread+0x324>)
 800b5ec:	fba3 1302 	umull	r1, r3, r3, r2
 800b5f0:	091b      	lsrs	r3, r3, #4
 800b5f2:	2132      	movs	r1, #50	@ 0x32
 800b5f4:	fb01 f303 	mul.w	r3, r1, r3
 800b5f8:	1ad3      	subs	r3, r2, r3
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d103      	bne.n	800b606 <ethernet_link_thread+0x19a>
 800b5fe:	496c      	ldr	r1, [pc, #432]	@ (800b7b0 <ethernet_link_thread+0x344>)
 800b600:	4862      	ldr	r0, [pc, #392]	@ (800b78c <ethernet_link_thread+0x320>)
 800b602:	f7ff f933 	bl	800a86c <cdc_debug_log>
          linkup = 0;
 800b606:	2300      	movs	r3, #0
 800b608:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800b60c:	bf00      	nop
      }
      
      if (linkup && !netif_is_link_up(netif))
 800b60e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b612:	2b00      	cmp	r3, #0
 800b614:	f000 8113 	beq.w	800b83e <ethernet_link_thread+0x3d2>
 800b618:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b61c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b620:	f003 0304 	and.w	r3, r3, #4
 800b624:	2b00      	cmp	r3, #0
 800b626:	f040 810a 	bne.w	800b83e <ethernet_link_thread+0x3d2>
      {
        cdc_debug_log("LINK_THREAD", "Link UP detected - configuring interface");
 800b62a:	4962      	ldr	r1, [pc, #392]	@ (800b7b4 <ethernet_link_thread+0x348>)
 800b62c:	4857      	ldr	r0, [pc, #348]	@ (800b78c <ethernet_link_thread+0x320>)
 800b62e:	f7ff f91d 	bl	800a86c <cdc_debug_log>
        
        /* Get current MAC configuration */
        HAL_ETH_GetMACConfig(&heth, &macConfig);
 800b632:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b636:	4619      	mov	r1, r3
 800b638:	485f      	ldr	r0, [pc, #380]	@ (800b7b8 <ethernet_link_thread+0x34c>)
 800b63a:	f7f9 fcf1 	bl	8005020 <HAL_ETH_GetMACConfig>
        
        /* Configure ETH DupLex and Speed based on PHY state */
        switch (phy_link_state)
 800b63e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b642:	3b02      	subs	r3, #2
 800b644:	2b03      	cmp	r3, #3
 800b646:	d833      	bhi.n	800b6b0 <ethernet_link_thread+0x244>
 800b648:	a201      	add	r2, pc, #4	@ (adr r2, 800b650 <ethernet_link_thread+0x1e4>)
 800b64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b64e:	bf00      	nop
 800b650:	0800b661 	.word	0x0800b661
 800b654:	0800b677 	.word	0x0800b677
 800b658:	0800b68b 	.word	0x0800b68b
 800b65c:	0800b69f 	.word	0x0800b69f
        {
          case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
            macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800b660:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b664:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_100M;
 800b666:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b66a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 100M Full Duplex");
 800b66c:	4953      	ldr	r1, [pc, #332]	@ (800b7bc <ethernet_link_thread+0x350>)
 800b66e:	4847      	ldr	r0, [pc, #284]	@ (800b78c <ethernet_link_thread+0x320>)
 800b670:	f7ff f8fc 	bl	800a86c <cdc_debug_log>
            break;
 800b674:	e01c      	b.n	800b6b0 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
            macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800b676:	2300      	movs	r3, #0
 800b678:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_100M;
 800b67a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b67e:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 100M Half Duplex");
 800b680:	494f      	ldr	r1, [pc, #316]	@ (800b7c0 <ethernet_link_thread+0x354>)
 800b682:	4842      	ldr	r0, [pc, #264]	@ (800b78c <ethernet_link_thread+0x320>)
 800b684:	f7ff f8f2 	bl	800a86c <cdc_debug_log>
            break;
 800b688:	e012      	b.n	800b6b0 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
            macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800b68a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b68e:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_10M;
 800b690:	2300      	movs	r3, #0
 800b692:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 10M Full Duplex");
 800b694:	494b      	ldr	r1, [pc, #300]	@ (800b7c4 <ethernet_link_thread+0x358>)
 800b696:	483d      	ldr	r0, [pc, #244]	@ (800b78c <ethernet_link_thread+0x320>)
 800b698:	f7ff f8e8 	bl	800a86c <cdc_debug_log>
            break;
 800b69c:	e008      	b.n	800b6b0 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
            macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_10M;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 10M Half Duplex");
 800b6a6:	4948      	ldr	r1, [pc, #288]	@ (800b7c8 <ethernet_link_thread+0x35c>)
 800b6a8:	4838      	ldr	r0, [pc, #224]	@ (800b78c <ethernet_link_thread+0x320>)
 800b6aa:	f7ff f8df 	bl	800a86c <cdc_debug_log>
            break;
 800b6ae:	bf00      	nop
        }
        
        /* Apply the new MAC configuration */
        if (HAL_ETH_SetMACConfig(&heth, &macConfig) != HAL_OK)
 800b6b0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	4840      	ldr	r0, [pc, #256]	@ (800b7b8 <ethernet_link_thread+0x34c>)
 800b6b8:	f7f9 fda9 	bl	800520e <HAL_ETH_SetMACConfig>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d004      	beq.n	800b6cc <ethernet_link_thread+0x260>
        {
          cdc_debug_log("LINK_THREAD", "Failed to set MAC configuration");
 800b6c2:	4942      	ldr	r1, [pc, #264]	@ (800b7cc <ethernet_link_thread+0x360>)
 800b6c4:	4831      	ldr	r0, [pc, #196]	@ (800b78c <ethernet_link_thread+0x320>)
 800b6c6:	f7ff f8d1 	bl	800a86c <cdc_debug_log>
 800b6ca:	e003      	b.n	800b6d4 <ethernet_link_thread+0x268>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "MAC configuration updated successfully");
 800b6cc:	4940      	ldr	r1, [pc, #256]	@ (800b7d0 <ethernet_link_thread+0x364>)
 800b6ce:	482f      	ldr	r0, [pc, #188]	@ (800b78c <ethernet_link_thread+0x320>)
 800b6d0:	f7ff f8cc 	bl	800a86c <cdc_debug_log>
        }
        
        /* Start ETH if not already started */
        if (HAL_ETH_Start_IT(&heth) != HAL_OK)
 800b6d4:	4838      	ldr	r0, [pc, #224]	@ (800b7b8 <ethernet_link_thread+0x34c>)
 800b6d6:	f7f9 f857 	bl	8004788 <HAL_ETH_Start_IT>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d004      	beq.n	800b6ea <ethernet_link_thread+0x27e>
        {
          cdc_debug_log("LINK_THREAD", "Failed to start ETH");
 800b6e0:	493c      	ldr	r1, [pc, #240]	@ (800b7d4 <ethernet_link_thread+0x368>)
 800b6e2:	482a      	ldr	r0, [pc, #168]	@ (800b78c <ethernet_link_thread+0x320>)
 800b6e4:	f7ff f8c2 	bl	800a86c <cdc_debug_log>
 800b6e8:	e003      	b.n	800b6f2 <ethernet_link_thread+0x286>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "ETH started successfully");
 800b6ea:	493b      	ldr	r1, [pc, #236]	@ (800b7d8 <ethernet_link_thread+0x36c>)
 800b6ec:	4827      	ldr	r0, [pc, #156]	@ (800b78c <ethernet_link_thread+0x320>)
 800b6ee:	f7ff f8bd 	bl	800a86c <cdc_debug_log>
        }
        
        /* Notify link up */
        netif_set_link_up(netif);
 800b6f2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800b6f6:	f006 fa07 	bl	8011b08 <netif_set_link_up>
        cdc_debug_log("LINK_THREAD", "Network interface link set to UP");
 800b6fa:	4938      	ldr	r1, [pc, #224]	@ (800b7dc <ethernet_link_thread+0x370>)
 800b6fc:	4823      	ldr	r0, [pc, #140]	@ (800b78c <ethernet_link_thread+0x320>)
 800b6fe:	f7ff f8b5 	bl	800a86c <cdc_debug_log>
        linkchanged = 1;
 800b702:	2301      	movs	r3, #1
 800b704:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      if (linkup && !netif_is_link_up(netif))
 800b708:	e099      	b.n	800b83e <ethernet_link_thread+0x3d2>
      }
    }
    else
    {
      /* PHY link is down */
      if (netif_is_link_up(netif))
 800b70a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b70e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b712:	089b      	lsrs	r3, r3, #2
 800b714:	f003 0301 	and.w	r3, r3, #1
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d01e      	beq.n	800b75c <ethernet_link_thread+0x2f0>
      {
        cdc_debug_log("LINK_THREAD", "Link DOWN detected - stopping interface");
 800b71e:	4930      	ldr	r1, [pc, #192]	@ (800b7e0 <ethernet_link_thread+0x374>)
 800b720:	481a      	ldr	r0, [pc, #104]	@ (800b78c <ethernet_link_thread+0x320>)
 800b722:	f7ff f8a3 	bl	800a86c <cdc_debug_log>
        
        /* Stop ETH */
        if (HAL_ETH_Stop_IT(&heth) != HAL_OK)
 800b726:	4824      	ldr	r0, [pc, #144]	@ (800b7b8 <ethernet_link_thread+0x34c>)
 800b728:	f7f9 f89e 	bl	8004868 <HAL_ETH_Stop_IT>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d004      	beq.n	800b73c <ethernet_link_thread+0x2d0>
        {
          cdc_debug_log("LINK_THREAD", "Failed to stop ETH");
 800b732:	492c      	ldr	r1, [pc, #176]	@ (800b7e4 <ethernet_link_thread+0x378>)
 800b734:	4815      	ldr	r0, [pc, #84]	@ (800b78c <ethernet_link_thread+0x320>)
 800b736:	f7ff f899 	bl	800a86c <cdc_debug_log>
 800b73a:	e003      	b.n	800b744 <ethernet_link_thread+0x2d8>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "ETH stopped successfully");
 800b73c:	492a      	ldr	r1, [pc, #168]	@ (800b7e8 <ethernet_link_thread+0x37c>)
 800b73e:	4813      	ldr	r0, [pc, #76]	@ (800b78c <ethernet_link_thread+0x320>)
 800b740:	f7ff f894 	bl	800a86c <cdc_debug_log>
        }
        
        /* Notify link down */
        netif_set_link_down(netif);
 800b744:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800b748:	f006 fa12 	bl	8011b70 <netif_set_link_down>
        cdc_debug_log("LINK_THREAD", "Network interface link set to DOWN");
 800b74c:	4927      	ldr	r1, [pc, #156]	@ (800b7ec <ethernet_link_thread+0x380>)
 800b74e:	480f      	ldr	r0, [pc, #60]	@ (800b78c <ethernet_link_thread+0x320>)
 800b750:	f7ff f88c 	bl	800a86c <cdc_debug_log>
        linkchanged = 1;
 800b754:	2301      	movs	r3, #1
 800b756:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b75a:	e06c      	b.n	800b836 <ethernet_link_thread+0x3ca>
      }
      else if (link_check_counter % 50 == 0)
 800b75c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b760:	4b0b      	ldr	r3, [pc, #44]	@ (800b790 <ethernet_link_thread+0x324>)
 800b762:	fba3 1302 	umull	r1, r3, r3, r2
 800b766:	091b      	lsrs	r3, r3, #4
 800b768:	2132      	movs	r1, #50	@ 0x32
 800b76a:	fb01 f303 	mul.w	r3, r1, r3
 800b76e:	1ad3      	subs	r3, r2, r3
 800b770:	2b00      	cmp	r3, #0
 800b772:	d160      	bne.n	800b836 <ethernet_link_thread+0x3ca>
      {
        if (phy_link_state == ETH_CHIP_STATUS_READ_ERROR)
 800b774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b778:	f113 0f05 	cmn.w	r3, #5
 800b77c:	d13a      	bne.n	800b7f4 <ethernet_link_thread+0x388>
        {
          cdc_debug_log("LINK_THREAD", "PHY read error detected");
 800b77e:	491c      	ldr	r1, [pc, #112]	@ (800b7f0 <ethernet_link_thread+0x384>)
 800b780:	4802      	ldr	r0, [pc, #8]	@ (800b78c <ethernet_link_thread+0x320>)
 800b782:	f7ff f873 	bl	800a86c <cdc_debug_log>
 800b786:	e056      	b.n	800b836 <ethernet_link_thread+0x3ca>
 800b788:	0801ee58 	.word	0x0801ee58
 800b78c:	0801ee7c 	.word	0x0801ee7c
 800b790:	51eb851f 	.word	0x51eb851f
 800b794:	0801ee88 	.word	0x0801ee88
 800b798:	200052ec 	.word	0x200052ec
 800b79c:	0801ee98 	.word	0x0801ee98
 800b7a0:	0801eeb0 	.word	0x0801eeb0
 800b7a4:	0801eec8 	.word	0x0801eec8
 800b7a8:	0801eee0 	.word	0x0801eee0
 800b7ac:	0801eef8 	.word	0x0801eef8
 800b7b0:	0801ef24 	.word	0x0801ef24
 800b7b4:	0801ef38 	.word	0x0801ef38
 800b7b8:	20005328 	.word	0x20005328
 800b7bc:	0801ef64 	.word	0x0801ef64
 800b7c0:	0801ef84 	.word	0x0801ef84
 800b7c4:	0801efa4 	.word	0x0801efa4
 800b7c8:	0801efc4 	.word	0x0801efc4
 800b7cc:	0801efe4 	.word	0x0801efe4
 800b7d0:	0801f004 	.word	0x0801f004
 800b7d4:	0801f02c 	.word	0x0801f02c
 800b7d8:	0801f040 	.word	0x0801f040
 800b7dc:	0801f05c 	.word	0x0801f05c
 800b7e0:	0801f080 	.word	0x0801f080
 800b7e4:	0801f0a8 	.word	0x0801f0a8
 800b7e8:	0801f0bc 	.word	0x0801f0bc
 800b7ec:	0801f0d8 	.word	0x0801f0d8
 800b7f0:	0801f0fc 	.word	0x0801f0fc
        }
        else if (phy_link_state == ETH_CHIP_STATUS_LINK_DOWN)
 800b7f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d10e      	bne.n	800b81a <ethernet_link_thread+0x3ae>
        {
          cdc_debug_log("LINK_THREAD", "Link is down, restarting auto-negotiation");
 800b7fc:	4926      	ldr	r1, [pc, #152]	@ (800b898 <ethernet_link_thread+0x42c>)
 800b7fe:	4827      	ldr	r0, [pc, #156]	@ (800b89c <ethernet_link_thread+0x430>)
 800b800:	f7ff f834 	bl	800a86c <cdc_debug_log>
          /* 尝试重新启动自动协商 */
          if (eth_chip_start_auto_nego(&PHYchip) == ETH_CHIP_STATUS_OK)
 800b804:	4826      	ldr	r0, [pc, #152]	@ (800b8a0 <ethernet_link_thread+0x434>)
 800b806:	f7f8 fd68 	bl	80042da <eth_chip_start_auto_nego>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d112      	bne.n	800b836 <ethernet_link_thread+0x3ca>
          {
            cdc_debug_log("LINK_THREAD", "Auto-negotiation restarted");
 800b810:	4924      	ldr	r1, [pc, #144]	@ (800b8a4 <ethernet_link_thread+0x438>)
 800b812:	4822      	ldr	r0, [pc, #136]	@ (800b89c <ethernet_link_thread+0x430>)
 800b814:	f7ff f82a 	bl	800a86c <cdc_debug_log>
 800b818:	e00d      	b.n	800b836 <ethernet_link_thread+0x3ca>
          }
        }
        else
        {
          char state_msg[64];
          snprintf(state_msg, sizeof(state_msg), "Unknown PHY state: %ld", phy_link_state);
 800b81a:	f107 0008 	add.w	r0, r7, #8
 800b81e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b822:	4a21      	ldr	r2, [pc, #132]	@ (800b8a8 <ethernet_link_thread+0x43c>)
 800b824:	2140      	movs	r1, #64	@ 0x40
 800b826:	f010 fe4b 	bl	801c4c0 <sniprintf>
          cdc_debug_log("LINK_THREAD", state_msg);
 800b82a:	f107 0308 	add.w	r3, r7, #8
 800b82e:	4619      	mov	r1, r3
 800b830:	481a      	ldr	r0, [pc, #104]	@ (800b89c <ethernet_link_thread+0x430>)
 800b832:	f7ff f81b 	bl	800a86c <cdc_debug_log>
        }
      }
      linkup = 0;
 800b836:	2300      	movs	r3, #0
 800b838:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b83c:	e000      	b.n	800b840 <ethernet_link_thread+0x3d4>
      if (linkup && !netif_is_link_up(netif))
 800b83e:	bf00      	nop
    }
    
    /* Reset link change flag */
    if (linkchanged)
 800b840:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00c      	beq.n	800b862 <ethernet_link_thread+0x3f6>
    {
      linkchanged = 0;
 800b848:	2300      	movs	r3, #0
 800b84a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      /* Debug DMA status after link change */
      cdc_debug_log("LINK_THREAD", "=== DMA Status After Link Change ===");
 800b84e:	4917      	ldr	r1, [pc, #92]	@ (800b8ac <ethernet_link_thread+0x440>)
 800b850:	4812      	ldr	r0, [pc, #72]	@ (800b89c <ethernet_link_thread+0x430>)
 800b852:	f7ff f80b 	bl	800a86c <cdc_debug_log>
      debug_eth_dma_registers();
 800b856:	f7ff f8f5 	bl	800aa44 <debug_eth_dma_registers>
      cdc_debug_log("LINK_THREAD", "=== DMA Debug Complete ===");
 800b85a:	4915      	ldr	r1, [pc, #84]	@ (800b8b0 <ethernet_link_thread+0x444>)
 800b85c:	480f      	ldr	r0, [pc, #60]	@ (800b89c <ethernet_link_thread+0x430>)
 800b85e:	f7ff f805 	bl	800a86c <cdc_debug_log>
    }
    
    /* Periodic DMA debug every 100 cycles (approximately 10 seconds) */
    if (link_check_counter % 100 == 0)
 800b862:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b866:	4b13      	ldr	r3, [pc, #76]	@ (800b8b4 <ethernet_link_thread+0x448>)
 800b868:	fba3 1302 	umull	r1, r3, r3, r2
 800b86c:	095b      	lsrs	r3, r3, #5
 800b86e:	2164      	movs	r1, #100	@ 0x64
 800b870:	fb01 f303 	mul.w	r3, r1, r3
 800b874:	1ad3      	subs	r3, r2, r3
 800b876:	2b00      	cmp	r3, #0
 800b878:	d109      	bne.n	800b88e <ethernet_link_thread+0x422>
    {
      cdc_debug_log("LINK_THREAD", "=== Periodic DMA Status Check ===");
 800b87a:	490f      	ldr	r1, [pc, #60]	@ (800b8b8 <ethernet_link_thread+0x44c>)
 800b87c:	4807      	ldr	r0, [pc, #28]	@ (800b89c <ethernet_link_thread+0x430>)
 800b87e:	f7fe fff5 	bl	800a86c <cdc_debug_log>
      debug_eth_dma_registers();
 800b882:	f7ff f8df 	bl	800aa44 <debug_eth_dma_registers>
      cdc_debug_log("LINK_THREAD", "=== Periodic Debug Complete ===");
 800b886:	490d      	ldr	r1, [pc, #52]	@ (800b8bc <ethernet_link_thread+0x450>)
 800b888:	4804      	ldr	r0, [pc, #16]	@ (800b89c <ethernet_link_thread+0x430>)
 800b88a:	f7fe ffef 	bl	800a86c <cdc_debug_log>
    }
/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800b88e:	2064      	movs	r0, #100	@ 0x64
 800b890:	f002 f90e 	bl	800dab0 <osDelay>
    link_check_counter++;
 800b894:	e5fe      	b.n	800b494 <ethernet_link_thread+0x28>
 800b896:	bf00      	nop
 800b898:	0801f114 	.word	0x0801f114
 800b89c:	0801ee7c 	.word	0x0801ee7c
 800b8a0:	200052ec 	.word	0x200052ec
 800b8a4:	0801f140 	.word	0x0801f140
 800b8a8:	0801f15c 	.word	0x0801f15c
 800b8ac:	0801f174 	.word	0x0801f174
 800b8b0:	0801f19c 	.word	0x0801f19c
 800b8b4:	51eb851f 	.word	0x51eb851f
 800b8b8:	0801f1b8 	.word	0x0801f1b8
 800b8bc:	0801f1dc 	.word	0x0801f1dc

0800b8c0 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af02      	add	r7, sp, #8
 800b8c6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800b8c8:	4812      	ldr	r0, [pc, #72]	@ (800b914 <HAL_ETH_RxAllocateCallback+0x54>)
 800b8ca:	f005 fe25 	bl	8011518 <memp_malloc_pool>
 800b8ce:	60f8      	str	r0, [r7, #12]
  if (p)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d014      	beq.n	800b900 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f103 0220 	add.w	r2, r3, #32
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	4a0d      	ldr	r2, [pc, #52]	@ (800b918 <HAL_ETH_RxAllocateCallback+0x58>)
 800b8e4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800b8ee:	9201      	str	r2, [sp, #4]
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2241      	movs	r2, #65	@ 0x41
 800b8f6:	2100      	movs	r1, #0
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	f006 fb5d 	bl	8011fb8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800b8fe:	e005      	b.n	800b90c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800b900:	4b06      	ldr	r3, [pc, #24]	@ (800b91c <HAL_ETH_RxAllocateCallback+0x5c>)
 800b902:	2201      	movs	r2, #1
 800b904:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	601a      	str	r2, [r3, #0]
}
 800b90c:	bf00      	nop
 800b90e:	3710      	adds	r7, #16
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	08021cec 	.word	0x08021cec
 800b918:	0800b305 	.word	0x0800b305
 800b91c:	200051a8 	.word	0x200051a8

0800b920 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800b920:	b480      	push	{r7}
 800b922:	b089      	sub	sp, #36	@ 0x24
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
 800b92c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b936:	2300      	movs	r3, #0
 800b938:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	3b20      	subs	r3, #32
 800b93e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	2200      	movs	r2, #0
 800b944:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800b946:	69fb      	ldr	r3, [r7, #28]
 800b948:	2200      	movs	r2, #0
 800b94a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	887a      	ldrh	r2, [r7, #2]
 800b950:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d103      	bne.n	800b962 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	69fa      	ldr	r2, [r7, #28]
 800b95e:	601a      	str	r2, [r3, #0]
 800b960:	e003      	b.n	800b96a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	69fa      	ldr	r2, [r7, #28]
 800b968:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	69fa      	ldr	r2, [r7, #28]
 800b96e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	61fb      	str	r3, [r7, #28]
 800b976:	e009      	b.n	800b98c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	891a      	ldrh	r2, [r3, #8]
 800b97c:	887b      	ldrh	r3, [r7, #2]
 800b97e:	4413      	add	r3, r2
 800b980:	b29a      	uxth	r2, r3
 800b982:	69fb      	ldr	r3, [r7, #28]
 800b984:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	61fb      	str	r3, [r7, #28]
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1f2      	bne.n	800b978 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800b992:	bf00      	nop
 800b994:	bf00      	nop
 800b996:	3724      	adds	r7, #36	@ 0x24
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f006 fcbf 	bl	801232c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800b9ae:	bf00      	nop
 800b9b0:	3708      	adds	r7, #8
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
	...

0800b9b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b9c4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b9c8:	f010 fb9c 	bl	801c104 <USBD_static_malloc>
 800b9cc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d109      	bne.n	800b9e8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	32b0      	adds	r2, #176	@ 0xb0
 800b9de:	2100      	movs	r1, #0
 800b9e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b9e4:	2302      	movs	r3, #2
 800b9e6:	e0d4      	b.n	800bb92 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b9e8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f010 fe09 	bl	801c606 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	32b0      	adds	r2, #176	@ 0xb0
 800b9fe:	68f9      	ldr	r1, [r7, #12]
 800ba00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	32b0      	adds	r2, #176	@ 0xb0
 800ba0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	7c1b      	ldrb	r3, [r3, #16]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d138      	bne.n	800ba92 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ba20:	4b5e      	ldr	r3, [pc, #376]	@ (800bb9c <USBD_CDC_Init+0x1e4>)
 800ba22:	7819      	ldrb	r1, [r3, #0]
 800ba24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ba28:	2202      	movs	r2, #2
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f010 fa47 	bl	801bebe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ba30:	4b5a      	ldr	r3, [pc, #360]	@ (800bb9c <USBD_CDC_Init+0x1e4>)
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	f003 020f 	and.w	r2, r3, #15
 800ba38:	6879      	ldr	r1, [r7, #4]
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	4413      	add	r3, r2
 800ba40:	009b      	lsls	r3, r3, #2
 800ba42:	440b      	add	r3, r1
 800ba44:	3323      	adds	r3, #35	@ 0x23
 800ba46:	2201      	movs	r2, #1
 800ba48:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ba4a:	4b55      	ldr	r3, [pc, #340]	@ (800bba0 <USBD_CDC_Init+0x1e8>)
 800ba4c:	7819      	ldrb	r1, [r3, #0]
 800ba4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ba52:	2202      	movs	r2, #2
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f010 fa32 	bl	801bebe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ba5a:	4b51      	ldr	r3, [pc, #324]	@ (800bba0 <USBD_CDC_Init+0x1e8>)
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	f003 020f 	and.w	r2, r3, #15
 800ba62:	6879      	ldr	r1, [r7, #4]
 800ba64:	4613      	mov	r3, r2
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	4413      	add	r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	440b      	add	r3, r1
 800ba6e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ba72:	2201      	movs	r2, #1
 800ba74:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ba76:	4b4b      	ldr	r3, [pc, #300]	@ (800bba4 <USBD_CDC_Init+0x1ec>)
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	f003 020f 	and.w	r2, r3, #15
 800ba7e:	6879      	ldr	r1, [r7, #4]
 800ba80:	4613      	mov	r3, r2
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4413      	add	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	440b      	add	r3, r1
 800ba8a:	331c      	adds	r3, #28
 800ba8c:	2210      	movs	r2, #16
 800ba8e:	601a      	str	r2, [r3, #0]
 800ba90:	e035      	b.n	800bafe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ba92:	4b42      	ldr	r3, [pc, #264]	@ (800bb9c <USBD_CDC_Init+0x1e4>)
 800ba94:	7819      	ldrb	r1, [r3, #0]
 800ba96:	2340      	movs	r3, #64	@ 0x40
 800ba98:	2202      	movs	r2, #2
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f010 fa0f 	bl	801bebe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800baa0:	4b3e      	ldr	r3, [pc, #248]	@ (800bb9c <USBD_CDC_Init+0x1e4>)
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	f003 020f 	and.w	r2, r3, #15
 800baa8:	6879      	ldr	r1, [r7, #4]
 800baaa:	4613      	mov	r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	4413      	add	r3, r2
 800bab0:	009b      	lsls	r3, r3, #2
 800bab2:	440b      	add	r3, r1
 800bab4:	3323      	adds	r3, #35	@ 0x23
 800bab6:	2201      	movs	r2, #1
 800bab8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800baba:	4b39      	ldr	r3, [pc, #228]	@ (800bba0 <USBD_CDC_Init+0x1e8>)
 800babc:	7819      	ldrb	r1, [r3, #0]
 800babe:	2340      	movs	r3, #64	@ 0x40
 800bac0:	2202      	movs	r2, #2
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f010 f9fb 	bl	801bebe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bac8:	4b35      	ldr	r3, [pc, #212]	@ (800bba0 <USBD_CDC_Init+0x1e8>)
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	f003 020f 	and.w	r2, r3, #15
 800bad0:	6879      	ldr	r1, [r7, #4]
 800bad2:	4613      	mov	r3, r2
 800bad4:	009b      	lsls	r3, r3, #2
 800bad6:	4413      	add	r3, r2
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	440b      	add	r3, r1
 800badc:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800bae0:	2201      	movs	r2, #1
 800bae2:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bae4:	4b2f      	ldr	r3, [pc, #188]	@ (800bba4 <USBD_CDC_Init+0x1ec>)
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	f003 020f 	and.w	r2, r3, #15
 800baec:	6879      	ldr	r1, [r7, #4]
 800baee:	4613      	mov	r3, r2
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	4413      	add	r3, r2
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	440b      	add	r3, r1
 800baf8:	331c      	adds	r3, #28
 800bafa:	2210      	movs	r2, #16
 800bafc:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bafe:	4b29      	ldr	r3, [pc, #164]	@ (800bba4 <USBD_CDC_Init+0x1ec>)
 800bb00:	7819      	ldrb	r1, [r3, #0]
 800bb02:	2308      	movs	r3, #8
 800bb04:	2203      	movs	r2, #3
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f010 f9d9 	bl	801bebe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bb0c:	4b25      	ldr	r3, [pc, #148]	@ (800bba4 <USBD_CDC_Init+0x1ec>)
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	f003 020f 	and.w	r2, r3, #15
 800bb14:	6879      	ldr	r1, [r7, #4]
 800bb16:	4613      	mov	r3, r2
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	4413      	add	r3, r2
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	440b      	add	r3, r1
 800bb20:	3323      	adds	r3, #35	@ 0x23
 800bb22:	2201      	movs	r2, #1
 800bb24:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	33b0      	adds	r3, #176	@ 0xb0
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	4413      	add	r3, r2
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2200      	movs	r2, #0
 800bb46:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d101      	bne.n	800bb60 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	e018      	b.n	800bb92 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	7c1b      	ldrb	r3, [r3, #16]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d10a      	bne.n	800bb7e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bb68:	4b0d      	ldr	r3, [pc, #52]	@ (800bba0 <USBD_CDC_Init+0x1e8>)
 800bb6a:	7819      	ldrb	r1, [r3, #0]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bb72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f010 fa90 	bl	801c09c <USBD_LL_PrepareReceive>
 800bb7c:	e008      	b.n	800bb90 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bb7e:	4b08      	ldr	r3, [pc, #32]	@ (800bba0 <USBD_CDC_Init+0x1e8>)
 800bb80:	7819      	ldrb	r1, [r3, #0]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bb88:	2340      	movs	r3, #64	@ 0x40
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f010 fa86 	bl	801c09c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bb90:	2300      	movs	r3, #0
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	20000093 	.word	0x20000093
 800bba0:	20000094 	.word	0x20000094
 800bba4:	20000095 	.word	0x20000095

0800bba8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bbb4:	4b3a      	ldr	r3, [pc, #232]	@ (800bca0 <USBD_CDC_DeInit+0xf8>)
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	4619      	mov	r1, r3
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f010 f9a5 	bl	801bf0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bbc0:	4b37      	ldr	r3, [pc, #220]	@ (800bca0 <USBD_CDC_DeInit+0xf8>)
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	f003 020f 	and.w	r2, r3, #15
 800bbc8:	6879      	ldr	r1, [r7, #4]
 800bbca:	4613      	mov	r3, r2
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	4413      	add	r3, r2
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	440b      	add	r3, r1
 800bbd4:	3323      	adds	r3, #35	@ 0x23
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bbda:	4b32      	ldr	r3, [pc, #200]	@ (800bca4 <USBD_CDC_DeInit+0xfc>)
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	4619      	mov	r1, r3
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f010 f992 	bl	801bf0a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bbe6:	4b2f      	ldr	r3, [pc, #188]	@ (800bca4 <USBD_CDC_DeInit+0xfc>)
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	f003 020f 	and.w	r2, r3, #15
 800bbee:	6879      	ldr	r1, [r7, #4]
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	4413      	add	r3, r2
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	440b      	add	r3, r1
 800bbfa:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800bbfe:	2200      	movs	r2, #0
 800bc00:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bc02:	4b29      	ldr	r3, [pc, #164]	@ (800bca8 <USBD_CDC_DeInit+0x100>)
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	4619      	mov	r1, r3
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f010 f97e 	bl	801bf0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bc0e:	4b26      	ldr	r3, [pc, #152]	@ (800bca8 <USBD_CDC_DeInit+0x100>)
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	f003 020f 	and.w	r2, r3, #15
 800bc16:	6879      	ldr	r1, [r7, #4]
 800bc18:	4613      	mov	r3, r2
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	4413      	add	r3, r2
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	440b      	add	r3, r1
 800bc22:	3323      	adds	r3, #35	@ 0x23
 800bc24:	2200      	movs	r2, #0
 800bc26:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bc28:	4b1f      	ldr	r3, [pc, #124]	@ (800bca8 <USBD_CDC_DeInit+0x100>)
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	f003 020f 	and.w	r2, r3, #15
 800bc30:	6879      	ldr	r1, [r7, #4]
 800bc32:	4613      	mov	r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	4413      	add	r3, r2
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	440b      	add	r3, r1
 800bc3c:	331c      	adds	r3, #28
 800bc3e:	2200      	movs	r2, #0
 800bc40:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	32b0      	adds	r2, #176	@ 0xb0
 800bc4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d01f      	beq.n	800bc94 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	33b0      	adds	r3, #176	@ 0xb0
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	4413      	add	r3, r2
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	32b0      	adds	r2, #176	@ 0xb0
 800bc72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc76:	4618      	mov	r0, r3
 800bc78:	f010 fa52 	bl	801c120 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	32b0      	adds	r2, #176	@ 0xb0
 800bc86:	2100      	movs	r1, #0
 800bc88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	20000093 	.word	0x20000093
 800bca4:	20000094 	.word	0x20000094
 800bca8:	20000095 	.word	0x20000095

0800bcac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b086      	sub	sp, #24
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	32b0      	adds	r2, #176	@ 0xb0
 800bcc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcc4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bcca:	2300      	movs	r3, #0
 800bccc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d101      	bne.n	800bcdc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bcd8:	2303      	movs	r3, #3
 800bcda:	e0bf      	b.n	800be5c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d050      	beq.n	800bd8a <USBD_CDC_Setup+0xde>
 800bce8:	2b20      	cmp	r3, #32
 800bcea:	f040 80af 	bne.w	800be4c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	88db      	ldrh	r3, [r3, #6]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d03a      	beq.n	800bd6c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	b25b      	sxtb	r3, r3
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	da1b      	bge.n	800bd38 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	33b0      	adds	r3, #176	@ 0xb0
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	4413      	add	r3, r2
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	689b      	ldr	r3, [r3, #8]
 800bd12:	683a      	ldr	r2, [r7, #0]
 800bd14:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bd16:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bd18:	683a      	ldr	r2, [r7, #0]
 800bd1a:	88d2      	ldrh	r2, [r2, #6]
 800bd1c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	88db      	ldrh	r3, [r3, #6]
 800bd22:	2b07      	cmp	r3, #7
 800bd24:	bf28      	it	cs
 800bd26:	2307      	movcs	r3, #7
 800bd28:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	89fa      	ldrh	r2, [r7, #14]
 800bd2e:	4619      	mov	r1, r3
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f001 fda9 	bl	800d888 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bd36:	e090      	b.n	800be5a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	785a      	ldrb	r2, [r3, #1]
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	88db      	ldrh	r3, [r3, #6]
 800bd46:	2b3f      	cmp	r3, #63	@ 0x3f
 800bd48:	d803      	bhi.n	800bd52 <USBD_CDC_Setup+0xa6>
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	88db      	ldrh	r3, [r3, #6]
 800bd4e:	b2da      	uxtb	r2, r3
 800bd50:	e000      	b.n	800bd54 <USBD_CDC_Setup+0xa8>
 800bd52:	2240      	movs	r2, #64	@ 0x40
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bd5a:	6939      	ldr	r1, [r7, #16]
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800bd62:	461a      	mov	r2, r3
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f001 fdbe 	bl	800d8e6 <USBD_CtlPrepareRx>
      break;
 800bd6a:	e076      	b.n	800be5a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	33b0      	adds	r3, #176	@ 0xb0
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	4413      	add	r3, r2
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	689b      	ldr	r3, [r3, #8]
 800bd7e:	683a      	ldr	r2, [r7, #0]
 800bd80:	7850      	ldrb	r0, [r2, #1]
 800bd82:	2200      	movs	r2, #0
 800bd84:	6839      	ldr	r1, [r7, #0]
 800bd86:	4798      	blx	r3
      break;
 800bd88:	e067      	b.n	800be5a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	785b      	ldrb	r3, [r3, #1]
 800bd8e:	2b0b      	cmp	r3, #11
 800bd90:	d851      	bhi.n	800be36 <USBD_CDC_Setup+0x18a>
 800bd92:	a201      	add	r2, pc, #4	@ (adr r2, 800bd98 <USBD_CDC_Setup+0xec>)
 800bd94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd98:	0800bdc9 	.word	0x0800bdc9
 800bd9c:	0800be45 	.word	0x0800be45
 800bda0:	0800be37 	.word	0x0800be37
 800bda4:	0800be37 	.word	0x0800be37
 800bda8:	0800be37 	.word	0x0800be37
 800bdac:	0800be37 	.word	0x0800be37
 800bdb0:	0800be37 	.word	0x0800be37
 800bdb4:	0800be37 	.word	0x0800be37
 800bdb8:	0800be37 	.word	0x0800be37
 800bdbc:	0800be37 	.word	0x0800be37
 800bdc0:	0800bdf3 	.word	0x0800bdf3
 800bdc4:	0800be1d 	.word	0x0800be1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	2b03      	cmp	r3, #3
 800bdd2:	d107      	bne.n	800bde4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bdd4:	f107 030a 	add.w	r3, r7, #10
 800bdd8:	2202      	movs	r2, #2
 800bdda:	4619      	mov	r1, r3
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f001 fd53 	bl	800d888 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bde2:	e032      	b.n	800be4a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bde4:	6839      	ldr	r1, [r7, #0]
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f001 fcd1 	bl	800d78e <USBD_CtlError>
            ret = USBD_FAIL;
 800bdec:	2303      	movs	r3, #3
 800bdee:	75fb      	strb	r3, [r7, #23]
          break;
 800bdf0:	e02b      	b.n	800be4a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	2b03      	cmp	r3, #3
 800bdfc:	d107      	bne.n	800be0e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bdfe:	f107 030d 	add.w	r3, r7, #13
 800be02:	2201      	movs	r2, #1
 800be04:	4619      	mov	r1, r3
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f001 fd3e 	bl	800d888 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800be0c:	e01d      	b.n	800be4a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800be0e:	6839      	ldr	r1, [r7, #0]
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f001 fcbc 	bl	800d78e <USBD_CtlError>
            ret = USBD_FAIL;
 800be16:	2303      	movs	r3, #3
 800be18:	75fb      	strb	r3, [r7, #23]
          break;
 800be1a:	e016      	b.n	800be4a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be22:	b2db      	uxtb	r3, r3
 800be24:	2b03      	cmp	r3, #3
 800be26:	d00f      	beq.n	800be48 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800be28:	6839      	ldr	r1, [r7, #0]
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f001 fcaf 	bl	800d78e <USBD_CtlError>
            ret = USBD_FAIL;
 800be30:	2303      	movs	r3, #3
 800be32:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800be34:	e008      	b.n	800be48 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800be36:	6839      	ldr	r1, [r7, #0]
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f001 fca8 	bl	800d78e <USBD_CtlError>
          ret = USBD_FAIL;
 800be3e:	2303      	movs	r3, #3
 800be40:	75fb      	strb	r3, [r7, #23]
          break;
 800be42:	e002      	b.n	800be4a <USBD_CDC_Setup+0x19e>
          break;
 800be44:	bf00      	nop
 800be46:	e008      	b.n	800be5a <USBD_CDC_Setup+0x1ae>
          break;
 800be48:	bf00      	nop
      }
      break;
 800be4a:	e006      	b.n	800be5a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800be4c:	6839      	ldr	r1, [r7, #0]
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f001 fc9d 	bl	800d78e <USBD_CtlError>
      ret = USBD_FAIL;
 800be54:	2303      	movs	r3, #3
 800be56:	75fb      	strb	r3, [r7, #23]
      break;
 800be58:	bf00      	nop
  }

  return (uint8_t)ret;
 800be5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3718      	adds	r7, #24
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	460b      	mov	r3, r1
 800be6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	32b0      	adds	r2, #176	@ 0xb0
 800be82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d101      	bne.n	800be8e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800be8a:	2303      	movs	r3, #3
 800be8c:	e065      	b.n	800bf5a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	32b0      	adds	r2, #176	@ 0xb0
 800be98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be9c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800be9e:	78fb      	ldrb	r3, [r7, #3]
 800bea0:	f003 020f 	and.w	r2, r3, #15
 800bea4:	6879      	ldr	r1, [r7, #4]
 800bea6:	4613      	mov	r3, r2
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	4413      	add	r3, r2
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	440b      	add	r3, r1
 800beb0:	3314      	adds	r3, #20
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d02f      	beq.n	800bf18 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800beb8:	78fb      	ldrb	r3, [r7, #3]
 800beba:	f003 020f 	and.w	r2, r3, #15
 800bebe:	6879      	ldr	r1, [r7, #4]
 800bec0:	4613      	mov	r3, r2
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	4413      	add	r3, r2
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	440b      	add	r3, r1
 800beca:	3314      	adds	r3, #20
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	78fb      	ldrb	r3, [r7, #3]
 800bed0:	f003 010f 	and.w	r1, r3, #15
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	460b      	mov	r3, r1
 800bed8:	00db      	lsls	r3, r3, #3
 800beda:	440b      	add	r3, r1
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	4403      	add	r3, r0
 800bee0:	331c      	adds	r3, #28
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	fbb2 f1f3 	udiv	r1, r2, r3
 800bee8:	fb01 f303 	mul.w	r3, r1, r3
 800beec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d112      	bne.n	800bf18 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bef2:	78fb      	ldrb	r3, [r7, #3]
 800bef4:	f003 020f 	and.w	r2, r3, #15
 800bef8:	6879      	ldr	r1, [r7, #4]
 800befa:	4613      	mov	r3, r2
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	4413      	add	r3, r2
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	440b      	add	r3, r1
 800bf04:	3314      	adds	r3, #20
 800bf06:	2200      	movs	r2, #0
 800bf08:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bf0a:	78f9      	ldrb	r1, [r7, #3]
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	2200      	movs	r2, #0
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f010 f8a2 	bl	801c05a <USBD_LL_Transmit>
 800bf16:	e01f      	b.n	800bf58 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	33b0      	adds	r3, #176	@ 0xb0
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	4413      	add	r3, r2
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	691b      	ldr	r3, [r3, #16]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d010      	beq.n	800bf58 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	33b0      	adds	r3, #176	@ 0xb0
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	4413      	add	r3, r2
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	691b      	ldr	r3, [r3, #16]
 800bf48:	68ba      	ldr	r2, [r7, #8]
 800bf4a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800bf4e:	68ba      	ldr	r2, [r7, #8]
 800bf50:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800bf54:	78fa      	ldrb	r2, [r7, #3]
 800bf56:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bf58:	2300      	movs	r3, #0
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3710      	adds	r7, #16
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b084      	sub	sp, #16
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
 800bf6a:	460b      	mov	r3, r1
 800bf6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	32b0      	adds	r2, #176	@ 0xb0
 800bf78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf7c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	32b0      	adds	r2, #176	@ 0xb0
 800bf88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d101      	bne.n	800bf94 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bf90:	2303      	movs	r3, #3
 800bf92:	e01a      	b.n	800bfca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bf94:	78fb      	ldrb	r3, [r7, #3]
 800bf96:	4619      	mov	r1, r3
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f010 f8a0 	bl	801c0de <USBD_LL_GetRxDataSize>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	33b0      	adds	r3, #176	@ 0xb0
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	4413      	add	r3, r2
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	68fa      	ldr	r2, [r7, #12]
 800bfba:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bfbe:	68fa      	ldr	r2, [r7, #12]
 800bfc0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bfc4:	4611      	mov	r1, r2
 800bfc6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3710      	adds	r7, #16
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}

0800bfd2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b084      	sub	sp, #16
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	32b0      	adds	r2, #176	@ 0xb0
 800bfe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfe8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d101      	bne.n	800bff4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bff0:	2303      	movs	r3, #3
 800bff2:	e024      	b.n	800c03e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	33b0      	adds	r3, #176	@ 0xb0
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	4413      	add	r3, r2
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d019      	beq.n	800c03c <USBD_CDC_EP0_RxReady+0x6a>
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c00e:	2bff      	cmp	r3, #255	@ 0xff
 800c010:	d014      	beq.n	800c03c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	33b0      	adds	r3, #176	@ 0xb0
 800c01c:	009b      	lsls	r3, r3, #2
 800c01e:	4413      	add	r3, r2
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	689b      	ldr	r3, [r3, #8]
 800c024:	68fa      	ldr	r2, [r7, #12]
 800c026:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c02a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c02c:	68fa      	ldr	r2, [r7, #12]
 800c02e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c032:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	22ff      	movs	r2, #255	@ 0xff
 800c038:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c03c:	2300      	movs	r3, #0
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
	...

0800c048 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b086      	sub	sp, #24
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c050:	2182      	movs	r1, #130	@ 0x82
 800c052:	4818      	ldr	r0, [pc, #96]	@ (800c0b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c054:	f000 fd62 	bl	800cb1c <USBD_GetEpDesc>
 800c058:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c05a:	2101      	movs	r1, #1
 800c05c:	4815      	ldr	r0, [pc, #84]	@ (800c0b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c05e:	f000 fd5d 	bl	800cb1c <USBD_GetEpDesc>
 800c062:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c064:	2181      	movs	r1, #129	@ 0x81
 800c066:	4813      	ldr	r0, [pc, #76]	@ (800c0b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c068:	f000 fd58 	bl	800cb1c <USBD_GetEpDesc>
 800c06c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d002      	beq.n	800c07a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	2210      	movs	r2, #16
 800c078:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d006      	beq.n	800c08e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	2200      	movs	r2, #0
 800c084:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c088:	711a      	strb	r2, [r3, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d006      	beq.n	800c0a2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2200      	movs	r2, #0
 800c098:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c09c:	711a      	strb	r2, [r3, #4]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2243      	movs	r2, #67	@ 0x43
 800c0a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c0a8:	4b02      	ldr	r3, [pc, #8]	@ (800c0b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3718      	adds	r7, #24
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	20000050 	.word	0x20000050

0800c0b8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b086      	sub	sp, #24
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c0c0:	2182      	movs	r1, #130	@ 0x82
 800c0c2:	4818      	ldr	r0, [pc, #96]	@ (800c124 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c0c4:	f000 fd2a 	bl	800cb1c <USBD_GetEpDesc>
 800c0c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c0ca:	2101      	movs	r1, #1
 800c0cc:	4815      	ldr	r0, [pc, #84]	@ (800c124 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c0ce:	f000 fd25 	bl	800cb1c <USBD_GetEpDesc>
 800c0d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c0d4:	2181      	movs	r1, #129	@ 0x81
 800c0d6:	4813      	ldr	r0, [pc, #76]	@ (800c124 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c0d8:	f000 fd20 	bl	800cb1c <USBD_GetEpDesc>
 800c0dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d002      	beq.n	800c0ea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	2210      	movs	r2, #16
 800c0e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d006      	beq.n	800c0fe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	711a      	strb	r2, [r3, #4]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f042 0202 	orr.w	r2, r2, #2
 800c0fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d006      	beq.n	800c112 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2200      	movs	r2, #0
 800c108:	711a      	strb	r2, [r3, #4]
 800c10a:	2200      	movs	r2, #0
 800c10c:	f042 0202 	orr.w	r2, r2, #2
 800c110:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2243      	movs	r2, #67	@ 0x43
 800c116:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c118:	4b02      	ldr	r3, [pc, #8]	@ (800c124 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3718      	adds	r7, #24
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	20000050 	.word	0x20000050

0800c128 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b086      	sub	sp, #24
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c130:	2182      	movs	r1, #130	@ 0x82
 800c132:	4818      	ldr	r0, [pc, #96]	@ (800c194 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c134:	f000 fcf2 	bl	800cb1c <USBD_GetEpDesc>
 800c138:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c13a:	2101      	movs	r1, #1
 800c13c:	4815      	ldr	r0, [pc, #84]	@ (800c194 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c13e:	f000 fced 	bl	800cb1c <USBD_GetEpDesc>
 800c142:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c144:	2181      	movs	r1, #129	@ 0x81
 800c146:	4813      	ldr	r0, [pc, #76]	@ (800c194 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c148:	f000 fce8 	bl	800cb1c <USBD_GetEpDesc>
 800c14c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d002      	beq.n	800c15a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	2210      	movs	r2, #16
 800c158:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d006      	beq.n	800c16e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	2200      	movs	r2, #0
 800c164:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c168:	711a      	strb	r2, [r3, #4]
 800c16a:	2200      	movs	r2, #0
 800c16c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d006      	beq.n	800c182 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c17c:	711a      	strb	r2, [r3, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2243      	movs	r2, #67	@ 0x43
 800c186:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c188:	4b02      	ldr	r3, [pc, #8]	@ (800c194 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3718      	adds	r7, #24
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	20000050 	.word	0x20000050

0800c198 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	220a      	movs	r2, #10
 800c1a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c1a6:	4b03      	ldr	r3, [pc, #12]	@ (800c1b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	370c      	adds	r7, #12
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr
 800c1b4:	2000000c 	.word	0x2000000c

0800c1b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b083      	sub	sp, #12
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d101      	bne.n	800c1cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c1c8:	2303      	movs	r3, #3
 800c1ca:	e009      	b.n	800c1e0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	33b0      	adds	r3, #176	@ 0xb0
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	4413      	add	r3, r2
 800c1da:	683a      	ldr	r2, [r7, #0]
 800c1dc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c1de:	2300      	movs	r3, #0
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	370c      	adds	r7, #12
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b087      	sub	sp, #28
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	32b0      	adds	r2, #176	@ 0xb0
 800c202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c206:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d101      	bne.n	800c212 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c20e:	2303      	movs	r3, #3
 800c210:	e008      	b.n	800c224 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	68ba      	ldr	r2, [r7, #8]
 800c216:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c222:	2300      	movs	r3, #0
}
 800c224:	4618      	mov	r0, r3
 800c226:	371c      	adds	r7, #28
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c230:	b480      	push	{r7}
 800c232:	b085      	sub	sp, #20
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	32b0      	adds	r2, #176	@ 0xb0
 800c244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c248:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d101      	bne.n	800c254 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c250:	2303      	movs	r3, #3
 800c252:	e004      	b.n	800c25e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	683a      	ldr	r2, [r7, #0]
 800c258:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c25c:	2300      	movs	r3, #0
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3714      	adds	r7, #20
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr
	...

0800c26c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	32b0      	adds	r2, #176	@ 0xb0
 800c27e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c282:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c284:	2301      	movs	r3, #1
 800c286:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d101      	bne.n	800c292 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c28e:	2303      	movs	r3, #3
 800c290:	e025      	b.n	800c2de <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d11f      	bne.n	800c2dc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c2a4:	4b10      	ldr	r3, [pc, #64]	@ (800c2e8 <USBD_CDC_TransmitPacket+0x7c>)
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	f003 020f 	and.w	r2, r3, #15
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	4413      	add	r3, r2
 800c2ba:	009b      	lsls	r3, r3, #2
 800c2bc:	4403      	add	r3, r0
 800c2be:	3314      	adds	r3, #20
 800c2c0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c2c2:	4b09      	ldr	r3, [pc, #36]	@ (800c2e8 <USBD_CDC_TransmitPacket+0x7c>)
 800c2c4:	7819      	ldrb	r1, [r3, #0]
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f00f fec1 	bl	801c05a <USBD_LL_Transmit>

    ret = USBD_OK;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3710      	adds	r7, #16
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	20000093 	.word	0x20000093

0800c2ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	32b0      	adds	r2, #176	@ 0xb0
 800c2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c302:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	32b0      	adds	r2, #176	@ 0xb0
 800c30e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d101      	bne.n	800c31a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c316:	2303      	movs	r3, #3
 800c318:	e018      	b.n	800c34c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	7c1b      	ldrb	r3, [r3, #16]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d10a      	bne.n	800c338 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c322:	4b0c      	ldr	r3, [pc, #48]	@ (800c354 <USBD_CDC_ReceivePacket+0x68>)
 800c324:	7819      	ldrb	r1, [r3, #0]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c32c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f00f feb3 	bl	801c09c <USBD_LL_PrepareReceive>
 800c336:	e008      	b.n	800c34a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c338:	4b06      	ldr	r3, [pc, #24]	@ (800c354 <USBD_CDC_ReceivePacket+0x68>)
 800c33a:	7819      	ldrb	r1, [r3, #0]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c342:	2340      	movs	r3, #64	@ 0x40
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f00f fea9 	bl	801c09c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c34a:	2300      	movs	r3, #0
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3710      	adds	r7, #16
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}
 800c354:	20000094 	.word	0x20000094

0800c358 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b086      	sub	sp, #24
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60f8      	str	r0, [r7, #12]
 800c360:	60b9      	str	r1, [r7, #8]
 800c362:	4613      	mov	r3, r2
 800c364:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d101      	bne.n	800c370 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c36c:	2303      	movs	r3, #3
 800c36e:	e01f      	b.n	800c3b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2200      	movs	r2, #0
 800c374:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2200      	movs	r2, #0
 800c37c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2200      	movs	r2, #0
 800c384:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d003      	beq.n	800c396 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	68ba      	ldr	r2, [r7, #8]
 800c392:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2201      	movs	r2, #1
 800c39a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	79fa      	ldrb	r2, [r7, #7]
 800c3a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	f00f fd23 	bl	801bdf0 <USBD_LL_Init>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c3ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3718      	adds	r7, #24
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d101      	bne.n	800c3d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c3cc:	2303      	movs	r3, #3
 800c3ce:	e025      	b.n	800c41c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	683a      	ldr	r2, [r7, #0]
 800c3d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	32ae      	adds	r2, #174	@ 0xae
 800c3e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00f      	beq.n	800c40c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	32ae      	adds	r2, #174	@ 0xae
 800c3f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3fc:	f107 020e 	add.w	r2, r7, #14
 800c400:	4610      	mov	r0, r2
 800c402:	4798      	blx	r3
 800c404:	4602      	mov	r2, r0
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c412:	1c5a      	adds	r2, r3, #1
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c41a:	2300      	movs	r3, #0
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3710      	adds	r7, #16
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f00f fd2b 	bl	801be88 <USBD_LL_Start>
 800c432:	4603      	mov	r3, r0
}
 800c434:	4618      	mov	r0, r3
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c444:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c446:	4618      	mov	r0, r3
 800c448:	370c      	adds	r7, #12
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr

0800c452 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c452:	b580      	push	{r7, lr}
 800c454:	b084      	sub	sp, #16
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
 800c45a:	460b      	mov	r3, r1
 800c45c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c45e:	2300      	movs	r3, #0
 800c460:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d009      	beq.n	800c480 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	78fa      	ldrb	r2, [r7, #3]
 800c476:	4611      	mov	r1, r2
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	4798      	blx	r3
 800c47c:	4603      	mov	r3, r0
 800c47e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c480:	7bfb      	ldrb	r3, [r7, #15]
}
 800c482:	4618      	mov	r0, r3
 800c484:	3710      	adds	r7, #16
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b084      	sub	sp, #16
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
 800c492:	460b      	mov	r3, r1
 800c494:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c496:	2300      	movs	r3, #0
 800c498:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	78fa      	ldrb	r2, [r7, #3]
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	4798      	blx	r3
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d001      	beq.n	800c4b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c4b0:	2303      	movs	r3, #3
 800c4b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3710      	adds	r7, #16
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b084      	sub	sp, #16
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
 800c4c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c4ce:	6839      	ldr	r1, [r7, #0]
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f001 f922 	bl	800d71a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c4f2:	f003 031f 	and.w	r3, r3, #31
 800c4f6:	2b02      	cmp	r3, #2
 800c4f8:	d01a      	beq.n	800c530 <USBD_LL_SetupStage+0x72>
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	d822      	bhi.n	800c544 <USBD_LL_SetupStage+0x86>
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d002      	beq.n	800c508 <USBD_LL_SetupStage+0x4a>
 800c502:	2b01      	cmp	r3, #1
 800c504:	d00a      	beq.n	800c51c <USBD_LL_SetupStage+0x5e>
 800c506:	e01d      	b.n	800c544 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c50e:	4619      	mov	r1, r3
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 fb77 	bl	800cc04 <USBD_StdDevReq>
 800c516:	4603      	mov	r3, r0
 800c518:	73fb      	strb	r3, [r7, #15]
      break;
 800c51a:	e020      	b.n	800c55e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c522:	4619      	mov	r1, r3
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f000 fbdf 	bl	800cce8 <USBD_StdItfReq>
 800c52a:	4603      	mov	r3, r0
 800c52c:	73fb      	strb	r3, [r7, #15]
      break;
 800c52e:	e016      	b.n	800c55e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c536:	4619      	mov	r1, r3
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f000 fc41 	bl	800cdc0 <USBD_StdEPReq>
 800c53e:	4603      	mov	r3, r0
 800c540:	73fb      	strb	r3, [r7, #15]
      break;
 800c542:	e00c      	b.n	800c55e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c54a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	4619      	mov	r1, r3
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f00f fcf8 	bl	801bf48 <USBD_LL_StallEP>
 800c558:	4603      	mov	r3, r0
 800c55a:	73fb      	strb	r3, [r7, #15]
      break;
 800c55c:	bf00      	nop
  }

  return ret;
 800c55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c560:	4618      	mov	r0, r3
 800c562:	3710      	adds	r7, #16
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b086      	sub	sp, #24
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	460b      	mov	r3, r1
 800c572:	607a      	str	r2, [r7, #4]
 800c574:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c576:	2300      	movs	r3, #0
 800c578:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c57a:	7afb      	ldrb	r3, [r7, #11]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d177      	bne.n	800c670 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c586:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c58e:	2b03      	cmp	r3, #3
 800c590:	f040 80a1 	bne.w	800c6d6 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	693a      	ldr	r2, [r7, #16]
 800c59a:	8992      	ldrh	r2, [r2, #12]
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d91c      	bls.n	800c5da <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	693a      	ldr	r2, [r7, #16]
 800c5a6:	8992      	ldrh	r2, [r2, #12]
 800c5a8:	1a9a      	subs	r2, r3, r2
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	691b      	ldr	r3, [r3, #16]
 800c5b2:	693a      	ldr	r2, [r7, #16]
 800c5b4:	8992      	ldrh	r2, [r2, #12]
 800c5b6:	441a      	add	r2, r3
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	6919      	ldr	r1, [r3, #16]
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	899b      	ldrh	r3, [r3, #12]
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	bf38      	it	cc
 800c5ce:	4613      	movcc	r3, r2
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f001 f9a8 	bl	800d928 <USBD_CtlContinueRx>
 800c5d8:	e07d      	b.n	800c6d6 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c5e0:	f003 031f 	and.w	r3, r3, #31
 800c5e4:	2b02      	cmp	r3, #2
 800c5e6:	d014      	beq.n	800c612 <USBD_LL_DataOutStage+0xaa>
 800c5e8:	2b02      	cmp	r3, #2
 800c5ea:	d81d      	bhi.n	800c628 <USBD_LL_DataOutStage+0xc0>
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d002      	beq.n	800c5f6 <USBD_LL_DataOutStage+0x8e>
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d003      	beq.n	800c5fc <USBD_LL_DataOutStage+0x94>
 800c5f4:	e018      	b.n	800c628 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	75bb      	strb	r3, [r7, #22]
            break;
 800c5fa:	e018      	b.n	800c62e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c602:	b2db      	uxtb	r3, r3
 800c604:	4619      	mov	r1, r3
 800c606:	68f8      	ldr	r0, [r7, #12]
 800c608:	f000 fa6e 	bl	800cae8 <USBD_CoreFindIF>
 800c60c:	4603      	mov	r3, r0
 800c60e:	75bb      	strb	r3, [r7, #22]
            break;
 800c610:	e00d      	b.n	800c62e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	4619      	mov	r1, r3
 800c61c:	68f8      	ldr	r0, [r7, #12]
 800c61e:	f000 fa70 	bl	800cb02 <USBD_CoreFindEP>
 800c622:	4603      	mov	r3, r0
 800c624:	75bb      	strb	r3, [r7, #22]
            break;
 800c626:	e002      	b.n	800c62e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c628:	2300      	movs	r3, #0
 800c62a:	75bb      	strb	r3, [r7, #22]
            break;
 800c62c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c62e:	7dbb      	ldrb	r3, [r7, #22]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d119      	bne.n	800c668 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	2b03      	cmp	r3, #3
 800c63e:	d113      	bne.n	800c668 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c640:	7dba      	ldrb	r2, [r7, #22]
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	32ae      	adds	r2, #174	@ 0xae
 800c646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c64a:	691b      	ldr	r3, [r3, #16]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d00b      	beq.n	800c668 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800c650:	7dba      	ldrb	r2, [r7, #22]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c658:	7dba      	ldrb	r2, [r7, #22]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	32ae      	adds	r2, #174	@ 0xae
 800c65e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c662:	691b      	ldr	r3, [r3, #16]
 800c664:	68f8      	ldr	r0, [r7, #12]
 800c666:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f001 f96e 	bl	800d94a <USBD_CtlSendStatus>
 800c66e:	e032      	b.n	800c6d6 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c670:	7afb      	ldrb	r3, [r7, #11]
 800c672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c676:	b2db      	uxtb	r3, r3
 800c678:	4619      	mov	r1, r3
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	f000 fa41 	bl	800cb02 <USBD_CoreFindEP>
 800c680:	4603      	mov	r3, r0
 800c682:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c684:	7dbb      	ldrb	r3, [r7, #22]
 800c686:	2bff      	cmp	r3, #255	@ 0xff
 800c688:	d025      	beq.n	800c6d6 <USBD_LL_DataOutStage+0x16e>
 800c68a:	7dbb      	ldrb	r3, [r7, #22]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d122      	bne.n	800c6d6 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c696:	b2db      	uxtb	r3, r3
 800c698:	2b03      	cmp	r3, #3
 800c69a:	d117      	bne.n	800c6cc <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c69c:	7dba      	ldrb	r2, [r7, #22]
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	32ae      	adds	r2, #174	@ 0xae
 800c6a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6a6:	699b      	ldr	r3, [r3, #24]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d00f      	beq.n	800c6cc <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800c6ac:	7dba      	ldrb	r2, [r7, #22]
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c6b4:	7dba      	ldrb	r2, [r7, #22]
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	32ae      	adds	r2, #174	@ 0xae
 800c6ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6be:	699b      	ldr	r3, [r3, #24]
 800c6c0:	7afa      	ldrb	r2, [r7, #11]
 800c6c2:	4611      	mov	r1, r2
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	4798      	blx	r3
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c6cc:	7dfb      	ldrb	r3, [r7, #23]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d001      	beq.n	800c6d6 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800c6d2:	7dfb      	ldrb	r3, [r7, #23]
 800c6d4:	e000      	b.n	800c6d8 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800c6d6:	2300      	movs	r3, #0
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3718      	adds	r7, #24
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b086      	sub	sp, #24
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	607a      	str	r2, [r7, #4]
 800c6ec:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c6ee:	7afb      	ldrb	r3, [r7, #11]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d178      	bne.n	800c7e6 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	3314      	adds	r3, #20
 800c6f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c700:	2b02      	cmp	r3, #2
 800c702:	d163      	bne.n	800c7cc <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	693a      	ldr	r2, [r7, #16]
 800c70a:	8992      	ldrh	r2, [r2, #12]
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d91c      	bls.n	800c74a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	693a      	ldr	r2, [r7, #16]
 800c716:	8992      	ldrh	r2, [r2, #12]
 800c718:	1a9a      	subs	r2, r3, r2
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	691b      	ldr	r3, [r3, #16]
 800c722:	693a      	ldr	r2, [r7, #16]
 800c724:	8992      	ldrh	r2, [r2, #12]
 800c726:	441a      	add	r2, r3
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	6919      	ldr	r1, [r3, #16]
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	461a      	mov	r2, r3
 800c736:	68f8      	ldr	r0, [r7, #12]
 800c738:	f001 f8c4 	bl	800d8c4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c73c:	2300      	movs	r3, #0
 800c73e:	2200      	movs	r2, #0
 800c740:	2100      	movs	r1, #0
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f00f fcaa 	bl	801c09c <USBD_LL_PrepareReceive>
 800c748:	e040      	b.n	800c7cc <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	899b      	ldrh	r3, [r3, #12]
 800c74e:	461a      	mov	r2, r3
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	429a      	cmp	r2, r3
 800c756:	d11c      	bne.n	800c792 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	693a      	ldr	r2, [r7, #16]
 800c75e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c760:	4293      	cmp	r3, r2
 800c762:	d316      	bcc.n	800c792 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c76e:	429a      	cmp	r2, r3
 800c770:	d20f      	bcs.n	800c792 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c772:	2200      	movs	r2, #0
 800c774:	2100      	movs	r1, #0
 800c776:	68f8      	ldr	r0, [r7, #12]
 800c778:	f001 f8a4 	bl	800d8c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2200      	movs	r2, #0
 800c780:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c784:	2300      	movs	r3, #0
 800c786:	2200      	movs	r2, #0
 800c788:	2100      	movs	r1, #0
 800c78a:	68f8      	ldr	r0, [r7, #12]
 800c78c:	f00f fc86 	bl	801c09c <USBD_LL_PrepareReceive>
 800c790:	e01c      	b.n	800c7cc <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c798:	b2db      	uxtb	r3, r3
 800c79a:	2b03      	cmp	r3, #3
 800c79c:	d10f      	bne.n	800c7be <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d009      	beq.n	800c7be <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7b8:	68db      	ldr	r3, [r3, #12]
 800c7ba:	68f8      	ldr	r0, [r7, #12]
 800c7bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7be:	2180      	movs	r1, #128	@ 0x80
 800c7c0:	68f8      	ldr	r0, [r7, #12]
 800c7c2:	f00f fbc1 	bl	801bf48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c7c6:	68f8      	ldr	r0, [r7, #12]
 800c7c8:	f001 f8d2 	bl	800d970 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d03a      	beq.n	800c84c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800c7d6:	68f8      	ldr	r0, [r7, #12]
 800c7d8:	f7ff fe30 	bl	800c43c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c7e4:	e032      	b.n	800c84c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c7e6:	7afb      	ldrb	r3, [r7, #11]
 800c7e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	68f8      	ldr	r0, [r7, #12]
 800c7f2:	f000 f986 	bl	800cb02 <USBD_CoreFindEP>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c7fa:	7dfb      	ldrb	r3, [r7, #23]
 800c7fc:	2bff      	cmp	r3, #255	@ 0xff
 800c7fe:	d025      	beq.n	800c84c <USBD_LL_DataInStage+0x16c>
 800c800:	7dfb      	ldrb	r3, [r7, #23]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d122      	bne.n	800c84c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	2b03      	cmp	r3, #3
 800c810:	d11c      	bne.n	800c84c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c812:	7dfa      	ldrb	r2, [r7, #23]
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	32ae      	adds	r2, #174	@ 0xae
 800c818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c81c:	695b      	ldr	r3, [r3, #20]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d014      	beq.n	800c84c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800c822:	7dfa      	ldrb	r2, [r7, #23]
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c82a:	7dfa      	ldrb	r2, [r7, #23]
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	32ae      	adds	r2, #174	@ 0xae
 800c830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c834:	695b      	ldr	r3, [r3, #20]
 800c836:	7afa      	ldrb	r2, [r7, #11]
 800c838:	4611      	mov	r1, r2
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	4798      	blx	r3
 800c83e:	4603      	mov	r3, r0
 800c840:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c842:	7dbb      	ldrb	r3, [r7, #22]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d001      	beq.n	800c84c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800c848:	7dbb      	ldrb	r3, [r7, #22]
 800c84a:	e000      	b.n	800c84e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800c84c:	2300      	movs	r3, #0
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3718      	adds	r7, #24
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}

0800c856 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c856:	b580      	push	{r7, lr}
 800c858:	b084      	sub	sp, #16
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c85e:	2300      	movs	r3, #0
 800c860:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2201      	movs	r2, #1
 800c866:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2200      	movs	r2, #0
 800c86e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d014      	beq.n	800c8bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d00e      	beq.n	800c8bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	6852      	ldr	r2, [r2, #4]
 800c8aa:	b2d2      	uxtb	r2, r2
 800c8ac:	4611      	mov	r1, r2
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	4798      	blx	r3
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d001      	beq.n	800c8bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c8b8:	2303      	movs	r3, #3
 800c8ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8bc:	2340      	movs	r3, #64	@ 0x40
 800c8be:	2200      	movs	r2, #0
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f00f fafb 	bl	801bebe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2240      	movs	r2, #64	@ 0x40
 800c8d4:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8d8:	2340      	movs	r3, #64	@ 0x40
 800c8da:	2200      	movs	r2, #0
 800c8dc:	2180      	movs	r1, #128	@ 0x80
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f00f faed 	bl	801bebe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2240      	movs	r2, #64	@ 0x40
 800c8f0:	841a      	strh	r2, [r3, #32]

  return ret;
 800c8f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3710      	adds	r7, #16
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b083      	sub	sp, #12
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	460b      	mov	r3, r1
 800c906:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	78fa      	ldrb	r2, [r7, #3]
 800c90c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c90e:	2300      	movs	r3, #0
}
 800c910:	4618      	mov	r0, r3
 800c912:	370c      	adds	r7, #12
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr

0800c91c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b083      	sub	sp, #12
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	2b04      	cmp	r3, #4
 800c92e:	d006      	beq.n	800c93e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c936:	b2da      	uxtb	r2, r3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2204      	movs	r2, #4
 800c942:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c946:	2300      	movs	r3, #0
}
 800c948:	4618      	mov	r0, r3
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c962:	b2db      	uxtb	r3, r3
 800c964:	2b04      	cmp	r3, #4
 800c966:	d106      	bne.n	800c976 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c96e:	b2da      	uxtb	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c976:	2300      	movs	r3, #0
}
 800c978:	4618      	mov	r0, r3
 800c97a:	370c      	adds	r7, #12
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr

0800c984 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c992:	b2db      	uxtb	r3, r3
 800c994:	2b03      	cmp	r3, #3
 800c996:	d110      	bne.n	800c9ba <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d00b      	beq.n	800c9ba <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9a8:	69db      	ldr	r3, [r3, #28]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d005      	beq.n	800c9ba <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9b4:	69db      	ldr	r3, [r3, #28]
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c9ba:	2300      	movs	r3, #0
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3708      	adds	r7, #8
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	32ae      	adds	r2, #174	@ 0xae
 800c9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d101      	bne.n	800c9e6 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c9e2:	2303      	movs	r3, #3
 800c9e4:	e01c      	b.n	800ca20 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	2b03      	cmp	r3, #3
 800c9f0:	d115      	bne.n	800ca1e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	32ae      	adds	r2, #174	@ 0xae
 800c9fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca00:	6a1b      	ldr	r3, [r3, #32]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d00b      	beq.n	800ca1e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	32ae      	adds	r2, #174	@ 0xae
 800ca10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca14:	6a1b      	ldr	r3, [r3, #32]
 800ca16:	78fa      	ldrb	r2, [r7, #3]
 800ca18:	4611      	mov	r1, r2
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ca1e:	2300      	movs	r3, #0
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3708      	adds	r7, #8
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	460b      	mov	r3, r1
 800ca32:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	32ae      	adds	r2, #174	@ 0xae
 800ca3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d101      	bne.n	800ca4a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ca46:	2303      	movs	r3, #3
 800ca48:	e01c      	b.n	800ca84 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca50:	b2db      	uxtb	r3, r3
 800ca52:	2b03      	cmp	r3, #3
 800ca54:	d115      	bne.n	800ca82 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	32ae      	adds	r2, #174	@ 0xae
 800ca60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d00b      	beq.n	800ca82 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	32ae      	adds	r2, #174	@ 0xae
 800ca74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca7a:	78fa      	ldrb	r2, [r7, #3]
 800ca7c:	4611      	mov	r1, r2
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ca82:	2300      	movs	r3, #0
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3708      	adds	r7, #8
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ca94:	2300      	movs	r3, #0
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	370c      	adds	r7, #12
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr

0800caa2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b084      	sub	sp, #16
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800caaa:	2300      	movs	r3, #0
 800caac:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2201      	movs	r2, #1
 800cab2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d00e      	beq.n	800cade <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	6852      	ldr	r2, [r2, #4]
 800cacc:	b2d2      	uxtb	r2, r2
 800cace:	4611      	mov	r1, r2
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	4798      	blx	r3
 800cad4:	4603      	mov	r3, r0
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d001      	beq.n	800cade <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cada:	2303      	movs	r3, #3
 800cadc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cade:	7bfb      	ldrb	r3, [r7, #15]
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3710      	adds	r7, #16
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	460b      	mov	r3, r1
 800caf2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800caf4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	370c      	adds	r7, #12
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr

0800cb02 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cb02:	b480      	push	{r7}
 800cb04:	b083      	sub	sp, #12
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cb0e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr

0800cb1c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b086      	sub	sp, #24
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	460b      	mov	r3, r1
 800cb26:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cb30:	2300      	movs	r3, #0
 800cb32:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	885b      	ldrh	r3, [r3, #2]
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	68fa      	ldr	r2, [r7, #12]
 800cb3c:	7812      	ldrb	r2, [r2, #0]
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d91f      	bls.n	800cb82 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cb48:	e013      	b.n	800cb72 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cb4a:	f107 030a 	add.w	r3, r7, #10
 800cb4e:	4619      	mov	r1, r3
 800cb50:	6978      	ldr	r0, [r7, #20]
 800cb52:	f000 f81b 	bl	800cb8c <USBD_GetNextDesc>
 800cb56:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	785b      	ldrb	r3, [r3, #1]
 800cb5c:	2b05      	cmp	r3, #5
 800cb5e:	d108      	bne.n	800cb72 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	789b      	ldrb	r3, [r3, #2]
 800cb68:	78fa      	ldrb	r2, [r7, #3]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d008      	beq.n	800cb80 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	885b      	ldrh	r3, [r3, #2]
 800cb76:	b29a      	uxth	r2, r3
 800cb78:	897b      	ldrh	r3, [r7, #10]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d8e5      	bhi.n	800cb4a <USBD_GetEpDesc+0x2e>
 800cb7e:	e000      	b.n	800cb82 <USBD_GetEpDesc+0x66>
          break;
 800cb80:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cb82:	693b      	ldr	r3, [r7, #16]
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3718      	adds	r7, #24
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b085      	sub	sp, #20
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	881b      	ldrh	r3, [r3, #0]
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	7812      	ldrb	r2, [r2, #0]
 800cba2:	4413      	add	r3, r2
 800cba4:	b29a      	uxth	r2, r3
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	4413      	add	r3, r2
 800cbb4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cbb6:	68fb      	ldr	r3, [r7, #12]
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3714      	adds	r7, #20
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr

0800cbc4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b087      	sub	sp, #28
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cbe2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800cbe6:	021b      	lsls	r3, r3, #8
 800cbe8:	b21a      	sxth	r2, r3
 800cbea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	b21b      	sxth	r3, r3
 800cbf2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cbf4:	89fb      	ldrh	r3, [r7, #14]
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	371c      	adds	r7, #28
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
	...

0800cc04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cc1a:	2b40      	cmp	r3, #64	@ 0x40
 800cc1c:	d005      	beq.n	800cc2a <USBD_StdDevReq+0x26>
 800cc1e:	2b40      	cmp	r3, #64	@ 0x40
 800cc20:	d857      	bhi.n	800ccd2 <USBD_StdDevReq+0xce>
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d00f      	beq.n	800cc46 <USBD_StdDevReq+0x42>
 800cc26:	2b20      	cmp	r3, #32
 800cc28:	d153      	bne.n	800ccd2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	32ae      	adds	r2, #174	@ 0xae
 800cc34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc38:	689b      	ldr	r3, [r3, #8]
 800cc3a:	6839      	ldr	r1, [r7, #0]
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	4798      	blx	r3
 800cc40:	4603      	mov	r3, r0
 800cc42:	73fb      	strb	r3, [r7, #15]
      break;
 800cc44:	e04a      	b.n	800ccdc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	785b      	ldrb	r3, [r3, #1]
 800cc4a:	2b09      	cmp	r3, #9
 800cc4c:	d83b      	bhi.n	800ccc6 <USBD_StdDevReq+0xc2>
 800cc4e:	a201      	add	r2, pc, #4	@ (adr r2, 800cc54 <USBD_StdDevReq+0x50>)
 800cc50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc54:	0800cca9 	.word	0x0800cca9
 800cc58:	0800ccbd 	.word	0x0800ccbd
 800cc5c:	0800ccc7 	.word	0x0800ccc7
 800cc60:	0800ccb3 	.word	0x0800ccb3
 800cc64:	0800ccc7 	.word	0x0800ccc7
 800cc68:	0800cc87 	.word	0x0800cc87
 800cc6c:	0800cc7d 	.word	0x0800cc7d
 800cc70:	0800ccc7 	.word	0x0800ccc7
 800cc74:	0800cc9f 	.word	0x0800cc9f
 800cc78:	0800cc91 	.word	0x0800cc91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cc7c:	6839      	ldr	r1, [r7, #0]
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 fa3e 	bl	800d100 <USBD_GetDescriptor>
          break;
 800cc84:	e024      	b.n	800ccd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cc86:	6839      	ldr	r1, [r7, #0]
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 fba3 	bl	800d3d4 <USBD_SetAddress>
          break;
 800cc8e:	e01f      	b.n	800ccd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cc90:	6839      	ldr	r1, [r7, #0]
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 fbe2 	bl	800d45c <USBD_SetConfig>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	73fb      	strb	r3, [r7, #15]
          break;
 800cc9c:	e018      	b.n	800ccd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cc9e:	6839      	ldr	r1, [r7, #0]
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 fc85 	bl	800d5b0 <USBD_GetConfig>
          break;
 800cca6:	e013      	b.n	800ccd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cca8:	6839      	ldr	r1, [r7, #0]
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 fcb6 	bl	800d61c <USBD_GetStatus>
          break;
 800ccb0:	e00e      	b.n	800ccd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ccb2:	6839      	ldr	r1, [r7, #0]
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f000 fce5 	bl	800d684 <USBD_SetFeature>
          break;
 800ccba:	e009      	b.n	800ccd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ccbc:	6839      	ldr	r1, [r7, #0]
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 fd09 	bl	800d6d6 <USBD_ClrFeature>
          break;
 800ccc4:	e004      	b.n	800ccd0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ccc6:	6839      	ldr	r1, [r7, #0]
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 fd60 	bl	800d78e <USBD_CtlError>
          break;
 800ccce:	bf00      	nop
      }
      break;
 800ccd0:	e004      	b.n	800ccdc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ccd2:	6839      	ldr	r1, [r7, #0]
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 fd5a 	bl	800d78e <USBD_CtlError>
      break;
 800ccda:	bf00      	nop
  }

  return ret;
 800ccdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3710      	adds	r7, #16
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop

0800cce8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ccfe:	2b40      	cmp	r3, #64	@ 0x40
 800cd00:	d005      	beq.n	800cd0e <USBD_StdItfReq+0x26>
 800cd02:	2b40      	cmp	r3, #64	@ 0x40
 800cd04:	d852      	bhi.n	800cdac <USBD_StdItfReq+0xc4>
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d001      	beq.n	800cd0e <USBD_StdItfReq+0x26>
 800cd0a:	2b20      	cmp	r3, #32
 800cd0c:	d14e      	bne.n	800cdac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	3b01      	subs	r3, #1
 800cd18:	2b02      	cmp	r3, #2
 800cd1a:	d840      	bhi.n	800cd9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	889b      	ldrh	r3, [r3, #4]
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	2b01      	cmp	r3, #1
 800cd24:	d836      	bhi.n	800cd94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	889b      	ldrh	r3, [r3, #4]
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7ff feda 	bl	800cae8 <USBD_CoreFindIF>
 800cd34:	4603      	mov	r3, r0
 800cd36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cd38:	7bbb      	ldrb	r3, [r7, #14]
 800cd3a:	2bff      	cmp	r3, #255	@ 0xff
 800cd3c:	d01d      	beq.n	800cd7a <USBD_StdItfReq+0x92>
 800cd3e:	7bbb      	ldrb	r3, [r7, #14]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d11a      	bne.n	800cd7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cd44:	7bba      	ldrb	r2, [r7, #14]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	32ae      	adds	r2, #174	@ 0xae
 800cd4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d00f      	beq.n	800cd74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cd54:	7bba      	ldrb	r2, [r7, #14]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cd5c:	7bba      	ldrb	r2, [r7, #14]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	32ae      	adds	r2, #174	@ 0xae
 800cd62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	6839      	ldr	r1, [r7, #0]
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	4798      	blx	r3
 800cd6e:	4603      	mov	r3, r0
 800cd70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cd72:	e004      	b.n	800cd7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cd74:	2303      	movs	r3, #3
 800cd76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cd78:	e001      	b.n	800cd7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cd7a:	2303      	movs	r3, #3
 800cd7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	88db      	ldrh	r3, [r3, #6]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d110      	bne.n	800cda8 <USBD_StdItfReq+0xc0>
 800cd86:	7bfb      	ldrb	r3, [r7, #15]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d10d      	bne.n	800cda8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 fddc 	bl	800d94a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cd92:	e009      	b.n	800cda8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cd94:	6839      	ldr	r1, [r7, #0]
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 fcf9 	bl	800d78e <USBD_CtlError>
          break;
 800cd9c:	e004      	b.n	800cda8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cd9e:	6839      	ldr	r1, [r7, #0]
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 fcf4 	bl	800d78e <USBD_CtlError>
          break;
 800cda6:	e000      	b.n	800cdaa <USBD_StdItfReq+0xc2>
          break;
 800cda8:	bf00      	nop
      }
      break;
 800cdaa:	e004      	b.n	800cdb6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cdac:	6839      	ldr	r1, [r7, #0]
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 fced 	bl	800d78e <USBD_CtlError>
      break;
 800cdb4:	bf00      	nop
  }

  return ret;
 800cdb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3710      	adds	r7, #16
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	889b      	ldrh	r3, [r3, #4]
 800cdd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cddc:	2b40      	cmp	r3, #64	@ 0x40
 800cdde:	d007      	beq.n	800cdf0 <USBD_StdEPReq+0x30>
 800cde0:	2b40      	cmp	r3, #64	@ 0x40
 800cde2:	f200 8181 	bhi.w	800d0e8 <USBD_StdEPReq+0x328>
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d02a      	beq.n	800ce40 <USBD_StdEPReq+0x80>
 800cdea:	2b20      	cmp	r3, #32
 800cdec:	f040 817c 	bne.w	800d0e8 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cdf0:	7bbb      	ldrb	r3, [r7, #14]
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f7ff fe84 	bl	800cb02 <USBD_CoreFindEP>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cdfe:	7b7b      	ldrb	r3, [r7, #13]
 800ce00:	2bff      	cmp	r3, #255	@ 0xff
 800ce02:	f000 8176 	beq.w	800d0f2 <USBD_StdEPReq+0x332>
 800ce06:	7b7b      	ldrb	r3, [r7, #13]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f040 8172 	bne.w	800d0f2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800ce0e:	7b7a      	ldrb	r2, [r7, #13]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ce16:	7b7a      	ldrb	r2, [r7, #13]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	32ae      	adds	r2, #174	@ 0xae
 800ce1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce20:	689b      	ldr	r3, [r3, #8]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	f000 8165 	beq.w	800d0f2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ce28:	7b7a      	ldrb	r2, [r7, #13]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	32ae      	adds	r2, #174	@ 0xae
 800ce2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	6839      	ldr	r1, [r7, #0]
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	4798      	blx	r3
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ce3e:	e158      	b.n	800d0f2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	785b      	ldrb	r3, [r3, #1]
 800ce44:	2b03      	cmp	r3, #3
 800ce46:	d008      	beq.n	800ce5a <USBD_StdEPReq+0x9a>
 800ce48:	2b03      	cmp	r3, #3
 800ce4a:	f300 8147 	bgt.w	800d0dc <USBD_StdEPReq+0x31c>
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	f000 809b 	beq.w	800cf8a <USBD_StdEPReq+0x1ca>
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d03c      	beq.n	800ced2 <USBD_StdEPReq+0x112>
 800ce58:	e140      	b.n	800d0dc <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	2b02      	cmp	r3, #2
 800ce64:	d002      	beq.n	800ce6c <USBD_StdEPReq+0xac>
 800ce66:	2b03      	cmp	r3, #3
 800ce68:	d016      	beq.n	800ce98 <USBD_StdEPReq+0xd8>
 800ce6a:	e02c      	b.n	800cec6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce6c:	7bbb      	ldrb	r3, [r7, #14]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00d      	beq.n	800ce8e <USBD_StdEPReq+0xce>
 800ce72:	7bbb      	ldrb	r3, [r7, #14]
 800ce74:	2b80      	cmp	r3, #128	@ 0x80
 800ce76:	d00a      	beq.n	800ce8e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce78:	7bbb      	ldrb	r3, [r7, #14]
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f00f f863 	bl	801bf48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce82:	2180      	movs	r1, #128	@ 0x80
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f00f f85f 	bl	801bf48 <USBD_LL_StallEP>
 800ce8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ce8c:	e020      	b.n	800ced0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ce8e:	6839      	ldr	r1, [r7, #0]
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f000 fc7c 	bl	800d78e <USBD_CtlError>
              break;
 800ce96:	e01b      	b.n	800ced0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	885b      	ldrh	r3, [r3, #2]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d10e      	bne.n	800cebe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cea0:	7bbb      	ldrb	r3, [r7, #14]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00b      	beq.n	800cebe <USBD_StdEPReq+0xfe>
 800cea6:	7bbb      	ldrb	r3, [r7, #14]
 800cea8:	2b80      	cmp	r3, #128	@ 0x80
 800ceaa:	d008      	beq.n	800cebe <USBD_StdEPReq+0xfe>
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	88db      	ldrh	r3, [r3, #6]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d104      	bne.n	800cebe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ceb4:	7bbb      	ldrb	r3, [r7, #14]
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f00f f845 	bl	801bf48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f000 fd43 	bl	800d94a <USBD_CtlSendStatus>

              break;
 800cec4:	e004      	b.n	800ced0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cec6:	6839      	ldr	r1, [r7, #0]
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f000 fc60 	bl	800d78e <USBD_CtlError>
              break;
 800cece:	bf00      	nop
          }
          break;
 800ced0:	e109      	b.n	800d0e6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	2b02      	cmp	r3, #2
 800cedc:	d002      	beq.n	800cee4 <USBD_StdEPReq+0x124>
 800cede:	2b03      	cmp	r3, #3
 800cee0:	d016      	beq.n	800cf10 <USBD_StdEPReq+0x150>
 800cee2:	e04b      	b.n	800cf7c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cee4:	7bbb      	ldrb	r3, [r7, #14]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00d      	beq.n	800cf06 <USBD_StdEPReq+0x146>
 800ceea:	7bbb      	ldrb	r3, [r7, #14]
 800ceec:	2b80      	cmp	r3, #128	@ 0x80
 800ceee:	d00a      	beq.n	800cf06 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cef0:	7bbb      	ldrb	r3, [r7, #14]
 800cef2:	4619      	mov	r1, r3
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f00f f827 	bl	801bf48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cefa:	2180      	movs	r1, #128	@ 0x80
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f00f f823 	bl	801bf48 <USBD_LL_StallEP>
 800cf02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cf04:	e040      	b.n	800cf88 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cf06:	6839      	ldr	r1, [r7, #0]
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 fc40 	bl	800d78e <USBD_CtlError>
              break;
 800cf0e:	e03b      	b.n	800cf88 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	885b      	ldrh	r3, [r3, #2]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d136      	bne.n	800cf86 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cf18:	7bbb      	ldrb	r3, [r7, #14]
 800cf1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d004      	beq.n	800cf2c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cf22:	7bbb      	ldrb	r3, [r7, #14]
 800cf24:	4619      	mov	r1, r3
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f00f f82d 	bl	801bf86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 fd0c 	bl	800d94a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cf32:	7bbb      	ldrb	r3, [r7, #14]
 800cf34:	4619      	mov	r1, r3
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f7ff fde3 	bl	800cb02 <USBD_CoreFindEP>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cf40:	7b7b      	ldrb	r3, [r7, #13]
 800cf42:	2bff      	cmp	r3, #255	@ 0xff
 800cf44:	d01f      	beq.n	800cf86 <USBD_StdEPReq+0x1c6>
 800cf46:	7b7b      	ldrb	r3, [r7, #13]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d11c      	bne.n	800cf86 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cf4c:	7b7a      	ldrb	r2, [r7, #13]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cf54:	7b7a      	ldrb	r2, [r7, #13]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	32ae      	adds	r2, #174	@ 0xae
 800cf5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d010      	beq.n	800cf86 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cf64:	7b7a      	ldrb	r2, [r7, #13]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	32ae      	adds	r2, #174	@ 0xae
 800cf6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	6839      	ldr	r1, [r7, #0]
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	4798      	blx	r3
 800cf76:	4603      	mov	r3, r0
 800cf78:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cf7a:	e004      	b.n	800cf86 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cf7c:	6839      	ldr	r1, [r7, #0]
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 fc05 	bl	800d78e <USBD_CtlError>
              break;
 800cf84:	e000      	b.n	800cf88 <USBD_StdEPReq+0x1c8>
              break;
 800cf86:	bf00      	nop
          }
          break;
 800cf88:	e0ad      	b.n	800d0e6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	2b02      	cmp	r3, #2
 800cf94:	d002      	beq.n	800cf9c <USBD_StdEPReq+0x1dc>
 800cf96:	2b03      	cmp	r3, #3
 800cf98:	d033      	beq.n	800d002 <USBD_StdEPReq+0x242>
 800cf9a:	e099      	b.n	800d0d0 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf9c:	7bbb      	ldrb	r3, [r7, #14]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d007      	beq.n	800cfb2 <USBD_StdEPReq+0x1f2>
 800cfa2:	7bbb      	ldrb	r3, [r7, #14]
 800cfa4:	2b80      	cmp	r3, #128	@ 0x80
 800cfa6:	d004      	beq.n	800cfb2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cfa8:	6839      	ldr	r1, [r7, #0]
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 fbef 	bl	800d78e <USBD_CtlError>
                break;
 800cfb0:	e093      	b.n	800d0da <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cfb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	da0b      	bge.n	800cfd2 <USBD_StdEPReq+0x212>
 800cfba:	7bbb      	ldrb	r3, [r7, #14]
 800cfbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	4413      	add	r3, r2
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	3310      	adds	r3, #16
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	4413      	add	r3, r2
 800cfce:	3304      	adds	r3, #4
 800cfd0:	e00b      	b.n	800cfea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cfd2:	7bbb      	ldrb	r3, [r7, #14]
 800cfd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cfd8:	4613      	mov	r3, r2
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	4413      	add	r3, r2
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	4413      	add	r3, r2
 800cfe8:	3304      	adds	r3, #4
 800cfea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	2200      	movs	r2, #0
 800cff0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	330e      	adds	r3, #14
 800cff6:	2202      	movs	r2, #2
 800cff8:	4619      	mov	r1, r3
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 fc44 	bl	800d888 <USBD_CtlSendData>
              break;
 800d000:	e06b      	b.n	800d0da <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d002:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d006:	2b00      	cmp	r3, #0
 800d008:	da11      	bge.n	800d02e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d00a:	7bbb      	ldrb	r3, [r7, #14]
 800d00c:	f003 020f 	and.w	r2, r3, #15
 800d010:	6879      	ldr	r1, [r7, #4]
 800d012:	4613      	mov	r3, r2
 800d014:	009b      	lsls	r3, r3, #2
 800d016:	4413      	add	r3, r2
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	440b      	add	r3, r1
 800d01c:	3323      	adds	r3, #35	@ 0x23
 800d01e:	781b      	ldrb	r3, [r3, #0]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d117      	bne.n	800d054 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800d024:	6839      	ldr	r1, [r7, #0]
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 fbb1 	bl	800d78e <USBD_CtlError>
                  break;
 800d02c:	e055      	b.n	800d0da <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d02e:	7bbb      	ldrb	r3, [r7, #14]
 800d030:	f003 020f 	and.w	r2, r3, #15
 800d034:	6879      	ldr	r1, [r7, #4]
 800d036:	4613      	mov	r3, r2
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	4413      	add	r3, r2
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	440b      	add	r3, r1
 800d040:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d104      	bne.n	800d054 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800d04a:	6839      	ldr	r1, [r7, #0]
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 fb9e 	bl	800d78e <USBD_CtlError>
                  break;
 800d052:	e042      	b.n	800d0da <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d054:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	da0b      	bge.n	800d074 <USBD_StdEPReq+0x2b4>
 800d05c:	7bbb      	ldrb	r3, [r7, #14]
 800d05e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d062:	4613      	mov	r3, r2
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	4413      	add	r3, r2
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	3310      	adds	r3, #16
 800d06c:	687a      	ldr	r2, [r7, #4]
 800d06e:	4413      	add	r3, r2
 800d070:	3304      	adds	r3, #4
 800d072:	e00b      	b.n	800d08c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d074:	7bbb      	ldrb	r3, [r7, #14]
 800d076:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d07a:	4613      	mov	r3, r2
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	4413      	add	r3, r2
 800d080:	009b      	lsls	r3, r3, #2
 800d082:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	4413      	add	r3, r2
 800d08a:	3304      	adds	r3, #4
 800d08c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d08e:	7bbb      	ldrb	r3, [r7, #14]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d002      	beq.n	800d09a <USBD_StdEPReq+0x2da>
 800d094:	7bbb      	ldrb	r3, [r7, #14]
 800d096:	2b80      	cmp	r3, #128	@ 0x80
 800d098:	d103      	bne.n	800d0a2 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	2200      	movs	r2, #0
 800d09e:	739a      	strb	r2, [r3, #14]
 800d0a0:	e00e      	b.n	800d0c0 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d0a2:	7bbb      	ldrb	r3, [r7, #14]
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f00e ff8c 	bl	801bfc4 <USBD_LL_IsStallEP>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d003      	beq.n	800d0ba <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	739a      	strb	r2, [r3, #14]
 800d0b8:	e002      	b.n	800d0c0 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	330e      	adds	r3, #14
 800d0c4:	2202      	movs	r2, #2
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 fbdd 	bl	800d888 <USBD_CtlSendData>
              break;
 800d0ce:	e004      	b.n	800d0da <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800d0d0:	6839      	ldr	r1, [r7, #0]
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 fb5b 	bl	800d78e <USBD_CtlError>
              break;
 800d0d8:	bf00      	nop
          }
          break;
 800d0da:	e004      	b.n	800d0e6 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800d0dc:	6839      	ldr	r1, [r7, #0]
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f000 fb55 	bl	800d78e <USBD_CtlError>
          break;
 800d0e4:	bf00      	nop
      }
      break;
 800d0e6:	e005      	b.n	800d0f4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800d0e8:	6839      	ldr	r1, [r7, #0]
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f000 fb4f 	bl	800d78e <USBD_CtlError>
      break;
 800d0f0:	e000      	b.n	800d0f4 <USBD_StdEPReq+0x334>
      break;
 800d0f2:	bf00      	nop
  }

  return ret;
 800d0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3710      	adds	r7, #16
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
	...

0800d100 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d10a:	2300      	movs	r3, #0
 800d10c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d10e:	2300      	movs	r3, #0
 800d110:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d112:	2300      	movs	r3, #0
 800d114:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	885b      	ldrh	r3, [r3, #2]
 800d11a:	0a1b      	lsrs	r3, r3, #8
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	3b01      	subs	r3, #1
 800d120:	2b06      	cmp	r3, #6
 800d122:	f200 8128 	bhi.w	800d376 <USBD_GetDescriptor+0x276>
 800d126:	a201      	add	r2, pc, #4	@ (adr r2, 800d12c <USBD_GetDescriptor+0x2c>)
 800d128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d12c:	0800d149 	.word	0x0800d149
 800d130:	0800d161 	.word	0x0800d161
 800d134:	0800d1a1 	.word	0x0800d1a1
 800d138:	0800d377 	.word	0x0800d377
 800d13c:	0800d377 	.word	0x0800d377
 800d140:	0800d317 	.word	0x0800d317
 800d144:	0800d343 	.word	0x0800d343
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	687a      	ldr	r2, [r7, #4]
 800d152:	7c12      	ldrb	r2, [r2, #16]
 800d154:	f107 0108 	add.w	r1, r7, #8
 800d158:	4610      	mov	r0, r2
 800d15a:	4798      	blx	r3
 800d15c:	60f8      	str	r0, [r7, #12]
      break;
 800d15e:	e112      	b.n	800d386 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	7c1b      	ldrb	r3, [r3, #16]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d10d      	bne.n	800d184 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d16e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d170:	f107 0208 	add.w	r2, r7, #8
 800d174:	4610      	mov	r0, r2
 800d176:	4798      	blx	r3
 800d178:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	3301      	adds	r3, #1
 800d17e:	2202      	movs	r2, #2
 800d180:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d182:	e100      	b.n	800d386 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d18a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d18c:	f107 0208 	add.w	r2, r7, #8
 800d190:	4610      	mov	r0, r2
 800d192:	4798      	blx	r3
 800d194:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	3301      	adds	r3, #1
 800d19a:	2202      	movs	r2, #2
 800d19c:	701a      	strb	r2, [r3, #0]
      break;
 800d19e:	e0f2      	b.n	800d386 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	885b      	ldrh	r3, [r3, #2]
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	2b05      	cmp	r3, #5
 800d1a8:	f200 80ac 	bhi.w	800d304 <USBD_GetDescriptor+0x204>
 800d1ac:	a201      	add	r2, pc, #4	@ (adr r2, 800d1b4 <USBD_GetDescriptor+0xb4>)
 800d1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b2:	bf00      	nop
 800d1b4:	0800d1cd 	.word	0x0800d1cd
 800d1b8:	0800d201 	.word	0x0800d201
 800d1bc:	0800d235 	.word	0x0800d235
 800d1c0:	0800d269 	.word	0x0800d269
 800d1c4:	0800d29d 	.word	0x0800d29d
 800d1c8:	0800d2d1 	.word	0x0800d2d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1d2:	685b      	ldr	r3, [r3, #4]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d00b      	beq.n	800d1f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	7c12      	ldrb	r2, [r2, #16]
 800d1e4:	f107 0108 	add.w	r1, r7, #8
 800d1e8:	4610      	mov	r0, r2
 800d1ea:	4798      	blx	r3
 800d1ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1ee:	e091      	b.n	800d314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d1f0:	6839      	ldr	r1, [r7, #0]
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f000 facb 	bl	800d78e <USBD_CtlError>
            err++;
 800d1f8:	7afb      	ldrb	r3, [r7, #11]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	72fb      	strb	r3, [r7, #11]
          break;
 800d1fe:	e089      	b.n	800d314 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d00b      	beq.n	800d224 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d212:	689b      	ldr	r3, [r3, #8]
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	7c12      	ldrb	r2, [r2, #16]
 800d218:	f107 0108 	add.w	r1, r7, #8
 800d21c:	4610      	mov	r0, r2
 800d21e:	4798      	blx	r3
 800d220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d222:	e077      	b.n	800d314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d224:	6839      	ldr	r1, [r7, #0]
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f000 fab1 	bl	800d78e <USBD_CtlError>
            err++;
 800d22c:	7afb      	ldrb	r3, [r7, #11]
 800d22e:	3301      	adds	r3, #1
 800d230:	72fb      	strb	r3, [r7, #11]
          break;
 800d232:	e06f      	b.n	800d314 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d00b      	beq.n	800d258 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d246:	68db      	ldr	r3, [r3, #12]
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	7c12      	ldrb	r2, [r2, #16]
 800d24c:	f107 0108 	add.w	r1, r7, #8
 800d250:	4610      	mov	r0, r2
 800d252:	4798      	blx	r3
 800d254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d256:	e05d      	b.n	800d314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d258:	6839      	ldr	r1, [r7, #0]
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 fa97 	bl	800d78e <USBD_CtlError>
            err++;
 800d260:	7afb      	ldrb	r3, [r7, #11]
 800d262:	3301      	adds	r3, #1
 800d264:	72fb      	strb	r3, [r7, #11]
          break;
 800d266:	e055      	b.n	800d314 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d26e:	691b      	ldr	r3, [r3, #16]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d00b      	beq.n	800d28c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d27a:	691b      	ldr	r3, [r3, #16]
 800d27c:	687a      	ldr	r2, [r7, #4]
 800d27e:	7c12      	ldrb	r2, [r2, #16]
 800d280:	f107 0108 	add.w	r1, r7, #8
 800d284:	4610      	mov	r0, r2
 800d286:	4798      	blx	r3
 800d288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d28a:	e043      	b.n	800d314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d28c:	6839      	ldr	r1, [r7, #0]
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f000 fa7d 	bl	800d78e <USBD_CtlError>
            err++;
 800d294:	7afb      	ldrb	r3, [r7, #11]
 800d296:	3301      	adds	r3, #1
 800d298:	72fb      	strb	r3, [r7, #11]
          break;
 800d29a:	e03b      	b.n	800d314 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2a2:	695b      	ldr	r3, [r3, #20]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d00b      	beq.n	800d2c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2ae:	695b      	ldr	r3, [r3, #20]
 800d2b0:	687a      	ldr	r2, [r7, #4]
 800d2b2:	7c12      	ldrb	r2, [r2, #16]
 800d2b4:	f107 0108 	add.w	r1, r7, #8
 800d2b8:	4610      	mov	r0, r2
 800d2ba:	4798      	blx	r3
 800d2bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d2be:	e029      	b.n	800d314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d2c0:	6839      	ldr	r1, [r7, #0]
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f000 fa63 	bl	800d78e <USBD_CtlError>
            err++;
 800d2c8:	7afb      	ldrb	r3, [r7, #11]
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	72fb      	strb	r3, [r7, #11]
          break;
 800d2ce:	e021      	b.n	800d314 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2d6:	699b      	ldr	r3, [r3, #24]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d00b      	beq.n	800d2f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2e2:	699b      	ldr	r3, [r3, #24]
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	7c12      	ldrb	r2, [r2, #16]
 800d2e8:	f107 0108 	add.w	r1, r7, #8
 800d2ec:	4610      	mov	r0, r2
 800d2ee:	4798      	blx	r3
 800d2f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d2f2:	e00f      	b.n	800d314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d2f4:	6839      	ldr	r1, [r7, #0]
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f000 fa49 	bl	800d78e <USBD_CtlError>
            err++;
 800d2fc:	7afb      	ldrb	r3, [r7, #11]
 800d2fe:	3301      	adds	r3, #1
 800d300:	72fb      	strb	r3, [r7, #11]
          break;
 800d302:	e007      	b.n	800d314 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d304:	6839      	ldr	r1, [r7, #0]
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 fa41 	bl	800d78e <USBD_CtlError>
          err++;
 800d30c:	7afb      	ldrb	r3, [r7, #11]
 800d30e:	3301      	adds	r3, #1
 800d310:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d312:	bf00      	nop
      }
      break;
 800d314:	e037      	b.n	800d386 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	7c1b      	ldrb	r3, [r3, #16]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d109      	bne.n	800d332 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d326:	f107 0208 	add.w	r2, r7, #8
 800d32a:	4610      	mov	r0, r2
 800d32c:	4798      	blx	r3
 800d32e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d330:	e029      	b.n	800d386 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d332:	6839      	ldr	r1, [r7, #0]
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f000 fa2a 	bl	800d78e <USBD_CtlError>
        err++;
 800d33a:	7afb      	ldrb	r3, [r7, #11]
 800d33c:	3301      	adds	r3, #1
 800d33e:	72fb      	strb	r3, [r7, #11]
      break;
 800d340:	e021      	b.n	800d386 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	7c1b      	ldrb	r3, [r3, #16]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d10d      	bne.n	800d366 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d352:	f107 0208 	add.w	r2, r7, #8
 800d356:	4610      	mov	r0, r2
 800d358:	4798      	blx	r3
 800d35a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	3301      	adds	r3, #1
 800d360:	2207      	movs	r2, #7
 800d362:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d364:	e00f      	b.n	800d386 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d366:	6839      	ldr	r1, [r7, #0]
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f000 fa10 	bl	800d78e <USBD_CtlError>
        err++;
 800d36e:	7afb      	ldrb	r3, [r7, #11]
 800d370:	3301      	adds	r3, #1
 800d372:	72fb      	strb	r3, [r7, #11]
      break;
 800d374:	e007      	b.n	800d386 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d376:	6839      	ldr	r1, [r7, #0]
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f000 fa08 	bl	800d78e <USBD_CtlError>
      err++;
 800d37e:	7afb      	ldrb	r3, [r7, #11]
 800d380:	3301      	adds	r3, #1
 800d382:	72fb      	strb	r3, [r7, #11]
      break;
 800d384:	bf00      	nop
  }

  if (err != 0U)
 800d386:	7afb      	ldrb	r3, [r7, #11]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d11e      	bne.n	800d3ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	88db      	ldrh	r3, [r3, #6]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d016      	beq.n	800d3c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d394:	893b      	ldrh	r3, [r7, #8]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d00e      	beq.n	800d3b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	88da      	ldrh	r2, [r3, #6]
 800d39e:	893b      	ldrh	r3, [r7, #8]
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	bf28      	it	cs
 800d3a4:	4613      	movcs	r3, r2
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d3aa:	893b      	ldrh	r3, [r7, #8]
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	68f9      	ldr	r1, [r7, #12]
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f000 fa69 	bl	800d888 <USBD_CtlSendData>
 800d3b6:	e009      	b.n	800d3cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d3b8:	6839      	ldr	r1, [r7, #0]
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f000 f9e7 	bl	800d78e <USBD_CtlError>
 800d3c0:	e004      	b.n	800d3cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 fac1 	bl	800d94a <USBD_CtlSendStatus>
 800d3c8:	e000      	b.n	800d3cc <USBD_GetDescriptor+0x2cc>
    return;
 800d3ca:	bf00      	nop
  }
}
 800d3cc:	3710      	adds	r7, #16
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
 800d3d2:	bf00      	nop

0800d3d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	889b      	ldrh	r3, [r3, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d131      	bne.n	800d44a <USBD_SetAddress+0x76>
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	88db      	ldrh	r3, [r3, #6]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d12d      	bne.n	800d44a <USBD_SetAddress+0x76>
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	885b      	ldrh	r3, [r3, #2]
 800d3f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800d3f4:	d829      	bhi.n	800d44a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	885b      	ldrh	r3, [r3, #2]
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d400:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d408:	b2db      	uxtb	r3, r3
 800d40a:	2b03      	cmp	r3, #3
 800d40c:	d104      	bne.n	800d418 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d40e:	6839      	ldr	r1, [r7, #0]
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f000 f9bc 	bl	800d78e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d416:	e01d      	b.n	800d454 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	7bfa      	ldrb	r2, [r7, #15]
 800d41c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d420:	7bfb      	ldrb	r3, [r7, #15]
 800d422:	4619      	mov	r1, r3
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f00e fdf9 	bl	801c01c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 fa8d 	bl	800d94a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d430:	7bfb      	ldrb	r3, [r7, #15]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d004      	beq.n	800d440 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2202      	movs	r2, #2
 800d43a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d43e:	e009      	b.n	800d454 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2201      	movs	r2, #1
 800d444:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d448:	e004      	b.n	800d454 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d44a:	6839      	ldr	r1, [r7, #0]
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f000 f99e 	bl	800d78e <USBD_CtlError>
  }
}
 800d452:	bf00      	nop
 800d454:	bf00      	nop
 800d456:	3710      	adds	r7, #16
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d466:	2300      	movs	r3, #0
 800d468:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	885b      	ldrh	r3, [r3, #2]
 800d46e:	b2da      	uxtb	r2, r3
 800d470:	4b4e      	ldr	r3, [pc, #312]	@ (800d5ac <USBD_SetConfig+0x150>)
 800d472:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d474:	4b4d      	ldr	r3, [pc, #308]	@ (800d5ac <USBD_SetConfig+0x150>)
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d905      	bls.n	800d488 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d47c:	6839      	ldr	r1, [r7, #0]
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f000 f985 	bl	800d78e <USBD_CtlError>
    return USBD_FAIL;
 800d484:	2303      	movs	r3, #3
 800d486:	e08c      	b.n	800d5a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	2b02      	cmp	r3, #2
 800d492:	d002      	beq.n	800d49a <USBD_SetConfig+0x3e>
 800d494:	2b03      	cmp	r3, #3
 800d496:	d029      	beq.n	800d4ec <USBD_SetConfig+0x90>
 800d498:	e075      	b.n	800d586 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d49a:	4b44      	ldr	r3, [pc, #272]	@ (800d5ac <USBD_SetConfig+0x150>)
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d020      	beq.n	800d4e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d4a2:	4b42      	ldr	r3, [pc, #264]	@ (800d5ac <USBD_SetConfig+0x150>)
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d4ac:	4b3f      	ldr	r3, [pc, #252]	@ (800d5ac <USBD_SetConfig+0x150>)
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f7fe ffcd 	bl	800c452 <USBD_SetClassConfig>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d4bc:	7bfb      	ldrb	r3, [r7, #15]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d008      	beq.n	800d4d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d4c2:	6839      	ldr	r1, [r7, #0]
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f000 f962 	bl	800d78e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2202      	movs	r2, #2
 800d4ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d4d2:	e065      	b.n	800d5a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f000 fa38 	bl	800d94a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2203      	movs	r2, #3
 800d4de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d4e2:	e05d      	b.n	800d5a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f000 fa30 	bl	800d94a <USBD_CtlSendStatus>
      break;
 800d4ea:	e059      	b.n	800d5a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d4ec:	4b2f      	ldr	r3, [pc, #188]	@ (800d5ac <USBD_SetConfig+0x150>)
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d112      	bne.n	800d51a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2202      	movs	r2, #2
 800d4f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d4fc:	4b2b      	ldr	r3, [pc, #172]	@ (800d5ac <USBD_SetConfig+0x150>)
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	461a      	mov	r2, r3
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d506:	4b29      	ldr	r3, [pc, #164]	@ (800d5ac <USBD_SetConfig+0x150>)
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	4619      	mov	r1, r3
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f7fe ffbc 	bl	800c48a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 fa19 	bl	800d94a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d518:	e042      	b.n	800d5a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d51a:	4b24      	ldr	r3, [pc, #144]	@ (800d5ac <USBD_SetConfig+0x150>)
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	461a      	mov	r2, r3
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	429a      	cmp	r2, r3
 800d526:	d02a      	beq.n	800d57e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	4619      	mov	r1, r3
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f7fe ffaa 	bl	800c48a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d536:	4b1d      	ldr	r3, [pc, #116]	@ (800d5ac <USBD_SetConfig+0x150>)
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	461a      	mov	r2, r3
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d540:	4b1a      	ldr	r3, [pc, #104]	@ (800d5ac <USBD_SetConfig+0x150>)
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	4619      	mov	r1, r3
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f7fe ff83 	bl	800c452 <USBD_SetClassConfig>
 800d54c:	4603      	mov	r3, r0
 800d54e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d550:	7bfb      	ldrb	r3, [r7, #15]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d00f      	beq.n	800d576 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d556:	6839      	ldr	r1, [r7, #0]
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f000 f918 	bl	800d78e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	b2db      	uxtb	r3, r3
 800d564:	4619      	mov	r1, r3
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f7fe ff8f 	bl	800c48a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2202      	movs	r2, #2
 800d570:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d574:	e014      	b.n	800d5a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 f9e7 	bl	800d94a <USBD_CtlSendStatus>
      break;
 800d57c:	e010      	b.n	800d5a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 f9e3 	bl	800d94a <USBD_CtlSendStatus>
      break;
 800d584:	e00c      	b.n	800d5a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d586:	6839      	ldr	r1, [r7, #0]
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f000 f900 	bl	800d78e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d58e:	4b07      	ldr	r3, [pc, #28]	@ (800d5ac <USBD_SetConfig+0x150>)
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	4619      	mov	r1, r3
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f7fe ff78 	bl	800c48a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d59a:	2303      	movs	r3, #3
 800d59c:	73fb      	strb	r3, [r7, #15]
      break;
 800d59e:	bf00      	nop
  }

  return ret;
 800d5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3710      	adds	r7, #16
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	20005410 	.word	0x20005410

0800d5b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	88db      	ldrh	r3, [r3, #6]
 800d5be:	2b01      	cmp	r3, #1
 800d5c0:	d004      	beq.n	800d5cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d5c2:	6839      	ldr	r1, [r7, #0]
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 f8e2 	bl	800d78e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d5ca:	e023      	b.n	800d614 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	2b02      	cmp	r3, #2
 800d5d6:	dc02      	bgt.n	800d5de <USBD_GetConfig+0x2e>
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	dc03      	bgt.n	800d5e4 <USBD_GetConfig+0x34>
 800d5dc:	e015      	b.n	800d60a <USBD_GetConfig+0x5a>
 800d5de:	2b03      	cmp	r3, #3
 800d5e0:	d00b      	beq.n	800d5fa <USBD_GetConfig+0x4a>
 800d5e2:	e012      	b.n	800d60a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	3308      	adds	r3, #8
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f000 f948 	bl	800d888 <USBD_CtlSendData>
        break;
 800d5f8:	e00c      	b.n	800d614 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	3304      	adds	r3, #4
 800d5fe:	2201      	movs	r2, #1
 800d600:	4619      	mov	r1, r3
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 f940 	bl	800d888 <USBD_CtlSendData>
        break;
 800d608:	e004      	b.n	800d614 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d60a:	6839      	ldr	r1, [r7, #0]
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f000 f8be 	bl	800d78e <USBD_CtlError>
        break;
 800d612:	bf00      	nop
}
 800d614:	bf00      	nop
 800d616:	3708      	adds	r7, #8
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}

0800d61c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	3b01      	subs	r3, #1
 800d630:	2b02      	cmp	r3, #2
 800d632:	d81e      	bhi.n	800d672 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	88db      	ldrh	r3, [r3, #6]
 800d638:	2b02      	cmp	r3, #2
 800d63a:	d004      	beq.n	800d646 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d63c:	6839      	ldr	r1, [r7, #0]
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 f8a5 	bl	800d78e <USBD_CtlError>
        break;
 800d644:	e01a      	b.n	800d67c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2201      	movs	r2, #1
 800d64a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d652:	2b00      	cmp	r3, #0
 800d654:	d005      	beq.n	800d662 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	f043 0202 	orr.w	r2, r3, #2
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	330c      	adds	r3, #12
 800d666:	2202      	movs	r2, #2
 800d668:	4619      	mov	r1, r3
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 f90c 	bl	800d888 <USBD_CtlSendData>
      break;
 800d670:	e004      	b.n	800d67c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d672:	6839      	ldr	r1, [r7, #0]
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 f88a 	bl	800d78e <USBD_CtlError>
      break;
 800d67a:	bf00      	nop
  }
}
 800d67c:	bf00      	nop
 800d67e:	3708      	adds	r7, #8
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b082      	sub	sp, #8
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	885b      	ldrh	r3, [r3, #2]
 800d692:	2b01      	cmp	r3, #1
 800d694:	d107      	bne.n	800d6a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2201      	movs	r2, #1
 800d69a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f000 f953 	bl	800d94a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d6a4:	e013      	b.n	800d6ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	885b      	ldrh	r3, [r3, #2]
 800d6aa:	2b02      	cmp	r3, #2
 800d6ac:	d10b      	bne.n	800d6c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	889b      	ldrh	r3, [r3, #4]
 800d6b2:	0a1b      	lsrs	r3, r3, #8
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	b2da      	uxtb	r2, r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 f943 	bl	800d94a <USBD_CtlSendStatus>
}
 800d6c4:	e003      	b.n	800d6ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d6c6:	6839      	ldr	r1, [r7, #0]
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f000 f860 	bl	800d78e <USBD_CtlError>
}
 800d6ce:	bf00      	nop
 800d6d0:	3708      	adds	r7, #8
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}

0800d6d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6d6:	b580      	push	{r7, lr}
 800d6d8:	b082      	sub	sp, #8
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	6078      	str	r0, [r7, #4]
 800d6de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	3b01      	subs	r3, #1
 800d6ea:	2b02      	cmp	r3, #2
 800d6ec:	d80b      	bhi.n	800d706 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	885b      	ldrh	r3, [r3, #2]
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d10c      	bne.n	800d710 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f000 f923 	bl	800d94a <USBD_CtlSendStatus>
      }
      break;
 800d704:	e004      	b.n	800d710 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d706:	6839      	ldr	r1, [r7, #0]
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f000 f840 	bl	800d78e <USBD_CtlError>
      break;
 800d70e:	e000      	b.n	800d712 <USBD_ClrFeature+0x3c>
      break;
 800d710:	bf00      	nop
  }
}
 800d712:	bf00      	nop
 800d714:	3708      	adds	r7, #8
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b084      	sub	sp, #16
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
 800d722:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	781a      	ldrb	r2, [r3, #0]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	3301      	adds	r3, #1
 800d734:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	781a      	ldrb	r2, [r3, #0]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	3301      	adds	r3, #1
 800d742:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d744:	68f8      	ldr	r0, [r7, #12]
 800d746:	f7ff fa3d 	bl	800cbc4 <SWAPBYTE>
 800d74a:	4603      	mov	r3, r0
 800d74c:	461a      	mov	r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	3301      	adds	r3, #1
 800d756:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	3301      	adds	r3, #1
 800d75c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d75e:	68f8      	ldr	r0, [r7, #12]
 800d760:	f7ff fa30 	bl	800cbc4 <SWAPBYTE>
 800d764:	4603      	mov	r3, r0
 800d766:	461a      	mov	r2, r3
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	3301      	adds	r3, #1
 800d770:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	3301      	adds	r3, #1
 800d776:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d778:	68f8      	ldr	r0, [r7, #12]
 800d77a:	f7ff fa23 	bl	800cbc4 <SWAPBYTE>
 800d77e:	4603      	mov	r3, r0
 800d780:	461a      	mov	r2, r3
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	80da      	strh	r2, [r3, #6]
}
 800d786:	bf00      	nop
 800d788:	3710      	adds	r7, #16
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d78e:	b580      	push	{r7, lr}
 800d790:	b082      	sub	sp, #8
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
 800d796:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d798:	2180      	movs	r1, #128	@ 0x80
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f00e fbd4 	bl	801bf48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f00e fbd0 	bl	801bf48 <USBD_LL_StallEP>
}
 800d7a8:	bf00      	nop
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d042      	beq.n	800d84c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d7ca:	6938      	ldr	r0, [r7, #16]
 800d7cc:	f000 f842 	bl	800d854 <USBD_GetLen>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	005b      	lsls	r3, r3, #1
 800d7d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d7da:	d808      	bhi.n	800d7ee <USBD_GetString+0x3e>
 800d7dc:	6938      	ldr	r0, [r7, #16]
 800d7de:	f000 f839 	bl	800d854 <USBD_GetLen>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	b29b      	uxth	r3, r3
 800d7e8:	005b      	lsls	r3, r3, #1
 800d7ea:	b29a      	uxth	r2, r3
 800d7ec:	e001      	b.n	800d7f2 <USBD_GetString+0x42>
 800d7ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d7f6:	7dfb      	ldrb	r3, [r7, #23]
 800d7f8:	68ba      	ldr	r2, [r7, #8]
 800d7fa:	4413      	add	r3, r2
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	7812      	ldrb	r2, [r2, #0]
 800d800:	701a      	strb	r2, [r3, #0]
  idx++;
 800d802:	7dfb      	ldrb	r3, [r7, #23]
 800d804:	3301      	adds	r3, #1
 800d806:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d808:	7dfb      	ldrb	r3, [r7, #23]
 800d80a:	68ba      	ldr	r2, [r7, #8]
 800d80c:	4413      	add	r3, r2
 800d80e:	2203      	movs	r2, #3
 800d810:	701a      	strb	r2, [r3, #0]
  idx++;
 800d812:	7dfb      	ldrb	r3, [r7, #23]
 800d814:	3301      	adds	r3, #1
 800d816:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d818:	e013      	b.n	800d842 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d81a:	7dfb      	ldrb	r3, [r7, #23]
 800d81c:	68ba      	ldr	r2, [r7, #8]
 800d81e:	4413      	add	r3, r2
 800d820:	693a      	ldr	r2, [r7, #16]
 800d822:	7812      	ldrb	r2, [r2, #0]
 800d824:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	3301      	adds	r3, #1
 800d82a:	613b      	str	r3, [r7, #16]
    idx++;
 800d82c:	7dfb      	ldrb	r3, [r7, #23]
 800d82e:	3301      	adds	r3, #1
 800d830:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d832:	7dfb      	ldrb	r3, [r7, #23]
 800d834:	68ba      	ldr	r2, [r7, #8]
 800d836:	4413      	add	r3, r2
 800d838:	2200      	movs	r2, #0
 800d83a:	701a      	strb	r2, [r3, #0]
    idx++;
 800d83c:	7dfb      	ldrb	r3, [r7, #23]
 800d83e:	3301      	adds	r3, #1
 800d840:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d1e7      	bne.n	800d81a <USBD_GetString+0x6a>
 800d84a:	e000      	b.n	800d84e <USBD_GetString+0x9e>
    return;
 800d84c:	bf00      	nop
  }
}
 800d84e:	3718      	adds	r7, #24
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d854:	b480      	push	{r7}
 800d856:	b085      	sub	sp, #20
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d85c:	2300      	movs	r3, #0
 800d85e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d864:	e005      	b.n	800d872 <USBD_GetLen+0x1e>
  {
    len++;
 800d866:	7bfb      	ldrb	r3, [r7, #15]
 800d868:	3301      	adds	r3, #1
 800d86a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	3301      	adds	r3, #1
 800d870:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d1f5      	bne.n	800d866 <USBD_GetLen+0x12>
  }

  return len;
 800d87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3714      	adds	r7, #20
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr

0800d888 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b084      	sub	sp, #16
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	60b9      	str	r1, [r7, #8]
 800d892:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2202      	movs	r2, #2
 800d898:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	68ba      	ldr	r2, [r7, #8]
 800d8a6:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	68ba      	ldr	r2, [r7, #8]
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	68f8      	ldr	r0, [r7, #12]
 800d8b6:	f00e fbd0 	bl	801c05a <USBD_LL_Transmit>

  return USBD_OK;
 800d8ba:	2300      	movs	r3, #0
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3710      	adds	r7, #16
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	60f8      	str	r0, [r7, #12]
 800d8cc:	60b9      	str	r1, [r7, #8]
 800d8ce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	68ba      	ldr	r2, [r7, #8]
 800d8d4:	2100      	movs	r1, #0
 800d8d6:	68f8      	ldr	r0, [r7, #12]
 800d8d8:	f00e fbbf 	bl	801c05a <USBD_LL_Transmit>

  return USBD_OK;
 800d8dc:	2300      	movs	r3, #0
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3710      	adds	r7, #16
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}

0800d8e6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d8e6:	b580      	push	{r7, lr}
 800d8e8:	b084      	sub	sp, #16
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	60f8      	str	r0, [r7, #12]
 800d8ee:	60b9      	str	r1, [r7, #8]
 800d8f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	2203      	movs	r2, #3
 800d8f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	687a      	ldr	r2, [r7, #4]
 800d8fe:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	68ba      	ldr	r2, [r7, #8]
 800d906:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	687a      	ldr	r2, [r7, #4]
 800d90e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	68ba      	ldr	r2, [r7, #8]
 800d916:	2100      	movs	r1, #0
 800d918:	68f8      	ldr	r0, [r7, #12]
 800d91a:	f00e fbbf 	bl	801c09c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d91e:	2300      	movs	r3, #0
}
 800d920:	4618      	mov	r0, r3
 800d922:	3710      	adds	r7, #16
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	60f8      	str	r0, [r7, #12]
 800d930:	60b9      	str	r1, [r7, #8]
 800d932:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	68ba      	ldr	r2, [r7, #8]
 800d938:	2100      	movs	r1, #0
 800d93a:	68f8      	ldr	r0, [r7, #12]
 800d93c:	f00e fbae 	bl	801c09c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d940:	2300      	movs	r3, #0
}
 800d942:	4618      	mov	r0, r3
 800d944:	3710      	adds	r7, #16
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}

0800d94a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d94a:	b580      	push	{r7, lr}
 800d94c:	b082      	sub	sp, #8
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2204      	movs	r2, #4
 800d956:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d95a:	2300      	movs	r3, #0
 800d95c:	2200      	movs	r2, #0
 800d95e:	2100      	movs	r1, #0
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f00e fb7a 	bl	801c05a <USBD_LL_Transmit>

  return USBD_OK;
 800d966:	2300      	movs	r3, #0
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3708      	adds	r7, #8
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}

0800d970 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2205      	movs	r2, #5
 800d97c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d980:	2300      	movs	r3, #0
 800d982:	2200      	movs	r2, #0
 800d984:	2100      	movs	r1, #0
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f00e fb88 	bl	801c09c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d98c:	2300      	movs	r3, #0
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3708      	adds	r7, #8
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}

0800d996 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d996:	b480      	push	{r7}
 800d998:	b085      	sub	sp, #20
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	4603      	mov	r3, r0
 800d99e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d9a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d9a8:	2b84      	cmp	r3, #132	@ 0x84
 800d9aa:	d005      	beq.n	800d9b8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d9ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	4413      	add	r3, r2
 800d9b4:	3303      	adds	r3, #3
 800d9b6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3714      	adds	r7, #20
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr

0800d9c6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d9c6:	b480      	push	{r7}
 800d9c8:	b083      	sub	sp, #12
 800d9ca:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9cc:	f3ef 8305 	mrs	r3, IPSR
 800d9d0:	607b      	str	r3, [r7, #4]
  return(result);
 800d9d2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	bf14      	ite	ne
 800d9d8:	2301      	movne	r3, #1
 800d9da:	2300      	moveq	r3, #0
 800d9dc:	b2db      	uxtb	r3, r3
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	370c      	adds	r7, #12
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr

0800d9ea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d9ea:	b580      	push	{r7, lr}
 800d9ec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d9ee:	f001 fc95 	bl	800f31c <vTaskStartScheduler>
  
  return osOK;
 800d9f2:	2300      	movs	r3, #0
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800d9fc:	f7ff ffe3 	bl	800d9c6 <inHandlerMode>
 800da00:	4603      	mov	r3, r0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d003      	beq.n	800da0e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800da06:	f001 fdaf 	bl	800f568 <xTaskGetTickCountFromISR>
 800da0a:	4603      	mov	r3, r0
 800da0c:	e002      	b.n	800da14 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800da0e:	f001 fd9b 	bl	800f548 <xTaskGetTickCount>
 800da12:	4603      	mov	r3, r0
  }
}
 800da14:	4618      	mov	r0, r3
 800da16:	bd80      	pop	{r7, pc}

0800da18 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800da18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da1a:	b089      	sub	sp, #36	@ 0x24
 800da1c:	af04      	add	r7, sp, #16
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	695b      	ldr	r3, [r3, #20]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d020      	beq.n	800da6c <osThreadCreate+0x54>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	699b      	ldr	r3, [r3, #24]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d01c      	beq.n	800da6c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	685c      	ldr	r4, [r3, #4]
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	691e      	ldr	r6, [r3, #16]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800da44:	4618      	mov	r0, r3
 800da46:	f7ff ffa6 	bl	800d996 <makeFreeRtosPriority>
 800da4a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	695b      	ldr	r3, [r3, #20]
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800da54:	9202      	str	r2, [sp, #8]
 800da56:	9301      	str	r3, [sp, #4]
 800da58:	9100      	str	r1, [sp, #0]
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	4632      	mov	r2, r6
 800da5e:	4629      	mov	r1, r5
 800da60:	4620      	mov	r0, r4
 800da62:	f001 fa75 	bl	800ef50 <xTaskCreateStatic>
 800da66:	4603      	mov	r3, r0
 800da68:	60fb      	str	r3, [r7, #12]
 800da6a:	e01c      	b.n	800daa6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	685c      	ldr	r4, [r3, #4]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800da78:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800da80:	4618      	mov	r0, r3
 800da82:	f7ff ff88 	bl	800d996 <makeFreeRtosPriority>
 800da86:	4602      	mov	r2, r0
 800da88:	f107 030c 	add.w	r3, r7, #12
 800da8c:	9301      	str	r3, [sp, #4]
 800da8e:	9200      	str	r2, [sp, #0]
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	4632      	mov	r2, r6
 800da94:	4629      	mov	r1, r5
 800da96:	4620      	mov	r0, r4
 800da98:	f001 faba 	bl	800f010 <xTaskCreate>
 800da9c:	4603      	mov	r3, r0
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d001      	beq.n	800daa6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800daa2:	2300      	movs	r3, #0
 800daa4:	e000      	b.n	800daa8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800daa6:	68fb      	ldr	r3, [r7, #12]
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3714      	adds	r7, #20
 800daac:	46bd      	mov	sp, r7
 800daae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dab0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d001      	beq.n	800dac6 <osDelay+0x16>
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	e000      	b.n	800dac8 <osDelay+0x18>
 800dac6:	2301      	movs	r3, #1
 800dac8:	4618      	mov	r0, r3
 800daca:	f001 fbf1 	bl	800f2b0 <vTaskDelay>
  
  return osOK;
 800dace:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3710      	adds	r7, #16
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	685b      	ldr	r3, [r3, #4]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d007      	beq.n	800daf8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	4619      	mov	r1, r3
 800daee:	2001      	movs	r0, #1
 800daf0:	f000 fc47 	bl	800e382 <xQueueCreateMutexStatic>
 800daf4:	4603      	mov	r3, r0
 800daf6:	e003      	b.n	800db00 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800daf8:	2001      	movs	r0, #1
 800dafa:	f000 fc2a 	bl	800e352 <xQueueCreateMutex>
 800dafe:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800db00:	4618      	mov	r0, r3
 800db02:	3708      	adds	r7, #8
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800db12:	2300      	movs	r3, #0
 800db14:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d101      	bne.n	800db20 <osMutexWait+0x18>
    return osErrorParameter;
 800db1c:	2380      	movs	r3, #128	@ 0x80
 800db1e:	e03a      	b.n	800db96 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800db20:	2300      	movs	r3, #0
 800db22:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db2a:	d103      	bne.n	800db34 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800db2c:	f04f 33ff 	mov.w	r3, #4294967295
 800db30:	60fb      	str	r3, [r7, #12]
 800db32:	e009      	b.n	800db48 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d006      	beq.n	800db48 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d101      	bne.n	800db48 <osMutexWait+0x40>
      ticks = 1;
 800db44:	2301      	movs	r3, #1
 800db46:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800db48:	f7ff ff3d 	bl	800d9c6 <inHandlerMode>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d017      	beq.n	800db82 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800db52:	f107 0308 	add.w	r3, r7, #8
 800db56:	461a      	mov	r2, r3
 800db58:	2100      	movs	r1, #0
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f001 f84e 	bl	800ebfc <xQueueReceiveFromISR>
 800db60:	4603      	mov	r3, r0
 800db62:	2b01      	cmp	r3, #1
 800db64:	d001      	beq.n	800db6a <osMutexWait+0x62>
      return osErrorOS;
 800db66:	23ff      	movs	r3, #255	@ 0xff
 800db68:	e015      	b.n	800db96 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d011      	beq.n	800db94 <osMutexWait+0x8c>
 800db70:	4b0b      	ldr	r3, [pc, #44]	@ (800dba0 <osMutexWait+0x98>)
 800db72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db76:	601a      	str	r2, [r3, #0]
 800db78:	f3bf 8f4f 	dsb	sy
 800db7c:	f3bf 8f6f 	isb	sy
 800db80:	e008      	b.n	800db94 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800db82:	68f9      	ldr	r1, [r7, #12]
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 ff29 	bl	800e9dc <xQueueSemaphoreTake>
 800db8a:	4603      	mov	r3, r0
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	d001      	beq.n	800db94 <osMutexWait+0x8c>
    return osErrorOS;
 800db90:	23ff      	movs	r3, #255	@ 0xff
 800db92:	e000      	b.n	800db96 <osMutexWait+0x8e>
  }
  
  return osOK;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3710      	adds	r7, #16
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	e000ed04 	.word	0xe000ed04

0800dba4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800dbac:	2300      	movs	r3, #0
 800dbae:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800dbb4:	f7ff ff07 	bl	800d9c6 <inHandlerMode>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d016      	beq.n	800dbec <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800dbbe:	f107 0308 	add.w	r3, r7, #8
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f000 fd97 	bl	800e6f8 <xQueueGiveFromISR>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d001      	beq.n	800dbd4 <osMutexRelease+0x30>
      return osErrorOS;
 800dbd0:	23ff      	movs	r3, #255	@ 0xff
 800dbd2:	e017      	b.n	800dc04 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d013      	beq.n	800dc02 <osMutexRelease+0x5e>
 800dbda:	4b0c      	ldr	r3, [pc, #48]	@ (800dc0c <osMutexRelease+0x68>)
 800dbdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbe0:	601a      	str	r2, [r3, #0]
 800dbe2:	f3bf 8f4f 	dsb	sy
 800dbe6:	f3bf 8f6f 	isb	sy
 800dbea:	e00a      	b.n	800dc02 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800dbec:	2300      	movs	r3, #0
 800dbee:	2200      	movs	r2, #0
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 fbe0 	bl	800e3b8 <xQueueGenericSend>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b01      	cmp	r3, #1
 800dbfc:	d001      	beq.n	800dc02 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800dbfe:	23ff      	movs	r3, #255	@ 0xff
 800dc00:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800dc02:	68fb      	ldr	r3, [r7, #12]
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3710      	adds	r7, #16
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	e000ed04 	.word	0xe000ed04

0800dc10 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b086      	sub	sp, #24
 800dc14:	af02      	add	r7, sp, #8
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d00f      	beq.n	800dc42 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d10a      	bne.n	800dc3e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	685b      	ldr	r3, [r3, #4]
 800dc2c:	2203      	movs	r2, #3
 800dc2e:	9200      	str	r2, [sp, #0]
 800dc30:	2200      	movs	r2, #0
 800dc32:	2100      	movs	r1, #0
 800dc34:	2001      	movs	r0, #1
 800dc36:	f000 fa9b 	bl	800e170 <xQueueGenericCreateStatic>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	e016      	b.n	800dc6c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	e014      	b.n	800dc6c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	2b01      	cmp	r3, #1
 800dc46:	d110      	bne.n	800dc6a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800dc48:	2203      	movs	r2, #3
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	2001      	movs	r0, #1
 800dc4e:	f000 fb0c 	bl	800e26a <xQueueGenericCreate>
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d005      	beq.n	800dc66 <osSemaphoreCreate+0x56>
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	2100      	movs	r1, #0
 800dc60:	68f8      	ldr	r0, [r7, #12]
 800dc62:	f000 fba9 	bl	800e3b8 <xQueueGenericSend>
      return sema;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	e000      	b.n	800dc6c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800dc6a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3710      	adds	r7, #16
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800dc7e:	2300      	movs	r3, #0
 800dc80:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d101      	bne.n	800dc8c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800dc88:	2380      	movs	r3, #128	@ 0x80
 800dc8a:	e03a      	b.n	800dd02 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc96:	d103      	bne.n	800dca0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800dc98:	f04f 33ff 	mov.w	r3, #4294967295
 800dc9c:	60fb      	str	r3, [r7, #12]
 800dc9e:	e009      	b.n	800dcb4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d006      	beq.n	800dcb4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d101      	bne.n	800dcb4 <osSemaphoreWait+0x40>
      ticks = 1;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800dcb4:	f7ff fe87 	bl	800d9c6 <inHandlerMode>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d017      	beq.n	800dcee <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800dcbe:	f107 0308 	add.w	r3, r7, #8
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	2100      	movs	r1, #0
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f000 ff98 	bl	800ebfc <xQueueReceiveFromISR>
 800dccc:	4603      	mov	r3, r0
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d001      	beq.n	800dcd6 <osSemaphoreWait+0x62>
      return osErrorOS;
 800dcd2:	23ff      	movs	r3, #255	@ 0xff
 800dcd4:	e015      	b.n	800dd02 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d011      	beq.n	800dd00 <osSemaphoreWait+0x8c>
 800dcdc:	4b0b      	ldr	r3, [pc, #44]	@ (800dd0c <osSemaphoreWait+0x98>)
 800dcde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dce2:	601a      	str	r2, [r3, #0]
 800dce4:	f3bf 8f4f 	dsb	sy
 800dce8:	f3bf 8f6f 	isb	sy
 800dcec:	e008      	b.n	800dd00 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800dcee:	68f9      	ldr	r1, [r7, #12]
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f000 fe73 	bl	800e9dc <xQueueSemaphoreTake>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d001      	beq.n	800dd00 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800dcfc:	23ff      	movs	r3, #255	@ 0xff
 800dcfe:	e000      	b.n	800dd02 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800dd00:	2300      	movs	r3, #0
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3710      	adds	r7, #16
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}
 800dd0a:	bf00      	nop
 800dd0c:	e000ed04 	.word	0xe000ed04

0800dd10 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b084      	sub	sp, #16
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800dd20:	f7ff fe51 	bl	800d9c6 <inHandlerMode>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d016      	beq.n	800dd58 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800dd2a:	f107 0308 	add.w	r3, r7, #8
 800dd2e:	4619      	mov	r1, r3
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f000 fce1 	bl	800e6f8 <xQueueGiveFromISR>
 800dd36:	4603      	mov	r3, r0
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d001      	beq.n	800dd40 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800dd3c:	23ff      	movs	r3, #255	@ 0xff
 800dd3e:	e017      	b.n	800dd70 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d013      	beq.n	800dd6e <osSemaphoreRelease+0x5e>
 800dd46:	4b0c      	ldr	r3, [pc, #48]	@ (800dd78 <osSemaphoreRelease+0x68>)
 800dd48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd4c:	601a      	str	r2, [r3, #0]
 800dd4e:	f3bf 8f4f 	dsb	sy
 800dd52:	f3bf 8f6f 	isb	sy
 800dd56:	e00a      	b.n	800dd6e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800dd58:	2300      	movs	r3, #0
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	2100      	movs	r1, #0
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 fb2a 	bl	800e3b8 <xQueueGenericSend>
 800dd64:	4603      	mov	r3, r0
 800dd66:	2b01      	cmp	r3, #1
 800dd68:	d001      	beq.n	800dd6e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800dd6a:	23ff      	movs	r3, #255	@ 0xff
 800dd6c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3710      	adds	r7, #16
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	e000ed04 	.word	0xe000ed04

0800dd7c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800dd7c:	b590      	push	{r4, r7, lr}
 800dd7e:	b085      	sub	sp, #20
 800dd80:	af02      	add	r7, sp, #8
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	689b      	ldr	r3, [r3, #8]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d011      	beq.n	800ddb2 <osMessageCreate+0x36>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d00d      	beq.n	800ddb2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6818      	ldr	r0, [r3, #0]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6859      	ldr	r1, [r3, #4]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	689a      	ldr	r2, [r3, #8]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	68db      	ldr	r3, [r3, #12]
 800dda6:	2400      	movs	r4, #0
 800dda8:	9400      	str	r4, [sp, #0]
 800ddaa:	f000 f9e1 	bl	800e170 <xQueueGenericCreateStatic>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	e008      	b.n	800ddc4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6818      	ldr	r0, [r3, #0]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	4619      	mov	r1, r3
 800ddbe:	f000 fa54 	bl	800e26a <xQueueGenericCreate>
 800ddc2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	370c      	adds	r7, #12
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd90      	pop	{r4, r7, pc}

0800ddcc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b086      	sub	sp, #24
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	60f8      	str	r0, [r7, #12]
 800ddd4:	60b9      	str	r1, [r7, #8]
 800ddd6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d101      	bne.n	800ddea <osMessagePut+0x1e>
    ticks = 1;
 800dde6:	2301      	movs	r3, #1
 800dde8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ddea:	f7ff fdec 	bl	800d9c6 <inHandlerMode>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d018      	beq.n	800de26 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ddf4:	f107 0210 	add.w	r2, r7, #16
 800ddf8:	f107 0108 	add.w	r1, r7, #8
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	68f8      	ldr	r0, [r7, #12]
 800de00:	f000 fbdc 	bl	800e5bc <xQueueGenericSendFromISR>
 800de04:	4603      	mov	r3, r0
 800de06:	2b01      	cmp	r3, #1
 800de08:	d001      	beq.n	800de0e <osMessagePut+0x42>
      return osErrorOS;
 800de0a:	23ff      	movs	r3, #255	@ 0xff
 800de0c:	e018      	b.n	800de40 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d014      	beq.n	800de3e <osMessagePut+0x72>
 800de14:	4b0c      	ldr	r3, [pc, #48]	@ (800de48 <osMessagePut+0x7c>)
 800de16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de1a:	601a      	str	r2, [r3, #0]
 800de1c:	f3bf 8f4f 	dsb	sy
 800de20:	f3bf 8f6f 	isb	sy
 800de24:	e00b      	b.n	800de3e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800de26:	f107 0108 	add.w	r1, r7, #8
 800de2a:	2300      	movs	r3, #0
 800de2c:	697a      	ldr	r2, [r7, #20]
 800de2e:	68f8      	ldr	r0, [r7, #12]
 800de30:	f000 fac2 	bl	800e3b8 <xQueueGenericSend>
 800de34:	4603      	mov	r3, r0
 800de36:	2b01      	cmp	r3, #1
 800de38:	d001      	beq.n	800de3e <osMessagePut+0x72>
      return osErrorOS;
 800de3a:	23ff      	movs	r3, #255	@ 0xff
 800de3c:	e000      	b.n	800de40 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800de3e:	2300      	movs	r3, #0
}
 800de40:	4618      	mov	r0, r3
 800de42:	3718      	adds	r7, #24
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}
 800de48:	e000ed04 	.word	0xe000ed04

0800de4c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800de4c:	b590      	push	{r4, r7, lr}
 800de4e:	b08b      	sub	sp, #44	@ 0x2c
 800de50:	af00      	add	r7, sp, #0
 800de52:	60f8      	str	r0, [r7, #12]
 800de54:	60b9      	str	r1, [r7, #8]
 800de56:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800de5c:	2300      	movs	r3, #0
 800de5e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d10a      	bne.n	800de7c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800de66:	2380      	movs	r3, #128	@ 0x80
 800de68:	617b      	str	r3, [r7, #20]
    return event;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	461c      	mov	r4, r3
 800de6e:	f107 0314 	add.w	r3, r7, #20
 800de72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800de76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800de7a:	e054      	b.n	800df26 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800de7c:	2300      	movs	r3, #0
 800de7e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800de80:	2300      	movs	r3, #0
 800de82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de8a:	d103      	bne.n	800de94 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800de8c:	f04f 33ff 	mov.w	r3, #4294967295
 800de90:	627b      	str	r3, [r7, #36]	@ 0x24
 800de92:	e009      	b.n	800dea8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d006      	beq.n	800dea8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800de9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d101      	bne.n	800dea8 <osMessageGet+0x5c>
      ticks = 1;
 800dea4:	2301      	movs	r3, #1
 800dea6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800dea8:	f7ff fd8d 	bl	800d9c6 <inHandlerMode>
 800deac:	4603      	mov	r3, r0
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d01c      	beq.n	800deec <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800deb2:	f107 0220 	add.w	r2, r7, #32
 800deb6:	f107 0314 	add.w	r3, r7, #20
 800deba:	3304      	adds	r3, #4
 800debc:	4619      	mov	r1, r3
 800debe:	68b8      	ldr	r0, [r7, #8]
 800dec0:	f000 fe9c 	bl	800ebfc <xQueueReceiveFromISR>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b01      	cmp	r3, #1
 800dec8:	d102      	bne.n	800ded0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800deca:	2310      	movs	r3, #16
 800decc:	617b      	str	r3, [r7, #20]
 800dece:	e001      	b.n	800ded4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ded0:	2300      	movs	r3, #0
 800ded2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ded4:	6a3b      	ldr	r3, [r7, #32]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d01d      	beq.n	800df16 <osMessageGet+0xca>
 800deda:	4b15      	ldr	r3, [pc, #84]	@ (800df30 <osMessageGet+0xe4>)
 800dedc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dee0:	601a      	str	r2, [r3, #0]
 800dee2:	f3bf 8f4f 	dsb	sy
 800dee6:	f3bf 8f6f 	isb	sy
 800deea:	e014      	b.n	800df16 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800deec:	f107 0314 	add.w	r3, r7, #20
 800def0:	3304      	adds	r3, #4
 800def2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800def4:	4619      	mov	r1, r3
 800def6:	68b8      	ldr	r0, [r7, #8]
 800def8:	f000 fc8e 	bl	800e818 <xQueueReceive>
 800defc:	4603      	mov	r3, r0
 800defe:	2b01      	cmp	r3, #1
 800df00:	d102      	bne.n	800df08 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800df02:	2310      	movs	r3, #16
 800df04:	617b      	str	r3, [r7, #20]
 800df06:	e006      	b.n	800df16 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800df08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d101      	bne.n	800df12 <osMessageGet+0xc6>
 800df0e:	2300      	movs	r3, #0
 800df10:	e000      	b.n	800df14 <osMessageGet+0xc8>
 800df12:	2340      	movs	r3, #64	@ 0x40
 800df14:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	461c      	mov	r4, r3
 800df1a:	f107 0314 	add.w	r3, r7, #20
 800df1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800df22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800df26:	68f8      	ldr	r0, [r7, #12]
 800df28:	372c      	adds	r7, #44	@ 0x2c
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd90      	pop	{r4, r7, pc}
 800df2e:	bf00      	nop
 800df30:	e000ed04 	.word	0xe000ed04

0800df34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f103 0208 	add.w	r2, r3, #8
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f04f 32ff 	mov.w	r2, #4294967295
 800df4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f103 0208 	add.w	r2, r3, #8
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f103 0208 	add.w	r2, r3, #8
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2200      	movs	r2, #0
 800df66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800df68:	bf00      	nop
 800df6a:	370c      	adds	r7, #12
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr

0800df74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800df74:	b480      	push	{r7}
 800df76:	b083      	sub	sp, #12
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2200      	movs	r2, #0
 800df80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800df82:	bf00      	nop
 800df84:	370c      	adds	r7, #12
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr

0800df8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df8e:	b480      	push	{r7}
 800df90:	b085      	sub	sp, #20
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
 800df96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	68fa      	ldr	r2, [r7, #12]
 800dfa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	689a      	ldr	r2, [r3, #8]
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	689b      	ldr	r3, [r3, #8]
 800dfb0:	683a      	ldr	r2, [r7, #0]
 800dfb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	683a      	ldr	r2, [r7, #0]
 800dfb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	687a      	ldr	r2, [r7, #4]
 800dfbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	1c5a      	adds	r2, r3, #1
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	601a      	str	r2, [r3, #0]
}
 800dfca:	bf00      	nop
 800dfcc:	3714      	adds	r7, #20
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd4:	4770      	bx	lr

0800dfd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dfd6:	b480      	push	{r7}
 800dfd8:	b085      	sub	sp, #20
 800dfda:	af00      	add	r7, sp, #0
 800dfdc:	6078      	str	r0, [r7, #4]
 800dfde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfec:	d103      	bne.n	800dff6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	691b      	ldr	r3, [r3, #16]
 800dff2:	60fb      	str	r3, [r7, #12]
 800dff4:	e00c      	b.n	800e010 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	3308      	adds	r3, #8
 800dffa:	60fb      	str	r3, [r7, #12]
 800dffc:	e002      	b.n	800e004 <vListInsert+0x2e>
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	685b      	ldr	r3, [r3, #4]
 800e002:	60fb      	str	r3, [r7, #12]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	685b      	ldr	r3, [r3, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	68ba      	ldr	r2, [r7, #8]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d2f6      	bcs.n	800dffe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	685a      	ldr	r2, [r3, #4]
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	683a      	ldr	r2, [r7, #0]
 800e01e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	68fa      	ldr	r2, [r7, #12]
 800e024:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	683a      	ldr	r2, [r7, #0]
 800e02a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	1c5a      	adds	r2, r3, #1
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	601a      	str	r2, [r3, #0]
}
 800e03c:	bf00      	nop
 800e03e:	3714      	adds	r7, #20
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr

0800e048 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e048:	b480      	push	{r7}
 800e04a:	b085      	sub	sp, #20
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	691b      	ldr	r3, [r3, #16]
 800e054:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	687a      	ldr	r2, [r7, #4]
 800e05c:	6892      	ldr	r2, [r2, #8]
 800e05e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	689b      	ldr	r3, [r3, #8]
 800e064:	687a      	ldr	r2, [r7, #4]
 800e066:	6852      	ldr	r2, [r2, #4]
 800e068:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	429a      	cmp	r2, r3
 800e072:	d103      	bne.n	800e07c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	689a      	ldr	r2, [r3, #8]
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	1e5a      	subs	r2, r3, #1
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	681b      	ldr	r3, [r3, #0]
}
 800e090:	4618      	mov	r0, r3
 800e092:	3714      	adds	r7, #20
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr

0800e09c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b084      	sub	sp, #16
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d10b      	bne.n	800e0c8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0b4:	f383 8811 	msr	BASEPRI, r3
 800e0b8:	f3bf 8f6f 	isb	sy
 800e0bc:	f3bf 8f4f 	dsb	sy
 800e0c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e0c2:	bf00      	nop
 800e0c4:	bf00      	nop
 800e0c6:	e7fd      	b.n	800e0c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e0c8:	f002 f8be 	bl	8010248 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681a      	ldr	r2, [r3, #0]
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0d4:	68f9      	ldr	r1, [r7, #12]
 800e0d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e0d8:	fb01 f303 	mul.w	r3, r1, r3
 800e0dc:	441a      	add	r2, r3
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0f8:	3b01      	subs	r3, #1
 800e0fa:	68f9      	ldr	r1, [r7, #12]
 800e0fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e0fe:	fb01 f303 	mul.w	r3, r1, r3
 800e102:	441a      	add	r2, r3
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	22ff      	movs	r2, #255	@ 0xff
 800e10c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	22ff      	movs	r2, #255	@ 0xff
 800e114:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d114      	bne.n	800e148 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	691b      	ldr	r3, [r3, #16]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d01a      	beq.n	800e15c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	3310      	adds	r3, #16
 800e12a:	4618      	mov	r0, r3
 800e12c:	f001 fb72 	bl	800f814 <xTaskRemoveFromEventList>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	d012      	beq.n	800e15c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e136:	4b0d      	ldr	r3, [pc, #52]	@ (800e16c <xQueueGenericReset+0xd0>)
 800e138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e13c:	601a      	str	r2, [r3, #0]
 800e13e:	f3bf 8f4f 	dsb	sy
 800e142:	f3bf 8f6f 	isb	sy
 800e146:	e009      	b.n	800e15c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	3310      	adds	r3, #16
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7ff fef1 	bl	800df34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	3324      	adds	r3, #36	@ 0x24
 800e156:	4618      	mov	r0, r3
 800e158:	f7ff feec 	bl	800df34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e15c:	f002 f8a6 	bl	80102ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e160:	2301      	movs	r3, #1
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	e000ed04 	.word	0xe000ed04

0800e170 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e170:	b580      	push	{r7, lr}
 800e172:	b08e      	sub	sp, #56	@ 0x38
 800e174:	af02      	add	r7, sp, #8
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	607a      	str	r2, [r7, #4]
 800e17c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d10b      	bne.n	800e19c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e188:	f383 8811 	msr	BASEPRI, r3
 800e18c:	f3bf 8f6f 	isb	sy
 800e190:	f3bf 8f4f 	dsb	sy
 800e194:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e196:	bf00      	nop
 800e198:	bf00      	nop
 800e19a:	e7fd      	b.n	800e198 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d10b      	bne.n	800e1ba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1a6:	f383 8811 	msr	BASEPRI, r3
 800e1aa:	f3bf 8f6f 	isb	sy
 800e1ae:	f3bf 8f4f 	dsb	sy
 800e1b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e1b4:	bf00      	nop
 800e1b6:	bf00      	nop
 800e1b8:	e7fd      	b.n	800e1b6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d002      	beq.n	800e1c6 <xQueueGenericCreateStatic+0x56>
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d001      	beq.n	800e1ca <xQueueGenericCreateStatic+0x5a>
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	e000      	b.n	800e1cc <xQueueGenericCreateStatic+0x5c>
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d10b      	bne.n	800e1e8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1d4:	f383 8811 	msr	BASEPRI, r3
 800e1d8:	f3bf 8f6f 	isb	sy
 800e1dc:	f3bf 8f4f 	dsb	sy
 800e1e0:	623b      	str	r3, [r7, #32]
}
 800e1e2:	bf00      	nop
 800e1e4:	bf00      	nop
 800e1e6:	e7fd      	b.n	800e1e4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d102      	bne.n	800e1f4 <xQueueGenericCreateStatic+0x84>
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d101      	bne.n	800e1f8 <xQueueGenericCreateStatic+0x88>
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	e000      	b.n	800e1fa <xQueueGenericCreateStatic+0x8a>
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d10b      	bne.n	800e216 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e202:	f383 8811 	msr	BASEPRI, r3
 800e206:	f3bf 8f6f 	isb	sy
 800e20a:	f3bf 8f4f 	dsb	sy
 800e20e:	61fb      	str	r3, [r7, #28]
}
 800e210:	bf00      	nop
 800e212:	bf00      	nop
 800e214:	e7fd      	b.n	800e212 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e216:	2348      	movs	r3, #72	@ 0x48
 800e218:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	2b48      	cmp	r3, #72	@ 0x48
 800e21e:	d00b      	beq.n	800e238 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e224:	f383 8811 	msr	BASEPRI, r3
 800e228:	f3bf 8f6f 	isb	sy
 800e22c:	f3bf 8f4f 	dsb	sy
 800e230:	61bb      	str	r3, [r7, #24]
}
 800e232:	bf00      	nop
 800e234:	bf00      	nop
 800e236:	e7fd      	b.n	800e234 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e238:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e23e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e240:	2b00      	cmp	r3, #0
 800e242:	d00d      	beq.n	800e260 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e246:	2201      	movs	r2, #1
 800e248:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e24c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e252:	9300      	str	r3, [sp, #0]
 800e254:	4613      	mov	r3, r2
 800e256:	687a      	ldr	r2, [r7, #4]
 800e258:	68b9      	ldr	r1, [r7, #8]
 800e25a:	68f8      	ldr	r0, [r7, #12]
 800e25c:	f000 f840 	bl	800e2e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e262:	4618      	mov	r0, r3
 800e264:	3730      	adds	r7, #48	@ 0x30
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}

0800e26a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e26a:	b580      	push	{r7, lr}
 800e26c:	b08a      	sub	sp, #40	@ 0x28
 800e26e:	af02      	add	r7, sp, #8
 800e270:	60f8      	str	r0, [r7, #12]
 800e272:	60b9      	str	r1, [r7, #8]
 800e274:	4613      	mov	r3, r2
 800e276:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d10b      	bne.n	800e296 <xQueueGenericCreate+0x2c>
	__asm volatile
 800e27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e282:	f383 8811 	msr	BASEPRI, r3
 800e286:	f3bf 8f6f 	isb	sy
 800e28a:	f3bf 8f4f 	dsb	sy
 800e28e:	613b      	str	r3, [r7, #16]
}
 800e290:	bf00      	nop
 800e292:	bf00      	nop
 800e294:	e7fd      	b.n	800e292 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	68ba      	ldr	r2, [r7, #8]
 800e29a:	fb02 f303 	mul.w	r3, r2, r3
 800e29e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e2a0:	69fb      	ldr	r3, [r7, #28]
 800e2a2:	3348      	adds	r3, #72	@ 0x48
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f002 f8f1 	bl	801048c <pvPortMalloc>
 800e2aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e2ac:	69bb      	ldr	r3, [r7, #24]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d011      	beq.n	800e2d6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e2b2:	69bb      	ldr	r3, [r7, #24]
 800e2b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	3348      	adds	r3, #72	@ 0x48
 800e2ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e2bc:	69bb      	ldr	r3, [r7, #24]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e2c4:	79fa      	ldrb	r2, [r7, #7]
 800e2c6:	69bb      	ldr	r3, [r7, #24]
 800e2c8:	9300      	str	r3, [sp, #0]
 800e2ca:	4613      	mov	r3, r2
 800e2cc:	697a      	ldr	r2, [r7, #20]
 800e2ce:	68b9      	ldr	r1, [r7, #8]
 800e2d0:	68f8      	ldr	r0, [r7, #12]
 800e2d2:	f000 f805 	bl	800e2e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e2d6:	69bb      	ldr	r3, [r7, #24]
	}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3720      	adds	r7, #32
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}

0800e2e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	607a      	str	r2, [r7, #4]
 800e2ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d103      	bne.n	800e2fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e2f4:	69bb      	ldr	r3, [r7, #24]
 800e2f6:	69ba      	ldr	r2, [r7, #24]
 800e2f8:	601a      	str	r2, [r3, #0]
 800e2fa:	e002      	b.n	800e302 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e2fc:	69bb      	ldr	r3, [r7, #24]
 800e2fe:	687a      	ldr	r2, [r7, #4]
 800e300:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e302:	69bb      	ldr	r3, [r7, #24]
 800e304:	68fa      	ldr	r2, [r7, #12]
 800e306:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e308:	69bb      	ldr	r3, [r7, #24]
 800e30a:	68ba      	ldr	r2, [r7, #8]
 800e30c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e30e:	2101      	movs	r1, #1
 800e310:	69b8      	ldr	r0, [r7, #24]
 800e312:	f7ff fec3 	bl	800e09c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e316:	bf00      	nop
 800e318:	3710      	adds	r7, #16
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}

0800e31e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e31e:	b580      	push	{r7, lr}
 800e320:	b082      	sub	sp, #8
 800e322:	af00      	add	r7, sp, #0
 800e324:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d00e      	beq.n	800e34a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2200      	movs	r2, #0
 800e330:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2200      	movs	r2, #0
 800e336:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2200      	movs	r2, #0
 800e33c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e33e:	2300      	movs	r3, #0
 800e340:	2200      	movs	r2, #0
 800e342:	2100      	movs	r1, #0
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f000 f837 	bl	800e3b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e34a:	bf00      	nop
 800e34c:	3708      	adds	r7, #8
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}

0800e352 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e352:	b580      	push	{r7, lr}
 800e354:	b086      	sub	sp, #24
 800e356:	af00      	add	r7, sp, #0
 800e358:	4603      	mov	r3, r0
 800e35a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e35c:	2301      	movs	r3, #1
 800e35e:	617b      	str	r3, [r7, #20]
 800e360:	2300      	movs	r3, #0
 800e362:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e364:	79fb      	ldrb	r3, [r7, #7]
 800e366:	461a      	mov	r2, r3
 800e368:	6939      	ldr	r1, [r7, #16]
 800e36a:	6978      	ldr	r0, [r7, #20]
 800e36c:	f7ff ff7d 	bl	800e26a <xQueueGenericCreate>
 800e370:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e372:	68f8      	ldr	r0, [r7, #12]
 800e374:	f7ff ffd3 	bl	800e31e <prvInitialiseMutex>

		return xNewQueue;
 800e378:	68fb      	ldr	r3, [r7, #12]
	}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3718      	adds	r7, #24
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}

0800e382 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e382:	b580      	push	{r7, lr}
 800e384:	b088      	sub	sp, #32
 800e386:	af02      	add	r7, sp, #8
 800e388:	4603      	mov	r3, r0
 800e38a:	6039      	str	r1, [r7, #0]
 800e38c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e38e:	2301      	movs	r3, #1
 800e390:	617b      	str	r3, [r7, #20]
 800e392:	2300      	movs	r3, #0
 800e394:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e396:	79fb      	ldrb	r3, [r7, #7]
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	2200      	movs	r2, #0
 800e39e:	6939      	ldr	r1, [r7, #16]
 800e3a0:	6978      	ldr	r0, [r7, #20]
 800e3a2:	f7ff fee5 	bl	800e170 <xQueueGenericCreateStatic>
 800e3a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e3a8:	68f8      	ldr	r0, [r7, #12]
 800e3aa:	f7ff ffb8 	bl	800e31e <prvInitialiseMutex>

		return xNewQueue;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
	}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3718      	adds	r7, #24
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b08e      	sub	sp, #56	@ 0x38
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	607a      	str	r2, [r7, #4]
 800e3c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e3ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d10b      	bne.n	800e3ec <xQueueGenericSend+0x34>
	__asm volatile
 800e3d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3d8:	f383 8811 	msr	BASEPRI, r3
 800e3dc:	f3bf 8f6f 	isb	sy
 800e3e0:	f3bf 8f4f 	dsb	sy
 800e3e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e3e6:	bf00      	nop
 800e3e8:	bf00      	nop
 800e3ea:	e7fd      	b.n	800e3e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d103      	bne.n	800e3fa <xQueueGenericSend+0x42>
 800e3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d101      	bne.n	800e3fe <xQueueGenericSend+0x46>
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	e000      	b.n	800e400 <xQueueGenericSend+0x48>
 800e3fe:	2300      	movs	r3, #0
 800e400:	2b00      	cmp	r3, #0
 800e402:	d10b      	bne.n	800e41c <xQueueGenericSend+0x64>
	__asm volatile
 800e404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e408:	f383 8811 	msr	BASEPRI, r3
 800e40c:	f3bf 8f6f 	isb	sy
 800e410:	f3bf 8f4f 	dsb	sy
 800e414:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e416:	bf00      	nop
 800e418:	bf00      	nop
 800e41a:	e7fd      	b.n	800e418 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	2b02      	cmp	r3, #2
 800e420:	d103      	bne.n	800e42a <xQueueGenericSend+0x72>
 800e422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e426:	2b01      	cmp	r3, #1
 800e428:	d101      	bne.n	800e42e <xQueueGenericSend+0x76>
 800e42a:	2301      	movs	r3, #1
 800e42c:	e000      	b.n	800e430 <xQueueGenericSend+0x78>
 800e42e:	2300      	movs	r3, #0
 800e430:	2b00      	cmp	r3, #0
 800e432:	d10b      	bne.n	800e44c <xQueueGenericSend+0x94>
	__asm volatile
 800e434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e438:	f383 8811 	msr	BASEPRI, r3
 800e43c:	f3bf 8f6f 	isb	sy
 800e440:	f3bf 8f4f 	dsb	sy
 800e444:	623b      	str	r3, [r7, #32]
}
 800e446:	bf00      	nop
 800e448:	bf00      	nop
 800e44a:	e7fd      	b.n	800e448 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e44c:	f001 fba8 	bl	800fba0 <xTaskGetSchedulerState>
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d102      	bne.n	800e45c <xQueueGenericSend+0xa4>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d101      	bne.n	800e460 <xQueueGenericSend+0xa8>
 800e45c:	2301      	movs	r3, #1
 800e45e:	e000      	b.n	800e462 <xQueueGenericSend+0xaa>
 800e460:	2300      	movs	r3, #0
 800e462:	2b00      	cmp	r3, #0
 800e464:	d10b      	bne.n	800e47e <xQueueGenericSend+0xc6>
	__asm volatile
 800e466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e46a:	f383 8811 	msr	BASEPRI, r3
 800e46e:	f3bf 8f6f 	isb	sy
 800e472:	f3bf 8f4f 	dsb	sy
 800e476:	61fb      	str	r3, [r7, #28]
}
 800e478:	bf00      	nop
 800e47a:	bf00      	nop
 800e47c:	e7fd      	b.n	800e47a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e47e:	f001 fee3 	bl	8010248 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d302      	bcc.n	800e494 <xQueueGenericSend+0xdc>
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	2b02      	cmp	r3, #2
 800e492:	d129      	bne.n	800e4e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e494:	683a      	ldr	r2, [r7, #0]
 800e496:	68b9      	ldr	r1, [r7, #8]
 800e498:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e49a:	f000 fc49 	bl	800ed30 <prvCopyDataToQueue>
 800e49e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d010      	beq.n	800e4ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4aa:	3324      	adds	r3, #36	@ 0x24
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f001 f9b1 	bl	800f814 <xTaskRemoveFromEventList>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d013      	beq.n	800e4e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e4b8:	4b3f      	ldr	r3, [pc, #252]	@ (800e5b8 <xQueueGenericSend+0x200>)
 800e4ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4be:	601a      	str	r2, [r3, #0]
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	f3bf 8f6f 	isb	sy
 800e4c8:	e00a      	b.n	800e4e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e4ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d007      	beq.n	800e4e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e4d0:	4b39      	ldr	r3, [pc, #228]	@ (800e5b8 <xQueueGenericSend+0x200>)
 800e4d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4d6:	601a      	str	r2, [r3, #0]
 800e4d8:	f3bf 8f4f 	dsb	sy
 800e4dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e4e0:	f001 fee4 	bl	80102ac <vPortExitCritical>
				return pdPASS;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	e063      	b.n	800e5b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d103      	bne.n	800e4f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e4ee:	f001 fedd 	bl	80102ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	e05c      	b.n	800e5b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e4f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d106      	bne.n	800e50a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e4fc:	f107 0314 	add.w	r3, r7, #20
 800e500:	4618      	mov	r0, r3
 800e502:	f001 f9eb 	bl	800f8dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e506:	2301      	movs	r3, #1
 800e508:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e50a:	f001 fecf 	bl	80102ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e50e:	f000 ff6f 	bl	800f3f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e512:	f001 fe99 	bl	8010248 <vPortEnterCritical>
 800e516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e518:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e51c:	b25b      	sxtb	r3, r3
 800e51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e522:	d103      	bne.n	800e52c <xQueueGenericSend+0x174>
 800e524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e526:	2200      	movs	r2, #0
 800e528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e52e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e532:	b25b      	sxtb	r3, r3
 800e534:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e538:	d103      	bne.n	800e542 <xQueueGenericSend+0x18a>
 800e53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e53c:	2200      	movs	r2, #0
 800e53e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e542:	f001 feb3 	bl	80102ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e546:	1d3a      	adds	r2, r7, #4
 800e548:	f107 0314 	add.w	r3, r7, #20
 800e54c:	4611      	mov	r1, r2
 800e54e:	4618      	mov	r0, r3
 800e550:	f001 f9da 	bl	800f908 <xTaskCheckForTimeOut>
 800e554:	4603      	mov	r3, r0
 800e556:	2b00      	cmp	r3, #0
 800e558:	d124      	bne.n	800e5a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e55a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e55c:	f000 fce0 	bl	800ef20 <prvIsQueueFull>
 800e560:	4603      	mov	r3, r0
 800e562:	2b00      	cmp	r3, #0
 800e564:	d018      	beq.n	800e598 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e568:	3310      	adds	r3, #16
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	4611      	mov	r1, r2
 800e56e:	4618      	mov	r0, r3
 800e570:	f001 f92a 	bl	800f7c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e574:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e576:	f000 fc6b 	bl	800ee50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e57a:	f000 ff47 	bl	800f40c <xTaskResumeAll>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b00      	cmp	r3, #0
 800e582:	f47f af7c 	bne.w	800e47e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e586:	4b0c      	ldr	r3, [pc, #48]	@ (800e5b8 <xQueueGenericSend+0x200>)
 800e588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e58c:	601a      	str	r2, [r3, #0]
 800e58e:	f3bf 8f4f 	dsb	sy
 800e592:	f3bf 8f6f 	isb	sy
 800e596:	e772      	b.n	800e47e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e598:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e59a:	f000 fc59 	bl	800ee50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e59e:	f000 ff35 	bl	800f40c <xTaskResumeAll>
 800e5a2:	e76c      	b.n	800e47e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e5a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5a6:	f000 fc53 	bl	800ee50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5aa:	f000 ff2f 	bl	800f40c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e5ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3738      	adds	r7, #56	@ 0x38
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	e000ed04 	.word	0xe000ed04

0800e5bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b090      	sub	sp, #64	@ 0x40
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	60f8      	str	r0, [r7, #12]
 800e5c4:	60b9      	str	r1, [r7, #8]
 800e5c6:	607a      	str	r2, [r7, #4]
 800e5c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d10b      	bne.n	800e5ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5d8:	f383 8811 	msr	BASEPRI, r3
 800e5dc:	f3bf 8f6f 	isb	sy
 800e5e0:	f3bf 8f4f 	dsb	sy
 800e5e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e5e6:	bf00      	nop
 800e5e8:	bf00      	nop
 800e5ea:	e7fd      	b.n	800e5e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d103      	bne.n	800e5fa <xQueueGenericSendFromISR+0x3e>
 800e5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d101      	bne.n	800e5fe <xQueueGenericSendFromISR+0x42>
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e000      	b.n	800e600 <xQueueGenericSendFromISR+0x44>
 800e5fe:	2300      	movs	r3, #0
 800e600:	2b00      	cmp	r3, #0
 800e602:	d10b      	bne.n	800e61c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e608:	f383 8811 	msr	BASEPRI, r3
 800e60c:	f3bf 8f6f 	isb	sy
 800e610:	f3bf 8f4f 	dsb	sy
 800e614:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e616:	bf00      	nop
 800e618:	bf00      	nop
 800e61a:	e7fd      	b.n	800e618 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	2b02      	cmp	r3, #2
 800e620:	d103      	bne.n	800e62a <xQueueGenericSendFromISR+0x6e>
 800e622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e626:	2b01      	cmp	r3, #1
 800e628:	d101      	bne.n	800e62e <xQueueGenericSendFromISR+0x72>
 800e62a:	2301      	movs	r3, #1
 800e62c:	e000      	b.n	800e630 <xQueueGenericSendFromISR+0x74>
 800e62e:	2300      	movs	r3, #0
 800e630:	2b00      	cmp	r3, #0
 800e632:	d10b      	bne.n	800e64c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e638:	f383 8811 	msr	BASEPRI, r3
 800e63c:	f3bf 8f6f 	isb	sy
 800e640:	f3bf 8f4f 	dsb	sy
 800e644:	623b      	str	r3, [r7, #32]
}
 800e646:	bf00      	nop
 800e648:	bf00      	nop
 800e64a:	e7fd      	b.n	800e648 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e64c:	f001 fedc 	bl	8010408 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e650:	f3ef 8211 	mrs	r2, BASEPRI
 800e654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e658:	f383 8811 	msr	BASEPRI, r3
 800e65c:	f3bf 8f6f 	isb	sy
 800e660:	f3bf 8f4f 	dsb	sy
 800e664:	61fa      	str	r2, [r7, #28]
 800e666:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e668:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e66a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e66e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e674:	429a      	cmp	r2, r3
 800e676:	d302      	bcc.n	800e67e <xQueueGenericSendFromISR+0xc2>
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	2b02      	cmp	r3, #2
 800e67c:	d12f      	bne.n	800e6de <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e680:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e684:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e68a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e68c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e68e:	683a      	ldr	r2, [r7, #0]
 800e690:	68b9      	ldr	r1, [r7, #8]
 800e692:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e694:	f000 fb4c 	bl	800ed30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e698:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e69c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6a0:	d112      	bne.n	800e6c8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d016      	beq.n	800e6d8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ac:	3324      	adds	r3, #36	@ 0x24
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f001 f8b0 	bl	800f814 <xTaskRemoveFromEventList>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d00e      	beq.n	800e6d8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d00b      	beq.n	800e6d8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2201      	movs	r2, #1
 800e6c4:	601a      	str	r2, [r3, #0]
 800e6c6:	e007      	b.n	800e6d8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e6c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e6cc:	3301      	adds	r3, #1
 800e6ce:	b2db      	uxtb	r3, r3
 800e6d0:	b25a      	sxtb	r2, r3
 800e6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e6dc:	e001      	b.n	800e6e2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e6e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6e4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e6ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e6ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3740      	adds	r7, #64	@ 0x40
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b08e      	sub	sp, #56	@ 0x38
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d10b      	bne.n	800e724 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800e70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e710:	f383 8811 	msr	BASEPRI, r3
 800e714:	f3bf 8f6f 	isb	sy
 800e718:	f3bf 8f4f 	dsb	sy
 800e71c:	623b      	str	r3, [r7, #32]
}
 800e71e:	bf00      	nop
 800e720:	bf00      	nop
 800e722:	e7fd      	b.n	800e720 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d00b      	beq.n	800e744 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800e72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e730:	f383 8811 	msr	BASEPRI, r3
 800e734:	f3bf 8f6f 	isb	sy
 800e738:	f3bf 8f4f 	dsb	sy
 800e73c:	61fb      	str	r3, [r7, #28]
}
 800e73e:	bf00      	nop
 800e740:	bf00      	nop
 800e742:	e7fd      	b.n	800e740 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d103      	bne.n	800e754 <xQueueGiveFromISR+0x5c>
 800e74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e74e:	689b      	ldr	r3, [r3, #8]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d101      	bne.n	800e758 <xQueueGiveFromISR+0x60>
 800e754:	2301      	movs	r3, #1
 800e756:	e000      	b.n	800e75a <xQueueGiveFromISR+0x62>
 800e758:	2300      	movs	r3, #0
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d10b      	bne.n	800e776 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800e75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e762:	f383 8811 	msr	BASEPRI, r3
 800e766:	f3bf 8f6f 	isb	sy
 800e76a:	f3bf 8f4f 	dsb	sy
 800e76e:	61bb      	str	r3, [r7, #24]
}
 800e770:	bf00      	nop
 800e772:	bf00      	nop
 800e774:	e7fd      	b.n	800e772 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e776:	f001 fe47 	bl	8010408 <vPortValidateInterruptPriority>
	__asm volatile
 800e77a:	f3ef 8211 	mrs	r2, BASEPRI
 800e77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e782:	f383 8811 	msr	BASEPRI, r3
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	617a      	str	r2, [r7, #20]
 800e790:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e792:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e794:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e79a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e79c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e79e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d22b      	bcs.n	800e7fe <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e7ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7b2:	1c5a      	adds	r2, r3, #1
 800e7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7b6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e7b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e7bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7c0:	d112      	bne.n	800e7e8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d016      	beq.n	800e7f8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7cc:	3324      	adds	r3, #36	@ 0x24
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f001 f820 	bl	800f814 <xTaskRemoveFromEventList>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d00e      	beq.n	800e7f8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d00b      	beq.n	800e7f8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	601a      	str	r2, [r3, #0]
 800e7e6:	e007      	b.n	800e7f8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e7e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	b25a      	sxtb	r2, r3
 800e7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800e7fc:	e001      	b.n	800e802 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e7fe:	2300      	movs	r3, #0
 800e800:	637b      	str	r3, [r7, #52]	@ 0x34
 800e802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e804:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f383 8811 	msr	BASEPRI, r3
}
 800e80c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e80e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e810:	4618      	mov	r0, r3
 800e812:	3738      	adds	r7, #56	@ 0x38
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b08c      	sub	sp, #48	@ 0x30
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	60f8      	str	r0, [r7, #12]
 800e820:	60b9      	str	r1, [r7, #8]
 800e822:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e824:	2300      	movs	r3, #0
 800e826:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d10b      	bne.n	800e84a <xQueueReceive+0x32>
	__asm volatile
 800e832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e836:	f383 8811 	msr	BASEPRI, r3
 800e83a:	f3bf 8f6f 	isb	sy
 800e83e:	f3bf 8f4f 	dsb	sy
 800e842:	623b      	str	r3, [r7, #32]
}
 800e844:	bf00      	nop
 800e846:	bf00      	nop
 800e848:	e7fd      	b.n	800e846 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d103      	bne.n	800e858 <xQueueReceive+0x40>
 800e850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e854:	2b00      	cmp	r3, #0
 800e856:	d101      	bne.n	800e85c <xQueueReceive+0x44>
 800e858:	2301      	movs	r3, #1
 800e85a:	e000      	b.n	800e85e <xQueueReceive+0x46>
 800e85c:	2300      	movs	r3, #0
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d10b      	bne.n	800e87a <xQueueReceive+0x62>
	__asm volatile
 800e862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e866:	f383 8811 	msr	BASEPRI, r3
 800e86a:	f3bf 8f6f 	isb	sy
 800e86e:	f3bf 8f4f 	dsb	sy
 800e872:	61fb      	str	r3, [r7, #28]
}
 800e874:	bf00      	nop
 800e876:	bf00      	nop
 800e878:	e7fd      	b.n	800e876 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e87a:	f001 f991 	bl	800fba0 <xTaskGetSchedulerState>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b00      	cmp	r3, #0
 800e882:	d102      	bne.n	800e88a <xQueueReceive+0x72>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d101      	bne.n	800e88e <xQueueReceive+0x76>
 800e88a:	2301      	movs	r3, #1
 800e88c:	e000      	b.n	800e890 <xQueueReceive+0x78>
 800e88e:	2300      	movs	r3, #0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d10b      	bne.n	800e8ac <xQueueReceive+0x94>
	__asm volatile
 800e894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e898:	f383 8811 	msr	BASEPRI, r3
 800e89c:	f3bf 8f6f 	isb	sy
 800e8a0:	f3bf 8f4f 	dsb	sy
 800e8a4:	61bb      	str	r3, [r7, #24]
}
 800e8a6:	bf00      	nop
 800e8a8:	bf00      	nop
 800e8aa:	e7fd      	b.n	800e8a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e8ac:	f001 fccc 	bl	8010248 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d01f      	beq.n	800e8fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e8bc:	68b9      	ldr	r1, [r7, #8]
 800e8be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e8c0:	f000 faa0 	bl	800ee04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8c6:	1e5a      	subs	r2, r3, #1
 800e8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8ce:	691b      	ldr	r3, [r3, #16]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d00f      	beq.n	800e8f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8d6:	3310      	adds	r3, #16
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f000 ff9b 	bl	800f814 <xTaskRemoveFromEventList>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d007      	beq.n	800e8f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e8e4:	4b3c      	ldr	r3, [pc, #240]	@ (800e9d8 <xQueueReceive+0x1c0>)
 800e8e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8ea:	601a      	str	r2, [r3, #0]
 800e8ec:	f3bf 8f4f 	dsb	sy
 800e8f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e8f4:	f001 fcda 	bl	80102ac <vPortExitCritical>
				return pdPASS;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	e069      	b.n	800e9d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d103      	bne.n	800e90a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e902:	f001 fcd3 	bl	80102ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e906:	2300      	movs	r3, #0
 800e908:	e062      	b.n	800e9d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d106      	bne.n	800e91e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e910:	f107 0310 	add.w	r3, r7, #16
 800e914:	4618      	mov	r0, r3
 800e916:	f000 ffe1 	bl	800f8dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e91a:	2301      	movs	r3, #1
 800e91c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e91e:	f001 fcc5 	bl	80102ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e922:	f000 fd65 	bl	800f3f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e926:	f001 fc8f 	bl	8010248 <vPortEnterCritical>
 800e92a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e92c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e930:	b25b      	sxtb	r3, r3
 800e932:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e936:	d103      	bne.n	800e940 <xQueueReceive+0x128>
 800e938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e93a:	2200      	movs	r2, #0
 800e93c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e942:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e946:	b25b      	sxtb	r3, r3
 800e948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e94c:	d103      	bne.n	800e956 <xQueueReceive+0x13e>
 800e94e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e950:	2200      	movs	r2, #0
 800e952:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e956:	f001 fca9 	bl	80102ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e95a:	1d3a      	adds	r2, r7, #4
 800e95c:	f107 0310 	add.w	r3, r7, #16
 800e960:	4611      	mov	r1, r2
 800e962:	4618      	mov	r0, r3
 800e964:	f000 ffd0 	bl	800f908 <xTaskCheckForTimeOut>
 800e968:	4603      	mov	r3, r0
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d123      	bne.n	800e9b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e96e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e970:	f000 fac0 	bl	800eef4 <prvIsQueueEmpty>
 800e974:	4603      	mov	r3, r0
 800e976:	2b00      	cmp	r3, #0
 800e978:	d017      	beq.n	800e9aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e97c:	3324      	adds	r3, #36	@ 0x24
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	4611      	mov	r1, r2
 800e982:	4618      	mov	r0, r3
 800e984:	f000 ff20 	bl	800f7c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e988:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e98a:	f000 fa61 	bl	800ee50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e98e:	f000 fd3d 	bl	800f40c <xTaskResumeAll>
 800e992:	4603      	mov	r3, r0
 800e994:	2b00      	cmp	r3, #0
 800e996:	d189      	bne.n	800e8ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e998:	4b0f      	ldr	r3, [pc, #60]	@ (800e9d8 <xQueueReceive+0x1c0>)
 800e99a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e99e:	601a      	str	r2, [r3, #0]
 800e9a0:	f3bf 8f4f 	dsb	sy
 800e9a4:	f3bf 8f6f 	isb	sy
 800e9a8:	e780      	b.n	800e8ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e9aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9ac:	f000 fa50 	bl	800ee50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e9b0:	f000 fd2c 	bl	800f40c <xTaskResumeAll>
 800e9b4:	e77a      	b.n	800e8ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e9b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9b8:	f000 fa4a 	bl	800ee50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e9bc:	f000 fd26 	bl	800f40c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9c2:	f000 fa97 	bl	800eef4 <prvIsQueueEmpty>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	f43f af6f 	beq.w	800e8ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e9ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3730      	adds	r7, #48	@ 0x30
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	e000ed04 	.word	0xe000ed04

0800e9dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b08e      	sub	sp, #56	@ 0x38
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e9f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d10b      	bne.n	800ea10 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800e9f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9fc:	f383 8811 	msr	BASEPRI, r3
 800ea00:	f3bf 8f6f 	isb	sy
 800ea04:	f3bf 8f4f 	dsb	sy
 800ea08:	623b      	str	r3, [r7, #32]
}
 800ea0a:	bf00      	nop
 800ea0c:	bf00      	nop
 800ea0e:	e7fd      	b.n	800ea0c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ea10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d00b      	beq.n	800ea30 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800ea18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea1c:	f383 8811 	msr	BASEPRI, r3
 800ea20:	f3bf 8f6f 	isb	sy
 800ea24:	f3bf 8f4f 	dsb	sy
 800ea28:	61fb      	str	r3, [r7, #28]
}
 800ea2a:	bf00      	nop
 800ea2c:	bf00      	nop
 800ea2e:	e7fd      	b.n	800ea2c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea30:	f001 f8b6 	bl	800fba0 <xTaskGetSchedulerState>
 800ea34:	4603      	mov	r3, r0
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d102      	bne.n	800ea40 <xQueueSemaphoreTake+0x64>
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d101      	bne.n	800ea44 <xQueueSemaphoreTake+0x68>
 800ea40:	2301      	movs	r3, #1
 800ea42:	e000      	b.n	800ea46 <xQueueSemaphoreTake+0x6a>
 800ea44:	2300      	movs	r3, #0
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d10b      	bne.n	800ea62 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800ea4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea4e:	f383 8811 	msr	BASEPRI, r3
 800ea52:	f3bf 8f6f 	isb	sy
 800ea56:	f3bf 8f4f 	dsb	sy
 800ea5a:	61bb      	str	r3, [r7, #24]
}
 800ea5c:	bf00      	nop
 800ea5e:	bf00      	nop
 800ea60:	e7fd      	b.n	800ea5e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ea62:	f001 fbf1 	bl	8010248 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ea66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea6a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ea6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d024      	beq.n	800eabc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ea72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea74:	1e5a      	subs	r2, r3, #1
 800ea76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea78:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ea7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d104      	bne.n	800ea8c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ea82:	f001 fa39 	bl	800fef8 <pvTaskIncrementMutexHeldCount>
 800ea86:	4602      	mov	r2, r0
 800ea88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea8a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea8e:	691b      	ldr	r3, [r3, #16]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d00f      	beq.n	800eab4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea96:	3310      	adds	r3, #16
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f000 febb 	bl	800f814 <xTaskRemoveFromEventList>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d007      	beq.n	800eab4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eaa4:	4b54      	ldr	r3, [pc, #336]	@ (800ebf8 <xQueueSemaphoreTake+0x21c>)
 800eaa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eaaa:	601a      	str	r2, [r3, #0]
 800eaac:	f3bf 8f4f 	dsb	sy
 800eab0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eab4:	f001 fbfa 	bl	80102ac <vPortExitCritical>
				return pdPASS;
 800eab8:	2301      	movs	r3, #1
 800eaba:	e098      	b.n	800ebee <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d112      	bne.n	800eae8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800eac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d00b      	beq.n	800eae0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800eac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eacc:	f383 8811 	msr	BASEPRI, r3
 800ead0:	f3bf 8f6f 	isb	sy
 800ead4:	f3bf 8f4f 	dsb	sy
 800ead8:	617b      	str	r3, [r7, #20]
}
 800eada:	bf00      	nop
 800eadc:	bf00      	nop
 800eade:	e7fd      	b.n	800eadc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800eae0:	f001 fbe4 	bl	80102ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eae4:	2300      	movs	r3, #0
 800eae6:	e082      	b.n	800ebee <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d106      	bne.n	800eafc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eaee:	f107 030c 	add.w	r3, r7, #12
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f000 fef2 	bl	800f8dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eaf8:	2301      	movs	r3, #1
 800eafa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eafc:	f001 fbd6 	bl	80102ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb00:	f000 fc76 	bl	800f3f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb04:	f001 fba0 	bl	8010248 <vPortEnterCritical>
 800eb08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb0a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eb0e:	b25b      	sxtb	r3, r3
 800eb10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb14:	d103      	bne.n	800eb1e <xQueueSemaphoreTake+0x142>
 800eb16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eb1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eb24:	b25b      	sxtb	r3, r3
 800eb26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb2a:	d103      	bne.n	800eb34 <xQueueSemaphoreTake+0x158>
 800eb2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb2e:	2200      	movs	r2, #0
 800eb30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eb34:	f001 fbba 	bl	80102ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb38:	463a      	mov	r2, r7
 800eb3a:	f107 030c 	add.w	r3, r7, #12
 800eb3e:	4611      	mov	r1, r2
 800eb40:	4618      	mov	r0, r3
 800eb42:	f000 fee1 	bl	800f908 <xTaskCheckForTimeOut>
 800eb46:	4603      	mov	r3, r0
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d132      	bne.n	800ebb2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eb4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb4e:	f000 f9d1 	bl	800eef4 <prvIsQueueEmpty>
 800eb52:	4603      	mov	r3, r0
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d026      	beq.n	800eba6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d109      	bne.n	800eb74 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800eb60:	f001 fb72 	bl	8010248 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eb64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb66:	689b      	ldr	r3, [r3, #8]
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f001 f837 	bl	800fbdc <xTaskPriorityInherit>
 800eb6e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800eb70:	f001 fb9c 	bl	80102ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eb74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb76:	3324      	adds	r3, #36	@ 0x24
 800eb78:	683a      	ldr	r2, [r7, #0]
 800eb7a:	4611      	mov	r1, r2
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f000 fe23 	bl	800f7c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eb82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb84:	f000 f964 	bl	800ee50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eb88:	f000 fc40 	bl	800f40c <xTaskResumeAll>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	f47f af67 	bne.w	800ea62 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800eb94:	4b18      	ldr	r3, [pc, #96]	@ (800ebf8 <xQueueSemaphoreTake+0x21c>)
 800eb96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb9a:	601a      	str	r2, [r3, #0]
 800eb9c:	f3bf 8f4f 	dsb	sy
 800eba0:	f3bf 8f6f 	isb	sy
 800eba4:	e75d      	b.n	800ea62 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800eba6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eba8:	f000 f952 	bl	800ee50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ebac:	f000 fc2e 	bl	800f40c <xTaskResumeAll>
 800ebb0:	e757      	b.n	800ea62 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ebb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebb4:	f000 f94c 	bl	800ee50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ebb8:	f000 fc28 	bl	800f40c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ebbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebbe:	f000 f999 	bl	800eef4 <prvIsQueueEmpty>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	f43f af4c 	beq.w	800ea62 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ebca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d00d      	beq.n	800ebec <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ebd0:	f001 fb3a 	bl	8010248 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ebd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebd6:	f000 f893 	bl	800ed00 <prvGetDisinheritPriorityAfterTimeout>
 800ebda:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ebdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebde:	689b      	ldr	r3, [r3, #8]
 800ebe0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f001 f8f8 	bl	800fdd8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ebe8:	f001 fb60 	bl	80102ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ebec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3738      	adds	r7, #56	@ 0x38
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	e000ed04 	.word	0xe000ed04

0800ebfc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b08e      	sub	sp, #56	@ 0x38
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	60f8      	str	r0, [r7, #12]
 800ec04:	60b9      	str	r1, [r7, #8]
 800ec06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ec0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d10b      	bne.n	800ec2a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800ec12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec16:	f383 8811 	msr	BASEPRI, r3
 800ec1a:	f3bf 8f6f 	isb	sy
 800ec1e:	f3bf 8f4f 	dsb	sy
 800ec22:	623b      	str	r3, [r7, #32]
}
 800ec24:	bf00      	nop
 800ec26:	bf00      	nop
 800ec28:	e7fd      	b.n	800ec26 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d103      	bne.n	800ec38 <xQueueReceiveFromISR+0x3c>
 800ec30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d101      	bne.n	800ec3c <xQueueReceiveFromISR+0x40>
 800ec38:	2301      	movs	r3, #1
 800ec3a:	e000      	b.n	800ec3e <xQueueReceiveFromISR+0x42>
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d10b      	bne.n	800ec5a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ec42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec46:	f383 8811 	msr	BASEPRI, r3
 800ec4a:	f3bf 8f6f 	isb	sy
 800ec4e:	f3bf 8f4f 	dsb	sy
 800ec52:	61fb      	str	r3, [r7, #28]
}
 800ec54:	bf00      	nop
 800ec56:	bf00      	nop
 800ec58:	e7fd      	b.n	800ec56 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ec5a:	f001 fbd5 	bl	8010408 <vPortValidateInterruptPriority>
	__asm volatile
 800ec5e:	f3ef 8211 	mrs	r2, BASEPRI
 800ec62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec66:	f383 8811 	msr	BASEPRI, r3
 800ec6a:	f3bf 8f6f 	isb	sy
 800ec6e:	f3bf 8f4f 	dsb	sy
 800ec72:	61ba      	str	r2, [r7, #24]
 800ec74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ec76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec78:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec7e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d02f      	beq.n	800ece6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ec86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ec8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ec90:	68b9      	ldr	r1, [r7, #8]
 800ec92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec94:	f000 f8b6 	bl	800ee04 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ec98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec9a:	1e5a      	subs	r2, r3, #1
 800ec9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec9e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800eca0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800eca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eca8:	d112      	bne.n	800ecd0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecac:	691b      	ldr	r3, [r3, #16]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d016      	beq.n	800ece0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ecb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecb4:	3310      	adds	r3, #16
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f000 fdac 	bl	800f814 <xTaskRemoveFromEventList>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d00e      	beq.n	800ece0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d00b      	beq.n	800ece0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2201      	movs	r2, #1
 800eccc:	601a      	str	r2, [r3, #0]
 800ecce:	e007      	b.n	800ece0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ecd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	b2db      	uxtb	r3, r3
 800ecd8:	b25a      	sxtb	r2, r3
 800ecda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ece0:	2301      	movs	r3, #1
 800ece2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ece4:	e001      	b.n	800ecea <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ece6:	2300      	movs	r3, #0
 800ece8:	637b      	str	r3, [r7, #52]	@ 0x34
 800ecea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	f383 8811 	msr	BASEPRI, r3
}
 800ecf4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ecf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3738      	adds	r7, #56	@ 0x38
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ed00:	b480      	push	{r7}
 800ed02:	b085      	sub	sp, #20
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d006      	beq.n	800ed1e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	f1c3 0307 	rsb	r3, r3, #7
 800ed1a:	60fb      	str	r3, [r7, #12]
 800ed1c:	e001      	b.n	800ed22 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ed22:	68fb      	ldr	r3, [r7, #12]
	}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3714      	adds	r7, #20
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b086      	sub	sp, #24
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	60f8      	str	r0, [r7, #12]
 800ed38:	60b9      	str	r1, [r7, #8]
 800ed3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d10d      	bne.n	800ed6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d14d      	bne.n	800edf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	689b      	ldr	r3, [r3, #8]
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f000 ffb4 	bl	800fcc8 <xTaskPriorityDisinherit>
 800ed60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	2200      	movs	r2, #0
 800ed66:	609a      	str	r2, [r3, #8]
 800ed68:	e043      	b.n	800edf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d119      	bne.n	800eda4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	6858      	ldr	r0, [r3, #4]
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed78:	461a      	mov	r2, r3
 800ed7a:	68b9      	ldr	r1, [r7, #8]
 800ed7c:	f00d fd41 	bl	801c802 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	685a      	ldr	r2, [r3, #4]
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed88:	441a      	add	r2, r3
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	685a      	ldr	r2, [r3, #4]
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	689b      	ldr	r3, [r3, #8]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d32b      	bcc.n	800edf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681a      	ldr	r2, [r3, #0]
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	605a      	str	r2, [r3, #4]
 800eda2:	e026      	b.n	800edf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	68d8      	ldr	r0, [r3, #12]
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edac:	461a      	mov	r2, r3
 800edae:	68b9      	ldr	r1, [r7, #8]
 800edb0:	f00d fd27 	bl	801c802 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	68da      	ldr	r2, [r3, #12]
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edbc:	425b      	negs	r3, r3
 800edbe:	441a      	add	r2, r3
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	68da      	ldr	r2, [r3, #12]
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	429a      	cmp	r2, r3
 800edce:	d207      	bcs.n	800ede0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	689a      	ldr	r2, [r3, #8]
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edd8:	425b      	negs	r3, r3
 800edda:	441a      	add	r2, r3
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2b02      	cmp	r3, #2
 800ede4:	d105      	bne.n	800edf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d002      	beq.n	800edf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800edec:	693b      	ldr	r3, [r7, #16]
 800edee:	3b01      	subs	r3, #1
 800edf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	1c5a      	adds	r2, r3, #1
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800edfa:	697b      	ldr	r3, [r7, #20]
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	3718      	adds	r7, #24
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}

0800ee04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d018      	beq.n	800ee48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	68da      	ldr	r2, [r3, #12]
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee1e:	441a      	add	r2, r3
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	68da      	ldr	r2, [r3, #12]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	689b      	ldr	r3, [r3, #8]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d303      	bcc.n	800ee38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681a      	ldr	r2, [r3, #0]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	68d9      	ldr	r1, [r3, #12]
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee40:	461a      	mov	r2, r3
 800ee42:	6838      	ldr	r0, [r7, #0]
 800ee44:	f00d fcdd 	bl	801c802 <memcpy>
	}
}
 800ee48:	bf00      	nop
 800ee4a:	3708      	adds	r7, #8
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}

0800ee50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b084      	sub	sp, #16
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ee58:	f001 f9f6 	bl	8010248 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ee62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ee64:	e011      	b.n	800ee8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d012      	beq.n	800ee94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	3324      	adds	r3, #36	@ 0x24
 800ee72:	4618      	mov	r0, r3
 800ee74:	f000 fcce 	bl	800f814 <xTaskRemoveFromEventList>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d001      	beq.n	800ee82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ee7e:	f000 fda7 	bl	800f9d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ee82:	7bfb      	ldrb	r3, [r7, #15]
 800ee84:	3b01      	subs	r3, #1
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ee8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	dce9      	bgt.n	800ee66 <prvUnlockQueue+0x16>
 800ee92:	e000      	b.n	800ee96 <prvUnlockQueue+0x46>
					break;
 800ee94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	22ff      	movs	r2, #255	@ 0xff
 800ee9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ee9e:	f001 fa05 	bl	80102ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eea2:	f001 f9d1 	bl	8010248 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eeac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eeae:	e011      	b.n	800eed4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	691b      	ldr	r3, [r3, #16]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d012      	beq.n	800eede <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	3310      	adds	r3, #16
 800eebc:	4618      	mov	r0, r3
 800eebe:	f000 fca9 	bl	800f814 <xTaskRemoveFromEventList>
 800eec2:	4603      	mov	r3, r0
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d001      	beq.n	800eecc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800eec8:	f000 fd82 	bl	800f9d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800eecc:	7bbb      	ldrb	r3, [r7, #14]
 800eece:	3b01      	subs	r3, #1
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	dce9      	bgt.n	800eeb0 <prvUnlockQueue+0x60>
 800eedc:	e000      	b.n	800eee0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800eede:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	22ff      	movs	r2, #255	@ 0xff
 800eee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800eee8:	f001 f9e0 	bl	80102ac <vPortExitCritical>
}
 800eeec:	bf00      	nop
 800eeee:	3710      	adds	r7, #16
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b084      	sub	sp, #16
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eefc:	f001 f9a4 	bl	8010248 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d102      	bne.n	800ef0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ef08:	2301      	movs	r3, #1
 800ef0a:	60fb      	str	r3, [r7, #12]
 800ef0c:	e001      	b.n	800ef12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ef12:	f001 f9cb 	bl	80102ac <vPortExitCritical>

	return xReturn;
 800ef16:	68fb      	ldr	r3, [r7, #12]
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3710      	adds	r7, #16
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b084      	sub	sp, #16
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ef28:	f001 f98e 	bl	8010248 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d102      	bne.n	800ef3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ef38:	2301      	movs	r3, #1
 800ef3a:	60fb      	str	r3, [r7, #12]
 800ef3c:	e001      	b.n	800ef42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ef42:	f001 f9b3 	bl	80102ac <vPortExitCritical>

	return xReturn;
 800ef46:	68fb      	ldr	r3, [r7, #12]
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3710      	adds	r7, #16
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}

0800ef50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b08e      	sub	sp, #56	@ 0x38
 800ef54:	af04      	add	r7, sp, #16
 800ef56:	60f8      	str	r0, [r7, #12]
 800ef58:	60b9      	str	r1, [r7, #8]
 800ef5a:	607a      	str	r2, [r7, #4]
 800ef5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ef5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d10b      	bne.n	800ef7c <xTaskCreateStatic+0x2c>
	__asm volatile
 800ef64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef68:	f383 8811 	msr	BASEPRI, r3
 800ef6c:	f3bf 8f6f 	isb	sy
 800ef70:	f3bf 8f4f 	dsb	sy
 800ef74:	623b      	str	r3, [r7, #32]
}
 800ef76:	bf00      	nop
 800ef78:	bf00      	nop
 800ef7a:	e7fd      	b.n	800ef78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ef7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d10b      	bne.n	800ef9a <xTaskCreateStatic+0x4a>
	__asm volatile
 800ef82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef86:	f383 8811 	msr	BASEPRI, r3
 800ef8a:	f3bf 8f6f 	isb	sy
 800ef8e:	f3bf 8f4f 	dsb	sy
 800ef92:	61fb      	str	r3, [r7, #28]
}
 800ef94:	bf00      	nop
 800ef96:	bf00      	nop
 800ef98:	e7fd      	b.n	800ef96 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ef9a:	23a0      	movs	r3, #160	@ 0xa0
 800ef9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	2ba0      	cmp	r3, #160	@ 0xa0
 800efa2:	d00b      	beq.n	800efbc <xTaskCreateStatic+0x6c>
	__asm volatile
 800efa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efa8:	f383 8811 	msr	BASEPRI, r3
 800efac:	f3bf 8f6f 	isb	sy
 800efb0:	f3bf 8f4f 	dsb	sy
 800efb4:	61bb      	str	r3, [r7, #24]
}
 800efb6:	bf00      	nop
 800efb8:	bf00      	nop
 800efba:	e7fd      	b.n	800efb8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800efbc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800efbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d01e      	beq.n	800f002 <xTaskCreateStatic+0xb2>
 800efc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d01b      	beq.n	800f002 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800efca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efcc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800efce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800efd2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800efd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efd6:	2202      	movs	r2, #2
 800efd8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800efdc:	2300      	movs	r3, #0
 800efde:	9303      	str	r3, [sp, #12]
 800efe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efe2:	9302      	str	r3, [sp, #8]
 800efe4:	f107 0314 	add.w	r3, r7, #20
 800efe8:	9301      	str	r3, [sp, #4]
 800efea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efec:	9300      	str	r3, [sp, #0]
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	68b9      	ldr	r1, [r7, #8]
 800eff4:	68f8      	ldr	r0, [r7, #12]
 800eff6:	f000 f851 	bl	800f09c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800effa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800effc:	f000 f8ee 	bl	800f1dc <prvAddNewTaskToReadyList>
 800f000:	e001      	b.n	800f006 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f002:	2300      	movs	r3, #0
 800f004:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f006:	697b      	ldr	r3, [r7, #20]
	}
 800f008:	4618      	mov	r0, r3
 800f00a:	3728      	adds	r7, #40	@ 0x28
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f010:	b580      	push	{r7, lr}
 800f012:	b08c      	sub	sp, #48	@ 0x30
 800f014:	af04      	add	r7, sp, #16
 800f016:	60f8      	str	r0, [r7, #12]
 800f018:	60b9      	str	r1, [r7, #8]
 800f01a:	603b      	str	r3, [r7, #0]
 800f01c:	4613      	mov	r3, r2
 800f01e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f020:	88fb      	ldrh	r3, [r7, #6]
 800f022:	009b      	lsls	r3, r3, #2
 800f024:	4618      	mov	r0, r3
 800f026:	f001 fa31 	bl	801048c <pvPortMalloc>
 800f02a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d00e      	beq.n	800f050 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f032:	20a0      	movs	r0, #160	@ 0xa0
 800f034:	f001 fa2a 	bl	801048c <pvPortMalloc>
 800f038:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f03a:	69fb      	ldr	r3, [r7, #28]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d003      	beq.n	800f048 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f040:	69fb      	ldr	r3, [r7, #28]
 800f042:	697a      	ldr	r2, [r7, #20]
 800f044:	631a      	str	r2, [r3, #48]	@ 0x30
 800f046:	e005      	b.n	800f054 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f048:	6978      	ldr	r0, [r7, #20]
 800f04a:	f001 faed 	bl	8010628 <vPortFree>
 800f04e:	e001      	b.n	800f054 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f050:	2300      	movs	r3, #0
 800f052:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f054:	69fb      	ldr	r3, [r7, #28]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d017      	beq.n	800f08a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f05a:	69fb      	ldr	r3, [r7, #28]
 800f05c:	2200      	movs	r2, #0
 800f05e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f062:	88fa      	ldrh	r2, [r7, #6]
 800f064:	2300      	movs	r3, #0
 800f066:	9303      	str	r3, [sp, #12]
 800f068:	69fb      	ldr	r3, [r7, #28]
 800f06a:	9302      	str	r3, [sp, #8]
 800f06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f06e:	9301      	str	r3, [sp, #4]
 800f070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f072:	9300      	str	r3, [sp, #0]
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	68b9      	ldr	r1, [r7, #8]
 800f078:	68f8      	ldr	r0, [r7, #12]
 800f07a:	f000 f80f 	bl	800f09c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f07e:	69f8      	ldr	r0, [r7, #28]
 800f080:	f000 f8ac 	bl	800f1dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f084:	2301      	movs	r3, #1
 800f086:	61bb      	str	r3, [r7, #24]
 800f088:	e002      	b.n	800f090 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f08a:	f04f 33ff 	mov.w	r3, #4294967295
 800f08e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f090:	69bb      	ldr	r3, [r7, #24]
	}
 800f092:	4618      	mov	r0, r3
 800f094:	3720      	adds	r7, #32
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}
	...

0800f09c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b088      	sub	sp, #32
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	60f8      	str	r0, [r7, #12]
 800f0a4:	60b9      	str	r1, [r7, #8]
 800f0a6:	607a      	str	r2, [r7, #4]
 800f0a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f0b4:	3b01      	subs	r3, #1
 800f0b6:	009b      	lsls	r3, r3, #2
 800f0b8:	4413      	add	r3, r2
 800f0ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f0bc:	69bb      	ldr	r3, [r7, #24]
 800f0be:	f023 0307 	bic.w	r3, r3, #7
 800f0c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f0c4:	69bb      	ldr	r3, [r7, #24]
 800f0c6:	f003 0307 	and.w	r3, r3, #7
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d00b      	beq.n	800f0e6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800f0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0d2:	f383 8811 	msr	BASEPRI, r3
 800f0d6:	f3bf 8f6f 	isb	sy
 800f0da:	f3bf 8f4f 	dsb	sy
 800f0de:	617b      	str	r3, [r7, #20]
}
 800f0e0:	bf00      	nop
 800f0e2:	bf00      	nop
 800f0e4:	e7fd      	b.n	800f0e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d01f      	beq.n	800f12c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	61fb      	str	r3, [r7, #28]
 800f0f0:	e012      	b.n	800f118 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f0f2:	68ba      	ldr	r2, [r7, #8]
 800f0f4:	69fb      	ldr	r3, [r7, #28]
 800f0f6:	4413      	add	r3, r2
 800f0f8:	7819      	ldrb	r1, [r3, #0]
 800f0fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0fc:	69fb      	ldr	r3, [r7, #28]
 800f0fe:	4413      	add	r3, r2
 800f100:	3334      	adds	r3, #52	@ 0x34
 800f102:	460a      	mov	r2, r1
 800f104:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f106:	68ba      	ldr	r2, [r7, #8]
 800f108:	69fb      	ldr	r3, [r7, #28]
 800f10a:	4413      	add	r3, r2
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d006      	beq.n	800f120 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f112:	69fb      	ldr	r3, [r7, #28]
 800f114:	3301      	adds	r3, #1
 800f116:	61fb      	str	r3, [r7, #28]
 800f118:	69fb      	ldr	r3, [r7, #28]
 800f11a:	2b0f      	cmp	r3, #15
 800f11c:	d9e9      	bls.n	800f0f2 <prvInitialiseNewTask+0x56>
 800f11e:	e000      	b.n	800f122 <prvInitialiseNewTask+0x86>
			{
				break;
 800f120:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f124:	2200      	movs	r2, #0
 800f126:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f12a:	e003      	b.n	800f134 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f12e:	2200      	movs	r2, #0
 800f130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f136:	2b06      	cmp	r3, #6
 800f138:	d901      	bls.n	800f13e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f13a:	2306      	movs	r3, #6
 800f13c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f140:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f142:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f146:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f148:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f14c:	2200      	movs	r2, #0
 800f14e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f152:	3304      	adds	r3, #4
 800f154:	4618      	mov	r0, r3
 800f156:	f7fe ff0d 	bl	800df74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f15c:	3318      	adds	r3, #24
 800f15e:	4618      	mov	r0, r3
 800f160:	f7fe ff08 	bl	800df74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f168:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f16c:	f1c3 0207 	rsb	r2, r3, #7
 800f170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f172:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f178:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f17c:	2200      	movs	r2, #0
 800f17e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f184:	2200      	movs	r2, #0
 800f186:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f18c:	334c      	adds	r3, #76	@ 0x4c
 800f18e:	224c      	movs	r2, #76	@ 0x4c
 800f190:	2100      	movs	r1, #0
 800f192:	4618      	mov	r0, r3
 800f194:	f00d fa37 	bl	801c606 <memset>
 800f198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f19a:	4a0d      	ldr	r2, [pc, #52]	@ (800f1d0 <prvInitialiseNewTask+0x134>)
 800f19c:	651a      	str	r2, [r3, #80]	@ 0x50
 800f19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a0:	4a0c      	ldr	r2, [pc, #48]	@ (800f1d4 <prvInitialiseNewTask+0x138>)
 800f1a2:	655a      	str	r2, [r3, #84]	@ 0x54
 800f1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a6:	4a0c      	ldr	r2, [pc, #48]	@ (800f1d8 <prvInitialiseNewTask+0x13c>)
 800f1a8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f1aa:	683a      	ldr	r2, [r7, #0]
 800f1ac:	68f9      	ldr	r1, [r7, #12]
 800f1ae:	69b8      	ldr	r0, [r7, #24]
 800f1b0:	f000 ff1c 	bl	800ffec <pxPortInitialiseStack>
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d002      	beq.n	800f1c6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f1c6:	bf00      	nop
 800f1c8:	3720      	adds	r7, #32
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	2000e61c 	.word	0x2000e61c
 800f1d4:	2000e684 	.word	0x2000e684
 800f1d8:	2000e6ec 	.word	0x2000e6ec

0800f1dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b082      	sub	sp, #8
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f1e4:	f001 f830 	bl	8010248 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f1e8:	4b2a      	ldr	r3, [pc, #168]	@ (800f294 <prvAddNewTaskToReadyList+0xb8>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	4a29      	ldr	r2, [pc, #164]	@ (800f294 <prvAddNewTaskToReadyList+0xb8>)
 800f1f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f1f2:	4b29      	ldr	r3, [pc, #164]	@ (800f298 <prvAddNewTaskToReadyList+0xbc>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d109      	bne.n	800f20e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f1fa:	4a27      	ldr	r2, [pc, #156]	@ (800f298 <prvAddNewTaskToReadyList+0xbc>)
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f200:	4b24      	ldr	r3, [pc, #144]	@ (800f294 <prvAddNewTaskToReadyList+0xb8>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	2b01      	cmp	r3, #1
 800f206:	d110      	bne.n	800f22a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f208:	f000 fc06 	bl	800fa18 <prvInitialiseTaskLists>
 800f20c:	e00d      	b.n	800f22a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f20e:	4b23      	ldr	r3, [pc, #140]	@ (800f29c <prvAddNewTaskToReadyList+0xc0>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d109      	bne.n	800f22a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f216:	4b20      	ldr	r3, [pc, #128]	@ (800f298 <prvAddNewTaskToReadyList+0xbc>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f220:	429a      	cmp	r2, r3
 800f222:	d802      	bhi.n	800f22a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f224:	4a1c      	ldr	r2, [pc, #112]	@ (800f298 <prvAddNewTaskToReadyList+0xbc>)
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f22a:	4b1d      	ldr	r3, [pc, #116]	@ (800f2a0 <prvAddNewTaskToReadyList+0xc4>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	3301      	adds	r3, #1
 800f230:	4a1b      	ldr	r2, [pc, #108]	@ (800f2a0 <prvAddNewTaskToReadyList+0xc4>)
 800f232:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f238:	2201      	movs	r2, #1
 800f23a:	409a      	lsls	r2, r3
 800f23c:	4b19      	ldr	r3, [pc, #100]	@ (800f2a4 <prvAddNewTaskToReadyList+0xc8>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4313      	orrs	r3, r2
 800f242:	4a18      	ldr	r2, [pc, #96]	@ (800f2a4 <prvAddNewTaskToReadyList+0xc8>)
 800f244:	6013      	str	r3, [r2, #0]
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f24a:	4613      	mov	r3, r2
 800f24c:	009b      	lsls	r3, r3, #2
 800f24e:	4413      	add	r3, r2
 800f250:	009b      	lsls	r3, r3, #2
 800f252:	4a15      	ldr	r2, [pc, #84]	@ (800f2a8 <prvAddNewTaskToReadyList+0xcc>)
 800f254:	441a      	add	r2, r3
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	3304      	adds	r3, #4
 800f25a:	4619      	mov	r1, r3
 800f25c:	4610      	mov	r0, r2
 800f25e:	f7fe fe96 	bl	800df8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f262:	f001 f823 	bl	80102ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f266:	4b0d      	ldr	r3, [pc, #52]	@ (800f29c <prvAddNewTaskToReadyList+0xc0>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d00e      	beq.n	800f28c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f26e:	4b0a      	ldr	r3, [pc, #40]	@ (800f298 <prvAddNewTaskToReadyList+0xbc>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f278:	429a      	cmp	r2, r3
 800f27a:	d207      	bcs.n	800f28c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f27c:	4b0b      	ldr	r3, [pc, #44]	@ (800f2ac <prvAddNewTaskToReadyList+0xd0>)
 800f27e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f282:	601a      	str	r2, [r3, #0]
 800f284:	f3bf 8f4f 	dsb	sy
 800f288:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f28c:	bf00      	nop
 800f28e:	3708      	adds	r7, #8
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	20005514 	.word	0x20005514
 800f298:	20005414 	.word	0x20005414
 800f29c:	20005520 	.word	0x20005520
 800f2a0:	20005530 	.word	0x20005530
 800f2a4:	2000551c 	.word	0x2000551c
 800f2a8:	20005418 	.word	0x20005418
 800f2ac:	e000ed04 	.word	0xe000ed04

0800f2b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b084      	sub	sp, #16
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d018      	beq.n	800f2f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f2c2:	4b14      	ldr	r3, [pc, #80]	@ (800f314 <vTaskDelay+0x64>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d00b      	beq.n	800f2e2 <vTaskDelay+0x32>
	__asm volatile
 800f2ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ce:	f383 8811 	msr	BASEPRI, r3
 800f2d2:	f3bf 8f6f 	isb	sy
 800f2d6:	f3bf 8f4f 	dsb	sy
 800f2da:	60bb      	str	r3, [r7, #8]
}
 800f2dc:	bf00      	nop
 800f2de:	bf00      	nop
 800f2e0:	e7fd      	b.n	800f2de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f2e2:	f000 f885 	bl	800f3f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f2e6:	2100      	movs	r1, #0
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 fe19 	bl	800ff20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f2ee:	f000 f88d 	bl	800f40c <xTaskResumeAll>
 800f2f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d107      	bne.n	800f30a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f2fa:	4b07      	ldr	r3, [pc, #28]	@ (800f318 <vTaskDelay+0x68>)
 800f2fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f300:	601a      	str	r2, [r3, #0]
 800f302:	f3bf 8f4f 	dsb	sy
 800f306:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f30a:	bf00      	nop
 800f30c:	3710      	adds	r7, #16
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop
 800f314:	2000553c 	.word	0x2000553c
 800f318:	e000ed04 	.word	0xe000ed04

0800f31c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b08a      	sub	sp, #40	@ 0x28
 800f320:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f322:	2300      	movs	r3, #0
 800f324:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f326:	2300      	movs	r3, #0
 800f328:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f32a:	463a      	mov	r2, r7
 800f32c:	1d39      	adds	r1, r7, #4
 800f32e:	f107 0308 	add.w	r3, r7, #8
 800f332:	4618      	mov	r0, r3
 800f334:	f7f2 f964 	bl	8001600 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f338:	6839      	ldr	r1, [r7, #0]
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	68ba      	ldr	r2, [r7, #8]
 800f33e:	9202      	str	r2, [sp, #8]
 800f340:	9301      	str	r3, [sp, #4]
 800f342:	2300      	movs	r3, #0
 800f344:	9300      	str	r3, [sp, #0]
 800f346:	2300      	movs	r3, #0
 800f348:	460a      	mov	r2, r1
 800f34a:	4921      	ldr	r1, [pc, #132]	@ (800f3d0 <vTaskStartScheduler+0xb4>)
 800f34c:	4821      	ldr	r0, [pc, #132]	@ (800f3d4 <vTaskStartScheduler+0xb8>)
 800f34e:	f7ff fdff 	bl	800ef50 <xTaskCreateStatic>
 800f352:	4603      	mov	r3, r0
 800f354:	4a20      	ldr	r2, [pc, #128]	@ (800f3d8 <vTaskStartScheduler+0xbc>)
 800f356:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f358:	4b1f      	ldr	r3, [pc, #124]	@ (800f3d8 <vTaskStartScheduler+0xbc>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d002      	beq.n	800f366 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f360:	2301      	movs	r3, #1
 800f362:	617b      	str	r3, [r7, #20]
 800f364:	e001      	b.n	800f36a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f366:	2300      	movs	r3, #0
 800f368:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	2b01      	cmp	r3, #1
 800f36e:	d11b      	bne.n	800f3a8 <vTaskStartScheduler+0x8c>
	__asm volatile
 800f370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f374:	f383 8811 	msr	BASEPRI, r3
 800f378:	f3bf 8f6f 	isb	sy
 800f37c:	f3bf 8f4f 	dsb	sy
 800f380:	613b      	str	r3, [r7, #16]
}
 800f382:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f384:	4b15      	ldr	r3, [pc, #84]	@ (800f3dc <vTaskStartScheduler+0xc0>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	334c      	adds	r3, #76	@ 0x4c
 800f38a:	4a15      	ldr	r2, [pc, #84]	@ (800f3e0 <vTaskStartScheduler+0xc4>)
 800f38c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f38e:	4b15      	ldr	r3, [pc, #84]	@ (800f3e4 <vTaskStartScheduler+0xc8>)
 800f390:	f04f 32ff 	mov.w	r2, #4294967295
 800f394:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f396:	4b14      	ldr	r3, [pc, #80]	@ (800f3e8 <vTaskStartScheduler+0xcc>)
 800f398:	2201      	movs	r2, #1
 800f39a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f39c:	4b13      	ldr	r3, [pc, #76]	@ (800f3ec <vTaskStartScheduler+0xd0>)
 800f39e:	2200      	movs	r2, #0
 800f3a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f3a2:	f000 fead 	bl	8010100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f3a6:	e00f      	b.n	800f3c8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ae:	d10b      	bne.n	800f3c8 <vTaskStartScheduler+0xac>
	__asm volatile
 800f3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3b4:	f383 8811 	msr	BASEPRI, r3
 800f3b8:	f3bf 8f6f 	isb	sy
 800f3bc:	f3bf 8f4f 	dsb	sy
 800f3c0:	60fb      	str	r3, [r7, #12]
}
 800f3c2:	bf00      	nop
 800f3c4:	bf00      	nop
 800f3c6:	e7fd      	b.n	800f3c4 <vTaskStartScheduler+0xa8>
}
 800f3c8:	bf00      	nop
 800f3ca:	3718      	adds	r7, #24
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}
 800f3d0:	0801f1fc 	.word	0x0801f1fc
 800f3d4:	0800f9e9 	.word	0x0800f9e9
 800f3d8:	20005538 	.word	0x20005538
 800f3dc:	20005414 	.word	0x20005414
 800f3e0:	20000118 	.word	0x20000118
 800f3e4:	20005534 	.word	0x20005534
 800f3e8:	20005520 	.word	0x20005520
 800f3ec:	20005518 	.word	0x20005518

0800f3f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f3f4:	4b04      	ldr	r3, [pc, #16]	@ (800f408 <vTaskSuspendAll+0x18>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	3301      	adds	r3, #1
 800f3fa:	4a03      	ldr	r2, [pc, #12]	@ (800f408 <vTaskSuspendAll+0x18>)
 800f3fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f3fe:	bf00      	nop
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr
 800f408:	2000553c 	.word	0x2000553c

0800f40c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f412:	2300      	movs	r3, #0
 800f414:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f416:	2300      	movs	r3, #0
 800f418:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f41a:	4b42      	ldr	r3, [pc, #264]	@ (800f524 <xTaskResumeAll+0x118>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d10b      	bne.n	800f43a <xTaskResumeAll+0x2e>
	__asm volatile
 800f422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f426:	f383 8811 	msr	BASEPRI, r3
 800f42a:	f3bf 8f6f 	isb	sy
 800f42e:	f3bf 8f4f 	dsb	sy
 800f432:	603b      	str	r3, [r7, #0]
}
 800f434:	bf00      	nop
 800f436:	bf00      	nop
 800f438:	e7fd      	b.n	800f436 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f43a:	f000 ff05 	bl	8010248 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f43e:	4b39      	ldr	r3, [pc, #228]	@ (800f524 <xTaskResumeAll+0x118>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	3b01      	subs	r3, #1
 800f444:	4a37      	ldr	r2, [pc, #220]	@ (800f524 <xTaskResumeAll+0x118>)
 800f446:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f448:	4b36      	ldr	r3, [pc, #216]	@ (800f524 <xTaskResumeAll+0x118>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d161      	bne.n	800f514 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f450:	4b35      	ldr	r3, [pc, #212]	@ (800f528 <xTaskResumeAll+0x11c>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d05d      	beq.n	800f514 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f458:	e02e      	b.n	800f4b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f45a:	4b34      	ldr	r3, [pc, #208]	@ (800f52c <xTaskResumeAll+0x120>)
 800f45c:	68db      	ldr	r3, [r3, #12]
 800f45e:	68db      	ldr	r3, [r3, #12]
 800f460:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	3318      	adds	r3, #24
 800f466:	4618      	mov	r0, r3
 800f468:	f7fe fdee 	bl	800e048 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	3304      	adds	r3, #4
 800f470:	4618      	mov	r0, r3
 800f472:	f7fe fde9 	bl	800e048 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f47a:	2201      	movs	r2, #1
 800f47c:	409a      	lsls	r2, r3
 800f47e:	4b2c      	ldr	r3, [pc, #176]	@ (800f530 <xTaskResumeAll+0x124>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	4313      	orrs	r3, r2
 800f484:	4a2a      	ldr	r2, [pc, #168]	@ (800f530 <xTaskResumeAll+0x124>)
 800f486:	6013      	str	r3, [r2, #0]
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f48c:	4613      	mov	r3, r2
 800f48e:	009b      	lsls	r3, r3, #2
 800f490:	4413      	add	r3, r2
 800f492:	009b      	lsls	r3, r3, #2
 800f494:	4a27      	ldr	r2, [pc, #156]	@ (800f534 <xTaskResumeAll+0x128>)
 800f496:	441a      	add	r2, r3
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	3304      	adds	r3, #4
 800f49c:	4619      	mov	r1, r3
 800f49e:	4610      	mov	r0, r2
 800f4a0:	f7fe fd75 	bl	800df8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4a8:	4b23      	ldr	r3, [pc, #140]	@ (800f538 <xTaskResumeAll+0x12c>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	d302      	bcc.n	800f4b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f4b2:	4b22      	ldr	r3, [pc, #136]	@ (800f53c <xTaskResumeAll+0x130>)
 800f4b4:	2201      	movs	r2, #1
 800f4b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f4b8:	4b1c      	ldr	r3, [pc, #112]	@ (800f52c <xTaskResumeAll+0x120>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d1cc      	bne.n	800f45a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d001      	beq.n	800f4ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f4c6:	f000 fb4b 	bl	800fb60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f4ca:	4b1d      	ldr	r3, [pc, #116]	@ (800f540 <xTaskResumeAll+0x134>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d010      	beq.n	800f4f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f4d6:	f000 f859 	bl	800f58c <xTaskIncrementTick>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d002      	beq.n	800f4e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f4e0:	4b16      	ldr	r3, [pc, #88]	@ (800f53c <xTaskResumeAll+0x130>)
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	3b01      	subs	r3, #1
 800f4ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d1f1      	bne.n	800f4d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f4f2:	4b13      	ldr	r3, [pc, #76]	@ (800f540 <xTaskResumeAll+0x134>)
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f4f8:	4b10      	ldr	r3, [pc, #64]	@ (800f53c <xTaskResumeAll+0x130>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d009      	beq.n	800f514 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f500:	2301      	movs	r3, #1
 800f502:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f504:	4b0f      	ldr	r3, [pc, #60]	@ (800f544 <xTaskResumeAll+0x138>)
 800f506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f50a:	601a      	str	r2, [r3, #0]
 800f50c:	f3bf 8f4f 	dsb	sy
 800f510:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f514:	f000 feca 	bl	80102ac <vPortExitCritical>

	return xAlreadyYielded;
 800f518:	68bb      	ldr	r3, [r7, #8]
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3710      	adds	r7, #16
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}
 800f522:	bf00      	nop
 800f524:	2000553c 	.word	0x2000553c
 800f528:	20005514 	.word	0x20005514
 800f52c:	200054d4 	.word	0x200054d4
 800f530:	2000551c 	.word	0x2000551c
 800f534:	20005418 	.word	0x20005418
 800f538:	20005414 	.word	0x20005414
 800f53c:	20005528 	.word	0x20005528
 800f540:	20005524 	.word	0x20005524
 800f544:	e000ed04 	.word	0xe000ed04

0800f548 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f548:	b480      	push	{r7}
 800f54a:	b083      	sub	sp, #12
 800f54c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f54e:	4b05      	ldr	r3, [pc, #20]	@ (800f564 <xTaskGetTickCount+0x1c>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f554:	687b      	ldr	r3, [r7, #4]
}
 800f556:	4618      	mov	r0, r3
 800f558:	370c      	adds	r7, #12
 800f55a:	46bd      	mov	sp, r7
 800f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f560:	4770      	bx	lr
 800f562:	bf00      	nop
 800f564:	20005518 	.word	0x20005518

0800f568 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f56e:	f000 ff4b 	bl	8010408 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f572:	2300      	movs	r3, #0
 800f574:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f576:	4b04      	ldr	r3, [pc, #16]	@ (800f588 <xTaskGetTickCountFromISR+0x20>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f57c:	683b      	ldr	r3, [r7, #0]
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3708      	adds	r7, #8
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	20005518 	.word	0x20005518

0800f58c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b086      	sub	sp, #24
 800f590:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f592:	2300      	movs	r3, #0
 800f594:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f596:	4b4f      	ldr	r3, [pc, #316]	@ (800f6d4 <xTaskIncrementTick+0x148>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	f040 808f 	bne.w	800f6be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f5a0:	4b4d      	ldr	r3, [pc, #308]	@ (800f6d8 <xTaskIncrementTick+0x14c>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	3301      	adds	r3, #1
 800f5a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f5a8:	4a4b      	ldr	r2, [pc, #300]	@ (800f6d8 <xTaskIncrementTick+0x14c>)
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f5ae:	693b      	ldr	r3, [r7, #16]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d121      	bne.n	800f5f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f5b4:	4b49      	ldr	r3, [pc, #292]	@ (800f6dc <xTaskIncrementTick+0x150>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d00b      	beq.n	800f5d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800f5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5c2:	f383 8811 	msr	BASEPRI, r3
 800f5c6:	f3bf 8f6f 	isb	sy
 800f5ca:	f3bf 8f4f 	dsb	sy
 800f5ce:	603b      	str	r3, [r7, #0]
}
 800f5d0:	bf00      	nop
 800f5d2:	bf00      	nop
 800f5d4:	e7fd      	b.n	800f5d2 <xTaskIncrementTick+0x46>
 800f5d6:	4b41      	ldr	r3, [pc, #260]	@ (800f6dc <xTaskIncrementTick+0x150>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	60fb      	str	r3, [r7, #12]
 800f5dc:	4b40      	ldr	r3, [pc, #256]	@ (800f6e0 <xTaskIncrementTick+0x154>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	4a3e      	ldr	r2, [pc, #248]	@ (800f6dc <xTaskIncrementTick+0x150>)
 800f5e2:	6013      	str	r3, [r2, #0]
 800f5e4:	4a3e      	ldr	r2, [pc, #248]	@ (800f6e0 <xTaskIncrementTick+0x154>)
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	6013      	str	r3, [r2, #0]
 800f5ea:	4b3e      	ldr	r3, [pc, #248]	@ (800f6e4 <xTaskIncrementTick+0x158>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	4a3c      	ldr	r2, [pc, #240]	@ (800f6e4 <xTaskIncrementTick+0x158>)
 800f5f2:	6013      	str	r3, [r2, #0]
 800f5f4:	f000 fab4 	bl	800fb60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f5f8:	4b3b      	ldr	r3, [pc, #236]	@ (800f6e8 <xTaskIncrementTick+0x15c>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	693a      	ldr	r2, [r7, #16]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d348      	bcc.n	800f694 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f602:	4b36      	ldr	r3, [pc, #216]	@ (800f6dc <xTaskIncrementTick+0x150>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d104      	bne.n	800f616 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f60c:	4b36      	ldr	r3, [pc, #216]	@ (800f6e8 <xTaskIncrementTick+0x15c>)
 800f60e:	f04f 32ff 	mov.w	r2, #4294967295
 800f612:	601a      	str	r2, [r3, #0]
					break;
 800f614:	e03e      	b.n	800f694 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f616:	4b31      	ldr	r3, [pc, #196]	@ (800f6dc <xTaskIncrementTick+0x150>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	68db      	ldr	r3, [r3, #12]
 800f61c:	68db      	ldr	r3, [r3, #12]
 800f61e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	685b      	ldr	r3, [r3, #4]
 800f624:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f626:	693a      	ldr	r2, [r7, #16]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d203      	bcs.n	800f636 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f62e:	4a2e      	ldr	r2, [pc, #184]	@ (800f6e8 <xTaskIncrementTick+0x15c>)
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f634:	e02e      	b.n	800f694 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	3304      	adds	r3, #4
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7fe fd04 	bl	800e048 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f644:	2b00      	cmp	r3, #0
 800f646:	d004      	beq.n	800f652 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	3318      	adds	r3, #24
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7fe fcfb 	bl	800e048 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f656:	2201      	movs	r2, #1
 800f658:	409a      	lsls	r2, r3
 800f65a:	4b24      	ldr	r3, [pc, #144]	@ (800f6ec <xTaskIncrementTick+0x160>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	4313      	orrs	r3, r2
 800f660:	4a22      	ldr	r2, [pc, #136]	@ (800f6ec <xTaskIncrementTick+0x160>)
 800f662:	6013      	str	r3, [r2, #0]
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f668:	4613      	mov	r3, r2
 800f66a:	009b      	lsls	r3, r3, #2
 800f66c:	4413      	add	r3, r2
 800f66e:	009b      	lsls	r3, r3, #2
 800f670:	4a1f      	ldr	r2, [pc, #124]	@ (800f6f0 <xTaskIncrementTick+0x164>)
 800f672:	441a      	add	r2, r3
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	3304      	adds	r3, #4
 800f678:	4619      	mov	r1, r3
 800f67a:	4610      	mov	r0, r2
 800f67c:	f7fe fc87 	bl	800df8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f684:	4b1b      	ldr	r3, [pc, #108]	@ (800f6f4 <xTaskIncrementTick+0x168>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d3b9      	bcc.n	800f602 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f68e:	2301      	movs	r3, #1
 800f690:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f692:	e7b6      	b.n	800f602 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f694:	4b17      	ldr	r3, [pc, #92]	@ (800f6f4 <xTaskIncrementTick+0x168>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f69a:	4915      	ldr	r1, [pc, #84]	@ (800f6f0 <xTaskIncrementTick+0x164>)
 800f69c:	4613      	mov	r3, r2
 800f69e:	009b      	lsls	r3, r3, #2
 800f6a0:	4413      	add	r3, r2
 800f6a2:	009b      	lsls	r3, r3, #2
 800f6a4:	440b      	add	r3, r1
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	2b01      	cmp	r3, #1
 800f6aa:	d901      	bls.n	800f6b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f6b0:	4b11      	ldr	r3, [pc, #68]	@ (800f6f8 <xTaskIncrementTick+0x16c>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d007      	beq.n	800f6c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	617b      	str	r3, [r7, #20]
 800f6bc:	e004      	b.n	800f6c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f6be:	4b0f      	ldr	r3, [pc, #60]	@ (800f6fc <xTaskIncrementTick+0x170>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	3301      	adds	r3, #1
 800f6c4:	4a0d      	ldr	r2, [pc, #52]	@ (800f6fc <xTaskIncrementTick+0x170>)
 800f6c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f6c8:	697b      	ldr	r3, [r7, #20]
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3718      	adds	r7, #24
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
 800f6d2:	bf00      	nop
 800f6d4:	2000553c 	.word	0x2000553c
 800f6d8:	20005518 	.word	0x20005518
 800f6dc:	200054cc 	.word	0x200054cc
 800f6e0:	200054d0 	.word	0x200054d0
 800f6e4:	2000552c 	.word	0x2000552c
 800f6e8:	20005534 	.word	0x20005534
 800f6ec:	2000551c 	.word	0x2000551c
 800f6f0:	20005418 	.word	0x20005418
 800f6f4:	20005414 	.word	0x20005414
 800f6f8:	20005528 	.word	0x20005528
 800f6fc:	20005524 	.word	0x20005524

0800f700 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f700:	b480      	push	{r7}
 800f702:	b087      	sub	sp, #28
 800f704:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f706:	4b2a      	ldr	r3, [pc, #168]	@ (800f7b0 <vTaskSwitchContext+0xb0>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d003      	beq.n	800f716 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f70e:	4b29      	ldr	r3, [pc, #164]	@ (800f7b4 <vTaskSwitchContext+0xb4>)
 800f710:	2201      	movs	r2, #1
 800f712:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f714:	e045      	b.n	800f7a2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800f716:	4b27      	ldr	r3, [pc, #156]	@ (800f7b4 <vTaskSwitchContext+0xb4>)
 800f718:	2200      	movs	r2, #0
 800f71a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f71c:	4b26      	ldr	r3, [pc, #152]	@ (800f7b8 <vTaskSwitchContext+0xb8>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	fab3 f383 	clz	r3, r3
 800f728:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f72a:	7afb      	ldrb	r3, [r7, #11]
 800f72c:	f1c3 031f 	rsb	r3, r3, #31
 800f730:	617b      	str	r3, [r7, #20]
 800f732:	4922      	ldr	r1, [pc, #136]	@ (800f7bc <vTaskSwitchContext+0xbc>)
 800f734:	697a      	ldr	r2, [r7, #20]
 800f736:	4613      	mov	r3, r2
 800f738:	009b      	lsls	r3, r3, #2
 800f73a:	4413      	add	r3, r2
 800f73c:	009b      	lsls	r3, r3, #2
 800f73e:	440b      	add	r3, r1
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d10b      	bne.n	800f75e <vTaskSwitchContext+0x5e>
	__asm volatile
 800f746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f74a:	f383 8811 	msr	BASEPRI, r3
 800f74e:	f3bf 8f6f 	isb	sy
 800f752:	f3bf 8f4f 	dsb	sy
 800f756:	607b      	str	r3, [r7, #4]
}
 800f758:	bf00      	nop
 800f75a:	bf00      	nop
 800f75c:	e7fd      	b.n	800f75a <vTaskSwitchContext+0x5a>
 800f75e:	697a      	ldr	r2, [r7, #20]
 800f760:	4613      	mov	r3, r2
 800f762:	009b      	lsls	r3, r3, #2
 800f764:	4413      	add	r3, r2
 800f766:	009b      	lsls	r3, r3, #2
 800f768:	4a14      	ldr	r2, [pc, #80]	@ (800f7bc <vTaskSwitchContext+0xbc>)
 800f76a:	4413      	add	r3, r2
 800f76c:	613b      	str	r3, [r7, #16]
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	685b      	ldr	r3, [r3, #4]
 800f772:	685a      	ldr	r2, [r3, #4]
 800f774:	693b      	ldr	r3, [r7, #16]
 800f776:	605a      	str	r2, [r3, #4]
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	685a      	ldr	r2, [r3, #4]
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	3308      	adds	r3, #8
 800f780:	429a      	cmp	r2, r3
 800f782:	d104      	bne.n	800f78e <vTaskSwitchContext+0x8e>
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	685a      	ldr	r2, [r3, #4]
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	605a      	str	r2, [r3, #4]
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	68db      	ldr	r3, [r3, #12]
 800f794:	4a0a      	ldr	r2, [pc, #40]	@ (800f7c0 <vTaskSwitchContext+0xc0>)
 800f796:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f798:	4b09      	ldr	r3, [pc, #36]	@ (800f7c0 <vTaskSwitchContext+0xc0>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	334c      	adds	r3, #76	@ 0x4c
 800f79e:	4a09      	ldr	r2, [pc, #36]	@ (800f7c4 <vTaskSwitchContext+0xc4>)
 800f7a0:	6013      	str	r3, [r2, #0]
}
 800f7a2:	bf00      	nop
 800f7a4:	371c      	adds	r7, #28
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ac:	4770      	bx	lr
 800f7ae:	bf00      	nop
 800f7b0:	2000553c 	.word	0x2000553c
 800f7b4:	20005528 	.word	0x20005528
 800f7b8:	2000551c 	.word	0x2000551c
 800f7bc:	20005418 	.word	0x20005418
 800f7c0:	20005414 	.word	0x20005414
 800f7c4:	20000118 	.word	0x20000118

0800f7c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b084      	sub	sp, #16
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
 800f7d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d10b      	bne.n	800f7f0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7dc:	f383 8811 	msr	BASEPRI, r3
 800f7e0:	f3bf 8f6f 	isb	sy
 800f7e4:	f3bf 8f4f 	dsb	sy
 800f7e8:	60fb      	str	r3, [r7, #12]
}
 800f7ea:	bf00      	nop
 800f7ec:	bf00      	nop
 800f7ee:	e7fd      	b.n	800f7ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f7f0:	4b07      	ldr	r3, [pc, #28]	@ (800f810 <vTaskPlaceOnEventList+0x48>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	3318      	adds	r3, #24
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f7fe fbec 	bl	800dfd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f7fe:	2101      	movs	r1, #1
 800f800:	6838      	ldr	r0, [r7, #0]
 800f802:	f000 fb8d 	bl	800ff20 <prvAddCurrentTaskToDelayedList>
}
 800f806:	bf00      	nop
 800f808:	3710      	adds	r7, #16
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	20005414 	.word	0x20005414

0800f814 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b086      	sub	sp, #24
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	68db      	ldr	r3, [r3, #12]
 800f820:	68db      	ldr	r3, [r3, #12]
 800f822:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f824:	693b      	ldr	r3, [r7, #16]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d10b      	bne.n	800f842 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f82a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f82e:	f383 8811 	msr	BASEPRI, r3
 800f832:	f3bf 8f6f 	isb	sy
 800f836:	f3bf 8f4f 	dsb	sy
 800f83a:	60fb      	str	r3, [r7, #12]
}
 800f83c:	bf00      	nop
 800f83e:	bf00      	nop
 800f840:	e7fd      	b.n	800f83e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f842:	693b      	ldr	r3, [r7, #16]
 800f844:	3318      	adds	r3, #24
 800f846:	4618      	mov	r0, r3
 800f848:	f7fe fbfe 	bl	800e048 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f84c:	4b1d      	ldr	r3, [pc, #116]	@ (800f8c4 <xTaskRemoveFromEventList+0xb0>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d11c      	bne.n	800f88e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	3304      	adds	r3, #4
 800f858:	4618      	mov	r0, r3
 800f85a:	f7fe fbf5 	bl	800e048 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f85e:	693b      	ldr	r3, [r7, #16]
 800f860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f862:	2201      	movs	r2, #1
 800f864:	409a      	lsls	r2, r3
 800f866:	4b18      	ldr	r3, [pc, #96]	@ (800f8c8 <xTaskRemoveFromEventList+0xb4>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	4313      	orrs	r3, r2
 800f86c:	4a16      	ldr	r2, [pc, #88]	@ (800f8c8 <xTaskRemoveFromEventList+0xb4>)
 800f86e:	6013      	str	r3, [r2, #0]
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f874:	4613      	mov	r3, r2
 800f876:	009b      	lsls	r3, r3, #2
 800f878:	4413      	add	r3, r2
 800f87a:	009b      	lsls	r3, r3, #2
 800f87c:	4a13      	ldr	r2, [pc, #76]	@ (800f8cc <xTaskRemoveFromEventList+0xb8>)
 800f87e:	441a      	add	r2, r3
 800f880:	693b      	ldr	r3, [r7, #16]
 800f882:	3304      	adds	r3, #4
 800f884:	4619      	mov	r1, r3
 800f886:	4610      	mov	r0, r2
 800f888:	f7fe fb81 	bl	800df8e <vListInsertEnd>
 800f88c:	e005      	b.n	800f89a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	3318      	adds	r3, #24
 800f892:	4619      	mov	r1, r3
 800f894:	480e      	ldr	r0, [pc, #56]	@ (800f8d0 <xTaskRemoveFromEventList+0xbc>)
 800f896:	f7fe fb7a 	bl	800df8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f89e:	4b0d      	ldr	r3, [pc, #52]	@ (800f8d4 <xTaskRemoveFromEventList+0xc0>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d905      	bls.n	800f8b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f8ac:	4b0a      	ldr	r3, [pc, #40]	@ (800f8d8 <xTaskRemoveFromEventList+0xc4>)
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	601a      	str	r2, [r3, #0]
 800f8b2:	e001      	b.n	800f8b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f8b8:	697b      	ldr	r3, [r7, #20]
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3718      	adds	r7, #24
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}
 800f8c2:	bf00      	nop
 800f8c4:	2000553c 	.word	0x2000553c
 800f8c8:	2000551c 	.word	0x2000551c
 800f8cc:	20005418 	.word	0x20005418
 800f8d0:	200054d4 	.word	0x200054d4
 800f8d4:	20005414 	.word	0x20005414
 800f8d8:	20005528 	.word	0x20005528

0800f8dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f8e4:	4b06      	ldr	r3, [pc, #24]	@ (800f900 <vTaskInternalSetTimeOutState+0x24>)
 800f8e6:	681a      	ldr	r2, [r3, #0]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f8ec:	4b05      	ldr	r3, [pc, #20]	@ (800f904 <vTaskInternalSetTimeOutState+0x28>)
 800f8ee:	681a      	ldr	r2, [r3, #0]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	605a      	str	r2, [r3, #4]
}
 800f8f4:	bf00      	nop
 800f8f6:	370c      	adds	r7, #12
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fe:	4770      	bx	lr
 800f900:	2000552c 	.word	0x2000552c
 800f904:	20005518 	.word	0x20005518

0800f908 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b088      	sub	sp, #32
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d10b      	bne.n	800f930 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f91c:	f383 8811 	msr	BASEPRI, r3
 800f920:	f3bf 8f6f 	isb	sy
 800f924:	f3bf 8f4f 	dsb	sy
 800f928:	613b      	str	r3, [r7, #16]
}
 800f92a:	bf00      	nop
 800f92c:	bf00      	nop
 800f92e:	e7fd      	b.n	800f92c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d10b      	bne.n	800f94e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f93a:	f383 8811 	msr	BASEPRI, r3
 800f93e:	f3bf 8f6f 	isb	sy
 800f942:	f3bf 8f4f 	dsb	sy
 800f946:	60fb      	str	r3, [r7, #12]
}
 800f948:	bf00      	nop
 800f94a:	bf00      	nop
 800f94c:	e7fd      	b.n	800f94a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f94e:	f000 fc7b 	bl	8010248 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f952:	4b1d      	ldr	r3, [pc, #116]	@ (800f9c8 <xTaskCheckForTimeOut+0xc0>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	69ba      	ldr	r2, [r7, #24]
 800f95e:	1ad3      	subs	r3, r2, r3
 800f960:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f96a:	d102      	bne.n	800f972 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f96c:	2300      	movs	r3, #0
 800f96e:	61fb      	str	r3, [r7, #28]
 800f970:	e023      	b.n	800f9ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681a      	ldr	r2, [r3, #0]
 800f976:	4b15      	ldr	r3, [pc, #84]	@ (800f9cc <xTaskCheckForTimeOut+0xc4>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d007      	beq.n	800f98e <xTaskCheckForTimeOut+0x86>
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	685b      	ldr	r3, [r3, #4]
 800f982:	69ba      	ldr	r2, [r7, #24]
 800f984:	429a      	cmp	r2, r3
 800f986:	d302      	bcc.n	800f98e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f988:	2301      	movs	r3, #1
 800f98a:	61fb      	str	r3, [r7, #28]
 800f98c:	e015      	b.n	800f9ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	697a      	ldr	r2, [r7, #20]
 800f994:	429a      	cmp	r2, r3
 800f996:	d20b      	bcs.n	800f9b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	1ad2      	subs	r2, r2, r3
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f7ff ff99 	bl	800f8dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	61fb      	str	r3, [r7, #28]
 800f9ae:	e004      	b.n	800f9ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f9ba:	f000 fc77 	bl	80102ac <vPortExitCritical>

	return xReturn;
 800f9be:	69fb      	ldr	r3, [r7, #28]
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3720      	adds	r7, #32
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	20005518 	.word	0x20005518
 800f9cc:	2000552c 	.word	0x2000552c

0800f9d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f9d4:	4b03      	ldr	r3, [pc, #12]	@ (800f9e4 <vTaskMissedYield+0x14>)
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	601a      	str	r2, [r3, #0]
}
 800f9da:	bf00      	nop
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr
 800f9e4:	20005528 	.word	0x20005528

0800f9e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f9f0:	f000 f852 	bl	800fa98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f9f4:	4b06      	ldr	r3, [pc, #24]	@ (800fa10 <prvIdleTask+0x28>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	2b01      	cmp	r3, #1
 800f9fa:	d9f9      	bls.n	800f9f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f9fc:	4b05      	ldr	r3, [pc, #20]	@ (800fa14 <prvIdleTask+0x2c>)
 800f9fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa02:	601a      	str	r2, [r3, #0]
 800fa04:	f3bf 8f4f 	dsb	sy
 800fa08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fa0c:	e7f0      	b.n	800f9f0 <prvIdleTask+0x8>
 800fa0e:	bf00      	nop
 800fa10:	20005418 	.word	0x20005418
 800fa14:	e000ed04 	.word	0xe000ed04

0800fa18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fa1e:	2300      	movs	r3, #0
 800fa20:	607b      	str	r3, [r7, #4]
 800fa22:	e00c      	b.n	800fa3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fa24:	687a      	ldr	r2, [r7, #4]
 800fa26:	4613      	mov	r3, r2
 800fa28:	009b      	lsls	r3, r3, #2
 800fa2a:	4413      	add	r3, r2
 800fa2c:	009b      	lsls	r3, r3, #2
 800fa2e:	4a12      	ldr	r2, [pc, #72]	@ (800fa78 <prvInitialiseTaskLists+0x60>)
 800fa30:	4413      	add	r3, r2
 800fa32:	4618      	mov	r0, r3
 800fa34:	f7fe fa7e 	bl	800df34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	607b      	str	r3, [r7, #4]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	2b06      	cmp	r3, #6
 800fa42:	d9ef      	bls.n	800fa24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fa44:	480d      	ldr	r0, [pc, #52]	@ (800fa7c <prvInitialiseTaskLists+0x64>)
 800fa46:	f7fe fa75 	bl	800df34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fa4a:	480d      	ldr	r0, [pc, #52]	@ (800fa80 <prvInitialiseTaskLists+0x68>)
 800fa4c:	f7fe fa72 	bl	800df34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fa50:	480c      	ldr	r0, [pc, #48]	@ (800fa84 <prvInitialiseTaskLists+0x6c>)
 800fa52:	f7fe fa6f 	bl	800df34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fa56:	480c      	ldr	r0, [pc, #48]	@ (800fa88 <prvInitialiseTaskLists+0x70>)
 800fa58:	f7fe fa6c 	bl	800df34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fa5c:	480b      	ldr	r0, [pc, #44]	@ (800fa8c <prvInitialiseTaskLists+0x74>)
 800fa5e:	f7fe fa69 	bl	800df34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fa62:	4b0b      	ldr	r3, [pc, #44]	@ (800fa90 <prvInitialiseTaskLists+0x78>)
 800fa64:	4a05      	ldr	r2, [pc, #20]	@ (800fa7c <prvInitialiseTaskLists+0x64>)
 800fa66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fa68:	4b0a      	ldr	r3, [pc, #40]	@ (800fa94 <prvInitialiseTaskLists+0x7c>)
 800fa6a:	4a05      	ldr	r2, [pc, #20]	@ (800fa80 <prvInitialiseTaskLists+0x68>)
 800fa6c:	601a      	str	r2, [r3, #0]
}
 800fa6e:	bf00      	nop
 800fa70:	3708      	adds	r7, #8
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}
 800fa76:	bf00      	nop
 800fa78:	20005418 	.word	0x20005418
 800fa7c:	200054a4 	.word	0x200054a4
 800fa80:	200054b8 	.word	0x200054b8
 800fa84:	200054d4 	.word	0x200054d4
 800fa88:	200054e8 	.word	0x200054e8
 800fa8c:	20005500 	.word	0x20005500
 800fa90:	200054cc 	.word	0x200054cc
 800fa94:	200054d0 	.word	0x200054d0

0800fa98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fa9e:	e019      	b.n	800fad4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800faa0:	f000 fbd2 	bl	8010248 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800faa4:	4b10      	ldr	r3, [pc, #64]	@ (800fae8 <prvCheckTasksWaitingTermination+0x50>)
 800faa6:	68db      	ldr	r3, [r3, #12]
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	3304      	adds	r3, #4
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7fe fac9 	bl	800e048 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fab6:	4b0d      	ldr	r3, [pc, #52]	@ (800faec <prvCheckTasksWaitingTermination+0x54>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	3b01      	subs	r3, #1
 800fabc:	4a0b      	ldr	r2, [pc, #44]	@ (800faec <prvCheckTasksWaitingTermination+0x54>)
 800fabe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fac0:	4b0b      	ldr	r3, [pc, #44]	@ (800faf0 <prvCheckTasksWaitingTermination+0x58>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	3b01      	subs	r3, #1
 800fac6:	4a0a      	ldr	r2, [pc, #40]	@ (800faf0 <prvCheckTasksWaitingTermination+0x58>)
 800fac8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800faca:	f000 fbef 	bl	80102ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f000 f810 	bl	800faf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fad4:	4b06      	ldr	r3, [pc, #24]	@ (800faf0 <prvCheckTasksWaitingTermination+0x58>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d1e1      	bne.n	800faa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fadc:	bf00      	nop
 800fade:	bf00      	nop
 800fae0:	3708      	adds	r7, #8
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
 800fae6:	bf00      	nop
 800fae8:	200054e8 	.word	0x200054e8
 800faec:	20005514 	.word	0x20005514
 800faf0:	200054fc 	.word	0x200054fc

0800faf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	334c      	adds	r3, #76	@ 0x4c
 800fb00:	4618      	mov	r0, r3
 800fb02:	f00c fdb5 	bl	801c670 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d108      	bne.n	800fb22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb14:	4618      	mov	r0, r3
 800fb16:	f000 fd87 	bl	8010628 <vPortFree>
				vPortFree( pxTCB );
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f000 fd84 	bl	8010628 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fb20:	e019      	b.n	800fb56 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800fb28:	2b01      	cmp	r3, #1
 800fb2a:	d103      	bne.n	800fb34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f000 fd7b 	bl	8010628 <vPortFree>
	}
 800fb32:	e010      	b.n	800fb56 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800fb3a:	2b02      	cmp	r3, #2
 800fb3c:	d00b      	beq.n	800fb56 <prvDeleteTCB+0x62>
	__asm volatile
 800fb3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb42:	f383 8811 	msr	BASEPRI, r3
 800fb46:	f3bf 8f6f 	isb	sy
 800fb4a:	f3bf 8f4f 	dsb	sy
 800fb4e:	60fb      	str	r3, [r7, #12]
}
 800fb50:	bf00      	nop
 800fb52:	bf00      	nop
 800fb54:	e7fd      	b.n	800fb52 <prvDeleteTCB+0x5e>
	}
 800fb56:	bf00      	nop
 800fb58:	3710      	adds	r7, #16
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}
	...

0800fb60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fb60:	b480      	push	{r7}
 800fb62:	b083      	sub	sp, #12
 800fb64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb66:	4b0c      	ldr	r3, [pc, #48]	@ (800fb98 <prvResetNextTaskUnblockTime+0x38>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d104      	bne.n	800fb7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fb70:	4b0a      	ldr	r3, [pc, #40]	@ (800fb9c <prvResetNextTaskUnblockTime+0x3c>)
 800fb72:	f04f 32ff 	mov.w	r2, #4294967295
 800fb76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fb78:	e008      	b.n	800fb8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb7a:	4b07      	ldr	r3, [pc, #28]	@ (800fb98 <prvResetNextTaskUnblockTime+0x38>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	68db      	ldr	r3, [r3, #12]
 800fb80:	68db      	ldr	r3, [r3, #12]
 800fb82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	685b      	ldr	r3, [r3, #4]
 800fb88:	4a04      	ldr	r2, [pc, #16]	@ (800fb9c <prvResetNextTaskUnblockTime+0x3c>)
 800fb8a:	6013      	str	r3, [r2, #0]
}
 800fb8c:	bf00      	nop
 800fb8e:	370c      	adds	r7, #12
 800fb90:	46bd      	mov	sp, r7
 800fb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb96:	4770      	bx	lr
 800fb98:	200054cc 	.word	0x200054cc
 800fb9c:	20005534 	.word	0x20005534

0800fba0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fba0:	b480      	push	{r7}
 800fba2:	b083      	sub	sp, #12
 800fba4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fba6:	4b0b      	ldr	r3, [pc, #44]	@ (800fbd4 <xTaskGetSchedulerState+0x34>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d102      	bne.n	800fbb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fbae:	2301      	movs	r3, #1
 800fbb0:	607b      	str	r3, [r7, #4]
 800fbb2:	e008      	b.n	800fbc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbb4:	4b08      	ldr	r3, [pc, #32]	@ (800fbd8 <xTaskGetSchedulerState+0x38>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d102      	bne.n	800fbc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fbbc:	2302      	movs	r3, #2
 800fbbe:	607b      	str	r3, [r7, #4]
 800fbc0:	e001      	b.n	800fbc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fbc6:	687b      	ldr	r3, [r7, #4]
	}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	370c      	adds	r7, #12
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd2:	4770      	bx	lr
 800fbd4:	20005520 	.word	0x20005520
 800fbd8:	2000553c 	.word	0x2000553c

0800fbdc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b084      	sub	sp, #16
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d05e      	beq.n	800fcb0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbf6:	4b31      	ldr	r3, [pc, #196]	@ (800fcbc <xTaskPriorityInherit+0xe0>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	d24e      	bcs.n	800fc9e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fc00:	68bb      	ldr	r3, [r7, #8]
 800fc02:	699b      	ldr	r3, [r3, #24]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	db06      	blt.n	800fc16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc08:	4b2c      	ldr	r3, [pc, #176]	@ (800fcbc <xTaskPriorityInherit+0xe0>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc0e:	f1c3 0207 	rsb	r2, r3, #7
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	6959      	ldr	r1, [r3, #20]
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc1e:	4613      	mov	r3, r2
 800fc20:	009b      	lsls	r3, r3, #2
 800fc22:	4413      	add	r3, r2
 800fc24:	009b      	lsls	r3, r3, #2
 800fc26:	4a26      	ldr	r2, [pc, #152]	@ (800fcc0 <xTaskPriorityInherit+0xe4>)
 800fc28:	4413      	add	r3, r2
 800fc2a:	4299      	cmp	r1, r3
 800fc2c:	d12f      	bne.n	800fc8e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	3304      	adds	r3, #4
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7fe fa08 	bl	800e048 <uxListRemove>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d10a      	bne.n	800fc54 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc42:	2201      	movs	r2, #1
 800fc44:	fa02 f303 	lsl.w	r3, r2, r3
 800fc48:	43da      	mvns	r2, r3
 800fc4a:	4b1e      	ldr	r3, [pc, #120]	@ (800fcc4 <xTaskPriorityInherit+0xe8>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	4013      	ands	r3, r2
 800fc50:	4a1c      	ldr	r2, [pc, #112]	@ (800fcc4 <xTaskPriorityInherit+0xe8>)
 800fc52:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fc54:	4b19      	ldr	r3, [pc, #100]	@ (800fcbc <xTaskPriorityInherit+0xe0>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc62:	2201      	movs	r2, #1
 800fc64:	409a      	lsls	r2, r3
 800fc66:	4b17      	ldr	r3, [pc, #92]	@ (800fcc4 <xTaskPriorityInherit+0xe8>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	4313      	orrs	r3, r2
 800fc6c:	4a15      	ldr	r2, [pc, #84]	@ (800fcc4 <xTaskPriorityInherit+0xe8>)
 800fc6e:	6013      	str	r3, [r2, #0]
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc74:	4613      	mov	r3, r2
 800fc76:	009b      	lsls	r3, r3, #2
 800fc78:	4413      	add	r3, r2
 800fc7a:	009b      	lsls	r3, r3, #2
 800fc7c:	4a10      	ldr	r2, [pc, #64]	@ (800fcc0 <xTaskPriorityInherit+0xe4>)
 800fc7e:	441a      	add	r2, r3
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	3304      	adds	r3, #4
 800fc84:	4619      	mov	r1, r3
 800fc86:	4610      	mov	r0, r2
 800fc88:	f7fe f981 	bl	800df8e <vListInsertEnd>
 800fc8c:	e004      	b.n	800fc98 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fc8e:	4b0b      	ldr	r3, [pc, #44]	@ (800fcbc <xTaskPriorityInherit+0xe0>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fc98:	2301      	movs	r3, #1
 800fc9a:	60fb      	str	r3, [r7, #12]
 800fc9c:	e008      	b.n	800fcb0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fca2:	4b06      	ldr	r3, [pc, #24]	@ (800fcbc <xTaskPriorityInherit+0xe0>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d201      	bcs.n	800fcb0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fcac:	2301      	movs	r3, #1
 800fcae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
	}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3710      	adds	r7, #16
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	bf00      	nop
 800fcbc:	20005414 	.word	0x20005414
 800fcc0:	20005418 	.word	0x20005418
 800fcc4:	2000551c 	.word	0x2000551c

0800fcc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b086      	sub	sp, #24
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d070      	beq.n	800fdc0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fcde:	4b3b      	ldr	r3, [pc, #236]	@ (800fdcc <xTaskPriorityDisinherit+0x104>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	693a      	ldr	r2, [r7, #16]
 800fce4:	429a      	cmp	r2, r3
 800fce6:	d00b      	beq.n	800fd00 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800fce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcec:	f383 8811 	msr	BASEPRI, r3
 800fcf0:	f3bf 8f6f 	isb	sy
 800fcf4:	f3bf 8f4f 	dsb	sy
 800fcf8:	60fb      	str	r3, [r7, #12]
}
 800fcfa:	bf00      	nop
 800fcfc:	bf00      	nop
 800fcfe:	e7fd      	b.n	800fcfc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fd00:	693b      	ldr	r3, [r7, #16]
 800fd02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d10b      	bne.n	800fd20 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800fd08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd0c:	f383 8811 	msr	BASEPRI, r3
 800fd10:	f3bf 8f6f 	isb	sy
 800fd14:	f3bf 8f4f 	dsb	sy
 800fd18:	60bb      	str	r3, [r7, #8]
}
 800fd1a:	bf00      	nop
 800fd1c:	bf00      	nop
 800fd1e:	e7fd      	b.n	800fd1c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800fd20:	693b      	ldr	r3, [r7, #16]
 800fd22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fd24:	1e5a      	subs	r2, r3, #1
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd2e:	693b      	ldr	r3, [r7, #16]
 800fd30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d044      	beq.n	800fdc0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d140      	bne.n	800fdc0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd3e:	693b      	ldr	r3, [r7, #16]
 800fd40:	3304      	adds	r3, #4
 800fd42:	4618      	mov	r0, r3
 800fd44:	f7fe f980 	bl	800e048 <uxListRemove>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d115      	bne.n	800fd7a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fd4e:	693b      	ldr	r3, [r7, #16]
 800fd50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd52:	491f      	ldr	r1, [pc, #124]	@ (800fdd0 <xTaskPriorityDisinherit+0x108>)
 800fd54:	4613      	mov	r3, r2
 800fd56:	009b      	lsls	r3, r3, #2
 800fd58:	4413      	add	r3, r2
 800fd5a:	009b      	lsls	r3, r3, #2
 800fd5c:	440b      	add	r3, r1
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d10a      	bne.n	800fd7a <xTaskPriorityDisinherit+0xb2>
 800fd64:	693b      	ldr	r3, [r7, #16]
 800fd66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd68:	2201      	movs	r2, #1
 800fd6a:	fa02 f303 	lsl.w	r3, r2, r3
 800fd6e:	43da      	mvns	r2, r3
 800fd70:	4b18      	ldr	r3, [pc, #96]	@ (800fdd4 <xTaskPriorityDisinherit+0x10c>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	4013      	ands	r3, r2
 800fd76:	4a17      	ldr	r2, [pc, #92]	@ (800fdd4 <xTaskPriorityDisinherit+0x10c>)
 800fd78:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fd7a:	693b      	ldr	r3, [r7, #16]
 800fd7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fd7e:	693b      	ldr	r3, [r7, #16]
 800fd80:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd82:	693b      	ldr	r3, [r7, #16]
 800fd84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd86:	f1c3 0207 	rsb	r2, r3, #7
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd92:	2201      	movs	r2, #1
 800fd94:	409a      	lsls	r2, r3
 800fd96:	4b0f      	ldr	r3, [pc, #60]	@ (800fdd4 <xTaskPriorityDisinherit+0x10c>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	4313      	orrs	r3, r2
 800fd9c:	4a0d      	ldr	r2, [pc, #52]	@ (800fdd4 <xTaskPriorityDisinherit+0x10c>)
 800fd9e:	6013      	str	r3, [r2, #0]
 800fda0:	693b      	ldr	r3, [r7, #16]
 800fda2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fda4:	4613      	mov	r3, r2
 800fda6:	009b      	lsls	r3, r3, #2
 800fda8:	4413      	add	r3, r2
 800fdaa:	009b      	lsls	r3, r3, #2
 800fdac:	4a08      	ldr	r2, [pc, #32]	@ (800fdd0 <xTaskPriorityDisinherit+0x108>)
 800fdae:	441a      	add	r2, r3
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	3304      	adds	r3, #4
 800fdb4:	4619      	mov	r1, r3
 800fdb6:	4610      	mov	r0, r2
 800fdb8:	f7fe f8e9 	bl	800df8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fdc0:	697b      	ldr	r3, [r7, #20]
	}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3718      	adds	r7, #24
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}
 800fdca:	bf00      	nop
 800fdcc:	20005414 	.word	0x20005414
 800fdd0:	20005418 	.word	0x20005418
 800fdd4:	2000551c 	.word	0x2000551c

0800fdd8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b088      	sub	sp, #32
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fde6:	2301      	movs	r3, #1
 800fde8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d079      	beq.n	800fee4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fdf0:	69bb      	ldr	r3, [r7, #24]
 800fdf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d10b      	bne.n	800fe10 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800fdf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdfc:	f383 8811 	msr	BASEPRI, r3
 800fe00:	f3bf 8f6f 	isb	sy
 800fe04:	f3bf 8f4f 	dsb	sy
 800fe08:	60fb      	str	r3, [r7, #12]
}
 800fe0a:	bf00      	nop
 800fe0c:	bf00      	nop
 800fe0e:	e7fd      	b.n	800fe0c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fe10:	69bb      	ldr	r3, [r7, #24]
 800fe12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe14:	683a      	ldr	r2, [r7, #0]
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d902      	bls.n	800fe20 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	61fb      	str	r3, [r7, #28]
 800fe1e:	e002      	b.n	800fe26 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fe20:	69bb      	ldr	r3, [r7, #24]
 800fe22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe24:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fe26:	69bb      	ldr	r3, [r7, #24]
 800fe28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe2a:	69fa      	ldr	r2, [r7, #28]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d059      	beq.n	800fee4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fe30:	69bb      	ldr	r3, [r7, #24]
 800fe32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fe34:	697a      	ldr	r2, [r7, #20]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d154      	bne.n	800fee4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fe3a:	4b2c      	ldr	r3, [pc, #176]	@ (800feec <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	69ba      	ldr	r2, [r7, #24]
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d10b      	bne.n	800fe5c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800fe44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe48:	f383 8811 	msr	BASEPRI, r3
 800fe4c:	f3bf 8f6f 	isb	sy
 800fe50:	f3bf 8f4f 	dsb	sy
 800fe54:	60bb      	str	r3, [r7, #8]
}
 800fe56:	bf00      	nop
 800fe58:	bf00      	nop
 800fe5a:	e7fd      	b.n	800fe58 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fe5c:	69bb      	ldr	r3, [r7, #24]
 800fe5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe60:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fe62:	69bb      	ldr	r3, [r7, #24]
 800fe64:	69fa      	ldr	r2, [r7, #28]
 800fe66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fe68:	69bb      	ldr	r3, [r7, #24]
 800fe6a:	699b      	ldr	r3, [r3, #24]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	db04      	blt.n	800fe7a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe70:	69fb      	ldr	r3, [r7, #28]
 800fe72:	f1c3 0207 	rsb	r2, r3, #7
 800fe76:	69bb      	ldr	r3, [r7, #24]
 800fe78:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fe7a:	69bb      	ldr	r3, [r7, #24]
 800fe7c:	6959      	ldr	r1, [r3, #20]
 800fe7e:	693a      	ldr	r2, [r7, #16]
 800fe80:	4613      	mov	r3, r2
 800fe82:	009b      	lsls	r3, r3, #2
 800fe84:	4413      	add	r3, r2
 800fe86:	009b      	lsls	r3, r3, #2
 800fe88:	4a19      	ldr	r2, [pc, #100]	@ (800fef0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800fe8a:	4413      	add	r3, r2
 800fe8c:	4299      	cmp	r1, r3
 800fe8e:	d129      	bne.n	800fee4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe90:	69bb      	ldr	r3, [r7, #24]
 800fe92:	3304      	adds	r3, #4
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7fe f8d7 	bl	800e048 <uxListRemove>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d10a      	bne.n	800feb6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800fea0:	69bb      	ldr	r3, [r7, #24]
 800fea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fea4:	2201      	movs	r2, #1
 800fea6:	fa02 f303 	lsl.w	r3, r2, r3
 800feaa:	43da      	mvns	r2, r3
 800feac:	4b11      	ldr	r3, [pc, #68]	@ (800fef4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	4013      	ands	r3, r2
 800feb2:	4a10      	ldr	r2, [pc, #64]	@ (800fef4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800feb4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800feb6:	69bb      	ldr	r3, [r7, #24]
 800feb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800feba:	2201      	movs	r2, #1
 800febc:	409a      	lsls	r2, r3
 800febe:	4b0d      	ldr	r3, [pc, #52]	@ (800fef4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	4313      	orrs	r3, r2
 800fec4:	4a0b      	ldr	r2, [pc, #44]	@ (800fef4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800fec6:	6013      	str	r3, [r2, #0]
 800fec8:	69bb      	ldr	r3, [r7, #24]
 800feca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fecc:	4613      	mov	r3, r2
 800fece:	009b      	lsls	r3, r3, #2
 800fed0:	4413      	add	r3, r2
 800fed2:	009b      	lsls	r3, r3, #2
 800fed4:	4a06      	ldr	r2, [pc, #24]	@ (800fef0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800fed6:	441a      	add	r2, r3
 800fed8:	69bb      	ldr	r3, [r7, #24]
 800feda:	3304      	adds	r3, #4
 800fedc:	4619      	mov	r1, r3
 800fede:	4610      	mov	r0, r2
 800fee0:	f7fe f855 	bl	800df8e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fee4:	bf00      	nop
 800fee6:	3720      	adds	r7, #32
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}
 800feec:	20005414 	.word	0x20005414
 800fef0:	20005418 	.word	0x20005418
 800fef4:	2000551c 	.word	0x2000551c

0800fef8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fef8:	b480      	push	{r7}
 800fefa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fefc:	4b07      	ldr	r3, [pc, #28]	@ (800ff1c <pvTaskIncrementMutexHeldCount+0x24>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d004      	beq.n	800ff0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ff04:	4b05      	ldr	r3, [pc, #20]	@ (800ff1c <pvTaskIncrementMutexHeldCount+0x24>)
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ff0a:	3201      	adds	r2, #1
 800ff0c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800ff0e:	4b03      	ldr	r3, [pc, #12]	@ (800ff1c <pvTaskIncrementMutexHeldCount+0x24>)
 800ff10:	681b      	ldr	r3, [r3, #0]
	}
 800ff12:	4618      	mov	r0, r3
 800ff14:	46bd      	mov	sp, r7
 800ff16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1a:	4770      	bx	lr
 800ff1c:	20005414 	.word	0x20005414

0800ff20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b084      	sub	sp, #16
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
 800ff28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ff2a:	4b29      	ldr	r3, [pc, #164]	@ (800ffd0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff30:	4b28      	ldr	r3, [pc, #160]	@ (800ffd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	3304      	adds	r3, #4
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7fe f886 	bl	800e048 <uxListRemove>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d10b      	bne.n	800ff5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ff42:	4b24      	ldr	r3, [pc, #144]	@ (800ffd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff48:	2201      	movs	r2, #1
 800ff4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ff4e:	43da      	mvns	r2, r3
 800ff50:	4b21      	ldr	r3, [pc, #132]	@ (800ffd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	4013      	ands	r3, r2
 800ff56:	4a20      	ldr	r2, [pc, #128]	@ (800ffd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ff58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff60:	d10a      	bne.n	800ff78 <prvAddCurrentTaskToDelayedList+0x58>
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d007      	beq.n	800ff78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ff68:	4b1a      	ldr	r3, [pc, #104]	@ (800ffd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	3304      	adds	r3, #4
 800ff6e:	4619      	mov	r1, r3
 800ff70:	481a      	ldr	r0, [pc, #104]	@ (800ffdc <prvAddCurrentTaskToDelayedList+0xbc>)
 800ff72:	f7fe f80c 	bl	800df8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ff76:	e026      	b.n	800ffc6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ff78:	68fa      	ldr	r2, [r7, #12]
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	4413      	add	r3, r2
 800ff7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ff80:	4b14      	ldr	r3, [pc, #80]	@ (800ffd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	68ba      	ldr	r2, [r7, #8]
 800ff86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ff88:	68ba      	ldr	r2, [r7, #8]
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d209      	bcs.n	800ffa4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ff90:	4b13      	ldr	r3, [pc, #76]	@ (800ffe0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ff92:	681a      	ldr	r2, [r3, #0]
 800ff94:	4b0f      	ldr	r3, [pc, #60]	@ (800ffd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	3304      	adds	r3, #4
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	4610      	mov	r0, r2
 800ff9e:	f7fe f81a 	bl	800dfd6 <vListInsert>
}
 800ffa2:	e010      	b.n	800ffc6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ffa4:	4b0f      	ldr	r3, [pc, #60]	@ (800ffe4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ffa6:	681a      	ldr	r2, [r3, #0]
 800ffa8:	4b0a      	ldr	r3, [pc, #40]	@ (800ffd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	3304      	adds	r3, #4
 800ffae:	4619      	mov	r1, r3
 800ffb0:	4610      	mov	r0, r2
 800ffb2:	f7fe f810 	bl	800dfd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ffb6:	4b0c      	ldr	r3, [pc, #48]	@ (800ffe8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	68ba      	ldr	r2, [r7, #8]
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d202      	bcs.n	800ffc6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ffc0:	4a09      	ldr	r2, [pc, #36]	@ (800ffe8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	6013      	str	r3, [r2, #0]
}
 800ffc6:	bf00      	nop
 800ffc8:	3710      	adds	r7, #16
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}
 800ffce:	bf00      	nop
 800ffd0:	20005518 	.word	0x20005518
 800ffd4:	20005414 	.word	0x20005414
 800ffd8:	2000551c 	.word	0x2000551c
 800ffdc:	20005500 	.word	0x20005500
 800ffe0:	200054d0 	.word	0x200054d0
 800ffe4:	200054cc 	.word	0x200054cc
 800ffe8:	20005534 	.word	0x20005534

0800ffec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ffec:	b480      	push	{r7}
 800ffee:	b085      	sub	sp, #20
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	60f8      	str	r0, [r7, #12]
 800fff4:	60b9      	str	r1, [r7, #8]
 800fff6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	3b04      	subs	r3, #4
 800fffc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010004:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	3b04      	subs	r3, #4
 801000a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	f023 0201 	bic.w	r2, r3, #1
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	3b04      	subs	r3, #4
 801001a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801001c:	4a0c      	ldr	r2, [pc, #48]	@ (8010050 <pxPortInitialiseStack+0x64>)
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	3b14      	subs	r3, #20
 8010026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010028:	687a      	ldr	r2, [r7, #4]
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	3b04      	subs	r3, #4
 8010032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	f06f 0202 	mvn.w	r2, #2
 801003a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	3b20      	subs	r3, #32
 8010040:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010042:	68fb      	ldr	r3, [r7, #12]
}
 8010044:	4618      	mov	r0, r3
 8010046:	3714      	adds	r7, #20
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr
 8010050:	08010055 	.word	0x08010055

08010054 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010054:	b480      	push	{r7}
 8010056:	b085      	sub	sp, #20
 8010058:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801005a:	2300      	movs	r3, #0
 801005c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801005e:	4b13      	ldr	r3, [pc, #76]	@ (80100ac <prvTaskExitError+0x58>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010066:	d00b      	beq.n	8010080 <prvTaskExitError+0x2c>
	__asm volatile
 8010068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801006c:	f383 8811 	msr	BASEPRI, r3
 8010070:	f3bf 8f6f 	isb	sy
 8010074:	f3bf 8f4f 	dsb	sy
 8010078:	60fb      	str	r3, [r7, #12]
}
 801007a:	bf00      	nop
 801007c:	bf00      	nop
 801007e:	e7fd      	b.n	801007c <prvTaskExitError+0x28>
	__asm volatile
 8010080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010084:	f383 8811 	msr	BASEPRI, r3
 8010088:	f3bf 8f6f 	isb	sy
 801008c:	f3bf 8f4f 	dsb	sy
 8010090:	60bb      	str	r3, [r7, #8]
}
 8010092:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010094:	bf00      	nop
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d0fc      	beq.n	8010096 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801009c:	bf00      	nop
 801009e:	bf00      	nop
 80100a0:	3714      	adds	r7, #20
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr
 80100aa:	bf00      	nop
 80100ac:	20000098 	.word	0x20000098

080100b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80100b0:	4b07      	ldr	r3, [pc, #28]	@ (80100d0 <pxCurrentTCBConst2>)
 80100b2:	6819      	ldr	r1, [r3, #0]
 80100b4:	6808      	ldr	r0, [r1, #0]
 80100b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ba:	f380 8809 	msr	PSP, r0
 80100be:	f3bf 8f6f 	isb	sy
 80100c2:	f04f 0000 	mov.w	r0, #0
 80100c6:	f380 8811 	msr	BASEPRI, r0
 80100ca:	4770      	bx	lr
 80100cc:	f3af 8000 	nop.w

080100d0 <pxCurrentTCBConst2>:
 80100d0:	20005414 	.word	0x20005414
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80100d4:	bf00      	nop
 80100d6:	bf00      	nop

080100d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80100d8:	4808      	ldr	r0, [pc, #32]	@ (80100fc <prvPortStartFirstTask+0x24>)
 80100da:	6800      	ldr	r0, [r0, #0]
 80100dc:	6800      	ldr	r0, [r0, #0]
 80100de:	f380 8808 	msr	MSP, r0
 80100e2:	f04f 0000 	mov.w	r0, #0
 80100e6:	f380 8814 	msr	CONTROL, r0
 80100ea:	b662      	cpsie	i
 80100ec:	b661      	cpsie	f
 80100ee:	f3bf 8f4f 	dsb	sy
 80100f2:	f3bf 8f6f 	isb	sy
 80100f6:	df00      	svc	0
 80100f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80100fa:	bf00      	nop
 80100fc:	e000ed08 	.word	0xe000ed08

08010100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b086      	sub	sp, #24
 8010104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010106:	4b47      	ldr	r3, [pc, #284]	@ (8010224 <xPortStartScheduler+0x124>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	4a47      	ldr	r2, [pc, #284]	@ (8010228 <xPortStartScheduler+0x128>)
 801010c:	4293      	cmp	r3, r2
 801010e:	d10b      	bne.n	8010128 <xPortStartScheduler+0x28>
	__asm volatile
 8010110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010114:	f383 8811 	msr	BASEPRI, r3
 8010118:	f3bf 8f6f 	isb	sy
 801011c:	f3bf 8f4f 	dsb	sy
 8010120:	60fb      	str	r3, [r7, #12]
}
 8010122:	bf00      	nop
 8010124:	bf00      	nop
 8010126:	e7fd      	b.n	8010124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010128:	4b3e      	ldr	r3, [pc, #248]	@ (8010224 <xPortStartScheduler+0x124>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	4a3f      	ldr	r2, [pc, #252]	@ (801022c <xPortStartScheduler+0x12c>)
 801012e:	4293      	cmp	r3, r2
 8010130:	d10b      	bne.n	801014a <xPortStartScheduler+0x4a>
	__asm volatile
 8010132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010136:	f383 8811 	msr	BASEPRI, r3
 801013a:	f3bf 8f6f 	isb	sy
 801013e:	f3bf 8f4f 	dsb	sy
 8010142:	613b      	str	r3, [r7, #16]
}
 8010144:	bf00      	nop
 8010146:	bf00      	nop
 8010148:	e7fd      	b.n	8010146 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801014a:	4b39      	ldr	r3, [pc, #228]	@ (8010230 <xPortStartScheduler+0x130>)
 801014c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	781b      	ldrb	r3, [r3, #0]
 8010152:	b2db      	uxtb	r3, r3
 8010154:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	22ff      	movs	r2, #255	@ 0xff
 801015a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	b2db      	uxtb	r3, r3
 8010162:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010164:	78fb      	ldrb	r3, [r7, #3]
 8010166:	b2db      	uxtb	r3, r3
 8010168:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801016c:	b2da      	uxtb	r2, r3
 801016e:	4b31      	ldr	r3, [pc, #196]	@ (8010234 <xPortStartScheduler+0x134>)
 8010170:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010172:	4b31      	ldr	r3, [pc, #196]	@ (8010238 <xPortStartScheduler+0x138>)
 8010174:	2207      	movs	r2, #7
 8010176:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010178:	e009      	b.n	801018e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801017a:	4b2f      	ldr	r3, [pc, #188]	@ (8010238 <xPortStartScheduler+0x138>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	3b01      	subs	r3, #1
 8010180:	4a2d      	ldr	r2, [pc, #180]	@ (8010238 <xPortStartScheduler+0x138>)
 8010182:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010184:	78fb      	ldrb	r3, [r7, #3]
 8010186:	b2db      	uxtb	r3, r3
 8010188:	005b      	lsls	r3, r3, #1
 801018a:	b2db      	uxtb	r3, r3
 801018c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801018e:	78fb      	ldrb	r3, [r7, #3]
 8010190:	b2db      	uxtb	r3, r3
 8010192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010196:	2b80      	cmp	r3, #128	@ 0x80
 8010198:	d0ef      	beq.n	801017a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801019a:	4b27      	ldr	r3, [pc, #156]	@ (8010238 <xPortStartScheduler+0x138>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	f1c3 0307 	rsb	r3, r3, #7
 80101a2:	2b04      	cmp	r3, #4
 80101a4:	d00b      	beq.n	80101be <xPortStartScheduler+0xbe>
	__asm volatile
 80101a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101aa:	f383 8811 	msr	BASEPRI, r3
 80101ae:	f3bf 8f6f 	isb	sy
 80101b2:	f3bf 8f4f 	dsb	sy
 80101b6:	60bb      	str	r3, [r7, #8]
}
 80101b8:	bf00      	nop
 80101ba:	bf00      	nop
 80101bc:	e7fd      	b.n	80101ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80101be:	4b1e      	ldr	r3, [pc, #120]	@ (8010238 <xPortStartScheduler+0x138>)
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	021b      	lsls	r3, r3, #8
 80101c4:	4a1c      	ldr	r2, [pc, #112]	@ (8010238 <xPortStartScheduler+0x138>)
 80101c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80101c8:	4b1b      	ldr	r3, [pc, #108]	@ (8010238 <xPortStartScheduler+0x138>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80101d0:	4a19      	ldr	r2, [pc, #100]	@ (8010238 <xPortStartScheduler+0x138>)
 80101d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	b2da      	uxtb	r2, r3
 80101d8:	697b      	ldr	r3, [r7, #20]
 80101da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80101dc:	4b17      	ldr	r3, [pc, #92]	@ (801023c <xPortStartScheduler+0x13c>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	4a16      	ldr	r2, [pc, #88]	@ (801023c <xPortStartScheduler+0x13c>)
 80101e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80101e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80101e8:	4b14      	ldr	r3, [pc, #80]	@ (801023c <xPortStartScheduler+0x13c>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	4a13      	ldr	r2, [pc, #76]	@ (801023c <xPortStartScheduler+0x13c>)
 80101ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80101f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80101f4:	f000 f8da 	bl	80103ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80101f8:	4b11      	ldr	r3, [pc, #68]	@ (8010240 <xPortStartScheduler+0x140>)
 80101fa:	2200      	movs	r2, #0
 80101fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80101fe:	f000 f8f9 	bl	80103f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010202:	4b10      	ldr	r3, [pc, #64]	@ (8010244 <xPortStartScheduler+0x144>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	4a0f      	ldr	r2, [pc, #60]	@ (8010244 <xPortStartScheduler+0x144>)
 8010208:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801020c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801020e:	f7ff ff63 	bl	80100d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010212:	f7ff fa75 	bl	800f700 <vTaskSwitchContext>
	prvTaskExitError();
 8010216:	f7ff ff1d 	bl	8010054 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801021a:	2300      	movs	r3, #0
}
 801021c:	4618      	mov	r0, r3
 801021e:	3718      	adds	r7, #24
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}
 8010224:	e000ed00 	.word	0xe000ed00
 8010228:	410fc271 	.word	0x410fc271
 801022c:	410fc270 	.word	0x410fc270
 8010230:	e000e400 	.word	0xe000e400
 8010234:	20005540 	.word	0x20005540
 8010238:	20005544 	.word	0x20005544
 801023c:	e000ed20 	.word	0xe000ed20
 8010240:	20000098 	.word	0x20000098
 8010244:	e000ef34 	.word	0xe000ef34

08010248 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010248:	b480      	push	{r7}
 801024a:	b083      	sub	sp, #12
 801024c:	af00      	add	r7, sp, #0
	__asm volatile
 801024e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010252:	f383 8811 	msr	BASEPRI, r3
 8010256:	f3bf 8f6f 	isb	sy
 801025a:	f3bf 8f4f 	dsb	sy
 801025e:	607b      	str	r3, [r7, #4]
}
 8010260:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010262:	4b10      	ldr	r3, [pc, #64]	@ (80102a4 <vPortEnterCritical+0x5c>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	3301      	adds	r3, #1
 8010268:	4a0e      	ldr	r2, [pc, #56]	@ (80102a4 <vPortEnterCritical+0x5c>)
 801026a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801026c:	4b0d      	ldr	r3, [pc, #52]	@ (80102a4 <vPortEnterCritical+0x5c>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	2b01      	cmp	r3, #1
 8010272:	d110      	bne.n	8010296 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010274:	4b0c      	ldr	r3, [pc, #48]	@ (80102a8 <vPortEnterCritical+0x60>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	b2db      	uxtb	r3, r3
 801027a:	2b00      	cmp	r3, #0
 801027c:	d00b      	beq.n	8010296 <vPortEnterCritical+0x4e>
	__asm volatile
 801027e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010282:	f383 8811 	msr	BASEPRI, r3
 8010286:	f3bf 8f6f 	isb	sy
 801028a:	f3bf 8f4f 	dsb	sy
 801028e:	603b      	str	r3, [r7, #0]
}
 8010290:	bf00      	nop
 8010292:	bf00      	nop
 8010294:	e7fd      	b.n	8010292 <vPortEnterCritical+0x4a>
	}
}
 8010296:	bf00      	nop
 8010298:	370c      	adds	r7, #12
 801029a:	46bd      	mov	sp, r7
 801029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a0:	4770      	bx	lr
 80102a2:	bf00      	nop
 80102a4:	20000098 	.word	0x20000098
 80102a8:	e000ed04 	.word	0xe000ed04

080102ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80102ac:	b480      	push	{r7}
 80102ae:	b083      	sub	sp, #12
 80102b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80102b2:	4b12      	ldr	r3, [pc, #72]	@ (80102fc <vPortExitCritical+0x50>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d10b      	bne.n	80102d2 <vPortExitCritical+0x26>
	__asm volatile
 80102ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102be:	f383 8811 	msr	BASEPRI, r3
 80102c2:	f3bf 8f6f 	isb	sy
 80102c6:	f3bf 8f4f 	dsb	sy
 80102ca:	607b      	str	r3, [r7, #4]
}
 80102cc:	bf00      	nop
 80102ce:	bf00      	nop
 80102d0:	e7fd      	b.n	80102ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80102d2:	4b0a      	ldr	r3, [pc, #40]	@ (80102fc <vPortExitCritical+0x50>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	3b01      	subs	r3, #1
 80102d8:	4a08      	ldr	r2, [pc, #32]	@ (80102fc <vPortExitCritical+0x50>)
 80102da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80102dc:	4b07      	ldr	r3, [pc, #28]	@ (80102fc <vPortExitCritical+0x50>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d105      	bne.n	80102f0 <vPortExitCritical+0x44>
 80102e4:	2300      	movs	r3, #0
 80102e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	f383 8811 	msr	BASEPRI, r3
}
 80102ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80102f0:	bf00      	nop
 80102f2:	370c      	adds	r7, #12
 80102f4:	46bd      	mov	sp, r7
 80102f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fa:	4770      	bx	lr
 80102fc:	20000098 	.word	0x20000098

08010300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010300:	f3ef 8009 	mrs	r0, PSP
 8010304:	f3bf 8f6f 	isb	sy
 8010308:	4b15      	ldr	r3, [pc, #84]	@ (8010360 <pxCurrentTCBConst>)
 801030a:	681a      	ldr	r2, [r3, #0]
 801030c:	f01e 0f10 	tst.w	lr, #16
 8010310:	bf08      	it	eq
 8010312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801031a:	6010      	str	r0, [r2, #0]
 801031c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010320:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010324:	f380 8811 	msr	BASEPRI, r0
 8010328:	f3bf 8f4f 	dsb	sy
 801032c:	f3bf 8f6f 	isb	sy
 8010330:	f7ff f9e6 	bl	800f700 <vTaskSwitchContext>
 8010334:	f04f 0000 	mov.w	r0, #0
 8010338:	f380 8811 	msr	BASEPRI, r0
 801033c:	bc09      	pop	{r0, r3}
 801033e:	6819      	ldr	r1, [r3, #0]
 8010340:	6808      	ldr	r0, [r1, #0]
 8010342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010346:	f01e 0f10 	tst.w	lr, #16
 801034a:	bf08      	it	eq
 801034c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010350:	f380 8809 	msr	PSP, r0
 8010354:	f3bf 8f6f 	isb	sy
 8010358:	4770      	bx	lr
 801035a:	bf00      	nop
 801035c:	f3af 8000 	nop.w

08010360 <pxCurrentTCBConst>:
 8010360:	20005414 	.word	0x20005414
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010364:	bf00      	nop
 8010366:	bf00      	nop

08010368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b082      	sub	sp, #8
 801036c:	af00      	add	r7, sp, #0
	__asm volatile
 801036e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010372:	f383 8811 	msr	BASEPRI, r3
 8010376:	f3bf 8f6f 	isb	sy
 801037a:	f3bf 8f4f 	dsb	sy
 801037e:	607b      	str	r3, [r7, #4]
}
 8010380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010382:	f7ff f903 	bl	800f58c <xTaskIncrementTick>
 8010386:	4603      	mov	r3, r0
 8010388:	2b00      	cmp	r3, #0
 801038a:	d003      	beq.n	8010394 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801038c:	4b06      	ldr	r3, [pc, #24]	@ (80103a8 <SysTick_Handler+0x40>)
 801038e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010392:	601a      	str	r2, [r3, #0]
 8010394:	2300      	movs	r3, #0
 8010396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	f383 8811 	msr	BASEPRI, r3
}
 801039e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80103a0:	bf00      	nop
 80103a2:	3708      	adds	r7, #8
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}
 80103a8:	e000ed04 	.word	0xe000ed04

080103ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80103ac:	b480      	push	{r7}
 80103ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80103b0:	4b0b      	ldr	r3, [pc, #44]	@ (80103e0 <vPortSetupTimerInterrupt+0x34>)
 80103b2:	2200      	movs	r2, #0
 80103b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80103b6:	4b0b      	ldr	r3, [pc, #44]	@ (80103e4 <vPortSetupTimerInterrupt+0x38>)
 80103b8:	2200      	movs	r2, #0
 80103ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80103bc:	4b0a      	ldr	r3, [pc, #40]	@ (80103e8 <vPortSetupTimerInterrupt+0x3c>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	4a0a      	ldr	r2, [pc, #40]	@ (80103ec <vPortSetupTimerInterrupt+0x40>)
 80103c2:	fba2 2303 	umull	r2, r3, r2, r3
 80103c6:	099b      	lsrs	r3, r3, #6
 80103c8:	4a09      	ldr	r2, [pc, #36]	@ (80103f0 <vPortSetupTimerInterrupt+0x44>)
 80103ca:	3b01      	subs	r3, #1
 80103cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80103ce:	4b04      	ldr	r3, [pc, #16]	@ (80103e0 <vPortSetupTimerInterrupt+0x34>)
 80103d0:	2207      	movs	r2, #7
 80103d2:	601a      	str	r2, [r3, #0]
}
 80103d4:	bf00      	nop
 80103d6:	46bd      	mov	sp, r7
 80103d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103dc:	4770      	bx	lr
 80103de:	bf00      	nop
 80103e0:	e000e010 	.word	0xe000e010
 80103e4:	e000e018 	.word	0xe000e018
 80103e8:	20000000 	.word	0x20000000
 80103ec:	10624dd3 	.word	0x10624dd3
 80103f0:	e000e014 	.word	0xe000e014

080103f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80103f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010404 <vPortEnableVFP+0x10>
 80103f8:	6801      	ldr	r1, [r0, #0]
 80103fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80103fe:	6001      	str	r1, [r0, #0]
 8010400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010402:	bf00      	nop
 8010404:	e000ed88 	.word	0xe000ed88

08010408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010408:	b480      	push	{r7}
 801040a:	b085      	sub	sp, #20
 801040c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801040e:	f3ef 8305 	mrs	r3, IPSR
 8010412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	2b0f      	cmp	r3, #15
 8010418:	d915      	bls.n	8010446 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801041a:	4a18      	ldr	r2, [pc, #96]	@ (801047c <vPortValidateInterruptPriority+0x74>)
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	4413      	add	r3, r2
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010424:	4b16      	ldr	r3, [pc, #88]	@ (8010480 <vPortValidateInterruptPriority+0x78>)
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	7afa      	ldrb	r2, [r7, #11]
 801042a:	429a      	cmp	r2, r3
 801042c:	d20b      	bcs.n	8010446 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801042e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010432:	f383 8811 	msr	BASEPRI, r3
 8010436:	f3bf 8f6f 	isb	sy
 801043a:	f3bf 8f4f 	dsb	sy
 801043e:	607b      	str	r3, [r7, #4]
}
 8010440:	bf00      	nop
 8010442:	bf00      	nop
 8010444:	e7fd      	b.n	8010442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010446:	4b0f      	ldr	r3, [pc, #60]	@ (8010484 <vPortValidateInterruptPriority+0x7c>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801044e:	4b0e      	ldr	r3, [pc, #56]	@ (8010488 <vPortValidateInterruptPriority+0x80>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	429a      	cmp	r2, r3
 8010454:	d90b      	bls.n	801046e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801045a:	f383 8811 	msr	BASEPRI, r3
 801045e:	f3bf 8f6f 	isb	sy
 8010462:	f3bf 8f4f 	dsb	sy
 8010466:	603b      	str	r3, [r7, #0]
}
 8010468:	bf00      	nop
 801046a:	bf00      	nop
 801046c:	e7fd      	b.n	801046a <vPortValidateInterruptPriority+0x62>
	}
 801046e:	bf00      	nop
 8010470:	3714      	adds	r7, #20
 8010472:	46bd      	mov	sp, r7
 8010474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010478:	4770      	bx	lr
 801047a:	bf00      	nop
 801047c:	e000e3f0 	.word	0xe000e3f0
 8010480:	20005540 	.word	0x20005540
 8010484:	e000ed0c 	.word	0xe000ed0c
 8010488:	20005544 	.word	0x20005544

0801048c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b08a      	sub	sp, #40	@ 0x28
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010494:	2300      	movs	r3, #0
 8010496:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010498:	f7fe ffaa 	bl	800f3f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801049c:	4b5c      	ldr	r3, [pc, #368]	@ (8010610 <pvPortMalloc+0x184>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d101      	bne.n	80104a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80104a4:	f000 f924 	bl	80106f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80104a8:	4b5a      	ldr	r3, [pc, #360]	@ (8010614 <pvPortMalloc+0x188>)
 80104aa:	681a      	ldr	r2, [r3, #0]
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	4013      	ands	r3, r2
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	f040 8095 	bne.w	80105e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d01e      	beq.n	80104fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80104bc:	2208      	movs	r2, #8
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	4413      	add	r3, r2
 80104c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f003 0307 	and.w	r3, r3, #7
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d015      	beq.n	80104fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f023 0307 	bic.w	r3, r3, #7
 80104d4:	3308      	adds	r3, #8
 80104d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f003 0307 	and.w	r3, r3, #7
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d00b      	beq.n	80104fa <pvPortMalloc+0x6e>
	__asm volatile
 80104e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104e6:	f383 8811 	msr	BASEPRI, r3
 80104ea:	f3bf 8f6f 	isb	sy
 80104ee:	f3bf 8f4f 	dsb	sy
 80104f2:	617b      	str	r3, [r7, #20]
}
 80104f4:	bf00      	nop
 80104f6:	bf00      	nop
 80104f8:	e7fd      	b.n	80104f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d06f      	beq.n	80105e0 <pvPortMalloc+0x154>
 8010500:	4b45      	ldr	r3, [pc, #276]	@ (8010618 <pvPortMalloc+0x18c>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	687a      	ldr	r2, [r7, #4]
 8010506:	429a      	cmp	r2, r3
 8010508:	d86a      	bhi.n	80105e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801050a:	4b44      	ldr	r3, [pc, #272]	@ (801061c <pvPortMalloc+0x190>)
 801050c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801050e:	4b43      	ldr	r3, [pc, #268]	@ (801061c <pvPortMalloc+0x190>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010514:	e004      	b.n	8010520 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010518:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801051a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010522:	685b      	ldr	r3, [r3, #4]
 8010524:	687a      	ldr	r2, [r7, #4]
 8010526:	429a      	cmp	r2, r3
 8010528:	d903      	bls.n	8010532 <pvPortMalloc+0xa6>
 801052a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d1f1      	bne.n	8010516 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010532:	4b37      	ldr	r3, [pc, #220]	@ (8010610 <pvPortMalloc+0x184>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010538:	429a      	cmp	r2, r3
 801053a:	d051      	beq.n	80105e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801053c:	6a3b      	ldr	r3, [r7, #32]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	2208      	movs	r2, #8
 8010542:	4413      	add	r3, r2
 8010544:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	6a3b      	ldr	r3, [r7, #32]
 801054c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801054e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010550:	685a      	ldr	r2, [r3, #4]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	1ad2      	subs	r2, r2, r3
 8010556:	2308      	movs	r3, #8
 8010558:	005b      	lsls	r3, r3, #1
 801055a:	429a      	cmp	r2, r3
 801055c:	d920      	bls.n	80105a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801055e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	4413      	add	r3, r2
 8010564:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010566:	69bb      	ldr	r3, [r7, #24]
 8010568:	f003 0307 	and.w	r3, r3, #7
 801056c:	2b00      	cmp	r3, #0
 801056e:	d00b      	beq.n	8010588 <pvPortMalloc+0xfc>
	__asm volatile
 8010570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010574:	f383 8811 	msr	BASEPRI, r3
 8010578:	f3bf 8f6f 	isb	sy
 801057c:	f3bf 8f4f 	dsb	sy
 8010580:	613b      	str	r3, [r7, #16]
}
 8010582:	bf00      	nop
 8010584:	bf00      	nop
 8010586:	e7fd      	b.n	8010584 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801058a:	685a      	ldr	r2, [r3, #4]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	1ad2      	subs	r2, r2, r3
 8010590:	69bb      	ldr	r3, [r7, #24]
 8010592:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010596:	687a      	ldr	r2, [r7, #4]
 8010598:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801059a:	69b8      	ldr	r0, [r7, #24]
 801059c:	f000 f90a 	bl	80107b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80105a0:	4b1d      	ldr	r3, [pc, #116]	@ (8010618 <pvPortMalloc+0x18c>)
 80105a2:	681a      	ldr	r2, [r3, #0]
 80105a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105a6:	685b      	ldr	r3, [r3, #4]
 80105a8:	1ad3      	subs	r3, r2, r3
 80105aa:	4a1b      	ldr	r2, [pc, #108]	@ (8010618 <pvPortMalloc+0x18c>)
 80105ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80105ae:	4b1a      	ldr	r3, [pc, #104]	@ (8010618 <pvPortMalloc+0x18c>)
 80105b0:	681a      	ldr	r2, [r3, #0]
 80105b2:	4b1b      	ldr	r3, [pc, #108]	@ (8010620 <pvPortMalloc+0x194>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d203      	bcs.n	80105c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80105ba:	4b17      	ldr	r3, [pc, #92]	@ (8010618 <pvPortMalloc+0x18c>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	4a18      	ldr	r2, [pc, #96]	@ (8010620 <pvPortMalloc+0x194>)
 80105c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80105c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105c4:	685a      	ldr	r2, [r3, #4]
 80105c6:	4b13      	ldr	r3, [pc, #76]	@ (8010614 <pvPortMalloc+0x188>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	431a      	orrs	r2, r3
 80105cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80105d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105d2:	2200      	movs	r2, #0
 80105d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80105d6:	4b13      	ldr	r3, [pc, #76]	@ (8010624 <pvPortMalloc+0x198>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	3301      	adds	r3, #1
 80105dc:	4a11      	ldr	r2, [pc, #68]	@ (8010624 <pvPortMalloc+0x198>)
 80105de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80105e0:	f7fe ff14 	bl	800f40c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80105e4:	69fb      	ldr	r3, [r7, #28]
 80105e6:	f003 0307 	and.w	r3, r3, #7
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d00b      	beq.n	8010606 <pvPortMalloc+0x17a>
	__asm volatile
 80105ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105f2:	f383 8811 	msr	BASEPRI, r3
 80105f6:	f3bf 8f6f 	isb	sy
 80105fa:	f3bf 8f4f 	dsb	sy
 80105fe:	60fb      	str	r3, [r7, #12]
}
 8010600:	bf00      	nop
 8010602:	bf00      	nop
 8010604:	e7fd      	b.n	8010602 <pvPortMalloc+0x176>
	return pvReturn;
 8010606:	69fb      	ldr	r3, [r7, #28]
}
 8010608:	4618      	mov	r0, r3
 801060a:	3728      	adds	r7, #40	@ 0x28
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}
 8010610:	20009150 	.word	0x20009150
 8010614:	20009164 	.word	0x20009164
 8010618:	20009154 	.word	0x20009154
 801061c:	20009148 	.word	0x20009148
 8010620:	20009158 	.word	0x20009158
 8010624:	2000915c 	.word	0x2000915c

08010628 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b086      	sub	sp, #24
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d04f      	beq.n	80106da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801063a:	2308      	movs	r3, #8
 801063c:	425b      	negs	r3, r3
 801063e:	697a      	ldr	r2, [r7, #20]
 8010640:	4413      	add	r3, r2
 8010642:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	685a      	ldr	r2, [r3, #4]
 801064c:	4b25      	ldr	r3, [pc, #148]	@ (80106e4 <vPortFree+0xbc>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	4013      	ands	r3, r2
 8010652:	2b00      	cmp	r3, #0
 8010654:	d10b      	bne.n	801066e <vPortFree+0x46>
	__asm volatile
 8010656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801065a:	f383 8811 	msr	BASEPRI, r3
 801065e:	f3bf 8f6f 	isb	sy
 8010662:	f3bf 8f4f 	dsb	sy
 8010666:	60fb      	str	r3, [r7, #12]
}
 8010668:	bf00      	nop
 801066a:	bf00      	nop
 801066c:	e7fd      	b.n	801066a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801066e:	693b      	ldr	r3, [r7, #16]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d00b      	beq.n	801068e <vPortFree+0x66>
	__asm volatile
 8010676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801067a:	f383 8811 	msr	BASEPRI, r3
 801067e:	f3bf 8f6f 	isb	sy
 8010682:	f3bf 8f4f 	dsb	sy
 8010686:	60bb      	str	r3, [r7, #8]
}
 8010688:	bf00      	nop
 801068a:	bf00      	nop
 801068c:	e7fd      	b.n	801068a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	685a      	ldr	r2, [r3, #4]
 8010692:	4b14      	ldr	r3, [pc, #80]	@ (80106e4 <vPortFree+0xbc>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	4013      	ands	r3, r2
 8010698:	2b00      	cmp	r3, #0
 801069a:	d01e      	beq.n	80106da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801069c:	693b      	ldr	r3, [r7, #16]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d11a      	bne.n	80106da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80106a4:	693b      	ldr	r3, [r7, #16]
 80106a6:	685a      	ldr	r2, [r3, #4]
 80106a8:	4b0e      	ldr	r3, [pc, #56]	@ (80106e4 <vPortFree+0xbc>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	43db      	mvns	r3, r3
 80106ae:	401a      	ands	r2, r3
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80106b4:	f7fe fe9c 	bl	800f3f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80106b8:	693b      	ldr	r3, [r7, #16]
 80106ba:	685a      	ldr	r2, [r3, #4]
 80106bc:	4b0a      	ldr	r3, [pc, #40]	@ (80106e8 <vPortFree+0xc0>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	4413      	add	r3, r2
 80106c2:	4a09      	ldr	r2, [pc, #36]	@ (80106e8 <vPortFree+0xc0>)
 80106c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80106c6:	6938      	ldr	r0, [r7, #16]
 80106c8:	f000 f874 	bl	80107b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80106cc:	4b07      	ldr	r3, [pc, #28]	@ (80106ec <vPortFree+0xc4>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	3301      	adds	r3, #1
 80106d2:	4a06      	ldr	r2, [pc, #24]	@ (80106ec <vPortFree+0xc4>)
 80106d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80106d6:	f7fe fe99 	bl	800f40c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80106da:	bf00      	nop
 80106dc:	3718      	adds	r7, #24
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd80      	pop	{r7, pc}
 80106e2:	bf00      	nop
 80106e4:	20009164 	.word	0x20009164
 80106e8:	20009154 	.word	0x20009154
 80106ec:	20009160 	.word	0x20009160

080106f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80106f0:	b480      	push	{r7}
 80106f2:	b085      	sub	sp, #20
 80106f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80106f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80106fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80106fc:	4b27      	ldr	r3, [pc, #156]	@ (801079c <prvHeapInit+0xac>)
 80106fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	f003 0307 	and.w	r3, r3, #7
 8010706:	2b00      	cmp	r3, #0
 8010708:	d00c      	beq.n	8010724 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	3307      	adds	r3, #7
 801070e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	f023 0307 	bic.w	r3, r3, #7
 8010716:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010718:	68ba      	ldr	r2, [r7, #8]
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	1ad3      	subs	r3, r2, r3
 801071e:	4a1f      	ldr	r2, [pc, #124]	@ (801079c <prvHeapInit+0xac>)
 8010720:	4413      	add	r3, r2
 8010722:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010728:	4a1d      	ldr	r2, [pc, #116]	@ (80107a0 <prvHeapInit+0xb0>)
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801072e:	4b1c      	ldr	r3, [pc, #112]	@ (80107a0 <prvHeapInit+0xb0>)
 8010730:	2200      	movs	r2, #0
 8010732:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	68ba      	ldr	r2, [r7, #8]
 8010738:	4413      	add	r3, r2
 801073a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801073c:	2208      	movs	r2, #8
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	1a9b      	subs	r3, r3, r2
 8010742:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	f023 0307 	bic.w	r3, r3, #7
 801074a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	4a15      	ldr	r2, [pc, #84]	@ (80107a4 <prvHeapInit+0xb4>)
 8010750:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010752:	4b14      	ldr	r3, [pc, #80]	@ (80107a4 <prvHeapInit+0xb4>)
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	2200      	movs	r2, #0
 8010758:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801075a:	4b12      	ldr	r3, [pc, #72]	@ (80107a4 <prvHeapInit+0xb4>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	2200      	movs	r2, #0
 8010760:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	68fa      	ldr	r2, [r7, #12]
 801076a:	1ad2      	subs	r2, r2, r3
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010770:	4b0c      	ldr	r3, [pc, #48]	@ (80107a4 <prvHeapInit+0xb4>)
 8010772:	681a      	ldr	r2, [r3, #0]
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	685b      	ldr	r3, [r3, #4]
 801077c:	4a0a      	ldr	r2, [pc, #40]	@ (80107a8 <prvHeapInit+0xb8>)
 801077e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	685b      	ldr	r3, [r3, #4]
 8010784:	4a09      	ldr	r2, [pc, #36]	@ (80107ac <prvHeapInit+0xbc>)
 8010786:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010788:	4b09      	ldr	r3, [pc, #36]	@ (80107b0 <prvHeapInit+0xc0>)
 801078a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801078e:	601a      	str	r2, [r3, #0]
}
 8010790:	bf00      	nop
 8010792:	3714      	adds	r7, #20
 8010794:	46bd      	mov	sp, r7
 8010796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079a:	4770      	bx	lr
 801079c:	20005548 	.word	0x20005548
 80107a0:	20009148 	.word	0x20009148
 80107a4:	20009150 	.word	0x20009150
 80107a8:	20009158 	.word	0x20009158
 80107ac:	20009154 	.word	0x20009154
 80107b0:	20009164 	.word	0x20009164

080107b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80107b4:	b480      	push	{r7}
 80107b6:	b085      	sub	sp, #20
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80107bc:	4b28      	ldr	r3, [pc, #160]	@ (8010860 <prvInsertBlockIntoFreeList+0xac>)
 80107be:	60fb      	str	r3, [r7, #12]
 80107c0:	e002      	b.n	80107c8 <prvInsertBlockIntoFreeList+0x14>
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	60fb      	str	r3, [r7, #12]
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	429a      	cmp	r2, r3
 80107d0:	d8f7      	bhi.n	80107c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	685b      	ldr	r3, [r3, #4]
 80107da:	68ba      	ldr	r2, [r7, #8]
 80107dc:	4413      	add	r3, r2
 80107de:	687a      	ldr	r2, [r7, #4]
 80107e0:	429a      	cmp	r2, r3
 80107e2:	d108      	bne.n	80107f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	685a      	ldr	r2, [r3, #4]
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	685b      	ldr	r3, [r3, #4]
 80107ec:	441a      	add	r2, r3
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	68ba      	ldr	r2, [r7, #8]
 8010800:	441a      	add	r2, r3
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	429a      	cmp	r2, r3
 8010808:	d118      	bne.n	801083c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	681a      	ldr	r2, [r3, #0]
 801080e:	4b15      	ldr	r3, [pc, #84]	@ (8010864 <prvInsertBlockIntoFreeList+0xb0>)
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	429a      	cmp	r2, r3
 8010814:	d00d      	beq.n	8010832 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	685a      	ldr	r2, [r3, #4]
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	685b      	ldr	r3, [r3, #4]
 8010820:	441a      	add	r2, r3
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	681a      	ldr	r2, [r3, #0]
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	601a      	str	r2, [r3, #0]
 8010830:	e008      	b.n	8010844 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010832:	4b0c      	ldr	r3, [pc, #48]	@ (8010864 <prvInsertBlockIntoFreeList+0xb0>)
 8010834:	681a      	ldr	r2, [r3, #0]
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	601a      	str	r2, [r3, #0]
 801083a:	e003      	b.n	8010844 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	681a      	ldr	r2, [r3, #0]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010844:	68fa      	ldr	r2, [r7, #12]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	429a      	cmp	r2, r3
 801084a:	d002      	beq.n	8010852 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	687a      	ldr	r2, [r7, #4]
 8010850:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010852:	bf00      	nop
 8010854:	3714      	adds	r7, #20
 8010856:	46bd      	mov	sp, r7
 8010858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085c:	4770      	bx	lr
 801085e:	bf00      	nop
 8010860:	20009148 	.word	0x20009148
 8010864:	20009150 	.word	0x20009150

08010868 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b084      	sub	sp, #16
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8010872:	f008 f945 	bl	8018b00 <sys_timeouts_sleeptime>
 8010876:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801087e:	d10b      	bne.n	8010898 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8010880:	4813      	ldr	r0, [pc, #76]	@ (80108d0 <tcpip_timeouts_mbox_fetch+0x68>)
 8010882:	f00a ff18 	bl	801b6b6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8010886:	2200      	movs	r2, #0
 8010888:	6839      	ldr	r1, [r7, #0]
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f00a fe8a 	bl	801b5a4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8010890:	480f      	ldr	r0, [pc, #60]	@ (80108d0 <tcpip_timeouts_mbox_fetch+0x68>)
 8010892:	f00a ff01 	bl	801b698 <sys_mutex_lock>
    return;
 8010896:	e018      	b.n	80108ca <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d102      	bne.n	80108a4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801089e:	f008 f8f5 	bl	8018a8c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80108a2:	e7e6      	b.n	8010872 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80108a4:	480a      	ldr	r0, [pc, #40]	@ (80108d0 <tcpip_timeouts_mbox_fetch+0x68>)
 80108a6:	f00a ff06 	bl	801b6b6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80108aa:	68fa      	ldr	r2, [r7, #12]
 80108ac:	6839      	ldr	r1, [r7, #0]
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f00a fe78 	bl	801b5a4 <sys_arch_mbox_fetch>
 80108b4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80108b6:	4806      	ldr	r0, [pc, #24]	@ (80108d0 <tcpip_timeouts_mbox_fetch+0x68>)
 80108b8:	f00a feee 	bl	801b698 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108c2:	d102      	bne.n	80108ca <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80108c4:	f008 f8e2 	bl	8018a8c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80108c8:	e7d3      	b.n	8010872 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80108ca:	3710      	adds	r7, #16
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}
 80108d0:	20009174 	.word	0x20009174

080108d4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b084      	sub	sp, #16
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80108dc:	4810      	ldr	r0, [pc, #64]	@ (8010920 <tcpip_thread+0x4c>)
 80108de:	f00a fedb 	bl	801b698 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80108e2:	4b10      	ldr	r3, [pc, #64]	@ (8010924 <tcpip_thread+0x50>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d005      	beq.n	80108f6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80108ea:	4b0e      	ldr	r3, [pc, #56]	@ (8010924 <tcpip_thread+0x50>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	4a0e      	ldr	r2, [pc, #56]	@ (8010928 <tcpip_thread+0x54>)
 80108f0:	6812      	ldr	r2, [r2, #0]
 80108f2:	4610      	mov	r0, r2
 80108f4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80108f6:	f107 030c 	add.w	r3, r7, #12
 80108fa:	4619      	mov	r1, r3
 80108fc:	480b      	ldr	r0, [pc, #44]	@ (801092c <tcpip_thread+0x58>)
 80108fe:	f7ff ffb3 	bl	8010868 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d106      	bne.n	8010916 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010908:	4b09      	ldr	r3, [pc, #36]	@ (8010930 <tcpip_thread+0x5c>)
 801090a:	2291      	movs	r2, #145	@ 0x91
 801090c:	4909      	ldr	r1, [pc, #36]	@ (8010934 <tcpip_thread+0x60>)
 801090e:	480a      	ldr	r0, [pc, #40]	@ (8010938 <tcpip_thread+0x64>)
 8010910:	f00b fdc4 	bl	801c49c <iprintf>
      continue;
 8010914:	e003      	b.n	801091e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	4618      	mov	r0, r3
 801091a:	f000 f80f 	bl	801093c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801091e:	e7ea      	b.n	80108f6 <tcpip_thread+0x22>
 8010920:	20009174 	.word	0x20009174
 8010924:	20009168 	.word	0x20009168
 8010928:	2000916c 	.word	0x2000916c
 801092c:	20009170 	.word	0x20009170
 8010930:	0801f204 	.word	0x0801f204
 8010934:	0801f234 	.word	0x0801f234
 8010938:	0801f254 	.word	0x0801f254

0801093c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	781b      	ldrb	r3, [r3, #0]
 8010948:	2b02      	cmp	r3, #2
 801094a:	d026      	beq.n	801099a <tcpip_thread_handle_msg+0x5e>
 801094c:	2b02      	cmp	r3, #2
 801094e:	dc2b      	bgt.n	80109a8 <tcpip_thread_handle_msg+0x6c>
 8010950:	2b00      	cmp	r3, #0
 8010952:	d002      	beq.n	801095a <tcpip_thread_handle_msg+0x1e>
 8010954:	2b01      	cmp	r3, #1
 8010956:	d015      	beq.n	8010984 <tcpip_thread_handle_msg+0x48>
 8010958:	e026      	b.n	80109a8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	68db      	ldr	r3, [r3, #12]
 801095e:	687a      	ldr	r2, [r7, #4]
 8010960:	6850      	ldr	r0, [r2, #4]
 8010962:	687a      	ldr	r2, [r7, #4]
 8010964:	6892      	ldr	r2, [r2, #8]
 8010966:	4611      	mov	r1, r2
 8010968:	4798      	blx	r3
 801096a:	4603      	mov	r3, r0
 801096c:	2b00      	cmp	r3, #0
 801096e:	d004      	beq.n	801097a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	685b      	ldr	r3, [r3, #4]
 8010974:	4618      	mov	r0, r3
 8010976:	f001 fcd9 	bl	801232c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801097a:	6879      	ldr	r1, [r7, #4]
 801097c:	2009      	movs	r0, #9
 801097e:	f000 fe63 	bl	8011648 <memp_free>
      break;
 8010982:	e018      	b.n	80109b6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	685b      	ldr	r3, [r3, #4]
 8010988:	687a      	ldr	r2, [r7, #4]
 801098a:	6892      	ldr	r2, [r2, #8]
 801098c:	4610      	mov	r0, r2
 801098e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8010990:	6879      	ldr	r1, [r7, #4]
 8010992:	2008      	movs	r0, #8
 8010994:	f000 fe58 	bl	8011648 <memp_free>
      break;
 8010998:	e00d      	b.n	80109b6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	687a      	ldr	r2, [r7, #4]
 80109a0:	6892      	ldr	r2, [r2, #8]
 80109a2:	4610      	mov	r0, r2
 80109a4:	4798      	blx	r3
      break;
 80109a6:	e006      	b.n	80109b6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80109a8:	4b05      	ldr	r3, [pc, #20]	@ (80109c0 <tcpip_thread_handle_msg+0x84>)
 80109aa:	22cf      	movs	r2, #207	@ 0xcf
 80109ac:	4905      	ldr	r1, [pc, #20]	@ (80109c4 <tcpip_thread_handle_msg+0x88>)
 80109ae:	4806      	ldr	r0, [pc, #24]	@ (80109c8 <tcpip_thread_handle_msg+0x8c>)
 80109b0:	f00b fd74 	bl	801c49c <iprintf>
      break;
 80109b4:	bf00      	nop
  }
}
 80109b6:	bf00      	nop
 80109b8:	3708      	adds	r7, #8
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}
 80109be:	bf00      	nop
 80109c0:	0801f204 	.word	0x0801f204
 80109c4:	0801f234 	.word	0x0801f234
 80109c8:	0801f254 	.word	0x0801f254

080109cc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b086      	sub	sp, #24
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	60f8      	str	r0, [r7, #12]
 80109d4:	60b9      	str	r1, [r7, #8]
 80109d6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80109d8:	481a      	ldr	r0, [pc, #104]	@ (8010a44 <tcpip_inpkt+0x78>)
 80109da:	f00a fe22 	bl	801b622 <sys_mbox_valid>
 80109de:	4603      	mov	r3, r0
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d105      	bne.n	80109f0 <tcpip_inpkt+0x24>
 80109e4:	4b18      	ldr	r3, [pc, #96]	@ (8010a48 <tcpip_inpkt+0x7c>)
 80109e6:	22fc      	movs	r2, #252	@ 0xfc
 80109e8:	4918      	ldr	r1, [pc, #96]	@ (8010a4c <tcpip_inpkt+0x80>)
 80109ea:	4819      	ldr	r0, [pc, #100]	@ (8010a50 <tcpip_inpkt+0x84>)
 80109ec:	f00b fd56 	bl	801c49c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80109f0:	2009      	movs	r0, #9
 80109f2:	f000 fdb3 	bl	801155c <memp_malloc>
 80109f6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80109f8:	697b      	ldr	r3, [r7, #20]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d102      	bne.n	8010a04 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80109fe:	f04f 33ff 	mov.w	r3, #4294967295
 8010a02:	e01a      	b.n	8010a3a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	2200      	movs	r2, #0
 8010a08:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8010a0a:	697b      	ldr	r3, [r7, #20]
 8010a0c:	68fa      	ldr	r2, [r7, #12]
 8010a0e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	68ba      	ldr	r2, [r7, #8]
 8010a14:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	687a      	ldr	r2, [r7, #4]
 8010a1a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010a1c:	6979      	ldr	r1, [r7, #20]
 8010a1e:	4809      	ldr	r0, [pc, #36]	@ (8010a44 <tcpip_inpkt+0x78>)
 8010a20:	f00a fda6 	bl	801b570 <sys_mbox_trypost>
 8010a24:	4603      	mov	r3, r0
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d006      	beq.n	8010a38 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010a2a:	6979      	ldr	r1, [r7, #20]
 8010a2c:	2009      	movs	r0, #9
 8010a2e:	f000 fe0b 	bl	8011648 <memp_free>
    return ERR_MEM;
 8010a32:	f04f 33ff 	mov.w	r3, #4294967295
 8010a36:	e000      	b.n	8010a3a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8010a38:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3718      	adds	r7, #24
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
 8010a42:	bf00      	nop
 8010a44:	20009170 	.word	0x20009170
 8010a48:	0801f204 	.word	0x0801f204
 8010a4c:	0801f27c 	.word	0x0801f27c
 8010a50:	0801f254 	.word	0x0801f254

08010a54 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010a64:	f003 0318 	and.w	r3, r3, #24
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d006      	beq.n	8010a7a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8010a6c:	4a08      	ldr	r2, [pc, #32]	@ (8010a90 <tcpip_input+0x3c>)
 8010a6e:	6839      	ldr	r1, [r7, #0]
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f7ff ffab 	bl	80109cc <tcpip_inpkt>
 8010a76:	4603      	mov	r3, r0
 8010a78:	e005      	b.n	8010a86 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8010a7a:	4a06      	ldr	r2, [pc, #24]	@ (8010a94 <tcpip_input+0x40>)
 8010a7c:	6839      	ldr	r1, [r7, #0]
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f7ff ffa4 	bl	80109cc <tcpip_inpkt>
 8010a84:	4603      	mov	r3, r0
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	3708      	adds	r7, #8
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}
 8010a8e:	bf00      	nop
 8010a90:	0801b381 	.word	0x0801b381
 8010a94:	0801a169 	.word	0x0801a169

08010a98 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b084      	sub	sp, #16
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010aa2:	4819      	ldr	r0, [pc, #100]	@ (8010b08 <tcpip_try_callback+0x70>)
 8010aa4:	f00a fdbd 	bl	801b622 <sys_mbox_valid>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d106      	bne.n	8010abc <tcpip_try_callback+0x24>
 8010aae:	4b17      	ldr	r3, [pc, #92]	@ (8010b0c <tcpip_try_callback+0x74>)
 8010ab0:	f240 125d 	movw	r2, #349	@ 0x15d
 8010ab4:	4916      	ldr	r1, [pc, #88]	@ (8010b10 <tcpip_try_callback+0x78>)
 8010ab6:	4817      	ldr	r0, [pc, #92]	@ (8010b14 <tcpip_try_callback+0x7c>)
 8010ab8:	f00b fcf0 	bl	801c49c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8010abc:	2008      	movs	r0, #8
 8010abe:	f000 fd4d 	bl	801155c <memp_malloc>
 8010ac2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d102      	bne.n	8010ad0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8010aca:	f04f 33ff 	mov.w	r3, #4294967295
 8010ace:	e017      	b.n	8010b00 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	2201      	movs	r2, #1
 8010ad4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	687a      	ldr	r2, [r7, #4]
 8010ada:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	683a      	ldr	r2, [r7, #0]
 8010ae0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010ae2:	68f9      	ldr	r1, [r7, #12]
 8010ae4:	4808      	ldr	r0, [pc, #32]	@ (8010b08 <tcpip_try_callback+0x70>)
 8010ae6:	f00a fd43 	bl	801b570 <sys_mbox_trypost>
 8010aea:	4603      	mov	r3, r0
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d006      	beq.n	8010afe <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8010af0:	68f9      	ldr	r1, [r7, #12]
 8010af2:	2008      	movs	r0, #8
 8010af4:	f000 fda8 	bl	8011648 <memp_free>
    return ERR_MEM;
 8010af8:	f04f 33ff 	mov.w	r3, #4294967295
 8010afc:	e000      	b.n	8010b00 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8010afe:	2300      	movs	r3, #0
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	3710      	adds	r7, #16
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	20009170 	.word	0x20009170
 8010b0c:	0801f204 	.word	0x0801f204
 8010b10:	0801f27c 	.word	0x0801f27c
 8010b14:	0801f254 	.word	0x0801f254

08010b18 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b084      	sub	sp, #16
 8010b1c:	af02      	add	r7, sp, #8
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010b22:	f000 f872 	bl	8010c0a <lwip_init>

  tcpip_init_done = initfunc;
 8010b26:	4a17      	ldr	r2, [pc, #92]	@ (8010b84 <tcpip_init+0x6c>)
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8010b2c:	4a16      	ldr	r2, [pc, #88]	@ (8010b88 <tcpip_init+0x70>)
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8010b32:	2106      	movs	r1, #6
 8010b34:	4815      	ldr	r0, [pc, #84]	@ (8010b8c <tcpip_init+0x74>)
 8010b36:	f00a fcf9 	bl	801b52c <sys_mbox_new>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d006      	beq.n	8010b4e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010b40:	4b13      	ldr	r3, [pc, #76]	@ (8010b90 <tcpip_init+0x78>)
 8010b42:	f240 2261 	movw	r2, #609	@ 0x261
 8010b46:	4913      	ldr	r1, [pc, #76]	@ (8010b94 <tcpip_init+0x7c>)
 8010b48:	4813      	ldr	r0, [pc, #76]	@ (8010b98 <tcpip_init+0x80>)
 8010b4a:	f00b fca7 	bl	801c49c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8010b4e:	4813      	ldr	r0, [pc, #76]	@ (8010b9c <tcpip_init+0x84>)
 8010b50:	f00a fd86 	bl	801b660 <sys_mutex_new>
 8010b54:	4603      	mov	r3, r0
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d006      	beq.n	8010b68 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8010b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8010b90 <tcpip_init+0x78>)
 8010b5c:	f240 2265 	movw	r2, #613	@ 0x265
 8010b60:	490f      	ldr	r1, [pc, #60]	@ (8010ba0 <tcpip_init+0x88>)
 8010b62:	480d      	ldr	r0, [pc, #52]	@ (8010b98 <tcpip_init+0x80>)
 8010b64:	f00b fc9a 	bl	801c49c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8010b68:	2300      	movs	r3, #0
 8010b6a:	9300      	str	r3, [sp, #0]
 8010b6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b70:	2200      	movs	r2, #0
 8010b72:	490c      	ldr	r1, [pc, #48]	@ (8010ba4 <tcpip_init+0x8c>)
 8010b74:	480c      	ldr	r0, [pc, #48]	@ (8010ba8 <tcpip_init+0x90>)
 8010b76:	f00a fdab 	bl	801b6d0 <sys_thread_new>
}
 8010b7a:	bf00      	nop
 8010b7c:	3708      	adds	r7, #8
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}
 8010b82:	bf00      	nop
 8010b84:	20009168 	.word	0x20009168
 8010b88:	2000916c 	.word	0x2000916c
 8010b8c:	20009170 	.word	0x20009170
 8010b90:	0801f204 	.word	0x0801f204
 8010b94:	0801f28c 	.word	0x0801f28c
 8010b98:	0801f254 	.word	0x0801f254
 8010b9c:	20009174 	.word	0x20009174
 8010ba0:	0801f2b0 	.word	0x0801f2b0
 8010ba4:	080108d5 	.word	0x080108d5
 8010ba8:	0801f2d4 	.word	0x0801f2d4

08010bac <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8010bac:	b480      	push	{r7}
 8010bae:	b083      	sub	sp, #12
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8010bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010bba:	021b      	lsls	r3, r3, #8
 8010bbc:	b21a      	sxth	r2, r3
 8010bbe:	88fb      	ldrh	r3, [r7, #6]
 8010bc0:	0a1b      	lsrs	r3, r3, #8
 8010bc2:	b29b      	uxth	r3, r3
 8010bc4:	b21b      	sxth	r3, r3
 8010bc6:	4313      	orrs	r3, r2
 8010bc8:	b21b      	sxth	r3, r3
 8010bca:	b29b      	uxth	r3, r3
}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	370c      	adds	r7, #12
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd6:	4770      	bx	lr

08010bd8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010bd8:	b480      	push	{r7}
 8010bda:	b083      	sub	sp, #12
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	061a      	lsls	r2, r3, #24
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	021b      	lsls	r3, r3, #8
 8010be8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010bec:	431a      	orrs	r2, r3
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	0a1b      	lsrs	r3, r3, #8
 8010bf2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010bf6:	431a      	orrs	r2, r3
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	0e1b      	lsrs	r3, r3, #24
 8010bfc:	4313      	orrs	r3, r2
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	370c      	adds	r7, #12
 8010c02:	46bd      	mov	sp, r7
 8010c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c08:	4770      	bx	lr

08010c0a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010c0a:	b580      	push	{r7, lr}
 8010c0c:	b082      	sub	sp, #8
 8010c0e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010c10:	2300      	movs	r3, #0
 8010c12:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8010c14:	f00a fd16 	bl	801b644 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010c18:	f000 f8d4 	bl	8010dc4 <mem_init>
  memp_init();
 8010c1c:	f000 fc30 	bl	8011480 <memp_init>
  pbuf_init();
  netif_init();
 8010c20:	f000 fd3c 	bl	801169c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010c24:	f007 ffa4 	bl	8018b70 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010c28:	f001 fe1a 	bl	8012860 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010c2c:	f007 fee6 	bl	80189fc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010c30:	bf00      	nop
 8010c32:	3708      	adds	r7, #8
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}

08010c38 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010c38:	b480      	push	{r7}
 8010c3a:	b083      	sub	sp, #12
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	4603      	mov	r3, r0
 8010c40:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010c42:	4b05      	ldr	r3, [pc, #20]	@ (8010c58 <ptr_to_mem+0x20>)
 8010c44:	681a      	ldr	r2, [r3, #0]
 8010c46:	88fb      	ldrh	r3, [r7, #6]
 8010c48:	4413      	add	r3, r2
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	370c      	adds	r7, #12
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c54:	4770      	bx	lr
 8010c56:	bf00      	nop
 8010c58:	200097e4 	.word	0x200097e4

08010c5c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	b083      	sub	sp, #12
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010c64:	4b05      	ldr	r3, [pc, #20]	@ (8010c7c <mem_to_ptr+0x20>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	687a      	ldr	r2, [r7, #4]
 8010c6a:	1ad3      	subs	r3, r2, r3
 8010c6c:	b29b      	uxth	r3, r3
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	370c      	adds	r7, #12
 8010c72:	46bd      	mov	sp, r7
 8010c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c78:	4770      	bx	lr
 8010c7a:	bf00      	nop
 8010c7c:	200097e4 	.word	0x200097e4

08010c80 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010c80:	b590      	push	{r4, r7, lr}
 8010c82:	b085      	sub	sp, #20
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010c88:	4b45      	ldr	r3, [pc, #276]	@ (8010da0 <plug_holes+0x120>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	687a      	ldr	r2, [r7, #4]
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d206      	bcs.n	8010ca0 <plug_holes+0x20>
 8010c92:	4b44      	ldr	r3, [pc, #272]	@ (8010da4 <plug_holes+0x124>)
 8010c94:	f240 12df 	movw	r2, #479	@ 0x1df
 8010c98:	4943      	ldr	r1, [pc, #268]	@ (8010da8 <plug_holes+0x128>)
 8010c9a:	4844      	ldr	r0, [pc, #272]	@ (8010dac <plug_holes+0x12c>)
 8010c9c:	f00b fbfe 	bl	801c49c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010ca0:	4b43      	ldr	r3, [pc, #268]	@ (8010db0 <plug_holes+0x130>)
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	687a      	ldr	r2, [r7, #4]
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	d306      	bcc.n	8010cb8 <plug_holes+0x38>
 8010caa:	4b3e      	ldr	r3, [pc, #248]	@ (8010da4 <plug_holes+0x124>)
 8010cac:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010cb0:	4940      	ldr	r1, [pc, #256]	@ (8010db4 <plug_holes+0x134>)
 8010cb2:	483e      	ldr	r0, [pc, #248]	@ (8010dac <plug_holes+0x12c>)
 8010cb4:	f00b fbf2 	bl	801c49c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	791b      	ldrb	r3, [r3, #4]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d006      	beq.n	8010cce <plug_holes+0x4e>
 8010cc0:	4b38      	ldr	r3, [pc, #224]	@ (8010da4 <plug_holes+0x124>)
 8010cc2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8010cc6:	493c      	ldr	r1, [pc, #240]	@ (8010db8 <plug_holes+0x138>)
 8010cc8:	4838      	ldr	r0, [pc, #224]	@ (8010dac <plug_holes+0x12c>)
 8010cca:	f00b fbe7 	bl	801c49c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	881b      	ldrh	r3, [r3, #0]
 8010cd2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010cd6:	d906      	bls.n	8010ce6 <plug_holes+0x66>
 8010cd8:	4b32      	ldr	r3, [pc, #200]	@ (8010da4 <plug_holes+0x124>)
 8010cda:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8010cde:	4937      	ldr	r1, [pc, #220]	@ (8010dbc <plug_holes+0x13c>)
 8010ce0:	4832      	ldr	r0, [pc, #200]	@ (8010dac <plug_holes+0x12c>)
 8010ce2:	f00b fbdb 	bl	801c49c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	881b      	ldrh	r3, [r3, #0]
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7ff ffa4 	bl	8010c38 <ptr_to_mem>
 8010cf0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010cf2:	687a      	ldr	r2, [r7, #4]
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d024      	beq.n	8010d44 <plug_holes+0xc4>
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	791b      	ldrb	r3, [r3, #4]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d120      	bne.n	8010d44 <plug_holes+0xc4>
 8010d02:	4b2b      	ldr	r3, [pc, #172]	@ (8010db0 <plug_holes+0x130>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	68fa      	ldr	r2, [r7, #12]
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	d01b      	beq.n	8010d44 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8010dc0 <plug_holes+0x140>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	68fa      	ldr	r2, [r7, #12]
 8010d12:	429a      	cmp	r2, r3
 8010d14:	d102      	bne.n	8010d1c <plug_holes+0x9c>
      lfree = mem;
 8010d16:	4a2a      	ldr	r2, [pc, #168]	@ (8010dc0 <plug_holes+0x140>)
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	881a      	ldrh	r2, [r3, #0]
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	881b      	ldrh	r3, [r3, #0]
 8010d28:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010d2c:	d00a      	beq.n	8010d44 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	881b      	ldrh	r3, [r3, #0]
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7ff ff80 	bl	8010c38 <ptr_to_mem>
 8010d38:	4604      	mov	r4, r0
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f7ff ff8e 	bl	8010c5c <mem_to_ptr>
 8010d40:	4603      	mov	r3, r0
 8010d42:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	885b      	ldrh	r3, [r3, #2]
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f7ff ff75 	bl	8010c38 <ptr_to_mem>
 8010d4e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010d50:	68ba      	ldr	r2, [r7, #8]
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d01f      	beq.n	8010d98 <plug_holes+0x118>
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	791b      	ldrb	r3, [r3, #4]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d11b      	bne.n	8010d98 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010d60:	4b17      	ldr	r3, [pc, #92]	@ (8010dc0 <plug_holes+0x140>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	687a      	ldr	r2, [r7, #4]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d102      	bne.n	8010d70 <plug_holes+0xf0>
      lfree = pmem;
 8010d6a:	4a15      	ldr	r2, [pc, #84]	@ (8010dc0 <plug_holes+0x140>)
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	881a      	ldrh	r2, [r3, #0]
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	881b      	ldrh	r3, [r3, #0]
 8010d7c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010d80:	d00a      	beq.n	8010d98 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	881b      	ldrh	r3, [r3, #0]
 8010d86:	4618      	mov	r0, r3
 8010d88:	f7ff ff56 	bl	8010c38 <ptr_to_mem>
 8010d8c:	4604      	mov	r4, r0
 8010d8e:	68b8      	ldr	r0, [r7, #8]
 8010d90:	f7ff ff64 	bl	8010c5c <mem_to_ptr>
 8010d94:	4603      	mov	r3, r0
 8010d96:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010d98:	bf00      	nop
 8010d9a:	3714      	adds	r7, #20
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd90      	pop	{r4, r7, pc}
 8010da0:	200097e4 	.word	0x200097e4
 8010da4:	0801f2e4 	.word	0x0801f2e4
 8010da8:	0801f314 	.word	0x0801f314
 8010dac:	0801f32c 	.word	0x0801f32c
 8010db0:	200097e8 	.word	0x200097e8
 8010db4:	0801f354 	.word	0x0801f354
 8010db8:	0801f370 	.word	0x0801f370
 8010dbc:	0801f38c 	.word	0x0801f38c
 8010dc0:	200097f0 	.word	0x200097f0

08010dc4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010dca:	4b1f      	ldr	r3, [pc, #124]	@ (8010e48 <mem_init+0x84>)
 8010dcc:	3303      	adds	r3, #3
 8010dce:	f023 0303 	bic.w	r3, r3, #3
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8010e4c <mem_init+0x88>)
 8010dd6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8010e4c <mem_init+0x88>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8010de4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2200      	movs	r2, #0
 8010dea:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2200      	movs	r2, #0
 8010df0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010df2:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8010df6:	f7ff ff1f 	bl	8010c38 <ptr_to_mem>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	4a14      	ldr	r2, [pc, #80]	@ (8010e50 <mem_init+0x8c>)
 8010dfe:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010e00:	4b13      	ldr	r3, [pc, #76]	@ (8010e50 <mem_init+0x8c>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	2201      	movs	r2, #1
 8010e06:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010e08:	4b11      	ldr	r3, [pc, #68]	@ (8010e50 <mem_init+0x8c>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8010e10:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010e12:	4b0f      	ldr	r3, [pc, #60]	@ (8010e50 <mem_init+0x8c>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8010e1a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8010e4c <mem_init+0x88>)
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	4a0c      	ldr	r2, [pc, #48]	@ (8010e54 <mem_init+0x90>)
 8010e22:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010e24:	480c      	ldr	r0, [pc, #48]	@ (8010e58 <mem_init+0x94>)
 8010e26:	f00a fc1b 	bl	801b660 <sys_mutex_new>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d006      	beq.n	8010e3e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8010e30:	4b0a      	ldr	r3, [pc, #40]	@ (8010e5c <mem_init+0x98>)
 8010e32:	f240 221f 	movw	r2, #543	@ 0x21f
 8010e36:	490a      	ldr	r1, [pc, #40]	@ (8010e60 <mem_init+0x9c>)
 8010e38:	480a      	ldr	r0, [pc, #40]	@ (8010e64 <mem_init+0xa0>)
 8010e3a:	f00b fb2f 	bl	801c49c <iprintf>
  }
}
 8010e3e:	bf00      	nop
 8010e40:	3708      	adds	r7, #8
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}
 8010e46:	bf00      	nop
 8010e48:	20009190 	.word	0x20009190
 8010e4c:	200097e4 	.word	0x200097e4
 8010e50:	200097e8 	.word	0x200097e8
 8010e54:	200097f0 	.word	0x200097f0
 8010e58:	200097ec 	.word	0x200097ec
 8010e5c:	0801f2e4 	.word	0x0801f2e4
 8010e60:	0801f3b8 	.word	0x0801f3b8
 8010e64:	0801f32c 	.word	0x0801f32c

08010e68 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b086      	sub	sp, #24
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010e70:	6878      	ldr	r0, [r7, #4]
 8010e72:	f7ff fef3 	bl	8010c5c <mem_to_ptr>
 8010e76:	4603      	mov	r3, r0
 8010e78:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	881b      	ldrh	r3, [r3, #0]
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f7ff feda 	bl	8010c38 <ptr_to_mem>
 8010e84:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	885b      	ldrh	r3, [r3, #2]
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7ff fed4 	bl	8010c38 <ptr_to_mem>
 8010e90:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	881b      	ldrh	r3, [r3, #0]
 8010e96:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010e9a:	d818      	bhi.n	8010ece <mem_link_valid+0x66>
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	885b      	ldrh	r3, [r3, #2]
 8010ea0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010ea4:	d813      	bhi.n	8010ece <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010eaa:	8afa      	ldrh	r2, [r7, #22]
 8010eac:	429a      	cmp	r2, r3
 8010eae:	d004      	beq.n	8010eba <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	881b      	ldrh	r3, [r3, #0]
 8010eb4:	8afa      	ldrh	r2, [r7, #22]
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	d109      	bne.n	8010ece <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010eba:	4b08      	ldr	r3, [pc, #32]	@ (8010edc <mem_link_valid+0x74>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010ebe:	693a      	ldr	r2, [r7, #16]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d006      	beq.n	8010ed2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010ec4:	693b      	ldr	r3, [r7, #16]
 8010ec6:	885b      	ldrh	r3, [r3, #2]
 8010ec8:	8afa      	ldrh	r2, [r7, #22]
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	d001      	beq.n	8010ed2 <mem_link_valid+0x6a>
    return 0;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	e000      	b.n	8010ed4 <mem_link_valid+0x6c>
  }
  return 1;
 8010ed2:	2301      	movs	r3, #1
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	3718      	adds	r7, #24
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}
 8010edc:	200097e8 	.word	0x200097e8

08010ee0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b088      	sub	sp, #32
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d070      	beq.n	8010fd0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f003 0303 	and.w	r3, r3, #3
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d00d      	beq.n	8010f14 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010ef8:	4b37      	ldr	r3, [pc, #220]	@ (8010fd8 <mem_free+0xf8>)
 8010efa:	f240 2273 	movw	r2, #627	@ 0x273
 8010efe:	4937      	ldr	r1, [pc, #220]	@ (8010fdc <mem_free+0xfc>)
 8010f00:	4837      	ldr	r0, [pc, #220]	@ (8010fe0 <mem_free+0x100>)
 8010f02:	f00b facb 	bl	801c49c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010f06:	f00a fc09 	bl	801b71c <sys_arch_protect>
 8010f0a:	60f8      	str	r0, [r7, #12]
 8010f0c:	68f8      	ldr	r0, [r7, #12]
 8010f0e:	f00a fc13 	bl	801b738 <sys_arch_unprotect>
    return;
 8010f12:	e05e      	b.n	8010fd2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	3b08      	subs	r3, #8
 8010f18:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8010f1a:	4b32      	ldr	r3, [pc, #200]	@ (8010fe4 <mem_free+0x104>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	69fa      	ldr	r2, [r7, #28]
 8010f20:	429a      	cmp	r2, r3
 8010f22:	d306      	bcc.n	8010f32 <mem_free+0x52>
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f103 020c 	add.w	r2, r3, #12
 8010f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8010fe8 <mem_free+0x108>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d90d      	bls.n	8010f4e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8010f32:	4b29      	ldr	r3, [pc, #164]	@ (8010fd8 <mem_free+0xf8>)
 8010f34:	f240 227f 	movw	r2, #639	@ 0x27f
 8010f38:	492c      	ldr	r1, [pc, #176]	@ (8010fec <mem_free+0x10c>)
 8010f3a:	4829      	ldr	r0, [pc, #164]	@ (8010fe0 <mem_free+0x100>)
 8010f3c:	f00b faae 	bl	801c49c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010f40:	f00a fbec 	bl	801b71c <sys_arch_protect>
 8010f44:	6138      	str	r0, [r7, #16]
 8010f46:	6938      	ldr	r0, [r7, #16]
 8010f48:	f00a fbf6 	bl	801b738 <sys_arch_unprotect>
    return;
 8010f4c:	e041      	b.n	8010fd2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010f4e:	4828      	ldr	r0, [pc, #160]	@ (8010ff0 <mem_free+0x110>)
 8010f50:	f00a fba2 	bl	801b698 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8010f54:	69fb      	ldr	r3, [r7, #28]
 8010f56:	791b      	ldrb	r3, [r3, #4]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d110      	bne.n	8010f7e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8010f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8010fd8 <mem_free+0xf8>)
 8010f5e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8010f62:	4924      	ldr	r1, [pc, #144]	@ (8010ff4 <mem_free+0x114>)
 8010f64:	481e      	ldr	r0, [pc, #120]	@ (8010fe0 <mem_free+0x100>)
 8010f66:	f00b fa99 	bl	801c49c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010f6a:	4821      	ldr	r0, [pc, #132]	@ (8010ff0 <mem_free+0x110>)
 8010f6c:	f00a fba3 	bl	801b6b6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010f70:	f00a fbd4 	bl	801b71c <sys_arch_protect>
 8010f74:	6178      	str	r0, [r7, #20]
 8010f76:	6978      	ldr	r0, [r7, #20]
 8010f78:	f00a fbde 	bl	801b738 <sys_arch_unprotect>
    return;
 8010f7c:	e029      	b.n	8010fd2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8010f7e:	69f8      	ldr	r0, [r7, #28]
 8010f80:	f7ff ff72 	bl	8010e68 <mem_link_valid>
 8010f84:	4603      	mov	r3, r0
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d110      	bne.n	8010fac <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8010f8a:	4b13      	ldr	r3, [pc, #76]	@ (8010fd8 <mem_free+0xf8>)
 8010f8c:	f240 2295 	movw	r2, #661	@ 0x295
 8010f90:	4919      	ldr	r1, [pc, #100]	@ (8010ff8 <mem_free+0x118>)
 8010f92:	4813      	ldr	r0, [pc, #76]	@ (8010fe0 <mem_free+0x100>)
 8010f94:	f00b fa82 	bl	801c49c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010f98:	4815      	ldr	r0, [pc, #84]	@ (8010ff0 <mem_free+0x110>)
 8010f9a:	f00a fb8c 	bl	801b6b6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010f9e:	f00a fbbd 	bl	801b71c <sys_arch_protect>
 8010fa2:	61b8      	str	r0, [r7, #24]
 8010fa4:	69b8      	ldr	r0, [r7, #24]
 8010fa6:	f00a fbc7 	bl	801b738 <sys_arch_unprotect>
    return;
 8010faa:	e012      	b.n	8010fd2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8010fac:	69fb      	ldr	r3, [r7, #28]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010fb2:	4b12      	ldr	r3, [pc, #72]	@ (8010ffc <mem_free+0x11c>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	69fa      	ldr	r2, [r7, #28]
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	d202      	bcs.n	8010fc2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010fbc:	4a0f      	ldr	r2, [pc, #60]	@ (8010ffc <mem_free+0x11c>)
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010fc2:	69f8      	ldr	r0, [r7, #28]
 8010fc4:	f7ff fe5c 	bl	8010c80 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010fc8:	4809      	ldr	r0, [pc, #36]	@ (8010ff0 <mem_free+0x110>)
 8010fca:	f00a fb74 	bl	801b6b6 <sys_mutex_unlock>
 8010fce:	e000      	b.n	8010fd2 <mem_free+0xf2>
    return;
 8010fd0:	bf00      	nop
}
 8010fd2:	3720      	adds	r7, #32
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}
 8010fd8:	0801f2e4 	.word	0x0801f2e4
 8010fdc:	0801f3d4 	.word	0x0801f3d4
 8010fe0:	0801f32c 	.word	0x0801f32c
 8010fe4:	200097e4 	.word	0x200097e4
 8010fe8:	200097e8 	.word	0x200097e8
 8010fec:	0801f3f8 	.word	0x0801f3f8
 8010ff0:	200097ec 	.word	0x200097ec
 8010ff4:	0801f414 	.word	0x0801f414
 8010ff8:	0801f43c 	.word	0x0801f43c
 8010ffc:	200097f0 	.word	0x200097f0

08011000 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b088      	sub	sp, #32
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
 8011008:	460b      	mov	r3, r1
 801100a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801100c:	887b      	ldrh	r3, [r7, #2]
 801100e:	3303      	adds	r3, #3
 8011010:	b29b      	uxth	r3, r3
 8011012:	f023 0303 	bic.w	r3, r3, #3
 8011016:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8011018:	8bfb      	ldrh	r3, [r7, #30]
 801101a:	2b0b      	cmp	r3, #11
 801101c:	d801      	bhi.n	8011022 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801101e:	230c      	movs	r3, #12
 8011020:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8011022:	8bfb      	ldrh	r3, [r7, #30]
 8011024:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011028:	d803      	bhi.n	8011032 <mem_trim+0x32>
 801102a:	8bfa      	ldrh	r2, [r7, #30]
 801102c:	887b      	ldrh	r3, [r7, #2]
 801102e:	429a      	cmp	r2, r3
 8011030:	d201      	bcs.n	8011036 <mem_trim+0x36>
    return NULL;
 8011032:	2300      	movs	r3, #0
 8011034:	e0d8      	b.n	80111e8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8011036:	4b6e      	ldr	r3, [pc, #440]	@ (80111f0 <mem_trim+0x1f0>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	687a      	ldr	r2, [r7, #4]
 801103c:	429a      	cmp	r2, r3
 801103e:	d304      	bcc.n	801104a <mem_trim+0x4a>
 8011040:	4b6c      	ldr	r3, [pc, #432]	@ (80111f4 <mem_trim+0x1f4>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	687a      	ldr	r2, [r7, #4]
 8011046:	429a      	cmp	r2, r3
 8011048:	d306      	bcc.n	8011058 <mem_trim+0x58>
 801104a:	4b6b      	ldr	r3, [pc, #428]	@ (80111f8 <mem_trim+0x1f8>)
 801104c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8011050:	496a      	ldr	r1, [pc, #424]	@ (80111fc <mem_trim+0x1fc>)
 8011052:	486b      	ldr	r0, [pc, #428]	@ (8011200 <mem_trim+0x200>)
 8011054:	f00b fa22 	bl	801c49c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011058:	4b65      	ldr	r3, [pc, #404]	@ (80111f0 <mem_trim+0x1f0>)
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	687a      	ldr	r2, [r7, #4]
 801105e:	429a      	cmp	r2, r3
 8011060:	d304      	bcc.n	801106c <mem_trim+0x6c>
 8011062:	4b64      	ldr	r3, [pc, #400]	@ (80111f4 <mem_trim+0x1f4>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	687a      	ldr	r2, [r7, #4]
 8011068:	429a      	cmp	r2, r3
 801106a:	d307      	bcc.n	801107c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801106c:	f00a fb56 	bl	801b71c <sys_arch_protect>
 8011070:	60b8      	str	r0, [r7, #8]
 8011072:	68b8      	ldr	r0, [r7, #8]
 8011074:	f00a fb60 	bl	801b738 <sys_arch_unprotect>
    return rmem;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	e0b5      	b.n	80111e8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	3b08      	subs	r3, #8
 8011080:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011082:	69b8      	ldr	r0, [r7, #24]
 8011084:	f7ff fdea 	bl	8010c5c <mem_to_ptr>
 8011088:	4603      	mov	r3, r0
 801108a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801108c:	69bb      	ldr	r3, [r7, #24]
 801108e:	881a      	ldrh	r2, [r3, #0]
 8011090:	8afb      	ldrh	r3, [r7, #22]
 8011092:	1ad3      	subs	r3, r2, r3
 8011094:	b29b      	uxth	r3, r3
 8011096:	3b08      	subs	r3, #8
 8011098:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801109a:	8bfa      	ldrh	r2, [r7, #30]
 801109c:	8abb      	ldrh	r3, [r7, #20]
 801109e:	429a      	cmp	r2, r3
 80110a0:	d906      	bls.n	80110b0 <mem_trim+0xb0>
 80110a2:	4b55      	ldr	r3, [pc, #340]	@ (80111f8 <mem_trim+0x1f8>)
 80110a4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80110a8:	4956      	ldr	r1, [pc, #344]	@ (8011204 <mem_trim+0x204>)
 80110aa:	4855      	ldr	r0, [pc, #340]	@ (8011200 <mem_trim+0x200>)
 80110ac:	f00b f9f6 	bl	801c49c <iprintf>
  if (newsize > size) {
 80110b0:	8bfa      	ldrh	r2, [r7, #30]
 80110b2:	8abb      	ldrh	r3, [r7, #20]
 80110b4:	429a      	cmp	r2, r3
 80110b6:	d901      	bls.n	80110bc <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80110b8:	2300      	movs	r3, #0
 80110ba:	e095      	b.n	80111e8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80110bc:	8bfa      	ldrh	r2, [r7, #30]
 80110be:	8abb      	ldrh	r3, [r7, #20]
 80110c0:	429a      	cmp	r2, r3
 80110c2:	d101      	bne.n	80110c8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	e08f      	b.n	80111e8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80110c8:	484f      	ldr	r0, [pc, #316]	@ (8011208 <mem_trim+0x208>)
 80110ca:	f00a fae5 	bl	801b698 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80110ce:	69bb      	ldr	r3, [r7, #24]
 80110d0:	881b      	ldrh	r3, [r3, #0]
 80110d2:	4618      	mov	r0, r3
 80110d4:	f7ff fdb0 	bl	8010c38 <ptr_to_mem>
 80110d8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	791b      	ldrb	r3, [r3, #4]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d13f      	bne.n	8011162 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80110e2:	69bb      	ldr	r3, [r7, #24]
 80110e4:	881b      	ldrh	r3, [r3, #0]
 80110e6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80110ea:	d106      	bne.n	80110fa <mem_trim+0xfa>
 80110ec:	4b42      	ldr	r3, [pc, #264]	@ (80111f8 <mem_trim+0x1f8>)
 80110ee:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80110f2:	4946      	ldr	r1, [pc, #280]	@ (801120c <mem_trim+0x20c>)
 80110f4:	4842      	ldr	r0, [pc, #264]	@ (8011200 <mem_trim+0x200>)
 80110f6:	f00b f9d1 	bl	801c49c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80110fa:	693b      	ldr	r3, [r7, #16]
 80110fc:	881b      	ldrh	r3, [r3, #0]
 80110fe:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011100:	8afa      	ldrh	r2, [r7, #22]
 8011102:	8bfb      	ldrh	r3, [r7, #30]
 8011104:	4413      	add	r3, r2
 8011106:	b29b      	uxth	r3, r3
 8011108:	3308      	adds	r3, #8
 801110a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801110c:	4b40      	ldr	r3, [pc, #256]	@ (8011210 <mem_trim+0x210>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	693a      	ldr	r2, [r7, #16]
 8011112:	429a      	cmp	r2, r3
 8011114:	d106      	bne.n	8011124 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8011116:	89fb      	ldrh	r3, [r7, #14]
 8011118:	4618      	mov	r0, r3
 801111a:	f7ff fd8d 	bl	8010c38 <ptr_to_mem>
 801111e:	4603      	mov	r3, r0
 8011120:	4a3b      	ldr	r2, [pc, #236]	@ (8011210 <mem_trim+0x210>)
 8011122:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011124:	89fb      	ldrh	r3, [r7, #14]
 8011126:	4618      	mov	r0, r3
 8011128:	f7ff fd86 	bl	8010c38 <ptr_to_mem>
 801112c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801112e:	693b      	ldr	r3, [r7, #16]
 8011130:	2200      	movs	r2, #0
 8011132:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011134:	693b      	ldr	r3, [r7, #16]
 8011136:	89ba      	ldrh	r2, [r7, #12]
 8011138:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801113a:	693b      	ldr	r3, [r7, #16]
 801113c:	8afa      	ldrh	r2, [r7, #22]
 801113e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011140:	69bb      	ldr	r3, [r7, #24]
 8011142:	89fa      	ldrh	r2, [r7, #14]
 8011144:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011146:	693b      	ldr	r3, [r7, #16]
 8011148:	881b      	ldrh	r3, [r3, #0]
 801114a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801114e:	d047      	beq.n	80111e0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011150:	693b      	ldr	r3, [r7, #16]
 8011152:	881b      	ldrh	r3, [r3, #0]
 8011154:	4618      	mov	r0, r3
 8011156:	f7ff fd6f 	bl	8010c38 <ptr_to_mem>
 801115a:	4602      	mov	r2, r0
 801115c:	89fb      	ldrh	r3, [r7, #14]
 801115e:	8053      	strh	r3, [r2, #2]
 8011160:	e03e      	b.n	80111e0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011162:	8bfb      	ldrh	r3, [r7, #30]
 8011164:	f103 0214 	add.w	r2, r3, #20
 8011168:	8abb      	ldrh	r3, [r7, #20]
 801116a:	429a      	cmp	r2, r3
 801116c:	d838      	bhi.n	80111e0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801116e:	8afa      	ldrh	r2, [r7, #22]
 8011170:	8bfb      	ldrh	r3, [r7, #30]
 8011172:	4413      	add	r3, r2
 8011174:	b29b      	uxth	r3, r3
 8011176:	3308      	adds	r3, #8
 8011178:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801117a:	69bb      	ldr	r3, [r7, #24]
 801117c:	881b      	ldrh	r3, [r3, #0]
 801117e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011182:	d106      	bne.n	8011192 <mem_trim+0x192>
 8011184:	4b1c      	ldr	r3, [pc, #112]	@ (80111f8 <mem_trim+0x1f8>)
 8011186:	f240 3216 	movw	r2, #790	@ 0x316
 801118a:	4920      	ldr	r1, [pc, #128]	@ (801120c <mem_trim+0x20c>)
 801118c:	481c      	ldr	r0, [pc, #112]	@ (8011200 <mem_trim+0x200>)
 801118e:	f00b f985 	bl	801c49c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011192:	89fb      	ldrh	r3, [r7, #14]
 8011194:	4618      	mov	r0, r3
 8011196:	f7ff fd4f 	bl	8010c38 <ptr_to_mem>
 801119a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801119c:	4b1c      	ldr	r3, [pc, #112]	@ (8011210 <mem_trim+0x210>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	693a      	ldr	r2, [r7, #16]
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d202      	bcs.n	80111ac <mem_trim+0x1ac>
      lfree = mem2;
 80111a6:	4a1a      	ldr	r2, [pc, #104]	@ (8011210 <mem_trim+0x210>)
 80111a8:	693b      	ldr	r3, [r7, #16]
 80111aa:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80111ac:	693b      	ldr	r3, [r7, #16]
 80111ae:	2200      	movs	r2, #0
 80111b0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80111b2:	69bb      	ldr	r3, [r7, #24]
 80111b4:	881a      	ldrh	r2, [r3, #0]
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80111ba:	693b      	ldr	r3, [r7, #16]
 80111bc:	8afa      	ldrh	r2, [r7, #22]
 80111be:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80111c0:	69bb      	ldr	r3, [r7, #24]
 80111c2:	89fa      	ldrh	r2, [r7, #14]
 80111c4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	881b      	ldrh	r3, [r3, #0]
 80111ca:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80111ce:	d007      	beq.n	80111e0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	881b      	ldrh	r3, [r3, #0]
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7ff fd2f 	bl	8010c38 <ptr_to_mem>
 80111da:	4602      	mov	r2, r0
 80111dc:	89fb      	ldrh	r3, [r7, #14]
 80111de:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80111e0:	4809      	ldr	r0, [pc, #36]	@ (8011208 <mem_trim+0x208>)
 80111e2:	f00a fa68 	bl	801b6b6 <sys_mutex_unlock>
  return rmem;
 80111e6:	687b      	ldr	r3, [r7, #4]
}
 80111e8:	4618      	mov	r0, r3
 80111ea:	3720      	adds	r7, #32
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}
 80111f0:	200097e4 	.word	0x200097e4
 80111f4:	200097e8 	.word	0x200097e8
 80111f8:	0801f2e4 	.word	0x0801f2e4
 80111fc:	0801f470 	.word	0x0801f470
 8011200:	0801f32c 	.word	0x0801f32c
 8011204:	0801f488 	.word	0x0801f488
 8011208:	200097ec 	.word	0x200097ec
 801120c:	0801f4a8 	.word	0x0801f4a8
 8011210:	200097f0 	.word	0x200097f0

08011214 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b088      	sub	sp, #32
 8011218:	af00      	add	r7, sp, #0
 801121a:	4603      	mov	r3, r0
 801121c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801121e:	88fb      	ldrh	r3, [r7, #6]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d101      	bne.n	8011228 <mem_malloc+0x14>
    return NULL;
 8011224:	2300      	movs	r3, #0
 8011226:	e0e2      	b.n	80113ee <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011228:	88fb      	ldrh	r3, [r7, #6]
 801122a:	3303      	adds	r3, #3
 801122c:	b29b      	uxth	r3, r3
 801122e:	f023 0303 	bic.w	r3, r3, #3
 8011232:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011234:	8bbb      	ldrh	r3, [r7, #28]
 8011236:	2b0b      	cmp	r3, #11
 8011238:	d801      	bhi.n	801123e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801123a:	230c      	movs	r3, #12
 801123c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801123e:	8bbb      	ldrh	r3, [r7, #28]
 8011240:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011244:	d803      	bhi.n	801124e <mem_malloc+0x3a>
 8011246:	8bba      	ldrh	r2, [r7, #28]
 8011248:	88fb      	ldrh	r3, [r7, #6]
 801124a:	429a      	cmp	r2, r3
 801124c:	d201      	bcs.n	8011252 <mem_malloc+0x3e>
    return NULL;
 801124e:	2300      	movs	r3, #0
 8011250:	e0cd      	b.n	80113ee <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8011252:	4869      	ldr	r0, [pc, #420]	@ (80113f8 <mem_malloc+0x1e4>)
 8011254:	f00a fa20 	bl	801b698 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011258:	4b68      	ldr	r3, [pc, #416]	@ (80113fc <mem_malloc+0x1e8>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	4618      	mov	r0, r3
 801125e:	f7ff fcfd 	bl	8010c5c <mem_to_ptr>
 8011262:	4603      	mov	r3, r0
 8011264:	83fb      	strh	r3, [r7, #30]
 8011266:	e0b7      	b.n	80113d8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011268:	8bfb      	ldrh	r3, [r7, #30]
 801126a:	4618      	mov	r0, r3
 801126c:	f7ff fce4 	bl	8010c38 <ptr_to_mem>
 8011270:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011272:	697b      	ldr	r3, [r7, #20]
 8011274:	791b      	ldrb	r3, [r3, #4]
 8011276:	2b00      	cmp	r3, #0
 8011278:	f040 80a7 	bne.w	80113ca <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801127c:	697b      	ldr	r3, [r7, #20]
 801127e:	881b      	ldrh	r3, [r3, #0]
 8011280:	461a      	mov	r2, r3
 8011282:	8bfb      	ldrh	r3, [r7, #30]
 8011284:	1ad3      	subs	r3, r2, r3
 8011286:	f1a3 0208 	sub.w	r2, r3, #8
 801128a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801128c:	429a      	cmp	r2, r3
 801128e:	f0c0 809c 	bcc.w	80113ca <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011292:	697b      	ldr	r3, [r7, #20]
 8011294:	881b      	ldrh	r3, [r3, #0]
 8011296:	461a      	mov	r2, r3
 8011298:	8bfb      	ldrh	r3, [r7, #30]
 801129a:	1ad3      	subs	r3, r2, r3
 801129c:	f1a3 0208 	sub.w	r2, r3, #8
 80112a0:	8bbb      	ldrh	r3, [r7, #28]
 80112a2:	3314      	adds	r3, #20
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d333      	bcc.n	8011310 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80112a8:	8bfa      	ldrh	r2, [r7, #30]
 80112aa:	8bbb      	ldrh	r3, [r7, #28]
 80112ac:	4413      	add	r3, r2
 80112ae:	b29b      	uxth	r3, r3
 80112b0:	3308      	adds	r3, #8
 80112b2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80112b4:	8a7b      	ldrh	r3, [r7, #18]
 80112b6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80112ba:	d106      	bne.n	80112ca <mem_malloc+0xb6>
 80112bc:	4b50      	ldr	r3, [pc, #320]	@ (8011400 <mem_malloc+0x1ec>)
 80112be:	f240 3287 	movw	r2, #903	@ 0x387
 80112c2:	4950      	ldr	r1, [pc, #320]	@ (8011404 <mem_malloc+0x1f0>)
 80112c4:	4850      	ldr	r0, [pc, #320]	@ (8011408 <mem_malloc+0x1f4>)
 80112c6:	f00b f8e9 	bl	801c49c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80112ca:	8a7b      	ldrh	r3, [r7, #18]
 80112cc:	4618      	mov	r0, r3
 80112ce:	f7ff fcb3 	bl	8010c38 <ptr_to_mem>
 80112d2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	2200      	movs	r2, #0
 80112d8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80112da:	697b      	ldr	r3, [r7, #20]
 80112dc:	881a      	ldrh	r2, [r3, #0]
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	8bfa      	ldrh	r2, [r7, #30]
 80112e6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80112e8:	697b      	ldr	r3, [r7, #20]
 80112ea:	8a7a      	ldrh	r2, [r7, #18]
 80112ec:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	2201      	movs	r2, #1
 80112f2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	881b      	ldrh	r3, [r3, #0]
 80112f8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80112fc:	d00b      	beq.n	8011316 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	881b      	ldrh	r3, [r3, #0]
 8011302:	4618      	mov	r0, r3
 8011304:	f7ff fc98 	bl	8010c38 <ptr_to_mem>
 8011308:	4602      	mov	r2, r0
 801130a:	8a7b      	ldrh	r3, [r7, #18]
 801130c:	8053      	strh	r3, [r2, #2]
 801130e:	e002      	b.n	8011316 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011310:	697b      	ldr	r3, [r7, #20]
 8011312:	2201      	movs	r2, #1
 8011314:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011316:	4b39      	ldr	r3, [pc, #228]	@ (80113fc <mem_malloc+0x1e8>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	697a      	ldr	r2, [r7, #20]
 801131c:	429a      	cmp	r2, r3
 801131e:	d127      	bne.n	8011370 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011320:	4b36      	ldr	r3, [pc, #216]	@ (80113fc <mem_malloc+0x1e8>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011326:	e005      	b.n	8011334 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011328:	69bb      	ldr	r3, [r7, #24]
 801132a:	881b      	ldrh	r3, [r3, #0]
 801132c:	4618      	mov	r0, r3
 801132e:	f7ff fc83 	bl	8010c38 <ptr_to_mem>
 8011332:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011334:	69bb      	ldr	r3, [r7, #24]
 8011336:	791b      	ldrb	r3, [r3, #4]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d004      	beq.n	8011346 <mem_malloc+0x132>
 801133c:	4b33      	ldr	r3, [pc, #204]	@ (801140c <mem_malloc+0x1f8>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	69ba      	ldr	r2, [r7, #24]
 8011342:	429a      	cmp	r2, r3
 8011344:	d1f0      	bne.n	8011328 <mem_malloc+0x114>
          }
          lfree = cur;
 8011346:	4a2d      	ldr	r2, [pc, #180]	@ (80113fc <mem_malloc+0x1e8>)
 8011348:	69bb      	ldr	r3, [r7, #24]
 801134a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801134c:	4b2b      	ldr	r3, [pc, #172]	@ (80113fc <mem_malloc+0x1e8>)
 801134e:	681a      	ldr	r2, [r3, #0]
 8011350:	4b2e      	ldr	r3, [pc, #184]	@ (801140c <mem_malloc+0x1f8>)
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	429a      	cmp	r2, r3
 8011356:	d00b      	beq.n	8011370 <mem_malloc+0x15c>
 8011358:	4b28      	ldr	r3, [pc, #160]	@ (80113fc <mem_malloc+0x1e8>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	791b      	ldrb	r3, [r3, #4]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d006      	beq.n	8011370 <mem_malloc+0x15c>
 8011362:	4b27      	ldr	r3, [pc, #156]	@ (8011400 <mem_malloc+0x1ec>)
 8011364:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8011368:	4929      	ldr	r1, [pc, #164]	@ (8011410 <mem_malloc+0x1fc>)
 801136a:	4827      	ldr	r0, [pc, #156]	@ (8011408 <mem_malloc+0x1f4>)
 801136c:	f00b f896 	bl	801c49c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8011370:	4821      	ldr	r0, [pc, #132]	@ (80113f8 <mem_malloc+0x1e4>)
 8011372:	f00a f9a0 	bl	801b6b6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8011376:	8bba      	ldrh	r2, [r7, #28]
 8011378:	697b      	ldr	r3, [r7, #20]
 801137a:	4413      	add	r3, r2
 801137c:	3308      	adds	r3, #8
 801137e:	4a23      	ldr	r2, [pc, #140]	@ (801140c <mem_malloc+0x1f8>)
 8011380:	6812      	ldr	r2, [r2, #0]
 8011382:	4293      	cmp	r3, r2
 8011384:	d906      	bls.n	8011394 <mem_malloc+0x180>
 8011386:	4b1e      	ldr	r3, [pc, #120]	@ (8011400 <mem_malloc+0x1ec>)
 8011388:	f240 32b9 	movw	r2, #953	@ 0x3b9
 801138c:	4921      	ldr	r1, [pc, #132]	@ (8011414 <mem_malloc+0x200>)
 801138e:	481e      	ldr	r0, [pc, #120]	@ (8011408 <mem_malloc+0x1f4>)
 8011390:	f00b f884 	bl	801c49c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011394:	697b      	ldr	r3, [r7, #20]
 8011396:	f003 0303 	and.w	r3, r3, #3
 801139a:	2b00      	cmp	r3, #0
 801139c:	d006      	beq.n	80113ac <mem_malloc+0x198>
 801139e:	4b18      	ldr	r3, [pc, #96]	@ (8011400 <mem_malloc+0x1ec>)
 80113a0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80113a4:	491c      	ldr	r1, [pc, #112]	@ (8011418 <mem_malloc+0x204>)
 80113a6:	4818      	ldr	r0, [pc, #96]	@ (8011408 <mem_malloc+0x1f4>)
 80113a8:	f00b f878 	bl	801c49c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80113ac:	697b      	ldr	r3, [r7, #20]
 80113ae:	f003 0303 	and.w	r3, r3, #3
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d006      	beq.n	80113c4 <mem_malloc+0x1b0>
 80113b6:	4b12      	ldr	r3, [pc, #72]	@ (8011400 <mem_malloc+0x1ec>)
 80113b8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80113bc:	4917      	ldr	r1, [pc, #92]	@ (801141c <mem_malloc+0x208>)
 80113be:	4812      	ldr	r0, [pc, #72]	@ (8011408 <mem_malloc+0x1f4>)
 80113c0:	f00b f86c 	bl	801c49c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	3308      	adds	r3, #8
 80113c8:	e011      	b.n	80113ee <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80113ca:	8bfb      	ldrh	r3, [r7, #30]
 80113cc:	4618      	mov	r0, r3
 80113ce:	f7ff fc33 	bl	8010c38 <ptr_to_mem>
 80113d2:	4603      	mov	r3, r0
 80113d4:	881b      	ldrh	r3, [r3, #0]
 80113d6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80113d8:	8bfa      	ldrh	r2, [r7, #30]
 80113da:	8bbb      	ldrh	r3, [r7, #28]
 80113dc:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 80113e0:	429a      	cmp	r2, r3
 80113e2:	f4ff af41 	bcc.w	8011268 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80113e6:	4804      	ldr	r0, [pc, #16]	@ (80113f8 <mem_malloc+0x1e4>)
 80113e8:	f00a f965 	bl	801b6b6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80113ec:	2300      	movs	r3, #0
}
 80113ee:	4618      	mov	r0, r3
 80113f0:	3720      	adds	r7, #32
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}
 80113f6:	bf00      	nop
 80113f8:	200097ec 	.word	0x200097ec
 80113fc:	200097f0 	.word	0x200097f0
 8011400:	0801f2e4 	.word	0x0801f2e4
 8011404:	0801f4a8 	.word	0x0801f4a8
 8011408:	0801f32c 	.word	0x0801f32c
 801140c:	200097e8 	.word	0x200097e8
 8011410:	0801f4bc 	.word	0x0801f4bc
 8011414:	0801f4d8 	.word	0x0801f4d8
 8011418:	0801f508 	.word	0x0801f508
 801141c:	0801f538 	.word	0x0801f538

08011420 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011420:	b480      	push	{r7}
 8011422:	b085      	sub	sp, #20
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	689b      	ldr	r3, [r3, #8]
 801142c:	2200      	movs	r2, #0
 801142e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	685b      	ldr	r3, [r3, #4]
 8011434:	3303      	adds	r3, #3
 8011436:	f023 0303 	bic.w	r3, r3, #3
 801143a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801143c:	2300      	movs	r3, #0
 801143e:	60fb      	str	r3, [r7, #12]
 8011440:	e011      	b.n	8011466 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	689b      	ldr	r3, [r3, #8]
 8011446:	681a      	ldr	r2, [r3, #0]
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	689b      	ldr	r3, [r3, #8]
 8011450:	68ba      	ldr	r2, [r7, #8]
 8011452:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	881b      	ldrh	r3, [r3, #0]
 8011458:	461a      	mov	r2, r3
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	4413      	add	r3, r2
 801145e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	3301      	adds	r3, #1
 8011464:	60fb      	str	r3, [r7, #12]
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	885b      	ldrh	r3, [r3, #2]
 801146a:	461a      	mov	r2, r3
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	4293      	cmp	r3, r2
 8011470:	dbe7      	blt.n	8011442 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011472:	bf00      	nop
 8011474:	bf00      	nop
 8011476:	3714      	adds	r7, #20
 8011478:	46bd      	mov	sp, r7
 801147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147e:	4770      	bx	lr

08011480 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b082      	sub	sp, #8
 8011484:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011486:	2300      	movs	r3, #0
 8011488:	80fb      	strh	r3, [r7, #6]
 801148a:	e009      	b.n	80114a0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801148c:	88fb      	ldrh	r3, [r7, #6]
 801148e:	4a08      	ldr	r2, [pc, #32]	@ (80114b0 <memp_init+0x30>)
 8011490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011494:	4618      	mov	r0, r3
 8011496:	f7ff ffc3 	bl	8011420 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801149a:	88fb      	ldrh	r3, [r7, #6]
 801149c:	3301      	adds	r3, #1
 801149e:	80fb      	strh	r3, [r7, #6]
 80114a0:	88fb      	ldrh	r3, [r7, #6]
 80114a2:	2b0c      	cmp	r3, #12
 80114a4:	d9f2      	bls.n	801148c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80114a6:	bf00      	nop
 80114a8:	bf00      	nop
 80114aa:	3708      	adds	r7, #8
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}
 80114b0:	08021d94 	.word	0x08021d94

080114b4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b084      	sub	sp, #16
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80114bc:	f00a f92e 	bl	801b71c <sys_arch_protect>
 80114c0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	689b      	ldr	r3, [r3, #8]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d015      	beq.n	80114fc <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	689b      	ldr	r3, [r3, #8]
 80114d4:	68ba      	ldr	r2, [r7, #8]
 80114d6:	6812      	ldr	r2, [r2, #0]
 80114d8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	f003 0303 	and.w	r3, r3, #3
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d006      	beq.n	80114f2 <do_memp_malloc_pool+0x3e>
 80114e4:	4b09      	ldr	r3, [pc, #36]	@ (801150c <do_memp_malloc_pool+0x58>)
 80114e6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80114ea:	4909      	ldr	r1, [pc, #36]	@ (8011510 <do_memp_malloc_pool+0x5c>)
 80114ec:	4809      	ldr	r0, [pc, #36]	@ (8011514 <do_memp_malloc_pool+0x60>)
 80114ee:	f00a ffd5 	bl	801c49c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80114f2:	68f8      	ldr	r0, [r7, #12]
 80114f4:	f00a f920 	bl	801b738 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	e003      	b.n	8011504 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80114fc:	68f8      	ldr	r0, [r7, #12]
 80114fe:	f00a f91b 	bl	801b738 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011502:	2300      	movs	r3, #0
}
 8011504:	4618      	mov	r0, r3
 8011506:	3710      	adds	r7, #16
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}
 801150c:	0801f55c 	.word	0x0801f55c
 8011510:	0801f58c 	.word	0x0801f58c
 8011514:	0801f5b0 	.word	0x0801f5b0

08011518 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b082      	sub	sp, #8
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d106      	bne.n	8011534 <memp_malloc_pool+0x1c>
 8011526:	4b0a      	ldr	r3, [pc, #40]	@ (8011550 <memp_malloc_pool+0x38>)
 8011528:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 801152c:	4909      	ldr	r1, [pc, #36]	@ (8011554 <memp_malloc_pool+0x3c>)
 801152e:	480a      	ldr	r0, [pc, #40]	@ (8011558 <memp_malloc_pool+0x40>)
 8011530:	f00a ffb4 	bl	801c49c <iprintf>
  if (desc == NULL) {
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d101      	bne.n	801153e <memp_malloc_pool+0x26>
    return NULL;
 801153a:	2300      	movs	r3, #0
 801153c:	e003      	b.n	8011546 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	f7ff ffb8 	bl	80114b4 <do_memp_malloc_pool>
 8011544:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8011546:	4618      	mov	r0, r3
 8011548:	3708      	adds	r7, #8
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
 801154e:	bf00      	nop
 8011550:	0801f55c 	.word	0x0801f55c
 8011554:	0801f5d8 	.word	0x0801f5d8
 8011558:	0801f5b0 	.word	0x0801f5b0

0801155c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b084      	sub	sp, #16
 8011560:	af00      	add	r7, sp, #0
 8011562:	4603      	mov	r3, r0
 8011564:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011566:	79fb      	ldrb	r3, [r7, #7]
 8011568:	2b0c      	cmp	r3, #12
 801156a:	d908      	bls.n	801157e <memp_malloc+0x22>
 801156c:	4b0a      	ldr	r3, [pc, #40]	@ (8011598 <memp_malloc+0x3c>)
 801156e:	f240 1257 	movw	r2, #343	@ 0x157
 8011572:	490a      	ldr	r1, [pc, #40]	@ (801159c <memp_malloc+0x40>)
 8011574:	480a      	ldr	r0, [pc, #40]	@ (80115a0 <memp_malloc+0x44>)
 8011576:	f00a ff91 	bl	801c49c <iprintf>
 801157a:	2300      	movs	r3, #0
 801157c:	e008      	b.n	8011590 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801157e:	79fb      	ldrb	r3, [r7, #7]
 8011580:	4a08      	ldr	r2, [pc, #32]	@ (80115a4 <memp_malloc+0x48>)
 8011582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011586:	4618      	mov	r0, r3
 8011588:	f7ff ff94 	bl	80114b4 <do_memp_malloc_pool>
 801158c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801158e:	68fb      	ldr	r3, [r7, #12]
}
 8011590:	4618      	mov	r0, r3
 8011592:	3710      	adds	r7, #16
 8011594:	46bd      	mov	sp, r7
 8011596:	bd80      	pop	{r7, pc}
 8011598:	0801f55c 	.word	0x0801f55c
 801159c:	0801f5ec 	.word	0x0801f5ec
 80115a0:	0801f5b0 	.word	0x0801f5b0
 80115a4:	08021d94 	.word	0x08021d94

080115a8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b084      	sub	sp, #16
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
 80115b0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	f003 0303 	and.w	r3, r3, #3
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d006      	beq.n	80115ca <do_memp_free_pool+0x22>
 80115bc:	4b0d      	ldr	r3, [pc, #52]	@ (80115f4 <do_memp_free_pool+0x4c>)
 80115be:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80115c2:	490d      	ldr	r1, [pc, #52]	@ (80115f8 <do_memp_free_pool+0x50>)
 80115c4:	480d      	ldr	r0, [pc, #52]	@ (80115fc <do_memp_free_pool+0x54>)
 80115c6:	f00a ff69 	bl	801c49c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80115ce:	f00a f8a5 	bl	801b71c <sys_arch_protect>
 80115d2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	689b      	ldr	r3, [r3, #8]
 80115d8:	681a      	ldr	r2, [r3, #0]
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	689b      	ldr	r3, [r3, #8]
 80115e2:	68fa      	ldr	r2, [r7, #12]
 80115e4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80115e6:	68b8      	ldr	r0, [r7, #8]
 80115e8:	f00a f8a6 	bl	801b738 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80115ec:	bf00      	nop
 80115ee:	3710      	adds	r7, #16
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}
 80115f4:	0801f55c 	.word	0x0801f55c
 80115f8:	0801f60c 	.word	0x0801f60c
 80115fc:	0801f5b0 	.word	0x0801f5b0

08011600 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b082      	sub	sp, #8
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
 8011608:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d106      	bne.n	801161e <memp_free_pool+0x1e>
 8011610:	4b0a      	ldr	r3, [pc, #40]	@ (801163c <memp_free_pool+0x3c>)
 8011612:	f240 1295 	movw	r2, #405	@ 0x195
 8011616:	490a      	ldr	r1, [pc, #40]	@ (8011640 <memp_free_pool+0x40>)
 8011618:	480a      	ldr	r0, [pc, #40]	@ (8011644 <memp_free_pool+0x44>)
 801161a:	f00a ff3f 	bl	801c49c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d007      	beq.n	8011634 <memp_free_pool+0x34>
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d004      	beq.n	8011634 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801162a:	6839      	ldr	r1, [r7, #0]
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f7ff ffbb 	bl	80115a8 <do_memp_free_pool>
 8011632:	e000      	b.n	8011636 <memp_free_pool+0x36>
    return;
 8011634:	bf00      	nop
}
 8011636:	3708      	adds	r7, #8
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}
 801163c:	0801f55c 	.word	0x0801f55c
 8011640:	0801f5d8 	.word	0x0801f5d8
 8011644:	0801f5b0 	.word	0x0801f5b0

08011648 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b082      	sub	sp, #8
 801164c:	af00      	add	r7, sp, #0
 801164e:	4603      	mov	r3, r0
 8011650:	6039      	str	r1, [r7, #0]
 8011652:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011654:	79fb      	ldrb	r3, [r7, #7]
 8011656:	2b0c      	cmp	r3, #12
 8011658:	d907      	bls.n	801166a <memp_free+0x22>
 801165a:	4b0c      	ldr	r3, [pc, #48]	@ (801168c <memp_free+0x44>)
 801165c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8011660:	490b      	ldr	r1, [pc, #44]	@ (8011690 <memp_free+0x48>)
 8011662:	480c      	ldr	r0, [pc, #48]	@ (8011694 <memp_free+0x4c>)
 8011664:	f00a ff1a 	bl	801c49c <iprintf>
 8011668:	e00c      	b.n	8011684 <memp_free+0x3c>

  if (mem == NULL) {
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d008      	beq.n	8011682 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8011670:	79fb      	ldrb	r3, [r7, #7]
 8011672:	4a09      	ldr	r2, [pc, #36]	@ (8011698 <memp_free+0x50>)
 8011674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011678:	6839      	ldr	r1, [r7, #0]
 801167a:	4618      	mov	r0, r3
 801167c:	f7ff ff94 	bl	80115a8 <do_memp_free_pool>
 8011680:	e000      	b.n	8011684 <memp_free+0x3c>
    return;
 8011682:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8011684:	3708      	adds	r7, #8
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}
 801168a:	bf00      	nop
 801168c:	0801f55c 	.word	0x0801f55c
 8011690:	0801f62c 	.word	0x0801f62c
 8011694:	0801f5b0 	.word	0x0801f5b0
 8011698:	08021d94 	.word	0x08021d94

0801169c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801169c:	b480      	push	{r7}
 801169e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80116a0:	bf00      	nop
 80116a2:	46bd      	mov	sp, r7
 80116a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a8:	4770      	bx	lr
	...

080116ac <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b086      	sub	sp, #24
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	60f8      	str	r0, [r7, #12]
 80116b4:	60b9      	str	r1, [r7, #8]
 80116b6:	607a      	str	r2, [r7, #4]
 80116b8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d108      	bne.n	80116d2 <netif_add+0x26>
 80116c0:	4b57      	ldr	r3, [pc, #348]	@ (8011820 <netif_add+0x174>)
 80116c2:	f240 1227 	movw	r2, #295	@ 0x127
 80116c6:	4957      	ldr	r1, [pc, #348]	@ (8011824 <netif_add+0x178>)
 80116c8:	4857      	ldr	r0, [pc, #348]	@ (8011828 <netif_add+0x17c>)
 80116ca:	f00a fee7 	bl	801c49c <iprintf>
 80116ce:	2300      	movs	r3, #0
 80116d0:	e0a2      	b.n	8011818 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80116d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d108      	bne.n	80116ea <netif_add+0x3e>
 80116d8:	4b51      	ldr	r3, [pc, #324]	@ (8011820 <netif_add+0x174>)
 80116da:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80116de:	4953      	ldr	r1, [pc, #332]	@ (801182c <netif_add+0x180>)
 80116e0:	4851      	ldr	r0, [pc, #324]	@ (8011828 <netif_add+0x17c>)
 80116e2:	f00a fedb 	bl	801c49c <iprintf>
 80116e6:	2300      	movs	r3, #0
 80116e8:	e096      	b.n	8011818 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d101      	bne.n	80116f4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80116f0:	4b4f      	ldr	r3, [pc, #316]	@ (8011830 <netif_add+0x184>)
 80116f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d101      	bne.n	80116fe <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80116fa:	4b4d      	ldr	r3, [pc, #308]	@ (8011830 <netif_add+0x184>)
 80116fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d101      	bne.n	8011708 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8011704:	4b4a      	ldr	r3, [pc, #296]	@ (8011830 <netif_add+0x184>)
 8011706:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	2200      	movs	r2, #0
 801170c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	2200      	movs	r2, #0
 8011712:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	2200      	movs	r2, #0
 8011718:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	4a45      	ldr	r2, [pc, #276]	@ (8011834 <netif_add+0x188>)
 801171e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	2200      	movs	r2, #0
 8011724:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	2200      	movs	r2, #0
 801172a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	2200      	movs	r2, #0
 8011732:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	6a3a      	ldr	r2, [r7, #32]
 8011738:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801173a:	4b3f      	ldr	r3, [pc, #252]	@ (8011838 <netif_add+0x18c>)
 801173c:	781a      	ldrb	r2, [r3, #0]
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011748:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801174a:	683b      	ldr	r3, [r7, #0]
 801174c:	687a      	ldr	r2, [r7, #4]
 801174e:	68b9      	ldr	r1, [r7, #8]
 8011750:	68f8      	ldr	r0, [r7, #12]
 8011752:	f000 f913 	bl	801197c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8011756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011758:	68f8      	ldr	r0, [r7, #12]
 801175a:	4798      	blx	r3
 801175c:	4603      	mov	r3, r0
 801175e:	2b00      	cmp	r3, #0
 8011760:	d001      	beq.n	8011766 <netif_add+0xba>
    return NULL;
 8011762:	2300      	movs	r3, #0
 8011764:	e058      	b.n	8011818 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801176c:	2bff      	cmp	r3, #255	@ 0xff
 801176e:	d103      	bne.n	8011778 <netif_add+0xcc>
        netif->num = 0;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	2200      	movs	r2, #0
 8011774:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8011778:	2300      	movs	r3, #0
 801177a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801177c:	4b2f      	ldr	r3, [pc, #188]	@ (801183c <netif_add+0x190>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	617b      	str	r3, [r7, #20]
 8011782:	e02b      	b.n	80117dc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8011784:	697a      	ldr	r2, [r7, #20]
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	429a      	cmp	r2, r3
 801178a:	d106      	bne.n	801179a <netif_add+0xee>
 801178c:	4b24      	ldr	r3, [pc, #144]	@ (8011820 <netif_add+0x174>)
 801178e:	f240 128b 	movw	r2, #395	@ 0x18b
 8011792:	492b      	ldr	r1, [pc, #172]	@ (8011840 <netif_add+0x194>)
 8011794:	4824      	ldr	r0, [pc, #144]	@ (8011828 <netif_add+0x17c>)
 8011796:	f00a fe81 	bl	801c49c <iprintf>
        num_netifs++;
 801179a:	693b      	ldr	r3, [r7, #16]
 801179c:	3301      	adds	r3, #1
 801179e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80117a0:	693b      	ldr	r3, [r7, #16]
 80117a2:	2bff      	cmp	r3, #255	@ 0xff
 80117a4:	dd06      	ble.n	80117b4 <netif_add+0x108>
 80117a6:	4b1e      	ldr	r3, [pc, #120]	@ (8011820 <netif_add+0x174>)
 80117a8:	f240 128d 	movw	r2, #397	@ 0x18d
 80117ac:	4925      	ldr	r1, [pc, #148]	@ (8011844 <netif_add+0x198>)
 80117ae:	481e      	ldr	r0, [pc, #120]	@ (8011828 <netif_add+0x17c>)
 80117b0:	f00a fe74 	bl	801c49c <iprintf>
        if (netif2->num == netif->num) {
 80117b4:	697b      	ldr	r3, [r7, #20]
 80117b6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80117c0:	429a      	cmp	r2, r3
 80117c2:	d108      	bne.n	80117d6 <netif_add+0x12a>
          netif->num++;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80117ca:	3301      	adds	r3, #1
 80117cc:	b2da      	uxtb	r2, r3
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80117d4:	e005      	b.n	80117e2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80117d6:	697b      	ldr	r3, [r7, #20]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	617b      	str	r3, [r7, #20]
 80117dc:	697b      	ldr	r3, [r7, #20]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d1d0      	bne.n	8011784 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80117e2:	697b      	ldr	r3, [r7, #20]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d1be      	bne.n	8011766 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80117ee:	2bfe      	cmp	r3, #254	@ 0xfe
 80117f0:	d103      	bne.n	80117fa <netif_add+0x14e>
    netif_num = 0;
 80117f2:	4b11      	ldr	r3, [pc, #68]	@ (8011838 <netif_add+0x18c>)
 80117f4:	2200      	movs	r2, #0
 80117f6:	701a      	strb	r2, [r3, #0]
 80117f8:	e006      	b.n	8011808 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011800:	3301      	adds	r3, #1
 8011802:	b2da      	uxtb	r2, r3
 8011804:	4b0c      	ldr	r3, [pc, #48]	@ (8011838 <netif_add+0x18c>)
 8011806:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8011808:	4b0c      	ldr	r3, [pc, #48]	@ (801183c <netif_add+0x190>)
 801180a:	681a      	ldr	r2, [r3, #0]
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011810:	4a0a      	ldr	r2, [pc, #40]	@ (801183c <netif_add+0x190>)
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8011816:	68fb      	ldr	r3, [r7, #12]
}
 8011818:	4618      	mov	r0, r3
 801181a:	3718      	adds	r7, #24
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}
 8011820:	0801f648 	.word	0x0801f648
 8011824:	0801f6dc 	.word	0x0801f6dc
 8011828:	0801f698 	.word	0x0801f698
 801182c:	0801f6f8 	.word	0x0801f6f8
 8011830:	08021e08 	.word	0x08021e08
 8011834:	08011bf3 	.word	0x08011bf3
 8011838:	2000c8c8 	.word	0x2000c8c8
 801183c:	2000c8c0 	.word	0x2000c8c0
 8011840:	0801f71c 	.word	0x0801f71c
 8011844:	0801f730 	.word	0x0801f730

08011848 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b082      	sub	sp, #8
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
 8011850:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8011852:	6839      	ldr	r1, [r7, #0]
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f002 fdab 	bl	80143b0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801185a:	6839      	ldr	r1, [r7, #0]
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f007 fb11 	bl	8018e84 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8011862:	bf00      	nop
 8011864:	3708      	adds	r7, #8
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}
	...

0801186c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b086      	sub	sp, #24
 8011870:	af00      	add	r7, sp, #0
 8011872:	60f8      	str	r0, [r7, #12]
 8011874:	60b9      	str	r1, [r7, #8]
 8011876:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d106      	bne.n	801188c <netif_do_set_ipaddr+0x20>
 801187e:	4b1d      	ldr	r3, [pc, #116]	@ (80118f4 <netif_do_set_ipaddr+0x88>)
 8011880:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8011884:	491c      	ldr	r1, [pc, #112]	@ (80118f8 <netif_do_set_ipaddr+0x8c>)
 8011886:	481d      	ldr	r0, [pc, #116]	@ (80118fc <netif_do_set_ipaddr+0x90>)
 8011888:	f00a fe08 	bl	801c49c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d106      	bne.n	80118a0 <netif_do_set_ipaddr+0x34>
 8011892:	4b18      	ldr	r3, [pc, #96]	@ (80118f4 <netif_do_set_ipaddr+0x88>)
 8011894:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8011898:	4917      	ldr	r1, [pc, #92]	@ (80118f8 <netif_do_set_ipaddr+0x8c>)
 801189a:	4818      	ldr	r0, [pc, #96]	@ (80118fc <netif_do_set_ipaddr+0x90>)
 801189c:	f00a fdfe 	bl	801c49c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	681a      	ldr	r2, [r3, #0]
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	3304      	adds	r3, #4
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d01c      	beq.n	80118e8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	3304      	adds	r3, #4
 80118b8:	681a      	ldr	r2, [r3, #0]
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80118be:	f107 0314 	add.w	r3, r7, #20
 80118c2:	4619      	mov	r1, r3
 80118c4:	6878      	ldr	r0, [r7, #4]
 80118c6:	f7ff ffbf 	bl	8011848 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d002      	beq.n	80118d6 <netif_do_set_ipaddr+0x6a>
 80118d0:	68bb      	ldr	r3, [r7, #8]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	e000      	b.n	80118d8 <netif_do_set_ipaddr+0x6c>
 80118d6:	2300      	movs	r3, #0
 80118d8:	68fa      	ldr	r2, [r7, #12]
 80118da:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80118dc:	2101      	movs	r1, #1
 80118de:	68f8      	ldr	r0, [r7, #12]
 80118e0:	f000 f8d2 	bl	8011a88 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80118e4:	2301      	movs	r3, #1
 80118e6:	e000      	b.n	80118ea <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80118e8:	2300      	movs	r3, #0
}
 80118ea:	4618      	mov	r0, r3
 80118ec:	3718      	adds	r7, #24
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}
 80118f2:	bf00      	nop
 80118f4:	0801f648 	.word	0x0801f648
 80118f8:	0801f760 	.word	0x0801f760
 80118fc:	0801f698 	.word	0x0801f698

08011900 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011900:	b480      	push	{r7}
 8011902:	b085      	sub	sp, #20
 8011904:	af00      	add	r7, sp, #0
 8011906:	60f8      	str	r0, [r7, #12]
 8011908:	60b9      	str	r1, [r7, #8]
 801190a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801190c:	68bb      	ldr	r3, [r7, #8]
 801190e:	681a      	ldr	r2, [r3, #0]
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	3308      	adds	r3, #8
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	429a      	cmp	r2, r3
 8011918:	d00a      	beq.n	8011930 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801191a:	68bb      	ldr	r3, [r7, #8]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d002      	beq.n	8011926 <netif_do_set_netmask+0x26>
 8011920:	68bb      	ldr	r3, [r7, #8]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	e000      	b.n	8011928 <netif_do_set_netmask+0x28>
 8011926:	2300      	movs	r3, #0
 8011928:	68fa      	ldr	r2, [r7, #12]
 801192a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801192c:	2301      	movs	r3, #1
 801192e:	e000      	b.n	8011932 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8011930:	2300      	movs	r3, #0
}
 8011932:	4618      	mov	r0, r3
 8011934:	3714      	adds	r7, #20
 8011936:	46bd      	mov	sp, r7
 8011938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193c:	4770      	bx	lr

0801193e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801193e:	b480      	push	{r7}
 8011940:	b085      	sub	sp, #20
 8011942:	af00      	add	r7, sp, #0
 8011944:	60f8      	str	r0, [r7, #12]
 8011946:	60b9      	str	r1, [r7, #8]
 8011948:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	681a      	ldr	r2, [r3, #0]
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	330c      	adds	r3, #12
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	429a      	cmp	r2, r3
 8011956:	d00a      	beq.n	801196e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d002      	beq.n	8011964 <netif_do_set_gw+0x26>
 801195e:	68bb      	ldr	r3, [r7, #8]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	e000      	b.n	8011966 <netif_do_set_gw+0x28>
 8011964:	2300      	movs	r3, #0
 8011966:	68fa      	ldr	r2, [r7, #12]
 8011968:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801196a:	2301      	movs	r3, #1
 801196c:	e000      	b.n	8011970 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801196e:	2300      	movs	r3, #0
}
 8011970:	4618      	mov	r0, r3
 8011972:	3714      	adds	r7, #20
 8011974:	46bd      	mov	sp, r7
 8011976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197a:	4770      	bx	lr

0801197c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b088      	sub	sp, #32
 8011980:	af00      	add	r7, sp, #0
 8011982:	60f8      	str	r0, [r7, #12]
 8011984:	60b9      	str	r1, [r7, #8]
 8011986:	607a      	str	r2, [r7, #4]
 8011988:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801198a:	2300      	movs	r3, #0
 801198c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801198e:	2300      	movs	r3, #0
 8011990:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011992:	68bb      	ldr	r3, [r7, #8]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d101      	bne.n	801199c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8011998:	4b1c      	ldr	r3, [pc, #112]	@ (8011a0c <netif_set_addr+0x90>)
 801199a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d101      	bne.n	80119a6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80119a2:	4b1a      	ldr	r3, [pc, #104]	@ (8011a0c <netif_set_addr+0x90>)
 80119a4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d101      	bne.n	80119b0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80119ac:	4b17      	ldr	r3, [pc, #92]	@ (8011a0c <netif_set_addr+0x90>)
 80119ae:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d003      	beq.n	80119be <netif_set_addr+0x42>
 80119b6:	68bb      	ldr	r3, [r7, #8]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d101      	bne.n	80119c2 <netif_set_addr+0x46>
 80119be:	2301      	movs	r3, #1
 80119c0:	e000      	b.n	80119c4 <netif_set_addr+0x48>
 80119c2:	2300      	movs	r3, #0
 80119c4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80119c6:	697b      	ldr	r3, [r7, #20]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d006      	beq.n	80119da <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80119cc:	f107 0310 	add.w	r3, r7, #16
 80119d0:	461a      	mov	r2, r3
 80119d2:	68b9      	ldr	r1, [r7, #8]
 80119d4:	68f8      	ldr	r0, [r7, #12]
 80119d6:	f7ff ff49 	bl	801186c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80119da:	69fa      	ldr	r2, [r7, #28]
 80119dc:	6879      	ldr	r1, [r7, #4]
 80119de:	68f8      	ldr	r0, [r7, #12]
 80119e0:	f7ff ff8e 	bl	8011900 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80119e4:	69ba      	ldr	r2, [r7, #24]
 80119e6:	6839      	ldr	r1, [r7, #0]
 80119e8:	68f8      	ldr	r0, [r7, #12]
 80119ea:	f7ff ffa8 	bl	801193e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d106      	bne.n	8011a02 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80119f4:	f107 0310 	add.w	r3, r7, #16
 80119f8:	461a      	mov	r2, r3
 80119fa:	68b9      	ldr	r1, [r7, #8]
 80119fc:	68f8      	ldr	r0, [r7, #12]
 80119fe:	f7ff ff35 	bl	801186c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8011a02:	bf00      	nop
 8011a04:	3720      	adds	r7, #32
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}
 8011a0a:	bf00      	nop
 8011a0c:	08021e08 	.word	0x08021e08

08011a10 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011a10:	b480      	push	{r7}
 8011a12:	b083      	sub	sp, #12
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011a18:	4a04      	ldr	r2, [pc, #16]	@ (8011a2c <netif_set_default+0x1c>)
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011a1e:	bf00      	nop
 8011a20:	370c      	adds	r7, #12
 8011a22:	46bd      	mov	sp, r7
 8011a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a28:	4770      	bx	lr
 8011a2a:	bf00      	nop
 8011a2c:	2000c8c4 	.word	0x2000c8c4

08011a30 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b082      	sub	sp, #8
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d107      	bne.n	8011a4e <netif_set_up+0x1e>
 8011a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8011a7c <netif_set_up+0x4c>)
 8011a40:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8011a44:	490e      	ldr	r1, [pc, #56]	@ (8011a80 <netif_set_up+0x50>)
 8011a46:	480f      	ldr	r0, [pc, #60]	@ (8011a84 <netif_set_up+0x54>)
 8011a48:	f00a fd28 	bl	801c49c <iprintf>
 8011a4c:	e013      	b.n	8011a76 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011a54:	f003 0301 	and.w	r3, r3, #1
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d10c      	bne.n	8011a76 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011a62:	f043 0301 	orr.w	r3, r3, #1
 8011a66:	b2da      	uxtb	r2, r3
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011a6e:	2103      	movs	r1, #3
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f000 f809 	bl	8011a88 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8011a76:	3708      	adds	r7, #8
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	0801f648 	.word	0x0801f648
 8011a80:	0801f7d0 	.word	0x0801f7d0
 8011a84:	0801f698 	.word	0x0801f698

08011a88 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b082      	sub	sp, #8
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
 8011a90:	460b      	mov	r3, r1
 8011a92:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d106      	bne.n	8011aa8 <netif_issue_reports+0x20>
 8011a9a:	4b18      	ldr	r3, [pc, #96]	@ (8011afc <netif_issue_reports+0x74>)
 8011a9c:	f240 326d 	movw	r2, #877	@ 0x36d
 8011aa0:	4917      	ldr	r1, [pc, #92]	@ (8011b00 <netif_issue_reports+0x78>)
 8011aa2:	4818      	ldr	r0, [pc, #96]	@ (8011b04 <netif_issue_reports+0x7c>)
 8011aa4:	f00a fcfa 	bl	801c49c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011aae:	f003 0304 	and.w	r3, r3, #4
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d01e      	beq.n	8011af4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011abc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d017      	beq.n	8011af4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011ac4:	78fb      	ldrb	r3, [r7, #3]
 8011ac6:	f003 0301 	and.w	r3, r3, #1
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d013      	beq.n	8011af6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	3304      	adds	r3, #4
 8011ad2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d00e      	beq.n	8011af6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011ade:	f003 0308 	and.w	r3, r3, #8
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d007      	beq.n	8011af6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	3304      	adds	r3, #4
 8011aea:	4619      	mov	r1, r3
 8011aec:	6878      	ldr	r0, [r7, #4]
 8011aee:	f008 f903 	bl	8019cf8 <etharp_request>
 8011af2:	e000      	b.n	8011af6 <netif_issue_reports+0x6e>
    return;
 8011af4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8011af6:	3708      	adds	r7, #8
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}
 8011afc:	0801f648 	.word	0x0801f648
 8011b00:	0801f7ec 	.word	0x0801f7ec
 8011b04:	0801f698 	.word	0x0801f698

08011b08 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b082      	sub	sp, #8
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d107      	bne.n	8011b26 <netif_set_link_up+0x1e>
 8011b16:	4b13      	ldr	r3, [pc, #76]	@ (8011b64 <netif_set_link_up+0x5c>)
 8011b18:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8011b1c:	4912      	ldr	r1, [pc, #72]	@ (8011b68 <netif_set_link_up+0x60>)
 8011b1e:	4813      	ldr	r0, [pc, #76]	@ (8011b6c <netif_set_link_up+0x64>)
 8011b20:	f00a fcbc 	bl	801c49c <iprintf>
 8011b24:	e01b      	b.n	8011b5e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011b2c:	f003 0304 	and.w	r3, r3, #4
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d114      	bne.n	8011b5e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011b3a:	f043 0304 	orr.w	r3, r3, #4
 8011b3e:	b2da      	uxtb	r2, r3
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011b46:	2103      	movs	r1, #3
 8011b48:	6878      	ldr	r0, [r7, #4]
 8011b4a:	f7ff ff9d 	bl	8011a88 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	69db      	ldr	r3, [r3, #28]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d003      	beq.n	8011b5e <netif_set_link_up+0x56>
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	69db      	ldr	r3, [r3, #28]
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011b5e:	3708      	adds	r7, #8
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}
 8011b64:	0801f648 	.word	0x0801f648
 8011b68:	0801f830 	.word	0x0801f830
 8011b6c:	0801f698 	.word	0x0801f698

08011b70 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b082      	sub	sp, #8
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d107      	bne.n	8011b8e <netif_set_link_down+0x1e>
 8011b7e:	4b11      	ldr	r3, [pc, #68]	@ (8011bc4 <netif_set_link_down+0x54>)
 8011b80:	f240 4206 	movw	r2, #1030	@ 0x406
 8011b84:	4910      	ldr	r1, [pc, #64]	@ (8011bc8 <netif_set_link_down+0x58>)
 8011b86:	4811      	ldr	r0, [pc, #68]	@ (8011bcc <netif_set_link_down+0x5c>)
 8011b88:	f00a fc88 	bl	801c49c <iprintf>
 8011b8c:	e017      	b.n	8011bbe <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011b94:	f003 0304 	and.w	r3, r3, #4
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d010      	beq.n	8011bbe <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011ba2:	f023 0304 	bic.w	r3, r3, #4
 8011ba6:	b2da      	uxtb	r2, r3
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	69db      	ldr	r3, [r3, #28]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d003      	beq.n	8011bbe <netif_set_link_down+0x4e>
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	69db      	ldr	r3, [r3, #28]
 8011bba:	6878      	ldr	r0, [r7, #4]
 8011bbc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011bbe:	3708      	adds	r7, #8
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	bd80      	pop	{r7, pc}
 8011bc4:	0801f648 	.word	0x0801f648
 8011bc8:	0801f854 	.word	0x0801f854
 8011bcc:	0801f698 	.word	0x0801f698

08011bd0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011bd0:	b480      	push	{r7}
 8011bd2:	b083      	sub	sp, #12
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
 8011bd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d002      	beq.n	8011be6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	683a      	ldr	r2, [r7, #0]
 8011be4:	61da      	str	r2, [r3, #28]
  }
}
 8011be6:	bf00      	nop
 8011be8:	370c      	adds	r7, #12
 8011bea:	46bd      	mov	sp, r7
 8011bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf0:	4770      	bx	lr

08011bf2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8011bf2:	b480      	push	{r7}
 8011bf4:	b085      	sub	sp, #20
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	60f8      	str	r0, [r7, #12]
 8011bfa:	60b9      	str	r1, [r7, #8]
 8011bfc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8011bfe:	f06f 030b 	mvn.w	r3, #11
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3714      	adds	r7, #20
 8011c06:	46bd      	mov	sp, r7
 8011c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0c:	4770      	bx	lr
	...

08011c10 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8011c10:	b480      	push	{r7}
 8011c12:	b085      	sub	sp, #20
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	4603      	mov	r3, r0
 8011c18:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011c1a:	79fb      	ldrb	r3, [r7, #7]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d013      	beq.n	8011c48 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8011c20:	4b0d      	ldr	r3, [pc, #52]	@ (8011c58 <netif_get_by_index+0x48>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	60fb      	str	r3, [r7, #12]
 8011c26:	e00c      	b.n	8011c42 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011c2e:	3301      	adds	r3, #1
 8011c30:	b2db      	uxtb	r3, r3
 8011c32:	79fa      	ldrb	r2, [r7, #7]
 8011c34:	429a      	cmp	r2, r3
 8011c36:	d101      	bne.n	8011c3c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	e006      	b.n	8011c4a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	60fb      	str	r3, [r7, #12]
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d1ef      	bne.n	8011c28 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011c48:	2300      	movs	r3, #0
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	3714      	adds	r7, #20
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c54:	4770      	bx	lr
 8011c56:	bf00      	nop
 8011c58:	2000c8c0 	.word	0x2000c8c0

08011c5c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b082      	sub	sp, #8
 8011c60:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8011c62:	f009 fd5b 	bl	801b71c <sys_arch_protect>
 8011c66:	6038      	str	r0, [r7, #0]
 8011c68:	4b0d      	ldr	r3, [pc, #52]	@ (8011ca0 <pbuf_free_ooseq+0x44>)
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	701a      	strb	r2, [r3, #0]
 8011c6e:	6838      	ldr	r0, [r7, #0]
 8011c70:	f009 fd62 	bl	801b738 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011c74:	4b0b      	ldr	r3, [pc, #44]	@ (8011ca4 <pbuf_free_ooseq+0x48>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	607b      	str	r3, [r7, #4]
 8011c7a:	e00a      	b.n	8011c92 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d003      	beq.n	8011c8c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f002 fbd1 	bl	801442c <tcp_free_ooseq>
      return;
 8011c8a:	e005      	b.n	8011c98 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	68db      	ldr	r3, [r3, #12]
 8011c90:	607b      	str	r3, [r7, #4]
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d1f1      	bne.n	8011c7c <pbuf_free_ooseq+0x20>
    }
  }
}
 8011c98:	3708      	adds	r7, #8
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	bd80      	pop	{r7, pc}
 8011c9e:	bf00      	nop
 8011ca0:	2000c8c9 	.word	0x2000c8c9
 8011ca4:	2000c8d8 	.word	0x2000c8d8

08011ca8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b082      	sub	sp, #8
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8011cb0:	f7ff ffd4 	bl	8011c5c <pbuf_free_ooseq>
}
 8011cb4:	bf00      	nop
 8011cb6:	3708      	adds	r7, #8
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	bd80      	pop	{r7, pc}

08011cbc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b082      	sub	sp, #8
 8011cc0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8011cc2:	f009 fd2b 	bl	801b71c <sys_arch_protect>
 8011cc6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8011cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8011d08 <pbuf_pool_is_empty+0x4c>)
 8011cca:	781b      	ldrb	r3, [r3, #0]
 8011ccc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8011cce:	4b0e      	ldr	r3, [pc, #56]	@ (8011d08 <pbuf_pool_is_empty+0x4c>)
 8011cd0:	2201      	movs	r2, #1
 8011cd2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f009 fd2f 	bl	801b738 <sys_arch_unprotect>

  if (!queued) {
 8011cda:	78fb      	ldrb	r3, [r7, #3]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d10f      	bne.n	8011d00 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8011ce0:	2100      	movs	r1, #0
 8011ce2:	480a      	ldr	r0, [pc, #40]	@ (8011d0c <pbuf_pool_is_empty+0x50>)
 8011ce4:	f7fe fed8 	bl	8010a98 <tcpip_try_callback>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d008      	beq.n	8011d00 <pbuf_pool_is_empty+0x44>
 8011cee:	f009 fd15 	bl	801b71c <sys_arch_protect>
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	4b04      	ldr	r3, [pc, #16]	@ (8011d08 <pbuf_pool_is_empty+0x4c>)
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	701a      	strb	r2, [r3, #0]
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f009 fd1c 	bl	801b738 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011d00:	bf00      	nop
 8011d02:	3708      	adds	r7, #8
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd80      	pop	{r7, pc}
 8011d08:	2000c8c9 	.word	0x2000c8c9
 8011d0c:	08011ca9 	.word	0x08011ca9

08011d10 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011d10:	b480      	push	{r7}
 8011d12:	b085      	sub	sp, #20
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	60f8      	str	r0, [r7, #12]
 8011d18:	60b9      	str	r1, [r7, #8]
 8011d1a:	4611      	mov	r1, r2
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	460b      	mov	r3, r1
 8011d20:	80fb      	strh	r3, [r7, #6]
 8011d22:	4613      	mov	r3, r2
 8011d24:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	2200      	movs	r2, #0
 8011d2a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	68ba      	ldr	r2, [r7, #8]
 8011d30:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	88fa      	ldrh	r2, [r7, #6]
 8011d36:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	88ba      	ldrh	r2, [r7, #4]
 8011d3c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8011d3e:	8b3b      	ldrh	r3, [r7, #24]
 8011d40:	b2da      	uxtb	r2, r3
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	7f3a      	ldrb	r2, [r7, #28]
 8011d4a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	2201      	movs	r2, #1
 8011d50:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	2200      	movs	r2, #0
 8011d56:	73da      	strb	r2, [r3, #15]
}
 8011d58:	bf00      	nop
 8011d5a:	3714      	adds	r7, #20
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d62:	4770      	bx	lr

08011d64 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b08c      	sub	sp, #48	@ 0x30
 8011d68:	af02      	add	r7, sp, #8
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	71fb      	strb	r3, [r7, #7]
 8011d6e:	460b      	mov	r3, r1
 8011d70:	80bb      	strh	r3, [r7, #4]
 8011d72:	4613      	mov	r3, r2
 8011d74:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011d76:	79fb      	ldrb	r3, [r7, #7]
 8011d78:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011d7a:	887b      	ldrh	r3, [r7, #2]
 8011d7c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8011d80:	d07f      	beq.n	8011e82 <pbuf_alloc+0x11e>
 8011d82:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8011d86:	f300 80c8 	bgt.w	8011f1a <pbuf_alloc+0x1b6>
 8011d8a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8011d8e:	d010      	beq.n	8011db2 <pbuf_alloc+0x4e>
 8011d90:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8011d94:	f300 80c1 	bgt.w	8011f1a <pbuf_alloc+0x1b6>
 8011d98:	2b01      	cmp	r3, #1
 8011d9a:	d002      	beq.n	8011da2 <pbuf_alloc+0x3e>
 8011d9c:	2b41      	cmp	r3, #65	@ 0x41
 8011d9e:	f040 80bc 	bne.w	8011f1a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8011da2:	887a      	ldrh	r2, [r7, #2]
 8011da4:	88bb      	ldrh	r3, [r7, #4]
 8011da6:	4619      	mov	r1, r3
 8011da8:	2000      	movs	r0, #0
 8011daa:	f000 f8d1 	bl	8011f50 <pbuf_alloc_reference>
 8011dae:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8011db0:	e0bd      	b.n	8011f2e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8011db2:	2300      	movs	r3, #0
 8011db4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8011db6:	2300      	movs	r3, #0
 8011db8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011dba:	88bb      	ldrh	r3, [r7, #4]
 8011dbc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8011dbe:	200c      	movs	r0, #12
 8011dc0:	f7ff fbcc 	bl	801155c <memp_malloc>
 8011dc4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011dc6:	693b      	ldr	r3, [r7, #16]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d109      	bne.n	8011de0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8011dcc:	f7ff ff76 	bl	8011cbc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d002      	beq.n	8011ddc <pbuf_alloc+0x78>
            pbuf_free(p);
 8011dd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011dd8:	f000 faa8 	bl	801232c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011ddc:	2300      	movs	r3, #0
 8011dde:	e0a7      	b.n	8011f30 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011de0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011de2:	3303      	adds	r3, #3
 8011de4:	b29b      	uxth	r3, r3
 8011de6:	f023 0303 	bic.w	r3, r3, #3
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8011df0:	b29b      	uxth	r3, r3
 8011df2:	8b7a      	ldrh	r2, [r7, #26]
 8011df4:	4293      	cmp	r3, r2
 8011df6:	bf28      	it	cs
 8011df8:	4613      	movcs	r3, r2
 8011dfa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011dfc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011dfe:	3310      	adds	r3, #16
 8011e00:	693a      	ldr	r2, [r7, #16]
 8011e02:	4413      	add	r3, r2
 8011e04:	3303      	adds	r3, #3
 8011e06:	f023 0303 	bic.w	r3, r3, #3
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	89f9      	ldrh	r1, [r7, #14]
 8011e0e:	8b7a      	ldrh	r2, [r7, #26]
 8011e10:	2300      	movs	r3, #0
 8011e12:	9301      	str	r3, [sp, #4]
 8011e14:	887b      	ldrh	r3, [r7, #2]
 8011e16:	9300      	str	r3, [sp, #0]
 8011e18:	460b      	mov	r3, r1
 8011e1a:	4601      	mov	r1, r0
 8011e1c:	6938      	ldr	r0, [r7, #16]
 8011e1e:	f7ff ff77 	bl	8011d10 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011e22:	693b      	ldr	r3, [r7, #16]
 8011e24:	685b      	ldr	r3, [r3, #4]
 8011e26:	f003 0303 	and.w	r3, r3, #3
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d006      	beq.n	8011e3c <pbuf_alloc+0xd8>
 8011e2e:	4b42      	ldr	r3, [pc, #264]	@ (8011f38 <pbuf_alloc+0x1d4>)
 8011e30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011e34:	4941      	ldr	r1, [pc, #260]	@ (8011f3c <pbuf_alloc+0x1d8>)
 8011e36:	4842      	ldr	r0, [pc, #264]	@ (8011f40 <pbuf_alloc+0x1dc>)
 8011e38:	f00a fb30 	bl	801c49c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011e3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011e3e:	3303      	adds	r3, #3
 8011e40:	f023 0303 	bic.w	r3, r3, #3
 8011e44:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8011e48:	d106      	bne.n	8011e58 <pbuf_alloc+0xf4>
 8011e4a:	4b3b      	ldr	r3, [pc, #236]	@ (8011f38 <pbuf_alloc+0x1d4>)
 8011e4c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8011e50:	493c      	ldr	r1, [pc, #240]	@ (8011f44 <pbuf_alloc+0x1e0>)
 8011e52:	483b      	ldr	r0, [pc, #236]	@ (8011f40 <pbuf_alloc+0x1dc>)
 8011e54:	f00a fb22 	bl	801c49c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d102      	bne.n	8011e64 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8011e62:	e002      	b.n	8011e6a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011e64:	69fb      	ldr	r3, [r7, #28]
 8011e66:	693a      	ldr	r2, [r7, #16]
 8011e68:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011e6a:	693b      	ldr	r3, [r7, #16]
 8011e6c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8011e6e:	8b7a      	ldrh	r2, [r7, #26]
 8011e70:	89fb      	ldrh	r3, [r7, #14]
 8011e72:	1ad3      	subs	r3, r2, r3
 8011e74:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011e76:	2300      	movs	r3, #0
 8011e78:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8011e7a:	8b7b      	ldrh	r3, [r7, #26]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d19e      	bne.n	8011dbe <pbuf_alloc+0x5a>
      break;
 8011e80:	e055      	b.n	8011f2e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8011e82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011e84:	3303      	adds	r3, #3
 8011e86:	b29b      	uxth	r3, r3
 8011e88:	f023 0303 	bic.w	r3, r3, #3
 8011e8c:	b29a      	uxth	r2, r3
 8011e8e:	88bb      	ldrh	r3, [r7, #4]
 8011e90:	3303      	adds	r3, #3
 8011e92:	b29b      	uxth	r3, r3
 8011e94:	f023 0303 	bic.w	r3, r3, #3
 8011e98:	b29b      	uxth	r3, r3
 8011e9a:	4413      	add	r3, r2
 8011e9c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011e9e:	8b3b      	ldrh	r3, [r7, #24]
 8011ea0:	3310      	adds	r3, #16
 8011ea2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011ea4:	8b3a      	ldrh	r2, [r7, #24]
 8011ea6:	88bb      	ldrh	r3, [r7, #4]
 8011ea8:	3303      	adds	r3, #3
 8011eaa:	f023 0303 	bic.w	r3, r3, #3
 8011eae:	429a      	cmp	r2, r3
 8011eb0:	d306      	bcc.n	8011ec0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011eb2:	8afa      	ldrh	r2, [r7, #22]
 8011eb4:	88bb      	ldrh	r3, [r7, #4]
 8011eb6:	3303      	adds	r3, #3
 8011eb8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011ebc:	429a      	cmp	r2, r3
 8011ebe:	d201      	bcs.n	8011ec4 <pbuf_alloc+0x160>
        return NULL;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	e035      	b.n	8011f30 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011ec4:	8afb      	ldrh	r3, [r7, #22]
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f7ff f9a4 	bl	8011214 <mem_malloc>
 8011ecc:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8011ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d101      	bne.n	8011ed8 <pbuf_alloc+0x174>
        return NULL;
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	e02b      	b.n	8011f30 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011ed8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011eda:	3310      	adds	r3, #16
 8011edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ede:	4413      	add	r3, r2
 8011ee0:	3303      	adds	r3, #3
 8011ee2:	f023 0303 	bic.w	r3, r3, #3
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	88b9      	ldrh	r1, [r7, #4]
 8011eea:	88ba      	ldrh	r2, [r7, #4]
 8011eec:	2300      	movs	r3, #0
 8011eee:	9301      	str	r3, [sp, #4]
 8011ef0:	887b      	ldrh	r3, [r7, #2]
 8011ef2:	9300      	str	r3, [sp, #0]
 8011ef4:	460b      	mov	r3, r1
 8011ef6:	4601      	mov	r1, r0
 8011ef8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011efa:	f7ff ff09 	bl	8011d10 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8011efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f00:	685b      	ldr	r3, [r3, #4]
 8011f02:	f003 0303 	and.w	r3, r3, #3
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d010      	beq.n	8011f2c <pbuf_alloc+0x1c8>
 8011f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8011f38 <pbuf_alloc+0x1d4>)
 8011f0c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8011f10:	490d      	ldr	r1, [pc, #52]	@ (8011f48 <pbuf_alloc+0x1e4>)
 8011f12:	480b      	ldr	r0, [pc, #44]	@ (8011f40 <pbuf_alloc+0x1dc>)
 8011f14:	f00a fac2 	bl	801c49c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011f18:	e008      	b.n	8011f2c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011f1a:	4b07      	ldr	r3, [pc, #28]	@ (8011f38 <pbuf_alloc+0x1d4>)
 8011f1c:	f240 1227 	movw	r2, #295	@ 0x127
 8011f20:	490a      	ldr	r1, [pc, #40]	@ (8011f4c <pbuf_alloc+0x1e8>)
 8011f22:	4807      	ldr	r0, [pc, #28]	@ (8011f40 <pbuf_alloc+0x1dc>)
 8011f24:	f00a faba 	bl	801c49c <iprintf>
      return NULL;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	e001      	b.n	8011f30 <pbuf_alloc+0x1cc>
      break;
 8011f2c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	3728      	adds	r7, #40	@ 0x28
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}
 8011f38:	0801f878 	.word	0x0801f878
 8011f3c:	0801f8a8 	.word	0x0801f8a8
 8011f40:	0801f8d8 	.word	0x0801f8d8
 8011f44:	0801f900 	.word	0x0801f900
 8011f48:	0801f934 	.word	0x0801f934
 8011f4c:	0801f960 	.word	0x0801f960

08011f50 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b086      	sub	sp, #24
 8011f54:	af02      	add	r7, sp, #8
 8011f56:	6078      	str	r0, [r7, #4]
 8011f58:	460b      	mov	r3, r1
 8011f5a:	807b      	strh	r3, [r7, #2]
 8011f5c:	4613      	mov	r3, r2
 8011f5e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011f60:	883b      	ldrh	r3, [r7, #0]
 8011f62:	2b41      	cmp	r3, #65	@ 0x41
 8011f64:	d009      	beq.n	8011f7a <pbuf_alloc_reference+0x2a>
 8011f66:	883b      	ldrh	r3, [r7, #0]
 8011f68:	2b01      	cmp	r3, #1
 8011f6a:	d006      	beq.n	8011f7a <pbuf_alloc_reference+0x2a>
 8011f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8011fac <pbuf_alloc_reference+0x5c>)
 8011f6e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8011f72:	490f      	ldr	r1, [pc, #60]	@ (8011fb0 <pbuf_alloc_reference+0x60>)
 8011f74:	480f      	ldr	r0, [pc, #60]	@ (8011fb4 <pbuf_alloc_reference+0x64>)
 8011f76:	f00a fa91 	bl	801c49c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011f7a:	200b      	movs	r0, #11
 8011f7c:	f7ff faee 	bl	801155c <memp_malloc>
 8011f80:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d101      	bne.n	8011f8c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011f88:	2300      	movs	r3, #0
 8011f8a:	e00b      	b.n	8011fa4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011f8c:	8879      	ldrh	r1, [r7, #2]
 8011f8e:	887a      	ldrh	r2, [r7, #2]
 8011f90:	2300      	movs	r3, #0
 8011f92:	9301      	str	r3, [sp, #4]
 8011f94:	883b      	ldrh	r3, [r7, #0]
 8011f96:	9300      	str	r3, [sp, #0]
 8011f98:	460b      	mov	r3, r1
 8011f9a:	6879      	ldr	r1, [r7, #4]
 8011f9c:	68f8      	ldr	r0, [r7, #12]
 8011f9e:	f7ff feb7 	bl	8011d10 <pbuf_init_alloced_pbuf>
  return p;
 8011fa2:	68fb      	ldr	r3, [r7, #12]
}
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	3710      	adds	r7, #16
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd80      	pop	{r7, pc}
 8011fac:	0801f878 	.word	0x0801f878
 8011fb0:	0801f97c 	.word	0x0801f97c
 8011fb4:	0801f8d8 	.word	0x0801f8d8

08011fb8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b088      	sub	sp, #32
 8011fbc:	af02      	add	r7, sp, #8
 8011fbe:	607b      	str	r3, [r7, #4]
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	73fb      	strb	r3, [r7, #15]
 8011fc4:	460b      	mov	r3, r1
 8011fc6:	81bb      	strh	r3, [r7, #12]
 8011fc8:	4613      	mov	r3, r2
 8011fca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011fcc:	7bfb      	ldrb	r3, [r7, #15]
 8011fce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011fd0:	8a7b      	ldrh	r3, [r7, #18]
 8011fd2:	3303      	adds	r3, #3
 8011fd4:	f023 0203 	bic.w	r2, r3, #3
 8011fd8:	89bb      	ldrh	r3, [r7, #12]
 8011fda:	441a      	add	r2, r3
 8011fdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	d901      	bls.n	8011fe6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	e018      	b.n	8012018 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8011fe6:	6a3b      	ldr	r3, [r7, #32]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d007      	beq.n	8011ffc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011fec:	8a7b      	ldrh	r3, [r7, #18]
 8011fee:	3303      	adds	r3, #3
 8011ff0:	f023 0303 	bic.w	r3, r3, #3
 8011ff4:	6a3a      	ldr	r2, [r7, #32]
 8011ff6:	4413      	add	r3, r2
 8011ff8:	617b      	str	r3, [r7, #20]
 8011ffa:	e001      	b.n	8012000 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	89b9      	ldrh	r1, [r7, #12]
 8012004:	89ba      	ldrh	r2, [r7, #12]
 8012006:	2302      	movs	r3, #2
 8012008:	9301      	str	r3, [sp, #4]
 801200a:	897b      	ldrh	r3, [r7, #10]
 801200c:	9300      	str	r3, [sp, #0]
 801200e:	460b      	mov	r3, r1
 8012010:	6979      	ldr	r1, [r7, #20]
 8012012:	f7ff fe7d 	bl	8011d10 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012016:	687b      	ldr	r3, [r7, #4]
}
 8012018:	4618      	mov	r0, r3
 801201a:	3718      	adds	r7, #24
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}

08012020 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b084      	sub	sp, #16
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
 8012028:	460b      	mov	r3, r1
 801202a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d106      	bne.n	8012040 <pbuf_realloc+0x20>
 8012032:	4b3a      	ldr	r3, [pc, #232]	@ (801211c <pbuf_realloc+0xfc>)
 8012034:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8012038:	4939      	ldr	r1, [pc, #228]	@ (8012120 <pbuf_realloc+0x100>)
 801203a:	483a      	ldr	r0, [pc, #232]	@ (8012124 <pbuf_realloc+0x104>)
 801203c:	f00a fa2e 	bl	801c49c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	891b      	ldrh	r3, [r3, #8]
 8012044:	887a      	ldrh	r2, [r7, #2]
 8012046:	429a      	cmp	r2, r3
 8012048:	d263      	bcs.n	8012112 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	891a      	ldrh	r2, [r3, #8]
 801204e:	887b      	ldrh	r3, [r7, #2]
 8012050:	1ad3      	subs	r3, r2, r3
 8012052:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012054:	887b      	ldrh	r3, [r7, #2]
 8012056:	817b      	strh	r3, [r7, #10]
  q = p;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801205c:	e018      	b.n	8012090 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	895b      	ldrh	r3, [r3, #10]
 8012062:	897a      	ldrh	r2, [r7, #10]
 8012064:	1ad3      	subs	r3, r2, r3
 8012066:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	891a      	ldrh	r2, [r3, #8]
 801206c:	893b      	ldrh	r3, [r7, #8]
 801206e:	1ad3      	subs	r3, r2, r3
 8012070:	b29a      	uxth	r2, r3
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d106      	bne.n	8012090 <pbuf_realloc+0x70>
 8012082:	4b26      	ldr	r3, [pc, #152]	@ (801211c <pbuf_realloc+0xfc>)
 8012084:	f240 12af 	movw	r2, #431	@ 0x1af
 8012088:	4927      	ldr	r1, [pc, #156]	@ (8012128 <pbuf_realloc+0x108>)
 801208a:	4826      	ldr	r0, [pc, #152]	@ (8012124 <pbuf_realloc+0x104>)
 801208c:	f00a fa06 	bl	801c49c <iprintf>
  while (rem_len > q->len) {
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	895b      	ldrh	r3, [r3, #10]
 8012094:	897a      	ldrh	r2, [r7, #10]
 8012096:	429a      	cmp	r2, r3
 8012098:	d8e1      	bhi.n	801205e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	7b1b      	ldrb	r3, [r3, #12]
 801209e:	f003 030f 	and.w	r3, r3, #15
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d121      	bne.n	80120ea <pbuf_realloc+0xca>
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	895b      	ldrh	r3, [r3, #10]
 80120aa:	897a      	ldrh	r2, [r7, #10]
 80120ac:	429a      	cmp	r2, r3
 80120ae:	d01c      	beq.n	80120ea <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	7b5b      	ldrb	r3, [r3, #13]
 80120b4:	f003 0302 	and.w	r3, r3, #2
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d116      	bne.n	80120ea <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	685a      	ldr	r2, [r3, #4]
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	1ad3      	subs	r3, r2, r3
 80120c4:	b29a      	uxth	r2, r3
 80120c6:	897b      	ldrh	r3, [r7, #10]
 80120c8:	4413      	add	r3, r2
 80120ca:	b29b      	uxth	r3, r3
 80120cc:	4619      	mov	r1, r3
 80120ce:	68f8      	ldr	r0, [r7, #12]
 80120d0:	f7fe ff96 	bl	8011000 <mem_trim>
 80120d4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d106      	bne.n	80120ea <pbuf_realloc+0xca>
 80120dc:	4b0f      	ldr	r3, [pc, #60]	@ (801211c <pbuf_realloc+0xfc>)
 80120de:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80120e2:	4912      	ldr	r1, [pc, #72]	@ (801212c <pbuf_realloc+0x10c>)
 80120e4:	480f      	ldr	r0, [pc, #60]	@ (8012124 <pbuf_realloc+0x104>)
 80120e6:	f00a f9d9 	bl	801c49c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	897a      	ldrh	r2, [r7, #10]
 80120ee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	895a      	ldrh	r2, [r3, #10]
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d004      	beq.n	801210a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	4618      	mov	r0, r3
 8012106:	f000 f911 	bl	801232c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	2200      	movs	r2, #0
 801210e:	601a      	str	r2, [r3, #0]
 8012110:	e000      	b.n	8012114 <pbuf_realloc+0xf4>
    return;
 8012112:	bf00      	nop

}
 8012114:	3710      	adds	r7, #16
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}
 801211a:	bf00      	nop
 801211c:	0801f878 	.word	0x0801f878
 8012120:	0801f990 	.word	0x0801f990
 8012124:	0801f8d8 	.word	0x0801f8d8
 8012128:	0801f9a8 	.word	0x0801f9a8
 801212c:	0801f9c0 	.word	0x0801f9c0

08012130 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b086      	sub	sp, #24
 8012134:	af00      	add	r7, sp, #0
 8012136:	60f8      	str	r0, [r7, #12]
 8012138:	60b9      	str	r1, [r7, #8]
 801213a:	4613      	mov	r3, r2
 801213c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d106      	bne.n	8012152 <pbuf_add_header_impl+0x22>
 8012144:	4b2b      	ldr	r3, [pc, #172]	@ (80121f4 <pbuf_add_header_impl+0xc4>)
 8012146:	f240 12df 	movw	r2, #479	@ 0x1df
 801214a:	492b      	ldr	r1, [pc, #172]	@ (80121f8 <pbuf_add_header_impl+0xc8>)
 801214c:	482b      	ldr	r0, [pc, #172]	@ (80121fc <pbuf_add_header_impl+0xcc>)
 801214e:	f00a f9a5 	bl	801c49c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d003      	beq.n	8012160 <pbuf_add_header_impl+0x30>
 8012158:	68bb      	ldr	r3, [r7, #8]
 801215a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801215e:	d301      	bcc.n	8012164 <pbuf_add_header_impl+0x34>
    return 1;
 8012160:	2301      	movs	r3, #1
 8012162:	e043      	b.n	80121ec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012164:	68bb      	ldr	r3, [r7, #8]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d101      	bne.n	801216e <pbuf_add_header_impl+0x3e>
    return 0;
 801216a:	2300      	movs	r3, #0
 801216c:	e03e      	b.n	80121ec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	891a      	ldrh	r2, [r3, #8]
 8012176:	8a7b      	ldrh	r3, [r7, #18]
 8012178:	4413      	add	r3, r2
 801217a:	b29b      	uxth	r3, r3
 801217c:	8a7a      	ldrh	r2, [r7, #18]
 801217e:	429a      	cmp	r2, r3
 8012180:	d901      	bls.n	8012186 <pbuf_add_header_impl+0x56>
    return 1;
 8012182:	2301      	movs	r3, #1
 8012184:	e032      	b.n	80121ec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	7b1b      	ldrb	r3, [r3, #12]
 801218a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801218c:	8a3b      	ldrh	r3, [r7, #16]
 801218e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012192:	2b00      	cmp	r3, #0
 8012194:	d00c      	beq.n	80121b0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	685a      	ldr	r2, [r3, #4]
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	425b      	negs	r3, r3
 801219e:	4413      	add	r3, r2
 80121a0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	3310      	adds	r3, #16
 80121a6:	697a      	ldr	r2, [r7, #20]
 80121a8:	429a      	cmp	r2, r3
 80121aa:	d20d      	bcs.n	80121c8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80121ac:	2301      	movs	r3, #1
 80121ae:	e01d      	b.n	80121ec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80121b0:	79fb      	ldrb	r3, [r7, #7]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d006      	beq.n	80121c4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	685a      	ldr	r2, [r3, #4]
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	425b      	negs	r3, r3
 80121be:	4413      	add	r3, r2
 80121c0:	617b      	str	r3, [r7, #20]
 80121c2:	e001      	b.n	80121c8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80121c4:	2301      	movs	r3, #1
 80121c6:	e011      	b.n	80121ec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	697a      	ldr	r2, [r7, #20]
 80121cc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	895a      	ldrh	r2, [r3, #10]
 80121d2:	8a7b      	ldrh	r3, [r7, #18]
 80121d4:	4413      	add	r3, r2
 80121d6:	b29a      	uxth	r2, r3
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	891a      	ldrh	r2, [r3, #8]
 80121e0:	8a7b      	ldrh	r3, [r7, #18]
 80121e2:	4413      	add	r3, r2
 80121e4:	b29a      	uxth	r2, r3
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	811a      	strh	r2, [r3, #8]


  return 0;
 80121ea:	2300      	movs	r3, #0
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	3718      	adds	r7, #24
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}
 80121f4:	0801f878 	.word	0x0801f878
 80121f8:	0801f9dc 	.word	0x0801f9dc
 80121fc:	0801f8d8 	.word	0x0801f8d8

08012200 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b082      	sub	sp, #8
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
 8012208:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801220a:	2200      	movs	r2, #0
 801220c:	6839      	ldr	r1, [r7, #0]
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	f7ff ff8e 	bl	8012130 <pbuf_add_header_impl>
 8012214:	4603      	mov	r3, r0
}
 8012216:	4618      	mov	r0, r3
 8012218:	3708      	adds	r7, #8
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}
	...

08012220 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b084      	sub	sp, #16
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
 8012228:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d106      	bne.n	801223e <pbuf_remove_header+0x1e>
 8012230:	4b20      	ldr	r3, [pc, #128]	@ (80122b4 <pbuf_remove_header+0x94>)
 8012232:	f240 224b 	movw	r2, #587	@ 0x24b
 8012236:	4920      	ldr	r1, [pc, #128]	@ (80122b8 <pbuf_remove_header+0x98>)
 8012238:	4820      	ldr	r0, [pc, #128]	@ (80122bc <pbuf_remove_header+0x9c>)
 801223a:	f00a f92f 	bl	801c49c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d003      	beq.n	801224c <pbuf_remove_header+0x2c>
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801224a:	d301      	bcc.n	8012250 <pbuf_remove_header+0x30>
    return 1;
 801224c:	2301      	movs	r3, #1
 801224e:	e02c      	b.n	80122aa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012250:	683b      	ldr	r3, [r7, #0]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d101      	bne.n	801225a <pbuf_remove_header+0x3a>
    return 0;
 8012256:	2300      	movs	r3, #0
 8012258:	e027      	b.n	80122aa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	895b      	ldrh	r3, [r3, #10]
 8012262:	89fa      	ldrh	r2, [r7, #14]
 8012264:	429a      	cmp	r2, r3
 8012266:	d908      	bls.n	801227a <pbuf_remove_header+0x5a>
 8012268:	4b12      	ldr	r3, [pc, #72]	@ (80122b4 <pbuf_remove_header+0x94>)
 801226a:	f240 2255 	movw	r2, #597	@ 0x255
 801226e:	4914      	ldr	r1, [pc, #80]	@ (80122c0 <pbuf_remove_header+0xa0>)
 8012270:	4812      	ldr	r0, [pc, #72]	@ (80122bc <pbuf_remove_header+0x9c>)
 8012272:	f00a f913 	bl	801c49c <iprintf>
 8012276:	2301      	movs	r3, #1
 8012278:	e017      	b.n	80122aa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	685b      	ldr	r3, [r3, #4]
 801227e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	685a      	ldr	r2, [r3, #4]
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	441a      	add	r2, r3
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	895a      	ldrh	r2, [r3, #10]
 8012290:	89fb      	ldrh	r3, [r7, #14]
 8012292:	1ad3      	subs	r3, r2, r3
 8012294:	b29a      	uxth	r2, r3
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	891a      	ldrh	r2, [r3, #8]
 801229e:	89fb      	ldrh	r3, [r7, #14]
 80122a0:	1ad3      	subs	r3, r2, r3
 80122a2:	b29a      	uxth	r2, r3
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80122a8:	2300      	movs	r3, #0
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	3710      	adds	r7, #16
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}
 80122b2:	bf00      	nop
 80122b4:	0801f878 	.word	0x0801f878
 80122b8:	0801f9dc 	.word	0x0801f9dc
 80122bc:	0801f8d8 	.word	0x0801f8d8
 80122c0:	0801f9e8 	.word	0x0801f9e8

080122c4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b082      	sub	sp, #8
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
 80122cc:	460b      	mov	r3, r1
 80122ce:	807b      	strh	r3, [r7, #2]
 80122d0:	4613      	mov	r3, r2
 80122d2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80122d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	da08      	bge.n	80122ee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80122dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80122e0:	425b      	negs	r3, r3
 80122e2:	4619      	mov	r1, r3
 80122e4:	6878      	ldr	r0, [r7, #4]
 80122e6:	f7ff ff9b 	bl	8012220 <pbuf_remove_header>
 80122ea:	4603      	mov	r3, r0
 80122ec:	e007      	b.n	80122fe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80122ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80122f2:	787a      	ldrb	r2, [r7, #1]
 80122f4:	4619      	mov	r1, r3
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f7ff ff1a 	bl	8012130 <pbuf_add_header_impl>
 80122fc:	4603      	mov	r3, r0
  }
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3708      	adds	r7, #8
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}

08012306 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012306:	b580      	push	{r7, lr}
 8012308:	b082      	sub	sp, #8
 801230a:	af00      	add	r7, sp, #0
 801230c:	6078      	str	r0, [r7, #4]
 801230e:	460b      	mov	r3, r1
 8012310:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8012312:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012316:	2201      	movs	r2, #1
 8012318:	4619      	mov	r1, r3
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f7ff ffd2 	bl	80122c4 <pbuf_header_impl>
 8012320:	4603      	mov	r3, r0
}
 8012322:	4618      	mov	r0, r3
 8012324:	3708      	adds	r7, #8
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}
	...

0801232c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b088      	sub	sp, #32
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d10b      	bne.n	8012352 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d106      	bne.n	801234e <pbuf_free+0x22>
 8012340:	4b3b      	ldr	r3, [pc, #236]	@ (8012430 <pbuf_free+0x104>)
 8012342:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8012346:	493b      	ldr	r1, [pc, #236]	@ (8012434 <pbuf_free+0x108>)
 8012348:	483b      	ldr	r0, [pc, #236]	@ (8012438 <pbuf_free+0x10c>)
 801234a:	f00a f8a7 	bl	801c49c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801234e:	2300      	movs	r3, #0
 8012350:	e069      	b.n	8012426 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8012352:	2300      	movs	r3, #0
 8012354:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012356:	e062      	b.n	801241e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012358:	f009 f9e0 	bl	801b71c <sys_arch_protect>
 801235c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	7b9b      	ldrb	r3, [r3, #14]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d106      	bne.n	8012374 <pbuf_free+0x48>
 8012366:	4b32      	ldr	r3, [pc, #200]	@ (8012430 <pbuf_free+0x104>)
 8012368:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801236c:	4933      	ldr	r1, [pc, #204]	@ (801243c <pbuf_free+0x110>)
 801236e:	4832      	ldr	r0, [pc, #200]	@ (8012438 <pbuf_free+0x10c>)
 8012370:	f00a f894 	bl	801c49c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	7b9b      	ldrb	r3, [r3, #14]
 8012378:	3b01      	subs	r3, #1
 801237a:	b2da      	uxtb	r2, r3
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	739a      	strb	r2, [r3, #14]
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	7b9b      	ldrb	r3, [r3, #14]
 8012384:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012386:	69b8      	ldr	r0, [r7, #24]
 8012388:	f009 f9d6 	bl	801b738 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801238c:	7dfb      	ldrb	r3, [r7, #23]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d143      	bne.n	801241a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	7b1b      	ldrb	r3, [r3, #12]
 801239c:	f003 030f 	and.w	r3, r3, #15
 80123a0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	7b5b      	ldrb	r3, [r3, #13]
 80123a6:	f003 0302 	and.w	r3, r3, #2
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d011      	beq.n	80123d2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80123b2:	68bb      	ldr	r3, [r7, #8]
 80123b4:	691b      	ldr	r3, [r3, #16]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d106      	bne.n	80123c8 <pbuf_free+0x9c>
 80123ba:	4b1d      	ldr	r3, [pc, #116]	@ (8012430 <pbuf_free+0x104>)
 80123bc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80123c0:	491f      	ldr	r1, [pc, #124]	@ (8012440 <pbuf_free+0x114>)
 80123c2:	481d      	ldr	r0, [pc, #116]	@ (8012438 <pbuf_free+0x10c>)
 80123c4:	f00a f86a 	bl	801c49c <iprintf>
        pc->custom_free_function(p);
 80123c8:	68bb      	ldr	r3, [r7, #8]
 80123ca:	691b      	ldr	r3, [r3, #16]
 80123cc:	6878      	ldr	r0, [r7, #4]
 80123ce:	4798      	blx	r3
 80123d0:	e01d      	b.n	801240e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80123d2:	7bfb      	ldrb	r3, [r7, #15]
 80123d4:	2b02      	cmp	r3, #2
 80123d6:	d104      	bne.n	80123e2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80123d8:	6879      	ldr	r1, [r7, #4]
 80123da:	200c      	movs	r0, #12
 80123dc:	f7ff f934 	bl	8011648 <memp_free>
 80123e0:	e015      	b.n	801240e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80123e2:	7bfb      	ldrb	r3, [r7, #15]
 80123e4:	2b01      	cmp	r3, #1
 80123e6:	d104      	bne.n	80123f2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80123e8:	6879      	ldr	r1, [r7, #4]
 80123ea:	200b      	movs	r0, #11
 80123ec:	f7ff f92c 	bl	8011648 <memp_free>
 80123f0:	e00d      	b.n	801240e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80123f2:	7bfb      	ldrb	r3, [r7, #15]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d103      	bne.n	8012400 <pbuf_free+0xd4>
          mem_free(p);
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f7fe fd71 	bl	8010ee0 <mem_free>
 80123fe:	e006      	b.n	801240e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012400:	4b0b      	ldr	r3, [pc, #44]	@ (8012430 <pbuf_free+0x104>)
 8012402:	f240 320f 	movw	r2, #783	@ 0x30f
 8012406:	490f      	ldr	r1, [pc, #60]	@ (8012444 <pbuf_free+0x118>)
 8012408:	480b      	ldr	r0, [pc, #44]	@ (8012438 <pbuf_free+0x10c>)
 801240a:	f00a f847 	bl	801c49c <iprintf>
        }
      }
      count++;
 801240e:	7ffb      	ldrb	r3, [r7, #31]
 8012410:	3301      	adds	r3, #1
 8012412:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012414:	693b      	ldr	r3, [r7, #16]
 8012416:	607b      	str	r3, [r7, #4]
 8012418:	e001      	b.n	801241e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801241a:	2300      	movs	r3, #0
 801241c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d199      	bne.n	8012358 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012424:	7ffb      	ldrb	r3, [r7, #31]
}
 8012426:	4618      	mov	r0, r3
 8012428:	3720      	adds	r7, #32
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}
 801242e:	bf00      	nop
 8012430:	0801f878 	.word	0x0801f878
 8012434:	0801f9dc 	.word	0x0801f9dc
 8012438:	0801f8d8 	.word	0x0801f8d8
 801243c:	0801fa08 	.word	0x0801fa08
 8012440:	0801fa20 	.word	0x0801fa20
 8012444:	0801fa44 	.word	0x0801fa44

08012448 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012448:	b480      	push	{r7}
 801244a:	b085      	sub	sp, #20
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012450:	2300      	movs	r3, #0
 8012452:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012454:	e005      	b.n	8012462 <pbuf_clen+0x1a>
    ++len;
 8012456:	89fb      	ldrh	r3, [r7, #14]
 8012458:	3301      	adds	r3, #1
 801245a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d1f6      	bne.n	8012456 <pbuf_clen+0xe>
  }
  return len;
 8012468:	89fb      	ldrh	r3, [r7, #14]
}
 801246a:	4618      	mov	r0, r3
 801246c:	3714      	adds	r7, #20
 801246e:	46bd      	mov	sp, r7
 8012470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012474:	4770      	bx	lr
	...

08012478 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b084      	sub	sp, #16
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d016      	beq.n	80124b4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8012486:	f009 f949 	bl	801b71c <sys_arch_protect>
 801248a:	60f8      	str	r0, [r7, #12]
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	7b9b      	ldrb	r3, [r3, #14]
 8012490:	3301      	adds	r3, #1
 8012492:	b2da      	uxtb	r2, r3
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	739a      	strb	r2, [r3, #14]
 8012498:	68f8      	ldr	r0, [r7, #12]
 801249a:	f009 f94d 	bl	801b738 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	7b9b      	ldrb	r3, [r3, #14]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d106      	bne.n	80124b4 <pbuf_ref+0x3c>
 80124a6:	4b05      	ldr	r3, [pc, #20]	@ (80124bc <pbuf_ref+0x44>)
 80124a8:	f240 3242 	movw	r2, #834	@ 0x342
 80124ac:	4904      	ldr	r1, [pc, #16]	@ (80124c0 <pbuf_ref+0x48>)
 80124ae:	4805      	ldr	r0, [pc, #20]	@ (80124c4 <pbuf_ref+0x4c>)
 80124b0:	f009 fff4 	bl	801c49c <iprintf>
  }
}
 80124b4:	bf00      	nop
 80124b6:	3710      	adds	r7, #16
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}
 80124bc:	0801f878 	.word	0x0801f878
 80124c0:	0801fa58 	.word	0x0801fa58
 80124c4:	0801f8d8 	.word	0x0801f8d8

080124c8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b084      	sub	sp, #16
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
 80124d0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d002      	beq.n	80124de <pbuf_cat+0x16>
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d107      	bne.n	80124ee <pbuf_cat+0x26>
 80124de:	4b20      	ldr	r3, [pc, #128]	@ (8012560 <pbuf_cat+0x98>)
 80124e0:	f240 3259 	movw	r2, #857	@ 0x359
 80124e4:	491f      	ldr	r1, [pc, #124]	@ (8012564 <pbuf_cat+0x9c>)
 80124e6:	4820      	ldr	r0, [pc, #128]	@ (8012568 <pbuf_cat+0xa0>)
 80124e8:	f009 ffd8 	bl	801c49c <iprintf>
 80124ec:	e034      	b.n	8012558 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	60fb      	str	r3, [r7, #12]
 80124f2:	e00a      	b.n	801250a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	891a      	ldrh	r2, [r3, #8]
 80124f8:	683b      	ldr	r3, [r7, #0]
 80124fa:	891b      	ldrh	r3, [r3, #8]
 80124fc:	4413      	add	r3, r2
 80124fe:	b29a      	uxth	r2, r3
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	60fb      	str	r3, [r7, #12]
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d1f0      	bne.n	80124f4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	891a      	ldrh	r2, [r3, #8]
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	895b      	ldrh	r3, [r3, #10]
 801251a:	429a      	cmp	r2, r3
 801251c:	d006      	beq.n	801252c <pbuf_cat+0x64>
 801251e:	4b10      	ldr	r3, [pc, #64]	@ (8012560 <pbuf_cat+0x98>)
 8012520:	f240 3262 	movw	r2, #866	@ 0x362
 8012524:	4911      	ldr	r1, [pc, #68]	@ (801256c <pbuf_cat+0xa4>)
 8012526:	4810      	ldr	r0, [pc, #64]	@ (8012568 <pbuf_cat+0xa0>)
 8012528:	f009 ffb8 	bl	801c49c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d006      	beq.n	8012542 <pbuf_cat+0x7a>
 8012534:	4b0a      	ldr	r3, [pc, #40]	@ (8012560 <pbuf_cat+0x98>)
 8012536:	f240 3263 	movw	r2, #867	@ 0x363
 801253a:	490d      	ldr	r1, [pc, #52]	@ (8012570 <pbuf_cat+0xa8>)
 801253c:	480a      	ldr	r0, [pc, #40]	@ (8012568 <pbuf_cat+0xa0>)
 801253e:	f009 ffad 	bl	801c49c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	891a      	ldrh	r2, [r3, #8]
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	891b      	ldrh	r3, [r3, #8]
 801254a:	4413      	add	r3, r2
 801254c:	b29a      	uxth	r2, r3
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	683a      	ldr	r2, [r7, #0]
 8012556:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8012558:	3710      	adds	r7, #16
 801255a:	46bd      	mov	sp, r7
 801255c:	bd80      	pop	{r7, pc}
 801255e:	bf00      	nop
 8012560:	0801f878 	.word	0x0801f878
 8012564:	0801fa6c 	.word	0x0801fa6c
 8012568:	0801f8d8 	.word	0x0801f8d8
 801256c:	0801faa4 	.word	0x0801faa4
 8012570:	0801fad4 	.word	0x0801fad4

08012574 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b086      	sub	sp, #24
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801257e:	2300      	movs	r3, #0
 8012580:	617b      	str	r3, [r7, #20]
 8012582:	2300      	movs	r3, #0
 8012584:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d008      	beq.n	801259e <pbuf_copy+0x2a>
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d005      	beq.n	801259e <pbuf_copy+0x2a>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	891a      	ldrh	r2, [r3, #8]
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	891b      	ldrh	r3, [r3, #8]
 801259a:	429a      	cmp	r2, r3
 801259c:	d209      	bcs.n	80125b2 <pbuf_copy+0x3e>
 801259e:	4b57      	ldr	r3, [pc, #348]	@ (80126fc <pbuf_copy+0x188>)
 80125a0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80125a4:	4956      	ldr	r1, [pc, #344]	@ (8012700 <pbuf_copy+0x18c>)
 80125a6:	4857      	ldr	r0, [pc, #348]	@ (8012704 <pbuf_copy+0x190>)
 80125a8:	f009 ff78 	bl	801c49c <iprintf>
 80125ac:	f06f 030f 	mvn.w	r3, #15
 80125b0:	e09f      	b.n	80126f2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	895b      	ldrh	r3, [r3, #10]
 80125b6:	461a      	mov	r2, r3
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	1ad2      	subs	r2, r2, r3
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	895b      	ldrh	r3, [r3, #10]
 80125c0:	4619      	mov	r1, r3
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	1acb      	subs	r3, r1, r3
 80125c6:	429a      	cmp	r2, r3
 80125c8:	d306      	bcc.n	80125d8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80125ca:	683b      	ldr	r3, [r7, #0]
 80125cc:	895b      	ldrh	r3, [r3, #10]
 80125ce:	461a      	mov	r2, r3
 80125d0:	693b      	ldr	r3, [r7, #16]
 80125d2:	1ad3      	subs	r3, r2, r3
 80125d4:	60fb      	str	r3, [r7, #12]
 80125d6:	e005      	b.n	80125e4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	895b      	ldrh	r3, [r3, #10]
 80125dc:	461a      	mov	r2, r3
 80125de:	697b      	ldr	r3, [r7, #20]
 80125e0:	1ad3      	subs	r3, r2, r3
 80125e2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	685a      	ldr	r2, [r3, #4]
 80125e8:	697b      	ldr	r3, [r7, #20]
 80125ea:	18d0      	adds	r0, r2, r3
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	685a      	ldr	r2, [r3, #4]
 80125f0:	693b      	ldr	r3, [r7, #16]
 80125f2:	4413      	add	r3, r2
 80125f4:	68fa      	ldr	r2, [r7, #12]
 80125f6:	4619      	mov	r1, r3
 80125f8:	f00a f903 	bl	801c802 <memcpy>
    offset_to += len;
 80125fc:	697a      	ldr	r2, [r7, #20]
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	4413      	add	r3, r2
 8012602:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012604:	693a      	ldr	r2, [r7, #16]
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	4413      	add	r3, r2
 801260a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	895b      	ldrh	r3, [r3, #10]
 8012610:	461a      	mov	r2, r3
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	4293      	cmp	r3, r2
 8012616:	d906      	bls.n	8012626 <pbuf_copy+0xb2>
 8012618:	4b38      	ldr	r3, [pc, #224]	@ (80126fc <pbuf_copy+0x188>)
 801261a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801261e:	493a      	ldr	r1, [pc, #232]	@ (8012708 <pbuf_copy+0x194>)
 8012620:	4838      	ldr	r0, [pc, #224]	@ (8012704 <pbuf_copy+0x190>)
 8012622:	f009 ff3b 	bl	801c49c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	895b      	ldrh	r3, [r3, #10]
 801262a:	461a      	mov	r2, r3
 801262c:	693b      	ldr	r3, [r7, #16]
 801262e:	4293      	cmp	r3, r2
 8012630:	d906      	bls.n	8012640 <pbuf_copy+0xcc>
 8012632:	4b32      	ldr	r3, [pc, #200]	@ (80126fc <pbuf_copy+0x188>)
 8012634:	f240 32da 	movw	r2, #986	@ 0x3da
 8012638:	4934      	ldr	r1, [pc, #208]	@ (801270c <pbuf_copy+0x198>)
 801263a:	4832      	ldr	r0, [pc, #200]	@ (8012704 <pbuf_copy+0x190>)
 801263c:	f009 ff2e 	bl	801c49c <iprintf>
    if (offset_from >= p_from->len) {
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	895b      	ldrh	r3, [r3, #10]
 8012644:	461a      	mov	r2, r3
 8012646:	693b      	ldr	r3, [r7, #16]
 8012648:	4293      	cmp	r3, r2
 801264a:	d304      	bcc.n	8012656 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801264c:	2300      	movs	r3, #0
 801264e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	895b      	ldrh	r3, [r3, #10]
 801265a:	461a      	mov	r2, r3
 801265c:	697b      	ldr	r3, [r7, #20]
 801265e:	4293      	cmp	r3, r2
 8012660:	d114      	bne.n	801268c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8012662:	2300      	movs	r3, #0
 8012664:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d10c      	bne.n	801268c <pbuf_copy+0x118>
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d009      	beq.n	801268c <pbuf_copy+0x118>
 8012678:	4b20      	ldr	r3, [pc, #128]	@ (80126fc <pbuf_copy+0x188>)
 801267a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801267e:	4924      	ldr	r1, [pc, #144]	@ (8012710 <pbuf_copy+0x19c>)
 8012680:	4820      	ldr	r0, [pc, #128]	@ (8012704 <pbuf_copy+0x190>)
 8012682:	f009 ff0b 	bl	801c49c <iprintf>
 8012686:	f06f 030f 	mvn.w	r3, #15
 801268a:	e032      	b.n	80126f2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d013      	beq.n	80126ba <pbuf_copy+0x146>
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	895a      	ldrh	r2, [r3, #10]
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	891b      	ldrh	r3, [r3, #8]
 801269a:	429a      	cmp	r2, r3
 801269c:	d10d      	bne.n	80126ba <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d009      	beq.n	80126ba <pbuf_copy+0x146>
 80126a6:	4b15      	ldr	r3, [pc, #84]	@ (80126fc <pbuf_copy+0x188>)
 80126a8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80126ac:	4919      	ldr	r1, [pc, #100]	@ (8012714 <pbuf_copy+0x1a0>)
 80126ae:	4815      	ldr	r0, [pc, #84]	@ (8012704 <pbuf_copy+0x190>)
 80126b0:	f009 fef4 	bl	801c49c <iprintf>
 80126b4:	f06f 0305 	mvn.w	r3, #5
 80126b8:	e01b      	b.n	80126f2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d013      	beq.n	80126e8 <pbuf_copy+0x174>
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	895a      	ldrh	r2, [r3, #10]
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	891b      	ldrh	r3, [r3, #8]
 80126c8:	429a      	cmp	r2, r3
 80126ca:	d10d      	bne.n	80126e8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d009      	beq.n	80126e8 <pbuf_copy+0x174>
 80126d4:	4b09      	ldr	r3, [pc, #36]	@ (80126fc <pbuf_copy+0x188>)
 80126d6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80126da:	490e      	ldr	r1, [pc, #56]	@ (8012714 <pbuf_copy+0x1a0>)
 80126dc:	4809      	ldr	r0, [pc, #36]	@ (8012704 <pbuf_copy+0x190>)
 80126de:	f009 fedd 	bl	801c49c <iprintf>
 80126e2:	f06f 0305 	mvn.w	r3, #5
 80126e6:	e004      	b.n	80126f2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	f47f af61 	bne.w	80125b2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80126f0:	2300      	movs	r3, #0
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	3718      	adds	r7, #24
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}
 80126fa:	bf00      	nop
 80126fc:	0801f878 	.word	0x0801f878
 8012700:	0801fb20 	.word	0x0801fb20
 8012704:	0801f8d8 	.word	0x0801f8d8
 8012708:	0801fb50 	.word	0x0801fb50
 801270c:	0801fb68 	.word	0x0801fb68
 8012710:	0801fb84 	.word	0x0801fb84
 8012714:	0801fb94 	.word	0x0801fb94

08012718 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b088      	sub	sp, #32
 801271c:	af00      	add	r7, sp, #0
 801271e:	60f8      	str	r0, [r7, #12]
 8012720:	60b9      	str	r1, [r7, #8]
 8012722:	4611      	mov	r1, r2
 8012724:	461a      	mov	r2, r3
 8012726:	460b      	mov	r3, r1
 8012728:	80fb      	strh	r3, [r7, #6]
 801272a:	4613      	mov	r3, r2
 801272c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801272e:	2300      	movs	r3, #0
 8012730:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8012732:	2300      	movs	r3, #0
 8012734:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d108      	bne.n	801274e <pbuf_copy_partial+0x36>
 801273c:	4b2b      	ldr	r3, [pc, #172]	@ (80127ec <pbuf_copy_partial+0xd4>)
 801273e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8012742:	492b      	ldr	r1, [pc, #172]	@ (80127f0 <pbuf_copy_partial+0xd8>)
 8012744:	482b      	ldr	r0, [pc, #172]	@ (80127f4 <pbuf_copy_partial+0xdc>)
 8012746:	f009 fea9 	bl	801c49c <iprintf>
 801274a:	2300      	movs	r3, #0
 801274c:	e04a      	b.n	80127e4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d108      	bne.n	8012766 <pbuf_copy_partial+0x4e>
 8012754:	4b25      	ldr	r3, [pc, #148]	@ (80127ec <pbuf_copy_partial+0xd4>)
 8012756:	f240 420b 	movw	r2, #1035	@ 0x40b
 801275a:	4927      	ldr	r1, [pc, #156]	@ (80127f8 <pbuf_copy_partial+0xe0>)
 801275c:	4825      	ldr	r0, [pc, #148]	@ (80127f4 <pbuf_copy_partial+0xdc>)
 801275e:	f009 fe9d 	bl	801c49c <iprintf>
 8012762:	2300      	movs	r3, #0
 8012764:	e03e      	b.n	80127e4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	61fb      	str	r3, [r7, #28]
 801276a:	e034      	b.n	80127d6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801276c:	88bb      	ldrh	r3, [r7, #4]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d00a      	beq.n	8012788 <pbuf_copy_partial+0x70>
 8012772:	69fb      	ldr	r3, [r7, #28]
 8012774:	895b      	ldrh	r3, [r3, #10]
 8012776:	88ba      	ldrh	r2, [r7, #4]
 8012778:	429a      	cmp	r2, r3
 801277a:	d305      	bcc.n	8012788 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801277c:	69fb      	ldr	r3, [r7, #28]
 801277e:	895b      	ldrh	r3, [r3, #10]
 8012780:	88ba      	ldrh	r2, [r7, #4]
 8012782:	1ad3      	subs	r3, r2, r3
 8012784:	80bb      	strh	r3, [r7, #4]
 8012786:	e023      	b.n	80127d0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8012788:	69fb      	ldr	r3, [r7, #28]
 801278a:	895a      	ldrh	r2, [r3, #10]
 801278c:	88bb      	ldrh	r3, [r7, #4]
 801278e:	1ad3      	subs	r3, r2, r3
 8012790:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8012792:	8b3a      	ldrh	r2, [r7, #24]
 8012794:	88fb      	ldrh	r3, [r7, #6]
 8012796:	429a      	cmp	r2, r3
 8012798:	d901      	bls.n	801279e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801279a:	88fb      	ldrh	r3, [r7, #6]
 801279c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801279e:	8b7b      	ldrh	r3, [r7, #26]
 80127a0:	68ba      	ldr	r2, [r7, #8]
 80127a2:	18d0      	adds	r0, r2, r3
 80127a4:	69fb      	ldr	r3, [r7, #28]
 80127a6:	685a      	ldr	r2, [r3, #4]
 80127a8:	88bb      	ldrh	r3, [r7, #4]
 80127aa:	4413      	add	r3, r2
 80127ac:	8b3a      	ldrh	r2, [r7, #24]
 80127ae:	4619      	mov	r1, r3
 80127b0:	f00a f827 	bl	801c802 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80127b4:	8afa      	ldrh	r2, [r7, #22]
 80127b6:	8b3b      	ldrh	r3, [r7, #24]
 80127b8:	4413      	add	r3, r2
 80127ba:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80127bc:	8b7a      	ldrh	r2, [r7, #26]
 80127be:	8b3b      	ldrh	r3, [r7, #24]
 80127c0:	4413      	add	r3, r2
 80127c2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80127c4:	88fa      	ldrh	r2, [r7, #6]
 80127c6:	8b3b      	ldrh	r3, [r7, #24]
 80127c8:	1ad3      	subs	r3, r2, r3
 80127ca:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80127cc:	2300      	movs	r3, #0
 80127ce:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80127d0:	69fb      	ldr	r3, [r7, #28]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	61fb      	str	r3, [r7, #28]
 80127d6:	88fb      	ldrh	r3, [r7, #6]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d002      	beq.n	80127e2 <pbuf_copy_partial+0xca>
 80127dc:	69fb      	ldr	r3, [r7, #28]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d1c4      	bne.n	801276c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80127e2:	8afb      	ldrh	r3, [r7, #22]
}
 80127e4:	4618      	mov	r0, r3
 80127e6:	3720      	adds	r7, #32
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}
 80127ec:	0801f878 	.word	0x0801f878
 80127f0:	0801fbc0 	.word	0x0801fbc0
 80127f4:	0801f8d8 	.word	0x0801f8d8
 80127f8:	0801fbe0 	.word	0x0801fbe0

080127fc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b084      	sub	sp, #16
 8012800:	af00      	add	r7, sp, #0
 8012802:	4603      	mov	r3, r0
 8012804:	603a      	str	r2, [r7, #0]
 8012806:	71fb      	strb	r3, [r7, #7]
 8012808:	460b      	mov	r3, r1
 801280a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	8919      	ldrh	r1, [r3, #8]
 8012810:	88ba      	ldrh	r2, [r7, #4]
 8012812:	79fb      	ldrb	r3, [r7, #7]
 8012814:	4618      	mov	r0, r3
 8012816:	f7ff faa5 	bl	8011d64 <pbuf_alloc>
 801281a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d101      	bne.n	8012826 <pbuf_clone+0x2a>
    return NULL;
 8012822:	2300      	movs	r3, #0
 8012824:	e011      	b.n	801284a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8012826:	6839      	ldr	r1, [r7, #0]
 8012828:	68f8      	ldr	r0, [r7, #12]
 801282a:	f7ff fea3 	bl	8012574 <pbuf_copy>
 801282e:	4603      	mov	r3, r0
 8012830:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8012832:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d006      	beq.n	8012848 <pbuf_clone+0x4c>
 801283a:	4b06      	ldr	r3, [pc, #24]	@ (8012854 <pbuf_clone+0x58>)
 801283c:	f240 5224 	movw	r2, #1316	@ 0x524
 8012840:	4905      	ldr	r1, [pc, #20]	@ (8012858 <pbuf_clone+0x5c>)
 8012842:	4806      	ldr	r0, [pc, #24]	@ (801285c <pbuf_clone+0x60>)
 8012844:	f009 fe2a 	bl	801c49c <iprintf>
  return q;
 8012848:	68fb      	ldr	r3, [r7, #12]
}
 801284a:	4618      	mov	r0, r3
 801284c:	3710      	adds	r7, #16
 801284e:	46bd      	mov	sp, r7
 8012850:	bd80      	pop	{r7, pc}
 8012852:	bf00      	nop
 8012854:	0801f878 	.word	0x0801f878
 8012858:	0801fcec 	.word	0x0801fcec
 801285c:	0801f8d8 	.word	0x0801f8d8

08012860 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8012860:	b580      	push	{r7, lr}
 8012862:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012864:	f009 fc96 	bl	801c194 <rand>
 8012868:	4603      	mov	r3, r0
 801286a:	b29b      	uxth	r3, r3
 801286c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012870:	b29b      	uxth	r3, r3
 8012872:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8012876:	b29a      	uxth	r2, r3
 8012878:	4b01      	ldr	r3, [pc, #4]	@ (8012880 <tcp_init+0x20>)
 801287a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801287c:	bf00      	nop
 801287e:	bd80      	pop	{r7, pc}
 8012880:	2000009c 	.word	0x2000009c

08012884 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b082      	sub	sp, #8
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	7d1b      	ldrb	r3, [r3, #20]
 8012890:	2b01      	cmp	r3, #1
 8012892:	d105      	bne.n	80128a0 <tcp_free+0x1c>
 8012894:	4b06      	ldr	r3, [pc, #24]	@ (80128b0 <tcp_free+0x2c>)
 8012896:	22d4      	movs	r2, #212	@ 0xd4
 8012898:	4906      	ldr	r1, [pc, #24]	@ (80128b4 <tcp_free+0x30>)
 801289a:	4807      	ldr	r0, [pc, #28]	@ (80128b8 <tcp_free+0x34>)
 801289c:	f009 fdfe 	bl	801c49c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80128a0:	6879      	ldr	r1, [r7, #4]
 80128a2:	2001      	movs	r0, #1
 80128a4:	f7fe fed0 	bl	8011648 <memp_free>
}
 80128a8:	bf00      	nop
 80128aa:	3708      	adds	r7, #8
 80128ac:	46bd      	mov	sp, r7
 80128ae:	bd80      	pop	{r7, pc}
 80128b0:	0801fd78 	.word	0x0801fd78
 80128b4:	0801fda8 	.word	0x0801fda8
 80128b8:	0801fdbc 	.word	0x0801fdbc

080128bc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	7d1b      	ldrb	r3, [r3, #20]
 80128c8:	2b01      	cmp	r3, #1
 80128ca:	d105      	bne.n	80128d8 <tcp_free_listen+0x1c>
 80128cc:	4b06      	ldr	r3, [pc, #24]	@ (80128e8 <tcp_free_listen+0x2c>)
 80128ce:	22df      	movs	r2, #223	@ 0xdf
 80128d0:	4906      	ldr	r1, [pc, #24]	@ (80128ec <tcp_free_listen+0x30>)
 80128d2:	4807      	ldr	r0, [pc, #28]	@ (80128f0 <tcp_free_listen+0x34>)
 80128d4:	f009 fde2 	bl	801c49c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80128d8:	6879      	ldr	r1, [r7, #4]
 80128da:	2002      	movs	r0, #2
 80128dc:	f7fe feb4 	bl	8011648 <memp_free>
}
 80128e0:	bf00      	nop
 80128e2:	3708      	adds	r7, #8
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}
 80128e8:	0801fd78 	.word	0x0801fd78
 80128ec:	0801fde4 	.word	0x0801fde4
 80128f0:	0801fdbc 	.word	0x0801fdbc

080128f4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80128f8:	f001 f85e 	bl	80139b8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80128fc:	4b07      	ldr	r3, [pc, #28]	@ (801291c <tcp_tmr+0x28>)
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	3301      	adds	r3, #1
 8012902:	b2da      	uxtb	r2, r3
 8012904:	4b05      	ldr	r3, [pc, #20]	@ (801291c <tcp_tmr+0x28>)
 8012906:	701a      	strb	r2, [r3, #0]
 8012908:	4b04      	ldr	r3, [pc, #16]	@ (801291c <tcp_tmr+0x28>)
 801290a:	781b      	ldrb	r3, [r3, #0]
 801290c:	f003 0301 	and.w	r3, r3, #1
 8012910:	2b00      	cmp	r3, #0
 8012912:	d001      	beq.n	8012918 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012914:	f000 fd0e 	bl	8013334 <tcp_slowtmr>
  }
}
 8012918:	bf00      	nop
 801291a:	bd80      	pop	{r7, pc}
 801291c:	2000c8e1 	.word	0x2000c8e1

08012920 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b084      	sub	sp, #16
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
 8012928:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801292a:	683b      	ldr	r3, [r7, #0]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d105      	bne.n	801293c <tcp_remove_listener+0x1c>
 8012930:	4b0d      	ldr	r3, [pc, #52]	@ (8012968 <tcp_remove_listener+0x48>)
 8012932:	22ff      	movs	r2, #255	@ 0xff
 8012934:	490d      	ldr	r1, [pc, #52]	@ (801296c <tcp_remove_listener+0x4c>)
 8012936:	480e      	ldr	r0, [pc, #56]	@ (8012970 <tcp_remove_listener+0x50>)
 8012938:	f009 fdb0 	bl	801c49c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	60fb      	str	r3, [r7, #12]
 8012940:	e00a      	b.n	8012958 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012946:	683a      	ldr	r2, [r7, #0]
 8012948:	429a      	cmp	r2, r3
 801294a:	d102      	bne.n	8012952 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	2200      	movs	r2, #0
 8012950:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	68db      	ldr	r3, [r3, #12]
 8012956:	60fb      	str	r3, [r7, #12]
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d1f1      	bne.n	8012942 <tcp_remove_listener+0x22>
    }
  }
}
 801295e:	bf00      	nop
 8012960:	bf00      	nop
 8012962:	3710      	adds	r7, #16
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}
 8012968:	0801fd78 	.word	0x0801fd78
 801296c:	0801fe00 	.word	0x0801fe00
 8012970:	0801fdbc 	.word	0x0801fdbc

08012974 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012974:	b580      	push	{r7, lr}
 8012976:	b084      	sub	sp, #16
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d106      	bne.n	8012990 <tcp_listen_closed+0x1c>
 8012982:	4b14      	ldr	r3, [pc, #80]	@ (80129d4 <tcp_listen_closed+0x60>)
 8012984:	f240 1211 	movw	r2, #273	@ 0x111
 8012988:	4913      	ldr	r1, [pc, #76]	@ (80129d8 <tcp_listen_closed+0x64>)
 801298a:	4814      	ldr	r0, [pc, #80]	@ (80129dc <tcp_listen_closed+0x68>)
 801298c:	f009 fd86 	bl	801c49c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	7d1b      	ldrb	r3, [r3, #20]
 8012994:	2b01      	cmp	r3, #1
 8012996:	d006      	beq.n	80129a6 <tcp_listen_closed+0x32>
 8012998:	4b0e      	ldr	r3, [pc, #56]	@ (80129d4 <tcp_listen_closed+0x60>)
 801299a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801299e:	4910      	ldr	r1, [pc, #64]	@ (80129e0 <tcp_listen_closed+0x6c>)
 80129a0:	480e      	ldr	r0, [pc, #56]	@ (80129dc <tcp_listen_closed+0x68>)
 80129a2:	f009 fd7b 	bl	801c49c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80129a6:	2301      	movs	r3, #1
 80129a8:	60fb      	str	r3, [r7, #12]
 80129aa:	e00b      	b.n	80129c4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80129ac:	4a0d      	ldr	r2, [pc, #52]	@ (80129e4 <tcp_listen_closed+0x70>)
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	6879      	ldr	r1, [r7, #4]
 80129b8:	4618      	mov	r0, r3
 80129ba:	f7ff ffb1 	bl	8012920 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	3301      	adds	r3, #1
 80129c2:	60fb      	str	r3, [r7, #12]
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	2b03      	cmp	r3, #3
 80129c8:	d9f0      	bls.n	80129ac <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80129ca:	bf00      	nop
 80129cc:	bf00      	nop
 80129ce:	3710      	adds	r7, #16
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}
 80129d4:	0801fd78 	.word	0x0801fd78
 80129d8:	0801fe28 	.word	0x0801fe28
 80129dc:	0801fdbc 	.word	0x0801fdbc
 80129e0:	0801fe34 	.word	0x0801fe34
 80129e4:	08021de0 	.word	0x08021de0

080129e8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80129e8:	b5b0      	push	{r4, r5, r7, lr}
 80129ea:	b088      	sub	sp, #32
 80129ec:	af04      	add	r7, sp, #16
 80129ee:	6078      	str	r0, [r7, #4]
 80129f0:	460b      	mov	r3, r1
 80129f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d106      	bne.n	8012a08 <tcp_close_shutdown+0x20>
 80129fa:	4b63      	ldr	r3, [pc, #396]	@ (8012b88 <tcp_close_shutdown+0x1a0>)
 80129fc:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8012a00:	4962      	ldr	r1, [pc, #392]	@ (8012b8c <tcp_close_shutdown+0x1a4>)
 8012a02:	4863      	ldr	r0, [pc, #396]	@ (8012b90 <tcp_close_shutdown+0x1a8>)
 8012a04:	f009 fd4a 	bl	801c49c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012a08:	78fb      	ldrb	r3, [r7, #3]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d066      	beq.n	8012adc <tcp_close_shutdown+0xf4>
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	7d1b      	ldrb	r3, [r3, #20]
 8012a12:	2b04      	cmp	r3, #4
 8012a14:	d003      	beq.n	8012a1e <tcp_close_shutdown+0x36>
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	7d1b      	ldrb	r3, [r3, #20]
 8012a1a:	2b07      	cmp	r3, #7
 8012a1c:	d15e      	bne.n	8012adc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d104      	bne.n	8012a30 <tcp_close_shutdown+0x48>
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012a2a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012a2e:	d055      	beq.n	8012adc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	8b5b      	ldrh	r3, [r3, #26]
 8012a34:	f003 0310 	and.w	r3, r3, #16
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d106      	bne.n	8012a4a <tcp_close_shutdown+0x62>
 8012a3c:	4b52      	ldr	r3, [pc, #328]	@ (8012b88 <tcp_close_shutdown+0x1a0>)
 8012a3e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8012a42:	4954      	ldr	r1, [pc, #336]	@ (8012b94 <tcp_close_shutdown+0x1ac>)
 8012a44:	4852      	ldr	r0, [pc, #328]	@ (8012b90 <tcp_close_shutdown+0x1a8>)
 8012a46:	f009 fd29 	bl	801c49c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012a52:	687d      	ldr	r5, [r7, #4]
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	3304      	adds	r3, #4
 8012a58:	687a      	ldr	r2, [r7, #4]
 8012a5a:	8ad2      	ldrh	r2, [r2, #22]
 8012a5c:	6879      	ldr	r1, [r7, #4]
 8012a5e:	8b09      	ldrh	r1, [r1, #24]
 8012a60:	9102      	str	r1, [sp, #8]
 8012a62:	9201      	str	r2, [sp, #4]
 8012a64:	9300      	str	r3, [sp, #0]
 8012a66:	462b      	mov	r3, r5
 8012a68:	4622      	mov	r2, r4
 8012a6a:	4601      	mov	r1, r0
 8012a6c:	6878      	ldr	r0, [r7, #4]
 8012a6e:	f005 fd43 	bl	80184f8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8012a72:	6878      	ldr	r0, [r7, #4]
 8012a74:	f001 fb26 	bl	80140c4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012a78:	4b47      	ldr	r3, [pc, #284]	@ (8012b98 <tcp_close_shutdown+0x1b0>)
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	687a      	ldr	r2, [r7, #4]
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d105      	bne.n	8012a8e <tcp_close_shutdown+0xa6>
 8012a82:	4b45      	ldr	r3, [pc, #276]	@ (8012b98 <tcp_close_shutdown+0x1b0>)
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	68db      	ldr	r3, [r3, #12]
 8012a88:	4a43      	ldr	r2, [pc, #268]	@ (8012b98 <tcp_close_shutdown+0x1b0>)
 8012a8a:	6013      	str	r3, [r2, #0]
 8012a8c:	e013      	b.n	8012ab6 <tcp_close_shutdown+0xce>
 8012a8e:	4b42      	ldr	r3, [pc, #264]	@ (8012b98 <tcp_close_shutdown+0x1b0>)
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	60fb      	str	r3, [r7, #12]
 8012a94:	e00c      	b.n	8012ab0 <tcp_close_shutdown+0xc8>
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	68db      	ldr	r3, [r3, #12]
 8012a9a:	687a      	ldr	r2, [r7, #4]
 8012a9c:	429a      	cmp	r2, r3
 8012a9e:	d104      	bne.n	8012aaa <tcp_close_shutdown+0xc2>
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	68da      	ldr	r2, [r3, #12]
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	60da      	str	r2, [r3, #12]
 8012aa8:	e005      	b.n	8012ab6 <tcp_close_shutdown+0xce>
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	68db      	ldr	r3, [r3, #12]
 8012aae:	60fb      	str	r3, [r7, #12]
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d1ef      	bne.n	8012a96 <tcp_close_shutdown+0xae>
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2200      	movs	r2, #0
 8012aba:	60da      	str	r2, [r3, #12]
 8012abc:	4b37      	ldr	r3, [pc, #220]	@ (8012b9c <tcp_close_shutdown+0x1b4>)
 8012abe:	2201      	movs	r2, #1
 8012ac0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8012ac2:	4b37      	ldr	r3, [pc, #220]	@ (8012ba0 <tcp_close_shutdown+0x1b8>)
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	687a      	ldr	r2, [r7, #4]
 8012ac8:	429a      	cmp	r2, r3
 8012aca:	d102      	bne.n	8012ad2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8012acc:	f003 ffba 	bl	8016a44 <tcp_trigger_input_pcb_close>
 8012ad0:	e002      	b.n	8012ad8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8012ad2:	6878      	ldr	r0, [r7, #4]
 8012ad4:	f7ff fed6 	bl	8012884 <tcp_free>
      }
      return ERR_OK;
 8012ad8:	2300      	movs	r3, #0
 8012ada:	e050      	b.n	8012b7e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	7d1b      	ldrb	r3, [r3, #20]
 8012ae0:	2b02      	cmp	r3, #2
 8012ae2:	d03b      	beq.n	8012b5c <tcp_close_shutdown+0x174>
 8012ae4:	2b02      	cmp	r3, #2
 8012ae6:	dc44      	bgt.n	8012b72 <tcp_close_shutdown+0x18a>
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d002      	beq.n	8012af2 <tcp_close_shutdown+0x10a>
 8012aec:	2b01      	cmp	r3, #1
 8012aee:	d02a      	beq.n	8012b46 <tcp_close_shutdown+0x15e>
 8012af0:	e03f      	b.n	8012b72 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	8adb      	ldrh	r3, [r3, #22]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d021      	beq.n	8012b3e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012afa:	4b2a      	ldr	r3, [pc, #168]	@ (8012ba4 <tcp_close_shutdown+0x1bc>)
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	687a      	ldr	r2, [r7, #4]
 8012b00:	429a      	cmp	r2, r3
 8012b02:	d105      	bne.n	8012b10 <tcp_close_shutdown+0x128>
 8012b04:	4b27      	ldr	r3, [pc, #156]	@ (8012ba4 <tcp_close_shutdown+0x1bc>)
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	68db      	ldr	r3, [r3, #12]
 8012b0a:	4a26      	ldr	r2, [pc, #152]	@ (8012ba4 <tcp_close_shutdown+0x1bc>)
 8012b0c:	6013      	str	r3, [r2, #0]
 8012b0e:	e013      	b.n	8012b38 <tcp_close_shutdown+0x150>
 8012b10:	4b24      	ldr	r3, [pc, #144]	@ (8012ba4 <tcp_close_shutdown+0x1bc>)
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	60bb      	str	r3, [r7, #8]
 8012b16:	e00c      	b.n	8012b32 <tcp_close_shutdown+0x14a>
 8012b18:	68bb      	ldr	r3, [r7, #8]
 8012b1a:	68db      	ldr	r3, [r3, #12]
 8012b1c:	687a      	ldr	r2, [r7, #4]
 8012b1e:	429a      	cmp	r2, r3
 8012b20:	d104      	bne.n	8012b2c <tcp_close_shutdown+0x144>
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	68da      	ldr	r2, [r3, #12]
 8012b26:	68bb      	ldr	r3, [r7, #8]
 8012b28:	60da      	str	r2, [r3, #12]
 8012b2a:	e005      	b.n	8012b38 <tcp_close_shutdown+0x150>
 8012b2c:	68bb      	ldr	r3, [r7, #8]
 8012b2e:	68db      	ldr	r3, [r3, #12]
 8012b30:	60bb      	str	r3, [r7, #8]
 8012b32:	68bb      	ldr	r3, [r7, #8]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d1ef      	bne.n	8012b18 <tcp_close_shutdown+0x130>
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8012b3e:	6878      	ldr	r0, [r7, #4]
 8012b40:	f7ff fea0 	bl	8012884 <tcp_free>
      break;
 8012b44:	e01a      	b.n	8012b7c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012b46:	6878      	ldr	r0, [r7, #4]
 8012b48:	f7ff ff14 	bl	8012974 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012b4c:	6879      	ldr	r1, [r7, #4]
 8012b4e:	4816      	ldr	r0, [pc, #88]	@ (8012ba8 <tcp_close_shutdown+0x1c0>)
 8012b50:	f001 fb08 	bl	8014164 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f7ff feb1 	bl	80128bc <tcp_free_listen>
      break;
 8012b5a:	e00f      	b.n	8012b7c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012b5c:	6879      	ldr	r1, [r7, #4]
 8012b5e:	480e      	ldr	r0, [pc, #56]	@ (8012b98 <tcp_close_shutdown+0x1b0>)
 8012b60:	f001 fb00 	bl	8014164 <tcp_pcb_remove>
 8012b64:	4b0d      	ldr	r3, [pc, #52]	@ (8012b9c <tcp_close_shutdown+0x1b4>)
 8012b66:	2201      	movs	r2, #1
 8012b68:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	f7ff fe8a 	bl	8012884 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012b70:	e004      	b.n	8012b7c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	f000 f81a 	bl	8012bac <tcp_close_shutdown_fin>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	e000      	b.n	8012b7e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8012b7c:	2300      	movs	r3, #0
}
 8012b7e:	4618      	mov	r0, r3
 8012b80:	3710      	adds	r7, #16
 8012b82:	46bd      	mov	sp, r7
 8012b84:	bdb0      	pop	{r4, r5, r7, pc}
 8012b86:	bf00      	nop
 8012b88:	0801fd78 	.word	0x0801fd78
 8012b8c:	0801fe4c 	.word	0x0801fe4c
 8012b90:	0801fdbc 	.word	0x0801fdbc
 8012b94:	0801fe6c 	.word	0x0801fe6c
 8012b98:	2000c8d8 	.word	0x2000c8d8
 8012b9c:	2000c8e0 	.word	0x2000c8e0
 8012ba0:	2000c918 	.word	0x2000c918
 8012ba4:	2000c8d0 	.word	0x2000c8d0
 8012ba8:	2000c8d4 	.word	0x2000c8d4

08012bac <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b084      	sub	sp, #16
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d106      	bne.n	8012bc8 <tcp_close_shutdown_fin+0x1c>
 8012bba:	4b2e      	ldr	r3, [pc, #184]	@ (8012c74 <tcp_close_shutdown_fin+0xc8>)
 8012bbc:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8012bc0:	492d      	ldr	r1, [pc, #180]	@ (8012c78 <tcp_close_shutdown_fin+0xcc>)
 8012bc2:	482e      	ldr	r0, [pc, #184]	@ (8012c7c <tcp_close_shutdown_fin+0xd0>)
 8012bc4:	f009 fc6a 	bl	801c49c <iprintf>

  switch (pcb->state) {
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	7d1b      	ldrb	r3, [r3, #20]
 8012bcc:	2b07      	cmp	r3, #7
 8012bce:	d020      	beq.n	8012c12 <tcp_close_shutdown_fin+0x66>
 8012bd0:	2b07      	cmp	r3, #7
 8012bd2:	dc2b      	bgt.n	8012c2c <tcp_close_shutdown_fin+0x80>
 8012bd4:	2b03      	cmp	r3, #3
 8012bd6:	d002      	beq.n	8012bde <tcp_close_shutdown_fin+0x32>
 8012bd8:	2b04      	cmp	r3, #4
 8012bda:	d00d      	beq.n	8012bf8 <tcp_close_shutdown_fin+0x4c>
 8012bdc:	e026      	b.n	8012c2c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8012bde:	6878      	ldr	r0, [r7, #4]
 8012be0:	f004 fd98 	bl	8017714 <tcp_send_fin>
 8012be4:	4603      	mov	r3, r0
 8012be6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d11f      	bne.n	8012c30 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	2205      	movs	r2, #5
 8012bf4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012bf6:	e01b      	b.n	8012c30 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f004 fd8b 	bl	8017714 <tcp_send_fin>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d114      	bne.n	8012c34 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	2205      	movs	r2, #5
 8012c0e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012c10:	e010      	b.n	8012c34 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f004 fd7e 	bl	8017714 <tcp_send_fin>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d109      	bne.n	8012c38 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2209      	movs	r2, #9
 8012c28:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012c2a:	e005      	b.n	8012c38 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	e01c      	b.n	8012c6a <tcp_close_shutdown_fin+0xbe>
      break;
 8012c30:	bf00      	nop
 8012c32:	e002      	b.n	8012c3a <tcp_close_shutdown_fin+0x8e>
      break;
 8012c34:	bf00      	nop
 8012c36:	e000      	b.n	8012c3a <tcp_close_shutdown_fin+0x8e>
      break;
 8012c38:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d103      	bne.n	8012c4a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8012c42:	6878      	ldr	r0, [r7, #4]
 8012c44:	f004 fea4 	bl	8017990 <tcp_output>
 8012c48:	e00d      	b.n	8012c66 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c52:	d108      	bne.n	8012c66 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	8b5b      	ldrh	r3, [r3, #26]
 8012c58:	f043 0308 	orr.w	r3, r3, #8
 8012c5c:	b29a      	uxth	r2, r3
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8012c62:	2300      	movs	r3, #0
 8012c64:	e001      	b.n	8012c6a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	3710      	adds	r7, #16
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd80      	pop	{r7, pc}
 8012c72:	bf00      	nop
 8012c74:	0801fd78 	.word	0x0801fd78
 8012c78:	0801fe28 	.word	0x0801fe28
 8012c7c:	0801fdbc 	.word	0x0801fdbc

08012c80 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b082      	sub	sp, #8
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d109      	bne.n	8012ca2 <tcp_close+0x22>
 8012c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8012ccc <tcp_close+0x4c>)
 8012c90:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8012c94:	490e      	ldr	r1, [pc, #56]	@ (8012cd0 <tcp_close+0x50>)
 8012c96:	480f      	ldr	r0, [pc, #60]	@ (8012cd4 <tcp_close+0x54>)
 8012c98:	f009 fc00 	bl	801c49c <iprintf>
 8012c9c:	f06f 030f 	mvn.w	r3, #15
 8012ca0:	e00f      	b.n	8012cc2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	7d1b      	ldrb	r3, [r3, #20]
 8012ca6:	2b01      	cmp	r3, #1
 8012ca8:	d006      	beq.n	8012cb8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	8b5b      	ldrh	r3, [r3, #26]
 8012cae:	f043 0310 	orr.w	r3, r3, #16
 8012cb2:	b29a      	uxth	r2, r3
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012cb8:	2101      	movs	r1, #1
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	f7ff fe94 	bl	80129e8 <tcp_close_shutdown>
 8012cc0:	4603      	mov	r3, r0
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3708      	adds	r7, #8
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}
 8012cca:	bf00      	nop
 8012ccc:	0801fd78 	.word	0x0801fd78
 8012cd0:	0801fe88 	.word	0x0801fe88
 8012cd4:	0801fdbc 	.word	0x0801fdbc

08012cd8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b08e      	sub	sp, #56	@ 0x38
 8012cdc:	af04      	add	r7, sp, #16
 8012cde:	6078      	str	r0, [r7, #4]
 8012ce0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d107      	bne.n	8012cf8 <tcp_abandon+0x20>
 8012ce8:	4b52      	ldr	r3, [pc, #328]	@ (8012e34 <tcp_abandon+0x15c>)
 8012cea:	f240 223d 	movw	r2, #573	@ 0x23d
 8012cee:	4952      	ldr	r1, [pc, #328]	@ (8012e38 <tcp_abandon+0x160>)
 8012cf0:	4852      	ldr	r0, [pc, #328]	@ (8012e3c <tcp_abandon+0x164>)
 8012cf2:	f009 fbd3 	bl	801c49c <iprintf>
 8012cf6:	e099      	b.n	8012e2c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	7d1b      	ldrb	r3, [r3, #20]
 8012cfc:	2b01      	cmp	r3, #1
 8012cfe:	d106      	bne.n	8012d0e <tcp_abandon+0x36>
 8012d00:	4b4c      	ldr	r3, [pc, #304]	@ (8012e34 <tcp_abandon+0x15c>)
 8012d02:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8012d06:	494e      	ldr	r1, [pc, #312]	@ (8012e40 <tcp_abandon+0x168>)
 8012d08:	484c      	ldr	r0, [pc, #304]	@ (8012e3c <tcp_abandon+0x164>)
 8012d0a:	f009 fbc7 	bl	801c49c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	7d1b      	ldrb	r3, [r3, #20]
 8012d12:	2b0a      	cmp	r3, #10
 8012d14:	d107      	bne.n	8012d26 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012d16:	6879      	ldr	r1, [r7, #4]
 8012d18:	484a      	ldr	r0, [pc, #296]	@ (8012e44 <tcp_abandon+0x16c>)
 8012d1a:	f001 fa23 	bl	8014164 <tcp_pcb_remove>
    tcp_free(pcb);
 8012d1e:	6878      	ldr	r0, [r7, #4]
 8012d20:	f7ff fdb0 	bl	8012884 <tcp_free>
 8012d24:	e082      	b.n	8012e2c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8012d26:	2300      	movs	r3, #0
 8012d28:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012d32:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d38:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012d40:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	691b      	ldr	r3, [r3, #16]
 8012d46:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	7d1b      	ldrb	r3, [r3, #20]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d126      	bne.n	8012d9e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	8adb      	ldrh	r3, [r3, #22]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d02e      	beq.n	8012db6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012d58:	4b3b      	ldr	r3, [pc, #236]	@ (8012e48 <tcp_abandon+0x170>)
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	687a      	ldr	r2, [r7, #4]
 8012d5e:	429a      	cmp	r2, r3
 8012d60:	d105      	bne.n	8012d6e <tcp_abandon+0x96>
 8012d62:	4b39      	ldr	r3, [pc, #228]	@ (8012e48 <tcp_abandon+0x170>)
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	68db      	ldr	r3, [r3, #12]
 8012d68:	4a37      	ldr	r2, [pc, #220]	@ (8012e48 <tcp_abandon+0x170>)
 8012d6a:	6013      	str	r3, [r2, #0]
 8012d6c:	e013      	b.n	8012d96 <tcp_abandon+0xbe>
 8012d6e:	4b36      	ldr	r3, [pc, #216]	@ (8012e48 <tcp_abandon+0x170>)
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	61fb      	str	r3, [r7, #28]
 8012d74:	e00c      	b.n	8012d90 <tcp_abandon+0xb8>
 8012d76:	69fb      	ldr	r3, [r7, #28]
 8012d78:	68db      	ldr	r3, [r3, #12]
 8012d7a:	687a      	ldr	r2, [r7, #4]
 8012d7c:	429a      	cmp	r2, r3
 8012d7e:	d104      	bne.n	8012d8a <tcp_abandon+0xb2>
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	68da      	ldr	r2, [r3, #12]
 8012d84:	69fb      	ldr	r3, [r7, #28]
 8012d86:	60da      	str	r2, [r3, #12]
 8012d88:	e005      	b.n	8012d96 <tcp_abandon+0xbe>
 8012d8a:	69fb      	ldr	r3, [r7, #28]
 8012d8c:	68db      	ldr	r3, [r3, #12]
 8012d8e:	61fb      	str	r3, [r7, #28]
 8012d90:	69fb      	ldr	r3, [r7, #28]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d1ef      	bne.n	8012d76 <tcp_abandon+0x9e>
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2200      	movs	r2, #0
 8012d9a:	60da      	str	r2, [r3, #12]
 8012d9c:	e00b      	b.n	8012db6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	8adb      	ldrh	r3, [r3, #22]
 8012da6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012da8:	6879      	ldr	r1, [r7, #4]
 8012daa:	4828      	ldr	r0, [pc, #160]	@ (8012e4c <tcp_abandon+0x174>)
 8012dac:	f001 f9da 	bl	8014164 <tcp_pcb_remove>
 8012db0:	4b27      	ldr	r3, [pc, #156]	@ (8012e50 <tcp_abandon+0x178>)
 8012db2:	2201      	movs	r2, #1
 8012db4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d004      	beq.n	8012dc8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f000 fed8 	bl	8013b78 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d004      	beq.n	8012dda <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f000 fecf 	bl	8013b78 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d004      	beq.n	8012dec <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012de6:	4618      	mov	r0, r3
 8012de8:	f000 fec6 	bl	8013b78 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d00e      	beq.n	8012e10 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8012df2:	6879      	ldr	r1, [r7, #4]
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	3304      	adds	r3, #4
 8012df8:	687a      	ldr	r2, [r7, #4]
 8012dfa:	8b12      	ldrh	r2, [r2, #24]
 8012dfc:	9202      	str	r2, [sp, #8]
 8012dfe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012e00:	9201      	str	r2, [sp, #4]
 8012e02:	9300      	str	r3, [sp, #0]
 8012e04:	460b      	mov	r3, r1
 8012e06:	697a      	ldr	r2, [r7, #20]
 8012e08:	69b9      	ldr	r1, [r7, #24]
 8012e0a:	6878      	ldr	r0, [r7, #4]
 8012e0c:	f005 fb74 	bl	80184f8 <tcp_rst>
    }
    last_state = pcb->state;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	7d1b      	ldrb	r3, [r3, #20]
 8012e14:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8012e16:	6878      	ldr	r0, [r7, #4]
 8012e18:	f7ff fd34 	bl	8012884 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012e1c:	693b      	ldr	r3, [r7, #16]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d004      	beq.n	8012e2c <tcp_abandon+0x154>
 8012e22:	693b      	ldr	r3, [r7, #16]
 8012e24:	f06f 010c 	mvn.w	r1, #12
 8012e28:	68f8      	ldr	r0, [r7, #12]
 8012e2a:	4798      	blx	r3
  }
}
 8012e2c:	3728      	adds	r7, #40	@ 0x28
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	bd80      	pop	{r7, pc}
 8012e32:	bf00      	nop
 8012e34:	0801fd78 	.word	0x0801fd78
 8012e38:	0801febc 	.word	0x0801febc
 8012e3c:	0801fdbc 	.word	0x0801fdbc
 8012e40:	0801fed8 	.word	0x0801fed8
 8012e44:	2000c8dc 	.word	0x2000c8dc
 8012e48:	2000c8d0 	.word	0x2000c8d0
 8012e4c:	2000c8d8 	.word	0x2000c8d8
 8012e50:	2000c8e0 	.word	0x2000c8e0

08012e54 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b082      	sub	sp, #8
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012e5c:	2101      	movs	r1, #1
 8012e5e:	6878      	ldr	r0, [r7, #4]
 8012e60:	f7ff ff3a 	bl	8012cd8 <tcp_abandon>
}
 8012e64:	bf00      	nop
 8012e66:	3708      	adds	r7, #8
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	bd80      	pop	{r7, pc}

08012e6c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b088      	sub	sp, #32
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	60f8      	str	r0, [r7, #12]
 8012e74:	60b9      	str	r1, [r7, #8]
 8012e76:	4613      	mov	r3, r2
 8012e78:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8012e7a:	2304      	movs	r3, #4
 8012e7c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012e7e:	68bb      	ldr	r3, [r7, #8]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d101      	bne.n	8012e88 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8012e84:	4b3e      	ldr	r3, [pc, #248]	@ (8012f80 <tcp_bind+0x114>)
 8012e86:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d109      	bne.n	8012ea2 <tcp_bind+0x36>
 8012e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8012f84 <tcp_bind+0x118>)
 8012e90:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8012e94:	493c      	ldr	r1, [pc, #240]	@ (8012f88 <tcp_bind+0x11c>)
 8012e96:	483d      	ldr	r0, [pc, #244]	@ (8012f8c <tcp_bind+0x120>)
 8012e98:	f009 fb00 	bl	801c49c <iprintf>
 8012e9c:	f06f 030f 	mvn.w	r3, #15
 8012ea0:	e06a      	b.n	8012f78 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	7d1b      	ldrb	r3, [r3, #20]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d009      	beq.n	8012ebe <tcp_bind+0x52>
 8012eaa:	4b36      	ldr	r3, [pc, #216]	@ (8012f84 <tcp_bind+0x118>)
 8012eac:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8012eb0:	4937      	ldr	r1, [pc, #220]	@ (8012f90 <tcp_bind+0x124>)
 8012eb2:	4836      	ldr	r0, [pc, #216]	@ (8012f8c <tcp_bind+0x120>)
 8012eb4:	f009 faf2 	bl	801c49c <iprintf>
 8012eb8:	f06f 0305 	mvn.w	r3, #5
 8012ebc:	e05c      	b.n	8012f78 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8012ebe:	88fb      	ldrh	r3, [r7, #6]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d109      	bne.n	8012ed8 <tcp_bind+0x6c>
    port = tcp_new_port();
 8012ec4:	f000 f9f0 	bl	80132a8 <tcp_new_port>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012ecc:	88fb      	ldrh	r3, [r7, #6]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d135      	bne.n	8012f3e <tcp_bind+0xd2>
      return ERR_BUF;
 8012ed2:	f06f 0301 	mvn.w	r3, #1
 8012ed6:	e04f      	b.n	8012f78 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8012ed8:	2300      	movs	r3, #0
 8012eda:	61fb      	str	r3, [r7, #28]
 8012edc:	e02b      	b.n	8012f36 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012ede:	4a2d      	ldr	r2, [pc, #180]	@ (8012f94 <tcp_bind+0x128>)
 8012ee0:	69fb      	ldr	r3, [r7, #28]
 8012ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	61bb      	str	r3, [r7, #24]
 8012eea:	e01e      	b.n	8012f2a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8012eec:	69bb      	ldr	r3, [r7, #24]
 8012eee:	8adb      	ldrh	r3, [r3, #22]
 8012ef0:	88fa      	ldrh	r2, [r7, #6]
 8012ef2:	429a      	cmp	r2, r3
 8012ef4:	d116      	bne.n	8012f24 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8012ef6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d010      	beq.n	8012f1e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8012efc:	69bb      	ldr	r3, [r7, #24]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d00c      	beq.n	8012f1e <tcp_bind+0xb2>
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d009      	beq.n	8012f1e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d005      	beq.n	8012f1e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8012f12:	69bb      	ldr	r3, [r7, #24]
 8012f14:	681a      	ldr	r2, [r3, #0]
 8012f16:	68bb      	ldr	r3, [r7, #8]
 8012f18:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012f1a:	429a      	cmp	r2, r3
 8012f1c:	d102      	bne.n	8012f24 <tcp_bind+0xb8>
              return ERR_USE;
 8012f1e:	f06f 0307 	mvn.w	r3, #7
 8012f22:	e029      	b.n	8012f78 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012f24:	69bb      	ldr	r3, [r7, #24]
 8012f26:	68db      	ldr	r3, [r3, #12]
 8012f28:	61bb      	str	r3, [r7, #24]
 8012f2a:	69bb      	ldr	r3, [r7, #24]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d1dd      	bne.n	8012eec <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8012f30:	69fb      	ldr	r3, [r7, #28]
 8012f32:	3301      	adds	r3, #1
 8012f34:	61fb      	str	r3, [r7, #28]
 8012f36:	69fa      	ldr	r2, [r7, #28]
 8012f38:	697b      	ldr	r3, [r7, #20]
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	dbcf      	blt.n	8012ede <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d00c      	beq.n	8012f5e <tcp_bind+0xf2>
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d008      	beq.n	8012f5e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d002      	beq.n	8012f58 <tcp_bind+0xec>
 8012f52:	68bb      	ldr	r3, [r7, #8]
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	e000      	b.n	8012f5a <tcp_bind+0xee>
 8012f58:	2300      	movs	r3, #0
 8012f5a:	68fa      	ldr	r2, [r7, #12]
 8012f5c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	88fa      	ldrh	r2, [r7, #6]
 8012f62:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8012f64:	4b0c      	ldr	r3, [pc, #48]	@ (8012f98 <tcp_bind+0x12c>)
 8012f66:	681a      	ldr	r2, [r3, #0]
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	60da      	str	r2, [r3, #12]
 8012f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8012f98 <tcp_bind+0x12c>)
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	6013      	str	r3, [r2, #0]
 8012f72:	f005 fc83 	bl	801887c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8012f76:	2300      	movs	r3, #0
}
 8012f78:	4618      	mov	r0, r3
 8012f7a:	3720      	adds	r7, #32
 8012f7c:	46bd      	mov	sp, r7
 8012f7e:	bd80      	pop	{r7, pc}
 8012f80:	08021e08 	.word	0x08021e08
 8012f84:	0801fd78 	.word	0x0801fd78
 8012f88:	0801ff0c 	.word	0x0801ff0c
 8012f8c:	0801fdbc 	.word	0x0801fdbc
 8012f90:	0801ff24 	.word	0x0801ff24
 8012f94:	08021de0 	.word	0x08021de0
 8012f98:	2000c8d0 	.word	0x2000c8d0

08012f9c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b084      	sub	sp, #16
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	60f8      	str	r0, [r7, #12]
 8012fa4:	60b9      	str	r1, [r7, #8]
 8012fa6:	4613      	mov	r3, r2
 8012fa8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8012faa:	68bb      	ldr	r3, [r7, #8]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d106      	bne.n	8012fbe <tcp_accept_null+0x22>
 8012fb0:	4b07      	ldr	r3, [pc, #28]	@ (8012fd0 <tcp_accept_null+0x34>)
 8012fb2:	f240 320f 	movw	r2, #783	@ 0x30f
 8012fb6:	4907      	ldr	r1, [pc, #28]	@ (8012fd4 <tcp_accept_null+0x38>)
 8012fb8:	4807      	ldr	r0, [pc, #28]	@ (8012fd8 <tcp_accept_null+0x3c>)
 8012fba:	f009 fa6f 	bl	801c49c <iprintf>

  tcp_abort(pcb);
 8012fbe:	68b8      	ldr	r0, [r7, #8]
 8012fc0:	f7ff ff48 	bl	8012e54 <tcp_abort>

  return ERR_ABRT;
 8012fc4:	f06f 030c 	mvn.w	r3, #12
}
 8012fc8:	4618      	mov	r0, r3
 8012fca:	3710      	adds	r7, #16
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	bd80      	pop	{r7, pc}
 8012fd0:	0801fd78 	.word	0x0801fd78
 8012fd4:	0801ff4c 	.word	0x0801ff4c
 8012fd8:	0801fdbc 	.word	0x0801fdbc

08012fdc <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b082      	sub	sp, #8
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	6078      	str	r0, [r7, #4]
 8012fe4:	460b      	mov	r3, r1
 8012fe6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8012fe8:	78fb      	ldrb	r3, [r7, #3]
 8012fea:	2200      	movs	r2, #0
 8012fec:	4619      	mov	r1, r3
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f000 f806 	bl	8013000 <tcp_listen_with_backlog_and_err>
 8012ff4:	4603      	mov	r3, r0
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3708      	adds	r7, #8
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}
	...

08013000 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b088      	sub	sp, #32
 8013004:	af00      	add	r7, sp, #0
 8013006:	60f8      	str	r0, [r7, #12]
 8013008:	460b      	mov	r3, r1
 801300a:	607a      	str	r2, [r7, #4]
 801300c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801300e:	2300      	movs	r3, #0
 8013010:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d109      	bne.n	801302c <tcp_listen_with_backlog_and_err+0x2c>
 8013018:	4b47      	ldr	r3, [pc, #284]	@ (8013138 <tcp_listen_with_backlog_and_err+0x138>)
 801301a:	f240 3259 	movw	r2, #857	@ 0x359
 801301e:	4947      	ldr	r1, [pc, #284]	@ (801313c <tcp_listen_with_backlog_and_err+0x13c>)
 8013020:	4847      	ldr	r0, [pc, #284]	@ (8013140 <tcp_listen_with_backlog_and_err+0x140>)
 8013022:	f009 fa3b 	bl	801c49c <iprintf>
 8013026:	23f0      	movs	r3, #240	@ 0xf0
 8013028:	76fb      	strb	r3, [r7, #27]
 801302a:	e079      	b.n	8013120 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	7d1b      	ldrb	r3, [r3, #20]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d009      	beq.n	8013048 <tcp_listen_with_backlog_and_err+0x48>
 8013034:	4b40      	ldr	r3, [pc, #256]	@ (8013138 <tcp_listen_with_backlog_and_err+0x138>)
 8013036:	f240 325a 	movw	r2, #858	@ 0x35a
 801303a:	4942      	ldr	r1, [pc, #264]	@ (8013144 <tcp_listen_with_backlog_and_err+0x144>)
 801303c:	4840      	ldr	r0, [pc, #256]	@ (8013140 <tcp_listen_with_backlog_and_err+0x140>)
 801303e:	f009 fa2d 	bl	801c49c <iprintf>
 8013042:	23f1      	movs	r3, #241	@ 0xf1
 8013044:	76fb      	strb	r3, [r7, #27]
 8013046:	e06b      	b.n	8013120 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	7d1b      	ldrb	r3, [r3, #20]
 801304c:	2b01      	cmp	r3, #1
 801304e:	d104      	bne.n	801305a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8013054:	23f7      	movs	r3, #247	@ 0xf7
 8013056:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013058:	e062      	b.n	8013120 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801305a:	2002      	movs	r0, #2
 801305c:	f7fe fa7e 	bl	801155c <memp_malloc>
 8013060:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8013062:	69fb      	ldr	r3, [r7, #28]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d102      	bne.n	801306e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8013068:	23ff      	movs	r3, #255	@ 0xff
 801306a:	76fb      	strb	r3, [r7, #27]
    goto done;
 801306c:	e058      	b.n	8013120 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	691a      	ldr	r2, [r3, #16]
 8013072:	69fb      	ldr	r3, [r7, #28]
 8013074:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	8ada      	ldrh	r2, [r3, #22]
 801307a:	69fb      	ldr	r3, [r7, #28]
 801307c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801307e:	69fb      	ldr	r3, [r7, #28]
 8013080:	2201      	movs	r2, #1
 8013082:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	7d5a      	ldrb	r2, [r3, #21]
 8013088:	69fb      	ldr	r3, [r7, #28]
 801308a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	7a5a      	ldrb	r2, [r3, #9]
 8013090:	69fb      	ldr	r3, [r7, #28]
 8013092:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8013094:	69fb      	ldr	r3, [r7, #28]
 8013096:	2200      	movs	r2, #0
 8013098:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	7ada      	ldrb	r2, [r3, #11]
 801309e:	69fb      	ldr	r3, [r7, #28]
 80130a0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	7a9a      	ldrb	r2, [r3, #10]
 80130a6:	69fb      	ldr	r3, [r7, #28]
 80130a8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	681a      	ldr	r2, [r3, #0]
 80130ae:	69fb      	ldr	r3, [r7, #28]
 80130b0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	8adb      	ldrh	r3, [r3, #22]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d021      	beq.n	80130fe <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80130ba:	4b23      	ldr	r3, [pc, #140]	@ (8013148 <tcp_listen_with_backlog_and_err+0x148>)
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	68fa      	ldr	r2, [r7, #12]
 80130c0:	429a      	cmp	r2, r3
 80130c2:	d105      	bne.n	80130d0 <tcp_listen_with_backlog_and_err+0xd0>
 80130c4:	4b20      	ldr	r3, [pc, #128]	@ (8013148 <tcp_listen_with_backlog_and_err+0x148>)
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	68db      	ldr	r3, [r3, #12]
 80130ca:	4a1f      	ldr	r2, [pc, #124]	@ (8013148 <tcp_listen_with_backlog_and_err+0x148>)
 80130cc:	6013      	str	r3, [r2, #0]
 80130ce:	e013      	b.n	80130f8 <tcp_listen_with_backlog_and_err+0xf8>
 80130d0:	4b1d      	ldr	r3, [pc, #116]	@ (8013148 <tcp_listen_with_backlog_and_err+0x148>)
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	617b      	str	r3, [r7, #20]
 80130d6:	e00c      	b.n	80130f2 <tcp_listen_with_backlog_and_err+0xf2>
 80130d8:	697b      	ldr	r3, [r7, #20]
 80130da:	68db      	ldr	r3, [r3, #12]
 80130dc:	68fa      	ldr	r2, [r7, #12]
 80130de:	429a      	cmp	r2, r3
 80130e0:	d104      	bne.n	80130ec <tcp_listen_with_backlog_and_err+0xec>
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	68da      	ldr	r2, [r3, #12]
 80130e6:	697b      	ldr	r3, [r7, #20]
 80130e8:	60da      	str	r2, [r3, #12]
 80130ea:	e005      	b.n	80130f8 <tcp_listen_with_backlog_and_err+0xf8>
 80130ec:	697b      	ldr	r3, [r7, #20]
 80130ee:	68db      	ldr	r3, [r3, #12]
 80130f0:	617b      	str	r3, [r7, #20]
 80130f2:	697b      	ldr	r3, [r7, #20]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d1ef      	bne.n	80130d8 <tcp_listen_with_backlog_and_err+0xd8>
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	2200      	movs	r2, #0
 80130fc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80130fe:	68f8      	ldr	r0, [r7, #12]
 8013100:	f7ff fbc0 	bl	8012884 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8013104:	69fb      	ldr	r3, [r7, #28]
 8013106:	4a11      	ldr	r2, [pc, #68]	@ (801314c <tcp_listen_with_backlog_and_err+0x14c>)
 8013108:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801310a:	4b11      	ldr	r3, [pc, #68]	@ (8013150 <tcp_listen_with_backlog_and_err+0x150>)
 801310c:	681a      	ldr	r2, [r3, #0]
 801310e:	69fb      	ldr	r3, [r7, #28]
 8013110:	60da      	str	r2, [r3, #12]
 8013112:	4a0f      	ldr	r2, [pc, #60]	@ (8013150 <tcp_listen_with_backlog_and_err+0x150>)
 8013114:	69fb      	ldr	r3, [r7, #28]
 8013116:	6013      	str	r3, [r2, #0]
 8013118:	f005 fbb0 	bl	801887c <tcp_timer_needed>
  res = ERR_OK;
 801311c:	2300      	movs	r3, #0
 801311e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d002      	beq.n	801312c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	7efa      	ldrb	r2, [r7, #27]
 801312a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801312c:	69fb      	ldr	r3, [r7, #28]
}
 801312e:	4618      	mov	r0, r3
 8013130:	3720      	adds	r7, #32
 8013132:	46bd      	mov	sp, r7
 8013134:	bd80      	pop	{r7, pc}
 8013136:	bf00      	nop
 8013138:	0801fd78 	.word	0x0801fd78
 801313c:	0801ff6c 	.word	0x0801ff6c
 8013140:	0801fdbc 	.word	0x0801fdbc
 8013144:	0801ff9c 	.word	0x0801ff9c
 8013148:	2000c8d0 	.word	0x2000c8d0
 801314c:	08012f9d 	.word	0x08012f9d
 8013150:	2000c8d4 	.word	0x2000c8d4

08013154 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b084      	sub	sp, #16
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d106      	bne.n	8013170 <tcp_update_rcv_ann_wnd+0x1c>
 8013162:	4b25      	ldr	r3, [pc, #148]	@ (80131f8 <tcp_update_rcv_ann_wnd+0xa4>)
 8013164:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8013168:	4924      	ldr	r1, [pc, #144]	@ (80131fc <tcp_update_rcv_ann_wnd+0xa8>)
 801316a:	4825      	ldr	r0, [pc, #148]	@ (8013200 <tcp_update_rcv_ann_wnd+0xac>)
 801316c:	f009 f996 	bl	801c49c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013174:	687a      	ldr	r2, [r7, #4]
 8013176:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8013178:	4413      	add	r3, r2
 801317a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013180:	687a      	ldr	r2, [r7, #4]
 8013182:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8013184:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8013188:	bf28      	it	cs
 801318a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801318e:	b292      	uxth	r2, r2
 8013190:	4413      	add	r3, r2
 8013192:	68fa      	ldr	r2, [r7, #12]
 8013194:	1ad3      	subs	r3, r2, r3
 8013196:	2b00      	cmp	r3, #0
 8013198:	db08      	blt.n	80131ac <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131a6:	68fa      	ldr	r2, [r7, #12]
 80131a8:	1ad3      	subs	r3, r2, r3
 80131aa:	e020      	b.n	80131ee <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131b4:	1ad3      	subs	r3, r2, r3
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	dd03      	ble.n	80131c2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	2200      	movs	r2, #0
 80131be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80131c0:	e014      	b.n	80131ec <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131ca:	1ad3      	subs	r3, r2, r3
 80131cc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80131ce:	68bb      	ldr	r3, [r7, #8]
 80131d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80131d4:	d306      	bcc.n	80131e4 <tcp_update_rcv_ann_wnd+0x90>
 80131d6:	4b08      	ldr	r3, [pc, #32]	@ (80131f8 <tcp_update_rcv_ann_wnd+0xa4>)
 80131d8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80131dc:	4909      	ldr	r1, [pc, #36]	@ (8013204 <tcp_update_rcv_ann_wnd+0xb0>)
 80131de:	4808      	ldr	r0, [pc, #32]	@ (8013200 <tcp_update_rcv_ann_wnd+0xac>)
 80131e0:	f009 f95c 	bl	801c49c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80131e4:	68bb      	ldr	r3, [r7, #8]
 80131e6:	b29a      	uxth	r2, r3
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80131ec:	2300      	movs	r3, #0
  }
}
 80131ee:	4618      	mov	r0, r3
 80131f0:	3710      	adds	r7, #16
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}
 80131f6:	bf00      	nop
 80131f8:	0801fd78 	.word	0x0801fd78
 80131fc:	0801ffd4 	.word	0x0801ffd4
 8013200:	0801fdbc 	.word	0x0801fdbc
 8013204:	0801fff8 	.word	0x0801fff8

08013208 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b084      	sub	sp, #16
 801320c:	af00      	add	r7, sp, #0
 801320e:	6078      	str	r0, [r7, #4]
 8013210:	460b      	mov	r3, r1
 8013212:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d107      	bne.n	801322a <tcp_recved+0x22>
 801321a:	4b1f      	ldr	r3, [pc, #124]	@ (8013298 <tcp_recved+0x90>)
 801321c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8013220:	491e      	ldr	r1, [pc, #120]	@ (801329c <tcp_recved+0x94>)
 8013222:	481f      	ldr	r0, [pc, #124]	@ (80132a0 <tcp_recved+0x98>)
 8013224:	f009 f93a 	bl	801c49c <iprintf>
 8013228:	e032      	b.n	8013290 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	7d1b      	ldrb	r3, [r3, #20]
 801322e:	2b01      	cmp	r3, #1
 8013230:	d106      	bne.n	8013240 <tcp_recved+0x38>
 8013232:	4b19      	ldr	r3, [pc, #100]	@ (8013298 <tcp_recved+0x90>)
 8013234:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8013238:	491a      	ldr	r1, [pc, #104]	@ (80132a4 <tcp_recved+0x9c>)
 801323a:	4819      	ldr	r0, [pc, #100]	@ (80132a0 <tcp_recved+0x98>)
 801323c:	f009 f92e 	bl	801c49c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013244:	887b      	ldrh	r3, [r7, #2]
 8013246:	4413      	add	r3, r2
 8013248:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801324a:	89fb      	ldrh	r3, [r7, #14]
 801324c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013250:	d804      	bhi.n	801325c <tcp_recved+0x54>
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013256:	89fa      	ldrh	r2, [r7, #14]
 8013258:	429a      	cmp	r2, r3
 801325a:	d204      	bcs.n	8013266 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8013262:	851a      	strh	r2, [r3, #40]	@ 0x28
 8013264:	e002      	b.n	801326c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	89fa      	ldrh	r2, [r7, #14]
 801326a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f7ff ff71 	bl	8013154 <tcp_update_rcv_ann_wnd>
 8013272:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801327a:	d309      	bcc.n	8013290 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	8b5b      	ldrh	r3, [r3, #26]
 8013280:	f043 0302 	orr.w	r3, r3, #2
 8013284:	b29a      	uxth	r2, r3
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	f004 fb80 	bl	8017990 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8013290:	3710      	adds	r7, #16
 8013292:	46bd      	mov	sp, r7
 8013294:	bd80      	pop	{r7, pc}
 8013296:	bf00      	nop
 8013298:	0801fd78 	.word	0x0801fd78
 801329c:	08020014 	.word	0x08020014
 80132a0:	0801fdbc 	.word	0x0801fdbc
 80132a4:	0802002c 	.word	0x0802002c

080132a8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80132a8:	b480      	push	{r7}
 80132aa:	b083      	sub	sp, #12
 80132ac:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80132ae:	2300      	movs	r3, #0
 80132b0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80132b2:	4b1e      	ldr	r3, [pc, #120]	@ (801332c <tcp_new_port+0x84>)
 80132b4:	881b      	ldrh	r3, [r3, #0]
 80132b6:	3301      	adds	r3, #1
 80132b8:	b29a      	uxth	r2, r3
 80132ba:	4b1c      	ldr	r3, [pc, #112]	@ (801332c <tcp_new_port+0x84>)
 80132bc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80132be:	4b1b      	ldr	r3, [pc, #108]	@ (801332c <tcp_new_port+0x84>)
 80132c0:	881b      	ldrh	r3, [r3, #0]
 80132c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80132c6:	4293      	cmp	r3, r2
 80132c8:	d103      	bne.n	80132d2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80132ca:	4b18      	ldr	r3, [pc, #96]	@ (801332c <tcp_new_port+0x84>)
 80132cc:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80132d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80132d2:	2300      	movs	r3, #0
 80132d4:	71fb      	strb	r3, [r7, #7]
 80132d6:	e01e      	b.n	8013316 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80132d8:	79fb      	ldrb	r3, [r7, #7]
 80132da:	4a15      	ldr	r2, [pc, #84]	@ (8013330 <tcp_new_port+0x88>)
 80132dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	603b      	str	r3, [r7, #0]
 80132e4:	e011      	b.n	801330a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80132e6:	683b      	ldr	r3, [r7, #0]
 80132e8:	8ada      	ldrh	r2, [r3, #22]
 80132ea:	4b10      	ldr	r3, [pc, #64]	@ (801332c <tcp_new_port+0x84>)
 80132ec:	881b      	ldrh	r3, [r3, #0]
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d108      	bne.n	8013304 <tcp_new_port+0x5c>
        n++;
 80132f2:	88bb      	ldrh	r3, [r7, #4]
 80132f4:	3301      	adds	r3, #1
 80132f6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80132f8:	88bb      	ldrh	r3, [r7, #4]
 80132fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80132fe:	d3d8      	bcc.n	80132b2 <tcp_new_port+0xa>
          return 0;
 8013300:	2300      	movs	r3, #0
 8013302:	e00d      	b.n	8013320 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013304:	683b      	ldr	r3, [r7, #0]
 8013306:	68db      	ldr	r3, [r3, #12]
 8013308:	603b      	str	r3, [r7, #0]
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d1ea      	bne.n	80132e6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013310:	79fb      	ldrb	r3, [r7, #7]
 8013312:	3301      	adds	r3, #1
 8013314:	71fb      	strb	r3, [r7, #7]
 8013316:	79fb      	ldrb	r3, [r7, #7]
 8013318:	2b03      	cmp	r3, #3
 801331a:	d9dd      	bls.n	80132d8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801331c:	4b03      	ldr	r3, [pc, #12]	@ (801332c <tcp_new_port+0x84>)
 801331e:	881b      	ldrh	r3, [r3, #0]
}
 8013320:	4618      	mov	r0, r3
 8013322:	370c      	adds	r7, #12
 8013324:	46bd      	mov	sp, r7
 8013326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332a:	4770      	bx	lr
 801332c:	2000009c 	.word	0x2000009c
 8013330:	08021de0 	.word	0x08021de0

08013334 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8013334:	b5b0      	push	{r4, r5, r7, lr}
 8013336:	b090      	sub	sp, #64	@ 0x40
 8013338:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801333a:	2300      	movs	r3, #0
 801333c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8013340:	4b95      	ldr	r3, [pc, #596]	@ (8013598 <tcp_slowtmr+0x264>)
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	3301      	adds	r3, #1
 8013346:	4a94      	ldr	r2, [pc, #592]	@ (8013598 <tcp_slowtmr+0x264>)
 8013348:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801334a:	4b94      	ldr	r3, [pc, #592]	@ (801359c <tcp_slowtmr+0x268>)
 801334c:	781b      	ldrb	r3, [r3, #0]
 801334e:	3301      	adds	r3, #1
 8013350:	b2da      	uxtb	r2, r3
 8013352:	4b92      	ldr	r3, [pc, #584]	@ (801359c <tcp_slowtmr+0x268>)
 8013354:	701a      	strb	r2, [r3, #0]
 8013356:	e000      	b.n	801335a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8013358:	bf00      	nop
  prev = NULL;
 801335a:	2300      	movs	r3, #0
 801335c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801335e:	4b90      	ldr	r3, [pc, #576]	@ (80135a0 <tcp_slowtmr+0x26c>)
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013364:	e29f      	b.n	80138a6 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013368:	7d1b      	ldrb	r3, [r3, #20]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d106      	bne.n	801337c <tcp_slowtmr+0x48>
 801336e:	4b8d      	ldr	r3, [pc, #564]	@ (80135a4 <tcp_slowtmr+0x270>)
 8013370:	f240 42be 	movw	r2, #1214	@ 0x4be
 8013374:	498c      	ldr	r1, [pc, #560]	@ (80135a8 <tcp_slowtmr+0x274>)
 8013376:	488d      	ldr	r0, [pc, #564]	@ (80135ac <tcp_slowtmr+0x278>)
 8013378:	f009 f890 	bl	801c49c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801337c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801337e:	7d1b      	ldrb	r3, [r3, #20]
 8013380:	2b01      	cmp	r3, #1
 8013382:	d106      	bne.n	8013392 <tcp_slowtmr+0x5e>
 8013384:	4b87      	ldr	r3, [pc, #540]	@ (80135a4 <tcp_slowtmr+0x270>)
 8013386:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801338a:	4989      	ldr	r1, [pc, #548]	@ (80135b0 <tcp_slowtmr+0x27c>)
 801338c:	4887      	ldr	r0, [pc, #540]	@ (80135ac <tcp_slowtmr+0x278>)
 801338e:	f009 f885 	bl	801c49c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8013392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013394:	7d1b      	ldrb	r3, [r3, #20]
 8013396:	2b0a      	cmp	r3, #10
 8013398:	d106      	bne.n	80133a8 <tcp_slowtmr+0x74>
 801339a:	4b82      	ldr	r3, [pc, #520]	@ (80135a4 <tcp_slowtmr+0x270>)
 801339c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80133a0:	4984      	ldr	r1, [pc, #528]	@ (80135b4 <tcp_slowtmr+0x280>)
 80133a2:	4882      	ldr	r0, [pc, #520]	@ (80135ac <tcp_slowtmr+0x278>)
 80133a4:	f009 f87a 	bl	801c49c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80133a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133aa:	7f9a      	ldrb	r2, [r3, #30]
 80133ac:	4b7b      	ldr	r3, [pc, #492]	@ (801359c <tcp_slowtmr+0x268>)
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	429a      	cmp	r2, r3
 80133b2:	d105      	bne.n	80133c0 <tcp_slowtmr+0x8c>
      prev = pcb;
 80133b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80133b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133ba:	68db      	ldr	r3, [r3, #12]
 80133bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80133be:	e272      	b.n	80138a6 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 80133c0:	4b76      	ldr	r3, [pc, #472]	@ (801359c <tcp_slowtmr+0x268>)
 80133c2:	781a      	ldrb	r2, [r3, #0]
 80133c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133c6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80133c8:	2300      	movs	r3, #0
 80133ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80133ce:	2300      	movs	r3, #0
 80133d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80133d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133d6:	7d1b      	ldrb	r3, [r3, #20]
 80133d8:	2b02      	cmp	r3, #2
 80133da:	d10a      	bne.n	80133f2 <tcp_slowtmr+0xbe>
 80133dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80133e2:	2b05      	cmp	r3, #5
 80133e4:	d905      	bls.n	80133f2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80133e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80133ea:	3301      	adds	r3, #1
 80133ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80133f0:	e11e      	b.n	8013630 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80133f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80133f8:	2b0b      	cmp	r3, #11
 80133fa:	d905      	bls.n	8013408 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80133fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013400:	3301      	adds	r3, #1
 8013402:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013406:	e113      	b.n	8013630 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8013408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801340a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801340e:	2b00      	cmp	r3, #0
 8013410:	d075      	beq.n	80134fe <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8013412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013416:	2b00      	cmp	r3, #0
 8013418:	d006      	beq.n	8013428 <tcp_slowtmr+0xf4>
 801341a:	4b62      	ldr	r3, [pc, #392]	@ (80135a4 <tcp_slowtmr+0x270>)
 801341c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8013420:	4965      	ldr	r1, [pc, #404]	@ (80135b8 <tcp_slowtmr+0x284>)
 8013422:	4862      	ldr	r0, [pc, #392]	@ (80135ac <tcp_slowtmr+0x278>)
 8013424:	f009 f83a 	bl	801c49c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801342a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801342c:	2b00      	cmp	r3, #0
 801342e:	d106      	bne.n	801343e <tcp_slowtmr+0x10a>
 8013430:	4b5c      	ldr	r3, [pc, #368]	@ (80135a4 <tcp_slowtmr+0x270>)
 8013432:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8013436:	4961      	ldr	r1, [pc, #388]	@ (80135bc <tcp_slowtmr+0x288>)
 8013438:	485c      	ldr	r0, [pc, #368]	@ (80135ac <tcp_slowtmr+0x278>)
 801343a:	f009 f82f 	bl	801c49c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801343e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013440:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013444:	2b0b      	cmp	r3, #11
 8013446:	d905      	bls.n	8013454 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8013448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801344c:	3301      	adds	r3, #1
 801344e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013452:	e0ed      	b.n	8013630 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013456:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801345a:	3b01      	subs	r3, #1
 801345c:	4a58      	ldr	r2, [pc, #352]	@ (80135c0 <tcp_slowtmr+0x28c>)
 801345e:	5cd3      	ldrb	r3, [r2, r3]
 8013460:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8013462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013464:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013468:	7c7a      	ldrb	r2, [r7, #17]
 801346a:	429a      	cmp	r2, r3
 801346c:	d907      	bls.n	801347e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801346e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013470:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013474:	3301      	adds	r3, #1
 8013476:	b2da      	uxtb	r2, r3
 8013478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801347a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801347e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013480:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013484:	7c7a      	ldrb	r2, [r7, #17]
 8013486:	429a      	cmp	r2, r3
 8013488:	f200 80d2 	bhi.w	8013630 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801348c:	2301      	movs	r3, #1
 801348e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8013490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013492:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013496:	2b00      	cmp	r3, #0
 8013498:	d108      	bne.n	80134ac <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801349a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801349c:	f005 f920 	bl	80186e0 <tcp_zero_window_probe>
 80134a0:	4603      	mov	r3, r0
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d014      	beq.n	80134d0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80134a6:	2300      	movs	r3, #0
 80134a8:	623b      	str	r3, [r7, #32]
 80134aa:	e011      	b.n	80134d0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80134ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80134b2:	4619      	mov	r1, r3
 80134b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80134b6:	f003 ffe5 	bl	8017484 <tcp_split_unsent_seg>
 80134ba:	4603      	mov	r3, r0
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d107      	bne.n	80134d0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80134c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80134c2:	f004 fa65 	bl	8017990 <tcp_output>
 80134c6:	4603      	mov	r3, r0
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d101      	bne.n	80134d0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80134cc:	2300      	movs	r3, #0
 80134ce:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80134d0:	6a3b      	ldr	r3, [r7, #32]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	f000 80ac 	beq.w	8013630 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80134d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134da:	2200      	movs	r2, #0
 80134dc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80134e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134e2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80134e6:	2b06      	cmp	r3, #6
 80134e8:	f200 80a2 	bhi.w	8013630 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80134ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134ee:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80134f2:	3301      	adds	r3, #1
 80134f4:	b2da      	uxtb	r2, r3
 80134f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134f8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80134fc:	e098      	b.n	8013630 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80134fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013500:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013504:	2b00      	cmp	r3, #0
 8013506:	db0f      	blt.n	8013528 <tcp_slowtmr+0x1f4>
 8013508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801350a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801350e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013512:	4293      	cmp	r3, r2
 8013514:	d008      	beq.n	8013528 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8013516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013518:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801351c:	b29b      	uxth	r3, r3
 801351e:	3301      	adds	r3, #1
 8013520:	b29b      	uxth	r3, r3
 8013522:	b21a      	sxth	r2, r3
 8013524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013526:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8013528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801352a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801352e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013530:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8013534:	429a      	cmp	r2, r3
 8013536:	db7b      	blt.n	8013630 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8013538:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801353a:	f004 fd1d 	bl	8017f78 <tcp_rexmit_rto_prepare>
 801353e:	4603      	mov	r3, r0
 8013540:	2b00      	cmp	r3, #0
 8013542:	d007      	beq.n	8013554 <tcp_slowtmr+0x220>
 8013544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013548:	2b00      	cmp	r3, #0
 801354a:	d171      	bne.n	8013630 <tcp_slowtmr+0x2fc>
 801354c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801354e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013550:	2b00      	cmp	r3, #0
 8013552:	d06d      	beq.n	8013630 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8013554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013556:	7d1b      	ldrb	r3, [r3, #20]
 8013558:	2b02      	cmp	r3, #2
 801355a:	d03a      	beq.n	80135d2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801355c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801355e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013562:	2b0c      	cmp	r3, #12
 8013564:	bf28      	it	cs
 8013566:	230c      	movcs	r3, #12
 8013568:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801356a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801356c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013570:	10db      	asrs	r3, r3, #3
 8013572:	b21b      	sxth	r3, r3
 8013574:	461a      	mov	r2, r3
 8013576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013578:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801357c:	4413      	add	r3, r2
 801357e:	7efa      	ldrb	r2, [r7, #27]
 8013580:	4910      	ldr	r1, [pc, #64]	@ (80135c4 <tcp_slowtmr+0x290>)
 8013582:	5c8a      	ldrb	r2, [r1, r2]
 8013584:	4093      	lsls	r3, r2
 8013586:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013588:	697b      	ldr	r3, [r7, #20]
 801358a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801358e:	4293      	cmp	r3, r2
 8013590:	dc1a      	bgt.n	80135c8 <tcp_slowtmr+0x294>
 8013592:	697b      	ldr	r3, [r7, #20]
 8013594:	b21a      	sxth	r2, r3
 8013596:	e019      	b.n	80135cc <tcp_slowtmr+0x298>
 8013598:	2000c8cc 	.word	0x2000c8cc
 801359c:	2000c8e2 	.word	0x2000c8e2
 80135a0:	2000c8d8 	.word	0x2000c8d8
 80135a4:	0801fd78 	.word	0x0801fd78
 80135a8:	080200bc 	.word	0x080200bc
 80135ac:	0801fdbc 	.word	0x0801fdbc
 80135b0:	080200e8 	.word	0x080200e8
 80135b4:	08020114 	.word	0x08020114
 80135b8:	08020144 	.word	0x08020144
 80135bc:	08020178 	.word	0x08020178
 80135c0:	08021dd8 	.word	0x08021dd8
 80135c4:	08021dc8 	.word	0x08021dc8
 80135c8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80135cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80135d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135d4:	2200      	movs	r2, #0
 80135d6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80135d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80135de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80135e4:	4293      	cmp	r3, r2
 80135e6:	bf28      	it	cs
 80135e8:	4613      	movcs	r3, r2
 80135ea:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80135ec:	8a7b      	ldrh	r3, [r7, #18]
 80135ee:	085b      	lsrs	r3, r3, #1
 80135f0:	b29a      	uxth	r2, r3
 80135f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135f4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80135f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80135fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013600:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013602:	005b      	lsls	r3, r3, #1
 8013604:	b29b      	uxth	r3, r3
 8013606:	429a      	cmp	r2, r3
 8013608:	d206      	bcs.n	8013618 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801360a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801360c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801360e:	005b      	lsls	r3, r3, #1
 8013610:	b29a      	uxth	r2, r3
 8013612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013614:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8013618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801361a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801361c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801361e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8013622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013624:	2200      	movs	r2, #0
 8013626:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801362a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801362c:	f004 fd14 	bl	8018058 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8013630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013632:	7d1b      	ldrb	r3, [r3, #20]
 8013634:	2b06      	cmp	r3, #6
 8013636:	d111      	bne.n	801365c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8013638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801363a:	8b5b      	ldrh	r3, [r3, #26]
 801363c:	f003 0310 	and.w	r3, r3, #16
 8013640:	2b00      	cmp	r3, #0
 8013642:	d00b      	beq.n	801365c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013644:	4b9d      	ldr	r3, [pc, #628]	@ (80138bc <tcp_slowtmr+0x588>)
 8013646:	681a      	ldr	r2, [r3, #0]
 8013648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801364a:	6a1b      	ldr	r3, [r3, #32]
 801364c:	1ad3      	subs	r3, r2, r3
 801364e:	2b28      	cmp	r3, #40	@ 0x28
 8013650:	d904      	bls.n	801365c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8013652:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013656:	3301      	adds	r3, #1
 8013658:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801365c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801365e:	7a5b      	ldrb	r3, [r3, #9]
 8013660:	f003 0308 	and.w	r3, r3, #8
 8013664:	2b00      	cmp	r3, #0
 8013666:	d04c      	beq.n	8013702 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8013668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801366a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801366c:	2b04      	cmp	r3, #4
 801366e:	d003      	beq.n	8013678 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8013670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013672:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8013674:	2b07      	cmp	r3, #7
 8013676:	d144      	bne.n	8013702 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013678:	4b90      	ldr	r3, [pc, #576]	@ (80138bc <tcp_slowtmr+0x588>)
 801367a:	681a      	ldr	r2, [r3, #0]
 801367c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801367e:	6a1b      	ldr	r3, [r3, #32]
 8013680:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8013682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013684:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013688:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 801368c:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8013690:	498b      	ldr	r1, [pc, #556]	@ (80138c0 <tcp_slowtmr+0x58c>)
 8013692:	fba1 1303 	umull	r1, r3, r1, r3
 8013696:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013698:	429a      	cmp	r2, r3
 801369a:	d90a      	bls.n	80136b2 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 801369c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136a0:	3301      	adds	r3, #1
 80136a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80136a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80136aa:	3301      	adds	r3, #1
 80136ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80136b0:	e027      	b.n	8013702 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80136b2:	4b82      	ldr	r3, [pc, #520]	@ (80138bc <tcp_slowtmr+0x588>)
 80136b4:	681a      	ldr	r2, [r3, #0]
 80136b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136b8:	6a1b      	ldr	r3, [r3, #32]
 80136ba:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80136bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136be:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80136c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136c4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80136c8:	4618      	mov	r0, r3
 80136ca:	4b7e      	ldr	r3, [pc, #504]	@ (80138c4 <tcp_slowtmr+0x590>)
 80136cc:	fb00 f303 	mul.w	r3, r0, r3
 80136d0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80136d2:	497b      	ldr	r1, [pc, #492]	@ (80138c0 <tcp_slowtmr+0x58c>)
 80136d4:	fba1 1303 	umull	r1, r3, r1, r3
 80136d8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80136da:	429a      	cmp	r2, r3
 80136dc:	d911      	bls.n	8013702 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 80136de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80136e0:	f004 ffbe 	bl	8018660 <tcp_keepalive>
 80136e4:	4603      	mov	r3, r0
 80136e6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80136ea:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d107      	bne.n	8013702 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 80136f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136f4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80136f8:	3301      	adds	r3, #1
 80136fa:	b2da      	uxtb	r2, r3
 80136fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136fe:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8013702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013706:	2b00      	cmp	r3, #0
 8013708:	d011      	beq.n	801372e <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801370a:	4b6c      	ldr	r3, [pc, #432]	@ (80138bc <tcp_slowtmr+0x588>)
 801370c:	681a      	ldr	r2, [r3, #0]
 801370e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013710:	6a1b      	ldr	r3, [r3, #32]
 8013712:	1ad2      	subs	r2, r2, r3
 8013714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013716:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801371a:	4619      	mov	r1, r3
 801371c:	460b      	mov	r3, r1
 801371e:	005b      	lsls	r3, r3, #1
 8013720:	440b      	add	r3, r1
 8013722:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8013724:	429a      	cmp	r2, r3
 8013726:	d302      	bcc.n	801372e <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8013728:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801372a:	f000 fe7f 	bl	801442c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801372e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013730:	7d1b      	ldrb	r3, [r3, #20]
 8013732:	2b03      	cmp	r3, #3
 8013734:	d10b      	bne.n	801374e <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013736:	4b61      	ldr	r3, [pc, #388]	@ (80138bc <tcp_slowtmr+0x588>)
 8013738:	681a      	ldr	r2, [r3, #0]
 801373a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801373c:	6a1b      	ldr	r3, [r3, #32]
 801373e:	1ad3      	subs	r3, r2, r3
 8013740:	2b28      	cmp	r3, #40	@ 0x28
 8013742:	d904      	bls.n	801374e <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8013744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013748:	3301      	adds	r3, #1
 801374a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 801374e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013750:	7d1b      	ldrb	r3, [r3, #20]
 8013752:	2b09      	cmp	r3, #9
 8013754:	d10b      	bne.n	801376e <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013756:	4b59      	ldr	r3, [pc, #356]	@ (80138bc <tcp_slowtmr+0x588>)
 8013758:	681a      	ldr	r2, [r3, #0]
 801375a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801375c:	6a1b      	ldr	r3, [r3, #32]
 801375e:	1ad3      	subs	r3, r2, r3
 8013760:	2bf0      	cmp	r3, #240	@ 0xf0
 8013762:	d904      	bls.n	801376e <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8013764:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013768:	3301      	adds	r3, #1
 801376a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801376e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013772:	2b00      	cmp	r3, #0
 8013774:	d060      	beq.n	8013838 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8013776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801377c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801377e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013780:	f000 fca0 	bl	80140c4 <tcp_pcb_purge>
      if (prev != NULL) {
 8013784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013786:	2b00      	cmp	r3, #0
 8013788:	d010      	beq.n	80137ac <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801378a:	4b4f      	ldr	r3, [pc, #316]	@ (80138c8 <tcp_slowtmr+0x594>)
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013790:	429a      	cmp	r2, r3
 8013792:	d106      	bne.n	80137a2 <tcp_slowtmr+0x46e>
 8013794:	4b4d      	ldr	r3, [pc, #308]	@ (80138cc <tcp_slowtmr+0x598>)
 8013796:	f240 526d 	movw	r2, #1389	@ 0x56d
 801379a:	494d      	ldr	r1, [pc, #308]	@ (80138d0 <tcp_slowtmr+0x59c>)
 801379c:	484d      	ldr	r0, [pc, #308]	@ (80138d4 <tcp_slowtmr+0x5a0>)
 801379e:	f008 fe7d 	bl	801c49c <iprintf>
        prev->next = pcb->next;
 80137a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137a4:	68da      	ldr	r2, [r3, #12]
 80137a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137a8:	60da      	str	r2, [r3, #12]
 80137aa:	e00f      	b.n	80137cc <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80137ac:	4b46      	ldr	r3, [pc, #280]	@ (80138c8 <tcp_slowtmr+0x594>)
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80137b2:	429a      	cmp	r2, r3
 80137b4:	d006      	beq.n	80137c4 <tcp_slowtmr+0x490>
 80137b6:	4b45      	ldr	r3, [pc, #276]	@ (80138cc <tcp_slowtmr+0x598>)
 80137b8:	f240 5271 	movw	r2, #1393	@ 0x571
 80137bc:	4946      	ldr	r1, [pc, #280]	@ (80138d8 <tcp_slowtmr+0x5a4>)
 80137be:	4845      	ldr	r0, [pc, #276]	@ (80138d4 <tcp_slowtmr+0x5a0>)
 80137c0:	f008 fe6c 	bl	801c49c <iprintf>
        tcp_active_pcbs = pcb->next;
 80137c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137c6:	68db      	ldr	r3, [r3, #12]
 80137c8:	4a3f      	ldr	r2, [pc, #252]	@ (80138c8 <tcp_slowtmr+0x594>)
 80137ca:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80137cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d013      	beq.n	80137fc <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80137d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137d6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80137d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137da:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80137dc:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80137de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137e0:	3304      	adds	r3, #4
 80137e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80137e4:	8ad2      	ldrh	r2, [r2, #22]
 80137e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80137e8:	8b09      	ldrh	r1, [r1, #24]
 80137ea:	9102      	str	r1, [sp, #8]
 80137ec:	9201      	str	r2, [sp, #4]
 80137ee:	9300      	str	r3, [sp, #0]
 80137f0:	462b      	mov	r3, r5
 80137f2:	4622      	mov	r2, r4
 80137f4:	4601      	mov	r1, r0
 80137f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80137f8:	f004 fe7e 	bl	80184f8 <tcp_rst>
      err_arg = pcb->callback_arg;
 80137fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137fe:	691b      	ldr	r3, [r3, #16]
 8013800:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8013802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013804:	7d1b      	ldrb	r3, [r3, #20]
 8013806:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8013808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801380a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801380c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801380e:	68db      	ldr	r3, [r3, #12]
 8013810:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8013812:	6838      	ldr	r0, [r7, #0]
 8013814:	f7ff f836 	bl	8012884 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8013818:	4b30      	ldr	r3, [pc, #192]	@ (80138dc <tcp_slowtmr+0x5a8>)
 801381a:	2200      	movs	r2, #0
 801381c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d004      	beq.n	801382e <tcp_slowtmr+0x4fa>
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	f06f 010c 	mvn.w	r1, #12
 801382a:	68b8      	ldr	r0, [r7, #8]
 801382c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801382e:	4b2b      	ldr	r3, [pc, #172]	@ (80138dc <tcp_slowtmr+0x5a8>)
 8013830:	781b      	ldrb	r3, [r3, #0]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d037      	beq.n	80138a6 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8013836:	e590      	b.n	801335a <tcp_slowtmr+0x26>
      prev = pcb;
 8013838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801383a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801383c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801383e:	68db      	ldr	r3, [r3, #12]
 8013840:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8013842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013844:	7f1b      	ldrb	r3, [r3, #28]
 8013846:	3301      	adds	r3, #1
 8013848:	b2da      	uxtb	r2, r3
 801384a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801384c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801384e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013850:	7f1a      	ldrb	r2, [r3, #28]
 8013852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013854:	7f5b      	ldrb	r3, [r3, #29]
 8013856:	429a      	cmp	r2, r3
 8013858:	d325      	bcc.n	80138a6 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 801385a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801385c:	2200      	movs	r2, #0
 801385e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8013860:	4b1e      	ldr	r3, [pc, #120]	@ (80138dc <tcp_slowtmr+0x5a8>)
 8013862:	2200      	movs	r2, #0
 8013864:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8013866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801386c:	2b00      	cmp	r3, #0
 801386e:	d00b      	beq.n	8013888 <tcp_slowtmr+0x554>
 8013870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013872:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013876:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013878:	6912      	ldr	r2, [r2, #16]
 801387a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801387c:	4610      	mov	r0, r2
 801387e:	4798      	blx	r3
 8013880:	4603      	mov	r3, r0
 8013882:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8013886:	e002      	b.n	801388e <tcp_slowtmr+0x55a>
 8013888:	2300      	movs	r3, #0
 801388a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801388e:	4b13      	ldr	r3, [pc, #76]	@ (80138dc <tcp_slowtmr+0x5a8>)
 8013890:	781b      	ldrb	r3, [r3, #0]
 8013892:	2b00      	cmp	r3, #0
 8013894:	f47f ad60 	bne.w	8013358 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8013898:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801389c:	2b00      	cmp	r3, #0
 801389e:	d102      	bne.n	80138a6 <tcp_slowtmr+0x572>
          tcp_output(prev);
 80138a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80138a2:	f004 f875 	bl	8017990 <tcp_output>
  while (pcb != NULL) {
 80138a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	f47f ad5c 	bne.w	8013366 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80138ae:	2300      	movs	r3, #0
 80138b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80138b2:	4b0b      	ldr	r3, [pc, #44]	@ (80138e0 <tcp_slowtmr+0x5ac>)
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80138b8:	e067      	b.n	801398a <tcp_slowtmr+0x656>
 80138ba:	bf00      	nop
 80138bc:	2000c8cc 	.word	0x2000c8cc
 80138c0:	10624dd3 	.word	0x10624dd3
 80138c4:	000124f8 	.word	0x000124f8
 80138c8:	2000c8d8 	.word	0x2000c8d8
 80138cc:	0801fd78 	.word	0x0801fd78
 80138d0:	080201b0 	.word	0x080201b0
 80138d4:	0801fdbc 	.word	0x0801fdbc
 80138d8:	080201dc 	.word	0x080201dc
 80138dc:	2000c8e0 	.word	0x2000c8e0
 80138e0:	2000c8dc 	.word	0x2000c8dc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80138e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138e6:	7d1b      	ldrb	r3, [r3, #20]
 80138e8:	2b0a      	cmp	r3, #10
 80138ea:	d006      	beq.n	80138fa <tcp_slowtmr+0x5c6>
 80138ec:	4b2b      	ldr	r3, [pc, #172]	@ (801399c <tcp_slowtmr+0x668>)
 80138ee:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80138f2:	492b      	ldr	r1, [pc, #172]	@ (80139a0 <tcp_slowtmr+0x66c>)
 80138f4:	482b      	ldr	r0, [pc, #172]	@ (80139a4 <tcp_slowtmr+0x670>)
 80138f6:	f008 fdd1 	bl	801c49c <iprintf>
    pcb_remove = 0;
 80138fa:	2300      	movs	r3, #0
 80138fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013900:	4b29      	ldr	r3, [pc, #164]	@ (80139a8 <tcp_slowtmr+0x674>)
 8013902:	681a      	ldr	r2, [r3, #0]
 8013904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013906:	6a1b      	ldr	r3, [r3, #32]
 8013908:	1ad3      	subs	r3, r2, r3
 801390a:	2bf0      	cmp	r3, #240	@ 0xf0
 801390c:	d904      	bls.n	8013918 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801390e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013912:	3301      	adds	r3, #1
 8013914:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013918:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801391c:	2b00      	cmp	r3, #0
 801391e:	d02f      	beq.n	8013980 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8013920:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013922:	f000 fbcf 	bl	80140c4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8013926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013928:	2b00      	cmp	r3, #0
 801392a:	d010      	beq.n	801394e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801392c:	4b1f      	ldr	r3, [pc, #124]	@ (80139ac <tcp_slowtmr+0x678>)
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013932:	429a      	cmp	r2, r3
 8013934:	d106      	bne.n	8013944 <tcp_slowtmr+0x610>
 8013936:	4b19      	ldr	r3, [pc, #100]	@ (801399c <tcp_slowtmr+0x668>)
 8013938:	f240 52af 	movw	r2, #1455	@ 0x5af
 801393c:	491c      	ldr	r1, [pc, #112]	@ (80139b0 <tcp_slowtmr+0x67c>)
 801393e:	4819      	ldr	r0, [pc, #100]	@ (80139a4 <tcp_slowtmr+0x670>)
 8013940:	f008 fdac 	bl	801c49c <iprintf>
        prev->next = pcb->next;
 8013944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013946:	68da      	ldr	r2, [r3, #12]
 8013948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801394a:	60da      	str	r2, [r3, #12]
 801394c:	e00f      	b.n	801396e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801394e:	4b17      	ldr	r3, [pc, #92]	@ (80139ac <tcp_slowtmr+0x678>)
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013954:	429a      	cmp	r2, r3
 8013956:	d006      	beq.n	8013966 <tcp_slowtmr+0x632>
 8013958:	4b10      	ldr	r3, [pc, #64]	@ (801399c <tcp_slowtmr+0x668>)
 801395a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801395e:	4915      	ldr	r1, [pc, #84]	@ (80139b4 <tcp_slowtmr+0x680>)
 8013960:	4810      	ldr	r0, [pc, #64]	@ (80139a4 <tcp_slowtmr+0x670>)
 8013962:	f008 fd9b 	bl	801c49c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8013966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013968:	68db      	ldr	r3, [r3, #12]
 801396a:	4a10      	ldr	r2, [pc, #64]	@ (80139ac <tcp_slowtmr+0x678>)
 801396c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801396e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013970:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8013972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013974:	68db      	ldr	r3, [r3, #12]
 8013976:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8013978:	69f8      	ldr	r0, [r7, #28]
 801397a:	f7fe ff83 	bl	8012884 <tcp_free>
 801397e:	e004      	b.n	801398a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8013980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013982:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013986:	68db      	ldr	r3, [r3, #12]
 8013988:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801398a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801398c:	2b00      	cmp	r3, #0
 801398e:	d1a9      	bne.n	80138e4 <tcp_slowtmr+0x5b0>
    }
  }
}
 8013990:	bf00      	nop
 8013992:	bf00      	nop
 8013994:	3730      	adds	r7, #48	@ 0x30
 8013996:	46bd      	mov	sp, r7
 8013998:	bdb0      	pop	{r4, r5, r7, pc}
 801399a:	bf00      	nop
 801399c:	0801fd78 	.word	0x0801fd78
 80139a0:	08020208 	.word	0x08020208
 80139a4:	0801fdbc 	.word	0x0801fdbc
 80139a8:	2000c8cc 	.word	0x2000c8cc
 80139ac:	2000c8dc 	.word	0x2000c8dc
 80139b0:	08020238 	.word	0x08020238
 80139b4:	08020260 	.word	0x08020260

080139b8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b082      	sub	sp, #8
 80139bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80139be:	4b2d      	ldr	r3, [pc, #180]	@ (8013a74 <tcp_fasttmr+0xbc>)
 80139c0:	781b      	ldrb	r3, [r3, #0]
 80139c2:	3301      	adds	r3, #1
 80139c4:	b2da      	uxtb	r2, r3
 80139c6:	4b2b      	ldr	r3, [pc, #172]	@ (8013a74 <tcp_fasttmr+0xbc>)
 80139c8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80139ca:	4b2b      	ldr	r3, [pc, #172]	@ (8013a78 <tcp_fasttmr+0xc0>)
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80139d0:	e048      	b.n	8013a64 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	7f9a      	ldrb	r2, [r3, #30]
 80139d6:	4b27      	ldr	r3, [pc, #156]	@ (8013a74 <tcp_fasttmr+0xbc>)
 80139d8:	781b      	ldrb	r3, [r3, #0]
 80139da:	429a      	cmp	r2, r3
 80139dc:	d03f      	beq.n	8013a5e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80139de:	4b25      	ldr	r3, [pc, #148]	@ (8013a74 <tcp_fasttmr+0xbc>)
 80139e0:	781a      	ldrb	r2, [r3, #0]
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	8b5b      	ldrh	r3, [r3, #26]
 80139ea:	f003 0301 	and.w	r3, r3, #1
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d010      	beq.n	8013a14 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	8b5b      	ldrh	r3, [r3, #26]
 80139f6:	f043 0302 	orr.w	r3, r3, #2
 80139fa:	b29a      	uxth	r2, r3
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8013a00:	6878      	ldr	r0, [r7, #4]
 8013a02:	f003 ffc5 	bl	8017990 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	8b5b      	ldrh	r3, [r3, #26]
 8013a0a:	f023 0303 	bic.w	r3, r3, #3
 8013a0e:	b29a      	uxth	r2, r3
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	8b5b      	ldrh	r3, [r3, #26]
 8013a18:	f003 0308 	and.w	r3, r3, #8
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d009      	beq.n	8013a34 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	8b5b      	ldrh	r3, [r3, #26]
 8013a24:	f023 0308 	bic.w	r3, r3, #8
 8013a28:	b29a      	uxth	r2, r3
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8013a2e:	6878      	ldr	r0, [r7, #4]
 8013a30:	f7ff f8bc 	bl	8012bac <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	68db      	ldr	r3, [r3, #12]
 8013a38:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d00a      	beq.n	8013a58 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8013a42:	4b0e      	ldr	r3, [pc, #56]	@ (8013a7c <tcp_fasttmr+0xc4>)
 8013a44:	2200      	movs	r2, #0
 8013a46:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013a48:	6878      	ldr	r0, [r7, #4]
 8013a4a:	f000 f819 	bl	8013a80 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8013a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8013a7c <tcp_fasttmr+0xc4>)
 8013a50:	781b      	ldrb	r3, [r3, #0]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d000      	beq.n	8013a58 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8013a56:	e7b8      	b.n	80139ca <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013a58:	683b      	ldr	r3, [r7, #0]
 8013a5a:	607b      	str	r3, [r7, #4]
 8013a5c:	e002      	b.n	8013a64 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	68db      	ldr	r3, [r3, #12]
 8013a62:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d1b3      	bne.n	80139d2 <tcp_fasttmr+0x1a>
    }
  }
}
 8013a6a:	bf00      	nop
 8013a6c:	bf00      	nop
 8013a6e:	3708      	adds	r7, #8
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bd80      	pop	{r7, pc}
 8013a74:	2000c8e2 	.word	0x2000c8e2
 8013a78:	2000c8d8 	.word	0x2000c8d8
 8013a7c:	2000c8e0 	.word	0x2000c8e0

08013a80 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013a80:	b590      	push	{r4, r7, lr}
 8013a82:	b085      	sub	sp, #20
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d109      	bne.n	8013aa2 <tcp_process_refused_data+0x22>
 8013a8e:	4b37      	ldr	r3, [pc, #220]	@ (8013b6c <tcp_process_refused_data+0xec>)
 8013a90:	f240 6209 	movw	r2, #1545	@ 0x609
 8013a94:	4936      	ldr	r1, [pc, #216]	@ (8013b70 <tcp_process_refused_data+0xf0>)
 8013a96:	4837      	ldr	r0, [pc, #220]	@ (8013b74 <tcp_process_refused_data+0xf4>)
 8013a98:	f008 fd00 	bl	801c49c <iprintf>
 8013a9c:	f06f 030f 	mvn.w	r3, #15
 8013aa0:	e060      	b.n	8013b64 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013aa6:	7b5b      	ldrb	r3, [r3, #13]
 8013aa8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013aae:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d00b      	beq.n	8013ad8 <tcp_process_refused_data+0x58>
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	6918      	ldr	r0, [r3, #16]
 8013aca:	2300      	movs	r3, #0
 8013acc:	68ba      	ldr	r2, [r7, #8]
 8013ace:	6879      	ldr	r1, [r7, #4]
 8013ad0:	47a0      	blx	r4
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	73fb      	strb	r3, [r7, #15]
 8013ad6:	e007      	b.n	8013ae8 <tcp_process_refused_data+0x68>
 8013ad8:	2300      	movs	r3, #0
 8013ada:	68ba      	ldr	r2, [r7, #8]
 8013adc:	6879      	ldr	r1, [r7, #4]
 8013ade:	2000      	movs	r0, #0
 8013ae0:	f000 f8c2 	bl	8013c68 <tcp_recv_null>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d12a      	bne.n	8013b46 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8013af0:	7bbb      	ldrb	r3, [r7, #14]
 8013af2:	f003 0320 	and.w	r3, r3, #32
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d033      	beq.n	8013b62 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013afe:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013b02:	d005      	beq.n	8013b10 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013b08:	3301      	adds	r3, #1
 8013b0a:	b29a      	uxth	r2, r3
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d00b      	beq.n	8013b32 <tcp_process_refused_data+0xb2>
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	6918      	ldr	r0, [r3, #16]
 8013b24:	2300      	movs	r3, #0
 8013b26:	2200      	movs	r2, #0
 8013b28:	6879      	ldr	r1, [r7, #4]
 8013b2a:	47a0      	blx	r4
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	73fb      	strb	r3, [r7, #15]
 8013b30:	e001      	b.n	8013b36 <tcp_process_refused_data+0xb6>
 8013b32:	2300      	movs	r3, #0
 8013b34:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8013b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b3a:	f113 0f0d 	cmn.w	r3, #13
 8013b3e:	d110      	bne.n	8013b62 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8013b40:	f06f 030c 	mvn.w	r3, #12
 8013b44:	e00e      	b.n	8013b64 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8013b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b4a:	f113 0f0d 	cmn.w	r3, #13
 8013b4e:	d102      	bne.n	8013b56 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8013b50:	f06f 030c 	mvn.w	r3, #12
 8013b54:	e006      	b.n	8013b64 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	68ba      	ldr	r2, [r7, #8]
 8013b5a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8013b5c:	f06f 0304 	mvn.w	r3, #4
 8013b60:	e000      	b.n	8013b64 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8013b62:	2300      	movs	r3, #0
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	3714      	adds	r7, #20
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd90      	pop	{r4, r7, pc}
 8013b6c:	0801fd78 	.word	0x0801fd78
 8013b70:	08020288 	.word	0x08020288
 8013b74:	0801fdbc 	.word	0x0801fdbc

08013b78 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	b084      	sub	sp, #16
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013b80:	e007      	b.n	8013b92 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013b88:	6878      	ldr	r0, [r7, #4]
 8013b8a:	f000 f80a 	bl	8013ba2 <tcp_seg_free>
    seg = next;
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d1f4      	bne.n	8013b82 <tcp_segs_free+0xa>
  }
}
 8013b98:	bf00      	nop
 8013b9a:	bf00      	nop
 8013b9c:	3710      	adds	r7, #16
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bd80      	pop	{r7, pc}

08013ba2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8013ba2:	b580      	push	{r7, lr}
 8013ba4:	b082      	sub	sp, #8
 8013ba6:	af00      	add	r7, sp, #0
 8013ba8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d00c      	beq.n	8013bca <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	685b      	ldr	r3, [r3, #4]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d004      	beq.n	8013bc2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	685b      	ldr	r3, [r3, #4]
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f7fe fbb5 	bl	801232c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8013bc2:	6879      	ldr	r1, [r7, #4]
 8013bc4:	2003      	movs	r0, #3
 8013bc6:	f7fd fd3f 	bl	8011648 <memp_free>
  }
}
 8013bca:	bf00      	nop
 8013bcc:	3708      	adds	r7, #8
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bd80      	pop	{r7, pc}
	...

08013bd4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b082      	sub	sp, #8
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
 8013bdc:	460b      	mov	r3, r1
 8013bde:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d107      	bne.n	8013bf6 <tcp_setprio+0x22>
 8013be6:	4b07      	ldr	r3, [pc, #28]	@ (8013c04 <tcp_setprio+0x30>)
 8013be8:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 8013bec:	4906      	ldr	r1, [pc, #24]	@ (8013c08 <tcp_setprio+0x34>)
 8013bee:	4807      	ldr	r0, [pc, #28]	@ (8013c0c <tcp_setprio+0x38>)
 8013bf0:	f008 fc54 	bl	801c49c <iprintf>
 8013bf4:	e002      	b.n	8013bfc <tcp_setprio+0x28>

  pcb->prio = prio;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	78fa      	ldrb	r2, [r7, #3]
 8013bfa:	755a      	strb	r2, [r3, #21]
}
 8013bfc:	3708      	adds	r7, #8
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}
 8013c02:	bf00      	nop
 8013c04:	0801fd78 	.word	0x0801fd78
 8013c08:	080202b0 	.word	0x080202b0
 8013c0c:	0801fdbc 	.word	0x0801fdbc

08013c10 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b084      	sub	sp, #16
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d106      	bne.n	8013c2c <tcp_seg_copy+0x1c>
 8013c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8013c5c <tcp_seg_copy+0x4c>)
 8013c20:	f240 6282 	movw	r2, #1666	@ 0x682
 8013c24:	490e      	ldr	r1, [pc, #56]	@ (8013c60 <tcp_seg_copy+0x50>)
 8013c26:	480f      	ldr	r0, [pc, #60]	@ (8013c64 <tcp_seg_copy+0x54>)
 8013c28:	f008 fc38 	bl	801c49c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013c2c:	2003      	movs	r0, #3
 8013c2e:	f7fd fc95 	bl	801155c <memp_malloc>
 8013c32:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d101      	bne.n	8013c3e <tcp_seg_copy+0x2e>
    return NULL;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	e00a      	b.n	8013c54 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8013c3e:	2210      	movs	r2, #16
 8013c40:	6879      	ldr	r1, [r7, #4]
 8013c42:	68f8      	ldr	r0, [r7, #12]
 8013c44:	f008 fddd 	bl	801c802 <memcpy>
  pbuf_ref(cseg->p);
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	685b      	ldr	r3, [r3, #4]
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f7fe fc13 	bl	8012478 <pbuf_ref>
  return cseg;
 8013c52:	68fb      	ldr	r3, [r7, #12]
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	3710      	adds	r7, #16
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd80      	pop	{r7, pc}
 8013c5c:	0801fd78 	.word	0x0801fd78
 8013c60:	080202cc 	.word	0x080202cc
 8013c64:	0801fdbc 	.word	0x0801fdbc

08013c68 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b084      	sub	sp, #16
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	60f8      	str	r0, [r7, #12]
 8013c70:	60b9      	str	r1, [r7, #8]
 8013c72:	607a      	str	r2, [r7, #4]
 8013c74:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8013c76:	68bb      	ldr	r3, [r7, #8]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d109      	bne.n	8013c90 <tcp_recv_null+0x28>
 8013c7c:	4b12      	ldr	r3, [pc, #72]	@ (8013cc8 <tcp_recv_null+0x60>)
 8013c7e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013c82:	4912      	ldr	r1, [pc, #72]	@ (8013ccc <tcp_recv_null+0x64>)
 8013c84:	4812      	ldr	r0, [pc, #72]	@ (8013cd0 <tcp_recv_null+0x68>)
 8013c86:	f008 fc09 	bl	801c49c <iprintf>
 8013c8a:	f06f 030f 	mvn.w	r3, #15
 8013c8e:	e016      	b.n	8013cbe <tcp_recv_null+0x56>

  if (p != NULL) {
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d009      	beq.n	8013caa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	891b      	ldrh	r3, [r3, #8]
 8013c9a:	4619      	mov	r1, r3
 8013c9c:	68b8      	ldr	r0, [r7, #8]
 8013c9e:	f7ff fab3 	bl	8013208 <tcp_recved>
    pbuf_free(p);
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f7fe fb42 	bl	801232c <pbuf_free>
 8013ca8:	e008      	b.n	8013cbc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8013caa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d104      	bne.n	8013cbc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013cb2:	68b8      	ldr	r0, [r7, #8]
 8013cb4:	f7fe ffe4 	bl	8012c80 <tcp_close>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	e000      	b.n	8013cbe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013cbc:	2300      	movs	r3, #0
}
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	3710      	adds	r7, #16
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bd80      	pop	{r7, pc}
 8013cc6:	bf00      	nop
 8013cc8:	0801fd78 	.word	0x0801fd78
 8013ccc:	080202e8 	.word	0x080202e8
 8013cd0:	0801fdbc 	.word	0x0801fdbc

08013cd4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b086      	sub	sp, #24
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	4603      	mov	r3, r0
 8013cdc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	db01      	blt.n	8013cea <tcp_kill_prio+0x16>
 8013ce6:	79fb      	ldrb	r3, [r7, #7]
 8013ce8:	e000      	b.n	8013cec <tcp_kill_prio+0x18>
 8013cea:	237f      	movs	r3, #127	@ 0x7f
 8013cec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013cee:	7afb      	ldrb	r3, [r7, #11]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d034      	beq.n	8013d5e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013cf4:	7afb      	ldrb	r3, [r7, #11]
 8013cf6:	3b01      	subs	r3, #1
 8013cf8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013cfe:	2300      	movs	r3, #0
 8013d00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d02:	4b19      	ldr	r3, [pc, #100]	@ (8013d68 <tcp_kill_prio+0x94>)
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	617b      	str	r3, [r7, #20]
 8013d08:	e01f      	b.n	8013d4a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013d0a:	697b      	ldr	r3, [r7, #20]
 8013d0c:	7d5b      	ldrb	r3, [r3, #21]
 8013d0e:	7afa      	ldrb	r2, [r7, #11]
 8013d10:	429a      	cmp	r2, r3
 8013d12:	d80c      	bhi.n	8013d2e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013d14:	697b      	ldr	r3, [r7, #20]
 8013d16:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013d18:	7afa      	ldrb	r2, [r7, #11]
 8013d1a:	429a      	cmp	r2, r3
 8013d1c:	d112      	bne.n	8013d44 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013d1e:	4b13      	ldr	r3, [pc, #76]	@ (8013d6c <tcp_kill_prio+0x98>)
 8013d20:	681a      	ldr	r2, [r3, #0]
 8013d22:	697b      	ldr	r3, [r7, #20]
 8013d24:	6a1b      	ldr	r3, [r3, #32]
 8013d26:	1ad3      	subs	r3, r2, r3
 8013d28:	68fa      	ldr	r2, [r7, #12]
 8013d2a:	429a      	cmp	r2, r3
 8013d2c:	d80a      	bhi.n	8013d44 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8013d6c <tcp_kill_prio+0x98>)
 8013d30:	681a      	ldr	r2, [r3, #0]
 8013d32:	697b      	ldr	r3, [r7, #20]
 8013d34:	6a1b      	ldr	r3, [r3, #32]
 8013d36:	1ad3      	subs	r3, r2, r3
 8013d38:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8013d3a:	697b      	ldr	r3, [r7, #20]
 8013d3c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8013d3e:	697b      	ldr	r3, [r7, #20]
 8013d40:	7d5b      	ldrb	r3, [r3, #21]
 8013d42:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d44:	697b      	ldr	r3, [r7, #20]
 8013d46:	68db      	ldr	r3, [r3, #12]
 8013d48:	617b      	str	r3, [r7, #20]
 8013d4a:	697b      	ldr	r3, [r7, #20]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d1dc      	bne.n	8013d0a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8013d50:	693b      	ldr	r3, [r7, #16]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d004      	beq.n	8013d60 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013d56:	6938      	ldr	r0, [r7, #16]
 8013d58:	f7ff f87c 	bl	8012e54 <tcp_abort>
 8013d5c:	e000      	b.n	8013d60 <tcp_kill_prio+0x8c>
    return;
 8013d5e:	bf00      	nop
  }
}
 8013d60:	3718      	adds	r7, #24
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bd80      	pop	{r7, pc}
 8013d66:	bf00      	nop
 8013d68:	2000c8d8 	.word	0x2000c8d8
 8013d6c:	2000c8cc 	.word	0x2000c8cc

08013d70 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b086      	sub	sp, #24
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	4603      	mov	r3, r0
 8013d78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8013d7a:	79fb      	ldrb	r3, [r7, #7]
 8013d7c:	2b08      	cmp	r3, #8
 8013d7e:	d009      	beq.n	8013d94 <tcp_kill_state+0x24>
 8013d80:	79fb      	ldrb	r3, [r7, #7]
 8013d82:	2b09      	cmp	r3, #9
 8013d84:	d006      	beq.n	8013d94 <tcp_kill_state+0x24>
 8013d86:	4b1a      	ldr	r3, [pc, #104]	@ (8013df0 <tcp_kill_state+0x80>)
 8013d88:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8013d8c:	4919      	ldr	r1, [pc, #100]	@ (8013df4 <tcp_kill_state+0x84>)
 8013d8e:	481a      	ldr	r0, [pc, #104]	@ (8013df8 <tcp_kill_state+0x88>)
 8013d90:	f008 fb84 	bl	801c49c <iprintf>

  inactivity = 0;
 8013d94:	2300      	movs	r3, #0
 8013d96:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013d98:	2300      	movs	r3, #0
 8013d9a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d9c:	4b17      	ldr	r3, [pc, #92]	@ (8013dfc <tcp_kill_state+0x8c>)
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	617b      	str	r3, [r7, #20]
 8013da2:	e017      	b.n	8013dd4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013da4:	697b      	ldr	r3, [r7, #20]
 8013da6:	7d1b      	ldrb	r3, [r3, #20]
 8013da8:	79fa      	ldrb	r2, [r7, #7]
 8013daa:	429a      	cmp	r2, r3
 8013dac:	d10f      	bne.n	8013dce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013dae:	4b14      	ldr	r3, [pc, #80]	@ (8013e00 <tcp_kill_state+0x90>)
 8013db0:	681a      	ldr	r2, [r3, #0]
 8013db2:	697b      	ldr	r3, [r7, #20]
 8013db4:	6a1b      	ldr	r3, [r3, #32]
 8013db6:	1ad3      	subs	r3, r2, r3
 8013db8:	68fa      	ldr	r2, [r7, #12]
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d807      	bhi.n	8013dce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013dbe:	4b10      	ldr	r3, [pc, #64]	@ (8013e00 <tcp_kill_state+0x90>)
 8013dc0:	681a      	ldr	r2, [r3, #0]
 8013dc2:	697b      	ldr	r3, [r7, #20]
 8013dc4:	6a1b      	ldr	r3, [r3, #32]
 8013dc6:	1ad3      	subs	r3, r2, r3
 8013dc8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8013dca:	697b      	ldr	r3, [r7, #20]
 8013dcc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013dce:	697b      	ldr	r3, [r7, #20]
 8013dd0:	68db      	ldr	r3, [r3, #12]
 8013dd2:	617b      	str	r3, [r7, #20]
 8013dd4:	697b      	ldr	r3, [r7, #20]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d1e4      	bne.n	8013da4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8013dda:	693b      	ldr	r3, [r7, #16]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d003      	beq.n	8013de8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013de0:	2100      	movs	r1, #0
 8013de2:	6938      	ldr	r0, [r7, #16]
 8013de4:	f7fe ff78 	bl	8012cd8 <tcp_abandon>
  }
}
 8013de8:	bf00      	nop
 8013dea:	3718      	adds	r7, #24
 8013dec:	46bd      	mov	sp, r7
 8013dee:	bd80      	pop	{r7, pc}
 8013df0:	0801fd78 	.word	0x0801fd78
 8013df4:	08020304 	.word	0x08020304
 8013df8:	0801fdbc 	.word	0x0801fdbc
 8013dfc:	2000c8d8 	.word	0x2000c8d8
 8013e00:	2000c8cc 	.word	0x2000c8cc

08013e04 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b084      	sub	sp, #16
 8013e08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013e0e:	2300      	movs	r3, #0
 8013e10:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e12:	4b12      	ldr	r3, [pc, #72]	@ (8013e5c <tcp_kill_timewait+0x58>)
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	60fb      	str	r3, [r7, #12]
 8013e18:	e012      	b.n	8013e40 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013e1a:	4b11      	ldr	r3, [pc, #68]	@ (8013e60 <tcp_kill_timewait+0x5c>)
 8013e1c:	681a      	ldr	r2, [r3, #0]
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	6a1b      	ldr	r3, [r3, #32]
 8013e22:	1ad3      	subs	r3, r2, r3
 8013e24:	687a      	ldr	r2, [r7, #4]
 8013e26:	429a      	cmp	r2, r3
 8013e28:	d807      	bhi.n	8013e3a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8013e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8013e60 <tcp_kill_timewait+0x5c>)
 8013e2c:	681a      	ldr	r2, [r3, #0]
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	6a1b      	ldr	r3, [r3, #32]
 8013e32:	1ad3      	subs	r3, r2, r3
 8013e34:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	68db      	ldr	r3, [r3, #12]
 8013e3e:	60fb      	str	r3, [r7, #12]
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d1e9      	bne.n	8013e1a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8013e46:	68bb      	ldr	r3, [r7, #8]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d002      	beq.n	8013e52 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013e4c:	68b8      	ldr	r0, [r7, #8]
 8013e4e:	f7ff f801 	bl	8012e54 <tcp_abort>
  }
}
 8013e52:	bf00      	nop
 8013e54:	3710      	adds	r7, #16
 8013e56:	46bd      	mov	sp, r7
 8013e58:	bd80      	pop	{r7, pc}
 8013e5a:	bf00      	nop
 8013e5c:	2000c8dc 	.word	0x2000c8dc
 8013e60:	2000c8cc 	.word	0x2000c8cc

08013e64 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b082      	sub	sp, #8
 8013e68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8013e6a:	4b10      	ldr	r3, [pc, #64]	@ (8013eac <tcp_handle_closepend+0x48>)
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013e70:	e014      	b.n	8013e9c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	68db      	ldr	r3, [r3, #12]
 8013e76:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	8b5b      	ldrh	r3, [r3, #26]
 8013e7c:	f003 0308 	and.w	r3, r3, #8
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d009      	beq.n	8013e98 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	8b5b      	ldrh	r3, [r3, #26]
 8013e88:	f023 0308 	bic.w	r3, r3, #8
 8013e8c:	b29a      	uxth	r2, r3
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013e92:	6878      	ldr	r0, [r7, #4]
 8013e94:	f7fe fe8a 	bl	8012bac <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013e98:	683b      	ldr	r3, [r7, #0]
 8013e9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d1e7      	bne.n	8013e72 <tcp_handle_closepend+0xe>
  }
}
 8013ea2:	bf00      	nop
 8013ea4:	bf00      	nop
 8013ea6:	3708      	adds	r7, #8
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd80      	pop	{r7, pc}
 8013eac:	2000c8d8 	.word	0x2000c8d8

08013eb0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b084      	sub	sp, #16
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013eba:	2001      	movs	r0, #1
 8013ebc:	f7fd fb4e 	bl	801155c <memp_malloc>
 8013ec0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d126      	bne.n	8013f16 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013ec8:	f7ff ffcc 	bl	8013e64 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013ecc:	f7ff ff9a 	bl	8013e04 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013ed0:	2001      	movs	r0, #1
 8013ed2:	f7fd fb43 	bl	801155c <memp_malloc>
 8013ed6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d11b      	bne.n	8013f16 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013ede:	2009      	movs	r0, #9
 8013ee0:	f7ff ff46 	bl	8013d70 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013ee4:	2001      	movs	r0, #1
 8013ee6:	f7fd fb39 	bl	801155c <memp_malloc>
 8013eea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d111      	bne.n	8013f16 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013ef2:	2008      	movs	r0, #8
 8013ef4:	f7ff ff3c 	bl	8013d70 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013ef8:	2001      	movs	r0, #1
 8013efa:	f7fd fb2f 	bl	801155c <memp_malloc>
 8013efe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d107      	bne.n	8013f16 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013f06:	79fb      	ldrb	r3, [r7, #7]
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f7ff fee3 	bl	8013cd4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013f0e:	2001      	movs	r0, #1
 8013f10:	f7fd fb24 	bl	801155c <memp_malloc>
 8013f14:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d03f      	beq.n	8013f9c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013f1c:	229c      	movs	r2, #156	@ 0x9c
 8013f1e:	2100      	movs	r1, #0
 8013f20:	68f8      	ldr	r0, [r7, #12]
 8013f22:	f008 fb70 	bl	801c606 <memset>
    pcb->prio = prio;
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	79fa      	ldrb	r2, [r7, #7]
 8013f2a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8013f32:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8013f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	22ff      	movs	r2, #255	@ 0xff
 8013f4a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8013f52:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	2206      	movs	r2, #6
 8013f58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	2206      	movs	r2, #6
 8013f60:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013f68:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	2201      	movs	r2, #1
 8013f6e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8013f72:	4b0d      	ldr	r3, [pc, #52]	@ (8013fa8 <tcp_alloc+0xf8>)
 8013f74:	681a      	ldr	r2, [r3, #0]
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8013f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8013fac <tcp_alloc+0xfc>)
 8013f7c:	781a      	ldrb	r2, [r3, #0]
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8013f88:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	4a08      	ldr	r2, [pc, #32]	@ (8013fb0 <tcp_alloc+0x100>)
 8013f90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	4a07      	ldr	r2, [pc, #28]	@ (8013fb4 <tcp_alloc+0x104>)
 8013f98:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013f9c:	68fb      	ldr	r3, [r7, #12]
}
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	3710      	adds	r7, #16
 8013fa2:	46bd      	mov	sp, r7
 8013fa4:	bd80      	pop	{r7, pc}
 8013fa6:	bf00      	nop
 8013fa8:	2000c8cc 	.word	0x2000c8cc
 8013fac:	2000c8e2 	.word	0x2000c8e2
 8013fb0:	08013c69 	.word	0x08013c69
 8013fb4:	006ddd00 	.word	0x006ddd00

08013fb8 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8013fbc:	2040      	movs	r0, #64	@ 0x40
 8013fbe:	f7ff ff77 	bl	8013eb0 <tcp_alloc>
 8013fc2:	4603      	mov	r3, r0
}
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	bd80      	pop	{r7, pc}

08013fc8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b082      	sub	sp, #8
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
 8013fd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d00e      	beq.n	8013ff6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	7d1b      	ldrb	r3, [r3, #20]
 8013fdc:	2b01      	cmp	r3, #1
 8013fde:	d106      	bne.n	8013fee <tcp_recv+0x26>
 8013fe0:	4b07      	ldr	r3, [pc, #28]	@ (8014000 <tcp_recv+0x38>)
 8013fe2:	f240 72df 	movw	r2, #2015	@ 0x7df
 8013fe6:	4907      	ldr	r1, [pc, #28]	@ (8014004 <tcp_recv+0x3c>)
 8013fe8:	4807      	ldr	r0, [pc, #28]	@ (8014008 <tcp_recv+0x40>)
 8013fea:	f008 fa57 	bl	801c49c <iprintf>
    pcb->recv = recv;
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	683a      	ldr	r2, [r7, #0]
 8013ff2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8013ff6:	bf00      	nop
 8013ff8:	3708      	adds	r7, #8
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	bd80      	pop	{r7, pc}
 8013ffe:	bf00      	nop
 8014000:	0801fd78 	.word	0x0801fd78
 8014004:	08020314 	.word	0x08020314
 8014008:	0801fdbc 	.word	0x0801fdbc

0801400c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801400c:	b580      	push	{r7, lr}
 801400e:	b082      	sub	sp, #8
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
 8014014:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d00e      	beq.n	801403a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	7d1b      	ldrb	r3, [r3, #20]
 8014020:	2b01      	cmp	r3, #1
 8014022:	d106      	bne.n	8014032 <tcp_sent+0x26>
 8014024:	4b07      	ldr	r3, [pc, #28]	@ (8014044 <tcp_sent+0x38>)
 8014026:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 801402a:	4907      	ldr	r1, [pc, #28]	@ (8014048 <tcp_sent+0x3c>)
 801402c:	4807      	ldr	r0, [pc, #28]	@ (801404c <tcp_sent+0x40>)
 801402e:	f008 fa35 	bl	801c49c <iprintf>
    pcb->sent = sent;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	683a      	ldr	r2, [r7, #0]
 8014036:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 801403a:	bf00      	nop
 801403c:	3708      	adds	r7, #8
 801403e:	46bd      	mov	sp, r7
 8014040:	bd80      	pop	{r7, pc}
 8014042:	bf00      	nop
 8014044:	0801fd78 	.word	0x0801fd78
 8014048:	0802033c 	.word	0x0802033c
 801404c:	0801fdbc 	.word	0x0801fdbc

08014050 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b082      	sub	sp, #8
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
 8014058:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d00e      	beq.n	801407e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	7d1b      	ldrb	r3, [r3, #20]
 8014064:	2b01      	cmp	r3, #1
 8014066:	d106      	bne.n	8014076 <tcp_err+0x26>
 8014068:	4b07      	ldr	r3, [pc, #28]	@ (8014088 <tcp_err+0x38>)
 801406a:	f640 020d 	movw	r2, #2061	@ 0x80d
 801406e:	4907      	ldr	r1, [pc, #28]	@ (801408c <tcp_err+0x3c>)
 8014070:	4807      	ldr	r0, [pc, #28]	@ (8014090 <tcp_err+0x40>)
 8014072:	f008 fa13 	bl	801c49c <iprintf>
    pcb->errf = err;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	683a      	ldr	r2, [r7, #0]
 801407a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 801407e:	bf00      	nop
 8014080:	3708      	adds	r7, #8
 8014082:	46bd      	mov	sp, r7
 8014084:	bd80      	pop	{r7, pc}
 8014086:	bf00      	nop
 8014088:	0801fd78 	.word	0x0801fd78
 801408c:	08020364 	.word	0x08020364
 8014090:	0801fdbc 	.word	0x0801fdbc

08014094 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8014094:	b480      	push	{r7}
 8014096:	b085      	sub	sp, #20
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
 801409c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d008      	beq.n	80140b6 <tcp_accept+0x22>
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	7d1b      	ldrb	r3, [r3, #20]
 80140a8:	2b01      	cmp	r3, #1
 80140aa:	d104      	bne.n	80140b6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	683a      	ldr	r2, [r7, #0]
 80140b4:	619a      	str	r2, [r3, #24]
  }
}
 80140b6:	bf00      	nop
 80140b8:	3714      	adds	r7, #20
 80140ba:	46bd      	mov	sp, r7
 80140bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c0:	4770      	bx	lr
	...

080140c4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b082      	sub	sp, #8
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d107      	bne.n	80140e2 <tcp_pcb_purge+0x1e>
 80140d2:	4b21      	ldr	r3, [pc, #132]	@ (8014158 <tcp_pcb_purge+0x94>)
 80140d4:	f640 0251 	movw	r2, #2129	@ 0x851
 80140d8:	4920      	ldr	r1, [pc, #128]	@ (801415c <tcp_pcb_purge+0x98>)
 80140da:	4821      	ldr	r0, [pc, #132]	@ (8014160 <tcp_pcb_purge+0x9c>)
 80140dc:	f008 f9de 	bl	801c49c <iprintf>
 80140e0:	e037      	b.n	8014152 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	7d1b      	ldrb	r3, [r3, #20]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d033      	beq.n	8014152 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80140ee:	2b0a      	cmp	r3, #10
 80140f0:	d02f      	beq.n	8014152 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80140f6:	2b01      	cmp	r3, #1
 80140f8:	d02b      	beq.n	8014152 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d007      	beq.n	8014112 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014106:	4618      	mov	r0, r3
 8014108:	f7fe f910 	bl	801232c <pbuf_free>
      pcb->refused_data = NULL;
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	2200      	movs	r2, #0
 8014110:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014116:	2b00      	cmp	r3, #0
 8014118:	d002      	beq.n	8014120 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f000 f986 	bl	801442c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014126:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801412c:	4618      	mov	r0, r3
 801412e:	f7ff fd23 	bl	8013b78 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014136:	4618      	mov	r0, r3
 8014138:	f7ff fd1e 	bl	8013b78 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2200      	movs	r2, #0
 8014140:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	2200      	movs	r2, #0
 801414e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8014152:	3708      	adds	r7, #8
 8014154:	46bd      	mov	sp, r7
 8014156:	bd80      	pop	{r7, pc}
 8014158:	0801fd78 	.word	0x0801fd78
 801415c:	080203c4 	.word	0x080203c4
 8014160:	0801fdbc 	.word	0x0801fdbc

08014164 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014164:	b580      	push	{r7, lr}
 8014166:	b084      	sub	sp, #16
 8014168:	af00      	add	r7, sp, #0
 801416a:	6078      	str	r0, [r7, #4]
 801416c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d106      	bne.n	8014182 <tcp_pcb_remove+0x1e>
 8014174:	4b3e      	ldr	r3, [pc, #248]	@ (8014270 <tcp_pcb_remove+0x10c>)
 8014176:	f640 0283 	movw	r2, #2179	@ 0x883
 801417a:	493e      	ldr	r1, [pc, #248]	@ (8014274 <tcp_pcb_remove+0x110>)
 801417c:	483e      	ldr	r0, [pc, #248]	@ (8014278 <tcp_pcb_remove+0x114>)
 801417e:	f008 f98d 	bl	801c49c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d106      	bne.n	8014196 <tcp_pcb_remove+0x32>
 8014188:	4b39      	ldr	r3, [pc, #228]	@ (8014270 <tcp_pcb_remove+0x10c>)
 801418a:	f640 0284 	movw	r2, #2180	@ 0x884
 801418e:	493b      	ldr	r1, [pc, #236]	@ (801427c <tcp_pcb_remove+0x118>)
 8014190:	4839      	ldr	r0, [pc, #228]	@ (8014278 <tcp_pcb_remove+0x114>)
 8014192:	f008 f983 	bl	801c49c <iprintf>

  TCP_RMV(pcblist, pcb);
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	683a      	ldr	r2, [r7, #0]
 801419c:	429a      	cmp	r2, r3
 801419e:	d105      	bne.n	80141ac <tcp_pcb_remove+0x48>
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	68da      	ldr	r2, [r3, #12]
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	601a      	str	r2, [r3, #0]
 80141aa:	e013      	b.n	80141d4 <tcp_pcb_remove+0x70>
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	60fb      	str	r3, [r7, #12]
 80141b2:	e00c      	b.n	80141ce <tcp_pcb_remove+0x6a>
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	68db      	ldr	r3, [r3, #12]
 80141b8:	683a      	ldr	r2, [r7, #0]
 80141ba:	429a      	cmp	r2, r3
 80141bc:	d104      	bne.n	80141c8 <tcp_pcb_remove+0x64>
 80141be:	683b      	ldr	r3, [r7, #0]
 80141c0:	68da      	ldr	r2, [r3, #12]
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	60da      	str	r2, [r3, #12]
 80141c6:	e005      	b.n	80141d4 <tcp_pcb_remove+0x70>
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	68db      	ldr	r3, [r3, #12]
 80141cc:	60fb      	str	r3, [r7, #12]
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d1ef      	bne.n	80141b4 <tcp_pcb_remove+0x50>
 80141d4:	683b      	ldr	r3, [r7, #0]
 80141d6:	2200      	movs	r2, #0
 80141d8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80141da:	6838      	ldr	r0, [r7, #0]
 80141dc:	f7ff ff72 	bl	80140c4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80141e0:	683b      	ldr	r3, [r7, #0]
 80141e2:	7d1b      	ldrb	r3, [r3, #20]
 80141e4:	2b0a      	cmp	r3, #10
 80141e6:	d013      	beq.n	8014210 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80141e8:	683b      	ldr	r3, [r7, #0]
 80141ea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80141ec:	2b01      	cmp	r3, #1
 80141ee:	d00f      	beq.n	8014210 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	8b5b      	ldrh	r3, [r3, #26]
 80141f4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d009      	beq.n	8014210 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	8b5b      	ldrh	r3, [r3, #26]
 8014200:	f043 0302 	orr.w	r3, r3, #2
 8014204:	b29a      	uxth	r2, r3
 8014206:	683b      	ldr	r3, [r7, #0]
 8014208:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801420a:	6838      	ldr	r0, [r7, #0]
 801420c:	f003 fbc0 	bl	8017990 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014210:	683b      	ldr	r3, [r7, #0]
 8014212:	7d1b      	ldrb	r3, [r3, #20]
 8014214:	2b01      	cmp	r3, #1
 8014216:	d020      	beq.n	801425a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801421c:	2b00      	cmp	r3, #0
 801421e:	d006      	beq.n	801422e <tcp_pcb_remove+0xca>
 8014220:	4b13      	ldr	r3, [pc, #76]	@ (8014270 <tcp_pcb_remove+0x10c>)
 8014222:	f640 0293 	movw	r2, #2195	@ 0x893
 8014226:	4916      	ldr	r1, [pc, #88]	@ (8014280 <tcp_pcb_remove+0x11c>)
 8014228:	4813      	ldr	r0, [pc, #76]	@ (8014278 <tcp_pcb_remove+0x114>)
 801422a:	f008 f937 	bl	801c49c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801422e:	683b      	ldr	r3, [r7, #0]
 8014230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014232:	2b00      	cmp	r3, #0
 8014234:	d006      	beq.n	8014244 <tcp_pcb_remove+0xe0>
 8014236:	4b0e      	ldr	r3, [pc, #56]	@ (8014270 <tcp_pcb_remove+0x10c>)
 8014238:	f640 0294 	movw	r2, #2196	@ 0x894
 801423c:	4911      	ldr	r1, [pc, #68]	@ (8014284 <tcp_pcb_remove+0x120>)
 801423e:	480e      	ldr	r0, [pc, #56]	@ (8014278 <tcp_pcb_remove+0x114>)
 8014240:	f008 f92c 	bl	801c49c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014244:	683b      	ldr	r3, [r7, #0]
 8014246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014248:	2b00      	cmp	r3, #0
 801424a:	d006      	beq.n	801425a <tcp_pcb_remove+0xf6>
 801424c:	4b08      	ldr	r3, [pc, #32]	@ (8014270 <tcp_pcb_remove+0x10c>)
 801424e:	f640 0296 	movw	r2, #2198	@ 0x896
 8014252:	490d      	ldr	r1, [pc, #52]	@ (8014288 <tcp_pcb_remove+0x124>)
 8014254:	4808      	ldr	r0, [pc, #32]	@ (8014278 <tcp_pcb_remove+0x114>)
 8014256:	f008 f921 	bl	801c49c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801425a:	683b      	ldr	r3, [r7, #0]
 801425c:	2200      	movs	r2, #0
 801425e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014260:	683b      	ldr	r3, [r7, #0]
 8014262:	2200      	movs	r2, #0
 8014264:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014266:	bf00      	nop
 8014268:	3710      	adds	r7, #16
 801426a:	46bd      	mov	sp, r7
 801426c:	bd80      	pop	{r7, pc}
 801426e:	bf00      	nop
 8014270:	0801fd78 	.word	0x0801fd78
 8014274:	080203e0 	.word	0x080203e0
 8014278:	0801fdbc 	.word	0x0801fdbc
 801427c:	080203fc 	.word	0x080203fc
 8014280:	0802041c 	.word	0x0802041c
 8014284:	08020434 	.word	0x08020434
 8014288:	08020450 	.word	0x08020450

0801428c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b082      	sub	sp, #8
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d106      	bne.n	80142a8 <tcp_next_iss+0x1c>
 801429a:	4b0a      	ldr	r3, [pc, #40]	@ (80142c4 <tcp_next_iss+0x38>)
 801429c:	f640 02af 	movw	r2, #2223	@ 0x8af
 80142a0:	4909      	ldr	r1, [pc, #36]	@ (80142c8 <tcp_next_iss+0x3c>)
 80142a2:	480a      	ldr	r0, [pc, #40]	@ (80142cc <tcp_next_iss+0x40>)
 80142a4:	f008 f8fa 	bl	801c49c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80142a8:	4b09      	ldr	r3, [pc, #36]	@ (80142d0 <tcp_next_iss+0x44>)
 80142aa:	681a      	ldr	r2, [r3, #0]
 80142ac:	4b09      	ldr	r3, [pc, #36]	@ (80142d4 <tcp_next_iss+0x48>)
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	4413      	add	r3, r2
 80142b2:	4a07      	ldr	r2, [pc, #28]	@ (80142d0 <tcp_next_iss+0x44>)
 80142b4:	6013      	str	r3, [r2, #0]
  return iss;
 80142b6:	4b06      	ldr	r3, [pc, #24]	@ (80142d0 <tcp_next_iss+0x44>)
 80142b8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80142ba:	4618      	mov	r0, r3
 80142bc:	3708      	adds	r7, #8
 80142be:	46bd      	mov	sp, r7
 80142c0:	bd80      	pop	{r7, pc}
 80142c2:	bf00      	nop
 80142c4:	0801fd78 	.word	0x0801fd78
 80142c8:	08020468 	.word	0x08020468
 80142cc:	0801fdbc 	.word	0x0801fdbc
 80142d0:	200000a0 	.word	0x200000a0
 80142d4:	2000c8cc 	.word	0x2000c8cc

080142d8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b086      	sub	sp, #24
 80142dc:	af00      	add	r7, sp, #0
 80142de:	4603      	mov	r3, r0
 80142e0:	60b9      	str	r1, [r7, #8]
 80142e2:	607a      	str	r2, [r7, #4]
 80142e4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d106      	bne.n	80142fa <tcp_eff_send_mss_netif+0x22>
 80142ec:	4b14      	ldr	r3, [pc, #80]	@ (8014340 <tcp_eff_send_mss_netif+0x68>)
 80142ee:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80142f2:	4914      	ldr	r1, [pc, #80]	@ (8014344 <tcp_eff_send_mss_netif+0x6c>)
 80142f4:	4814      	ldr	r0, [pc, #80]	@ (8014348 <tcp_eff_send_mss_netif+0x70>)
 80142f6:	f008 f8d1 	bl	801c49c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80142fa:	68bb      	ldr	r3, [r7, #8]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d101      	bne.n	8014304 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8014300:	89fb      	ldrh	r3, [r7, #14]
 8014302:	e019      	b.n	8014338 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014308:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801430a:	8afb      	ldrh	r3, [r7, #22]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d012      	beq.n	8014336 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8014310:	2328      	movs	r3, #40	@ 0x28
 8014312:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014314:	8afa      	ldrh	r2, [r7, #22]
 8014316:	8abb      	ldrh	r3, [r7, #20]
 8014318:	429a      	cmp	r2, r3
 801431a:	d904      	bls.n	8014326 <tcp_eff_send_mss_netif+0x4e>
 801431c:	8afa      	ldrh	r2, [r7, #22]
 801431e:	8abb      	ldrh	r3, [r7, #20]
 8014320:	1ad3      	subs	r3, r2, r3
 8014322:	b29b      	uxth	r3, r3
 8014324:	e000      	b.n	8014328 <tcp_eff_send_mss_netif+0x50>
 8014326:	2300      	movs	r3, #0
 8014328:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801432a:	8a7a      	ldrh	r2, [r7, #18]
 801432c:	89fb      	ldrh	r3, [r7, #14]
 801432e:	4293      	cmp	r3, r2
 8014330:	bf28      	it	cs
 8014332:	4613      	movcs	r3, r2
 8014334:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8014336:	89fb      	ldrh	r3, [r7, #14]
}
 8014338:	4618      	mov	r0, r3
 801433a:	3718      	adds	r7, #24
 801433c:	46bd      	mov	sp, r7
 801433e:	bd80      	pop	{r7, pc}
 8014340:	0801fd78 	.word	0x0801fd78
 8014344:	08020484 	.word	0x08020484
 8014348:	0801fdbc 	.word	0x0801fdbc

0801434c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801434c:	b580      	push	{r7, lr}
 801434e:	b084      	sub	sp, #16
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
 8014354:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d119      	bne.n	8014394 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8014360:	4b10      	ldr	r3, [pc, #64]	@ (80143a4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8014362:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8014366:	4910      	ldr	r1, [pc, #64]	@ (80143a8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014368:	4810      	ldr	r0, [pc, #64]	@ (80143ac <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801436a:	f008 f897 	bl	801c49c <iprintf>

  while (pcb != NULL) {
 801436e:	e011      	b.n	8014394 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	681a      	ldr	r2, [r3, #0]
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	429a      	cmp	r2, r3
 801437a:	d108      	bne.n	801438e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	68db      	ldr	r3, [r3, #12]
 8014380:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8014382:	68f8      	ldr	r0, [r7, #12]
 8014384:	f7fe fd66 	bl	8012e54 <tcp_abort>
      pcb = next;
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	60fb      	str	r3, [r7, #12]
 801438c:	e002      	b.n	8014394 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	68db      	ldr	r3, [r3, #12]
 8014392:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d1ea      	bne.n	8014370 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801439a:	bf00      	nop
 801439c:	bf00      	nop
 801439e:	3710      	adds	r7, #16
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}
 80143a4:	0801fd78 	.word	0x0801fd78
 80143a8:	080204ac 	.word	0x080204ac
 80143ac:	0801fdbc 	.word	0x0801fdbc

080143b0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b084      	sub	sp, #16
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
 80143b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d02a      	beq.n	8014416 <tcp_netif_ip_addr_changed+0x66>
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d026      	beq.n	8014416 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80143c8:	4b15      	ldr	r3, [pc, #84]	@ (8014420 <tcp_netif_ip_addr_changed+0x70>)
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	4619      	mov	r1, r3
 80143ce:	6878      	ldr	r0, [r7, #4]
 80143d0:	f7ff ffbc 	bl	801434c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80143d4:	4b13      	ldr	r3, [pc, #76]	@ (8014424 <tcp_netif_ip_addr_changed+0x74>)
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	4619      	mov	r1, r3
 80143da:	6878      	ldr	r0, [r7, #4]
 80143dc:	f7ff ffb6 	bl	801434c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80143e0:	683b      	ldr	r3, [r7, #0]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d017      	beq.n	8014416 <tcp_netif_ip_addr_changed+0x66>
 80143e6:	683b      	ldr	r3, [r7, #0]
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d013      	beq.n	8014416 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80143ee:	4b0e      	ldr	r3, [pc, #56]	@ (8014428 <tcp_netif_ip_addr_changed+0x78>)
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	60fb      	str	r3, [r7, #12]
 80143f4:	e00c      	b.n	8014410 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	681a      	ldr	r2, [r3, #0]
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	429a      	cmp	r2, r3
 8014400:	d103      	bne.n	801440a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	681a      	ldr	r2, [r3, #0]
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	68db      	ldr	r3, [r3, #12]
 801440e:	60fb      	str	r3, [r7, #12]
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d1ef      	bne.n	80143f6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014416:	bf00      	nop
 8014418:	3710      	adds	r7, #16
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}
 801441e:	bf00      	nop
 8014420:	2000c8d8 	.word	0x2000c8d8
 8014424:	2000c8d0 	.word	0x2000c8d0
 8014428:	2000c8d4 	.word	0x2000c8d4

0801442c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b082      	sub	sp, #8
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014438:	2b00      	cmp	r3, #0
 801443a:	d007      	beq.n	801444c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014440:	4618      	mov	r0, r3
 8014442:	f7ff fb99 	bl	8013b78 <tcp_segs_free>
    pcb->ooseq = NULL;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	2200      	movs	r2, #0
 801444a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801444c:	bf00      	nop
 801444e:	3708      	adds	r7, #8
 8014450:	46bd      	mov	sp, r7
 8014452:	bd80      	pop	{r7, pc}

08014454 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8014454:	b590      	push	{r4, r7, lr}
 8014456:	b08d      	sub	sp, #52	@ 0x34
 8014458:	af04      	add	r7, sp, #16
 801445a:	6078      	str	r0, [r7, #4]
 801445c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d105      	bne.n	8014470 <tcp_input+0x1c>
 8014464:	4b9b      	ldr	r3, [pc, #620]	@ (80146d4 <tcp_input+0x280>)
 8014466:	2283      	movs	r2, #131	@ 0x83
 8014468:	499b      	ldr	r1, [pc, #620]	@ (80146d8 <tcp_input+0x284>)
 801446a:	489c      	ldr	r0, [pc, #624]	@ (80146dc <tcp_input+0x288>)
 801446c:	f008 f816 	bl	801c49c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	685b      	ldr	r3, [r3, #4]
 8014474:	4a9a      	ldr	r2, [pc, #616]	@ (80146e0 <tcp_input+0x28c>)
 8014476:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	895b      	ldrh	r3, [r3, #10]
 801447c:	2b13      	cmp	r3, #19
 801447e:	f240 83d1 	bls.w	8014c24 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014482:	4b98      	ldr	r3, [pc, #608]	@ (80146e4 <tcp_input+0x290>)
 8014484:	695b      	ldr	r3, [r3, #20]
 8014486:	4a97      	ldr	r2, [pc, #604]	@ (80146e4 <tcp_input+0x290>)
 8014488:	6812      	ldr	r2, [r2, #0]
 801448a:	4611      	mov	r1, r2
 801448c:	4618      	mov	r0, r3
 801448e:	f006 f867 	bl	801a560 <ip4_addr_isbroadcast_u32>
 8014492:	4603      	mov	r3, r0
 8014494:	2b00      	cmp	r3, #0
 8014496:	f040 83c7 	bne.w	8014c28 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801449a:	4b92      	ldr	r3, [pc, #584]	@ (80146e4 <tcp_input+0x290>)
 801449c:	695b      	ldr	r3, [r3, #20]
 801449e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80144a2:	2be0      	cmp	r3, #224	@ 0xe0
 80144a4:	f000 83c0 	beq.w	8014c28 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80144a8:	4b8d      	ldr	r3, [pc, #564]	@ (80146e0 <tcp_input+0x28c>)
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	899b      	ldrh	r3, [r3, #12]
 80144ae:	b29b      	uxth	r3, r3
 80144b0:	4618      	mov	r0, r3
 80144b2:	f7fc fb7b 	bl	8010bac <lwip_htons>
 80144b6:	4603      	mov	r3, r0
 80144b8:	0b1b      	lsrs	r3, r3, #12
 80144ba:	b29b      	uxth	r3, r3
 80144bc:	b2db      	uxtb	r3, r3
 80144be:	009b      	lsls	r3, r3, #2
 80144c0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80144c2:	7cbb      	ldrb	r3, [r7, #18]
 80144c4:	2b13      	cmp	r3, #19
 80144c6:	f240 83b1 	bls.w	8014c2c <tcp_input+0x7d8>
 80144ca:	7cbb      	ldrb	r3, [r7, #18]
 80144cc:	b29a      	uxth	r2, r3
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	891b      	ldrh	r3, [r3, #8]
 80144d2:	429a      	cmp	r2, r3
 80144d4:	f200 83aa 	bhi.w	8014c2c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80144d8:	7cbb      	ldrb	r3, [r7, #18]
 80144da:	b29b      	uxth	r3, r3
 80144dc:	3b14      	subs	r3, #20
 80144de:	b29a      	uxth	r2, r3
 80144e0:	4b81      	ldr	r3, [pc, #516]	@ (80146e8 <tcp_input+0x294>)
 80144e2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80144e4:	4b81      	ldr	r3, [pc, #516]	@ (80146ec <tcp_input+0x298>)
 80144e6:	2200      	movs	r2, #0
 80144e8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	895a      	ldrh	r2, [r3, #10]
 80144ee:	7cbb      	ldrb	r3, [r7, #18]
 80144f0:	b29b      	uxth	r3, r3
 80144f2:	429a      	cmp	r2, r3
 80144f4:	d309      	bcc.n	801450a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80144f6:	4b7c      	ldr	r3, [pc, #496]	@ (80146e8 <tcp_input+0x294>)
 80144f8:	881a      	ldrh	r2, [r3, #0]
 80144fa:	4b7d      	ldr	r3, [pc, #500]	@ (80146f0 <tcp_input+0x29c>)
 80144fc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80144fe:	7cbb      	ldrb	r3, [r7, #18]
 8014500:	4619      	mov	r1, r3
 8014502:	6878      	ldr	r0, [r7, #4]
 8014504:	f7fd fe8c 	bl	8012220 <pbuf_remove_header>
 8014508:	e04e      	b.n	80145a8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d105      	bne.n	801451e <tcp_input+0xca>
 8014512:	4b70      	ldr	r3, [pc, #448]	@ (80146d4 <tcp_input+0x280>)
 8014514:	22c2      	movs	r2, #194	@ 0xc2
 8014516:	4977      	ldr	r1, [pc, #476]	@ (80146f4 <tcp_input+0x2a0>)
 8014518:	4870      	ldr	r0, [pc, #448]	@ (80146dc <tcp_input+0x288>)
 801451a:	f007 ffbf 	bl	801c49c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801451e:	2114      	movs	r1, #20
 8014520:	6878      	ldr	r0, [r7, #4]
 8014522:	f7fd fe7d 	bl	8012220 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	895a      	ldrh	r2, [r3, #10]
 801452a:	4b71      	ldr	r3, [pc, #452]	@ (80146f0 <tcp_input+0x29c>)
 801452c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801452e:	4b6e      	ldr	r3, [pc, #440]	@ (80146e8 <tcp_input+0x294>)
 8014530:	881a      	ldrh	r2, [r3, #0]
 8014532:	4b6f      	ldr	r3, [pc, #444]	@ (80146f0 <tcp_input+0x29c>)
 8014534:	881b      	ldrh	r3, [r3, #0]
 8014536:	1ad3      	subs	r3, r2, r3
 8014538:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801453a:	4b6d      	ldr	r3, [pc, #436]	@ (80146f0 <tcp_input+0x29c>)
 801453c:	881b      	ldrh	r3, [r3, #0]
 801453e:	4619      	mov	r1, r3
 8014540:	6878      	ldr	r0, [r7, #4]
 8014542:	f7fd fe6d 	bl	8012220 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	895b      	ldrh	r3, [r3, #10]
 801454c:	8a3a      	ldrh	r2, [r7, #16]
 801454e:	429a      	cmp	r2, r3
 8014550:	f200 836e 	bhi.w	8014c30 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	685b      	ldr	r3, [r3, #4]
 801455a:	4a64      	ldr	r2, [pc, #400]	@ (80146ec <tcp_input+0x298>)
 801455c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	8a3a      	ldrh	r2, [r7, #16]
 8014564:	4611      	mov	r1, r2
 8014566:	4618      	mov	r0, r3
 8014568:	f7fd fe5a 	bl	8012220 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	891a      	ldrh	r2, [r3, #8]
 8014570:	8a3b      	ldrh	r3, [r7, #16]
 8014572:	1ad3      	subs	r3, r2, r3
 8014574:	b29a      	uxth	r2, r3
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	895b      	ldrh	r3, [r3, #10]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d005      	beq.n	801458e <tcp_input+0x13a>
 8014582:	4b54      	ldr	r3, [pc, #336]	@ (80146d4 <tcp_input+0x280>)
 8014584:	22df      	movs	r2, #223	@ 0xdf
 8014586:	495c      	ldr	r1, [pc, #368]	@ (80146f8 <tcp_input+0x2a4>)
 8014588:	4854      	ldr	r0, [pc, #336]	@ (80146dc <tcp_input+0x288>)
 801458a:	f007 ff87 	bl	801c49c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	891a      	ldrh	r2, [r3, #8]
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	891b      	ldrh	r3, [r3, #8]
 8014598:	429a      	cmp	r2, r3
 801459a:	d005      	beq.n	80145a8 <tcp_input+0x154>
 801459c:	4b4d      	ldr	r3, [pc, #308]	@ (80146d4 <tcp_input+0x280>)
 801459e:	22e0      	movs	r2, #224	@ 0xe0
 80145a0:	4956      	ldr	r1, [pc, #344]	@ (80146fc <tcp_input+0x2a8>)
 80145a2:	484e      	ldr	r0, [pc, #312]	@ (80146dc <tcp_input+0x288>)
 80145a4:	f007 ff7a 	bl	801c49c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80145a8:	4b4d      	ldr	r3, [pc, #308]	@ (80146e0 <tcp_input+0x28c>)
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	881b      	ldrh	r3, [r3, #0]
 80145ae:	b29b      	uxth	r3, r3
 80145b0:	4a4b      	ldr	r2, [pc, #300]	@ (80146e0 <tcp_input+0x28c>)
 80145b2:	6814      	ldr	r4, [r2, #0]
 80145b4:	4618      	mov	r0, r3
 80145b6:	f7fc faf9 	bl	8010bac <lwip_htons>
 80145ba:	4603      	mov	r3, r0
 80145bc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80145be:	4b48      	ldr	r3, [pc, #288]	@ (80146e0 <tcp_input+0x28c>)
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	885b      	ldrh	r3, [r3, #2]
 80145c4:	b29b      	uxth	r3, r3
 80145c6:	4a46      	ldr	r2, [pc, #280]	@ (80146e0 <tcp_input+0x28c>)
 80145c8:	6814      	ldr	r4, [r2, #0]
 80145ca:	4618      	mov	r0, r3
 80145cc:	f7fc faee 	bl	8010bac <lwip_htons>
 80145d0:	4603      	mov	r3, r0
 80145d2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80145d4:	4b42      	ldr	r3, [pc, #264]	@ (80146e0 <tcp_input+0x28c>)
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	685b      	ldr	r3, [r3, #4]
 80145da:	4a41      	ldr	r2, [pc, #260]	@ (80146e0 <tcp_input+0x28c>)
 80145dc:	6814      	ldr	r4, [r2, #0]
 80145de:	4618      	mov	r0, r3
 80145e0:	f7fc fafa 	bl	8010bd8 <lwip_htonl>
 80145e4:	4603      	mov	r3, r0
 80145e6:	6063      	str	r3, [r4, #4]
 80145e8:	6863      	ldr	r3, [r4, #4]
 80145ea:	4a45      	ldr	r2, [pc, #276]	@ (8014700 <tcp_input+0x2ac>)
 80145ec:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80145ee:	4b3c      	ldr	r3, [pc, #240]	@ (80146e0 <tcp_input+0x28c>)
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	689b      	ldr	r3, [r3, #8]
 80145f4:	4a3a      	ldr	r2, [pc, #232]	@ (80146e0 <tcp_input+0x28c>)
 80145f6:	6814      	ldr	r4, [r2, #0]
 80145f8:	4618      	mov	r0, r3
 80145fa:	f7fc faed 	bl	8010bd8 <lwip_htonl>
 80145fe:	4603      	mov	r3, r0
 8014600:	60a3      	str	r3, [r4, #8]
 8014602:	68a3      	ldr	r3, [r4, #8]
 8014604:	4a3f      	ldr	r2, [pc, #252]	@ (8014704 <tcp_input+0x2b0>)
 8014606:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8014608:	4b35      	ldr	r3, [pc, #212]	@ (80146e0 <tcp_input+0x28c>)
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	89db      	ldrh	r3, [r3, #14]
 801460e:	b29b      	uxth	r3, r3
 8014610:	4a33      	ldr	r2, [pc, #204]	@ (80146e0 <tcp_input+0x28c>)
 8014612:	6814      	ldr	r4, [r2, #0]
 8014614:	4618      	mov	r0, r3
 8014616:	f7fc fac9 	bl	8010bac <lwip_htons>
 801461a:	4603      	mov	r3, r0
 801461c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801461e:	4b30      	ldr	r3, [pc, #192]	@ (80146e0 <tcp_input+0x28c>)
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	899b      	ldrh	r3, [r3, #12]
 8014624:	b29b      	uxth	r3, r3
 8014626:	4618      	mov	r0, r3
 8014628:	f7fc fac0 	bl	8010bac <lwip_htons>
 801462c:	4603      	mov	r3, r0
 801462e:	b2db      	uxtb	r3, r3
 8014630:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014634:	b2da      	uxtb	r2, r3
 8014636:	4b34      	ldr	r3, [pc, #208]	@ (8014708 <tcp_input+0x2b4>)
 8014638:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	891a      	ldrh	r2, [r3, #8]
 801463e:	4b33      	ldr	r3, [pc, #204]	@ (801470c <tcp_input+0x2b8>)
 8014640:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8014642:	4b31      	ldr	r3, [pc, #196]	@ (8014708 <tcp_input+0x2b4>)
 8014644:	781b      	ldrb	r3, [r3, #0]
 8014646:	f003 0303 	and.w	r3, r3, #3
 801464a:	2b00      	cmp	r3, #0
 801464c:	d00c      	beq.n	8014668 <tcp_input+0x214>
    tcplen++;
 801464e:	4b2f      	ldr	r3, [pc, #188]	@ (801470c <tcp_input+0x2b8>)
 8014650:	881b      	ldrh	r3, [r3, #0]
 8014652:	3301      	adds	r3, #1
 8014654:	b29a      	uxth	r2, r3
 8014656:	4b2d      	ldr	r3, [pc, #180]	@ (801470c <tcp_input+0x2b8>)
 8014658:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	891a      	ldrh	r2, [r3, #8]
 801465e:	4b2b      	ldr	r3, [pc, #172]	@ (801470c <tcp_input+0x2b8>)
 8014660:	881b      	ldrh	r3, [r3, #0]
 8014662:	429a      	cmp	r2, r3
 8014664:	f200 82e6 	bhi.w	8014c34 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8014668:	2300      	movs	r3, #0
 801466a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801466c:	4b28      	ldr	r3, [pc, #160]	@ (8014710 <tcp_input+0x2bc>)
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	61fb      	str	r3, [r7, #28]
 8014672:	e09d      	b.n	80147b0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8014674:	69fb      	ldr	r3, [r7, #28]
 8014676:	7d1b      	ldrb	r3, [r3, #20]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d105      	bne.n	8014688 <tcp_input+0x234>
 801467c:	4b15      	ldr	r3, [pc, #84]	@ (80146d4 <tcp_input+0x280>)
 801467e:	22fb      	movs	r2, #251	@ 0xfb
 8014680:	4924      	ldr	r1, [pc, #144]	@ (8014714 <tcp_input+0x2c0>)
 8014682:	4816      	ldr	r0, [pc, #88]	@ (80146dc <tcp_input+0x288>)
 8014684:	f007 ff0a 	bl	801c49c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8014688:	69fb      	ldr	r3, [r7, #28]
 801468a:	7d1b      	ldrb	r3, [r3, #20]
 801468c:	2b0a      	cmp	r3, #10
 801468e:	d105      	bne.n	801469c <tcp_input+0x248>
 8014690:	4b10      	ldr	r3, [pc, #64]	@ (80146d4 <tcp_input+0x280>)
 8014692:	22fc      	movs	r2, #252	@ 0xfc
 8014694:	4920      	ldr	r1, [pc, #128]	@ (8014718 <tcp_input+0x2c4>)
 8014696:	4811      	ldr	r0, [pc, #68]	@ (80146dc <tcp_input+0x288>)
 8014698:	f007 ff00 	bl	801c49c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801469c:	69fb      	ldr	r3, [r7, #28]
 801469e:	7d1b      	ldrb	r3, [r3, #20]
 80146a0:	2b01      	cmp	r3, #1
 80146a2:	d105      	bne.n	80146b0 <tcp_input+0x25c>
 80146a4:	4b0b      	ldr	r3, [pc, #44]	@ (80146d4 <tcp_input+0x280>)
 80146a6:	22fd      	movs	r2, #253	@ 0xfd
 80146a8:	491c      	ldr	r1, [pc, #112]	@ (801471c <tcp_input+0x2c8>)
 80146aa:	480c      	ldr	r0, [pc, #48]	@ (80146dc <tcp_input+0x288>)
 80146ac:	f007 fef6 	bl	801c49c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80146b0:	69fb      	ldr	r3, [r7, #28]
 80146b2:	7a1b      	ldrb	r3, [r3, #8]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d033      	beq.n	8014720 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80146b8:	69fb      	ldr	r3, [r7, #28]
 80146ba:	7a1a      	ldrb	r2, [r3, #8]
 80146bc:	4b09      	ldr	r3, [pc, #36]	@ (80146e4 <tcp_input+0x290>)
 80146be:	685b      	ldr	r3, [r3, #4]
 80146c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80146c4:	3301      	adds	r3, #1
 80146c6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80146c8:	429a      	cmp	r2, r3
 80146ca:	d029      	beq.n	8014720 <tcp_input+0x2cc>
      prev = pcb;
 80146cc:	69fb      	ldr	r3, [r7, #28]
 80146ce:	61bb      	str	r3, [r7, #24]
      continue;
 80146d0:	e06b      	b.n	80147aa <tcp_input+0x356>
 80146d2:	bf00      	nop
 80146d4:	080204e0 	.word	0x080204e0
 80146d8:	08020514 	.word	0x08020514
 80146dc:	0802052c 	.word	0x0802052c
 80146e0:	2000c8f4 	.word	0x2000c8f4
 80146e4:	20009178 	.word	0x20009178
 80146e8:	2000c8f8 	.word	0x2000c8f8
 80146ec:	2000c8fc 	.word	0x2000c8fc
 80146f0:	2000c8fa 	.word	0x2000c8fa
 80146f4:	08020554 	.word	0x08020554
 80146f8:	08020564 	.word	0x08020564
 80146fc:	08020570 	.word	0x08020570
 8014700:	2000c904 	.word	0x2000c904
 8014704:	2000c908 	.word	0x2000c908
 8014708:	2000c910 	.word	0x2000c910
 801470c:	2000c90e 	.word	0x2000c90e
 8014710:	2000c8d8 	.word	0x2000c8d8
 8014714:	08020590 	.word	0x08020590
 8014718:	080205b8 	.word	0x080205b8
 801471c:	080205e4 	.word	0x080205e4
    }

    if (pcb->remote_port == tcphdr->src &&
 8014720:	69fb      	ldr	r3, [r7, #28]
 8014722:	8b1a      	ldrh	r2, [r3, #24]
 8014724:	4b72      	ldr	r3, [pc, #456]	@ (80148f0 <tcp_input+0x49c>)
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	881b      	ldrh	r3, [r3, #0]
 801472a:	b29b      	uxth	r3, r3
 801472c:	429a      	cmp	r2, r3
 801472e:	d13a      	bne.n	80147a6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8014730:	69fb      	ldr	r3, [r7, #28]
 8014732:	8ada      	ldrh	r2, [r3, #22]
 8014734:	4b6e      	ldr	r3, [pc, #440]	@ (80148f0 <tcp_input+0x49c>)
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	885b      	ldrh	r3, [r3, #2]
 801473a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801473c:	429a      	cmp	r2, r3
 801473e:	d132      	bne.n	80147a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014740:	69fb      	ldr	r3, [r7, #28]
 8014742:	685a      	ldr	r2, [r3, #4]
 8014744:	4b6b      	ldr	r3, [pc, #428]	@ (80148f4 <tcp_input+0x4a0>)
 8014746:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8014748:	429a      	cmp	r2, r3
 801474a:	d12c      	bne.n	80147a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801474c:	69fb      	ldr	r3, [r7, #28]
 801474e:	681a      	ldr	r2, [r3, #0]
 8014750:	4b68      	ldr	r3, [pc, #416]	@ (80148f4 <tcp_input+0x4a0>)
 8014752:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014754:	429a      	cmp	r2, r3
 8014756:	d126      	bne.n	80147a6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8014758:	69fb      	ldr	r3, [r7, #28]
 801475a:	68db      	ldr	r3, [r3, #12]
 801475c:	69fa      	ldr	r2, [r7, #28]
 801475e:	429a      	cmp	r2, r3
 8014760:	d106      	bne.n	8014770 <tcp_input+0x31c>
 8014762:	4b65      	ldr	r3, [pc, #404]	@ (80148f8 <tcp_input+0x4a4>)
 8014764:	f240 120d 	movw	r2, #269	@ 0x10d
 8014768:	4964      	ldr	r1, [pc, #400]	@ (80148fc <tcp_input+0x4a8>)
 801476a:	4865      	ldr	r0, [pc, #404]	@ (8014900 <tcp_input+0x4ac>)
 801476c:	f007 fe96 	bl	801c49c <iprintf>
      if (prev != NULL) {
 8014770:	69bb      	ldr	r3, [r7, #24]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d00a      	beq.n	801478c <tcp_input+0x338>
        prev->next = pcb->next;
 8014776:	69fb      	ldr	r3, [r7, #28]
 8014778:	68da      	ldr	r2, [r3, #12]
 801477a:	69bb      	ldr	r3, [r7, #24]
 801477c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801477e:	4b61      	ldr	r3, [pc, #388]	@ (8014904 <tcp_input+0x4b0>)
 8014780:	681a      	ldr	r2, [r3, #0]
 8014782:	69fb      	ldr	r3, [r7, #28]
 8014784:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8014786:	4a5f      	ldr	r2, [pc, #380]	@ (8014904 <tcp_input+0x4b0>)
 8014788:	69fb      	ldr	r3, [r7, #28]
 801478a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801478c:	69fb      	ldr	r3, [r7, #28]
 801478e:	68db      	ldr	r3, [r3, #12]
 8014790:	69fa      	ldr	r2, [r7, #28]
 8014792:	429a      	cmp	r2, r3
 8014794:	d111      	bne.n	80147ba <tcp_input+0x366>
 8014796:	4b58      	ldr	r3, [pc, #352]	@ (80148f8 <tcp_input+0x4a4>)
 8014798:	f240 1215 	movw	r2, #277	@ 0x115
 801479c:	495a      	ldr	r1, [pc, #360]	@ (8014908 <tcp_input+0x4b4>)
 801479e:	4858      	ldr	r0, [pc, #352]	@ (8014900 <tcp_input+0x4ac>)
 80147a0:	f007 fe7c 	bl	801c49c <iprintf>
      break;
 80147a4:	e009      	b.n	80147ba <tcp_input+0x366>
    }
    prev = pcb;
 80147a6:	69fb      	ldr	r3, [r7, #28]
 80147a8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80147aa:	69fb      	ldr	r3, [r7, #28]
 80147ac:	68db      	ldr	r3, [r3, #12]
 80147ae:	61fb      	str	r3, [r7, #28]
 80147b0:	69fb      	ldr	r3, [r7, #28]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	f47f af5e 	bne.w	8014674 <tcp_input+0x220>
 80147b8:	e000      	b.n	80147bc <tcp_input+0x368>
      break;
 80147ba:	bf00      	nop
  }

  if (pcb == NULL) {
 80147bc:	69fb      	ldr	r3, [r7, #28]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	f040 80aa 	bne.w	8014918 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80147c4:	4b51      	ldr	r3, [pc, #324]	@ (801490c <tcp_input+0x4b8>)
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	61fb      	str	r3, [r7, #28]
 80147ca:	e03f      	b.n	801484c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80147cc:	69fb      	ldr	r3, [r7, #28]
 80147ce:	7d1b      	ldrb	r3, [r3, #20]
 80147d0:	2b0a      	cmp	r3, #10
 80147d2:	d006      	beq.n	80147e2 <tcp_input+0x38e>
 80147d4:	4b48      	ldr	r3, [pc, #288]	@ (80148f8 <tcp_input+0x4a4>)
 80147d6:	f240 121f 	movw	r2, #287	@ 0x11f
 80147da:	494d      	ldr	r1, [pc, #308]	@ (8014910 <tcp_input+0x4bc>)
 80147dc:	4848      	ldr	r0, [pc, #288]	@ (8014900 <tcp_input+0x4ac>)
 80147de:	f007 fe5d 	bl	801c49c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80147e2:	69fb      	ldr	r3, [r7, #28]
 80147e4:	7a1b      	ldrb	r3, [r3, #8]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d009      	beq.n	80147fe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80147ea:	69fb      	ldr	r3, [r7, #28]
 80147ec:	7a1a      	ldrb	r2, [r3, #8]
 80147ee:	4b41      	ldr	r3, [pc, #260]	@ (80148f4 <tcp_input+0x4a0>)
 80147f0:	685b      	ldr	r3, [r3, #4]
 80147f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80147f6:	3301      	adds	r3, #1
 80147f8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80147fa:	429a      	cmp	r2, r3
 80147fc:	d122      	bne.n	8014844 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80147fe:	69fb      	ldr	r3, [r7, #28]
 8014800:	8b1a      	ldrh	r2, [r3, #24]
 8014802:	4b3b      	ldr	r3, [pc, #236]	@ (80148f0 <tcp_input+0x49c>)
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	881b      	ldrh	r3, [r3, #0]
 8014808:	b29b      	uxth	r3, r3
 801480a:	429a      	cmp	r2, r3
 801480c:	d11b      	bne.n	8014846 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801480e:	69fb      	ldr	r3, [r7, #28]
 8014810:	8ada      	ldrh	r2, [r3, #22]
 8014812:	4b37      	ldr	r3, [pc, #220]	@ (80148f0 <tcp_input+0x49c>)
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	885b      	ldrh	r3, [r3, #2]
 8014818:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801481a:	429a      	cmp	r2, r3
 801481c:	d113      	bne.n	8014846 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801481e:	69fb      	ldr	r3, [r7, #28]
 8014820:	685a      	ldr	r2, [r3, #4]
 8014822:	4b34      	ldr	r3, [pc, #208]	@ (80148f4 <tcp_input+0x4a0>)
 8014824:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8014826:	429a      	cmp	r2, r3
 8014828:	d10d      	bne.n	8014846 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801482a:	69fb      	ldr	r3, [r7, #28]
 801482c:	681a      	ldr	r2, [r3, #0]
 801482e:	4b31      	ldr	r3, [pc, #196]	@ (80148f4 <tcp_input+0x4a0>)
 8014830:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014832:	429a      	cmp	r2, r3
 8014834:	d107      	bne.n	8014846 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8014836:	69f8      	ldr	r0, [r7, #28]
 8014838:	f000 fb56 	bl	8014ee8 <tcp_timewait_input>
        }
        pbuf_free(p);
 801483c:	6878      	ldr	r0, [r7, #4]
 801483e:	f7fd fd75 	bl	801232c <pbuf_free>
        return;
 8014842:	e1fd      	b.n	8014c40 <tcp_input+0x7ec>
        continue;
 8014844:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014846:	69fb      	ldr	r3, [r7, #28]
 8014848:	68db      	ldr	r3, [r3, #12]
 801484a:	61fb      	str	r3, [r7, #28]
 801484c:	69fb      	ldr	r3, [r7, #28]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d1bc      	bne.n	80147cc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8014852:	2300      	movs	r3, #0
 8014854:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014856:	4b2f      	ldr	r3, [pc, #188]	@ (8014914 <tcp_input+0x4c0>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	617b      	str	r3, [r7, #20]
 801485c:	e02a      	b.n	80148b4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801485e:	697b      	ldr	r3, [r7, #20]
 8014860:	7a1b      	ldrb	r3, [r3, #8]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d00c      	beq.n	8014880 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014866:	697b      	ldr	r3, [r7, #20]
 8014868:	7a1a      	ldrb	r2, [r3, #8]
 801486a:	4b22      	ldr	r3, [pc, #136]	@ (80148f4 <tcp_input+0x4a0>)
 801486c:	685b      	ldr	r3, [r3, #4]
 801486e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014872:	3301      	adds	r3, #1
 8014874:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014876:	429a      	cmp	r2, r3
 8014878:	d002      	beq.n	8014880 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801487a:	697b      	ldr	r3, [r7, #20]
 801487c:	61bb      	str	r3, [r7, #24]
        continue;
 801487e:	e016      	b.n	80148ae <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8014880:	697b      	ldr	r3, [r7, #20]
 8014882:	8ada      	ldrh	r2, [r3, #22]
 8014884:	4b1a      	ldr	r3, [pc, #104]	@ (80148f0 <tcp_input+0x49c>)
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	885b      	ldrh	r3, [r3, #2]
 801488a:	b29b      	uxth	r3, r3
 801488c:	429a      	cmp	r2, r3
 801488e:	d10c      	bne.n	80148aa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8014890:	697b      	ldr	r3, [r7, #20]
 8014892:	681a      	ldr	r2, [r3, #0]
 8014894:	4b17      	ldr	r3, [pc, #92]	@ (80148f4 <tcp_input+0x4a0>)
 8014896:	695b      	ldr	r3, [r3, #20]
 8014898:	429a      	cmp	r2, r3
 801489a:	d00f      	beq.n	80148bc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801489c:	697b      	ldr	r3, [r7, #20]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d00d      	beq.n	80148be <tcp_input+0x46a>
 80148a2:	697b      	ldr	r3, [r7, #20]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d009      	beq.n	80148be <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80148aa:	697b      	ldr	r3, [r7, #20]
 80148ac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80148ae:	697b      	ldr	r3, [r7, #20]
 80148b0:	68db      	ldr	r3, [r3, #12]
 80148b2:	617b      	str	r3, [r7, #20]
 80148b4:	697b      	ldr	r3, [r7, #20]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d1d1      	bne.n	801485e <tcp_input+0x40a>
 80148ba:	e000      	b.n	80148be <tcp_input+0x46a>
            break;
 80148bc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80148be:	697b      	ldr	r3, [r7, #20]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d029      	beq.n	8014918 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80148c4:	69bb      	ldr	r3, [r7, #24]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d00a      	beq.n	80148e0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80148ca:	697b      	ldr	r3, [r7, #20]
 80148cc:	68da      	ldr	r2, [r3, #12]
 80148ce:	69bb      	ldr	r3, [r7, #24]
 80148d0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80148d2:	4b10      	ldr	r3, [pc, #64]	@ (8014914 <tcp_input+0x4c0>)
 80148d4:	681a      	ldr	r2, [r3, #0]
 80148d6:	697b      	ldr	r3, [r7, #20]
 80148d8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80148da:	4a0e      	ldr	r2, [pc, #56]	@ (8014914 <tcp_input+0x4c0>)
 80148dc:	697b      	ldr	r3, [r7, #20]
 80148de:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80148e0:	6978      	ldr	r0, [r7, #20]
 80148e2:	f000 fa03 	bl	8014cec <tcp_listen_input>
      }
      pbuf_free(p);
 80148e6:	6878      	ldr	r0, [r7, #4]
 80148e8:	f7fd fd20 	bl	801232c <pbuf_free>
      return;
 80148ec:	e1a8      	b.n	8014c40 <tcp_input+0x7ec>
 80148ee:	bf00      	nop
 80148f0:	2000c8f4 	.word	0x2000c8f4
 80148f4:	20009178 	.word	0x20009178
 80148f8:	080204e0 	.word	0x080204e0
 80148fc:	0802060c 	.word	0x0802060c
 8014900:	0802052c 	.word	0x0802052c
 8014904:	2000c8d8 	.word	0x2000c8d8
 8014908:	08020638 	.word	0x08020638
 801490c:	2000c8dc 	.word	0x2000c8dc
 8014910:	08020664 	.word	0x08020664
 8014914:	2000c8d4 	.word	0x2000c8d4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8014918:	69fb      	ldr	r3, [r7, #28]
 801491a:	2b00      	cmp	r3, #0
 801491c:	f000 8158 	beq.w	8014bd0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8014920:	4b95      	ldr	r3, [pc, #596]	@ (8014b78 <tcp_input+0x724>)
 8014922:	2200      	movs	r2, #0
 8014924:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	891a      	ldrh	r2, [r3, #8]
 801492a:	4b93      	ldr	r3, [pc, #588]	@ (8014b78 <tcp_input+0x724>)
 801492c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801492e:	4a92      	ldr	r2, [pc, #584]	@ (8014b78 <tcp_input+0x724>)
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8014934:	4b91      	ldr	r3, [pc, #580]	@ (8014b7c <tcp_input+0x728>)
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	4a8f      	ldr	r2, [pc, #572]	@ (8014b78 <tcp_input+0x724>)
 801493a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801493c:	4b90      	ldr	r3, [pc, #576]	@ (8014b80 <tcp_input+0x72c>)
 801493e:	2200      	movs	r2, #0
 8014940:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8014942:	4b90      	ldr	r3, [pc, #576]	@ (8014b84 <tcp_input+0x730>)
 8014944:	2200      	movs	r2, #0
 8014946:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8014948:	4b8f      	ldr	r3, [pc, #572]	@ (8014b88 <tcp_input+0x734>)
 801494a:	2200      	movs	r2, #0
 801494c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801494e:	4b8f      	ldr	r3, [pc, #572]	@ (8014b8c <tcp_input+0x738>)
 8014950:	781b      	ldrb	r3, [r3, #0]
 8014952:	f003 0308 	and.w	r3, r3, #8
 8014956:	2b00      	cmp	r3, #0
 8014958:	d006      	beq.n	8014968 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	7b5b      	ldrb	r3, [r3, #13]
 801495e:	f043 0301 	orr.w	r3, r3, #1
 8014962:	b2da      	uxtb	r2, r3
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8014968:	69fb      	ldr	r3, [r7, #28]
 801496a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801496c:	2b00      	cmp	r3, #0
 801496e:	d017      	beq.n	80149a0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014970:	69f8      	ldr	r0, [r7, #28]
 8014972:	f7ff f885 	bl	8013a80 <tcp_process_refused_data>
 8014976:	4603      	mov	r3, r0
 8014978:	f113 0f0d 	cmn.w	r3, #13
 801497c:	d007      	beq.n	801498e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801497e:	69fb      	ldr	r3, [r7, #28]
 8014980:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014982:	2b00      	cmp	r3, #0
 8014984:	d00c      	beq.n	80149a0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014986:	4b82      	ldr	r3, [pc, #520]	@ (8014b90 <tcp_input+0x73c>)
 8014988:	881b      	ldrh	r3, [r3, #0]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d008      	beq.n	80149a0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801498e:	69fb      	ldr	r3, [r7, #28]
 8014990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014992:	2b00      	cmp	r3, #0
 8014994:	f040 80e3 	bne.w	8014b5e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8014998:	69f8      	ldr	r0, [r7, #28]
 801499a:	f003 fdff 	bl	801859c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801499e:	e0de      	b.n	8014b5e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80149a0:	4a7c      	ldr	r2, [pc, #496]	@ (8014b94 <tcp_input+0x740>)
 80149a2:	69fb      	ldr	r3, [r7, #28]
 80149a4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80149a6:	69f8      	ldr	r0, [r7, #28]
 80149a8:	f000 fb18 	bl	8014fdc <tcp_process>
 80149ac:	4603      	mov	r3, r0
 80149ae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80149b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80149b4:	f113 0f0d 	cmn.w	r3, #13
 80149b8:	f000 80d3 	beq.w	8014b62 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80149bc:	4b71      	ldr	r3, [pc, #452]	@ (8014b84 <tcp_input+0x730>)
 80149be:	781b      	ldrb	r3, [r3, #0]
 80149c0:	f003 0308 	and.w	r3, r3, #8
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d015      	beq.n	80149f4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80149c8:	69fb      	ldr	r3, [r7, #28]
 80149ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d008      	beq.n	80149e4 <tcp_input+0x590>
 80149d2:	69fb      	ldr	r3, [r7, #28]
 80149d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80149d8:	69fa      	ldr	r2, [r7, #28]
 80149da:	6912      	ldr	r2, [r2, #16]
 80149dc:	f06f 010d 	mvn.w	r1, #13
 80149e0:	4610      	mov	r0, r2
 80149e2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80149e4:	69f9      	ldr	r1, [r7, #28]
 80149e6:	486c      	ldr	r0, [pc, #432]	@ (8014b98 <tcp_input+0x744>)
 80149e8:	f7ff fbbc 	bl	8014164 <tcp_pcb_remove>
        tcp_free(pcb);
 80149ec:	69f8      	ldr	r0, [r7, #28]
 80149ee:	f7fd ff49 	bl	8012884 <tcp_free>
 80149f2:	e0da      	b.n	8014baa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80149f4:	2300      	movs	r3, #0
 80149f6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80149f8:	4b63      	ldr	r3, [pc, #396]	@ (8014b88 <tcp_input+0x734>)
 80149fa:	881b      	ldrh	r3, [r3, #0]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d01d      	beq.n	8014a3c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014a00:	4b61      	ldr	r3, [pc, #388]	@ (8014b88 <tcp_input+0x734>)
 8014a02:	881b      	ldrh	r3, [r3, #0]
 8014a04:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8014a06:	69fb      	ldr	r3, [r7, #28]
 8014a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d00a      	beq.n	8014a26 <tcp_input+0x5d2>
 8014a10:	69fb      	ldr	r3, [r7, #28]
 8014a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014a16:	69fa      	ldr	r2, [r7, #28]
 8014a18:	6910      	ldr	r0, [r2, #16]
 8014a1a:	89fa      	ldrh	r2, [r7, #14]
 8014a1c:	69f9      	ldr	r1, [r7, #28]
 8014a1e:	4798      	blx	r3
 8014a20:	4603      	mov	r3, r0
 8014a22:	74fb      	strb	r3, [r7, #19]
 8014a24:	e001      	b.n	8014a2a <tcp_input+0x5d6>
 8014a26:	2300      	movs	r3, #0
 8014a28:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014a2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014a2e:	f113 0f0d 	cmn.w	r3, #13
 8014a32:	f000 8098 	beq.w	8014b66 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8014a36:	4b54      	ldr	r3, [pc, #336]	@ (8014b88 <tcp_input+0x734>)
 8014a38:	2200      	movs	r2, #0
 8014a3a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8014a3c:	69f8      	ldr	r0, [r7, #28]
 8014a3e:	f000 f915 	bl	8014c6c <tcp_input_delayed_close>
 8014a42:	4603      	mov	r3, r0
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	f040 8090 	bne.w	8014b6a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8014a4a:	4b4d      	ldr	r3, [pc, #308]	@ (8014b80 <tcp_input+0x72c>)
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d041      	beq.n	8014ad6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8014a52:	69fb      	ldr	r3, [r7, #28]
 8014a54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d006      	beq.n	8014a68 <tcp_input+0x614>
 8014a5a:	4b50      	ldr	r3, [pc, #320]	@ (8014b9c <tcp_input+0x748>)
 8014a5c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8014a60:	494f      	ldr	r1, [pc, #316]	@ (8014ba0 <tcp_input+0x74c>)
 8014a62:	4850      	ldr	r0, [pc, #320]	@ (8014ba4 <tcp_input+0x750>)
 8014a64:	f007 fd1a 	bl	801c49c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8014a68:	69fb      	ldr	r3, [r7, #28]
 8014a6a:	8b5b      	ldrh	r3, [r3, #26]
 8014a6c:	f003 0310 	and.w	r3, r3, #16
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d008      	beq.n	8014a86 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8014a74:	4b42      	ldr	r3, [pc, #264]	@ (8014b80 <tcp_input+0x72c>)
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f7fd fc57 	bl	801232c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8014a7e:	69f8      	ldr	r0, [r7, #28]
 8014a80:	f7fe f9e8 	bl	8012e54 <tcp_abort>
            goto aborted;
 8014a84:	e091      	b.n	8014baa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8014a86:	69fb      	ldr	r3, [r7, #28]
 8014a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d00c      	beq.n	8014aaa <tcp_input+0x656>
 8014a90:	69fb      	ldr	r3, [r7, #28]
 8014a92:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014a96:	69fb      	ldr	r3, [r7, #28]
 8014a98:	6918      	ldr	r0, [r3, #16]
 8014a9a:	4b39      	ldr	r3, [pc, #228]	@ (8014b80 <tcp_input+0x72c>)
 8014a9c:	681a      	ldr	r2, [r3, #0]
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	69f9      	ldr	r1, [r7, #28]
 8014aa2:	47a0      	blx	r4
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	74fb      	strb	r3, [r7, #19]
 8014aa8:	e008      	b.n	8014abc <tcp_input+0x668>
 8014aaa:	4b35      	ldr	r3, [pc, #212]	@ (8014b80 <tcp_input+0x72c>)
 8014aac:	681a      	ldr	r2, [r3, #0]
 8014aae:	2300      	movs	r3, #0
 8014ab0:	69f9      	ldr	r1, [r7, #28]
 8014ab2:	2000      	movs	r0, #0
 8014ab4:	f7ff f8d8 	bl	8013c68 <tcp_recv_null>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014abc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014ac0:	f113 0f0d 	cmn.w	r3, #13
 8014ac4:	d053      	beq.n	8014b6e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8014ac6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d003      	beq.n	8014ad6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8014ace:	4b2c      	ldr	r3, [pc, #176]	@ (8014b80 <tcp_input+0x72c>)
 8014ad0:	681a      	ldr	r2, [r3, #0]
 8014ad2:	69fb      	ldr	r3, [r7, #28]
 8014ad4:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8014ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8014b84 <tcp_input+0x730>)
 8014ad8:	781b      	ldrb	r3, [r3, #0]
 8014ada:	f003 0320 	and.w	r3, r3, #32
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d030      	beq.n	8014b44 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8014ae2:	69fb      	ldr	r3, [r7, #28]
 8014ae4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d009      	beq.n	8014afe <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8014aea:	69fb      	ldr	r3, [r7, #28]
 8014aec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014aee:	7b5a      	ldrb	r2, [r3, #13]
 8014af0:	69fb      	ldr	r3, [r7, #28]
 8014af2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014af4:	f042 0220 	orr.w	r2, r2, #32
 8014af8:	b2d2      	uxtb	r2, r2
 8014afa:	735a      	strb	r2, [r3, #13]
 8014afc:	e022      	b.n	8014b44 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014afe:	69fb      	ldr	r3, [r7, #28]
 8014b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b02:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014b06:	d005      	beq.n	8014b14 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8014b08:	69fb      	ldr	r3, [r7, #28]
 8014b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b0c:	3301      	adds	r3, #1
 8014b0e:	b29a      	uxth	r2, r3
 8014b10:	69fb      	ldr	r3, [r7, #28]
 8014b12:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014b14:	69fb      	ldr	r3, [r7, #28]
 8014b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d00b      	beq.n	8014b36 <tcp_input+0x6e2>
 8014b1e:	69fb      	ldr	r3, [r7, #28]
 8014b20:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014b24:	69fb      	ldr	r3, [r7, #28]
 8014b26:	6918      	ldr	r0, [r3, #16]
 8014b28:	2300      	movs	r3, #0
 8014b2a:	2200      	movs	r2, #0
 8014b2c:	69f9      	ldr	r1, [r7, #28]
 8014b2e:	47a0      	blx	r4
 8014b30:	4603      	mov	r3, r0
 8014b32:	74fb      	strb	r3, [r7, #19]
 8014b34:	e001      	b.n	8014b3a <tcp_input+0x6e6>
 8014b36:	2300      	movs	r3, #0
 8014b38:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014b3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014b3e:	f113 0f0d 	cmn.w	r3, #13
 8014b42:	d016      	beq.n	8014b72 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014b44:	4b13      	ldr	r3, [pc, #76]	@ (8014b94 <tcp_input+0x740>)
 8014b46:	2200      	movs	r2, #0
 8014b48:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8014b4a:	69f8      	ldr	r0, [r7, #28]
 8014b4c:	f000 f88e 	bl	8014c6c <tcp_input_delayed_close>
 8014b50:	4603      	mov	r3, r0
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d128      	bne.n	8014ba8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8014b56:	69f8      	ldr	r0, [r7, #28]
 8014b58:	f002 ff1a 	bl	8017990 <tcp_output>
 8014b5c:	e025      	b.n	8014baa <tcp_input+0x756>
        goto aborted;
 8014b5e:	bf00      	nop
 8014b60:	e023      	b.n	8014baa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8014b62:	bf00      	nop
 8014b64:	e021      	b.n	8014baa <tcp_input+0x756>
              goto aborted;
 8014b66:	bf00      	nop
 8014b68:	e01f      	b.n	8014baa <tcp_input+0x756>
          goto aborted;
 8014b6a:	bf00      	nop
 8014b6c:	e01d      	b.n	8014baa <tcp_input+0x756>
            goto aborted;
 8014b6e:	bf00      	nop
 8014b70:	e01b      	b.n	8014baa <tcp_input+0x756>
              goto aborted;
 8014b72:	bf00      	nop
 8014b74:	e019      	b.n	8014baa <tcp_input+0x756>
 8014b76:	bf00      	nop
 8014b78:	2000c8e4 	.word	0x2000c8e4
 8014b7c:	2000c8f4 	.word	0x2000c8f4
 8014b80:	2000c914 	.word	0x2000c914
 8014b84:	2000c911 	.word	0x2000c911
 8014b88:	2000c90c 	.word	0x2000c90c
 8014b8c:	2000c910 	.word	0x2000c910
 8014b90:	2000c90e 	.word	0x2000c90e
 8014b94:	2000c918 	.word	0x2000c918
 8014b98:	2000c8d8 	.word	0x2000c8d8
 8014b9c:	080204e0 	.word	0x080204e0
 8014ba0:	08020694 	.word	0x08020694
 8014ba4:	0802052c 	.word	0x0802052c
          goto aborted;
 8014ba8:	bf00      	nop
    tcp_input_pcb = NULL;
 8014baa:	4b27      	ldr	r3, [pc, #156]	@ (8014c48 <tcp_input+0x7f4>)
 8014bac:	2200      	movs	r2, #0
 8014bae:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014bb0:	4b26      	ldr	r3, [pc, #152]	@ (8014c4c <tcp_input+0x7f8>)
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8014bb6:	4b26      	ldr	r3, [pc, #152]	@ (8014c50 <tcp_input+0x7fc>)
 8014bb8:	685b      	ldr	r3, [r3, #4]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d03f      	beq.n	8014c3e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8014bbe:	4b24      	ldr	r3, [pc, #144]	@ (8014c50 <tcp_input+0x7fc>)
 8014bc0:	685b      	ldr	r3, [r3, #4]
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f7fd fbb2 	bl	801232c <pbuf_free>
      inseg.p = NULL;
 8014bc8:	4b21      	ldr	r3, [pc, #132]	@ (8014c50 <tcp_input+0x7fc>)
 8014bca:	2200      	movs	r2, #0
 8014bcc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014bce:	e036      	b.n	8014c3e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014bd0:	4b20      	ldr	r3, [pc, #128]	@ (8014c54 <tcp_input+0x800>)
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	899b      	ldrh	r3, [r3, #12]
 8014bd6:	b29b      	uxth	r3, r3
 8014bd8:	4618      	mov	r0, r3
 8014bda:	f7fb ffe7 	bl	8010bac <lwip_htons>
 8014bde:	4603      	mov	r3, r0
 8014be0:	b2db      	uxtb	r3, r3
 8014be2:	f003 0304 	and.w	r3, r3, #4
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d118      	bne.n	8014c1c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014bea:	4b1b      	ldr	r3, [pc, #108]	@ (8014c58 <tcp_input+0x804>)
 8014bec:	6819      	ldr	r1, [r3, #0]
 8014bee:	4b1b      	ldr	r3, [pc, #108]	@ (8014c5c <tcp_input+0x808>)
 8014bf0:	881b      	ldrh	r3, [r3, #0]
 8014bf2:	461a      	mov	r2, r3
 8014bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8014c60 <tcp_input+0x80c>)
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014bfa:	4b16      	ldr	r3, [pc, #88]	@ (8014c54 <tcp_input+0x800>)
 8014bfc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014bfe:	885b      	ldrh	r3, [r3, #2]
 8014c00:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014c02:	4a14      	ldr	r2, [pc, #80]	@ (8014c54 <tcp_input+0x800>)
 8014c04:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014c06:	8812      	ldrh	r2, [r2, #0]
 8014c08:	b292      	uxth	r2, r2
 8014c0a:	9202      	str	r2, [sp, #8]
 8014c0c:	9301      	str	r3, [sp, #4]
 8014c0e:	4b15      	ldr	r3, [pc, #84]	@ (8014c64 <tcp_input+0x810>)
 8014c10:	9300      	str	r3, [sp, #0]
 8014c12:	4b15      	ldr	r3, [pc, #84]	@ (8014c68 <tcp_input+0x814>)
 8014c14:	4602      	mov	r2, r0
 8014c16:	2000      	movs	r0, #0
 8014c18:	f003 fc6e 	bl	80184f8 <tcp_rst>
    pbuf_free(p);
 8014c1c:	6878      	ldr	r0, [r7, #4]
 8014c1e:	f7fd fb85 	bl	801232c <pbuf_free>
  return;
 8014c22:	e00c      	b.n	8014c3e <tcp_input+0x7ea>
    goto dropped;
 8014c24:	bf00      	nop
 8014c26:	e006      	b.n	8014c36 <tcp_input+0x7e2>
    goto dropped;
 8014c28:	bf00      	nop
 8014c2a:	e004      	b.n	8014c36 <tcp_input+0x7e2>
    goto dropped;
 8014c2c:	bf00      	nop
 8014c2e:	e002      	b.n	8014c36 <tcp_input+0x7e2>
      goto dropped;
 8014c30:	bf00      	nop
 8014c32:	e000      	b.n	8014c36 <tcp_input+0x7e2>
      goto dropped;
 8014c34:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014c36:	6878      	ldr	r0, [r7, #4]
 8014c38:	f7fd fb78 	bl	801232c <pbuf_free>
 8014c3c:	e000      	b.n	8014c40 <tcp_input+0x7ec>
  return;
 8014c3e:	bf00      	nop
}
 8014c40:	3724      	adds	r7, #36	@ 0x24
 8014c42:	46bd      	mov	sp, r7
 8014c44:	bd90      	pop	{r4, r7, pc}
 8014c46:	bf00      	nop
 8014c48:	2000c918 	.word	0x2000c918
 8014c4c:	2000c914 	.word	0x2000c914
 8014c50:	2000c8e4 	.word	0x2000c8e4
 8014c54:	2000c8f4 	.word	0x2000c8f4
 8014c58:	2000c908 	.word	0x2000c908
 8014c5c:	2000c90e 	.word	0x2000c90e
 8014c60:	2000c904 	.word	0x2000c904
 8014c64:	20009188 	.word	0x20009188
 8014c68:	2000918c 	.word	0x2000918c

08014c6c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b082      	sub	sp, #8
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d106      	bne.n	8014c88 <tcp_input_delayed_close+0x1c>
 8014c7a:	4b17      	ldr	r3, [pc, #92]	@ (8014cd8 <tcp_input_delayed_close+0x6c>)
 8014c7c:	f240 225a 	movw	r2, #602	@ 0x25a
 8014c80:	4916      	ldr	r1, [pc, #88]	@ (8014cdc <tcp_input_delayed_close+0x70>)
 8014c82:	4817      	ldr	r0, [pc, #92]	@ (8014ce0 <tcp_input_delayed_close+0x74>)
 8014c84:	f007 fc0a 	bl	801c49c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014c88:	4b16      	ldr	r3, [pc, #88]	@ (8014ce4 <tcp_input_delayed_close+0x78>)
 8014c8a:	781b      	ldrb	r3, [r3, #0]
 8014c8c:	f003 0310 	and.w	r3, r3, #16
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d01c      	beq.n	8014cce <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	8b5b      	ldrh	r3, [r3, #26]
 8014c98:	f003 0310 	and.w	r3, r3, #16
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d10d      	bne.n	8014cbc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d008      	beq.n	8014cbc <tcp_input_delayed_close+0x50>
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014cb0:	687a      	ldr	r2, [r7, #4]
 8014cb2:	6912      	ldr	r2, [r2, #16]
 8014cb4:	f06f 010e 	mvn.w	r1, #14
 8014cb8:	4610      	mov	r0, r2
 8014cba:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014cbc:	6879      	ldr	r1, [r7, #4]
 8014cbe:	480a      	ldr	r0, [pc, #40]	@ (8014ce8 <tcp_input_delayed_close+0x7c>)
 8014cc0:	f7ff fa50 	bl	8014164 <tcp_pcb_remove>
    tcp_free(pcb);
 8014cc4:	6878      	ldr	r0, [r7, #4]
 8014cc6:	f7fd fddd 	bl	8012884 <tcp_free>
    return 1;
 8014cca:	2301      	movs	r3, #1
 8014ccc:	e000      	b.n	8014cd0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8014cce:	2300      	movs	r3, #0
}
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	3708      	adds	r7, #8
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}
 8014cd8:	080204e0 	.word	0x080204e0
 8014cdc:	080206b0 	.word	0x080206b0
 8014ce0:	0802052c 	.word	0x0802052c
 8014ce4:	2000c911 	.word	0x2000c911
 8014ce8:	2000c8d8 	.word	0x2000c8d8

08014cec <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014cec:	b590      	push	{r4, r7, lr}
 8014cee:	b08b      	sub	sp, #44	@ 0x2c
 8014cf0:	af04      	add	r7, sp, #16
 8014cf2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8014eb4 <tcp_listen_input+0x1c8>)
 8014cf6:	781b      	ldrb	r3, [r3, #0]
 8014cf8:	f003 0304 	and.w	r3, r3, #4
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	f040 80d2 	bne.w	8014ea6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d106      	bne.n	8014d16 <tcp_listen_input+0x2a>
 8014d08:	4b6b      	ldr	r3, [pc, #428]	@ (8014eb8 <tcp_listen_input+0x1cc>)
 8014d0a:	f240 2281 	movw	r2, #641	@ 0x281
 8014d0e:	496b      	ldr	r1, [pc, #428]	@ (8014ebc <tcp_listen_input+0x1d0>)
 8014d10:	486b      	ldr	r0, [pc, #428]	@ (8014ec0 <tcp_listen_input+0x1d4>)
 8014d12:	f007 fbc3 	bl	801c49c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8014d16:	4b67      	ldr	r3, [pc, #412]	@ (8014eb4 <tcp_listen_input+0x1c8>)
 8014d18:	781b      	ldrb	r3, [r3, #0]
 8014d1a:	f003 0310 	and.w	r3, r3, #16
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d019      	beq.n	8014d56 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014d22:	4b68      	ldr	r3, [pc, #416]	@ (8014ec4 <tcp_listen_input+0x1d8>)
 8014d24:	6819      	ldr	r1, [r3, #0]
 8014d26:	4b68      	ldr	r3, [pc, #416]	@ (8014ec8 <tcp_listen_input+0x1dc>)
 8014d28:	881b      	ldrh	r3, [r3, #0]
 8014d2a:	461a      	mov	r2, r3
 8014d2c:	4b67      	ldr	r3, [pc, #412]	@ (8014ecc <tcp_listen_input+0x1e0>)
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014d32:	4b67      	ldr	r3, [pc, #412]	@ (8014ed0 <tcp_listen_input+0x1e4>)
 8014d34:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014d36:	885b      	ldrh	r3, [r3, #2]
 8014d38:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014d3a:	4a65      	ldr	r2, [pc, #404]	@ (8014ed0 <tcp_listen_input+0x1e4>)
 8014d3c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014d3e:	8812      	ldrh	r2, [r2, #0]
 8014d40:	b292      	uxth	r2, r2
 8014d42:	9202      	str	r2, [sp, #8]
 8014d44:	9301      	str	r3, [sp, #4]
 8014d46:	4b63      	ldr	r3, [pc, #396]	@ (8014ed4 <tcp_listen_input+0x1e8>)
 8014d48:	9300      	str	r3, [sp, #0]
 8014d4a:	4b63      	ldr	r3, [pc, #396]	@ (8014ed8 <tcp_listen_input+0x1ec>)
 8014d4c:	4602      	mov	r2, r0
 8014d4e:	6878      	ldr	r0, [r7, #4]
 8014d50:	f003 fbd2 	bl	80184f8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014d54:	e0a9      	b.n	8014eaa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8014d56:	4b57      	ldr	r3, [pc, #348]	@ (8014eb4 <tcp_listen_input+0x1c8>)
 8014d58:	781b      	ldrb	r3, [r3, #0]
 8014d5a:	f003 0302 	and.w	r3, r3, #2
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	f000 80a3 	beq.w	8014eaa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	7d5b      	ldrb	r3, [r3, #21]
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f7ff f8a1 	bl	8013eb0 <tcp_alloc>
 8014d6e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014d70:	697b      	ldr	r3, [r7, #20]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d111      	bne.n	8014d9a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	699b      	ldr	r3, [r3, #24]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d00a      	beq.n	8014d94 <tcp_listen_input+0xa8>
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	699b      	ldr	r3, [r3, #24]
 8014d82:	687a      	ldr	r2, [r7, #4]
 8014d84:	6910      	ldr	r0, [r2, #16]
 8014d86:	f04f 32ff 	mov.w	r2, #4294967295
 8014d8a:	2100      	movs	r1, #0
 8014d8c:	4798      	blx	r3
 8014d8e:	4603      	mov	r3, r0
 8014d90:	73bb      	strb	r3, [r7, #14]
      return;
 8014d92:	e08b      	b.n	8014eac <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014d94:	23f0      	movs	r3, #240	@ 0xf0
 8014d96:	73bb      	strb	r3, [r7, #14]
      return;
 8014d98:	e088      	b.n	8014eac <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014d9a:	4b50      	ldr	r3, [pc, #320]	@ (8014edc <tcp_listen_input+0x1f0>)
 8014d9c:	695a      	ldr	r2, [r3, #20]
 8014d9e:	697b      	ldr	r3, [r7, #20]
 8014da0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8014da2:	4b4e      	ldr	r3, [pc, #312]	@ (8014edc <tcp_listen_input+0x1f0>)
 8014da4:	691a      	ldr	r2, [r3, #16]
 8014da6:	697b      	ldr	r3, [r7, #20]
 8014da8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	8ada      	ldrh	r2, [r3, #22]
 8014dae:	697b      	ldr	r3, [r7, #20]
 8014db0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014db2:	4b47      	ldr	r3, [pc, #284]	@ (8014ed0 <tcp_listen_input+0x1e4>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	881b      	ldrh	r3, [r3, #0]
 8014db8:	b29a      	uxth	r2, r3
 8014dba:	697b      	ldr	r3, [r7, #20]
 8014dbc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014dbe:	697b      	ldr	r3, [r7, #20]
 8014dc0:	2203      	movs	r2, #3
 8014dc2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014dc4:	4b41      	ldr	r3, [pc, #260]	@ (8014ecc <tcp_listen_input+0x1e0>)
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	1c5a      	adds	r2, r3, #1
 8014dca:	697b      	ldr	r3, [r7, #20]
 8014dcc:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014dce:	697b      	ldr	r3, [r7, #20]
 8014dd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014dd2:	697b      	ldr	r3, [r7, #20]
 8014dd4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8014dd6:	6978      	ldr	r0, [r7, #20]
 8014dd8:	f7ff fa58 	bl	801428c <tcp_next_iss>
 8014ddc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014dde:	697b      	ldr	r3, [r7, #20]
 8014de0:	693a      	ldr	r2, [r7, #16]
 8014de2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8014de4:	697b      	ldr	r3, [r7, #20]
 8014de6:	693a      	ldr	r2, [r7, #16]
 8014de8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8014dea:	697b      	ldr	r3, [r7, #20]
 8014dec:	693a      	ldr	r2, [r7, #16]
 8014dee:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8014df0:	697b      	ldr	r3, [r7, #20]
 8014df2:	693a      	ldr	r2, [r7, #16]
 8014df4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014df6:	4b35      	ldr	r3, [pc, #212]	@ (8014ecc <tcp_listen_input+0x1e0>)
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	1e5a      	subs	r2, r3, #1
 8014dfc:	697b      	ldr	r3, [r7, #20]
 8014dfe:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	691a      	ldr	r2, [r3, #16]
 8014e04:	697b      	ldr	r3, [r7, #20]
 8014e06:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014e08:	697b      	ldr	r3, [r7, #20]
 8014e0a:	687a      	ldr	r2, [r7, #4]
 8014e0c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	7a5b      	ldrb	r3, [r3, #9]
 8014e12:	f003 030c 	and.w	r3, r3, #12
 8014e16:	b2da      	uxtb	r2, r3
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	7a1a      	ldrb	r2, [r3, #8]
 8014e20:	697b      	ldr	r3, [r7, #20]
 8014e22:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014e24:	4b2e      	ldr	r3, [pc, #184]	@ (8014ee0 <tcp_listen_input+0x1f4>)
 8014e26:	681a      	ldr	r2, [r3, #0]
 8014e28:	697b      	ldr	r3, [r7, #20]
 8014e2a:	60da      	str	r2, [r3, #12]
 8014e2c:	4a2c      	ldr	r2, [pc, #176]	@ (8014ee0 <tcp_listen_input+0x1f4>)
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	6013      	str	r3, [r2, #0]
 8014e32:	f003 fd23 	bl	801887c <tcp_timer_needed>
 8014e36:	4b2b      	ldr	r3, [pc, #172]	@ (8014ee4 <tcp_listen_input+0x1f8>)
 8014e38:	2201      	movs	r2, #1
 8014e3a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014e3c:	6978      	ldr	r0, [r7, #20]
 8014e3e:	f001 fd8b 	bl	8016958 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014e42:	4b23      	ldr	r3, [pc, #140]	@ (8014ed0 <tcp_listen_input+0x1e4>)
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	89db      	ldrh	r3, [r3, #14]
 8014e48:	b29a      	uxth	r2, r3
 8014e4a:	697b      	ldr	r3, [r7, #20]
 8014e4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014e50:	697b      	ldr	r3, [r7, #20]
 8014e52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014e56:	697b      	ldr	r3, [r7, #20]
 8014e58:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014e5c:	697b      	ldr	r3, [r7, #20]
 8014e5e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	3304      	adds	r3, #4
 8014e64:	4618      	mov	r0, r3
 8014e66:	f005 f8e5 	bl	801a034 <ip4_route>
 8014e6a:	4601      	mov	r1, r0
 8014e6c:	697b      	ldr	r3, [r7, #20]
 8014e6e:	3304      	adds	r3, #4
 8014e70:	461a      	mov	r2, r3
 8014e72:	4620      	mov	r0, r4
 8014e74:	f7ff fa30 	bl	80142d8 <tcp_eff_send_mss_netif>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	461a      	mov	r2, r3
 8014e7c:	697b      	ldr	r3, [r7, #20]
 8014e7e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014e80:	2112      	movs	r1, #18
 8014e82:	6978      	ldr	r0, [r7, #20]
 8014e84:	f002 fc96 	bl	80177b4 <tcp_enqueue_flags>
 8014e88:	4603      	mov	r3, r0
 8014e8a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d004      	beq.n	8014e9e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014e94:	2100      	movs	r1, #0
 8014e96:	6978      	ldr	r0, [r7, #20]
 8014e98:	f7fd ff1e 	bl	8012cd8 <tcp_abandon>
      return;
 8014e9c:	e006      	b.n	8014eac <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014e9e:	6978      	ldr	r0, [r7, #20]
 8014ea0:	f002 fd76 	bl	8017990 <tcp_output>
  return;
 8014ea4:	e001      	b.n	8014eaa <tcp_listen_input+0x1be>
    return;
 8014ea6:	bf00      	nop
 8014ea8:	e000      	b.n	8014eac <tcp_listen_input+0x1c0>
  return;
 8014eaa:	bf00      	nop
}
 8014eac:	371c      	adds	r7, #28
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	bd90      	pop	{r4, r7, pc}
 8014eb2:	bf00      	nop
 8014eb4:	2000c910 	.word	0x2000c910
 8014eb8:	080204e0 	.word	0x080204e0
 8014ebc:	080206d8 	.word	0x080206d8
 8014ec0:	0802052c 	.word	0x0802052c
 8014ec4:	2000c908 	.word	0x2000c908
 8014ec8:	2000c90e 	.word	0x2000c90e
 8014ecc:	2000c904 	.word	0x2000c904
 8014ed0:	2000c8f4 	.word	0x2000c8f4
 8014ed4:	20009188 	.word	0x20009188
 8014ed8:	2000918c 	.word	0x2000918c
 8014edc:	20009178 	.word	0x20009178
 8014ee0:	2000c8d8 	.word	0x2000c8d8
 8014ee4:	2000c8e0 	.word	0x2000c8e0

08014ee8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b086      	sub	sp, #24
 8014eec:	af04      	add	r7, sp, #16
 8014eee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8014fb0 <tcp_timewait_input+0xc8>)
 8014ef2:	781b      	ldrb	r3, [r3, #0]
 8014ef4:	f003 0304 	and.w	r3, r3, #4
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d153      	bne.n	8014fa4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d106      	bne.n	8014f10 <tcp_timewait_input+0x28>
 8014f02:	4b2c      	ldr	r3, [pc, #176]	@ (8014fb4 <tcp_timewait_input+0xcc>)
 8014f04:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014f08:	492b      	ldr	r1, [pc, #172]	@ (8014fb8 <tcp_timewait_input+0xd0>)
 8014f0a:	482c      	ldr	r0, [pc, #176]	@ (8014fbc <tcp_timewait_input+0xd4>)
 8014f0c:	f007 fac6 	bl	801c49c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014f10:	4b27      	ldr	r3, [pc, #156]	@ (8014fb0 <tcp_timewait_input+0xc8>)
 8014f12:	781b      	ldrb	r3, [r3, #0]
 8014f14:	f003 0302 	and.w	r3, r3, #2
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d02a      	beq.n	8014f72 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014f1c:	4b28      	ldr	r3, [pc, #160]	@ (8014fc0 <tcp_timewait_input+0xd8>)
 8014f1e:	681a      	ldr	r2, [r3, #0]
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f24:	1ad3      	subs	r3, r2, r3
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	db2d      	blt.n	8014f86 <tcp_timewait_input+0x9e>
 8014f2a:	4b25      	ldr	r3, [pc, #148]	@ (8014fc0 <tcp_timewait_input+0xd8>)
 8014f2c:	681a      	ldr	r2, [r3, #0]
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f32:	6879      	ldr	r1, [r7, #4]
 8014f34:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014f36:	440b      	add	r3, r1
 8014f38:	1ad3      	subs	r3, r2, r3
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	dc23      	bgt.n	8014f86 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f3e:	4b21      	ldr	r3, [pc, #132]	@ (8014fc4 <tcp_timewait_input+0xdc>)
 8014f40:	6819      	ldr	r1, [r3, #0]
 8014f42:	4b21      	ldr	r3, [pc, #132]	@ (8014fc8 <tcp_timewait_input+0xe0>)
 8014f44:	881b      	ldrh	r3, [r3, #0]
 8014f46:	461a      	mov	r2, r3
 8014f48:	4b1d      	ldr	r3, [pc, #116]	@ (8014fc0 <tcp_timewait_input+0xd8>)
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8014fcc <tcp_timewait_input+0xe4>)
 8014f50:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f52:	885b      	ldrh	r3, [r3, #2]
 8014f54:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014f56:	4a1d      	ldr	r2, [pc, #116]	@ (8014fcc <tcp_timewait_input+0xe4>)
 8014f58:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f5a:	8812      	ldrh	r2, [r2, #0]
 8014f5c:	b292      	uxth	r2, r2
 8014f5e:	9202      	str	r2, [sp, #8]
 8014f60:	9301      	str	r3, [sp, #4]
 8014f62:	4b1b      	ldr	r3, [pc, #108]	@ (8014fd0 <tcp_timewait_input+0xe8>)
 8014f64:	9300      	str	r3, [sp, #0]
 8014f66:	4b1b      	ldr	r3, [pc, #108]	@ (8014fd4 <tcp_timewait_input+0xec>)
 8014f68:	4602      	mov	r2, r0
 8014f6a:	6878      	ldr	r0, [r7, #4]
 8014f6c:	f003 fac4 	bl	80184f8 <tcp_rst>
      return;
 8014f70:	e01b      	b.n	8014faa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014f72:	4b0f      	ldr	r3, [pc, #60]	@ (8014fb0 <tcp_timewait_input+0xc8>)
 8014f74:	781b      	ldrb	r3, [r3, #0]
 8014f76:	f003 0301 	and.w	r3, r3, #1
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d003      	beq.n	8014f86 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014f7e:	4b16      	ldr	r3, [pc, #88]	@ (8014fd8 <tcp_timewait_input+0xf0>)
 8014f80:	681a      	ldr	r2, [r3, #0]
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014f86:	4b10      	ldr	r3, [pc, #64]	@ (8014fc8 <tcp_timewait_input+0xe0>)
 8014f88:	881b      	ldrh	r3, [r3, #0]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d00c      	beq.n	8014fa8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	8b5b      	ldrh	r3, [r3, #26]
 8014f92:	f043 0302 	orr.w	r3, r3, #2
 8014f96:	b29a      	uxth	r2, r3
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014f9c:	6878      	ldr	r0, [r7, #4]
 8014f9e:	f002 fcf7 	bl	8017990 <tcp_output>
  }
  return;
 8014fa2:	e001      	b.n	8014fa8 <tcp_timewait_input+0xc0>
    return;
 8014fa4:	bf00      	nop
 8014fa6:	e000      	b.n	8014faa <tcp_timewait_input+0xc2>
  return;
 8014fa8:	bf00      	nop
}
 8014faa:	3708      	adds	r7, #8
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bd80      	pop	{r7, pc}
 8014fb0:	2000c910 	.word	0x2000c910
 8014fb4:	080204e0 	.word	0x080204e0
 8014fb8:	080206f8 	.word	0x080206f8
 8014fbc:	0802052c 	.word	0x0802052c
 8014fc0:	2000c904 	.word	0x2000c904
 8014fc4:	2000c908 	.word	0x2000c908
 8014fc8:	2000c90e 	.word	0x2000c90e
 8014fcc:	2000c8f4 	.word	0x2000c8f4
 8014fd0:	20009188 	.word	0x20009188
 8014fd4:	2000918c 	.word	0x2000918c
 8014fd8:	2000c8cc 	.word	0x2000c8cc

08014fdc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014fdc:	b590      	push	{r4, r7, lr}
 8014fde:	b08d      	sub	sp, #52	@ 0x34
 8014fe0:	af04      	add	r7, sp, #16
 8014fe2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014fe8:	2300      	movs	r3, #0
 8014fea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d106      	bne.n	8015000 <tcp_process+0x24>
 8014ff2:	4b9d      	ldr	r3, [pc, #628]	@ (8015268 <tcp_process+0x28c>)
 8014ff4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8014ff8:	499c      	ldr	r1, [pc, #624]	@ (801526c <tcp_process+0x290>)
 8014ffa:	489d      	ldr	r0, [pc, #628]	@ (8015270 <tcp_process+0x294>)
 8014ffc:	f007 fa4e 	bl	801c49c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015000:	4b9c      	ldr	r3, [pc, #624]	@ (8015274 <tcp_process+0x298>)
 8015002:	781b      	ldrb	r3, [r3, #0]
 8015004:	f003 0304 	and.w	r3, r3, #4
 8015008:	2b00      	cmp	r3, #0
 801500a:	d04e      	beq.n	80150aa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	7d1b      	ldrb	r3, [r3, #20]
 8015010:	2b02      	cmp	r3, #2
 8015012:	d108      	bne.n	8015026 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015018:	4b97      	ldr	r3, [pc, #604]	@ (8015278 <tcp_process+0x29c>)
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	429a      	cmp	r2, r3
 801501e:	d123      	bne.n	8015068 <tcp_process+0x8c>
        acceptable = 1;
 8015020:	2301      	movs	r3, #1
 8015022:	76fb      	strb	r3, [r7, #27]
 8015024:	e020      	b.n	8015068 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801502a:	4b94      	ldr	r3, [pc, #592]	@ (801527c <tcp_process+0x2a0>)
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	429a      	cmp	r2, r3
 8015030:	d102      	bne.n	8015038 <tcp_process+0x5c>
        acceptable = 1;
 8015032:	2301      	movs	r3, #1
 8015034:	76fb      	strb	r3, [r7, #27]
 8015036:	e017      	b.n	8015068 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015038:	4b90      	ldr	r3, [pc, #576]	@ (801527c <tcp_process+0x2a0>)
 801503a:	681a      	ldr	r2, [r3, #0]
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015040:	1ad3      	subs	r3, r2, r3
 8015042:	2b00      	cmp	r3, #0
 8015044:	db10      	blt.n	8015068 <tcp_process+0x8c>
 8015046:	4b8d      	ldr	r3, [pc, #564]	@ (801527c <tcp_process+0x2a0>)
 8015048:	681a      	ldr	r2, [r3, #0]
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801504e:	6879      	ldr	r1, [r7, #4]
 8015050:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015052:	440b      	add	r3, r1
 8015054:	1ad3      	subs	r3, r2, r3
 8015056:	2b00      	cmp	r3, #0
 8015058:	dc06      	bgt.n	8015068 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	8b5b      	ldrh	r3, [r3, #26]
 801505e:	f043 0302 	orr.w	r3, r3, #2
 8015062:	b29a      	uxth	r2, r3
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015068:	7efb      	ldrb	r3, [r7, #27]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d01b      	beq.n	80150a6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	7d1b      	ldrb	r3, [r3, #20]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d106      	bne.n	8015084 <tcp_process+0xa8>
 8015076:	4b7c      	ldr	r3, [pc, #496]	@ (8015268 <tcp_process+0x28c>)
 8015078:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801507c:	4980      	ldr	r1, [pc, #512]	@ (8015280 <tcp_process+0x2a4>)
 801507e:	487c      	ldr	r0, [pc, #496]	@ (8015270 <tcp_process+0x294>)
 8015080:	f007 fa0c 	bl	801c49c <iprintf>
      recv_flags |= TF_RESET;
 8015084:	4b7f      	ldr	r3, [pc, #508]	@ (8015284 <tcp_process+0x2a8>)
 8015086:	781b      	ldrb	r3, [r3, #0]
 8015088:	f043 0308 	orr.w	r3, r3, #8
 801508c:	b2da      	uxtb	r2, r3
 801508e:	4b7d      	ldr	r3, [pc, #500]	@ (8015284 <tcp_process+0x2a8>)
 8015090:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	8b5b      	ldrh	r3, [r3, #26]
 8015096:	f023 0301 	bic.w	r3, r3, #1
 801509a:	b29a      	uxth	r2, r3
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80150a0:	f06f 030d 	mvn.w	r3, #13
 80150a4:	e37a      	b.n	801579c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80150a6:	2300      	movs	r3, #0
 80150a8:	e378      	b.n	801579c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80150aa:	4b72      	ldr	r3, [pc, #456]	@ (8015274 <tcp_process+0x298>)
 80150ac:	781b      	ldrb	r3, [r3, #0]
 80150ae:	f003 0302 	and.w	r3, r3, #2
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d010      	beq.n	80150d8 <tcp_process+0xfc>
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	7d1b      	ldrb	r3, [r3, #20]
 80150ba:	2b02      	cmp	r3, #2
 80150bc:	d00c      	beq.n	80150d8 <tcp_process+0xfc>
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	7d1b      	ldrb	r3, [r3, #20]
 80150c2:	2b03      	cmp	r3, #3
 80150c4:	d008      	beq.n	80150d8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	8b5b      	ldrh	r3, [r3, #26]
 80150ca:	f043 0302 	orr.w	r3, r3, #2
 80150ce:	b29a      	uxth	r2, r3
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80150d4:	2300      	movs	r3, #0
 80150d6:	e361      	b.n	801579c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	8b5b      	ldrh	r3, [r3, #26]
 80150dc:	f003 0310 	and.w	r3, r3, #16
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d103      	bne.n	80150ec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80150e4:	4b68      	ldr	r3, [pc, #416]	@ (8015288 <tcp_process+0x2ac>)
 80150e6:	681a      	ldr	r2, [r3, #0]
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	2200      	movs	r2, #0
 80150f0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	2200      	movs	r2, #0
 80150f8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80150fc:	6878      	ldr	r0, [r7, #4]
 80150fe:	f001 fc2b 	bl	8016958 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	7d1b      	ldrb	r3, [r3, #20]
 8015106:	3b02      	subs	r3, #2
 8015108:	2b07      	cmp	r3, #7
 801510a:	f200 8337 	bhi.w	801577c <tcp_process+0x7a0>
 801510e:	a201      	add	r2, pc, #4	@ (adr r2, 8015114 <tcp_process+0x138>)
 8015110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015114:	08015135 	.word	0x08015135
 8015118:	08015365 	.word	0x08015365
 801511c:	080154dd 	.word	0x080154dd
 8015120:	08015507 	.word	0x08015507
 8015124:	0801562b 	.word	0x0801562b
 8015128:	080154dd 	.word	0x080154dd
 801512c:	080156b7 	.word	0x080156b7
 8015130:	08015747 	.word	0x08015747
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015134:	4b4f      	ldr	r3, [pc, #316]	@ (8015274 <tcp_process+0x298>)
 8015136:	781b      	ldrb	r3, [r3, #0]
 8015138:	f003 0310 	and.w	r3, r3, #16
 801513c:	2b00      	cmp	r3, #0
 801513e:	f000 80e4 	beq.w	801530a <tcp_process+0x32e>
 8015142:	4b4c      	ldr	r3, [pc, #304]	@ (8015274 <tcp_process+0x298>)
 8015144:	781b      	ldrb	r3, [r3, #0]
 8015146:	f003 0302 	and.w	r3, r3, #2
 801514a:	2b00      	cmp	r3, #0
 801514c:	f000 80dd 	beq.w	801530a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015154:	1c5a      	adds	r2, r3, #1
 8015156:	4b48      	ldr	r3, [pc, #288]	@ (8015278 <tcp_process+0x29c>)
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	429a      	cmp	r2, r3
 801515c:	f040 80d5 	bne.w	801530a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015160:	4b46      	ldr	r3, [pc, #280]	@ (801527c <tcp_process+0x2a0>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	1c5a      	adds	r2, r3, #1
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8015172:	4b41      	ldr	r3, [pc, #260]	@ (8015278 <tcp_process+0x29c>)
 8015174:	681a      	ldr	r2, [r3, #0]
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801517a:	4b44      	ldr	r3, [pc, #272]	@ (801528c <tcp_process+0x2b0>)
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	89db      	ldrh	r3, [r3, #14]
 8015180:	b29a      	uxth	r2, r3
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015194:	4b39      	ldr	r3, [pc, #228]	@ (801527c <tcp_process+0x2a0>)
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	1e5a      	subs	r2, r3, #1
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	2204      	movs	r2, #4
 80151a2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	3304      	adds	r3, #4
 80151ac:	4618      	mov	r0, r3
 80151ae:	f004 ff41 	bl	801a034 <ip4_route>
 80151b2:	4601      	mov	r1, r0
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	3304      	adds	r3, #4
 80151b8:	461a      	mov	r2, r3
 80151ba:	4620      	mov	r0, r4
 80151bc:	f7ff f88c 	bl	80142d8 <tcp_eff_send_mss_netif>
 80151c0:	4603      	mov	r3, r0
 80151c2:	461a      	mov	r2, r3
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80151cc:	009a      	lsls	r2, r3, #2
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80151d2:	005b      	lsls	r3, r3, #1
 80151d4:	f241 111c 	movw	r1, #4380	@ 0x111c
 80151d8:	428b      	cmp	r3, r1
 80151da:	bf38      	it	cc
 80151dc:	460b      	movcc	r3, r1
 80151de:	429a      	cmp	r2, r3
 80151e0:	d204      	bcs.n	80151ec <tcp_process+0x210>
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80151e6:	009b      	lsls	r3, r3, #2
 80151e8:	b29b      	uxth	r3, r3
 80151ea:	e00d      	b.n	8015208 <tcp_process+0x22c>
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80151f0:	005b      	lsls	r3, r3, #1
 80151f2:	f241 121c 	movw	r2, #4380	@ 0x111c
 80151f6:	4293      	cmp	r3, r2
 80151f8:	d904      	bls.n	8015204 <tcp_process+0x228>
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80151fe:	005b      	lsls	r3, r3, #1
 8015200:	b29b      	uxth	r3, r3
 8015202:	e001      	b.n	8015208 <tcp_process+0x22c>
 8015204:	f241 131c 	movw	r3, #4380	@ 0x111c
 8015208:	687a      	ldr	r2, [r7, #4]
 801520a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015214:	2b00      	cmp	r3, #0
 8015216:	d106      	bne.n	8015226 <tcp_process+0x24a>
 8015218:	4b13      	ldr	r3, [pc, #76]	@ (8015268 <tcp_process+0x28c>)
 801521a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801521e:	491c      	ldr	r1, [pc, #112]	@ (8015290 <tcp_process+0x2b4>)
 8015220:	4813      	ldr	r0, [pc, #76]	@ (8015270 <tcp_process+0x294>)
 8015222:	f007 f93b 	bl	801c49c <iprintf>
        --pcb->snd_queuelen;
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801522c:	3b01      	subs	r3, #1
 801522e:	b29a      	uxth	r2, r3
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801523a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801523c:	69fb      	ldr	r3, [r7, #28]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d12a      	bne.n	8015298 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015246:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015248:	69fb      	ldr	r3, [r7, #28]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d106      	bne.n	801525c <tcp_process+0x280>
 801524e:	4b06      	ldr	r3, [pc, #24]	@ (8015268 <tcp_process+0x28c>)
 8015250:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8015254:	490f      	ldr	r1, [pc, #60]	@ (8015294 <tcp_process+0x2b8>)
 8015256:	4806      	ldr	r0, [pc, #24]	@ (8015270 <tcp_process+0x294>)
 8015258:	f007 f920 	bl	801c49c <iprintf>
          pcb->unsent = rseg->next;
 801525c:	69fb      	ldr	r3, [r7, #28]
 801525e:	681a      	ldr	r2, [r3, #0]
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015264:	e01c      	b.n	80152a0 <tcp_process+0x2c4>
 8015266:	bf00      	nop
 8015268:	080204e0 	.word	0x080204e0
 801526c:	08020718 	.word	0x08020718
 8015270:	0802052c 	.word	0x0802052c
 8015274:	2000c910 	.word	0x2000c910
 8015278:	2000c908 	.word	0x2000c908
 801527c:	2000c904 	.word	0x2000c904
 8015280:	08020734 	.word	0x08020734
 8015284:	2000c911 	.word	0x2000c911
 8015288:	2000c8cc 	.word	0x2000c8cc
 801528c:	2000c8f4 	.word	0x2000c8f4
 8015290:	08020754 	.word	0x08020754
 8015294:	0802076c 	.word	0x0802076c
        } else {
          pcb->unacked = rseg->next;
 8015298:	69fb      	ldr	r3, [r7, #28]
 801529a:	681a      	ldr	r2, [r3, #0]
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80152a0:	69f8      	ldr	r0, [r7, #28]
 80152a2:	f7fe fc7e 	bl	8013ba2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d104      	bne.n	80152b8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80152b4:	861a      	strh	r2, [r3, #48]	@ 0x30
 80152b6:	e006      	b.n	80152c6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	2200      	movs	r2, #0
 80152bc:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	2200      	movs	r2, #0
 80152c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d00a      	beq.n	80152e6 <tcp_process+0x30a>
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80152d6:	687a      	ldr	r2, [r7, #4]
 80152d8:	6910      	ldr	r0, [r2, #16]
 80152da:	2200      	movs	r2, #0
 80152dc:	6879      	ldr	r1, [r7, #4]
 80152de:	4798      	blx	r3
 80152e0:	4603      	mov	r3, r0
 80152e2:	76bb      	strb	r3, [r7, #26]
 80152e4:	e001      	b.n	80152ea <tcp_process+0x30e>
 80152e6:	2300      	movs	r3, #0
 80152e8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80152ea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80152ee:	f113 0f0d 	cmn.w	r3, #13
 80152f2:	d102      	bne.n	80152fa <tcp_process+0x31e>
          return ERR_ABRT;
 80152f4:	f06f 030c 	mvn.w	r3, #12
 80152f8:	e250      	b.n	801579c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	8b5b      	ldrh	r3, [r3, #26]
 80152fe:	f043 0302 	orr.w	r3, r3, #2
 8015302:	b29a      	uxth	r2, r3
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015308:	e23a      	b.n	8015780 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801530a:	4b98      	ldr	r3, [pc, #608]	@ (801556c <tcp_process+0x590>)
 801530c:	781b      	ldrb	r3, [r3, #0]
 801530e:	f003 0310 	and.w	r3, r3, #16
 8015312:	2b00      	cmp	r3, #0
 8015314:	f000 8234 	beq.w	8015780 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015318:	4b95      	ldr	r3, [pc, #596]	@ (8015570 <tcp_process+0x594>)
 801531a:	6819      	ldr	r1, [r3, #0]
 801531c:	4b95      	ldr	r3, [pc, #596]	@ (8015574 <tcp_process+0x598>)
 801531e:	881b      	ldrh	r3, [r3, #0]
 8015320:	461a      	mov	r2, r3
 8015322:	4b95      	ldr	r3, [pc, #596]	@ (8015578 <tcp_process+0x59c>)
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015328:	4b94      	ldr	r3, [pc, #592]	@ (801557c <tcp_process+0x5a0>)
 801532a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801532c:	885b      	ldrh	r3, [r3, #2]
 801532e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015330:	4a92      	ldr	r2, [pc, #584]	@ (801557c <tcp_process+0x5a0>)
 8015332:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015334:	8812      	ldrh	r2, [r2, #0]
 8015336:	b292      	uxth	r2, r2
 8015338:	9202      	str	r2, [sp, #8]
 801533a:	9301      	str	r3, [sp, #4]
 801533c:	4b90      	ldr	r3, [pc, #576]	@ (8015580 <tcp_process+0x5a4>)
 801533e:	9300      	str	r3, [sp, #0]
 8015340:	4b90      	ldr	r3, [pc, #576]	@ (8015584 <tcp_process+0x5a8>)
 8015342:	4602      	mov	r2, r0
 8015344:	6878      	ldr	r0, [r7, #4]
 8015346:	f003 f8d7 	bl	80184f8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015350:	2b05      	cmp	r3, #5
 8015352:	f200 8215 	bhi.w	8015780 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	2200      	movs	r2, #0
 801535a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 801535c:	6878      	ldr	r0, [r7, #4]
 801535e:	f002 fea3 	bl	80180a8 <tcp_rexmit_rto>
      break;
 8015362:	e20d      	b.n	8015780 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8015364:	4b81      	ldr	r3, [pc, #516]	@ (801556c <tcp_process+0x590>)
 8015366:	781b      	ldrb	r3, [r3, #0]
 8015368:	f003 0310 	and.w	r3, r3, #16
 801536c:	2b00      	cmp	r3, #0
 801536e:	f000 80a1 	beq.w	80154b4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015372:	4b7f      	ldr	r3, [pc, #508]	@ (8015570 <tcp_process+0x594>)
 8015374:	681a      	ldr	r2, [r3, #0]
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801537a:	1ad3      	subs	r3, r2, r3
 801537c:	3b01      	subs	r3, #1
 801537e:	2b00      	cmp	r3, #0
 8015380:	db7e      	blt.n	8015480 <tcp_process+0x4a4>
 8015382:	4b7b      	ldr	r3, [pc, #492]	@ (8015570 <tcp_process+0x594>)
 8015384:	681a      	ldr	r2, [r3, #0]
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801538a:	1ad3      	subs	r3, r2, r3
 801538c:	2b00      	cmp	r3, #0
 801538e:	dc77      	bgt.n	8015480 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	2204      	movs	r2, #4
 8015394:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801539a:	2b00      	cmp	r3, #0
 801539c:	d102      	bne.n	80153a4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801539e:	23fa      	movs	r3, #250	@ 0xfa
 80153a0:	76bb      	strb	r3, [r7, #26]
 80153a2:	e01d      	b.n	80153e0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80153a8:	699b      	ldr	r3, [r3, #24]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d106      	bne.n	80153bc <tcp_process+0x3e0>
 80153ae:	4b76      	ldr	r3, [pc, #472]	@ (8015588 <tcp_process+0x5ac>)
 80153b0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80153b4:	4975      	ldr	r1, [pc, #468]	@ (801558c <tcp_process+0x5b0>)
 80153b6:	4876      	ldr	r0, [pc, #472]	@ (8015590 <tcp_process+0x5b4>)
 80153b8:	f007 f870 	bl	801c49c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80153c0:	699b      	ldr	r3, [r3, #24]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d00a      	beq.n	80153dc <tcp_process+0x400>
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80153ca:	699b      	ldr	r3, [r3, #24]
 80153cc:	687a      	ldr	r2, [r7, #4]
 80153ce:	6910      	ldr	r0, [r2, #16]
 80153d0:	2200      	movs	r2, #0
 80153d2:	6879      	ldr	r1, [r7, #4]
 80153d4:	4798      	blx	r3
 80153d6:	4603      	mov	r3, r0
 80153d8:	76bb      	strb	r3, [r7, #26]
 80153da:	e001      	b.n	80153e0 <tcp_process+0x404>
 80153dc:	23f0      	movs	r3, #240	@ 0xf0
 80153de:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80153e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d00a      	beq.n	80153fe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80153e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80153ec:	f113 0f0d 	cmn.w	r3, #13
 80153f0:	d002      	beq.n	80153f8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80153f2:	6878      	ldr	r0, [r7, #4]
 80153f4:	f7fd fd2e 	bl	8012e54 <tcp_abort>
            }
            return ERR_ABRT;
 80153f8:	f06f 030c 	mvn.w	r3, #12
 80153fc:	e1ce      	b.n	801579c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80153fe:	6878      	ldr	r0, [r7, #4]
 8015400:	f000 fae0 	bl	80159c4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015404:	4b63      	ldr	r3, [pc, #396]	@ (8015594 <tcp_process+0x5b8>)
 8015406:	881b      	ldrh	r3, [r3, #0]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d005      	beq.n	8015418 <tcp_process+0x43c>
            recv_acked--;
 801540c:	4b61      	ldr	r3, [pc, #388]	@ (8015594 <tcp_process+0x5b8>)
 801540e:	881b      	ldrh	r3, [r3, #0]
 8015410:	3b01      	subs	r3, #1
 8015412:	b29a      	uxth	r2, r3
 8015414:	4b5f      	ldr	r3, [pc, #380]	@ (8015594 <tcp_process+0x5b8>)
 8015416:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801541c:	009a      	lsls	r2, r3, #2
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015422:	005b      	lsls	r3, r3, #1
 8015424:	f241 111c 	movw	r1, #4380	@ 0x111c
 8015428:	428b      	cmp	r3, r1
 801542a:	bf38      	it	cc
 801542c:	460b      	movcc	r3, r1
 801542e:	429a      	cmp	r2, r3
 8015430:	d204      	bcs.n	801543c <tcp_process+0x460>
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015436:	009b      	lsls	r3, r3, #2
 8015438:	b29b      	uxth	r3, r3
 801543a:	e00d      	b.n	8015458 <tcp_process+0x47c>
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015440:	005b      	lsls	r3, r3, #1
 8015442:	f241 121c 	movw	r2, #4380	@ 0x111c
 8015446:	4293      	cmp	r3, r2
 8015448:	d904      	bls.n	8015454 <tcp_process+0x478>
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801544e:	005b      	lsls	r3, r3, #1
 8015450:	b29b      	uxth	r3, r3
 8015452:	e001      	b.n	8015458 <tcp_process+0x47c>
 8015454:	f241 131c 	movw	r3, #4380	@ 0x111c
 8015458:	687a      	ldr	r2, [r7, #4]
 801545a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801545e:	4b4e      	ldr	r3, [pc, #312]	@ (8015598 <tcp_process+0x5bc>)
 8015460:	781b      	ldrb	r3, [r3, #0]
 8015462:	f003 0320 	and.w	r3, r3, #32
 8015466:	2b00      	cmp	r3, #0
 8015468:	d037      	beq.n	80154da <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	8b5b      	ldrh	r3, [r3, #26]
 801546e:	f043 0302 	orr.w	r3, r3, #2
 8015472:	b29a      	uxth	r2, r3
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	2207      	movs	r2, #7
 801547c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801547e:	e02c      	b.n	80154da <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015480:	4b3b      	ldr	r3, [pc, #236]	@ (8015570 <tcp_process+0x594>)
 8015482:	6819      	ldr	r1, [r3, #0]
 8015484:	4b3b      	ldr	r3, [pc, #236]	@ (8015574 <tcp_process+0x598>)
 8015486:	881b      	ldrh	r3, [r3, #0]
 8015488:	461a      	mov	r2, r3
 801548a:	4b3b      	ldr	r3, [pc, #236]	@ (8015578 <tcp_process+0x59c>)
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015490:	4b3a      	ldr	r3, [pc, #232]	@ (801557c <tcp_process+0x5a0>)
 8015492:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015494:	885b      	ldrh	r3, [r3, #2]
 8015496:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015498:	4a38      	ldr	r2, [pc, #224]	@ (801557c <tcp_process+0x5a0>)
 801549a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801549c:	8812      	ldrh	r2, [r2, #0]
 801549e:	b292      	uxth	r2, r2
 80154a0:	9202      	str	r2, [sp, #8]
 80154a2:	9301      	str	r3, [sp, #4]
 80154a4:	4b36      	ldr	r3, [pc, #216]	@ (8015580 <tcp_process+0x5a4>)
 80154a6:	9300      	str	r3, [sp, #0]
 80154a8:	4b36      	ldr	r3, [pc, #216]	@ (8015584 <tcp_process+0x5a8>)
 80154aa:	4602      	mov	r2, r0
 80154ac:	6878      	ldr	r0, [r7, #4]
 80154ae:	f003 f823 	bl	80184f8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80154b2:	e167      	b.n	8015784 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80154b4:	4b2d      	ldr	r3, [pc, #180]	@ (801556c <tcp_process+0x590>)
 80154b6:	781b      	ldrb	r3, [r3, #0]
 80154b8:	f003 0302 	and.w	r3, r3, #2
 80154bc:	2b00      	cmp	r3, #0
 80154be:	f000 8161 	beq.w	8015784 <tcp_process+0x7a8>
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154c6:	1e5a      	subs	r2, r3, #1
 80154c8:	4b2b      	ldr	r3, [pc, #172]	@ (8015578 <tcp_process+0x59c>)
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	429a      	cmp	r2, r3
 80154ce:	f040 8159 	bne.w	8015784 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80154d2:	6878      	ldr	r0, [r7, #4]
 80154d4:	f002 fe0a 	bl	80180ec <tcp_rexmit>
      break;
 80154d8:	e154      	b.n	8015784 <tcp_process+0x7a8>
 80154da:	e153      	b.n	8015784 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80154dc:	6878      	ldr	r0, [r7, #4]
 80154de:	f000 fa71 	bl	80159c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80154e2:	4b2d      	ldr	r3, [pc, #180]	@ (8015598 <tcp_process+0x5bc>)
 80154e4:	781b      	ldrb	r3, [r3, #0]
 80154e6:	f003 0320 	and.w	r3, r3, #32
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	f000 814c 	beq.w	8015788 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	8b5b      	ldrh	r3, [r3, #26]
 80154f4:	f043 0302 	orr.w	r3, r3, #2
 80154f8:	b29a      	uxth	r2, r3
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	2207      	movs	r2, #7
 8015502:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015504:	e140      	b.n	8015788 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8015506:	6878      	ldr	r0, [r7, #4]
 8015508:	f000 fa5c 	bl	80159c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801550c:	4b22      	ldr	r3, [pc, #136]	@ (8015598 <tcp_process+0x5bc>)
 801550e:	781b      	ldrb	r3, [r3, #0]
 8015510:	f003 0320 	and.w	r3, r3, #32
 8015514:	2b00      	cmp	r3, #0
 8015516:	d071      	beq.n	80155fc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015518:	4b14      	ldr	r3, [pc, #80]	@ (801556c <tcp_process+0x590>)
 801551a:	781b      	ldrb	r3, [r3, #0]
 801551c:	f003 0310 	and.w	r3, r3, #16
 8015520:	2b00      	cmp	r3, #0
 8015522:	d060      	beq.n	80155e6 <tcp_process+0x60a>
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015528:	4b11      	ldr	r3, [pc, #68]	@ (8015570 <tcp_process+0x594>)
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	429a      	cmp	r2, r3
 801552e:	d15a      	bne.n	80155e6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015534:	2b00      	cmp	r3, #0
 8015536:	d156      	bne.n	80155e6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	8b5b      	ldrh	r3, [r3, #26]
 801553c:	f043 0302 	orr.w	r3, r3, #2
 8015540:	b29a      	uxth	r2, r3
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	f7fe fdbc 	bl	80140c4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801554c:	4b13      	ldr	r3, [pc, #76]	@ (801559c <tcp_process+0x5c0>)
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	687a      	ldr	r2, [r7, #4]
 8015552:	429a      	cmp	r2, r3
 8015554:	d105      	bne.n	8015562 <tcp_process+0x586>
 8015556:	4b11      	ldr	r3, [pc, #68]	@ (801559c <tcp_process+0x5c0>)
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	68db      	ldr	r3, [r3, #12]
 801555c:	4a0f      	ldr	r2, [pc, #60]	@ (801559c <tcp_process+0x5c0>)
 801555e:	6013      	str	r3, [r2, #0]
 8015560:	e02e      	b.n	80155c0 <tcp_process+0x5e4>
 8015562:	4b0e      	ldr	r3, [pc, #56]	@ (801559c <tcp_process+0x5c0>)
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	617b      	str	r3, [r7, #20]
 8015568:	e027      	b.n	80155ba <tcp_process+0x5de>
 801556a:	bf00      	nop
 801556c:	2000c910 	.word	0x2000c910
 8015570:	2000c908 	.word	0x2000c908
 8015574:	2000c90e 	.word	0x2000c90e
 8015578:	2000c904 	.word	0x2000c904
 801557c:	2000c8f4 	.word	0x2000c8f4
 8015580:	20009188 	.word	0x20009188
 8015584:	2000918c 	.word	0x2000918c
 8015588:	080204e0 	.word	0x080204e0
 801558c:	08020780 	.word	0x08020780
 8015590:	0802052c 	.word	0x0802052c
 8015594:	2000c90c 	.word	0x2000c90c
 8015598:	2000c911 	.word	0x2000c911
 801559c:	2000c8d8 	.word	0x2000c8d8
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	68db      	ldr	r3, [r3, #12]
 80155a4:	687a      	ldr	r2, [r7, #4]
 80155a6:	429a      	cmp	r2, r3
 80155a8:	d104      	bne.n	80155b4 <tcp_process+0x5d8>
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	68da      	ldr	r2, [r3, #12]
 80155ae:	697b      	ldr	r3, [r7, #20]
 80155b0:	60da      	str	r2, [r3, #12]
 80155b2:	e005      	b.n	80155c0 <tcp_process+0x5e4>
 80155b4:	697b      	ldr	r3, [r7, #20]
 80155b6:	68db      	ldr	r3, [r3, #12]
 80155b8:	617b      	str	r3, [r7, #20]
 80155ba:	697b      	ldr	r3, [r7, #20]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d1ef      	bne.n	80155a0 <tcp_process+0x5c4>
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	2200      	movs	r2, #0
 80155c4:	60da      	str	r2, [r3, #12]
 80155c6:	4b77      	ldr	r3, [pc, #476]	@ (80157a4 <tcp_process+0x7c8>)
 80155c8:	2201      	movs	r2, #1
 80155ca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	220a      	movs	r2, #10
 80155d0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80155d2:	4b75      	ldr	r3, [pc, #468]	@ (80157a8 <tcp_process+0x7cc>)
 80155d4:	681a      	ldr	r2, [r3, #0]
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	60da      	str	r2, [r3, #12]
 80155da:	4a73      	ldr	r2, [pc, #460]	@ (80157a8 <tcp_process+0x7cc>)
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	6013      	str	r3, [r2, #0]
 80155e0:	f003 f94c 	bl	801887c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80155e4:	e0d2      	b.n	801578c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	8b5b      	ldrh	r3, [r3, #26]
 80155ea:	f043 0302 	orr.w	r3, r3, #2
 80155ee:	b29a      	uxth	r2, r3
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	2208      	movs	r2, #8
 80155f8:	751a      	strb	r2, [r3, #20]
      break;
 80155fa:	e0c7      	b.n	801578c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80155fc:	4b6b      	ldr	r3, [pc, #428]	@ (80157ac <tcp_process+0x7d0>)
 80155fe:	781b      	ldrb	r3, [r3, #0]
 8015600:	f003 0310 	and.w	r3, r3, #16
 8015604:	2b00      	cmp	r3, #0
 8015606:	f000 80c1 	beq.w	801578c <tcp_process+0x7b0>
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801560e:	4b68      	ldr	r3, [pc, #416]	@ (80157b0 <tcp_process+0x7d4>)
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	429a      	cmp	r2, r3
 8015614:	f040 80ba 	bne.w	801578c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801561c:	2b00      	cmp	r3, #0
 801561e:	f040 80b5 	bne.w	801578c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	2206      	movs	r2, #6
 8015626:	751a      	strb	r2, [r3, #20]
      break;
 8015628:	e0b0      	b.n	801578c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801562a:	6878      	ldr	r0, [r7, #4]
 801562c:	f000 f9ca 	bl	80159c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015630:	4b60      	ldr	r3, [pc, #384]	@ (80157b4 <tcp_process+0x7d8>)
 8015632:	781b      	ldrb	r3, [r3, #0]
 8015634:	f003 0320 	and.w	r3, r3, #32
 8015638:	2b00      	cmp	r3, #0
 801563a:	f000 80a9 	beq.w	8015790 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	8b5b      	ldrh	r3, [r3, #26]
 8015642:	f043 0302 	orr.w	r3, r3, #2
 8015646:	b29a      	uxth	r2, r3
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801564c:	6878      	ldr	r0, [r7, #4]
 801564e:	f7fe fd39 	bl	80140c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015652:	4b59      	ldr	r3, [pc, #356]	@ (80157b8 <tcp_process+0x7dc>)
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	687a      	ldr	r2, [r7, #4]
 8015658:	429a      	cmp	r2, r3
 801565a:	d105      	bne.n	8015668 <tcp_process+0x68c>
 801565c:	4b56      	ldr	r3, [pc, #344]	@ (80157b8 <tcp_process+0x7dc>)
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	68db      	ldr	r3, [r3, #12]
 8015662:	4a55      	ldr	r2, [pc, #340]	@ (80157b8 <tcp_process+0x7dc>)
 8015664:	6013      	str	r3, [r2, #0]
 8015666:	e013      	b.n	8015690 <tcp_process+0x6b4>
 8015668:	4b53      	ldr	r3, [pc, #332]	@ (80157b8 <tcp_process+0x7dc>)
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	613b      	str	r3, [r7, #16]
 801566e:	e00c      	b.n	801568a <tcp_process+0x6ae>
 8015670:	693b      	ldr	r3, [r7, #16]
 8015672:	68db      	ldr	r3, [r3, #12]
 8015674:	687a      	ldr	r2, [r7, #4]
 8015676:	429a      	cmp	r2, r3
 8015678:	d104      	bne.n	8015684 <tcp_process+0x6a8>
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	68da      	ldr	r2, [r3, #12]
 801567e:	693b      	ldr	r3, [r7, #16]
 8015680:	60da      	str	r2, [r3, #12]
 8015682:	e005      	b.n	8015690 <tcp_process+0x6b4>
 8015684:	693b      	ldr	r3, [r7, #16]
 8015686:	68db      	ldr	r3, [r3, #12]
 8015688:	613b      	str	r3, [r7, #16]
 801568a:	693b      	ldr	r3, [r7, #16]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d1ef      	bne.n	8015670 <tcp_process+0x694>
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	2200      	movs	r2, #0
 8015694:	60da      	str	r2, [r3, #12]
 8015696:	4b43      	ldr	r3, [pc, #268]	@ (80157a4 <tcp_process+0x7c8>)
 8015698:	2201      	movs	r2, #1
 801569a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	220a      	movs	r2, #10
 80156a0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80156a2:	4b41      	ldr	r3, [pc, #260]	@ (80157a8 <tcp_process+0x7cc>)
 80156a4:	681a      	ldr	r2, [r3, #0]
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	60da      	str	r2, [r3, #12]
 80156aa:	4a3f      	ldr	r2, [pc, #252]	@ (80157a8 <tcp_process+0x7cc>)
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	6013      	str	r3, [r2, #0]
 80156b0:	f003 f8e4 	bl	801887c <tcp_timer_needed>
      }
      break;
 80156b4:	e06c      	b.n	8015790 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80156b6:	6878      	ldr	r0, [r7, #4]
 80156b8:	f000 f984 	bl	80159c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80156bc:	4b3b      	ldr	r3, [pc, #236]	@ (80157ac <tcp_process+0x7d0>)
 80156be:	781b      	ldrb	r3, [r3, #0]
 80156c0:	f003 0310 	and.w	r3, r3, #16
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d065      	beq.n	8015794 <tcp_process+0x7b8>
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80156cc:	4b38      	ldr	r3, [pc, #224]	@ (80157b0 <tcp_process+0x7d4>)
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	429a      	cmp	r2, r3
 80156d2:	d15f      	bne.n	8015794 <tcp_process+0x7b8>
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d15b      	bne.n	8015794 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80156dc:	6878      	ldr	r0, [r7, #4]
 80156de:	f7fe fcf1 	bl	80140c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80156e2:	4b35      	ldr	r3, [pc, #212]	@ (80157b8 <tcp_process+0x7dc>)
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	687a      	ldr	r2, [r7, #4]
 80156e8:	429a      	cmp	r2, r3
 80156ea:	d105      	bne.n	80156f8 <tcp_process+0x71c>
 80156ec:	4b32      	ldr	r3, [pc, #200]	@ (80157b8 <tcp_process+0x7dc>)
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	68db      	ldr	r3, [r3, #12]
 80156f2:	4a31      	ldr	r2, [pc, #196]	@ (80157b8 <tcp_process+0x7dc>)
 80156f4:	6013      	str	r3, [r2, #0]
 80156f6:	e013      	b.n	8015720 <tcp_process+0x744>
 80156f8:	4b2f      	ldr	r3, [pc, #188]	@ (80157b8 <tcp_process+0x7dc>)
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	60fb      	str	r3, [r7, #12]
 80156fe:	e00c      	b.n	801571a <tcp_process+0x73e>
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	68db      	ldr	r3, [r3, #12]
 8015704:	687a      	ldr	r2, [r7, #4]
 8015706:	429a      	cmp	r2, r3
 8015708:	d104      	bne.n	8015714 <tcp_process+0x738>
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	68da      	ldr	r2, [r3, #12]
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	60da      	str	r2, [r3, #12]
 8015712:	e005      	b.n	8015720 <tcp_process+0x744>
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	68db      	ldr	r3, [r3, #12]
 8015718:	60fb      	str	r3, [r7, #12]
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d1ef      	bne.n	8015700 <tcp_process+0x724>
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	2200      	movs	r2, #0
 8015724:	60da      	str	r2, [r3, #12]
 8015726:	4b1f      	ldr	r3, [pc, #124]	@ (80157a4 <tcp_process+0x7c8>)
 8015728:	2201      	movs	r2, #1
 801572a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	220a      	movs	r2, #10
 8015730:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015732:	4b1d      	ldr	r3, [pc, #116]	@ (80157a8 <tcp_process+0x7cc>)
 8015734:	681a      	ldr	r2, [r3, #0]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	60da      	str	r2, [r3, #12]
 801573a:	4a1b      	ldr	r2, [pc, #108]	@ (80157a8 <tcp_process+0x7cc>)
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	6013      	str	r3, [r2, #0]
 8015740:	f003 f89c 	bl	801887c <tcp_timer_needed>
      }
      break;
 8015744:	e026      	b.n	8015794 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8015746:	6878      	ldr	r0, [r7, #4]
 8015748:	f000 f93c 	bl	80159c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801574c:	4b17      	ldr	r3, [pc, #92]	@ (80157ac <tcp_process+0x7d0>)
 801574e:	781b      	ldrb	r3, [r3, #0]
 8015750:	f003 0310 	and.w	r3, r3, #16
 8015754:	2b00      	cmp	r3, #0
 8015756:	d01f      	beq.n	8015798 <tcp_process+0x7bc>
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801575c:	4b14      	ldr	r3, [pc, #80]	@ (80157b0 <tcp_process+0x7d4>)
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	429a      	cmp	r2, r3
 8015762:	d119      	bne.n	8015798 <tcp_process+0x7bc>
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015768:	2b00      	cmp	r3, #0
 801576a:	d115      	bne.n	8015798 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801576c:	4b11      	ldr	r3, [pc, #68]	@ (80157b4 <tcp_process+0x7d8>)
 801576e:	781b      	ldrb	r3, [r3, #0]
 8015770:	f043 0310 	orr.w	r3, r3, #16
 8015774:	b2da      	uxtb	r2, r3
 8015776:	4b0f      	ldr	r3, [pc, #60]	@ (80157b4 <tcp_process+0x7d8>)
 8015778:	701a      	strb	r2, [r3, #0]
      }
      break;
 801577a:	e00d      	b.n	8015798 <tcp_process+0x7bc>
    default:
      break;
 801577c:	bf00      	nop
 801577e:	e00c      	b.n	801579a <tcp_process+0x7be>
      break;
 8015780:	bf00      	nop
 8015782:	e00a      	b.n	801579a <tcp_process+0x7be>
      break;
 8015784:	bf00      	nop
 8015786:	e008      	b.n	801579a <tcp_process+0x7be>
      break;
 8015788:	bf00      	nop
 801578a:	e006      	b.n	801579a <tcp_process+0x7be>
      break;
 801578c:	bf00      	nop
 801578e:	e004      	b.n	801579a <tcp_process+0x7be>
      break;
 8015790:	bf00      	nop
 8015792:	e002      	b.n	801579a <tcp_process+0x7be>
      break;
 8015794:	bf00      	nop
 8015796:	e000      	b.n	801579a <tcp_process+0x7be>
      break;
 8015798:	bf00      	nop
  }
  return ERR_OK;
 801579a:	2300      	movs	r3, #0
}
 801579c:	4618      	mov	r0, r3
 801579e:	3724      	adds	r7, #36	@ 0x24
 80157a0:	46bd      	mov	sp, r7
 80157a2:	bd90      	pop	{r4, r7, pc}
 80157a4:	2000c8e0 	.word	0x2000c8e0
 80157a8:	2000c8dc 	.word	0x2000c8dc
 80157ac:	2000c910 	.word	0x2000c910
 80157b0:	2000c908 	.word	0x2000c908
 80157b4:	2000c911 	.word	0x2000c911
 80157b8:	2000c8d8 	.word	0x2000c8d8

080157bc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80157bc:	b590      	push	{r4, r7, lr}
 80157be:	b085      	sub	sp, #20
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
 80157c4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d106      	bne.n	80157da <tcp_oos_insert_segment+0x1e>
 80157cc:	4b3b      	ldr	r3, [pc, #236]	@ (80158bc <tcp_oos_insert_segment+0x100>)
 80157ce:	f240 421f 	movw	r2, #1055	@ 0x41f
 80157d2:	493b      	ldr	r1, [pc, #236]	@ (80158c0 <tcp_oos_insert_segment+0x104>)
 80157d4:	483b      	ldr	r0, [pc, #236]	@ (80158c4 <tcp_oos_insert_segment+0x108>)
 80157d6:	f006 fe61 	bl	801c49c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	68db      	ldr	r3, [r3, #12]
 80157de:	899b      	ldrh	r3, [r3, #12]
 80157e0:	b29b      	uxth	r3, r3
 80157e2:	4618      	mov	r0, r3
 80157e4:	f7fb f9e2 	bl	8010bac <lwip_htons>
 80157e8:	4603      	mov	r3, r0
 80157ea:	b2db      	uxtb	r3, r3
 80157ec:	f003 0301 	and.w	r3, r3, #1
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d028      	beq.n	8015846 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80157f4:	6838      	ldr	r0, [r7, #0]
 80157f6:	f7fe f9bf 	bl	8013b78 <tcp_segs_free>
    next = NULL;
 80157fa:	2300      	movs	r3, #0
 80157fc:	603b      	str	r3, [r7, #0]
 80157fe:	e056      	b.n	80158ae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015800:	683b      	ldr	r3, [r7, #0]
 8015802:	68db      	ldr	r3, [r3, #12]
 8015804:	899b      	ldrh	r3, [r3, #12]
 8015806:	b29b      	uxth	r3, r3
 8015808:	4618      	mov	r0, r3
 801580a:	f7fb f9cf 	bl	8010bac <lwip_htons>
 801580e:	4603      	mov	r3, r0
 8015810:	b2db      	uxtb	r3, r3
 8015812:	f003 0301 	and.w	r3, r3, #1
 8015816:	2b00      	cmp	r3, #0
 8015818:	d00d      	beq.n	8015836 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	68db      	ldr	r3, [r3, #12]
 801581e:	899b      	ldrh	r3, [r3, #12]
 8015820:	b29c      	uxth	r4, r3
 8015822:	2001      	movs	r0, #1
 8015824:	f7fb f9c2 	bl	8010bac <lwip_htons>
 8015828:	4603      	mov	r3, r0
 801582a:	461a      	mov	r2, r3
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	68db      	ldr	r3, [r3, #12]
 8015830:	4322      	orrs	r2, r4
 8015832:	b292      	uxth	r2, r2
 8015834:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8015836:	683b      	ldr	r3, [r7, #0]
 8015838:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801583a:	683b      	ldr	r3, [r7, #0]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8015840:	68f8      	ldr	r0, [r7, #12]
 8015842:	f7fe f9ae 	bl	8013ba2 <tcp_seg_free>
    while (next &&
 8015846:	683b      	ldr	r3, [r7, #0]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d00e      	beq.n	801586a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	891b      	ldrh	r3, [r3, #8]
 8015850:	461a      	mov	r2, r3
 8015852:	4b1d      	ldr	r3, [pc, #116]	@ (80158c8 <tcp_oos_insert_segment+0x10c>)
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	441a      	add	r2, r3
 8015858:	683b      	ldr	r3, [r7, #0]
 801585a:	68db      	ldr	r3, [r3, #12]
 801585c:	685b      	ldr	r3, [r3, #4]
 801585e:	6839      	ldr	r1, [r7, #0]
 8015860:	8909      	ldrh	r1, [r1, #8]
 8015862:	440b      	add	r3, r1
 8015864:	1ad3      	subs	r3, r2, r3
    while (next &&
 8015866:	2b00      	cmp	r3, #0
 8015868:	daca      	bge.n	8015800 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801586a:	683b      	ldr	r3, [r7, #0]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d01e      	beq.n	80158ae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	891b      	ldrh	r3, [r3, #8]
 8015874:	461a      	mov	r2, r3
 8015876:	4b14      	ldr	r3, [pc, #80]	@ (80158c8 <tcp_oos_insert_segment+0x10c>)
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	441a      	add	r2, r3
 801587c:	683b      	ldr	r3, [r7, #0]
 801587e:	68db      	ldr	r3, [r3, #12]
 8015880:	685b      	ldr	r3, [r3, #4]
 8015882:	1ad3      	subs	r3, r2, r3
    if (next &&
 8015884:	2b00      	cmp	r3, #0
 8015886:	dd12      	ble.n	80158ae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8015888:	683b      	ldr	r3, [r7, #0]
 801588a:	68db      	ldr	r3, [r3, #12]
 801588c:	685b      	ldr	r3, [r3, #4]
 801588e:	b29a      	uxth	r2, r3
 8015890:	4b0d      	ldr	r3, [pc, #52]	@ (80158c8 <tcp_oos_insert_segment+0x10c>)
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	b29b      	uxth	r3, r3
 8015896:	1ad3      	subs	r3, r2, r3
 8015898:	b29a      	uxth	r2, r3
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	685a      	ldr	r2, [r3, #4]
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	891b      	ldrh	r3, [r3, #8]
 80158a6:	4619      	mov	r1, r3
 80158a8:	4610      	mov	r0, r2
 80158aa:	f7fc fbb9 	bl	8012020 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	683a      	ldr	r2, [r7, #0]
 80158b2:	601a      	str	r2, [r3, #0]
}
 80158b4:	bf00      	nop
 80158b6:	3714      	adds	r7, #20
 80158b8:	46bd      	mov	sp, r7
 80158ba:	bd90      	pop	{r4, r7, pc}
 80158bc:	080204e0 	.word	0x080204e0
 80158c0:	080207a0 	.word	0x080207a0
 80158c4:	0802052c 	.word	0x0802052c
 80158c8:	2000c904 	.word	0x2000c904

080158cc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80158cc:	b5b0      	push	{r4, r5, r7, lr}
 80158ce:	b086      	sub	sp, #24
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	60f8      	str	r0, [r7, #12]
 80158d4:	60b9      	str	r1, [r7, #8]
 80158d6:	607a      	str	r2, [r7, #4]
 80158d8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80158da:	e03e      	b.n	801595a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80158dc:	68bb      	ldr	r3, [r7, #8]
 80158de:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80158e0:	68bb      	ldr	r3, [r7, #8]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80158e6:	697b      	ldr	r3, [r7, #20]
 80158e8:	685b      	ldr	r3, [r3, #4]
 80158ea:	4618      	mov	r0, r3
 80158ec:	f7fc fdac 	bl	8012448 <pbuf_clen>
 80158f0:	4603      	mov	r3, r0
 80158f2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80158fa:	8a7a      	ldrh	r2, [r7, #18]
 80158fc:	429a      	cmp	r2, r3
 80158fe:	d906      	bls.n	801590e <tcp_free_acked_segments+0x42>
 8015900:	4b2a      	ldr	r3, [pc, #168]	@ (80159ac <tcp_free_acked_segments+0xe0>)
 8015902:	f240 4257 	movw	r2, #1111	@ 0x457
 8015906:	492a      	ldr	r1, [pc, #168]	@ (80159b0 <tcp_free_acked_segments+0xe4>)
 8015908:	482a      	ldr	r0, [pc, #168]	@ (80159b4 <tcp_free_acked_segments+0xe8>)
 801590a:	f006 fdc7 	bl	801c49c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8015914:	8a7b      	ldrh	r3, [r7, #18]
 8015916:	1ad3      	subs	r3, r2, r3
 8015918:	b29a      	uxth	r2, r3
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8015920:	697b      	ldr	r3, [r7, #20]
 8015922:	891a      	ldrh	r2, [r3, #8]
 8015924:	4b24      	ldr	r3, [pc, #144]	@ (80159b8 <tcp_free_acked_segments+0xec>)
 8015926:	881b      	ldrh	r3, [r3, #0]
 8015928:	4413      	add	r3, r2
 801592a:	b29a      	uxth	r2, r3
 801592c:	4b22      	ldr	r3, [pc, #136]	@ (80159b8 <tcp_free_acked_segments+0xec>)
 801592e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8015930:	6978      	ldr	r0, [r7, #20]
 8015932:	f7fe f936 	bl	8013ba2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801593c:	2b00      	cmp	r3, #0
 801593e:	d00c      	beq.n	801595a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8015940:	68bb      	ldr	r3, [r7, #8]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d109      	bne.n	801595a <tcp_free_acked_segments+0x8e>
 8015946:	683b      	ldr	r3, [r7, #0]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d106      	bne.n	801595a <tcp_free_acked_segments+0x8e>
 801594c:	4b17      	ldr	r3, [pc, #92]	@ (80159ac <tcp_free_acked_segments+0xe0>)
 801594e:	f240 4261 	movw	r2, #1121	@ 0x461
 8015952:	491a      	ldr	r1, [pc, #104]	@ (80159bc <tcp_free_acked_segments+0xf0>)
 8015954:	4817      	ldr	r0, [pc, #92]	@ (80159b4 <tcp_free_acked_segments+0xe8>)
 8015956:	f006 fda1 	bl	801c49c <iprintf>
  while (seg_list != NULL &&
 801595a:	68bb      	ldr	r3, [r7, #8]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d020      	beq.n	80159a2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	68db      	ldr	r3, [r3, #12]
 8015964:	685b      	ldr	r3, [r3, #4]
 8015966:	4618      	mov	r0, r3
 8015968:	f7fb f936 	bl	8010bd8 <lwip_htonl>
 801596c:	4604      	mov	r4, r0
 801596e:	68bb      	ldr	r3, [r7, #8]
 8015970:	891b      	ldrh	r3, [r3, #8]
 8015972:	461d      	mov	r5, r3
 8015974:	68bb      	ldr	r3, [r7, #8]
 8015976:	68db      	ldr	r3, [r3, #12]
 8015978:	899b      	ldrh	r3, [r3, #12]
 801597a:	b29b      	uxth	r3, r3
 801597c:	4618      	mov	r0, r3
 801597e:	f7fb f915 	bl	8010bac <lwip_htons>
 8015982:	4603      	mov	r3, r0
 8015984:	b2db      	uxtb	r3, r3
 8015986:	f003 0303 	and.w	r3, r3, #3
 801598a:	2b00      	cmp	r3, #0
 801598c:	d001      	beq.n	8015992 <tcp_free_acked_segments+0xc6>
 801598e:	2301      	movs	r3, #1
 8015990:	e000      	b.n	8015994 <tcp_free_acked_segments+0xc8>
 8015992:	2300      	movs	r3, #0
 8015994:	442b      	add	r3, r5
 8015996:	18e2      	adds	r2, r4, r3
 8015998:	4b09      	ldr	r3, [pc, #36]	@ (80159c0 <tcp_free_acked_segments+0xf4>)
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801599e:	2b00      	cmp	r3, #0
 80159a0:	dd9c      	ble.n	80158dc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80159a2:	68bb      	ldr	r3, [r7, #8]
}
 80159a4:	4618      	mov	r0, r3
 80159a6:	3718      	adds	r7, #24
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bdb0      	pop	{r4, r5, r7, pc}
 80159ac:	080204e0 	.word	0x080204e0
 80159b0:	080207c8 	.word	0x080207c8
 80159b4:	0802052c 	.word	0x0802052c
 80159b8:	2000c90c 	.word	0x2000c90c
 80159bc:	080207f0 	.word	0x080207f0
 80159c0:	2000c908 	.word	0x2000c908

080159c4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80159c4:	b5b0      	push	{r4, r5, r7, lr}
 80159c6:	b094      	sub	sp, #80	@ 0x50
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80159cc:	2300      	movs	r3, #0
 80159ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d106      	bne.n	80159e4 <tcp_receive+0x20>
 80159d6:	4b91      	ldr	r3, [pc, #580]	@ (8015c1c <tcp_receive+0x258>)
 80159d8:	f240 427b 	movw	r2, #1147	@ 0x47b
 80159dc:	4990      	ldr	r1, [pc, #576]	@ (8015c20 <tcp_receive+0x25c>)
 80159de:	4891      	ldr	r0, [pc, #580]	@ (8015c24 <tcp_receive+0x260>)
 80159e0:	f006 fd5c 	bl	801c49c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	7d1b      	ldrb	r3, [r3, #20]
 80159e8:	2b03      	cmp	r3, #3
 80159ea:	d806      	bhi.n	80159fa <tcp_receive+0x36>
 80159ec:	4b8b      	ldr	r3, [pc, #556]	@ (8015c1c <tcp_receive+0x258>)
 80159ee:	f240 427c 	movw	r2, #1148	@ 0x47c
 80159f2:	498d      	ldr	r1, [pc, #564]	@ (8015c28 <tcp_receive+0x264>)
 80159f4:	488b      	ldr	r0, [pc, #556]	@ (8015c24 <tcp_receive+0x260>)
 80159f6:	f006 fd51 	bl	801c49c <iprintf>

  if (flags & TCP_ACK) {
 80159fa:	4b8c      	ldr	r3, [pc, #560]	@ (8015c2c <tcp_receive+0x268>)
 80159fc:	781b      	ldrb	r3, [r3, #0]
 80159fe:	f003 0310 	and.w	r3, r3, #16
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	f000 8264 	beq.w	8015ed0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015a0e:	461a      	mov	r2, r3
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015a14:	4413      	add	r3, r2
 8015a16:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8015a1c:	4b84      	ldr	r3, [pc, #528]	@ (8015c30 <tcp_receive+0x26c>)
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	1ad3      	subs	r3, r2, r3
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	db1b      	blt.n	8015a5e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8015a2a:	4b81      	ldr	r3, [pc, #516]	@ (8015c30 <tcp_receive+0x26c>)
 8015a2c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015a2e:	429a      	cmp	r2, r3
 8015a30:	d106      	bne.n	8015a40 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015a36:	4b7f      	ldr	r3, [pc, #508]	@ (8015c34 <tcp_receive+0x270>)
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	1ad3      	subs	r3, r2, r3
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	db0e      	blt.n	8015a5e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015a44:	4b7b      	ldr	r3, [pc, #492]	@ (8015c34 <tcp_receive+0x270>)
 8015a46:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015a48:	429a      	cmp	r2, r3
 8015a4a:	d125      	bne.n	8015a98 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015a4c:	4b7a      	ldr	r3, [pc, #488]	@ (8015c38 <tcp_receive+0x274>)
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	89db      	ldrh	r3, [r3, #14]
 8015a52:	b29a      	uxth	r2, r3
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015a5a:	429a      	cmp	r2, r3
 8015a5c:	d91c      	bls.n	8015a98 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8015a5e:	4b76      	ldr	r3, [pc, #472]	@ (8015c38 <tcp_receive+0x274>)
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	89db      	ldrh	r3, [r3, #14]
 8015a64:	b29a      	uxth	r2, r3
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015a78:	429a      	cmp	r2, r3
 8015a7a:	d205      	bcs.n	8015a88 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8015a88:	4b69      	ldr	r3, [pc, #420]	@ (8015c30 <tcp_receive+0x26c>)
 8015a8a:	681a      	ldr	r2, [r3, #0]
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8015a90:	4b68      	ldr	r3, [pc, #416]	@ (8015c34 <tcp_receive+0x270>)
 8015a92:	681a      	ldr	r2, [r3, #0]
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015a98:	4b66      	ldr	r3, [pc, #408]	@ (8015c34 <tcp_receive+0x270>)
 8015a9a:	681a      	ldr	r2, [r3, #0]
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015aa0:	1ad3      	subs	r3, r2, r3
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	dc58      	bgt.n	8015b58 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8015aa6:	4b65      	ldr	r3, [pc, #404]	@ (8015c3c <tcp_receive+0x278>)
 8015aa8:	881b      	ldrh	r3, [r3, #0]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d14b      	bne.n	8015b46 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015ab2:	687a      	ldr	r2, [r7, #4]
 8015ab4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8015ab8:	4413      	add	r3, r2
 8015aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015abc:	429a      	cmp	r2, r3
 8015abe:	d142      	bne.n	8015b46 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	db3d      	blt.n	8015b46 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015ace:	4b59      	ldr	r3, [pc, #356]	@ (8015c34 <tcp_receive+0x270>)
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	429a      	cmp	r2, r3
 8015ad4:	d137      	bne.n	8015b46 <tcp_receive+0x182>
              found_dupack = 1;
 8015ad6:	2301      	movs	r3, #1
 8015ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015ae0:	2bff      	cmp	r3, #255	@ 0xff
 8015ae2:	d007      	beq.n	8015af4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015aea:	3301      	adds	r3, #1
 8015aec:	b2da      	uxtb	r2, r3
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015afa:	2b03      	cmp	r3, #3
 8015afc:	d91b      	bls.n	8015b36 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015b08:	4413      	add	r3, r2
 8015b0a:	b29a      	uxth	r2, r3
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015b12:	429a      	cmp	r2, r3
 8015b14:	d30a      	bcc.n	8015b2c <tcp_receive+0x168>
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015b20:	4413      	add	r3, r2
 8015b22:	b29a      	uxth	r2, r3
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015b2a:	e004      	b.n	8015b36 <tcp_receive+0x172>
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015b32:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015b3c:	2b02      	cmp	r3, #2
 8015b3e:	d902      	bls.n	8015b46 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015b40:	6878      	ldr	r0, [r7, #4]
 8015b42:	f002 fb3f 	bl	80181c4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8015b46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	f040 8161 	bne.w	8015e10 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	2200      	movs	r2, #0
 8015b52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015b56:	e15b      	b.n	8015e10 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015b58:	4b36      	ldr	r3, [pc, #216]	@ (8015c34 <tcp_receive+0x270>)
 8015b5a:	681a      	ldr	r2, [r3, #0]
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015b60:	1ad3      	subs	r3, r2, r3
 8015b62:	3b01      	subs	r3, #1
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	f2c0 814e 	blt.w	8015e06 <tcp_receive+0x442>
 8015b6a:	4b32      	ldr	r3, [pc, #200]	@ (8015c34 <tcp_receive+0x270>)
 8015b6c:	681a      	ldr	r2, [r3, #0]
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015b72:	1ad3      	subs	r3, r2, r3
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	f300 8146 	bgt.w	8015e06 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	8b5b      	ldrh	r3, [r3, #26]
 8015b7e:	f003 0304 	and.w	r3, r3, #4
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d010      	beq.n	8015ba8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	8b5b      	ldrh	r3, [r3, #26]
 8015b8a:	f023 0304 	bic.w	r3, r3, #4
 8015b8e:	b29a      	uxth	r2, r3
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	2200      	movs	r2, #0
 8015bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015bb6:	10db      	asrs	r3, r3, #3
 8015bb8:	b21b      	sxth	r3, r3
 8015bba:	b29a      	uxth	r2, r3
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015bc2:	b29b      	uxth	r3, r3
 8015bc4:	4413      	add	r3, r2
 8015bc6:	b29b      	uxth	r3, r3
 8015bc8:	b21a      	sxth	r2, r3
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015bd0:	4b18      	ldr	r3, [pc, #96]	@ (8015c34 <tcp_receive+0x270>)
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	b29a      	uxth	r2, r3
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015bda:	b29b      	uxth	r3, r3
 8015bdc:	1ad3      	subs	r3, r2, r3
 8015bde:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	2200      	movs	r2, #0
 8015be4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8015be8:	4b12      	ldr	r3, [pc, #72]	@ (8015c34 <tcp_receive+0x270>)
 8015bea:	681a      	ldr	r2, [r3, #0]
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	7d1b      	ldrb	r3, [r3, #20]
 8015bf4:	2b03      	cmp	r3, #3
 8015bf6:	f240 8097 	bls.w	8015d28 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015c06:	429a      	cmp	r2, r3
 8015c08:	d245      	bcs.n	8015c96 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	8b5b      	ldrh	r3, [r3, #26]
 8015c0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d014      	beq.n	8015c40 <tcp_receive+0x27c>
 8015c16:	2301      	movs	r3, #1
 8015c18:	e013      	b.n	8015c42 <tcp_receive+0x27e>
 8015c1a:	bf00      	nop
 8015c1c:	080204e0 	.word	0x080204e0
 8015c20:	08020810 	.word	0x08020810
 8015c24:	0802052c 	.word	0x0802052c
 8015c28:	0802082c 	.word	0x0802082c
 8015c2c:	2000c910 	.word	0x2000c910
 8015c30:	2000c904 	.word	0x2000c904
 8015c34:	2000c908 	.word	0x2000c908
 8015c38:	2000c8f4 	.word	0x2000c8f4
 8015c3c:	2000c90e 	.word	0x2000c90e
 8015c40:	2302      	movs	r3, #2
 8015c42:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015c46:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015c4a:	b29a      	uxth	r2, r3
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c50:	fb12 f303 	smulbb	r3, r2, r3
 8015c54:	b29b      	uxth	r3, r3
 8015c56:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8015c58:	4293      	cmp	r3, r2
 8015c5a:	bf28      	it	cs
 8015c5c:	4613      	movcs	r3, r2
 8015c5e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015c66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015c68:	4413      	add	r3, r2
 8015c6a:	b29a      	uxth	r2, r3
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015c72:	429a      	cmp	r2, r3
 8015c74:	d309      	bcc.n	8015c8a <tcp_receive+0x2c6>
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015c7c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015c7e:	4413      	add	r3, r2
 8015c80:	b29a      	uxth	r2, r3
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015c88:	e04e      	b.n	8015d28 <tcp_receive+0x364>
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015c90:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015c94:	e048      	b.n	8015d28 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015c9c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015c9e:	4413      	add	r3, r2
 8015ca0:	b29a      	uxth	r2, r3
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015ca8:	429a      	cmp	r2, r3
 8015caa:	d309      	bcc.n	8015cc0 <tcp_receive+0x2fc>
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015cb2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015cb4:	4413      	add	r3, r2
 8015cb6:	b29a      	uxth	r2, r3
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015cbe:	e004      	b.n	8015cca <tcp_receive+0x306>
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015cc6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015cd6:	429a      	cmp	r2, r3
 8015cd8:	d326      	bcc.n	8015d28 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015ce6:	1ad3      	subs	r3, r2, r3
 8015ce8:	b29a      	uxth	r2, r3
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015cfa:	4413      	add	r3, r2
 8015cfc:	b29a      	uxth	r2, r3
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015d04:	429a      	cmp	r2, r3
 8015d06:	d30a      	bcc.n	8015d1e <tcp_receive+0x35a>
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015d12:	4413      	add	r3, r2
 8015d14:	b29a      	uxth	r2, r3
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015d1c:	e004      	b.n	8015d28 <tcp_receive+0x364>
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015d24:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015d30:	4a98      	ldr	r2, [pc, #608]	@ (8015f94 <tcp_receive+0x5d0>)
 8015d32:	6878      	ldr	r0, [r7, #4]
 8015d34:	f7ff fdca 	bl	80158cc <tcp_free_acked_segments>
 8015d38:	4602      	mov	r2, r0
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d46:	4a94      	ldr	r2, [pc, #592]	@ (8015f98 <tcp_receive+0x5d4>)
 8015d48:	6878      	ldr	r0, [r7, #4]
 8015d4a:	f7ff fdbf 	bl	80158cc <tcp_free_acked_segments>
 8015d4e:	4602      	mov	r2, r0
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d104      	bne.n	8015d66 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015d62:	861a      	strh	r2, [r3, #48]	@ 0x30
 8015d64:	e002      	b.n	8015d6c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	2200      	movs	r2, #0
 8015d6a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	2200      	movs	r2, #0
 8015d70:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d103      	bne.n	8015d82 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8015d88:	4b84      	ldr	r3, [pc, #528]	@ (8015f9c <tcp_receive+0x5d8>)
 8015d8a:	881b      	ldrh	r3, [r3, #0]
 8015d8c:	4413      	add	r3, r2
 8015d8e:	b29a      	uxth	r2, r3
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	8b5b      	ldrh	r3, [r3, #26]
 8015d9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d035      	beq.n	8015e0e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d118      	bne.n	8015ddc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d00c      	beq.n	8015dcc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015dba:	68db      	ldr	r3, [r3, #12]
 8015dbc:	685b      	ldr	r3, [r3, #4]
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	f7fa ff0a 	bl	8010bd8 <lwip_htonl>
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	dc20      	bgt.n	8015e0e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	8b5b      	ldrh	r3, [r3, #26]
 8015dd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015dd4:	b29a      	uxth	r2, r3
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015dda:	e018      	b.n	8015e0e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015de4:	68db      	ldr	r3, [r3, #12]
 8015de6:	685b      	ldr	r3, [r3, #4]
 8015de8:	4618      	mov	r0, r3
 8015dea:	f7fa fef5 	bl	8010bd8 <lwip_htonl>
 8015dee:	4603      	mov	r3, r0
 8015df0:	1ae3      	subs	r3, r4, r3
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	dc0b      	bgt.n	8015e0e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	8b5b      	ldrh	r3, [r3, #26]
 8015dfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015dfe:	b29a      	uxth	r2, r3
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015e04:	e003      	b.n	8015e0e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015e06:	6878      	ldr	r0, [r7, #4]
 8015e08:	f002 fbc8 	bl	801859c <tcp_send_empty_ack>
 8015e0c:	e000      	b.n	8015e10 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015e0e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d05b      	beq.n	8015ed0 <tcp_receive+0x50c>
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015e1c:	4b60      	ldr	r3, [pc, #384]	@ (8015fa0 <tcp_receive+0x5dc>)
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	1ad3      	subs	r3, r2, r3
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	da54      	bge.n	8015ed0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015e26:	4b5f      	ldr	r3, [pc, #380]	@ (8015fa4 <tcp_receive+0x5e0>)
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	b29a      	uxth	r2, r3
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015e30:	b29b      	uxth	r3, r3
 8015e32:	1ad3      	subs	r3, r2, r3
 8015e34:	b29b      	uxth	r3, r3
 8015e36:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015e3a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015e44:	10db      	asrs	r3, r3, #3
 8015e46:	b21b      	sxth	r3, r3
 8015e48:	b29b      	uxth	r3, r3
 8015e4a:	1ad3      	subs	r3, r2, r3
 8015e4c:	b29b      	uxth	r3, r3
 8015e4e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015e58:	b29a      	uxth	r2, r3
 8015e5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015e5e:	4413      	add	r3, r2
 8015e60:	b29b      	uxth	r3, r3
 8015e62:	b21a      	sxth	r2, r3
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8015e68:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	da05      	bge.n	8015e7c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015e70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015e74:	425b      	negs	r3, r3
 8015e76:	b29b      	uxth	r3, r3
 8015e78:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015e7c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015e86:	109b      	asrs	r3, r3, #2
 8015e88:	b21b      	sxth	r3, r3
 8015e8a:	b29b      	uxth	r3, r3
 8015e8c:	1ad3      	subs	r3, r2, r3
 8015e8e:	b29b      	uxth	r3, r3
 8015e90:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015e9a:	b29a      	uxth	r2, r3
 8015e9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015ea0:	4413      	add	r3, r2
 8015ea2:	b29b      	uxth	r3, r3
 8015ea4:	b21a      	sxth	r2, r3
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015eb0:	10db      	asrs	r3, r3, #3
 8015eb2:	b21b      	sxth	r3, r3
 8015eb4:	b29a      	uxth	r2, r3
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015ebc:	b29b      	uxth	r3, r3
 8015ebe:	4413      	add	r3, r2
 8015ec0:	b29b      	uxth	r3, r3
 8015ec2:	b21a      	sxth	r2, r3
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	2200      	movs	r2, #0
 8015ece:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015ed0:	4b35      	ldr	r3, [pc, #212]	@ (8015fa8 <tcp_receive+0x5e4>)
 8015ed2:	881b      	ldrh	r3, [r3, #0]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	f000 84df 	beq.w	8016898 <tcp_receive+0xed4>
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	7d1b      	ldrb	r3, [r3, #20]
 8015ede:	2b06      	cmp	r3, #6
 8015ee0:	f200 84da 	bhi.w	8016898 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015ee8:	4b30      	ldr	r3, [pc, #192]	@ (8015fac <tcp_receive+0x5e8>)
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	1ad3      	subs	r3, r2, r3
 8015eee:	3b01      	subs	r3, #1
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	f2c0 808f 	blt.w	8016014 <tcp_receive+0x650>
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015efa:	4b2b      	ldr	r3, [pc, #172]	@ (8015fa8 <tcp_receive+0x5e4>)
 8015efc:	881b      	ldrh	r3, [r3, #0]
 8015efe:	4619      	mov	r1, r3
 8015f00:	4b2a      	ldr	r3, [pc, #168]	@ (8015fac <tcp_receive+0x5e8>)
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	440b      	add	r3, r1
 8015f06:	1ad3      	subs	r3, r2, r3
 8015f08:	3301      	adds	r3, #1
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	f300 8082 	bgt.w	8016014 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015f10:	4b27      	ldr	r3, [pc, #156]	@ (8015fb0 <tcp_receive+0x5ec>)
 8015f12:	685b      	ldr	r3, [r3, #4]
 8015f14:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015f1a:	4b24      	ldr	r3, [pc, #144]	@ (8015fac <tcp_receive+0x5e8>)
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	1ad3      	subs	r3, r2, r3
 8015f20:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015f22:	4b23      	ldr	r3, [pc, #140]	@ (8015fb0 <tcp_receive+0x5ec>)
 8015f24:	685b      	ldr	r3, [r3, #4]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d106      	bne.n	8015f38 <tcp_receive+0x574>
 8015f2a:	4b22      	ldr	r3, [pc, #136]	@ (8015fb4 <tcp_receive+0x5f0>)
 8015f2c:	f240 5294 	movw	r2, #1428	@ 0x594
 8015f30:	4921      	ldr	r1, [pc, #132]	@ (8015fb8 <tcp_receive+0x5f4>)
 8015f32:	4822      	ldr	r0, [pc, #136]	@ (8015fbc <tcp_receive+0x5f8>)
 8015f34:	f006 fab2 	bl	801c49c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f3a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015f3e:	4293      	cmp	r3, r2
 8015f40:	d906      	bls.n	8015f50 <tcp_receive+0x58c>
 8015f42:	4b1c      	ldr	r3, [pc, #112]	@ (8015fb4 <tcp_receive+0x5f0>)
 8015f44:	f240 5295 	movw	r2, #1429	@ 0x595
 8015f48:	491d      	ldr	r1, [pc, #116]	@ (8015fc0 <tcp_receive+0x5fc>)
 8015f4a:	481c      	ldr	r0, [pc, #112]	@ (8015fbc <tcp_receive+0x5f8>)
 8015f4c:	f006 faa6 	bl	801c49c <iprintf>
      off = (u16_t)off32;
 8015f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f52:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015f56:	4b16      	ldr	r3, [pc, #88]	@ (8015fb0 <tcp_receive+0x5ec>)
 8015f58:	685b      	ldr	r3, [r3, #4]
 8015f5a:	891b      	ldrh	r3, [r3, #8]
 8015f5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015f60:	429a      	cmp	r2, r3
 8015f62:	d906      	bls.n	8015f72 <tcp_receive+0x5ae>
 8015f64:	4b13      	ldr	r3, [pc, #76]	@ (8015fb4 <tcp_receive+0x5f0>)
 8015f66:	f240 5297 	movw	r2, #1431	@ 0x597
 8015f6a:	4916      	ldr	r1, [pc, #88]	@ (8015fc4 <tcp_receive+0x600>)
 8015f6c:	4813      	ldr	r0, [pc, #76]	@ (8015fbc <tcp_receive+0x5f8>)
 8015f6e:	f006 fa95 	bl	801c49c <iprintf>
      inseg.len -= off;
 8015f72:	4b0f      	ldr	r3, [pc, #60]	@ (8015fb0 <tcp_receive+0x5ec>)
 8015f74:	891a      	ldrh	r2, [r3, #8]
 8015f76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015f7a:	1ad3      	subs	r3, r2, r3
 8015f7c:	b29a      	uxth	r2, r3
 8015f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8015fb0 <tcp_receive+0x5ec>)
 8015f80:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015f82:	4b0b      	ldr	r3, [pc, #44]	@ (8015fb0 <tcp_receive+0x5ec>)
 8015f84:	685b      	ldr	r3, [r3, #4]
 8015f86:	891a      	ldrh	r2, [r3, #8]
 8015f88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015f8c:	1ad3      	subs	r3, r2, r3
 8015f8e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8015f90:	e02a      	b.n	8015fe8 <tcp_receive+0x624>
 8015f92:	bf00      	nop
 8015f94:	08020848 	.word	0x08020848
 8015f98:	08020850 	.word	0x08020850
 8015f9c:	2000c90c 	.word	0x2000c90c
 8015fa0:	2000c908 	.word	0x2000c908
 8015fa4:	2000c8cc 	.word	0x2000c8cc
 8015fa8:	2000c90e 	.word	0x2000c90e
 8015fac:	2000c904 	.word	0x2000c904
 8015fb0:	2000c8e4 	.word	0x2000c8e4
 8015fb4:	080204e0 	.word	0x080204e0
 8015fb8:	08020858 	.word	0x08020858
 8015fbc:	0802052c 	.word	0x0802052c
 8015fc0:	08020868 	.word	0x08020868
 8015fc4:	08020878 	.word	0x08020878
        off -= p->len;
 8015fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015fca:	895b      	ldrh	r3, [r3, #10]
 8015fcc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015fd0:	1ad3      	subs	r3, r2, r3
 8015fd2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015fd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015fd8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015fda:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015fde:	2200      	movs	r2, #0
 8015fe0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8015fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015fea:	895b      	ldrh	r3, [r3, #10]
 8015fec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015ff0:	429a      	cmp	r2, r3
 8015ff2:	d8e9      	bhi.n	8015fc8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015ff4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015ff8:	4619      	mov	r1, r3
 8015ffa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015ffc:	f7fc f910 	bl	8012220 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016004:	4a90      	ldr	r2, [pc, #576]	@ (8016248 <tcp_receive+0x884>)
 8016006:	6013      	str	r3, [r2, #0]
 8016008:	4b90      	ldr	r3, [pc, #576]	@ (801624c <tcp_receive+0x888>)
 801600a:	68db      	ldr	r3, [r3, #12]
 801600c:	4a8e      	ldr	r2, [pc, #568]	@ (8016248 <tcp_receive+0x884>)
 801600e:	6812      	ldr	r2, [r2, #0]
 8016010:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016012:	e00d      	b.n	8016030 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016014:	4b8c      	ldr	r3, [pc, #560]	@ (8016248 <tcp_receive+0x884>)
 8016016:	681a      	ldr	r2, [r3, #0]
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801601c:	1ad3      	subs	r3, r2, r3
 801601e:	2b00      	cmp	r3, #0
 8016020:	da06      	bge.n	8016030 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	8b5b      	ldrh	r3, [r3, #26]
 8016026:	f043 0302 	orr.w	r3, r3, #2
 801602a:	b29a      	uxth	r2, r3
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016030:	4b85      	ldr	r3, [pc, #532]	@ (8016248 <tcp_receive+0x884>)
 8016032:	681a      	ldr	r2, [r3, #0]
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016038:	1ad3      	subs	r3, r2, r3
 801603a:	2b00      	cmp	r3, #0
 801603c:	f2c0 8427 	blt.w	801688e <tcp_receive+0xeca>
 8016040:	4b81      	ldr	r3, [pc, #516]	@ (8016248 <tcp_receive+0x884>)
 8016042:	681a      	ldr	r2, [r3, #0]
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016048:	6879      	ldr	r1, [r7, #4]
 801604a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801604c:	440b      	add	r3, r1
 801604e:	1ad3      	subs	r3, r2, r3
 8016050:	3301      	adds	r3, #1
 8016052:	2b00      	cmp	r3, #0
 8016054:	f300 841b 	bgt.w	801688e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801605c:	4b7a      	ldr	r3, [pc, #488]	@ (8016248 <tcp_receive+0x884>)
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	429a      	cmp	r2, r3
 8016062:	f040 8298 	bne.w	8016596 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016066:	4b79      	ldr	r3, [pc, #484]	@ (801624c <tcp_receive+0x888>)
 8016068:	891c      	ldrh	r4, [r3, #8]
 801606a:	4b78      	ldr	r3, [pc, #480]	@ (801624c <tcp_receive+0x888>)
 801606c:	68db      	ldr	r3, [r3, #12]
 801606e:	899b      	ldrh	r3, [r3, #12]
 8016070:	b29b      	uxth	r3, r3
 8016072:	4618      	mov	r0, r3
 8016074:	f7fa fd9a 	bl	8010bac <lwip_htons>
 8016078:	4603      	mov	r3, r0
 801607a:	b2db      	uxtb	r3, r3
 801607c:	f003 0303 	and.w	r3, r3, #3
 8016080:	2b00      	cmp	r3, #0
 8016082:	d001      	beq.n	8016088 <tcp_receive+0x6c4>
 8016084:	2301      	movs	r3, #1
 8016086:	e000      	b.n	801608a <tcp_receive+0x6c6>
 8016088:	2300      	movs	r3, #0
 801608a:	4423      	add	r3, r4
 801608c:	b29a      	uxth	r2, r3
 801608e:	4b70      	ldr	r3, [pc, #448]	@ (8016250 <tcp_receive+0x88c>)
 8016090:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016096:	4b6e      	ldr	r3, [pc, #440]	@ (8016250 <tcp_receive+0x88c>)
 8016098:	881b      	ldrh	r3, [r3, #0]
 801609a:	429a      	cmp	r2, r3
 801609c:	d274      	bcs.n	8016188 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801609e:	4b6b      	ldr	r3, [pc, #428]	@ (801624c <tcp_receive+0x888>)
 80160a0:	68db      	ldr	r3, [r3, #12]
 80160a2:	899b      	ldrh	r3, [r3, #12]
 80160a4:	b29b      	uxth	r3, r3
 80160a6:	4618      	mov	r0, r3
 80160a8:	f7fa fd80 	bl	8010bac <lwip_htons>
 80160ac:	4603      	mov	r3, r0
 80160ae:	b2db      	uxtb	r3, r3
 80160b0:	f003 0301 	and.w	r3, r3, #1
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d01e      	beq.n	80160f6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80160b8:	4b64      	ldr	r3, [pc, #400]	@ (801624c <tcp_receive+0x888>)
 80160ba:	68db      	ldr	r3, [r3, #12]
 80160bc:	899b      	ldrh	r3, [r3, #12]
 80160be:	b29b      	uxth	r3, r3
 80160c0:	b21b      	sxth	r3, r3
 80160c2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80160c6:	b21c      	sxth	r4, r3
 80160c8:	4b60      	ldr	r3, [pc, #384]	@ (801624c <tcp_receive+0x888>)
 80160ca:	68db      	ldr	r3, [r3, #12]
 80160cc:	899b      	ldrh	r3, [r3, #12]
 80160ce:	b29b      	uxth	r3, r3
 80160d0:	4618      	mov	r0, r3
 80160d2:	f7fa fd6b 	bl	8010bac <lwip_htons>
 80160d6:	4603      	mov	r3, r0
 80160d8:	b2db      	uxtb	r3, r3
 80160da:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80160de:	b29b      	uxth	r3, r3
 80160e0:	4618      	mov	r0, r3
 80160e2:	f7fa fd63 	bl	8010bac <lwip_htons>
 80160e6:	4603      	mov	r3, r0
 80160e8:	b21b      	sxth	r3, r3
 80160ea:	4323      	orrs	r3, r4
 80160ec:	b21a      	sxth	r2, r3
 80160ee:	4b57      	ldr	r3, [pc, #348]	@ (801624c <tcp_receive+0x888>)
 80160f0:	68db      	ldr	r3, [r3, #12]
 80160f2:	b292      	uxth	r2, r2
 80160f4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80160fa:	4b54      	ldr	r3, [pc, #336]	@ (801624c <tcp_receive+0x888>)
 80160fc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80160fe:	4b53      	ldr	r3, [pc, #332]	@ (801624c <tcp_receive+0x888>)
 8016100:	68db      	ldr	r3, [r3, #12]
 8016102:	899b      	ldrh	r3, [r3, #12]
 8016104:	b29b      	uxth	r3, r3
 8016106:	4618      	mov	r0, r3
 8016108:	f7fa fd50 	bl	8010bac <lwip_htons>
 801610c:	4603      	mov	r3, r0
 801610e:	b2db      	uxtb	r3, r3
 8016110:	f003 0302 	and.w	r3, r3, #2
 8016114:	2b00      	cmp	r3, #0
 8016116:	d005      	beq.n	8016124 <tcp_receive+0x760>
            inseg.len -= 1;
 8016118:	4b4c      	ldr	r3, [pc, #304]	@ (801624c <tcp_receive+0x888>)
 801611a:	891b      	ldrh	r3, [r3, #8]
 801611c:	3b01      	subs	r3, #1
 801611e:	b29a      	uxth	r2, r3
 8016120:	4b4a      	ldr	r3, [pc, #296]	@ (801624c <tcp_receive+0x888>)
 8016122:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016124:	4b49      	ldr	r3, [pc, #292]	@ (801624c <tcp_receive+0x888>)
 8016126:	685b      	ldr	r3, [r3, #4]
 8016128:	4a48      	ldr	r2, [pc, #288]	@ (801624c <tcp_receive+0x888>)
 801612a:	8912      	ldrh	r2, [r2, #8]
 801612c:	4611      	mov	r1, r2
 801612e:	4618      	mov	r0, r3
 8016130:	f7fb ff76 	bl	8012020 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016134:	4b45      	ldr	r3, [pc, #276]	@ (801624c <tcp_receive+0x888>)
 8016136:	891c      	ldrh	r4, [r3, #8]
 8016138:	4b44      	ldr	r3, [pc, #272]	@ (801624c <tcp_receive+0x888>)
 801613a:	68db      	ldr	r3, [r3, #12]
 801613c:	899b      	ldrh	r3, [r3, #12]
 801613e:	b29b      	uxth	r3, r3
 8016140:	4618      	mov	r0, r3
 8016142:	f7fa fd33 	bl	8010bac <lwip_htons>
 8016146:	4603      	mov	r3, r0
 8016148:	b2db      	uxtb	r3, r3
 801614a:	f003 0303 	and.w	r3, r3, #3
 801614e:	2b00      	cmp	r3, #0
 8016150:	d001      	beq.n	8016156 <tcp_receive+0x792>
 8016152:	2301      	movs	r3, #1
 8016154:	e000      	b.n	8016158 <tcp_receive+0x794>
 8016156:	2300      	movs	r3, #0
 8016158:	4423      	add	r3, r4
 801615a:	b29a      	uxth	r2, r3
 801615c:	4b3c      	ldr	r3, [pc, #240]	@ (8016250 <tcp_receive+0x88c>)
 801615e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016160:	4b3b      	ldr	r3, [pc, #236]	@ (8016250 <tcp_receive+0x88c>)
 8016162:	881b      	ldrh	r3, [r3, #0]
 8016164:	461a      	mov	r2, r3
 8016166:	4b38      	ldr	r3, [pc, #224]	@ (8016248 <tcp_receive+0x884>)
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	441a      	add	r2, r3
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016170:	6879      	ldr	r1, [r7, #4]
 8016172:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016174:	440b      	add	r3, r1
 8016176:	429a      	cmp	r2, r3
 8016178:	d006      	beq.n	8016188 <tcp_receive+0x7c4>
 801617a:	4b36      	ldr	r3, [pc, #216]	@ (8016254 <tcp_receive+0x890>)
 801617c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8016180:	4935      	ldr	r1, [pc, #212]	@ (8016258 <tcp_receive+0x894>)
 8016182:	4836      	ldr	r0, [pc, #216]	@ (801625c <tcp_receive+0x898>)
 8016184:	f006 f98a 	bl	801c49c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801618c:	2b00      	cmp	r3, #0
 801618e:	f000 80e6 	beq.w	801635e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016192:	4b2e      	ldr	r3, [pc, #184]	@ (801624c <tcp_receive+0x888>)
 8016194:	68db      	ldr	r3, [r3, #12]
 8016196:	899b      	ldrh	r3, [r3, #12]
 8016198:	b29b      	uxth	r3, r3
 801619a:	4618      	mov	r0, r3
 801619c:	f7fa fd06 	bl	8010bac <lwip_htons>
 80161a0:	4603      	mov	r3, r0
 80161a2:	b2db      	uxtb	r3, r3
 80161a4:	f003 0301 	and.w	r3, r3, #1
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d010      	beq.n	80161ce <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80161ac:	e00a      	b.n	80161c4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80161b2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80161b8:	681a      	ldr	r2, [r3, #0]
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80161be:	68f8      	ldr	r0, [r7, #12]
 80161c0:	f7fd fcef 	bl	8013ba2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d1f0      	bne.n	80161ae <tcp_receive+0x7ea>
 80161cc:	e0c7      	b.n	801635e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80161d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80161d4:	e051      	b.n	801627a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80161d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80161d8:	68db      	ldr	r3, [r3, #12]
 80161da:	899b      	ldrh	r3, [r3, #12]
 80161dc:	b29b      	uxth	r3, r3
 80161de:	4618      	mov	r0, r3
 80161e0:	f7fa fce4 	bl	8010bac <lwip_htons>
 80161e4:	4603      	mov	r3, r0
 80161e6:	b2db      	uxtb	r3, r3
 80161e8:	f003 0301 	and.w	r3, r3, #1
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d03c      	beq.n	801626a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80161f0:	4b16      	ldr	r3, [pc, #88]	@ (801624c <tcp_receive+0x888>)
 80161f2:	68db      	ldr	r3, [r3, #12]
 80161f4:	899b      	ldrh	r3, [r3, #12]
 80161f6:	b29b      	uxth	r3, r3
 80161f8:	4618      	mov	r0, r3
 80161fa:	f7fa fcd7 	bl	8010bac <lwip_htons>
 80161fe:	4603      	mov	r3, r0
 8016200:	b2db      	uxtb	r3, r3
 8016202:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016206:	2b00      	cmp	r3, #0
 8016208:	d12f      	bne.n	801626a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801620a:	4b10      	ldr	r3, [pc, #64]	@ (801624c <tcp_receive+0x888>)
 801620c:	68db      	ldr	r3, [r3, #12]
 801620e:	899b      	ldrh	r3, [r3, #12]
 8016210:	b29c      	uxth	r4, r3
 8016212:	2001      	movs	r0, #1
 8016214:	f7fa fcca 	bl	8010bac <lwip_htons>
 8016218:	4603      	mov	r3, r0
 801621a:	461a      	mov	r2, r3
 801621c:	4b0b      	ldr	r3, [pc, #44]	@ (801624c <tcp_receive+0x888>)
 801621e:	68db      	ldr	r3, [r3, #12]
 8016220:	4322      	orrs	r2, r4
 8016222:	b292      	uxth	r2, r2
 8016224:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016226:	4b09      	ldr	r3, [pc, #36]	@ (801624c <tcp_receive+0x888>)
 8016228:	891c      	ldrh	r4, [r3, #8]
 801622a:	4b08      	ldr	r3, [pc, #32]	@ (801624c <tcp_receive+0x888>)
 801622c:	68db      	ldr	r3, [r3, #12]
 801622e:	899b      	ldrh	r3, [r3, #12]
 8016230:	b29b      	uxth	r3, r3
 8016232:	4618      	mov	r0, r3
 8016234:	f7fa fcba 	bl	8010bac <lwip_htons>
 8016238:	4603      	mov	r3, r0
 801623a:	b2db      	uxtb	r3, r3
 801623c:	f003 0303 	and.w	r3, r3, #3
 8016240:	2b00      	cmp	r3, #0
 8016242:	d00d      	beq.n	8016260 <tcp_receive+0x89c>
 8016244:	2301      	movs	r3, #1
 8016246:	e00c      	b.n	8016262 <tcp_receive+0x89e>
 8016248:	2000c904 	.word	0x2000c904
 801624c:	2000c8e4 	.word	0x2000c8e4
 8016250:	2000c90e 	.word	0x2000c90e
 8016254:	080204e0 	.word	0x080204e0
 8016258:	08020888 	.word	0x08020888
 801625c:	0802052c 	.word	0x0802052c
 8016260:	2300      	movs	r3, #0
 8016262:	4423      	add	r3, r4
 8016264:	b29a      	uxth	r2, r3
 8016266:	4b98      	ldr	r3, [pc, #608]	@ (80164c8 <tcp_receive+0xb04>)
 8016268:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801626a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801626c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801626e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8016274:	6938      	ldr	r0, [r7, #16]
 8016276:	f7fd fc94 	bl	8013ba2 <tcp_seg_free>
            while (next &&
 801627a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801627c:	2b00      	cmp	r3, #0
 801627e:	d00e      	beq.n	801629e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016280:	4b91      	ldr	r3, [pc, #580]	@ (80164c8 <tcp_receive+0xb04>)
 8016282:	881b      	ldrh	r3, [r3, #0]
 8016284:	461a      	mov	r2, r3
 8016286:	4b91      	ldr	r3, [pc, #580]	@ (80164cc <tcp_receive+0xb08>)
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	441a      	add	r2, r3
 801628c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801628e:	68db      	ldr	r3, [r3, #12]
 8016290:	685b      	ldr	r3, [r3, #4]
 8016292:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016294:	8909      	ldrh	r1, [r1, #8]
 8016296:	440b      	add	r3, r1
 8016298:	1ad3      	subs	r3, r2, r3
            while (next &&
 801629a:	2b00      	cmp	r3, #0
 801629c:	da9b      	bge.n	80161d6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801629e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d059      	beq.n	8016358 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80162a4:	4b88      	ldr	r3, [pc, #544]	@ (80164c8 <tcp_receive+0xb04>)
 80162a6:	881b      	ldrh	r3, [r3, #0]
 80162a8:	461a      	mov	r2, r3
 80162aa:	4b88      	ldr	r3, [pc, #544]	@ (80164cc <tcp_receive+0xb08>)
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	441a      	add	r2, r3
 80162b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80162b2:	68db      	ldr	r3, [r3, #12]
 80162b4:	685b      	ldr	r3, [r3, #4]
 80162b6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	dd4d      	ble.n	8016358 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80162bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80162be:	68db      	ldr	r3, [r3, #12]
 80162c0:	685b      	ldr	r3, [r3, #4]
 80162c2:	b29a      	uxth	r2, r3
 80162c4:	4b81      	ldr	r3, [pc, #516]	@ (80164cc <tcp_receive+0xb08>)
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	b29b      	uxth	r3, r3
 80162ca:	1ad3      	subs	r3, r2, r3
 80162cc:	b29a      	uxth	r2, r3
 80162ce:	4b80      	ldr	r3, [pc, #512]	@ (80164d0 <tcp_receive+0xb0c>)
 80162d0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80162d2:	4b7f      	ldr	r3, [pc, #508]	@ (80164d0 <tcp_receive+0xb0c>)
 80162d4:	68db      	ldr	r3, [r3, #12]
 80162d6:	899b      	ldrh	r3, [r3, #12]
 80162d8:	b29b      	uxth	r3, r3
 80162da:	4618      	mov	r0, r3
 80162dc:	f7fa fc66 	bl	8010bac <lwip_htons>
 80162e0:	4603      	mov	r3, r0
 80162e2:	b2db      	uxtb	r3, r3
 80162e4:	f003 0302 	and.w	r3, r3, #2
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d005      	beq.n	80162f8 <tcp_receive+0x934>
                inseg.len -= 1;
 80162ec:	4b78      	ldr	r3, [pc, #480]	@ (80164d0 <tcp_receive+0xb0c>)
 80162ee:	891b      	ldrh	r3, [r3, #8]
 80162f0:	3b01      	subs	r3, #1
 80162f2:	b29a      	uxth	r2, r3
 80162f4:	4b76      	ldr	r3, [pc, #472]	@ (80164d0 <tcp_receive+0xb0c>)
 80162f6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80162f8:	4b75      	ldr	r3, [pc, #468]	@ (80164d0 <tcp_receive+0xb0c>)
 80162fa:	685b      	ldr	r3, [r3, #4]
 80162fc:	4a74      	ldr	r2, [pc, #464]	@ (80164d0 <tcp_receive+0xb0c>)
 80162fe:	8912      	ldrh	r2, [r2, #8]
 8016300:	4611      	mov	r1, r2
 8016302:	4618      	mov	r0, r3
 8016304:	f7fb fe8c 	bl	8012020 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016308:	4b71      	ldr	r3, [pc, #452]	@ (80164d0 <tcp_receive+0xb0c>)
 801630a:	891c      	ldrh	r4, [r3, #8]
 801630c:	4b70      	ldr	r3, [pc, #448]	@ (80164d0 <tcp_receive+0xb0c>)
 801630e:	68db      	ldr	r3, [r3, #12]
 8016310:	899b      	ldrh	r3, [r3, #12]
 8016312:	b29b      	uxth	r3, r3
 8016314:	4618      	mov	r0, r3
 8016316:	f7fa fc49 	bl	8010bac <lwip_htons>
 801631a:	4603      	mov	r3, r0
 801631c:	b2db      	uxtb	r3, r3
 801631e:	f003 0303 	and.w	r3, r3, #3
 8016322:	2b00      	cmp	r3, #0
 8016324:	d001      	beq.n	801632a <tcp_receive+0x966>
 8016326:	2301      	movs	r3, #1
 8016328:	e000      	b.n	801632c <tcp_receive+0x968>
 801632a:	2300      	movs	r3, #0
 801632c:	4423      	add	r3, r4
 801632e:	b29a      	uxth	r2, r3
 8016330:	4b65      	ldr	r3, [pc, #404]	@ (80164c8 <tcp_receive+0xb04>)
 8016332:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016334:	4b64      	ldr	r3, [pc, #400]	@ (80164c8 <tcp_receive+0xb04>)
 8016336:	881b      	ldrh	r3, [r3, #0]
 8016338:	461a      	mov	r2, r3
 801633a:	4b64      	ldr	r3, [pc, #400]	@ (80164cc <tcp_receive+0xb08>)
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	441a      	add	r2, r3
 8016340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016342:	68db      	ldr	r3, [r3, #12]
 8016344:	685b      	ldr	r3, [r3, #4]
 8016346:	429a      	cmp	r2, r3
 8016348:	d006      	beq.n	8016358 <tcp_receive+0x994>
 801634a:	4b62      	ldr	r3, [pc, #392]	@ (80164d4 <tcp_receive+0xb10>)
 801634c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8016350:	4961      	ldr	r1, [pc, #388]	@ (80164d8 <tcp_receive+0xb14>)
 8016352:	4862      	ldr	r0, [pc, #392]	@ (80164dc <tcp_receive+0xb18>)
 8016354:	f006 f8a2 	bl	801c49c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801635c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801635e:	4b5a      	ldr	r3, [pc, #360]	@ (80164c8 <tcp_receive+0xb04>)
 8016360:	881b      	ldrh	r3, [r3, #0]
 8016362:	461a      	mov	r2, r3
 8016364:	4b59      	ldr	r3, [pc, #356]	@ (80164cc <tcp_receive+0xb08>)
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	441a      	add	r2, r3
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016372:	4b55      	ldr	r3, [pc, #340]	@ (80164c8 <tcp_receive+0xb04>)
 8016374:	881b      	ldrh	r3, [r3, #0]
 8016376:	429a      	cmp	r2, r3
 8016378:	d206      	bcs.n	8016388 <tcp_receive+0x9c4>
 801637a:	4b56      	ldr	r3, [pc, #344]	@ (80164d4 <tcp_receive+0xb10>)
 801637c:	f240 6207 	movw	r2, #1543	@ 0x607
 8016380:	4957      	ldr	r1, [pc, #348]	@ (80164e0 <tcp_receive+0xb1c>)
 8016382:	4856      	ldr	r0, [pc, #344]	@ (80164dc <tcp_receive+0xb18>)
 8016384:	f006 f88a 	bl	801c49c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801638c:	4b4e      	ldr	r3, [pc, #312]	@ (80164c8 <tcp_receive+0xb04>)
 801638e:	881b      	ldrh	r3, [r3, #0]
 8016390:	1ad3      	subs	r3, r2, r3
 8016392:	b29a      	uxth	r2, r3
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016398:	6878      	ldr	r0, [r7, #4]
 801639a:	f7fc fedb 	bl	8013154 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801639e:	4b4c      	ldr	r3, [pc, #304]	@ (80164d0 <tcp_receive+0xb0c>)
 80163a0:	685b      	ldr	r3, [r3, #4]
 80163a2:	891b      	ldrh	r3, [r3, #8]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d006      	beq.n	80163b6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80163a8:	4b49      	ldr	r3, [pc, #292]	@ (80164d0 <tcp_receive+0xb0c>)
 80163aa:	685b      	ldr	r3, [r3, #4]
 80163ac:	4a4d      	ldr	r2, [pc, #308]	@ (80164e4 <tcp_receive+0xb20>)
 80163ae:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80163b0:	4b47      	ldr	r3, [pc, #284]	@ (80164d0 <tcp_receive+0xb0c>)
 80163b2:	2200      	movs	r2, #0
 80163b4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80163b6:	4b46      	ldr	r3, [pc, #280]	@ (80164d0 <tcp_receive+0xb0c>)
 80163b8:	68db      	ldr	r3, [r3, #12]
 80163ba:	899b      	ldrh	r3, [r3, #12]
 80163bc:	b29b      	uxth	r3, r3
 80163be:	4618      	mov	r0, r3
 80163c0:	f7fa fbf4 	bl	8010bac <lwip_htons>
 80163c4:	4603      	mov	r3, r0
 80163c6:	b2db      	uxtb	r3, r3
 80163c8:	f003 0301 	and.w	r3, r3, #1
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	f000 80b8 	beq.w	8016542 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80163d2:	4b45      	ldr	r3, [pc, #276]	@ (80164e8 <tcp_receive+0xb24>)
 80163d4:	781b      	ldrb	r3, [r3, #0]
 80163d6:	f043 0320 	orr.w	r3, r3, #32
 80163da:	b2da      	uxtb	r2, r3
 80163dc:	4b42      	ldr	r3, [pc, #264]	@ (80164e8 <tcp_receive+0xb24>)
 80163de:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80163e0:	e0af      	b.n	8016542 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80163e6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80163ec:	68db      	ldr	r3, [r3, #12]
 80163ee:	685b      	ldr	r3, [r3, #4]
 80163f0:	4a36      	ldr	r2, [pc, #216]	@ (80164cc <tcp_receive+0xb08>)
 80163f2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80163f4:	68bb      	ldr	r3, [r7, #8]
 80163f6:	891b      	ldrh	r3, [r3, #8]
 80163f8:	461c      	mov	r4, r3
 80163fa:	68bb      	ldr	r3, [r7, #8]
 80163fc:	68db      	ldr	r3, [r3, #12]
 80163fe:	899b      	ldrh	r3, [r3, #12]
 8016400:	b29b      	uxth	r3, r3
 8016402:	4618      	mov	r0, r3
 8016404:	f7fa fbd2 	bl	8010bac <lwip_htons>
 8016408:	4603      	mov	r3, r0
 801640a:	b2db      	uxtb	r3, r3
 801640c:	f003 0303 	and.w	r3, r3, #3
 8016410:	2b00      	cmp	r3, #0
 8016412:	d001      	beq.n	8016418 <tcp_receive+0xa54>
 8016414:	2301      	movs	r3, #1
 8016416:	e000      	b.n	801641a <tcp_receive+0xa56>
 8016418:	2300      	movs	r3, #0
 801641a:	191a      	adds	r2, r3, r4
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016420:	441a      	add	r2, r3
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801642a:	461c      	mov	r4, r3
 801642c:	68bb      	ldr	r3, [r7, #8]
 801642e:	891b      	ldrh	r3, [r3, #8]
 8016430:	461d      	mov	r5, r3
 8016432:	68bb      	ldr	r3, [r7, #8]
 8016434:	68db      	ldr	r3, [r3, #12]
 8016436:	899b      	ldrh	r3, [r3, #12]
 8016438:	b29b      	uxth	r3, r3
 801643a:	4618      	mov	r0, r3
 801643c:	f7fa fbb6 	bl	8010bac <lwip_htons>
 8016440:	4603      	mov	r3, r0
 8016442:	b2db      	uxtb	r3, r3
 8016444:	f003 0303 	and.w	r3, r3, #3
 8016448:	2b00      	cmp	r3, #0
 801644a:	d001      	beq.n	8016450 <tcp_receive+0xa8c>
 801644c:	2301      	movs	r3, #1
 801644e:	e000      	b.n	8016452 <tcp_receive+0xa8e>
 8016450:	2300      	movs	r3, #0
 8016452:	442b      	add	r3, r5
 8016454:	429c      	cmp	r4, r3
 8016456:	d206      	bcs.n	8016466 <tcp_receive+0xaa2>
 8016458:	4b1e      	ldr	r3, [pc, #120]	@ (80164d4 <tcp_receive+0xb10>)
 801645a:	f240 622b 	movw	r2, #1579	@ 0x62b
 801645e:	4923      	ldr	r1, [pc, #140]	@ (80164ec <tcp_receive+0xb28>)
 8016460:	481e      	ldr	r0, [pc, #120]	@ (80164dc <tcp_receive+0xb18>)
 8016462:	f006 f81b 	bl	801c49c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016466:	68bb      	ldr	r3, [r7, #8]
 8016468:	891b      	ldrh	r3, [r3, #8]
 801646a:	461c      	mov	r4, r3
 801646c:	68bb      	ldr	r3, [r7, #8]
 801646e:	68db      	ldr	r3, [r3, #12]
 8016470:	899b      	ldrh	r3, [r3, #12]
 8016472:	b29b      	uxth	r3, r3
 8016474:	4618      	mov	r0, r3
 8016476:	f7fa fb99 	bl	8010bac <lwip_htons>
 801647a:	4603      	mov	r3, r0
 801647c:	b2db      	uxtb	r3, r3
 801647e:	f003 0303 	and.w	r3, r3, #3
 8016482:	2b00      	cmp	r3, #0
 8016484:	d001      	beq.n	801648a <tcp_receive+0xac6>
 8016486:	2301      	movs	r3, #1
 8016488:	e000      	b.n	801648c <tcp_receive+0xac8>
 801648a:	2300      	movs	r3, #0
 801648c:	1919      	adds	r1, r3, r4
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016492:	b28b      	uxth	r3, r1
 8016494:	1ad3      	subs	r3, r2, r3
 8016496:	b29a      	uxth	r2, r3
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801649c:	6878      	ldr	r0, [r7, #4]
 801649e:	f7fc fe59 	bl	8013154 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80164a2:	68bb      	ldr	r3, [r7, #8]
 80164a4:	685b      	ldr	r3, [r3, #4]
 80164a6:	891b      	ldrh	r3, [r3, #8]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d028      	beq.n	80164fe <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80164ac:	4b0d      	ldr	r3, [pc, #52]	@ (80164e4 <tcp_receive+0xb20>)
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d01d      	beq.n	80164f0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80164b4:	4b0b      	ldr	r3, [pc, #44]	@ (80164e4 <tcp_receive+0xb20>)
 80164b6:	681a      	ldr	r2, [r3, #0]
 80164b8:	68bb      	ldr	r3, [r7, #8]
 80164ba:	685b      	ldr	r3, [r3, #4]
 80164bc:	4619      	mov	r1, r3
 80164be:	4610      	mov	r0, r2
 80164c0:	f7fc f802 	bl	80124c8 <pbuf_cat>
 80164c4:	e018      	b.n	80164f8 <tcp_receive+0xb34>
 80164c6:	bf00      	nop
 80164c8:	2000c90e 	.word	0x2000c90e
 80164cc:	2000c904 	.word	0x2000c904
 80164d0:	2000c8e4 	.word	0x2000c8e4
 80164d4:	080204e0 	.word	0x080204e0
 80164d8:	080208c0 	.word	0x080208c0
 80164dc:	0802052c 	.word	0x0802052c
 80164e0:	080208fc 	.word	0x080208fc
 80164e4:	2000c914 	.word	0x2000c914
 80164e8:	2000c911 	.word	0x2000c911
 80164ec:	0802091c 	.word	0x0802091c
            } else {
              recv_data = cseg->p;
 80164f0:	68bb      	ldr	r3, [r7, #8]
 80164f2:	685b      	ldr	r3, [r3, #4]
 80164f4:	4a70      	ldr	r2, [pc, #448]	@ (80166b8 <tcp_receive+0xcf4>)
 80164f6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80164f8:	68bb      	ldr	r3, [r7, #8]
 80164fa:	2200      	movs	r2, #0
 80164fc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80164fe:	68bb      	ldr	r3, [r7, #8]
 8016500:	68db      	ldr	r3, [r3, #12]
 8016502:	899b      	ldrh	r3, [r3, #12]
 8016504:	b29b      	uxth	r3, r3
 8016506:	4618      	mov	r0, r3
 8016508:	f7fa fb50 	bl	8010bac <lwip_htons>
 801650c:	4603      	mov	r3, r0
 801650e:	b2db      	uxtb	r3, r3
 8016510:	f003 0301 	and.w	r3, r3, #1
 8016514:	2b00      	cmp	r3, #0
 8016516:	d00d      	beq.n	8016534 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8016518:	4b68      	ldr	r3, [pc, #416]	@ (80166bc <tcp_receive+0xcf8>)
 801651a:	781b      	ldrb	r3, [r3, #0]
 801651c:	f043 0320 	orr.w	r3, r3, #32
 8016520:	b2da      	uxtb	r2, r3
 8016522:	4b66      	ldr	r3, [pc, #408]	@ (80166bc <tcp_receive+0xcf8>)
 8016524:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	7d1b      	ldrb	r3, [r3, #20]
 801652a:	2b04      	cmp	r3, #4
 801652c:	d102      	bne.n	8016534 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	2207      	movs	r2, #7
 8016532:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8016534:	68bb      	ldr	r3, [r7, #8]
 8016536:	681a      	ldr	r2, [r3, #0]
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801653c:	68b8      	ldr	r0, [r7, #8]
 801653e:	f7fd fb30 	bl	8013ba2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016546:	2b00      	cmp	r3, #0
 8016548:	d008      	beq.n	801655c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801654e:	68db      	ldr	r3, [r3, #12]
 8016550:	685a      	ldr	r2, [r3, #4]
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8016556:	429a      	cmp	r2, r3
 8016558:	f43f af43 	beq.w	80163e2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	8b5b      	ldrh	r3, [r3, #26]
 8016560:	f003 0301 	and.w	r3, r3, #1
 8016564:	2b00      	cmp	r3, #0
 8016566:	d00e      	beq.n	8016586 <tcp_receive+0xbc2>
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	8b5b      	ldrh	r3, [r3, #26]
 801656c:	f023 0301 	bic.w	r3, r3, #1
 8016570:	b29a      	uxth	r2, r3
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	835a      	strh	r2, [r3, #26]
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	8b5b      	ldrh	r3, [r3, #26]
 801657a:	f043 0302 	orr.w	r3, r3, #2
 801657e:	b29a      	uxth	r2, r3
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016584:	e187      	b.n	8016896 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	8b5b      	ldrh	r3, [r3, #26]
 801658a:	f043 0301 	orr.w	r3, r3, #1
 801658e:	b29a      	uxth	r2, r3
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016594:	e17f      	b.n	8016896 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801659a:	2b00      	cmp	r3, #0
 801659c:	d106      	bne.n	80165ac <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801659e:	4848      	ldr	r0, [pc, #288]	@ (80166c0 <tcp_receive+0xcfc>)
 80165a0:	f7fd fb36 	bl	8013c10 <tcp_seg_copy>
 80165a4:	4602      	mov	r2, r0
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	675a      	str	r2, [r3, #116]	@ 0x74
 80165aa:	e16c      	b.n	8016886 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80165ac:	2300      	movs	r3, #0
 80165ae:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80165b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80165b6:	e156      	b.n	8016866 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80165b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165ba:	68db      	ldr	r3, [r3, #12]
 80165bc:	685a      	ldr	r2, [r3, #4]
 80165be:	4b41      	ldr	r3, [pc, #260]	@ (80166c4 <tcp_receive+0xd00>)
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	429a      	cmp	r2, r3
 80165c4:	d11d      	bne.n	8016602 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80165c6:	4b3e      	ldr	r3, [pc, #248]	@ (80166c0 <tcp_receive+0xcfc>)
 80165c8:	891a      	ldrh	r2, [r3, #8]
 80165ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165cc:	891b      	ldrh	r3, [r3, #8]
 80165ce:	429a      	cmp	r2, r3
 80165d0:	f240 814e 	bls.w	8016870 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80165d4:	483a      	ldr	r0, [pc, #232]	@ (80166c0 <tcp_receive+0xcfc>)
 80165d6:	f7fd fb1b 	bl	8013c10 <tcp_seg_copy>
 80165da:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80165dc:	697b      	ldr	r3, [r7, #20]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	f000 8148 	beq.w	8016874 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80165e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d003      	beq.n	80165f2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80165ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165ec:	697a      	ldr	r2, [r7, #20]
 80165ee:	601a      	str	r2, [r3, #0]
 80165f0:	e002      	b.n	80165f8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	697a      	ldr	r2, [r7, #20]
 80165f6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80165f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80165fa:	6978      	ldr	r0, [r7, #20]
 80165fc:	f7ff f8de 	bl	80157bc <tcp_oos_insert_segment>
                }
                break;
 8016600:	e138      	b.n	8016874 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8016602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016604:	2b00      	cmp	r3, #0
 8016606:	d117      	bne.n	8016638 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016608:	4b2e      	ldr	r3, [pc, #184]	@ (80166c4 <tcp_receive+0xd00>)
 801660a:	681a      	ldr	r2, [r3, #0]
 801660c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801660e:	68db      	ldr	r3, [r3, #12]
 8016610:	685b      	ldr	r3, [r3, #4]
 8016612:	1ad3      	subs	r3, r2, r3
 8016614:	2b00      	cmp	r3, #0
 8016616:	da57      	bge.n	80166c8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016618:	4829      	ldr	r0, [pc, #164]	@ (80166c0 <tcp_receive+0xcfc>)
 801661a:	f7fd faf9 	bl	8013c10 <tcp_seg_copy>
 801661e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8016620:	69bb      	ldr	r3, [r7, #24]
 8016622:	2b00      	cmp	r3, #0
 8016624:	f000 8128 	beq.w	8016878 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	69ba      	ldr	r2, [r7, #24]
 801662c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801662e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016630:	69b8      	ldr	r0, [r7, #24]
 8016632:	f7ff f8c3 	bl	80157bc <tcp_oos_insert_segment>
                  }
                  break;
 8016636:	e11f      	b.n	8016878 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8016638:	4b22      	ldr	r3, [pc, #136]	@ (80166c4 <tcp_receive+0xd00>)
 801663a:	681a      	ldr	r2, [r3, #0]
 801663c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801663e:	68db      	ldr	r3, [r3, #12]
 8016640:	685b      	ldr	r3, [r3, #4]
 8016642:	1ad3      	subs	r3, r2, r3
 8016644:	3b01      	subs	r3, #1
 8016646:	2b00      	cmp	r3, #0
 8016648:	db3e      	blt.n	80166c8 <tcp_receive+0xd04>
 801664a:	4b1e      	ldr	r3, [pc, #120]	@ (80166c4 <tcp_receive+0xd00>)
 801664c:	681a      	ldr	r2, [r3, #0]
 801664e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016650:	68db      	ldr	r3, [r3, #12]
 8016652:	685b      	ldr	r3, [r3, #4]
 8016654:	1ad3      	subs	r3, r2, r3
 8016656:	3301      	adds	r3, #1
 8016658:	2b00      	cmp	r3, #0
 801665a:	dc35      	bgt.n	80166c8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801665c:	4818      	ldr	r0, [pc, #96]	@ (80166c0 <tcp_receive+0xcfc>)
 801665e:	f7fd fad7 	bl	8013c10 <tcp_seg_copy>
 8016662:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8016664:	69fb      	ldr	r3, [r7, #28]
 8016666:	2b00      	cmp	r3, #0
 8016668:	f000 8108 	beq.w	801687c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801666c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801666e:	68db      	ldr	r3, [r3, #12]
 8016670:	685b      	ldr	r3, [r3, #4]
 8016672:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016674:	8912      	ldrh	r2, [r2, #8]
 8016676:	441a      	add	r2, r3
 8016678:	4b12      	ldr	r3, [pc, #72]	@ (80166c4 <tcp_receive+0xd00>)
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	1ad3      	subs	r3, r2, r3
 801667e:	2b00      	cmp	r3, #0
 8016680:	dd12      	ble.n	80166a8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8016682:	4b10      	ldr	r3, [pc, #64]	@ (80166c4 <tcp_receive+0xd00>)
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	b29a      	uxth	r2, r3
 8016688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801668a:	68db      	ldr	r3, [r3, #12]
 801668c:	685b      	ldr	r3, [r3, #4]
 801668e:	b29b      	uxth	r3, r3
 8016690:	1ad3      	subs	r3, r2, r3
 8016692:	b29a      	uxth	r2, r3
 8016694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016696:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8016698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801669a:	685a      	ldr	r2, [r3, #4]
 801669c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801669e:	891b      	ldrh	r3, [r3, #8]
 80166a0:	4619      	mov	r1, r3
 80166a2:	4610      	mov	r0, r2
 80166a4:	f7fb fcbc 	bl	8012020 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80166a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80166aa:	69fa      	ldr	r2, [r7, #28]
 80166ac:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80166ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80166b0:	69f8      	ldr	r0, [r7, #28]
 80166b2:	f7ff f883 	bl	80157bc <tcp_oos_insert_segment>
                  }
                  break;
 80166b6:	e0e1      	b.n	801687c <tcp_receive+0xeb8>
 80166b8:	2000c914 	.word	0x2000c914
 80166bc:	2000c911 	.word	0x2000c911
 80166c0:	2000c8e4 	.word	0x2000c8e4
 80166c4:	2000c904 	.word	0x2000c904
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80166c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166ca:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80166cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	f040 80c5 	bne.w	8016860 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80166d6:	4b7f      	ldr	r3, [pc, #508]	@ (80168d4 <tcp_receive+0xf10>)
 80166d8:	681a      	ldr	r2, [r3, #0]
 80166da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166dc:	68db      	ldr	r3, [r3, #12]
 80166de:	685b      	ldr	r3, [r3, #4]
 80166e0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	f340 80bc 	ble.w	8016860 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80166e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80166ea:	68db      	ldr	r3, [r3, #12]
 80166ec:	899b      	ldrh	r3, [r3, #12]
 80166ee:	b29b      	uxth	r3, r3
 80166f0:	4618      	mov	r0, r3
 80166f2:	f7fa fa5b 	bl	8010bac <lwip_htons>
 80166f6:	4603      	mov	r3, r0
 80166f8:	b2db      	uxtb	r3, r3
 80166fa:	f003 0301 	and.w	r3, r3, #1
 80166fe:	2b00      	cmp	r3, #0
 8016700:	f040 80be 	bne.w	8016880 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8016704:	4874      	ldr	r0, [pc, #464]	@ (80168d8 <tcp_receive+0xf14>)
 8016706:	f7fd fa83 	bl	8013c10 <tcp_seg_copy>
 801670a:	4602      	mov	r2, r0
 801670c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801670e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8016710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	2b00      	cmp	r3, #0
 8016716:	f000 80b5 	beq.w	8016884 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801671a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801671c:	68db      	ldr	r3, [r3, #12]
 801671e:	685b      	ldr	r3, [r3, #4]
 8016720:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016722:	8912      	ldrh	r2, [r2, #8]
 8016724:	441a      	add	r2, r3
 8016726:	4b6b      	ldr	r3, [pc, #428]	@ (80168d4 <tcp_receive+0xf10>)
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	1ad3      	subs	r3, r2, r3
 801672c:	2b00      	cmp	r3, #0
 801672e:	dd12      	ble.n	8016756 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016730:	4b68      	ldr	r3, [pc, #416]	@ (80168d4 <tcp_receive+0xf10>)
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	b29a      	uxth	r2, r3
 8016736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016738:	68db      	ldr	r3, [r3, #12]
 801673a:	685b      	ldr	r3, [r3, #4]
 801673c:	b29b      	uxth	r3, r3
 801673e:	1ad3      	subs	r3, r2, r3
 8016740:	b29a      	uxth	r2, r3
 8016742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016744:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8016746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016748:	685a      	ldr	r2, [r3, #4]
 801674a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801674c:	891b      	ldrh	r3, [r3, #8]
 801674e:	4619      	mov	r1, r3
 8016750:	4610      	mov	r0, r2
 8016752:	f7fb fc65 	bl	8012020 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8016756:	4b61      	ldr	r3, [pc, #388]	@ (80168dc <tcp_receive+0xf18>)
 8016758:	881b      	ldrh	r3, [r3, #0]
 801675a:	461a      	mov	r2, r3
 801675c:	4b5d      	ldr	r3, [pc, #372]	@ (80168d4 <tcp_receive+0xf10>)
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	441a      	add	r2, r3
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016766:	6879      	ldr	r1, [r7, #4]
 8016768:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801676a:	440b      	add	r3, r1
 801676c:	1ad3      	subs	r3, r2, r3
 801676e:	2b00      	cmp	r3, #0
 8016770:	f340 8088 	ble.w	8016884 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8016774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	68db      	ldr	r3, [r3, #12]
 801677a:	899b      	ldrh	r3, [r3, #12]
 801677c:	b29b      	uxth	r3, r3
 801677e:	4618      	mov	r0, r3
 8016780:	f7fa fa14 	bl	8010bac <lwip_htons>
 8016784:	4603      	mov	r3, r0
 8016786:	b2db      	uxtb	r3, r3
 8016788:	f003 0301 	and.w	r3, r3, #1
 801678c:	2b00      	cmp	r3, #0
 801678e:	d021      	beq.n	80167d4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8016790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	68db      	ldr	r3, [r3, #12]
 8016796:	899b      	ldrh	r3, [r3, #12]
 8016798:	b29b      	uxth	r3, r3
 801679a:	b21b      	sxth	r3, r3
 801679c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80167a0:	b21c      	sxth	r4, r3
 80167a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	68db      	ldr	r3, [r3, #12]
 80167a8:	899b      	ldrh	r3, [r3, #12]
 80167aa:	b29b      	uxth	r3, r3
 80167ac:	4618      	mov	r0, r3
 80167ae:	f7fa f9fd 	bl	8010bac <lwip_htons>
 80167b2:	4603      	mov	r3, r0
 80167b4:	b2db      	uxtb	r3, r3
 80167b6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80167ba:	b29b      	uxth	r3, r3
 80167bc:	4618      	mov	r0, r3
 80167be:	f7fa f9f5 	bl	8010bac <lwip_htons>
 80167c2:	4603      	mov	r3, r0
 80167c4:	b21b      	sxth	r3, r3
 80167c6:	4323      	orrs	r3, r4
 80167c8:	b21a      	sxth	r2, r3
 80167ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	68db      	ldr	r3, [r3, #12]
 80167d0:	b292      	uxth	r2, r2
 80167d2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80167d8:	b29a      	uxth	r2, r3
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80167de:	4413      	add	r3, r2
 80167e0:	b299      	uxth	r1, r3
 80167e2:	4b3c      	ldr	r3, [pc, #240]	@ (80168d4 <tcp_receive+0xf10>)
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	b29a      	uxth	r2, r3
 80167e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	1a8a      	subs	r2, r1, r2
 80167ee:	b292      	uxth	r2, r2
 80167f0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80167f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	685a      	ldr	r2, [r3, #4]
 80167f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	891b      	ldrh	r3, [r3, #8]
 80167fe:	4619      	mov	r1, r3
 8016800:	4610      	mov	r0, r2
 8016802:	f7fb fc0d 	bl	8012020 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8016806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	891c      	ldrh	r4, [r3, #8]
 801680c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	68db      	ldr	r3, [r3, #12]
 8016812:	899b      	ldrh	r3, [r3, #12]
 8016814:	b29b      	uxth	r3, r3
 8016816:	4618      	mov	r0, r3
 8016818:	f7fa f9c8 	bl	8010bac <lwip_htons>
 801681c:	4603      	mov	r3, r0
 801681e:	b2db      	uxtb	r3, r3
 8016820:	f003 0303 	and.w	r3, r3, #3
 8016824:	2b00      	cmp	r3, #0
 8016826:	d001      	beq.n	801682c <tcp_receive+0xe68>
 8016828:	2301      	movs	r3, #1
 801682a:	e000      	b.n	801682e <tcp_receive+0xe6a>
 801682c:	2300      	movs	r3, #0
 801682e:	4423      	add	r3, r4
 8016830:	b29a      	uxth	r2, r3
 8016832:	4b2a      	ldr	r3, [pc, #168]	@ (80168dc <tcp_receive+0xf18>)
 8016834:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016836:	4b29      	ldr	r3, [pc, #164]	@ (80168dc <tcp_receive+0xf18>)
 8016838:	881b      	ldrh	r3, [r3, #0]
 801683a:	461a      	mov	r2, r3
 801683c:	4b25      	ldr	r3, [pc, #148]	@ (80168d4 <tcp_receive+0xf10>)
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	441a      	add	r2, r3
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016846:	6879      	ldr	r1, [r7, #4]
 8016848:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801684a:	440b      	add	r3, r1
 801684c:	429a      	cmp	r2, r3
 801684e:	d019      	beq.n	8016884 <tcp_receive+0xec0>
 8016850:	4b23      	ldr	r3, [pc, #140]	@ (80168e0 <tcp_receive+0xf1c>)
 8016852:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8016856:	4923      	ldr	r1, [pc, #140]	@ (80168e4 <tcp_receive+0xf20>)
 8016858:	4823      	ldr	r0, [pc, #140]	@ (80168e8 <tcp_receive+0xf24>)
 801685a:	f005 fe1f 	bl	801c49c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801685e:	e011      	b.n	8016884 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016868:	2b00      	cmp	r3, #0
 801686a:	f47f aea5 	bne.w	80165b8 <tcp_receive+0xbf4>
 801686e:	e00a      	b.n	8016886 <tcp_receive+0xec2>
                break;
 8016870:	bf00      	nop
 8016872:	e008      	b.n	8016886 <tcp_receive+0xec2>
                break;
 8016874:	bf00      	nop
 8016876:	e006      	b.n	8016886 <tcp_receive+0xec2>
                  break;
 8016878:	bf00      	nop
 801687a:	e004      	b.n	8016886 <tcp_receive+0xec2>
                  break;
 801687c:	bf00      	nop
 801687e:	e002      	b.n	8016886 <tcp_receive+0xec2>
                  break;
 8016880:	bf00      	nop
 8016882:	e000      	b.n	8016886 <tcp_receive+0xec2>
                break;
 8016884:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8016886:	6878      	ldr	r0, [r7, #4]
 8016888:	f001 fe88 	bl	801859c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801688c:	e003      	b.n	8016896 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801688e:	6878      	ldr	r0, [r7, #4]
 8016890:	f001 fe84 	bl	801859c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016894:	e01a      	b.n	80168cc <tcp_receive+0xf08>
 8016896:	e019      	b.n	80168cc <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8016898:	4b0e      	ldr	r3, [pc, #56]	@ (80168d4 <tcp_receive+0xf10>)
 801689a:	681a      	ldr	r2, [r3, #0]
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168a0:	1ad3      	subs	r3, r2, r3
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	db0a      	blt.n	80168bc <tcp_receive+0xef8>
 80168a6:	4b0b      	ldr	r3, [pc, #44]	@ (80168d4 <tcp_receive+0xf10>)
 80168a8:	681a      	ldr	r2, [r3, #0]
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168ae:	6879      	ldr	r1, [r7, #4]
 80168b0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80168b2:	440b      	add	r3, r1
 80168b4:	1ad3      	subs	r3, r2, r3
 80168b6:	3301      	adds	r3, #1
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	dd07      	ble.n	80168cc <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	8b5b      	ldrh	r3, [r3, #26]
 80168c0:	f043 0302 	orr.w	r3, r3, #2
 80168c4:	b29a      	uxth	r2, r3
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80168ca:	e7ff      	b.n	80168cc <tcp_receive+0xf08>
 80168cc:	bf00      	nop
 80168ce:	3750      	adds	r7, #80	@ 0x50
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bdb0      	pop	{r4, r5, r7, pc}
 80168d4:	2000c904 	.word	0x2000c904
 80168d8:	2000c8e4 	.word	0x2000c8e4
 80168dc:	2000c90e 	.word	0x2000c90e
 80168e0:	080204e0 	.word	0x080204e0
 80168e4:	08020888 	.word	0x08020888
 80168e8:	0802052c 	.word	0x0802052c

080168ec <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80168ec:	b480      	push	{r7}
 80168ee:	b083      	sub	sp, #12
 80168f0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80168f2:	4b15      	ldr	r3, [pc, #84]	@ (8016948 <tcp_get_next_optbyte+0x5c>)
 80168f4:	881b      	ldrh	r3, [r3, #0]
 80168f6:	1c5a      	adds	r2, r3, #1
 80168f8:	b291      	uxth	r1, r2
 80168fa:	4a13      	ldr	r2, [pc, #76]	@ (8016948 <tcp_get_next_optbyte+0x5c>)
 80168fc:	8011      	strh	r1, [r2, #0]
 80168fe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8016900:	4b12      	ldr	r3, [pc, #72]	@ (801694c <tcp_get_next_optbyte+0x60>)
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d004      	beq.n	8016912 <tcp_get_next_optbyte+0x26>
 8016908:	4b11      	ldr	r3, [pc, #68]	@ (8016950 <tcp_get_next_optbyte+0x64>)
 801690a:	881b      	ldrh	r3, [r3, #0]
 801690c:	88fa      	ldrh	r2, [r7, #6]
 801690e:	429a      	cmp	r2, r3
 8016910:	d208      	bcs.n	8016924 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8016912:	4b10      	ldr	r3, [pc, #64]	@ (8016954 <tcp_get_next_optbyte+0x68>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	3314      	adds	r3, #20
 8016918:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801691a:	88fb      	ldrh	r3, [r7, #6]
 801691c:	683a      	ldr	r2, [r7, #0]
 801691e:	4413      	add	r3, r2
 8016920:	781b      	ldrb	r3, [r3, #0]
 8016922:	e00b      	b.n	801693c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8016924:	88fb      	ldrh	r3, [r7, #6]
 8016926:	b2da      	uxtb	r2, r3
 8016928:	4b09      	ldr	r3, [pc, #36]	@ (8016950 <tcp_get_next_optbyte+0x64>)
 801692a:	881b      	ldrh	r3, [r3, #0]
 801692c:	b2db      	uxtb	r3, r3
 801692e:	1ad3      	subs	r3, r2, r3
 8016930:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8016932:	4b06      	ldr	r3, [pc, #24]	@ (801694c <tcp_get_next_optbyte+0x60>)
 8016934:	681a      	ldr	r2, [r3, #0]
 8016936:	797b      	ldrb	r3, [r7, #5]
 8016938:	4413      	add	r3, r2
 801693a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801693c:	4618      	mov	r0, r3
 801693e:	370c      	adds	r7, #12
 8016940:	46bd      	mov	sp, r7
 8016942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016946:	4770      	bx	lr
 8016948:	2000c900 	.word	0x2000c900
 801694c:	2000c8fc 	.word	0x2000c8fc
 8016950:	2000c8fa 	.word	0x2000c8fa
 8016954:	2000c8f4 	.word	0x2000c8f4

08016958 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b084      	sub	sp, #16
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	2b00      	cmp	r3, #0
 8016964:	d106      	bne.n	8016974 <tcp_parseopt+0x1c>
 8016966:	4b32      	ldr	r3, [pc, #200]	@ (8016a30 <tcp_parseopt+0xd8>)
 8016968:	f240 727d 	movw	r2, #1917	@ 0x77d
 801696c:	4931      	ldr	r1, [pc, #196]	@ (8016a34 <tcp_parseopt+0xdc>)
 801696e:	4832      	ldr	r0, [pc, #200]	@ (8016a38 <tcp_parseopt+0xe0>)
 8016970:	f005 fd94 	bl	801c49c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8016974:	4b31      	ldr	r3, [pc, #196]	@ (8016a3c <tcp_parseopt+0xe4>)
 8016976:	881b      	ldrh	r3, [r3, #0]
 8016978:	2b00      	cmp	r3, #0
 801697a:	d056      	beq.n	8016a2a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801697c:	4b30      	ldr	r3, [pc, #192]	@ (8016a40 <tcp_parseopt+0xe8>)
 801697e:	2200      	movs	r2, #0
 8016980:	801a      	strh	r2, [r3, #0]
 8016982:	e046      	b.n	8016a12 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8016984:	f7ff ffb2 	bl	80168ec <tcp_get_next_optbyte>
 8016988:	4603      	mov	r3, r0
 801698a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801698c:	7bfb      	ldrb	r3, [r7, #15]
 801698e:	2b02      	cmp	r3, #2
 8016990:	d006      	beq.n	80169a0 <tcp_parseopt+0x48>
 8016992:	2b02      	cmp	r3, #2
 8016994:	dc2a      	bgt.n	80169ec <tcp_parseopt+0x94>
 8016996:	2b00      	cmp	r3, #0
 8016998:	d042      	beq.n	8016a20 <tcp_parseopt+0xc8>
 801699a:	2b01      	cmp	r3, #1
 801699c:	d038      	beq.n	8016a10 <tcp_parseopt+0xb8>
 801699e:	e025      	b.n	80169ec <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80169a0:	f7ff ffa4 	bl	80168ec <tcp_get_next_optbyte>
 80169a4:	4603      	mov	r3, r0
 80169a6:	2b04      	cmp	r3, #4
 80169a8:	d13c      	bne.n	8016a24 <tcp_parseopt+0xcc>
 80169aa:	4b25      	ldr	r3, [pc, #148]	@ (8016a40 <tcp_parseopt+0xe8>)
 80169ac:	881b      	ldrh	r3, [r3, #0]
 80169ae:	3301      	adds	r3, #1
 80169b0:	4a22      	ldr	r2, [pc, #136]	@ (8016a3c <tcp_parseopt+0xe4>)
 80169b2:	8812      	ldrh	r2, [r2, #0]
 80169b4:	4293      	cmp	r3, r2
 80169b6:	da35      	bge.n	8016a24 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80169b8:	f7ff ff98 	bl	80168ec <tcp_get_next_optbyte>
 80169bc:	4603      	mov	r3, r0
 80169be:	021b      	lsls	r3, r3, #8
 80169c0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80169c2:	f7ff ff93 	bl	80168ec <tcp_get_next_optbyte>
 80169c6:	4603      	mov	r3, r0
 80169c8:	461a      	mov	r2, r3
 80169ca:	89bb      	ldrh	r3, [r7, #12]
 80169cc:	4313      	orrs	r3, r2
 80169ce:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80169d0:	89bb      	ldrh	r3, [r7, #12]
 80169d2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80169d6:	d804      	bhi.n	80169e2 <tcp_parseopt+0x8a>
 80169d8:	89bb      	ldrh	r3, [r7, #12]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d001      	beq.n	80169e2 <tcp_parseopt+0x8a>
 80169de:	89ba      	ldrh	r2, [r7, #12]
 80169e0:	e001      	b.n	80169e6 <tcp_parseopt+0x8e>
 80169e2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80169ea:	e012      	b.n	8016a12 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80169ec:	f7ff ff7e 	bl	80168ec <tcp_get_next_optbyte>
 80169f0:	4603      	mov	r3, r0
 80169f2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80169f4:	7afb      	ldrb	r3, [r7, #11]
 80169f6:	2b01      	cmp	r3, #1
 80169f8:	d916      	bls.n	8016a28 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80169fa:	7afb      	ldrb	r3, [r7, #11]
 80169fc:	b29a      	uxth	r2, r3
 80169fe:	4b10      	ldr	r3, [pc, #64]	@ (8016a40 <tcp_parseopt+0xe8>)
 8016a00:	881b      	ldrh	r3, [r3, #0]
 8016a02:	4413      	add	r3, r2
 8016a04:	b29b      	uxth	r3, r3
 8016a06:	3b02      	subs	r3, #2
 8016a08:	b29a      	uxth	r2, r3
 8016a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8016a40 <tcp_parseopt+0xe8>)
 8016a0c:	801a      	strh	r2, [r3, #0]
 8016a0e:	e000      	b.n	8016a12 <tcp_parseopt+0xba>
          break;
 8016a10:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016a12:	4b0b      	ldr	r3, [pc, #44]	@ (8016a40 <tcp_parseopt+0xe8>)
 8016a14:	881a      	ldrh	r2, [r3, #0]
 8016a16:	4b09      	ldr	r3, [pc, #36]	@ (8016a3c <tcp_parseopt+0xe4>)
 8016a18:	881b      	ldrh	r3, [r3, #0]
 8016a1a:	429a      	cmp	r2, r3
 8016a1c:	d3b2      	bcc.n	8016984 <tcp_parseopt+0x2c>
 8016a1e:	e004      	b.n	8016a2a <tcp_parseopt+0xd2>
          return;
 8016a20:	bf00      	nop
 8016a22:	e002      	b.n	8016a2a <tcp_parseopt+0xd2>
            return;
 8016a24:	bf00      	nop
 8016a26:	e000      	b.n	8016a2a <tcp_parseopt+0xd2>
            return;
 8016a28:	bf00      	nop
      }
    }
  }
}
 8016a2a:	3710      	adds	r7, #16
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	bd80      	pop	{r7, pc}
 8016a30:	080204e0 	.word	0x080204e0
 8016a34:	08020944 	.word	0x08020944
 8016a38:	0802052c 	.word	0x0802052c
 8016a3c:	2000c8f8 	.word	0x2000c8f8
 8016a40:	2000c900 	.word	0x2000c900

08016a44 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016a44:	b480      	push	{r7}
 8016a46:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8016a48:	4b05      	ldr	r3, [pc, #20]	@ (8016a60 <tcp_trigger_input_pcb_close+0x1c>)
 8016a4a:	781b      	ldrb	r3, [r3, #0]
 8016a4c:	f043 0310 	orr.w	r3, r3, #16
 8016a50:	b2da      	uxtb	r2, r3
 8016a52:	4b03      	ldr	r3, [pc, #12]	@ (8016a60 <tcp_trigger_input_pcb_close+0x1c>)
 8016a54:	701a      	strb	r2, [r3, #0]
}
 8016a56:	bf00      	nop
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a5e:	4770      	bx	lr
 8016a60:	2000c911 	.word	0x2000c911

08016a64 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b084      	sub	sp, #16
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	60f8      	str	r0, [r7, #12]
 8016a6c:	60b9      	str	r1, [r7, #8]
 8016a6e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d00a      	beq.n	8016a8c <tcp_route+0x28>
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	7a1b      	ldrb	r3, [r3, #8]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d006      	beq.n	8016a8c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	7a1b      	ldrb	r3, [r3, #8]
 8016a82:	4618      	mov	r0, r3
 8016a84:	f7fb f8c4 	bl	8011c10 <netif_get_by_index>
 8016a88:	4603      	mov	r3, r0
 8016a8a:	e003      	b.n	8016a94 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8016a8c:	6878      	ldr	r0, [r7, #4]
 8016a8e:	f003 fad1 	bl	801a034 <ip4_route>
 8016a92:	4603      	mov	r3, r0
  }
}
 8016a94:	4618      	mov	r0, r3
 8016a96:	3710      	adds	r7, #16
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bd80      	pop	{r7, pc}

08016a9c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8016a9c:	b590      	push	{r4, r7, lr}
 8016a9e:	b087      	sub	sp, #28
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	60f8      	str	r0, [r7, #12]
 8016aa4:	60b9      	str	r1, [r7, #8]
 8016aa6:	603b      	str	r3, [r7, #0]
 8016aa8:	4613      	mov	r3, r2
 8016aaa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d105      	bne.n	8016abe <tcp_create_segment+0x22>
 8016ab2:	4b43      	ldr	r3, [pc, #268]	@ (8016bc0 <tcp_create_segment+0x124>)
 8016ab4:	22a3      	movs	r2, #163	@ 0xa3
 8016ab6:	4943      	ldr	r1, [pc, #268]	@ (8016bc4 <tcp_create_segment+0x128>)
 8016ab8:	4843      	ldr	r0, [pc, #268]	@ (8016bc8 <tcp_create_segment+0x12c>)
 8016aba:	f005 fcef 	bl	801c49c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8016abe:	68bb      	ldr	r3, [r7, #8]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d105      	bne.n	8016ad0 <tcp_create_segment+0x34>
 8016ac4:	4b3e      	ldr	r3, [pc, #248]	@ (8016bc0 <tcp_create_segment+0x124>)
 8016ac6:	22a4      	movs	r2, #164	@ 0xa4
 8016ac8:	4940      	ldr	r1, [pc, #256]	@ (8016bcc <tcp_create_segment+0x130>)
 8016aca:	483f      	ldr	r0, [pc, #252]	@ (8016bc8 <tcp_create_segment+0x12c>)
 8016acc:	f005 fce6 	bl	801c49c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016ad0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016ad4:	009b      	lsls	r3, r3, #2
 8016ad6:	b2db      	uxtb	r3, r3
 8016ad8:	f003 0304 	and.w	r3, r3, #4
 8016adc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8016ade:	2003      	movs	r0, #3
 8016ae0:	f7fa fd3c 	bl	801155c <memp_malloc>
 8016ae4:	6138      	str	r0, [r7, #16]
 8016ae6:	693b      	ldr	r3, [r7, #16]
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d104      	bne.n	8016af6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8016aec:	68b8      	ldr	r0, [r7, #8]
 8016aee:	f7fb fc1d 	bl	801232c <pbuf_free>
    return NULL;
 8016af2:	2300      	movs	r3, #0
 8016af4:	e060      	b.n	8016bb8 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8016af6:	693b      	ldr	r3, [r7, #16]
 8016af8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8016afc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8016afe:	693b      	ldr	r3, [r7, #16]
 8016b00:	2200      	movs	r2, #0
 8016b02:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016b04:	693b      	ldr	r3, [r7, #16]
 8016b06:	68ba      	ldr	r2, [r7, #8]
 8016b08:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8016b0a:	68bb      	ldr	r3, [r7, #8]
 8016b0c:	891a      	ldrh	r2, [r3, #8]
 8016b0e:	7dfb      	ldrb	r3, [r7, #23]
 8016b10:	b29b      	uxth	r3, r3
 8016b12:	429a      	cmp	r2, r3
 8016b14:	d205      	bcs.n	8016b22 <tcp_create_segment+0x86>
 8016b16:	4b2a      	ldr	r3, [pc, #168]	@ (8016bc0 <tcp_create_segment+0x124>)
 8016b18:	22b0      	movs	r2, #176	@ 0xb0
 8016b1a:	492d      	ldr	r1, [pc, #180]	@ (8016bd0 <tcp_create_segment+0x134>)
 8016b1c:	482a      	ldr	r0, [pc, #168]	@ (8016bc8 <tcp_create_segment+0x12c>)
 8016b1e:	f005 fcbd 	bl	801c49c <iprintf>
  seg->len = p->tot_len - optlen;
 8016b22:	68bb      	ldr	r3, [r7, #8]
 8016b24:	891a      	ldrh	r2, [r3, #8]
 8016b26:	7dfb      	ldrb	r3, [r7, #23]
 8016b28:	b29b      	uxth	r3, r3
 8016b2a:	1ad3      	subs	r3, r2, r3
 8016b2c:	b29a      	uxth	r2, r3
 8016b2e:	693b      	ldr	r3, [r7, #16]
 8016b30:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8016b32:	2114      	movs	r1, #20
 8016b34:	68b8      	ldr	r0, [r7, #8]
 8016b36:	f7fb fb63 	bl	8012200 <pbuf_add_header>
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d004      	beq.n	8016b4a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016b40:	6938      	ldr	r0, [r7, #16]
 8016b42:	f7fd f82e 	bl	8013ba2 <tcp_seg_free>
    return NULL;
 8016b46:	2300      	movs	r3, #0
 8016b48:	e036      	b.n	8016bb8 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8016b4a:	693b      	ldr	r3, [r7, #16]
 8016b4c:	685b      	ldr	r3, [r3, #4]
 8016b4e:	685a      	ldr	r2, [r3, #4]
 8016b50:	693b      	ldr	r3, [r7, #16]
 8016b52:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	8ada      	ldrh	r2, [r3, #22]
 8016b58:	693b      	ldr	r3, [r7, #16]
 8016b5a:	68dc      	ldr	r4, [r3, #12]
 8016b5c:	4610      	mov	r0, r2
 8016b5e:	f7fa f825 	bl	8010bac <lwip_htons>
 8016b62:	4603      	mov	r3, r0
 8016b64:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	8b1a      	ldrh	r2, [r3, #24]
 8016b6a:	693b      	ldr	r3, [r7, #16]
 8016b6c:	68dc      	ldr	r4, [r3, #12]
 8016b6e:	4610      	mov	r0, r2
 8016b70:	f7fa f81c 	bl	8010bac <lwip_htons>
 8016b74:	4603      	mov	r3, r0
 8016b76:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8016b78:	693b      	ldr	r3, [r7, #16]
 8016b7a:	68dc      	ldr	r4, [r3, #12]
 8016b7c:	6838      	ldr	r0, [r7, #0]
 8016b7e:	f7fa f82b 	bl	8010bd8 <lwip_htonl>
 8016b82:	4603      	mov	r3, r0
 8016b84:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8016b86:	7dfb      	ldrb	r3, [r7, #23]
 8016b88:	089b      	lsrs	r3, r3, #2
 8016b8a:	b2db      	uxtb	r3, r3
 8016b8c:	3305      	adds	r3, #5
 8016b8e:	b29b      	uxth	r3, r3
 8016b90:	031b      	lsls	r3, r3, #12
 8016b92:	b29a      	uxth	r2, r3
 8016b94:	79fb      	ldrb	r3, [r7, #7]
 8016b96:	b29b      	uxth	r3, r3
 8016b98:	4313      	orrs	r3, r2
 8016b9a:	b29a      	uxth	r2, r3
 8016b9c:	693b      	ldr	r3, [r7, #16]
 8016b9e:	68dc      	ldr	r4, [r3, #12]
 8016ba0:	4610      	mov	r0, r2
 8016ba2:	f7fa f803 	bl	8010bac <lwip_htons>
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8016baa:	693b      	ldr	r3, [r7, #16]
 8016bac:	68db      	ldr	r3, [r3, #12]
 8016bae:	2200      	movs	r2, #0
 8016bb0:	749a      	strb	r2, [r3, #18]
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	74da      	strb	r2, [r3, #19]
  return seg;
 8016bb6:	693b      	ldr	r3, [r7, #16]
}
 8016bb8:	4618      	mov	r0, r3
 8016bba:	371c      	adds	r7, #28
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	bd90      	pop	{r4, r7, pc}
 8016bc0:	08020960 	.word	0x08020960
 8016bc4:	08020994 	.word	0x08020994
 8016bc8:	080209b4 	.word	0x080209b4
 8016bcc:	080209dc 	.word	0x080209dc
 8016bd0:	08020a00 	.word	0x08020a00

08016bd4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b086      	sub	sp, #24
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	607b      	str	r3, [r7, #4]
 8016bdc:	4603      	mov	r3, r0
 8016bde:	73fb      	strb	r3, [r7, #15]
 8016be0:	460b      	mov	r3, r1
 8016be2:	81bb      	strh	r3, [r7, #12]
 8016be4:	4613      	mov	r3, r2
 8016be6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8016be8:	89bb      	ldrh	r3, [r7, #12]
 8016bea:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d105      	bne.n	8016bfe <tcp_pbuf_prealloc+0x2a>
 8016bf2:	4b30      	ldr	r3, [pc, #192]	@ (8016cb4 <tcp_pbuf_prealloc+0xe0>)
 8016bf4:	22e8      	movs	r2, #232	@ 0xe8
 8016bf6:	4930      	ldr	r1, [pc, #192]	@ (8016cb8 <tcp_pbuf_prealloc+0xe4>)
 8016bf8:	4830      	ldr	r0, [pc, #192]	@ (8016cbc <tcp_pbuf_prealloc+0xe8>)
 8016bfa:	f005 fc4f 	bl	801c49c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8016bfe:	6a3b      	ldr	r3, [r7, #32]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d105      	bne.n	8016c10 <tcp_pbuf_prealloc+0x3c>
 8016c04:	4b2b      	ldr	r3, [pc, #172]	@ (8016cb4 <tcp_pbuf_prealloc+0xe0>)
 8016c06:	22e9      	movs	r2, #233	@ 0xe9
 8016c08:	492d      	ldr	r1, [pc, #180]	@ (8016cc0 <tcp_pbuf_prealloc+0xec>)
 8016c0a:	482c      	ldr	r0, [pc, #176]	@ (8016cbc <tcp_pbuf_prealloc+0xe8>)
 8016c0c:	f005 fc46 	bl	801c49c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8016c10:	89ba      	ldrh	r2, [r7, #12]
 8016c12:	897b      	ldrh	r3, [r7, #10]
 8016c14:	429a      	cmp	r2, r3
 8016c16:	d221      	bcs.n	8016c5c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016c18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016c1c:	f003 0302 	and.w	r3, r3, #2
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d111      	bne.n	8016c48 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8016c24:	6a3b      	ldr	r3, [r7, #32]
 8016c26:	8b5b      	ldrh	r3, [r3, #26]
 8016c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d115      	bne.n	8016c5c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8016c30:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d007      	beq.n	8016c48 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8016c38:	6a3b      	ldr	r3, [r7, #32]
 8016c3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d103      	bne.n	8016c48 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8016c40:	6a3b      	ldr	r3, [r7, #32]
 8016c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d009      	beq.n	8016c5c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8016c48:	89bb      	ldrh	r3, [r7, #12]
 8016c4a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8016c4e:	f023 0203 	bic.w	r2, r3, #3
 8016c52:	897b      	ldrh	r3, [r7, #10]
 8016c54:	4293      	cmp	r3, r2
 8016c56:	bf28      	it	cs
 8016c58:	4613      	movcs	r3, r2
 8016c5a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8016c5c:	8af9      	ldrh	r1, [r7, #22]
 8016c5e:	7bfb      	ldrb	r3, [r7, #15]
 8016c60:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016c64:	4618      	mov	r0, r3
 8016c66:	f7fb f87d 	bl	8011d64 <pbuf_alloc>
 8016c6a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016c6c:	693b      	ldr	r3, [r7, #16]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d101      	bne.n	8016c76 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8016c72:	2300      	movs	r3, #0
 8016c74:	e019      	b.n	8016caa <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8016c76:	693b      	ldr	r3, [r7, #16]
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d006      	beq.n	8016c8c <tcp_pbuf_prealloc+0xb8>
 8016c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8016cb4 <tcp_pbuf_prealloc+0xe0>)
 8016c80:	f240 120b 	movw	r2, #267	@ 0x10b
 8016c84:	490f      	ldr	r1, [pc, #60]	@ (8016cc4 <tcp_pbuf_prealloc+0xf0>)
 8016c86:	480d      	ldr	r0, [pc, #52]	@ (8016cbc <tcp_pbuf_prealloc+0xe8>)
 8016c88:	f005 fc08 	bl	801c49c <iprintf>
  *oversize = p->len - length;
 8016c8c:	693b      	ldr	r3, [r7, #16]
 8016c8e:	895a      	ldrh	r2, [r3, #10]
 8016c90:	89bb      	ldrh	r3, [r7, #12]
 8016c92:	1ad3      	subs	r3, r2, r3
 8016c94:	b29a      	uxth	r2, r3
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8016c9a:	693b      	ldr	r3, [r7, #16]
 8016c9c:	89ba      	ldrh	r2, [r7, #12]
 8016c9e:	811a      	strh	r2, [r3, #8]
 8016ca0:	693b      	ldr	r3, [r7, #16]
 8016ca2:	891a      	ldrh	r2, [r3, #8]
 8016ca4:	693b      	ldr	r3, [r7, #16]
 8016ca6:	815a      	strh	r2, [r3, #10]
  return p;
 8016ca8:	693b      	ldr	r3, [r7, #16]
}
 8016caa:	4618      	mov	r0, r3
 8016cac:	3718      	adds	r7, #24
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	bd80      	pop	{r7, pc}
 8016cb2:	bf00      	nop
 8016cb4:	08020960 	.word	0x08020960
 8016cb8:	08020a18 	.word	0x08020a18
 8016cbc:	080209b4 	.word	0x080209b4
 8016cc0:	08020a3c 	.word	0x08020a3c
 8016cc4:	08020a5c 	.word	0x08020a5c

08016cc8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b082      	sub	sp, #8
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
 8016cd0:	460b      	mov	r3, r1
 8016cd2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d106      	bne.n	8016ce8 <tcp_write_checks+0x20>
 8016cda:	4b33      	ldr	r3, [pc, #204]	@ (8016da8 <tcp_write_checks+0xe0>)
 8016cdc:	f240 1233 	movw	r2, #307	@ 0x133
 8016ce0:	4932      	ldr	r1, [pc, #200]	@ (8016dac <tcp_write_checks+0xe4>)
 8016ce2:	4833      	ldr	r0, [pc, #204]	@ (8016db0 <tcp_write_checks+0xe8>)
 8016ce4:	f005 fbda 	bl	801c49c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	7d1b      	ldrb	r3, [r3, #20]
 8016cec:	2b04      	cmp	r3, #4
 8016cee:	d00e      	beq.n	8016d0e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8016cf4:	2b07      	cmp	r3, #7
 8016cf6:	d00a      	beq.n	8016d0e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8016cfc:	2b02      	cmp	r3, #2
 8016cfe:	d006      	beq.n	8016d0e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8016d04:	2b03      	cmp	r3, #3
 8016d06:	d002      	beq.n	8016d0e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8016d08:	f06f 030a 	mvn.w	r3, #10
 8016d0c:	e048      	b.n	8016da0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8016d0e:	887b      	ldrh	r3, [r7, #2]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d101      	bne.n	8016d18 <tcp_write_checks+0x50>
    return ERR_OK;
 8016d14:	2300      	movs	r3, #0
 8016d16:	e043      	b.n	8016da0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8016d1e:	887a      	ldrh	r2, [r7, #2]
 8016d20:	429a      	cmp	r2, r3
 8016d22:	d909      	bls.n	8016d38 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	8b5b      	ldrh	r3, [r3, #26]
 8016d28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016d2c:	b29a      	uxth	r2, r3
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016d32:	f04f 33ff 	mov.w	r3, #4294967295
 8016d36:	e033      	b.n	8016da0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016d3e:	2b08      	cmp	r3, #8
 8016d40:	d909      	bls.n	8016d56 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	8b5b      	ldrh	r3, [r3, #26]
 8016d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016d4a:	b29a      	uxth	r2, r3
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016d50:	f04f 33ff 	mov.w	r3, #4294967295
 8016d54:	e024      	b.n	8016da0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d00f      	beq.n	8016d80 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d11a      	bne.n	8016d9e <tcp_write_checks+0xd6>
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d116      	bne.n	8016d9e <tcp_write_checks+0xd6>
 8016d70:	4b0d      	ldr	r3, [pc, #52]	@ (8016da8 <tcp_write_checks+0xe0>)
 8016d72:	f240 1255 	movw	r2, #341	@ 0x155
 8016d76:	490f      	ldr	r1, [pc, #60]	@ (8016db4 <tcp_write_checks+0xec>)
 8016d78:	480d      	ldr	r0, [pc, #52]	@ (8016db0 <tcp_write_checks+0xe8>)
 8016d7a:	f005 fb8f 	bl	801c49c <iprintf>
 8016d7e:	e00e      	b.n	8016d9e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d103      	bne.n	8016d90 <tcp_write_checks+0xc8>
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d006      	beq.n	8016d9e <tcp_write_checks+0xd6>
 8016d90:	4b05      	ldr	r3, [pc, #20]	@ (8016da8 <tcp_write_checks+0xe0>)
 8016d92:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8016d96:	4908      	ldr	r1, [pc, #32]	@ (8016db8 <tcp_write_checks+0xf0>)
 8016d98:	4805      	ldr	r0, [pc, #20]	@ (8016db0 <tcp_write_checks+0xe8>)
 8016d9a:	f005 fb7f 	bl	801c49c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8016d9e:	2300      	movs	r3, #0
}
 8016da0:	4618      	mov	r0, r3
 8016da2:	3708      	adds	r7, #8
 8016da4:	46bd      	mov	sp, r7
 8016da6:	bd80      	pop	{r7, pc}
 8016da8:	08020960 	.word	0x08020960
 8016dac:	08020a70 	.word	0x08020a70
 8016db0:	080209b4 	.word	0x080209b4
 8016db4:	08020a90 	.word	0x08020a90
 8016db8:	08020acc 	.word	0x08020acc

08016dbc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8016dbc:	b590      	push	{r4, r7, lr}
 8016dbe:	b09b      	sub	sp, #108	@ 0x6c
 8016dc0:	af04      	add	r7, sp, #16
 8016dc2:	60f8      	str	r0, [r7, #12]
 8016dc4:	60b9      	str	r1, [r7, #8]
 8016dc6:	4611      	mov	r1, r2
 8016dc8:	461a      	mov	r2, r3
 8016dca:	460b      	mov	r3, r1
 8016dcc:	80fb      	strh	r3, [r7, #6]
 8016dce:	4613      	mov	r3, r2
 8016dd0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8016dda:	2300      	movs	r3, #0
 8016ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016dde:	2300      	movs	r3, #0
 8016de0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016de2:	2300      	movs	r3, #0
 8016de4:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8016de6:	2300      	movs	r3, #0
 8016de8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8016dec:	2300      	movs	r3, #0
 8016dee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8016df2:	2300      	movs	r3, #0
 8016df4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8016df6:	2300      	movs	r3, #0
 8016df8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d109      	bne.n	8016e18 <tcp_write+0x5c>
 8016e04:	4ba4      	ldr	r3, [pc, #656]	@ (8017098 <tcp_write+0x2dc>)
 8016e06:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8016e0a:	49a4      	ldr	r1, [pc, #656]	@ (801709c <tcp_write+0x2e0>)
 8016e0c:	48a4      	ldr	r0, [pc, #656]	@ (80170a0 <tcp_write+0x2e4>)
 8016e0e:	f005 fb45 	bl	801c49c <iprintf>
 8016e12:	f06f 030f 	mvn.w	r3, #15
 8016e16:	e32a      	b.n	801746e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8016e1e:	085b      	lsrs	r3, r3, #1
 8016e20:	b29a      	uxth	r2, r3
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016e26:	4293      	cmp	r3, r2
 8016e28:	bf28      	it	cs
 8016e2a:	4613      	movcs	r3, r2
 8016e2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8016e2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d102      	bne.n	8016e3a <tcp_write+0x7e>
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016e38:	e000      	b.n	8016e3c <tcp_write+0x80>
 8016e3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016e3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8016e3e:	68bb      	ldr	r3, [r7, #8]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d109      	bne.n	8016e58 <tcp_write+0x9c>
 8016e44:	4b94      	ldr	r3, [pc, #592]	@ (8017098 <tcp_write+0x2dc>)
 8016e46:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8016e4a:	4996      	ldr	r1, [pc, #600]	@ (80170a4 <tcp_write+0x2e8>)
 8016e4c:	4894      	ldr	r0, [pc, #592]	@ (80170a0 <tcp_write+0x2e4>)
 8016e4e:	f005 fb25 	bl	801c49c <iprintf>
 8016e52:	f06f 030f 	mvn.w	r3, #15
 8016e56:	e30a      	b.n	801746e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8016e58:	88fb      	ldrh	r3, [r7, #6]
 8016e5a:	4619      	mov	r1, r3
 8016e5c:	68f8      	ldr	r0, [r7, #12]
 8016e5e:	f7ff ff33 	bl	8016cc8 <tcp_write_checks>
 8016e62:	4603      	mov	r3, r0
 8016e64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8016e68:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d002      	beq.n	8016e76 <tcp_write+0xba>
    return err;
 8016e70:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8016e74:	e2fb      	b.n	801746e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016e7c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016e80:	2300      	movs	r3, #0
 8016e82:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	f000 80f6 	beq.w	801707c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016e94:	653b      	str	r3, [r7, #80]	@ 0x50
 8016e96:	e002      	b.n	8016e9e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8016e98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016e9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d1f8      	bne.n	8016e98 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8016ea6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016ea8:	7a9b      	ldrb	r3, [r3, #10]
 8016eaa:	009b      	lsls	r3, r3, #2
 8016eac:	b29b      	uxth	r3, r3
 8016eae:	f003 0304 	and.w	r3, r3, #4
 8016eb2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8016eb4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016eb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016eb8:	891b      	ldrh	r3, [r3, #8]
 8016eba:	4619      	mov	r1, r3
 8016ebc:	8c3b      	ldrh	r3, [r7, #32]
 8016ebe:	440b      	add	r3, r1
 8016ec0:	429a      	cmp	r2, r3
 8016ec2:	da06      	bge.n	8016ed2 <tcp_write+0x116>
 8016ec4:	4b74      	ldr	r3, [pc, #464]	@ (8017098 <tcp_write+0x2dc>)
 8016ec6:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8016eca:	4977      	ldr	r1, [pc, #476]	@ (80170a8 <tcp_write+0x2ec>)
 8016ecc:	4874      	ldr	r0, [pc, #464]	@ (80170a0 <tcp_write+0x2e4>)
 8016ece:	f005 fae5 	bl	801c49c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8016ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016ed4:	891a      	ldrh	r2, [r3, #8]
 8016ed6:	8c3b      	ldrh	r3, [r7, #32]
 8016ed8:	4413      	add	r3, r2
 8016eda:	b29b      	uxth	r3, r3
 8016edc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016ede:	1ad3      	subs	r3, r2, r3
 8016ee0:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8016ee8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8016eea:	8a7b      	ldrh	r3, [r7, #18]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d026      	beq.n	8016f3e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8016ef0:	8a7b      	ldrh	r3, [r7, #18]
 8016ef2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8016ef4:	429a      	cmp	r2, r3
 8016ef6:	d206      	bcs.n	8016f06 <tcp_write+0x14a>
 8016ef8:	4b67      	ldr	r3, [pc, #412]	@ (8017098 <tcp_write+0x2dc>)
 8016efa:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8016efe:	496b      	ldr	r1, [pc, #428]	@ (80170ac <tcp_write+0x2f0>)
 8016f00:	4867      	ldr	r0, [pc, #412]	@ (80170a0 <tcp_write+0x2e4>)
 8016f02:	f005 facb 	bl	801c49c <iprintf>
      seg = last_unsent;
 8016f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016f08:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8016f0a:	8a7b      	ldrh	r3, [r7, #18]
 8016f0c:	88fa      	ldrh	r2, [r7, #6]
 8016f0e:	4293      	cmp	r3, r2
 8016f10:	bf28      	it	cs
 8016f12:	4613      	movcs	r3, r2
 8016f14:	b29b      	uxth	r3, r3
 8016f16:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8016f18:	4293      	cmp	r3, r2
 8016f1a:	bf28      	it	cs
 8016f1c:	4613      	movcs	r3, r2
 8016f1e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8016f20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016f24:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016f26:	4413      	add	r3, r2
 8016f28:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8016f2c:	8a7a      	ldrh	r2, [r7, #18]
 8016f2e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016f30:	1ad3      	subs	r3, r2, r3
 8016f32:	b29b      	uxth	r3, r3
 8016f34:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8016f36:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8016f38:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016f3a:	1ad3      	subs	r3, r2, r3
 8016f3c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8016f3e:	8a7b      	ldrh	r3, [r7, #18]
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d00b      	beq.n	8016f5c <tcp_write+0x1a0>
 8016f44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016f48:	88fb      	ldrh	r3, [r7, #6]
 8016f4a:	429a      	cmp	r2, r3
 8016f4c:	d006      	beq.n	8016f5c <tcp_write+0x1a0>
 8016f4e:	4b52      	ldr	r3, [pc, #328]	@ (8017098 <tcp_write+0x2dc>)
 8016f50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016f54:	4956      	ldr	r1, [pc, #344]	@ (80170b0 <tcp_write+0x2f4>)
 8016f56:	4852      	ldr	r0, [pc, #328]	@ (80170a0 <tcp_write+0x2e4>)
 8016f58:	f005 faa0 	bl	801c49c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8016f5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016f60:	88fb      	ldrh	r3, [r7, #6]
 8016f62:	429a      	cmp	r2, r3
 8016f64:	f080 8167 	bcs.w	8017236 <tcp_write+0x47a>
 8016f68:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	f000 8163 	beq.w	8017236 <tcp_write+0x47a>
 8016f70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016f72:	891b      	ldrh	r3, [r3, #8]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	f000 815e 	beq.w	8017236 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8016f7a:	88fa      	ldrh	r2, [r7, #6]
 8016f7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016f80:	1ad2      	subs	r2, r2, r3
 8016f82:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016f84:	4293      	cmp	r3, r2
 8016f86:	bfa8      	it	ge
 8016f88:	4613      	movge	r3, r2
 8016f8a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8016f8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016f90:	797b      	ldrb	r3, [r7, #5]
 8016f92:	f003 0301 	and.w	r3, r3, #1
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d027      	beq.n	8016fea <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8016f9a:	f107 0012 	add.w	r0, r7, #18
 8016f9e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8016fa0:	8bf9      	ldrh	r1, [r7, #30]
 8016fa2:	2301      	movs	r3, #1
 8016fa4:	9302      	str	r3, [sp, #8]
 8016fa6:	797b      	ldrb	r3, [r7, #5]
 8016fa8:	9301      	str	r3, [sp, #4]
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	9300      	str	r3, [sp, #0]
 8016fae:	4603      	mov	r3, r0
 8016fb0:	2000      	movs	r0, #0
 8016fb2:	f7ff fe0f 	bl	8016bd4 <tcp_pbuf_prealloc>
 8016fb6:	6578      	str	r0, [r7, #84]	@ 0x54
 8016fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	f000 8225 	beq.w	801740a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8016fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016fc2:	6858      	ldr	r0, [r3, #4]
 8016fc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016fc8:	68ba      	ldr	r2, [r7, #8]
 8016fca:	4413      	add	r3, r2
 8016fcc:	8bfa      	ldrh	r2, [r7, #30]
 8016fce:	4619      	mov	r1, r3
 8016fd0:	f005 fc17 	bl	801c802 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016fd4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016fd6:	f7fb fa37 	bl	8012448 <pbuf_clen>
 8016fda:	4603      	mov	r3, r0
 8016fdc:	461a      	mov	r2, r3
 8016fde:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016fe2:	4413      	add	r3, r2
 8016fe4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8016fe8:	e041      	b.n	801706e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8016fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016fec:	685b      	ldr	r3, [r3, #4]
 8016fee:	637b      	str	r3, [r7, #52]	@ 0x34
 8016ff0:	e002      	b.n	8016ff8 <tcp_write+0x23c>
 8016ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8016ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d1f8      	bne.n	8016ff2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017002:	7b1b      	ldrb	r3, [r3, #12]
 8017004:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8017008:	2b00      	cmp	r3, #0
 801700a:	d115      	bne.n	8017038 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801700c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801700e:	685b      	ldr	r3, [r3, #4]
 8017010:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017012:	8952      	ldrh	r2, [r2, #10]
 8017014:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017016:	68ba      	ldr	r2, [r7, #8]
 8017018:	429a      	cmp	r2, r3
 801701a:	d10d      	bne.n	8017038 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801701c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017020:	2b00      	cmp	r3, #0
 8017022:	d006      	beq.n	8017032 <tcp_write+0x276>
 8017024:	4b1c      	ldr	r3, [pc, #112]	@ (8017098 <tcp_write+0x2dc>)
 8017026:	f240 2231 	movw	r2, #561	@ 0x231
 801702a:	4922      	ldr	r1, [pc, #136]	@ (80170b4 <tcp_write+0x2f8>)
 801702c:	481c      	ldr	r0, [pc, #112]	@ (80170a0 <tcp_write+0x2e4>)
 801702e:	f005 fa35 	bl	801c49c <iprintf>
          extendlen = seglen;
 8017032:	8bfb      	ldrh	r3, [r7, #30]
 8017034:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8017036:	e01a      	b.n	801706e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8017038:	8bfb      	ldrh	r3, [r7, #30]
 801703a:	2201      	movs	r2, #1
 801703c:	4619      	mov	r1, r3
 801703e:	2000      	movs	r0, #0
 8017040:	f7fa fe90 	bl	8011d64 <pbuf_alloc>
 8017044:	6578      	str	r0, [r7, #84]	@ 0x54
 8017046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017048:	2b00      	cmp	r3, #0
 801704a:	f000 81e0 	beq.w	801740e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801704e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017052:	68ba      	ldr	r2, [r7, #8]
 8017054:	441a      	add	r2, r3
 8017056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017058:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801705a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801705c:	f7fb f9f4 	bl	8012448 <pbuf_clen>
 8017060:	4603      	mov	r3, r0
 8017062:	461a      	mov	r2, r3
 8017064:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017068:	4413      	add	r3, r2
 801706a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801706e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017072:	8bfb      	ldrh	r3, [r7, #30]
 8017074:	4413      	add	r3, r2
 8017076:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801707a:	e0dc      	b.n	8017236 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8017082:	2b00      	cmp	r3, #0
 8017084:	f000 80d7 	beq.w	8017236 <tcp_write+0x47a>
 8017088:	4b03      	ldr	r3, [pc, #12]	@ (8017098 <tcp_write+0x2dc>)
 801708a:	f240 224a 	movw	r2, #586	@ 0x24a
 801708e:	490a      	ldr	r1, [pc, #40]	@ (80170b8 <tcp_write+0x2fc>)
 8017090:	4803      	ldr	r0, [pc, #12]	@ (80170a0 <tcp_write+0x2e4>)
 8017092:	f005 fa03 	bl	801c49c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8017096:	e0ce      	b.n	8017236 <tcp_write+0x47a>
 8017098:	08020960 	.word	0x08020960
 801709c:	08020b00 	.word	0x08020b00
 80170a0:	080209b4 	.word	0x080209b4
 80170a4:	08020b18 	.word	0x08020b18
 80170a8:	08020b4c 	.word	0x08020b4c
 80170ac:	08020b64 	.word	0x08020b64
 80170b0:	08020b84 	.word	0x08020b84
 80170b4:	08020ba4 	.word	0x08020ba4
 80170b8:	08020bd0 	.word	0x08020bd0
    struct pbuf *p;
    u16_t left = len - pos;
 80170bc:	88fa      	ldrh	r2, [r7, #6]
 80170be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80170c2:	1ad3      	subs	r3, r2, r3
 80170c4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80170c6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80170ca:	b29b      	uxth	r3, r3
 80170cc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80170ce:	1ad3      	subs	r3, r2, r3
 80170d0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80170d2:	8b7a      	ldrh	r2, [r7, #26]
 80170d4:	8bbb      	ldrh	r3, [r7, #28]
 80170d6:	4293      	cmp	r3, r2
 80170d8:	bf28      	it	cs
 80170da:	4613      	movcs	r3, r2
 80170dc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80170de:	797b      	ldrb	r3, [r7, #5]
 80170e0:	f003 0301 	and.w	r3, r3, #1
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d036      	beq.n	8017156 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80170e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80170ec:	b29a      	uxth	r2, r3
 80170ee:	8b3b      	ldrh	r3, [r7, #24]
 80170f0:	4413      	add	r3, r2
 80170f2:	b299      	uxth	r1, r3
 80170f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	bf0c      	ite	eq
 80170fa:	2301      	moveq	r3, #1
 80170fc:	2300      	movne	r3, #0
 80170fe:	b2db      	uxtb	r3, r3
 8017100:	f107 0012 	add.w	r0, r7, #18
 8017104:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017106:	9302      	str	r3, [sp, #8]
 8017108:	797b      	ldrb	r3, [r7, #5]
 801710a:	9301      	str	r3, [sp, #4]
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	9300      	str	r3, [sp, #0]
 8017110:	4603      	mov	r3, r0
 8017112:	2036      	movs	r0, #54	@ 0x36
 8017114:	f7ff fd5e 	bl	8016bd4 <tcp_pbuf_prealloc>
 8017118:	6338      	str	r0, [r7, #48]	@ 0x30
 801711a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801711c:	2b00      	cmp	r3, #0
 801711e:	f000 8178 	beq.w	8017412 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8017122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017124:	895b      	ldrh	r3, [r3, #10]
 8017126:	8b3a      	ldrh	r2, [r7, #24]
 8017128:	429a      	cmp	r2, r3
 801712a:	d906      	bls.n	801713a <tcp_write+0x37e>
 801712c:	4b8c      	ldr	r3, [pc, #560]	@ (8017360 <tcp_write+0x5a4>)
 801712e:	f240 2266 	movw	r2, #614	@ 0x266
 8017132:	498c      	ldr	r1, [pc, #560]	@ (8017364 <tcp_write+0x5a8>)
 8017134:	488c      	ldr	r0, [pc, #560]	@ (8017368 <tcp_write+0x5ac>)
 8017136:	f005 f9b1 	bl	801c49c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801713c:	685a      	ldr	r2, [r3, #4]
 801713e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017142:	18d0      	adds	r0, r2, r3
 8017144:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017148:	68ba      	ldr	r2, [r7, #8]
 801714a:	4413      	add	r3, r2
 801714c:	8b3a      	ldrh	r2, [r7, #24]
 801714e:	4619      	mov	r1, r3
 8017150:	f005 fb57 	bl	801c802 <memcpy>
 8017154:	e02f      	b.n	80171b6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8017156:	8a7b      	ldrh	r3, [r7, #18]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d006      	beq.n	801716a <tcp_write+0x3ae>
 801715c:	4b80      	ldr	r3, [pc, #512]	@ (8017360 <tcp_write+0x5a4>)
 801715e:	f240 2271 	movw	r2, #625	@ 0x271
 8017162:	4982      	ldr	r1, [pc, #520]	@ (801736c <tcp_write+0x5b0>)
 8017164:	4880      	ldr	r0, [pc, #512]	@ (8017368 <tcp_write+0x5ac>)
 8017166:	f005 f999 	bl	801c49c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801716a:	8b3b      	ldrh	r3, [r7, #24]
 801716c:	2201      	movs	r2, #1
 801716e:	4619      	mov	r1, r3
 8017170:	2036      	movs	r0, #54	@ 0x36
 8017172:	f7fa fdf7 	bl	8011d64 <pbuf_alloc>
 8017176:	6178      	str	r0, [r7, #20]
 8017178:	697b      	ldr	r3, [r7, #20]
 801717a:	2b00      	cmp	r3, #0
 801717c:	f000 814b 	beq.w	8017416 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8017180:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017184:	68ba      	ldr	r2, [r7, #8]
 8017186:	441a      	add	r2, r3
 8017188:	697b      	ldr	r3, [r7, #20]
 801718a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801718c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017190:	b29b      	uxth	r3, r3
 8017192:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017196:	4619      	mov	r1, r3
 8017198:	2036      	movs	r0, #54	@ 0x36
 801719a:	f7fa fde3 	bl	8011d64 <pbuf_alloc>
 801719e:	6338      	str	r0, [r7, #48]	@ 0x30
 80171a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d103      	bne.n	80171ae <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80171a6:	6978      	ldr	r0, [r7, #20]
 80171a8:	f7fb f8c0 	bl	801232c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80171ac:	e136      	b.n	801741c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80171ae:	6979      	ldr	r1, [r7, #20]
 80171b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80171b2:	f7fb f989 	bl	80124c8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80171b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80171b8:	f7fb f946 	bl	8012448 <pbuf_clen>
 80171bc:	4603      	mov	r3, r0
 80171be:	461a      	mov	r2, r3
 80171c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80171c4:	4413      	add	r3, r2
 80171c6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80171ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80171ce:	2b09      	cmp	r3, #9
 80171d0:	d903      	bls.n	80171da <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80171d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80171d4:	f7fb f8aa 	bl	801232c <pbuf_free>
      goto memerr;
 80171d8:	e120      	b.n	801741c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80171de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80171e2:	441a      	add	r2, r3
 80171e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80171e8:	9300      	str	r3, [sp, #0]
 80171ea:	4613      	mov	r3, r2
 80171ec:	2200      	movs	r2, #0
 80171ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80171f0:	68f8      	ldr	r0, [r7, #12]
 80171f2:	f7ff fc53 	bl	8016a9c <tcp_create_segment>
 80171f6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80171f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	f000 810d 	beq.w	801741a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8017200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017202:	2b00      	cmp	r3, #0
 8017204:	d102      	bne.n	801720c <tcp_write+0x450>
      queue = seg;
 8017206:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017208:	647b      	str	r3, [r7, #68]	@ 0x44
 801720a:	e00c      	b.n	8017226 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801720c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801720e:	2b00      	cmp	r3, #0
 8017210:	d106      	bne.n	8017220 <tcp_write+0x464>
 8017212:	4b53      	ldr	r3, [pc, #332]	@ (8017360 <tcp_write+0x5a4>)
 8017214:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8017218:	4955      	ldr	r1, [pc, #340]	@ (8017370 <tcp_write+0x5b4>)
 801721a:	4853      	ldr	r0, [pc, #332]	@ (8017368 <tcp_write+0x5ac>)
 801721c:	f005 f93e 	bl	801c49c <iprintf>
      prev_seg->next = seg;
 8017220:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017222:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017224:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8017226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017228:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801722a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801722e:	8b3b      	ldrh	r3, [r7, #24]
 8017230:	4413      	add	r3, r2
 8017232:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8017236:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801723a:	88fb      	ldrh	r3, [r7, #6]
 801723c:	429a      	cmp	r2, r3
 801723e:	f4ff af3d 	bcc.w	80170bc <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8017242:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017244:	2b00      	cmp	r3, #0
 8017246:	d02c      	beq.n	80172a2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8017248:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801724a:	685b      	ldr	r3, [r3, #4]
 801724c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801724e:	e01e      	b.n	801728e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8017250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017252:	891a      	ldrh	r2, [r3, #8]
 8017254:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017256:	4413      	add	r3, r2
 8017258:	b29a      	uxth	r2, r3
 801725a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801725c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801725e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	2b00      	cmp	r3, #0
 8017264:	d110      	bne.n	8017288 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8017266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017268:	685b      	ldr	r3, [r3, #4]
 801726a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801726c:	8952      	ldrh	r2, [r2, #10]
 801726e:	4413      	add	r3, r2
 8017270:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017272:	68b9      	ldr	r1, [r7, #8]
 8017274:	4618      	mov	r0, r3
 8017276:	f005 fac4 	bl	801c802 <memcpy>
        p->len += oversize_used;
 801727a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801727c:	895a      	ldrh	r2, [r3, #10]
 801727e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017280:	4413      	add	r3, r2
 8017282:	b29a      	uxth	r2, r3
 8017284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017286:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8017288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801728e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017290:	2b00      	cmp	r3, #0
 8017292:	d1dd      	bne.n	8017250 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8017294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017296:	891a      	ldrh	r2, [r3, #8]
 8017298:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801729a:	4413      	add	r3, r2
 801729c:	b29a      	uxth	r2, r3
 801729e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80172a0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80172a2:	8a7a      	ldrh	r2, [r7, #18]
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80172aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d018      	beq.n	80172e2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80172b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d106      	bne.n	80172c4 <tcp_write+0x508>
 80172b6:	4b2a      	ldr	r3, [pc, #168]	@ (8017360 <tcp_write+0x5a4>)
 80172b8:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80172bc:	492d      	ldr	r1, [pc, #180]	@ (8017374 <tcp_write+0x5b8>)
 80172be:	482a      	ldr	r0, [pc, #168]	@ (8017368 <tcp_write+0x5ac>)
 80172c0:	f005 f8ec 	bl	801c49c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80172c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80172c6:	685b      	ldr	r3, [r3, #4]
 80172c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80172ca:	4618      	mov	r0, r3
 80172cc:	f7fb f8fc 	bl	80124c8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80172d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80172d2:	891a      	ldrh	r2, [r3, #8]
 80172d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80172d6:	891b      	ldrh	r3, [r3, #8]
 80172d8:	4413      	add	r3, r2
 80172da:	b29a      	uxth	r2, r3
 80172dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80172de:	811a      	strh	r2, [r3, #8]
 80172e0:	e037      	b.n	8017352 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80172e2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d034      	beq.n	8017352 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80172e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d003      	beq.n	80172f6 <tcp_write+0x53a>
 80172ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80172f0:	685b      	ldr	r3, [r3, #4]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d106      	bne.n	8017304 <tcp_write+0x548>
 80172f6:	4b1a      	ldr	r3, [pc, #104]	@ (8017360 <tcp_write+0x5a4>)
 80172f8:	f240 22e6 	movw	r2, #742	@ 0x2e6
 80172fc:	491e      	ldr	r1, [pc, #120]	@ (8017378 <tcp_write+0x5bc>)
 80172fe:	481a      	ldr	r0, [pc, #104]	@ (8017368 <tcp_write+0x5ac>)
 8017300:	f005 f8cc 	bl	801c49c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017306:	685b      	ldr	r3, [r3, #4]
 8017308:	62bb      	str	r3, [r7, #40]	@ 0x28
 801730a:	e009      	b.n	8017320 <tcp_write+0x564>
      p->tot_len += extendlen;
 801730c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801730e:	891a      	ldrh	r2, [r3, #8]
 8017310:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017312:	4413      	add	r3, r2
 8017314:	b29a      	uxth	r2, r3
 8017316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017318:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801731a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	2b00      	cmp	r3, #0
 8017326:	d1f1      	bne.n	801730c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8017328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801732a:	891a      	ldrh	r2, [r3, #8]
 801732c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801732e:	4413      	add	r3, r2
 8017330:	b29a      	uxth	r2, r3
 8017332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017334:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8017336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017338:	895a      	ldrh	r2, [r3, #10]
 801733a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801733c:	4413      	add	r3, r2
 801733e:	b29a      	uxth	r2, r3
 8017340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017342:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8017344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017346:	891a      	ldrh	r2, [r3, #8]
 8017348:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801734a:	4413      	add	r3, r2
 801734c:	b29a      	uxth	r2, r3
 801734e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017350:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8017352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017354:	2b00      	cmp	r3, #0
 8017356:	d111      	bne.n	801737c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801735c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801735e:	e010      	b.n	8017382 <tcp_write+0x5c6>
 8017360:	08020960 	.word	0x08020960
 8017364:	08020c00 	.word	0x08020c00
 8017368:	080209b4 	.word	0x080209b4
 801736c:	08020c40 	.word	0x08020c40
 8017370:	08020c50 	.word	0x08020c50
 8017374:	08020c64 	.word	0x08020c64
 8017378:	08020c9c 	.word	0x08020c9c
  } else {
    last_unsent->next = queue;
 801737c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801737e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017380:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8017386:	88fb      	ldrh	r3, [r7, #6]
 8017388:	441a      	add	r2, r3
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8017394:	88fb      	ldrh	r3, [r7, #6]
 8017396:	1ad3      	subs	r3, r2, r3
 8017398:	b29a      	uxth	r2, r3
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80173a6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d00e      	beq.n	80173d2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d10a      	bne.n	80173d2 <tcp_write+0x616>
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d106      	bne.n	80173d2 <tcp_write+0x616>
 80173c4:	4b2c      	ldr	r3, [pc, #176]	@ (8017478 <tcp_write+0x6bc>)
 80173c6:	f240 3212 	movw	r2, #786	@ 0x312
 80173ca:	492c      	ldr	r1, [pc, #176]	@ (801747c <tcp_write+0x6c0>)
 80173cc:	482c      	ldr	r0, [pc, #176]	@ (8017480 <tcp_write+0x6c4>)
 80173ce:	f005 f865 	bl	801c49c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80173d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d016      	beq.n	8017406 <tcp_write+0x64a>
 80173d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80173da:	68db      	ldr	r3, [r3, #12]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d012      	beq.n	8017406 <tcp_write+0x64a>
 80173e0:	797b      	ldrb	r3, [r7, #5]
 80173e2:	f003 0302 	and.w	r3, r3, #2
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d10d      	bne.n	8017406 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80173ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80173ec:	68db      	ldr	r3, [r3, #12]
 80173ee:	899b      	ldrh	r3, [r3, #12]
 80173f0:	b29c      	uxth	r4, r3
 80173f2:	2008      	movs	r0, #8
 80173f4:	f7f9 fbda 	bl	8010bac <lwip_htons>
 80173f8:	4603      	mov	r3, r0
 80173fa:	461a      	mov	r2, r3
 80173fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80173fe:	68db      	ldr	r3, [r3, #12]
 8017400:	4322      	orrs	r2, r4
 8017402:	b292      	uxth	r2, r2
 8017404:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8017406:	2300      	movs	r3, #0
 8017408:	e031      	b.n	801746e <tcp_write+0x6b2>
          goto memerr;
 801740a:	bf00      	nop
 801740c:	e006      	b.n	801741c <tcp_write+0x660>
            goto memerr;
 801740e:	bf00      	nop
 8017410:	e004      	b.n	801741c <tcp_write+0x660>
        goto memerr;
 8017412:	bf00      	nop
 8017414:	e002      	b.n	801741c <tcp_write+0x660>
        goto memerr;
 8017416:	bf00      	nop
 8017418:	e000      	b.n	801741c <tcp_write+0x660>
      goto memerr;
 801741a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	8b5b      	ldrh	r3, [r3, #26]
 8017420:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017424:	b29a      	uxth	r2, r3
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801742a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801742c:	2b00      	cmp	r3, #0
 801742e:	d002      	beq.n	8017436 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8017430:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017432:	f7fa ff7b 	bl	801232c <pbuf_free>
  }
  if (queue != NULL) {
 8017436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017438:	2b00      	cmp	r3, #0
 801743a:	d002      	beq.n	8017442 <tcp_write+0x686>
    tcp_segs_free(queue);
 801743c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801743e:	f7fc fb9b 	bl	8013b78 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017448:	2b00      	cmp	r3, #0
 801744a:	d00e      	beq.n	801746a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017450:	2b00      	cmp	r3, #0
 8017452:	d10a      	bne.n	801746a <tcp_write+0x6ae>
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017458:	2b00      	cmp	r3, #0
 801745a:	d106      	bne.n	801746a <tcp_write+0x6ae>
 801745c:	4b06      	ldr	r3, [pc, #24]	@ (8017478 <tcp_write+0x6bc>)
 801745e:	f240 3227 	movw	r2, #807	@ 0x327
 8017462:	4906      	ldr	r1, [pc, #24]	@ (801747c <tcp_write+0x6c0>)
 8017464:	4806      	ldr	r0, [pc, #24]	@ (8017480 <tcp_write+0x6c4>)
 8017466:	f005 f819 	bl	801c49c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801746a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801746e:	4618      	mov	r0, r3
 8017470:	375c      	adds	r7, #92	@ 0x5c
 8017472:	46bd      	mov	sp, r7
 8017474:	bd90      	pop	{r4, r7, pc}
 8017476:	bf00      	nop
 8017478:	08020960 	.word	0x08020960
 801747c:	08020cd4 	.word	0x08020cd4
 8017480:	080209b4 	.word	0x080209b4

08017484 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8017484:	b590      	push	{r4, r7, lr}
 8017486:	b08b      	sub	sp, #44	@ 0x2c
 8017488:	af02      	add	r7, sp, #8
 801748a:	6078      	str	r0, [r7, #4]
 801748c:	460b      	mov	r3, r1
 801748e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8017490:	2300      	movs	r3, #0
 8017492:	61fb      	str	r3, [r7, #28]
 8017494:	2300      	movs	r3, #0
 8017496:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8017498:	2300      	movs	r3, #0
 801749a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d106      	bne.n	80174b0 <tcp_split_unsent_seg+0x2c>
 80174a2:	4b95      	ldr	r3, [pc, #596]	@ (80176f8 <tcp_split_unsent_seg+0x274>)
 80174a4:	f240 324b 	movw	r2, #843	@ 0x34b
 80174a8:	4994      	ldr	r1, [pc, #592]	@ (80176fc <tcp_split_unsent_seg+0x278>)
 80174aa:	4895      	ldr	r0, [pc, #596]	@ (8017700 <tcp_split_unsent_seg+0x27c>)
 80174ac:	f004 fff6 	bl	801c49c <iprintf>

  useg = pcb->unsent;
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80174b4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80174b6:	697b      	ldr	r3, [r7, #20]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d102      	bne.n	80174c2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80174bc:	f04f 33ff 	mov.w	r3, #4294967295
 80174c0:	e116      	b.n	80176f0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80174c2:	887b      	ldrh	r3, [r7, #2]
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d109      	bne.n	80174dc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80174c8:	4b8b      	ldr	r3, [pc, #556]	@ (80176f8 <tcp_split_unsent_seg+0x274>)
 80174ca:	f240 3253 	movw	r2, #851	@ 0x353
 80174ce:	498d      	ldr	r1, [pc, #564]	@ (8017704 <tcp_split_unsent_seg+0x280>)
 80174d0:	488b      	ldr	r0, [pc, #556]	@ (8017700 <tcp_split_unsent_seg+0x27c>)
 80174d2:	f004 ffe3 	bl	801c49c <iprintf>
    return ERR_VAL;
 80174d6:	f06f 0305 	mvn.w	r3, #5
 80174da:	e109      	b.n	80176f0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80174dc:	697b      	ldr	r3, [r7, #20]
 80174de:	891b      	ldrh	r3, [r3, #8]
 80174e0:	887a      	ldrh	r2, [r7, #2]
 80174e2:	429a      	cmp	r2, r3
 80174e4:	d301      	bcc.n	80174ea <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80174e6:	2300      	movs	r3, #0
 80174e8:	e102      	b.n	80176f0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80174ee:	887a      	ldrh	r2, [r7, #2]
 80174f0:	429a      	cmp	r2, r3
 80174f2:	d906      	bls.n	8017502 <tcp_split_unsent_seg+0x7e>
 80174f4:	4b80      	ldr	r3, [pc, #512]	@ (80176f8 <tcp_split_unsent_seg+0x274>)
 80174f6:	f240 325b 	movw	r2, #859	@ 0x35b
 80174fa:	4983      	ldr	r1, [pc, #524]	@ (8017708 <tcp_split_unsent_seg+0x284>)
 80174fc:	4880      	ldr	r0, [pc, #512]	@ (8017700 <tcp_split_unsent_seg+0x27c>)
 80174fe:	f004 ffcd 	bl	801c49c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8017502:	697b      	ldr	r3, [r7, #20]
 8017504:	891b      	ldrh	r3, [r3, #8]
 8017506:	2b00      	cmp	r3, #0
 8017508:	d106      	bne.n	8017518 <tcp_split_unsent_seg+0x94>
 801750a:	4b7b      	ldr	r3, [pc, #492]	@ (80176f8 <tcp_split_unsent_seg+0x274>)
 801750c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8017510:	497e      	ldr	r1, [pc, #504]	@ (801770c <tcp_split_unsent_seg+0x288>)
 8017512:	487b      	ldr	r0, [pc, #492]	@ (8017700 <tcp_split_unsent_seg+0x27c>)
 8017514:	f004 ffc2 	bl	801c49c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8017518:	697b      	ldr	r3, [r7, #20]
 801751a:	7a9b      	ldrb	r3, [r3, #10]
 801751c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801751e:	7bfb      	ldrb	r3, [r7, #15]
 8017520:	009b      	lsls	r3, r3, #2
 8017522:	b2db      	uxtb	r3, r3
 8017524:	f003 0304 	and.w	r3, r3, #4
 8017528:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801752a:	697b      	ldr	r3, [r7, #20]
 801752c:	891a      	ldrh	r2, [r3, #8]
 801752e:	887b      	ldrh	r3, [r7, #2]
 8017530:	1ad3      	subs	r3, r2, r3
 8017532:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8017534:	7bbb      	ldrb	r3, [r7, #14]
 8017536:	b29a      	uxth	r2, r3
 8017538:	89bb      	ldrh	r3, [r7, #12]
 801753a:	4413      	add	r3, r2
 801753c:	b29b      	uxth	r3, r3
 801753e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017542:	4619      	mov	r1, r3
 8017544:	2036      	movs	r0, #54	@ 0x36
 8017546:	f7fa fc0d 	bl	8011d64 <pbuf_alloc>
 801754a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801754c:	693b      	ldr	r3, [r7, #16]
 801754e:	2b00      	cmp	r3, #0
 8017550:	f000 80b7 	beq.w	80176c2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8017554:	697b      	ldr	r3, [r7, #20]
 8017556:	685b      	ldr	r3, [r3, #4]
 8017558:	891a      	ldrh	r2, [r3, #8]
 801755a:	697b      	ldr	r3, [r7, #20]
 801755c:	891b      	ldrh	r3, [r3, #8]
 801755e:	1ad3      	subs	r3, r2, r3
 8017560:	b29a      	uxth	r2, r3
 8017562:	887b      	ldrh	r3, [r7, #2]
 8017564:	4413      	add	r3, r2
 8017566:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8017568:	697b      	ldr	r3, [r7, #20]
 801756a:	6858      	ldr	r0, [r3, #4]
 801756c:	693b      	ldr	r3, [r7, #16]
 801756e:	685a      	ldr	r2, [r3, #4]
 8017570:	7bbb      	ldrb	r3, [r7, #14]
 8017572:	18d1      	adds	r1, r2, r3
 8017574:	897b      	ldrh	r3, [r7, #10]
 8017576:	89ba      	ldrh	r2, [r7, #12]
 8017578:	f7fb f8ce 	bl	8012718 <pbuf_copy_partial>
 801757c:	4603      	mov	r3, r0
 801757e:	461a      	mov	r2, r3
 8017580:	89bb      	ldrh	r3, [r7, #12]
 8017582:	4293      	cmp	r3, r2
 8017584:	f040 809f 	bne.w	80176c6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8017588:	697b      	ldr	r3, [r7, #20]
 801758a:	68db      	ldr	r3, [r3, #12]
 801758c:	899b      	ldrh	r3, [r3, #12]
 801758e:	b29b      	uxth	r3, r3
 8017590:	4618      	mov	r0, r3
 8017592:	f7f9 fb0b 	bl	8010bac <lwip_htons>
 8017596:	4603      	mov	r3, r0
 8017598:	b2db      	uxtb	r3, r3
 801759a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801759e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80175a0:	2300      	movs	r3, #0
 80175a2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80175a4:	7efb      	ldrb	r3, [r7, #27]
 80175a6:	f003 0308 	and.w	r3, r3, #8
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d007      	beq.n	80175be <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80175ae:	7efb      	ldrb	r3, [r7, #27]
 80175b0:	f023 0308 	bic.w	r3, r3, #8
 80175b4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80175b6:	7ebb      	ldrb	r3, [r7, #26]
 80175b8:	f043 0308 	orr.w	r3, r3, #8
 80175bc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80175be:	7efb      	ldrb	r3, [r7, #27]
 80175c0:	f003 0301 	and.w	r3, r3, #1
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d007      	beq.n	80175d8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80175c8:	7efb      	ldrb	r3, [r7, #27]
 80175ca:	f023 0301 	bic.w	r3, r3, #1
 80175ce:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80175d0:	7ebb      	ldrb	r3, [r7, #26]
 80175d2:	f043 0301 	orr.w	r3, r3, #1
 80175d6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80175d8:	697b      	ldr	r3, [r7, #20]
 80175da:	68db      	ldr	r3, [r3, #12]
 80175dc:	685b      	ldr	r3, [r3, #4]
 80175de:	4618      	mov	r0, r3
 80175e0:	f7f9 fafa 	bl	8010bd8 <lwip_htonl>
 80175e4:	4602      	mov	r2, r0
 80175e6:	887b      	ldrh	r3, [r7, #2]
 80175e8:	18d1      	adds	r1, r2, r3
 80175ea:	7eba      	ldrb	r2, [r7, #26]
 80175ec:	7bfb      	ldrb	r3, [r7, #15]
 80175ee:	9300      	str	r3, [sp, #0]
 80175f0:	460b      	mov	r3, r1
 80175f2:	6939      	ldr	r1, [r7, #16]
 80175f4:	6878      	ldr	r0, [r7, #4]
 80175f6:	f7ff fa51 	bl	8016a9c <tcp_create_segment>
 80175fa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80175fc:	69fb      	ldr	r3, [r7, #28]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d063      	beq.n	80176ca <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8017602:	697b      	ldr	r3, [r7, #20]
 8017604:	685b      	ldr	r3, [r3, #4]
 8017606:	4618      	mov	r0, r3
 8017608:	f7fa ff1e 	bl	8012448 <pbuf_clen>
 801760c:	4603      	mov	r3, r0
 801760e:	461a      	mov	r2, r3
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017616:	1a9b      	subs	r3, r3, r2
 8017618:	b29a      	uxth	r2, r3
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8017620:	697b      	ldr	r3, [r7, #20]
 8017622:	6858      	ldr	r0, [r3, #4]
 8017624:	697b      	ldr	r3, [r7, #20]
 8017626:	685b      	ldr	r3, [r3, #4]
 8017628:	891a      	ldrh	r2, [r3, #8]
 801762a:	89bb      	ldrh	r3, [r7, #12]
 801762c:	1ad3      	subs	r3, r2, r3
 801762e:	b29b      	uxth	r3, r3
 8017630:	4619      	mov	r1, r3
 8017632:	f7fa fcf5 	bl	8012020 <pbuf_realloc>
  useg->len -= remainder;
 8017636:	697b      	ldr	r3, [r7, #20]
 8017638:	891a      	ldrh	r2, [r3, #8]
 801763a:	89bb      	ldrh	r3, [r7, #12]
 801763c:	1ad3      	subs	r3, r2, r3
 801763e:	b29a      	uxth	r2, r3
 8017640:	697b      	ldr	r3, [r7, #20]
 8017642:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8017644:	697b      	ldr	r3, [r7, #20]
 8017646:	68db      	ldr	r3, [r3, #12]
 8017648:	899b      	ldrh	r3, [r3, #12]
 801764a:	b29c      	uxth	r4, r3
 801764c:	7efb      	ldrb	r3, [r7, #27]
 801764e:	b29b      	uxth	r3, r3
 8017650:	4618      	mov	r0, r3
 8017652:	f7f9 faab 	bl	8010bac <lwip_htons>
 8017656:	4603      	mov	r3, r0
 8017658:	461a      	mov	r2, r3
 801765a:	697b      	ldr	r3, [r7, #20]
 801765c:	68db      	ldr	r3, [r3, #12]
 801765e:	4322      	orrs	r2, r4
 8017660:	b292      	uxth	r2, r2
 8017662:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8017664:	697b      	ldr	r3, [r7, #20]
 8017666:	685b      	ldr	r3, [r3, #4]
 8017668:	4618      	mov	r0, r3
 801766a:	f7fa feed 	bl	8012448 <pbuf_clen>
 801766e:	4603      	mov	r3, r0
 8017670:	461a      	mov	r2, r3
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017678:	4413      	add	r3, r2
 801767a:	b29a      	uxth	r2, r3
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017682:	69fb      	ldr	r3, [r7, #28]
 8017684:	685b      	ldr	r3, [r3, #4]
 8017686:	4618      	mov	r0, r3
 8017688:	f7fa fede 	bl	8012448 <pbuf_clen>
 801768c:	4603      	mov	r3, r0
 801768e:	461a      	mov	r2, r3
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017696:	4413      	add	r3, r2
 8017698:	b29a      	uxth	r2, r3
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80176a0:	697b      	ldr	r3, [r7, #20]
 80176a2:	681a      	ldr	r2, [r3, #0]
 80176a4:	69fb      	ldr	r3, [r7, #28]
 80176a6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80176a8:	697b      	ldr	r3, [r7, #20]
 80176aa:	69fa      	ldr	r2, [r7, #28]
 80176ac:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80176ae:	69fb      	ldr	r3, [r7, #28]
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d103      	bne.n	80176be <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	2200      	movs	r2, #0
 80176ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80176be:	2300      	movs	r3, #0
 80176c0:	e016      	b.n	80176f0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80176c2:	bf00      	nop
 80176c4:	e002      	b.n	80176cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80176c6:	bf00      	nop
 80176c8:	e000      	b.n	80176cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80176ca:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80176cc:	69fb      	ldr	r3, [r7, #28]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d006      	beq.n	80176e0 <tcp_split_unsent_seg+0x25c>
 80176d2:	4b09      	ldr	r3, [pc, #36]	@ (80176f8 <tcp_split_unsent_seg+0x274>)
 80176d4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80176d8:	490d      	ldr	r1, [pc, #52]	@ (8017710 <tcp_split_unsent_seg+0x28c>)
 80176da:	4809      	ldr	r0, [pc, #36]	@ (8017700 <tcp_split_unsent_seg+0x27c>)
 80176dc:	f004 fede 	bl	801c49c <iprintf>
  if (p != NULL) {
 80176e0:	693b      	ldr	r3, [r7, #16]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d002      	beq.n	80176ec <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80176e6:	6938      	ldr	r0, [r7, #16]
 80176e8:	f7fa fe20 	bl	801232c <pbuf_free>
  }

  return ERR_MEM;
 80176ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80176f0:	4618      	mov	r0, r3
 80176f2:	3724      	adds	r7, #36	@ 0x24
 80176f4:	46bd      	mov	sp, r7
 80176f6:	bd90      	pop	{r4, r7, pc}
 80176f8:	08020960 	.word	0x08020960
 80176fc:	08020cf4 	.word	0x08020cf4
 8017700:	080209b4 	.word	0x080209b4
 8017704:	08020d18 	.word	0x08020d18
 8017708:	08020d3c 	.word	0x08020d3c
 801770c:	08020d4c 	.word	0x08020d4c
 8017710:	08020d5c 	.word	0x08020d5c

08017714 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8017714:	b590      	push	{r4, r7, lr}
 8017716:	b085      	sub	sp, #20
 8017718:	af00      	add	r7, sp, #0
 801771a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	2b00      	cmp	r3, #0
 8017720:	d106      	bne.n	8017730 <tcp_send_fin+0x1c>
 8017722:	4b21      	ldr	r3, [pc, #132]	@ (80177a8 <tcp_send_fin+0x94>)
 8017724:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8017728:	4920      	ldr	r1, [pc, #128]	@ (80177ac <tcp_send_fin+0x98>)
 801772a:	4821      	ldr	r0, [pc, #132]	@ (80177b0 <tcp_send_fin+0x9c>)
 801772c:	f004 feb6 	bl	801c49c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017734:	2b00      	cmp	r3, #0
 8017736:	d02e      	beq.n	8017796 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801773c:	60fb      	str	r3, [r7, #12]
 801773e:	e002      	b.n	8017746 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d1f8      	bne.n	8017740 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801774e:	68fb      	ldr	r3, [r7, #12]
 8017750:	68db      	ldr	r3, [r3, #12]
 8017752:	899b      	ldrh	r3, [r3, #12]
 8017754:	b29b      	uxth	r3, r3
 8017756:	4618      	mov	r0, r3
 8017758:	f7f9 fa28 	bl	8010bac <lwip_htons>
 801775c:	4603      	mov	r3, r0
 801775e:	b2db      	uxtb	r3, r3
 8017760:	f003 0307 	and.w	r3, r3, #7
 8017764:	2b00      	cmp	r3, #0
 8017766:	d116      	bne.n	8017796 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	68db      	ldr	r3, [r3, #12]
 801776c:	899b      	ldrh	r3, [r3, #12]
 801776e:	b29c      	uxth	r4, r3
 8017770:	2001      	movs	r0, #1
 8017772:	f7f9 fa1b 	bl	8010bac <lwip_htons>
 8017776:	4603      	mov	r3, r0
 8017778:	461a      	mov	r2, r3
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	68db      	ldr	r3, [r3, #12]
 801777e:	4322      	orrs	r2, r4
 8017780:	b292      	uxth	r2, r2
 8017782:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	8b5b      	ldrh	r3, [r3, #26]
 8017788:	f043 0320 	orr.w	r3, r3, #32
 801778c:	b29a      	uxth	r2, r3
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8017792:	2300      	movs	r3, #0
 8017794:	e004      	b.n	80177a0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8017796:	2101      	movs	r1, #1
 8017798:	6878      	ldr	r0, [r7, #4]
 801779a:	f000 f80b 	bl	80177b4 <tcp_enqueue_flags>
 801779e:	4603      	mov	r3, r0
}
 80177a0:	4618      	mov	r0, r3
 80177a2:	3714      	adds	r7, #20
 80177a4:	46bd      	mov	sp, r7
 80177a6:	bd90      	pop	{r4, r7, pc}
 80177a8:	08020960 	.word	0x08020960
 80177ac:	08020d68 	.word	0x08020d68
 80177b0:	080209b4 	.word	0x080209b4

080177b4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b08a      	sub	sp, #40	@ 0x28
 80177b8:	af02      	add	r7, sp, #8
 80177ba:	6078      	str	r0, [r7, #4]
 80177bc:	460b      	mov	r3, r1
 80177be:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80177c0:	2300      	movs	r3, #0
 80177c2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80177c4:	2300      	movs	r3, #0
 80177c6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80177c8:	78fb      	ldrb	r3, [r7, #3]
 80177ca:	f003 0303 	and.w	r3, r3, #3
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d106      	bne.n	80177e0 <tcp_enqueue_flags+0x2c>
 80177d2:	4b67      	ldr	r3, [pc, #412]	@ (8017970 <tcp_enqueue_flags+0x1bc>)
 80177d4:	f240 4211 	movw	r2, #1041	@ 0x411
 80177d8:	4966      	ldr	r1, [pc, #408]	@ (8017974 <tcp_enqueue_flags+0x1c0>)
 80177da:	4867      	ldr	r0, [pc, #412]	@ (8017978 <tcp_enqueue_flags+0x1c4>)
 80177dc:	f004 fe5e 	bl	801c49c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d106      	bne.n	80177f4 <tcp_enqueue_flags+0x40>
 80177e6:	4b62      	ldr	r3, [pc, #392]	@ (8017970 <tcp_enqueue_flags+0x1bc>)
 80177e8:	f240 4213 	movw	r2, #1043	@ 0x413
 80177ec:	4963      	ldr	r1, [pc, #396]	@ (801797c <tcp_enqueue_flags+0x1c8>)
 80177ee:	4862      	ldr	r0, [pc, #392]	@ (8017978 <tcp_enqueue_flags+0x1c4>)
 80177f0:	f004 fe54 	bl	801c49c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80177f4:	78fb      	ldrb	r3, [r7, #3]
 80177f6:	f003 0302 	and.w	r3, r3, #2
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d001      	beq.n	8017802 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80177fe:	2301      	movs	r3, #1
 8017800:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017802:	7ffb      	ldrb	r3, [r7, #31]
 8017804:	009b      	lsls	r3, r3, #2
 8017806:	b2db      	uxtb	r3, r3
 8017808:	f003 0304 	and.w	r3, r3, #4
 801780c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801780e:	7dfb      	ldrb	r3, [r7, #23]
 8017810:	b29b      	uxth	r3, r3
 8017812:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017816:	4619      	mov	r1, r3
 8017818:	2036      	movs	r0, #54	@ 0x36
 801781a:	f7fa faa3 	bl	8011d64 <pbuf_alloc>
 801781e:	6138      	str	r0, [r7, #16]
 8017820:	693b      	ldr	r3, [r7, #16]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d109      	bne.n	801783a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	8b5b      	ldrh	r3, [r3, #26]
 801782a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801782e:	b29a      	uxth	r2, r3
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017834:	f04f 33ff 	mov.w	r3, #4294967295
 8017838:	e095      	b.n	8017966 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801783a:	693b      	ldr	r3, [r7, #16]
 801783c:	895a      	ldrh	r2, [r3, #10]
 801783e:	7dfb      	ldrb	r3, [r7, #23]
 8017840:	b29b      	uxth	r3, r3
 8017842:	429a      	cmp	r2, r3
 8017844:	d206      	bcs.n	8017854 <tcp_enqueue_flags+0xa0>
 8017846:	4b4a      	ldr	r3, [pc, #296]	@ (8017970 <tcp_enqueue_flags+0x1bc>)
 8017848:	f240 4239 	movw	r2, #1081	@ 0x439
 801784c:	494c      	ldr	r1, [pc, #304]	@ (8017980 <tcp_enqueue_flags+0x1cc>)
 801784e:	484a      	ldr	r0, [pc, #296]	@ (8017978 <tcp_enqueue_flags+0x1c4>)
 8017850:	f004 fe24 	bl	801c49c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8017858:	78fa      	ldrb	r2, [r7, #3]
 801785a:	7ffb      	ldrb	r3, [r7, #31]
 801785c:	9300      	str	r3, [sp, #0]
 801785e:	460b      	mov	r3, r1
 8017860:	6939      	ldr	r1, [r7, #16]
 8017862:	6878      	ldr	r0, [r7, #4]
 8017864:	f7ff f91a 	bl	8016a9c <tcp_create_segment>
 8017868:	60f8      	str	r0, [r7, #12]
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d109      	bne.n	8017884 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	8b5b      	ldrh	r3, [r3, #26]
 8017874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017878:	b29a      	uxth	r2, r3
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801787e:	f04f 33ff 	mov.w	r3, #4294967295
 8017882:	e070      	b.n	8017966 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	68db      	ldr	r3, [r3, #12]
 8017888:	f003 0303 	and.w	r3, r3, #3
 801788c:	2b00      	cmp	r3, #0
 801788e:	d006      	beq.n	801789e <tcp_enqueue_flags+0xea>
 8017890:	4b37      	ldr	r3, [pc, #220]	@ (8017970 <tcp_enqueue_flags+0x1bc>)
 8017892:	f240 4242 	movw	r2, #1090	@ 0x442
 8017896:	493b      	ldr	r1, [pc, #236]	@ (8017984 <tcp_enqueue_flags+0x1d0>)
 8017898:	4837      	ldr	r0, [pc, #220]	@ (8017978 <tcp_enqueue_flags+0x1c4>)
 801789a:	f004 fdff 	bl	801c49c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	891b      	ldrh	r3, [r3, #8]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d006      	beq.n	80178b4 <tcp_enqueue_flags+0x100>
 80178a6:	4b32      	ldr	r3, [pc, #200]	@ (8017970 <tcp_enqueue_flags+0x1bc>)
 80178a8:	f240 4243 	movw	r2, #1091	@ 0x443
 80178ac:	4936      	ldr	r1, [pc, #216]	@ (8017988 <tcp_enqueue_flags+0x1d4>)
 80178ae:	4832      	ldr	r0, [pc, #200]	@ (8017978 <tcp_enqueue_flags+0x1c4>)
 80178b0:	f004 fdf4 	bl	801c49c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d103      	bne.n	80178c4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	68fa      	ldr	r2, [r7, #12]
 80178c0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80178c2:	e00d      	b.n	80178e0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80178c8:	61bb      	str	r3, [r7, #24]
 80178ca:	e002      	b.n	80178d2 <tcp_enqueue_flags+0x11e>
 80178cc:	69bb      	ldr	r3, [r7, #24]
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	61bb      	str	r3, [r7, #24]
 80178d2:	69bb      	ldr	r3, [r7, #24]
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d1f8      	bne.n	80178cc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80178da:	69bb      	ldr	r3, [r7, #24]
 80178dc:	68fa      	ldr	r2, [r7, #12]
 80178de:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	2200      	movs	r2, #0
 80178e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80178e8:	78fb      	ldrb	r3, [r7, #3]
 80178ea:	f003 0302 	and.w	r3, r3, #2
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d104      	bne.n	80178fc <tcp_enqueue_flags+0x148>
 80178f2:	78fb      	ldrb	r3, [r7, #3]
 80178f4:	f003 0301 	and.w	r3, r3, #1
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d004      	beq.n	8017906 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017900:	1c5a      	adds	r2, r3, #1
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8017906:	78fb      	ldrb	r3, [r7, #3]
 8017908:	f003 0301 	and.w	r3, r3, #1
 801790c:	2b00      	cmp	r3, #0
 801790e:	d006      	beq.n	801791e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	8b5b      	ldrh	r3, [r3, #26]
 8017914:	f043 0320 	orr.w	r3, r3, #32
 8017918:	b29a      	uxth	r2, r3
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	685b      	ldr	r3, [r3, #4]
 8017922:	4618      	mov	r0, r3
 8017924:	f7fa fd90 	bl	8012448 <pbuf_clen>
 8017928:	4603      	mov	r3, r0
 801792a:	461a      	mov	r2, r3
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017932:	4413      	add	r3, r2
 8017934:	b29a      	uxth	r2, r3
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017942:	2b00      	cmp	r3, #0
 8017944:	d00e      	beq.n	8017964 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801794a:	2b00      	cmp	r3, #0
 801794c:	d10a      	bne.n	8017964 <tcp_enqueue_flags+0x1b0>
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017952:	2b00      	cmp	r3, #0
 8017954:	d106      	bne.n	8017964 <tcp_enqueue_flags+0x1b0>
 8017956:	4b06      	ldr	r3, [pc, #24]	@ (8017970 <tcp_enqueue_flags+0x1bc>)
 8017958:	f240 4265 	movw	r2, #1125	@ 0x465
 801795c:	490b      	ldr	r1, [pc, #44]	@ (801798c <tcp_enqueue_flags+0x1d8>)
 801795e:	4806      	ldr	r0, [pc, #24]	@ (8017978 <tcp_enqueue_flags+0x1c4>)
 8017960:	f004 fd9c 	bl	801c49c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8017964:	2300      	movs	r3, #0
}
 8017966:	4618      	mov	r0, r3
 8017968:	3720      	adds	r7, #32
 801796a:	46bd      	mov	sp, r7
 801796c:	bd80      	pop	{r7, pc}
 801796e:	bf00      	nop
 8017970:	08020960 	.word	0x08020960
 8017974:	08020d84 	.word	0x08020d84
 8017978:	080209b4 	.word	0x080209b4
 801797c:	08020ddc 	.word	0x08020ddc
 8017980:	08020dfc 	.word	0x08020dfc
 8017984:	08020e38 	.word	0x08020e38
 8017988:	08020e50 	.word	0x08020e50
 801798c:	08020e7c 	.word	0x08020e7c

08017990 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8017990:	b5b0      	push	{r4, r5, r7, lr}
 8017992:	b08a      	sub	sp, #40	@ 0x28
 8017994:	af00      	add	r7, sp, #0
 8017996:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	2b00      	cmp	r3, #0
 801799c:	d106      	bne.n	80179ac <tcp_output+0x1c>
 801799e:	4b8a      	ldr	r3, [pc, #552]	@ (8017bc8 <tcp_output+0x238>)
 80179a0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80179a4:	4989      	ldr	r1, [pc, #548]	@ (8017bcc <tcp_output+0x23c>)
 80179a6:	488a      	ldr	r0, [pc, #552]	@ (8017bd0 <tcp_output+0x240>)
 80179a8:	f004 fd78 	bl	801c49c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	7d1b      	ldrb	r3, [r3, #20]
 80179b0:	2b01      	cmp	r3, #1
 80179b2:	d106      	bne.n	80179c2 <tcp_output+0x32>
 80179b4:	4b84      	ldr	r3, [pc, #528]	@ (8017bc8 <tcp_output+0x238>)
 80179b6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80179ba:	4986      	ldr	r1, [pc, #536]	@ (8017bd4 <tcp_output+0x244>)
 80179bc:	4884      	ldr	r0, [pc, #528]	@ (8017bd0 <tcp_output+0x240>)
 80179be:	f004 fd6d 	bl	801c49c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80179c2:	4b85      	ldr	r3, [pc, #532]	@ (8017bd8 <tcp_output+0x248>)
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	687a      	ldr	r2, [r7, #4]
 80179c8:	429a      	cmp	r2, r3
 80179ca:	d101      	bne.n	80179d0 <tcp_output+0x40>
    return ERR_OK;
 80179cc:	2300      	movs	r3, #0
 80179ce:	e1ce      	b.n	8017d6e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80179dc:	4293      	cmp	r3, r2
 80179de:	bf28      	it	cs
 80179e0:	4613      	movcs	r3, r2
 80179e2:	b29b      	uxth	r3, r3
 80179e4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80179ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80179ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d10b      	bne.n	8017a0a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	8b5b      	ldrh	r3, [r3, #26]
 80179f6:	f003 0302 	and.w	r3, r3, #2
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	f000 81aa 	beq.w	8017d54 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8017a00:	6878      	ldr	r0, [r7, #4]
 8017a02:	f000 fdcb 	bl	801859c <tcp_send_empty_ack>
 8017a06:	4603      	mov	r3, r0
 8017a08:	e1b1      	b.n	8017d6e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8017a0a:	6879      	ldr	r1, [r7, #4]
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	3304      	adds	r3, #4
 8017a10:	461a      	mov	r2, r3
 8017a12:	6878      	ldr	r0, [r7, #4]
 8017a14:	f7ff f826 	bl	8016a64 <tcp_route>
 8017a18:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8017a1a:	697b      	ldr	r3, [r7, #20]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d102      	bne.n	8017a26 <tcp_output+0x96>
    return ERR_RTE;
 8017a20:	f06f 0303 	mvn.w	r3, #3
 8017a24:	e1a3      	b.n	8017d6e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d003      	beq.n	8017a34 <tcp_output+0xa4>
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d111      	bne.n	8017a58 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8017a34:	697b      	ldr	r3, [r7, #20]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d002      	beq.n	8017a40 <tcp_output+0xb0>
 8017a3a:	697b      	ldr	r3, [r7, #20]
 8017a3c:	3304      	adds	r3, #4
 8017a3e:	e000      	b.n	8017a42 <tcp_output+0xb2>
 8017a40:	2300      	movs	r3, #0
 8017a42:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8017a44:	693b      	ldr	r3, [r7, #16]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d102      	bne.n	8017a50 <tcp_output+0xc0>
      return ERR_RTE;
 8017a4a:	f06f 0303 	mvn.w	r3, #3
 8017a4e:	e18e      	b.n	8017d6e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017a50:	693b      	ldr	r3, [r7, #16]
 8017a52:	681a      	ldr	r2, [r3, #0]
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8017a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a5a:	68db      	ldr	r3, [r3, #12]
 8017a5c:	685b      	ldr	r3, [r3, #4]
 8017a5e:	4618      	mov	r0, r3
 8017a60:	f7f9 f8ba 	bl	8010bd8 <lwip_htonl>
 8017a64:	4602      	mov	r2, r0
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017a6a:	1ad3      	subs	r3, r2, r3
 8017a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017a6e:	8912      	ldrh	r2, [r2, #8]
 8017a70:	4413      	add	r3, r2
 8017a72:	69ba      	ldr	r2, [r7, #24]
 8017a74:	429a      	cmp	r2, r3
 8017a76:	d227      	bcs.n	8017ac8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017a7e:	461a      	mov	r2, r3
 8017a80:	69bb      	ldr	r3, [r7, #24]
 8017a82:	4293      	cmp	r3, r2
 8017a84:	d114      	bne.n	8017ab0 <tcp_output+0x120>
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d110      	bne.n	8017ab0 <tcp_output+0x120>
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d10b      	bne.n	8017ab0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	2200      	movs	r2, #0
 8017a9c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	2201      	movs	r2, #1
 8017aa4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	2200      	movs	r2, #0
 8017aac:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	8b5b      	ldrh	r3, [r3, #26]
 8017ab4:	f003 0302 	and.w	r3, r3, #2
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	f000 814d 	beq.w	8017d58 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8017abe:	6878      	ldr	r0, [r7, #4]
 8017ac0:	f000 fd6c 	bl	801859c <tcp_send_empty_ack>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	e152      	b.n	8017d6e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	2200      	movs	r2, #0
 8017acc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017ad4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8017ad6:	6a3b      	ldr	r3, [r7, #32]
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	f000 811c 	beq.w	8017d16 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8017ade:	e002      	b.n	8017ae6 <tcp_output+0x156>
 8017ae0:	6a3b      	ldr	r3, [r7, #32]
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	623b      	str	r3, [r7, #32]
 8017ae6:	6a3b      	ldr	r3, [r7, #32]
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d1f8      	bne.n	8017ae0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8017aee:	e112      	b.n	8017d16 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8017af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017af2:	68db      	ldr	r3, [r3, #12]
 8017af4:	899b      	ldrh	r3, [r3, #12]
 8017af6:	b29b      	uxth	r3, r3
 8017af8:	4618      	mov	r0, r3
 8017afa:	f7f9 f857 	bl	8010bac <lwip_htons>
 8017afe:	4603      	mov	r3, r0
 8017b00:	b2db      	uxtb	r3, r3
 8017b02:	f003 0304 	and.w	r3, r3, #4
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d006      	beq.n	8017b18 <tcp_output+0x188>
 8017b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8017bc8 <tcp_output+0x238>)
 8017b0c:	f240 5236 	movw	r2, #1334	@ 0x536
 8017b10:	4932      	ldr	r1, [pc, #200]	@ (8017bdc <tcp_output+0x24c>)
 8017b12:	482f      	ldr	r0, [pc, #188]	@ (8017bd0 <tcp_output+0x240>)
 8017b14:	f004 fcc2 	bl	801c49c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d01f      	beq.n	8017b60 <tcp_output+0x1d0>
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	8b5b      	ldrh	r3, [r3, #26]
 8017b24:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d119      	bne.n	8017b60 <tcp_output+0x1d0>
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d00b      	beq.n	8017b4c <tcp_output+0x1bc>
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d110      	bne.n	8017b60 <tcp_output+0x1d0>
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017b42:	891a      	ldrh	r2, [r3, #8]
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017b48:	429a      	cmp	r2, r3
 8017b4a:	d209      	bcs.n	8017b60 <tcp_output+0x1d0>
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d004      	beq.n	8017b60 <tcp_output+0x1d0>
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017b5c:	2b08      	cmp	r3, #8
 8017b5e:	d901      	bls.n	8017b64 <tcp_output+0x1d4>
 8017b60:	2301      	movs	r3, #1
 8017b62:	e000      	b.n	8017b66 <tcp_output+0x1d6>
 8017b64:	2300      	movs	r3, #0
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d106      	bne.n	8017b78 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	8b5b      	ldrh	r3, [r3, #26]
 8017b6e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	f000 80e4 	beq.w	8017d40 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	7d1b      	ldrb	r3, [r3, #20]
 8017b7c:	2b02      	cmp	r3, #2
 8017b7e:	d00d      	beq.n	8017b9c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8017b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b82:	68db      	ldr	r3, [r3, #12]
 8017b84:	899b      	ldrh	r3, [r3, #12]
 8017b86:	b29c      	uxth	r4, r3
 8017b88:	2010      	movs	r0, #16
 8017b8a:	f7f9 f80f 	bl	8010bac <lwip_htons>
 8017b8e:	4603      	mov	r3, r0
 8017b90:	461a      	mov	r2, r3
 8017b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b94:	68db      	ldr	r3, [r3, #12]
 8017b96:	4322      	orrs	r2, r4
 8017b98:	b292      	uxth	r2, r2
 8017b9a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8017b9c:	697a      	ldr	r2, [r7, #20]
 8017b9e:	6879      	ldr	r1, [r7, #4]
 8017ba0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017ba2:	f000 f909 	bl	8017db8 <tcp_output_segment>
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8017baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d016      	beq.n	8017be0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	8b5b      	ldrh	r3, [r3, #26]
 8017bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017bba:	b29a      	uxth	r2, r3
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	835a      	strh	r2, [r3, #26]
      return err;
 8017bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017bc4:	e0d3      	b.n	8017d6e <tcp_output+0x3de>
 8017bc6:	bf00      	nop
 8017bc8:	08020960 	.word	0x08020960
 8017bcc:	08020ea4 	.word	0x08020ea4
 8017bd0:	080209b4 	.word	0x080209b4
 8017bd4:	08020ebc 	.word	0x08020ebc
 8017bd8:	2000c918 	.word	0x2000c918
 8017bdc:	08020ee4 	.word	0x08020ee4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8017be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017be2:	681a      	ldr	r2, [r3, #0]
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	7d1b      	ldrb	r3, [r3, #20]
 8017bec:	2b02      	cmp	r3, #2
 8017bee:	d006      	beq.n	8017bfe <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	8b5b      	ldrh	r3, [r3, #26]
 8017bf4:	f023 0303 	bic.w	r3, r3, #3
 8017bf8:	b29a      	uxth	r2, r3
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c00:	68db      	ldr	r3, [r3, #12]
 8017c02:	685b      	ldr	r3, [r3, #4]
 8017c04:	4618      	mov	r0, r3
 8017c06:	f7f8 ffe7 	bl	8010bd8 <lwip_htonl>
 8017c0a:	4604      	mov	r4, r0
 8017c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c0e:	891b      	ldrh	r3, [r3, #8]
 8017c10:	461d      	mov	r5, r3
 8017c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c14:	68db      	ldr	r3, [r3, #12]
 8017c16:	899b      	ldrh	r3, [r3, #12]
 8017c18:	b29b      	uxth	r3, r3
 8017c1a:	4618      	mov	r0, r3
 8017c1c:	f7f8 ffc6 	bl	8010bac <lwip_htons>
 8017c20:	4603      	mov	r3, r0
 8017c22:	b2db      	uxtb	r3, r3
 8017c24:	f003 0303 	and.w	r3, r3, #3
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d001      	beq.n	8017c30 <tcp_output+0x2a0>
 8017c2c:	2301      	movs	r3, #1
 8017c2e:	e000      	b.n	8017c32 <tcp_output+0x2a2>
 8017c30:	2300      	movs	r3, #0
 8017c32:	442b      	add	r3, r5
 8017c34:	4423      	add	r3, r4
 8017c36:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017c3c:	68bb      	ldr	r3, [r7, #8]
 8017c3e:	1ad3      	subs	r3, r2, r3
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	da02      	bge.n	8017c4a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	68ba      	ldr	r2, [r7, #8]
 8017c48:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8017c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c4c:	891b      	ldrh	r3, [r3, #8]
 8017c4e:	461c      	mov	r4, r3
 8017c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c52:	68db      	ldr	r3, [r3, #12]
 8017c54:	899b      	ldrh	r3, [r3, #12]
 8017c56:	b29b      	uxth	r3, r3
 8017c58:	4618      	mov	r0, r3
 8017c5a:	f7f8 ffa7 	bl	8010bac <lwip_htons>
 8017c5e:	4603      	mov	r3, r0
 8017c60:	b2db      	uxtb	r3, r3
 8017c62:	f003 0303 	and.w	r3, r3, #3
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d001      	beq.n	8017c6e <tcp_output+0x2de>
 8017c6a:	2301      	movs	r3, #1
 8017c6c:	e000      	b.n	8017c70 <tcp_output+0x2e0>
 8017c6e:	2300      	movs	r3, #0
 8017c70:	4423      	add	r3, r4
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d049      	beq.n	8017d0a <tcp_output+0x37a>
      seg->next = NULL;
 8017c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c78:	2200      	movs	r2, #0
 8017c7a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d105      	bne.n	8017c90 <tcp_output+0x300>
        pcb->unacked = seg;
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017c88:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8017c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c8c:	623b      	str	r3, [r7, #32]
 8017c8e:	e03f      	b.n	8017d10 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8017c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c92:	68db      	ldr	r3, [r3, #12]
 8017c94:	685b      	ldr	r3, [r3, #4]
 8017c96:	4618      	mov	r0, r3
 8017c98:	f7f8 ff9e 	bl	8010bd8 <lwip_htonl>
 8017c9c:	4604      	mov	r4, r0
 8017c9e:	6a3b      	ldr	r3, [r7, #32]
 8017ca0:	68db      	ldr	r3, [r3, #12]
 8017ca2:	685b      	ldr	r3, [r3, #4]
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	f7f8 ff97 	bl	8010bd8 <lwip_htonl>
 8017caa:	4603      	mov	r3, r0
 8017cac:	1ae3      	subs	r3, r4, r3
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	da24      	bge.n	8017cfc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	3370      	adds	r3, #112	@ 0x70
 8017cb6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017cb8:	e002      	b.n	8017cc0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8017cba:	69fb      	ldr	r3, [r7, #28]
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017cc0:	69fb      	ldr	r3, [r7, #28]
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d011      	beq.n	8017cec <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017cc8:	69fb      	ldr	r3, [r7, #28]
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	68db      	ldr	r3, [r3, #12]
 8017cce:	685b      	ldr	r3, [r3, #4]
 8017cd0:	4618      	mov	r0, r3
 8017cd2:	f7f8 ff81 	bl	8010bd8 <lwip_htonl>
 8017cd6:	4604      	mov	r4, r0
 8017cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cda:	68db      	ldr	r3, [r3, #12]
 8017cdc:	685b      	ldr	r3, [r3, #4]
 8017cde:	4618      	mov	r0, r3
 8017ce0:	f7f8 ff7a 	bl	8010bd8 <lwip_htonl>
 8017ce4:	4603      	mov	r3, r0
 8017ce6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	dbe6      	blt.n	8017cba <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8017cec:	69fb      	ldr	r3, [r7, #28]
 8017cee:	681a      	ldr	r2, [r3, #0]
 8017cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cf2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8017cf4:	69fb      	ldr	r3, [r7, #28]
 8017cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017cf8:	601a      	str	r2, [r3, #0]
 8017cfa:	e009      	b.n	8017d10 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8017cfc:	6a3b      	ldr	r3, [r7, #32]
 8017cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017d00:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8017d02:	6a3b      	ldr	r3, [r7, #32]
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	623b      	str	r3, [r7, #32]
 8017d08:	e002      	b.n	8017d10 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8017d0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017d0c:	f7fb ff49 	bl	8013ba2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017d14:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8017d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d012      	beq.n	8017d42 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8017d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d1e:	68db      	ldr	r3, [r3, #12]
 8017d20:	685b      	ldr	r3, [r3, #4]
 8017d22:	4618      	mov	r0, r3
 8017d24:	f7f8 ff58 	bl	8010bd8 <lwip_htonl>
 8017d28:	4602      	mov	r2, r0
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017d2e:	1ad3      	subs	r3, r2, r3
 8017d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017d32:	8912      	ldrh	r2, [r2, #8]
 8017d34:	4413      	add	r3, r2
  while (seg != NULL &&
 8017d36:	69ba      	ldr	r2, [r7, #24]
 8017d38:	429a      	cmp	r2, r3
 8017d3a:	f4bf aed9 	bcs.w	8017af0 <tcp_output+0x160>
 8017d3e:	e000      	b.n	8017d42 <tcp_output+0x3b2>
      break;
 8017d40:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d108      	bne.n	8017d5c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	2200      	movs	r2, #0
 8017d4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8017d52:	e004      	b.n	8017d5e <tcp_output+0x3ce>
    goto output_done;
 8017d54:	bf00      	nop
 8017d56:	e002      	b.n	8017d5e <tcp_output+0x3ce>
    goto output_done;
 8017d58:	bf00      	nop
 8017d5a:	e000      	b.n	8017d5e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8017d5c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	8b5b      	ldrh	r3, [r3, #26]
 8017d62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017d66:	b29a      	uxth	r2, r3
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8017d6c:	2300      	movs	r3, #0
}
 8017d6e:	4618      	mov	r0, r3
 8017d70:	3728      	adds	r7, #40	@ 0x28
 8017d72:	46bd      	mov	sp, r7
 8017d74:	bdb0      	pop	{r4, r5, r7, pc}
 8017d76:	bf00      	nop

08017d78 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b082      	sub	sp, #8
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d106      	bne.n	8017d94 <tcp_output_segment_busy+0x1c>
 8017d86:	4b09      	ldr	r3, [pc, #36]	@ (8017dac <tcp_output_segment_busy+0x34>)
 8017d88:	f240 529a 	movw	r2, #1434	@ 0x59a
 8017d8c:	4908      	ldr	r1, [pc, #32]	@ (8017db0 <tcp_output_segment_busy+0x38>)
 8017d8e:	4809      	ldr	r0, [pc, #36]	@ (8017db4 <tcp_output_segment_busy+0x3c>)
 8017d90:	f004 fb84 	bl	801c49c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	685b      	ldr	r3, [r3, #4]
 8017d98:	7b9b      	ldrb	r3, [r3, #14]
 8017d9a:	2b01      	cmp	r3, #1
 8017d9c:	d001      	beq.n	8017da2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8017d9e:	2301      	movs	r3, #1
 8017da0:	e000      	b.n	8017da4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8017da2:	2300      	movs	r3, #0
}
 8017da4:	4618      	mov	r0, r3
 8017da6:	3708      	adds	r7, #8
 8017da8:	46bd      	mov	sp, r7
 8017daa:	bd80      	pop	{r7, pc}
 8017dac:	08020960 	.word	0x08020960
 8017db0:	08020efc 	.word	0x08020efc
 8017db4:	080209b4 	.word	0x080209b4

08017db8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8017db8:	b5b0      	push	{r4, r5, r7, lr}
 8017dba:	b08c      	sub	sp, #48	@ 0x30
 8017dbc:	af04      	add	r7, sp, #16
 8017dbe:	60f8      	str	r0, [r7, #12]
 8017dc0:	60b9      	str	r1, [r7, #8]
 8017dc2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d106      	bne.n	8017dd8 <tcp_output_segment+0x20>
 8017dca:	4b64      	ldr	r3, [pc, #400]	@ (8017f5c <tcp_output_segment+0x1a4>)
 8017dcc:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8017dd0:	4963      	ldr	r1, [pc, #396]	@ (8017f60 <tcp_output_segment+0x1a8>)
 8017dd2:	4864      	ldr	r0, [pc, #400]	@ (8017f64 <tcp_output_segment+0x1ac>)
 8017dd4:	f004 fb62 	bl	801c49c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8017dd8:	68bb      	ldr	r3, [r7, #8]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d106      	bne.n	8017dec <tcp_output_segment+0x34>
 8017dde:	4b5f      	ldr	r3, [pc, #380]	@ (8017f5c <tcp_output_segment+0x1a4>)
 8017de0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8017de4:	4960      	ldr	r1, [pc, #384]	@ (8017f68 <tcp_output_segment+0x1b0>)
 8017de6:	485f      	ldr	r0, [pc, #380]	@ (8017f64 <tcp_output_segment+0x1ac>)
 8017de8:	f004 fb58 	bl	801c49c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d106      	bne.n	8017e00 <tcp_output_segment+0x48>
 8017df2:	4b5a      	ldr	r3, [pc, #360]	@ (8017f5c <tcp_output_segment+0x1a4>)
 8017df4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8017df8:	495c      	ldr	r1, [pc, #368]	@ (8017f6c <tcp_output_segment+0x1b4>)
 8017dfa:	485a      	ldr	r0, [pc, #360]	@ (8017f64 <tcp_output_segment+0x1ac>)
 8017dfc:	f004 fb4e 	bl	801c49c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8017e00:	68f8      	ldr	r0, [r7, #12]
 8017e02:	f7ff ffb9 	bl	8017d78 <tcp_output_segment_busy>
 8017e06:	4603      	mov	r3, r0
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d001      	beq.n	8017e10 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017e0c:	2300      	movs	r3, #0
 8017e0e:	e0a1      	b.n	8017f54 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017e10:	68bb      	ldr	r3, [r7, #8]
 8017e12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	68dc      	ldr	r4, [r3, #12]
 8017e18:	4610      	mov	r0, r2
 8017e1a:	f7f8 fedd 	bl	8010bd8 <lwip_htonl>
 8017e1e:	4603      	mov	r3, r0
 8017e20:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017e22:	68bb      	ldr	r3, [r7, #8]
 8017e24:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	68dc      	ldr	r4, [r3, #12]
 8017e2a:	4610      	mov	r0, r2
 8017e2c:	f7f8 febe 	bl	8010bac <lwip_htons>
 8017e30:	4603      	mov	r3, r0
 8017e32:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017e34:	68bb      	ldr	r3, [r7, #8]
 8017e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e38:	68ba      	ldr	r2, [r7, #8]
 8017e3a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8017e3c:	441a      	add	r2, r3
 8017e3e:	68bb      	ldr	r3, [r7, #8]
 8017e40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8017e42:	68fb      	ldr	r3, [r7, #12]
 8017e44:	68db      	ldr	r3, [r3, #12]
 8017e46:	3314      	adds	r3, #20
 8017e48:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	7a9b      	ldrb	r3, [r3, #10]
 8017e4e:	f003 0301 	and.w	r3, r3, #1
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d015      	beq.n	8017e82 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8017e56:	68bb      	ldr	r3, [r7, #8]
 8017e58:	3304      	adds	r3, #4
 8017e5a:	461a      	mov	r2, r3
 8017e5c:	6879      	ldr	r1, [r7, #4]
 8017e5e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8017e62:	f7fc fa39 	bl	80142d8 <tcp_eff_send_mss_netif>
 8017e66:	4603      	mov	r3, r0
 8017e68:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8017e6a:	8b7b      	ldrh	r3, [r7, #26]
 8017e6c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8017e70:	4618      	mov	r0, r3
 8017e72:	f7f8 feb1 	bl	8010bd8 <lwip_htonl>
 8017e76:	4602      	mov	r2, r0
 8017e78:	69fb      	ldr	r3, [r7, #28]
 8017e7a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017e7c:	69fb      	ldr	r3, [r7, #28]
 8017e7e:	3304      	adds	r3, #4
 8017e80:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8017e82:	68bb      	ldr	r3, [r7, #8]
 8017e84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	da02      	bge.n	8017e92 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017e8c:	68bb      	ldr	r3, [r7, #8]
 8017e8e:	2200      	movs	r2, #0
 8017e90:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8017e92:	68bb      	ldr	r3, [r7, #8]
 8017e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d10c      	bne.n	8017eb4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8017e9a:	4b35      	ldr	r3, [pc, #212]	@ (8017f70 <tcp_output_segment+0x1b8>)
 8017e9c:	681a      	ldr	r2, [r3, #0]
 8017e9e:	68bb      	ldr	r3, [r7, #8]
 8017ea0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	68db      	ldr	r3, [r3, #12]
 8017ea6:	685b      	ldr	r3, [r3, #4]
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	f7f8 fe95 	bl	8010bd8 <lwip_htonl>
 8017eae:	4602      	mov	r2, r0
 8017eb0:	68bb      	ldr	r3, [r7, #8]
 8017eb2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017eb4:	68fb      	ldr	r3, [r7, #12]
 8017eb6:	68da      	ldr	r2, [r3, #12]
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	685b      	ldr	r3, [r3, #4]
 8017ebc:	685b      	ldr	r3, [r3, #4]
 8017ebe:	1ad3      	subs	r3, r2, r3
 8017ec0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	685b      	ldr	r3, [r3, #4]
 8017ec6:	8959      	ldrh	r1, [r3, #10]
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	685b      	ldr	r3, [r3, #4]
 8017ecc:	8b3a      	ldrh	r2, [r7, #24]
 8017ece:	1a8a      	subs	r2, r1, r2
 8017ed0:	b292      	uxth	r2, r2
 8017ed2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	685b      	ldr	r3, [r3, #4]
 8017ed8:	8919      	ldrh	r1, [r3, #8]
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	685b      	ldr	r3, [r3, #4]
 8017ede:	8b3a      	ldrh	r2, [r7, #24]
 8017ee0:	1a8a      	subs	r2, r1, r2
 8017ee2:	b292      	uxth	r2, r2
 8017ee4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	685b      	ldr	r3, [r3, #4]
 8017eea:	68fa      	ldr	r2, [r7, #12]
 8017eec:	68d2      	ldr	r2, [r2, #12]
 8017eee:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	68db      	ldr	r3, [r3, #12]
 8017ef4:	2200      	movs	r2, #0
 8017ef6:	741a      	strb	r2, [r3, #16]
 8017ef8:	2200      	movs	r2, #0
 8017efa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	68da      	ldr	r2, [r3, #12]
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	7a9b      	ldrb	r3, [r3, #10]
 8017f04:	f003 0301 	and.w	r3, r3, #1
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d001      	beq.n	8017f10 <tcp_output_segment+0x158>
 8017f0c:	2318      	movs	r3, #24
 8017f0e:	e000      	b.n	8017f12 <tcp_output_segment+0x15a>
 8017f10:	2314      	movs	r3, #20
 8017f12:	4413      	add	r3, r2
 8017f14:	69fa      	ldr	r2, [r7, #28]
 8017f16:	429a      	cmp	r2, r3
 8017f18:	d006      	beq.n	8017f28 <tcp_output_segment+0x170>
 8017f1a:	4b10      	ldr	r3, [pc, #64]	@ (8017f5c <tcp_output_segment+0x1a4>)
 8017f1c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8017f20:	4914      	ldr	r1, [pc, #80]	@ (8017f74 <tcp_output_segment+0x1bc>)
 8017f22:	4810      	ldr	r0, [pc, #64]	@ (8017f64 <tcp_output_segment+0x1ac>)
 8017f24:	f004 faba 	bl	801c49c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	6858      	ldr	r0, [r3, #4]
 8017f2c:	68b9      	ldr	r1, [r7, #8]
 8017f2e:	68bb      	ldr	r3, [r7, #8]
 8017f30:	1d1c      	adds	r4, r3, #4
 8017f32:	68bb      	ldr	r3, [r7, #8]
 8017f34:	7add      	ldrb	r5, [r3, #11]
 8017f36:	68bb      	ldr	r3, [r7, #8]
 8017f38:	7a9b      	ldrb	r3, [r3, #10]
 8017f3a:	687a      	ldr	r2, [r7, #4]
 8017f3c:	9202      	str	r2, [sp, #8]
 8017f3e:	2206      	movs	r2, #6
 8017f40:	9201      	str	r2, [sp, #4]
 8017f42:	9300      	str	r3, [sp, #0]
 8017f44:	462b      	mov	r3, r5
 8017f46:	4622      	mov	r2, r4
 8017f48:	f002 fa32 	bl	801a3b0 <ip4_output_if>
 8017f4c:	4603      	mov	r3, r0
 8017f4e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017f50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017f54:	4618      	mov	r0, r3
 8017f56:	3720      	adds	r7, #32
 8017f58:	46bd      	mov	sp, r7
 8017f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8017f5c:	08020960 	.word	0x08020960
 8017f60:	08020f24 	.word	0x08020f24
 8017f64:	080209b4 	.word	0x080209b4
 8017f68:	08020f44 	.word	0x08020f44
 8017f6c:	08020f64 	.word	0x08020f64
 8017f70:	2000c8cc 	.word	0x2000c8cc
 8017f74:	08020f88 	.word	0x08020f88

08017f78 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8017f78:	b5b0      	push	{r4, r5, r7, lr}
 8017f7a:	b084      	sub	sp, #16
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d106      	bne.n	8017f94 <tcp_rexmit_rto_prepare+0x1c>
 8017f86:	4b31      	ldr	r3, [pc, #196]	@ (801804c <tcp_rexmit_rto_prepare+0xd4>)
 8017f88:	f240 6263 	movw	r2, #1635	@ 0x663
 8017f8c:	4930      	ldr	r1, [pc, #192]	@ (8018050 <tcp_rexmit_rto_prepare+0xd8>)
 8017f8e:	4831      	ldr	r0, [pc, #196]	@ (8018054 <tcp_rexmit_rto_prepare+0xdc>)
 8017f90:	f004 fa84 	bl	801c49c <iprintf>

  if (pcb->unacked == NULL) {
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d102      	bne.n	8017fa2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017f9c:	f06f 0305 	mvn.w	r3, #5
 8017fa0:	e050      	b.n	8018044 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017fa6:	60fb      	str	r3, [r7, #12]
 8017fa8:	e00b      	b.n	8017fc2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8017faa:	68f8      	ldr	r0, [r7, #12]
 8017fac:	f7ff fee4 	bl	8017d78 <tcp_output_segment_busy>
 8017fb0:	4603      	mov	r3, r0
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d002      	beq.n	8017fbc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8017fb6:	f06f 0305 	mvn.w	r3, #5
 8017fba:	e043      	b.n	8018044 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	60fb      	str	r3, [r7, #12]
 8017fc2:	68fb      	ldr	r3, [r7, #12]
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d1ef      	bne.n	8017faa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8017fca:	68f8      	ldr	r0, [r7, #12]
 8017fcc:	f7ff fed4 	bl	8017d78 <tcp_output_segment_busy>
 8017fd0:	4603      	mov	r3, r0
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d002      	beq.n	8017fdc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8017fd6:	f06f 0305 	mvn.w	r3, #5
 8017fda:	e033      	b.n	8018044 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	2200      	movs	r2, #0
 8017ff0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	8b5b      	ldrh	r3, [r3, #26]
 8017ff6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8017ffa:	b29a      	uxth	r2, r3
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	68db      	ldr	r3, [r3, #12]
 8018004:	685b      	ldr	r3, [r3, #4]
 8018006:	4618      	mov	r0, r3
 8018008:	f7f8 fde6 	bl	8010bd8 <lwip_htonl>
 801800c:	4604      	mov	r4, r0
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	891b      	ldrh	r3, [r3, #8]
 8018012:	461d      	mov	r5, r3
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	68db      	ldr	r3, [r3, #12]
 8018018:	899b      	ldrh	r3, [r3, #12]
 801801a:	b29b      	uxth	r3, r3
 801801c:	4618      	mov	r0, r3
 801801e:	f7f8 fdc5 	bl	8010bac <lwip_htons>
 8018022:	4603      	mov	r3, r0
 8018024:	b2db      	uxtb	r3, r3
 8018026:	f003 0303 	and.w	r3, r3, #3
 801802a:	2b00      	cmp	r3, #0
 801802c:	d001      	beq.n	8018032 <tcp_rexmit_rto_prepare+0xba>
 801802e:	2301      	movs	r3, #1
 8018030:	e000      	b.n	8018034 <tcp_rexmit_rto_prepare+0xbc>
 8018032:	2300      	movs	r3, #0
 8018034:	442b      	add	r3, r5
 8018036:	18e2      	adds	r2, r4, r3
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	2200      	movs	r2, #0
 8018040:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8018042:	2300      	movs	r3, #0
}
 8018044:	4618      	mov	r0, r3
 8018046:	3710      	adds	r7, #16
 8018048:	46bd      	mov	sp, r7
 801804a:	bdb0      	pop	{r4, r5, r7, pc}
 801804c:	08020960 	.word	0x08020960
 8018050:	08020f9c 	.word	0x08020f9c
 8018054:	080209b4 	.word	0x080209b4

08018058 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018058:	b580      	push	{r7, lr}
 801805a:	b082      	sub	sp, #8
 801805c:	af00      	add	r7, sp, #0
 801805e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	2b00      	cmp	r3, #0
 8018064:	d106      	bne.n	8018074 <tcp_rexmit_rto_commit+0x1c>
 8018066:	4b0d      	ldr	r3, [pc, #52]	@ (801809c <tcp_rexmit_rto_commit+0x44>)
 8018068:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801806c:	490c      	ldr	r1, [pc, #48]	@ (80180a0 <tcp_rexmit_rto_commit+0x48>)
 801806e:	480d      	ldr	r0, [pc, #52]	@ (80180a4 <tcp_rexmit_rto_commit+0x4c>)
 8018070:	f004 fa14 	bl	801c49c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801807a:	2bff      	cmp	r3, #255	@ 0xff
 801807c:	d007      	beq.n	801808e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018084:	3301      	adds	r3, #1
 8018086:	b2da      	uxtb	r2, r3
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801808e:	6878      	ldr	r0, [r7, #4]
 8018090:	f7ff fc7e 	bl	8017990 <tcp_output>
}
 8018094:	bf00      	nop
 8018096:	3708      	adds	r7, #8
 8018098:	46bd      	mov	sp, r7
 801809a:	bd80      	pop	{r7, pc}
 801809c:	08020960 	.word	0x08020960
 80180a0:	08020fc0 	.word	0x08020fc0
 80180a4:	080209b4 	.word	0x080209b4

080180a8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80180a8:	b580      	push	{r7, lr}
 80180aa:	b082      	sub	sp, #8
 80180ac:	af00      	add	r7, sp, #0
 80180ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d106      	bne.n	80180c4 <tcp_rexmit_rto+0x1c>
 80180b6:	4b0a      	ldr	r3, [pc, #40]	@ (80180e0 <tcp_rexmit_rto+0x38>)
 80180b8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80180bc:	4909      	ldr	r1, [pc, #36]	@ (80180e4 <tcp_rexmit_rto+0x3c>)
 80180be:	480a      	ldr	r0, [pc, #40]	@ (80180e8 <tcp_rexmit_rto+0x40>)
 80180c0:	f004 f9ec 	bl	801c49c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80180c4:	6878      	ldr	r0, [r7, #4]
 80180c6:	f7ff ff57 	bl	8017f78 <tcp_rexmit_rto_prepare>
 80180ca:	4603      	mov	r3, r0
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d102      	bne.n	80180d6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80180d0:	6878      	ldr	r0, [r7, #4]
 80180d2:	f7ff ffc1 	bl	8018058 <tcp_rexmit_rto_commit>
  }
}
 80180d6:	bf00      	nop
 80180d8:	3708      	adds	r7, #8
 80180da:	46bd      	mov	sp, r7
 80180dc:	bd80      	pop	{r7, pc}
 80180de:	bf00      	nop
 80180e0:	08020960 	.word	0x08020960
 80180e4:	08020fe4 	.word	0x08020fe4
 80180e8:	080209b4 	.word	0x080209b4

080180ec <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80180ec:	b590      	push	{r4, r7, lr}
 80180ee:	b085      	sub	sp, #20
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d106      	bne.n	8018108 <tcp_rexmit+0x1c>
 80180fa:	4b2f      	ldr	r3, [pc, #188]	@ (80181b8 <tcp_rexmit+0xcc>)
 80180fc:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8018100:	492e      	ldr	r1, [pc, #184]	@ (80181bc <tcp_rexmit+0xd0>)
 8018102:	482f      	ldr	r0, [pc, #188]	@ (80181c0 <tcp_rexmit+0xd4>)
 8018104:	f004 f9ca 	bl	801c49c <iprintf>

  if (pcb->unacked == NULL) {
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801810c:	2b00      	cmp	r3, #0
 801810e:	d102      	bne.n	8018116 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018110:	f06f 0305 	mvn.w	r3, #5
 8018114:	e04c      	b.n	80181b0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801811a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801811c:	68b8      	ldr	r0, [r7, #8]
 801811e:	f7ff fe2b 	bl	8017d78 <tcp_output_segment_busy>
 8018122:	4603      	mov	r3, r0
 8018124:	2b00      	cmp	r3, #0
 8018126:	d002      	beq.n	801812e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018128:	f06f 0305 	mvn.w	r3, #5
 801812c:	e040      	b.n	80181b0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801812e:	68bb      	ldr	r3, [r7, #8]
 8018130:	681a      	ldr	r2, [r3, #0]
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	336c      	adds	r3, #108	@ 0x6c
 801813a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801813c:	e002      	b.n	8018144 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d011      	beq.n	8018170 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	68db      	ldr	r3, [r3, #12]
 8018152:	685b      	ldr	r3, [r3, #4]
 8018154:	4618      	mov	r0, r3
 8018156:	f7f8 fd3f 	bl	8010bd8 <lwip_htonl>
 801815a:	4604      	mov	r4, r0
 801815c:	68bb      	ldr	r3, [r7, #8]
 801815e:	68db      	ldr	r3, [r3, #12]
 8018160:	685b      	ldr	r3, [r3, #4]
 8018162:	4618      	mov	r0, r3
 8018164:	f7f8 fd38 	bl	8010bd8 <lwip_htonl>
 8018168:	4603      	mov	r3, r0
 801816a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801816c:	2b00      	cmp	r3, #0
 801816e:	dbe6      	blt.n	801813e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018170:	68fb      	ldr	r3, [r7, #12]
 8018172:	681a      	ldr	r2, [r3, #0]
 8018174:	68bb      	ldr	r3, [r7, #8]
 8018176:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018178:	68fb      	ldr	r3, [r7, #12]
 801817a:	68ba      	ldr	r2, [r7, #8]
 801817c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801817e:	68bb      	ldr	r3, [r7, #8]
 8018180:	681b      	ldr	r3, [r3, #0]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d103      	bne.n	801818e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	2200      	movs	r2, #0
 801818a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018194:	2bff      	cmp	r3, #255	@ 0xff
 8018196:	d007      	beq.n	80181a8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801819e:	3301      	adds	r3, #1
 80181a0:	b2da      	uxtb	r2, r3
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	2200      	movs	r2, #0
 80181ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80181ae:	2300      	movs	r3, #0
}
 80181b0:	4618      	mov	r0, r3
 80181b2:	3714      	adds	r7, #20
 80181b4:	46bd      	mov	sp, r7
 80181b6:	bd90      	pop	{r4, r7, pc}
 80181b8:	08020960 	.word	0x08020960
 80181bc:	08021000 	.word	0x08021000
 80181c0:	080209b4 	.word	0x080209b4

080181c4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80181c4:	b580      	push	{r7, lr}
 80181c6:	b082      	sub	sp, #8
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d106      	bne.n	80181e0 <tcp_rexmit_fast+0x1c>
 80181d2:	4b2a      	ldr	r3, [pc, #168]	@ (801827c <tcp_rexmit_fast+0xb8>)
 80181d4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80181d8:	4929      	ldr	r1, [pc, #164]	@ (8018280 <tcp_rexmit_fast+0xbc>)
 80181da:	482a      	ldr	r0, [pc, #168]	@ (8018284 <tcp_rexmit_fast+0xc0>)
 80181dc:	f004 f95e 	bl	801c49c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d044      	beq.n	8018272 <tcp_rexmit_fast+0xae>
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	8b5b      	ldrh	r3, [r3, #26]
 80181ec:	f003 0304 	and.w	r3, r3, #4
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d13e      	bne.n	8018272 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80181f4:	6878      	ldr	r0, [r7, #4]
 80181f6:	f7ff ff79 	bl	80180ec <tcp_rexmit>
 80181fa:	4603      	mov	r3, r0
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d138      	bne.n	8018272 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801820c:	4293      	cmp	r3, r2
 801820e:	bf28      	it	cs
 8018210:	4613      	movcs	r3, r2
 8018212:	b29b      	uxth	r3, r3
 8018214:	0fda      	lsrs	r2, r3, #31
 8018216:	4413      	add	r3, r2
 8018218:	105b      	asrs	r3, r3, #1
 801821a:	b29a      	uxth	r2, r3
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8018228:	461a      	mov	r2, r3
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801822e:	005b      	lsls	r3, r3, #1
 8018230:	429a      	cmp	r2, r3
 8018232:	d206      	bcs.n	8018242 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018238:	005b      	lsls	r3, r3, #1
 801823a:	b29a      	uxth	r2, r3
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801824c:	4619      	mov	r1, r3
 801824e:	0049      	lsls	r1, r1, #1
 8018250:	440b      	add	r3, r1
 8018252:	b29b      	uxth	r3, r3
 8018254:	4413      	add	r3, r2
 8018256:	b29a      	uxth	r2, r3
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	8b5b      	ldrh	r3, [r3, #26]
 8018262:	f043 0304 	orr.w	r3, r3, #4
 8018266:	b29a      	uxth	r2, r3
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	2200      	movs	r2, #0
 8018270:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8018272:	bf00      	nop
 8018274:	3708      	adds	r7, #8
 8018276:	46bd      	mov	sp, r7
 8018278:	bd80      	pop	{r7, pc}
 801827a:	bf00      	nop
 801827c:	08020960 	.word	0x08020960
 8018280:	08021018 	.word	0x08021018
 8018284:	080209b4 	.word	0x080209b4

08018288 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8018288:	b580      	push	{r7, lr}
 801828a:	b086      	sub	sp, #24
 801828c:	af00      	add	r7, sp, #0
 801828e:	60f8      	str	r0, [r7, #12]
 8018290:	607b      	str	r3, [r7, #4]
 8018292:	460b      	mov	r3, r1
 8018294:	817b      	strh	r3, [r7, #10]
 8018296:	4613      	mov	r3, r2
 8018298:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801829a:	897a      	ldrh	r2, [r7, #10]
 801829c:	893b      	ldrh	r3, [r7, #8]
 801829e:	4413      	add	r3, r2
 80182a0:	b29b      	uxth	r3, r3
 80182a2:	3314      	adds	r3, #20
 80182a4:	b29b      	uxth	r3, r3
 80182a6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80182aa:	4619      	mov	r1, r3
 80182ac:	2022      	movs	r0, #34	@ 0x22
 80182ae:	f7f9 fd59 	bl	8011d64 <pbuf_alloc>
 80182b2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80182b4:	697b      	ldr	r3, [r7, #20]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d04d      	beq.n	8018356 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80182ba:	897b      	ldrh	r3, [r7, #10]
 80182bc:	3313      	adds	r3, #19
 80182be:	697a      	ldr	r2, [r7, #20]
 80182c0:	8952      	ldrh	r2, [r2, #10]
 80182c2:	4293      	cmp	r3, r2
 80182c4:	db06      	blt.n	80182d4 <tcp_output_alloc_header_common+0x4c>
 80182c6:	4b26      	ldr	r3, [pc, #152]	@ (8018360 <tcp_output_alloc_header_common+0xd8>)
 80182c8:	f240 7223 	movw	r2, #1827	@ 0x723
 80182cc:	4925      	ldr	r1, [pc, #148]	@ (8018364 <tcp_output_alloc_header_common+0xdc>)
 80182ce:	4826      	ldr	r0, [pc, #152]	@ (8018368 <tcp_output_alloc_header_common+0xe0>)
 80182d0:	f004 f8e4 	bl	801c49c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80182d4:	697b      	ldr	r3, [r7, #20]
 80182d6:	685b      	ldr	r3, [r3, #4]
 80182d8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80182da:	8c3b      	ldrh	r3, [r7, #32]
 80182dc:	4618      	mov	r0, r3
 80182de:	f7f8 fc65 	bl	8010bac <lwip_htons>
 80182e2:	4603      	mov	r3, r0
 80182e4:	461a      	mov	r2, r3
 80182e6:	693b      	ldr	r3, [r7, #16]
 80182e8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80182ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80182ec:	4618      	mov	r0, r3
 80182ee:	f7f8 fc5d 	bl	8010bac <lwip_htons>
 80182f2:	4603      	mov	r3, r0
 80182f4:	461a      	mov	r2, r3
 80182f6:	693b      	ldr	r3, [r7, #16]
 80182f8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80182fa:	693b      	ldr	r3, [r7, #16]
 80182fc:	687a      	ldr	r2, [r7, #4]
 80182fe:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018300:	68f8      	ldr	r0, [r7, #12]
 8018302:	f7f8 fc69 	bl	8010bd8 <lwip_htonl>
 8018306:	4602      	mov	r2, r0
 8018308:	693b      	ldr	r3, [r7, #16]
 801830a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801830c:	897b      	ldrh	r3, [r7, #10]
 801830e:	089b      	lsrs	r3, r3, #2
 8018310:	b29b      	uxth	r3, r3
 8018312:	3305      	adds	r3, #5
 8018314:	b29b      	uxth	r3, r3
 8018316:	031b      	lsls	r3, r3, #12
 8018318:	b29a      	uxth	r2, r3
 801831a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801831e:	b29b      	uxth	r3, r3
 8018320:	4313      	orrs	r3, r2
 8018322:	b29b      	uxth	r3, r3
 8018324:	4618      	mov	r0, r3
 8018326:	f7f8 fc41 	bl	8010bac <lwip_htons>
 801832a:	4603      	mov	r3, r0
 801832c:	461a      	mov	r2, r3
 801832e:	693b      	ldr	r3, [r7, #16]
 8018330:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8018332:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8018334:	4618      	mov	r0, r3
 8018336:	f7f8 fc39 	bl	8010bac <lwip_htons>
 801833a:	4603      	mov	r3, r0
 801833c:	461a      	mov	r2, r3
 801833e:	693b      	ldr	r3, [r7, #16]
 8018340:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018342:	693b      	ldr	r3, [r7, #16]
 8018344:	2200      	movs	r2, #0
 8018346:	741a      	strb	r2, [r3, #16]
 8018348:	2200      	movs	r2, #0
 801834a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801834c:	693b      	ldr	r3, [r7, #16]
 801834e:	2200      	movs	r2, #0
 8018350:	749a      	strb	r2, [r3, #18]
 8018352:	2200      	movs	r2, #0
 8018354:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8018356:	697b      	ldr	r3, [r7, #20]
}
 8018358:	4618      	mov	r0, r3
 801835a:	3718      	adds	r7, #24
 801835c:	46bd      	mov	sp, r7
 801835e:	bd80      	pop	{r7, pc}
 8018360:	08020960 	.word	0x08020960
 8018364:	08021038 	.word	0x08021038
 8018368:	080209b4 	.word	0x080209b4

0801836c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801836c:	b5b0      	push	{r4, r5, r7, lr}
 801836e:	b08a      	sub	sp, #40	@ 0x28
 8018370:	af04      	add	r7, sp, #16
 8018372:	60f8      	str	r0, [r7, #12]
 8018374:	607b      	str	r3, [r7, #4]
 8018376:	460b      	mov	r3, r1
 8018378:	817b      	strh	r3, [r7, #10]
 801837a:	4613      	mov	r3, r2
 801837c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801837e:	68fb      	ldr	r3, [r7, #12]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d106      	bne.n	8018392 <tcp_output_alloc_header+0x26>
 8018384:	4b15      	ldr	r3, [pc, #84]	@ (80183dc <tcp_output_alloc_header+0x70>)
 8018386:	f240 7242 	movw	r2, #1858	@ 0x742
 801838a:	4915      	ldr	r1, [pc, #84]	@ (80183e0 <tcp_output_alloc_header+0x74>)
 801838c:	4815      	ldr	r0, [pc, #84]	@ (80183e4 <tcp_output_alloc_header+0x78>)
 801838e:	f004 f885 	bl	801c49c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	8adb      	ldrh	r3, [r3, #22]
 801839a:	68fa      	ldr	r2, [r7, #12]
 801839c:	8b12      	ldrh	r2, [r2, #24]
 801839e:	68f9      	ldr	r1, [r7, #12]
 80183a0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80183a2:	893d      	ldrh	r5, [r7, #8]
 80183a4:	897c      	ldrh	r4, [r7, #10]
 80183a6:	9103      	str	r1, [sp, #12]
 80183a8:	2110      	movs	r1, #16
 80183aa:	9102      	str	r1, [sp, #8]
 80183ac:	9201      	str	r2, [sp, #4]
 80183ae:	9300      	str	r3, [sp, #0]
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	462a      	mov	r2, r5
 80183b4:	4621      	mov	r1, r4
 80183b6:	f7ff ff67 	bl	8018288 <tcp_output_alloc_header_common>
 80183ba:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80183bc:	697b      	ldr	r3, [r7, #20]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d006      	beq.n	80183d0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80183c2:	68fb      	ldr	r3, [r7, #12]
 80183c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80183c6:	68fa      	ldr	r2, [r7, #12]
 80183c8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80183ca:	441a      	add	r2, r3
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80183d0:	697b      	ldr	r3, [r7, #20]
}
 80183d2:	4618      	mov	r0, r3
 80183d4:	3718      	adds	r7, #24
 80183d6:	46bd      	mov	sp, r7
 80183d8:	bdb0      	pop	{r4, r5, r7, pc}
 80183da:	bf00      	nop
 80183dc:	08020960 	.word	0x08020960
 80183e0:	08021068 	.word	0x08021068
 80183e4:	080209b4 	.word	0x080209b4

080183e8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80183e8:	b580      	push	{r7, lr}
 80183ea:	b088      	sub	sp, #32
 80183ec:	af00      	add	r7, sp, #0
 80183ee:	60f8      	str	r0, [r7, #12]
 80183f0:	60b9      	str	r1, [r7, #8]
 80183f2:	4611      	mov	r1, r2
 80183f4:	461a      	mov	r2, r3
 80183f6:	460b      	mov	r3, r1
 80183f8:	71fb      	strb	r3, [r7, #7]
 80183fa:	4613      	mov	r3, r2
 80183fc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80183fe:	2300      	movs	r3, #0
 8018400:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8018402:	68bb      	ldr	r3, [r7, #8]
 8018404:	2b00      	cmp	r3, #0
 8018406:	d106      	bne.n	8018416 <tcp_output_fill_options+0x2e>
 8018408:	4b12      	ldr	r3, [pc, #72]	@ (8018454 <tcp_output_fill_options+0x6c>)
 801840a:	f240 7256 	movw	r2, #1878	@ 0x756
 801840e:	4912      	ldr	r1, [pc, #72]	@ (8018458 <tcp_output_fill_options+0x70>)
 8018410:	4812      	ldr	r0, [pc, #72]	@ (801845c <tcp_output_fill_options+0x74>)
 8018412:	f004 f843 	bl	801c49c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8018416:	68bb      	ldr	r3, [r7, #8]
 8018418:	685b      	ldr	r3, [r3, #4]
 801841a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801841c:	69bb      	ldr	r3, [r7, #24]
 801841e:	3314      	adds	r3, #20
 8018420:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8018422:	8bfb      	ldrh	r3, [r7, #30]
 8018424:	009b      	lsls	r3, r3, #2
 8018426:	461a      	mov	r2, r3
 8018428:	79fb      	ldrb	r3, [r7, #7]
 801842a:	009b      	lsls	r3, r3, #2
 801842c:	f003 0304 	and.w	r3, r3, #4
 8018430:	4413      	add	r3, r2
 8018432:	3314      	adds	r3, #20
 8018434:	69ba      	ldr	r2, [r7, #24]
 8018436:	4413      	add	r3, r2
 8018438:	697a      	ldr	r2, [r7, #20]
 801843a:	429a      	cmp	r2, r3
 801843c:	d006      	beq.n	801844c <tcp_output_fill_options+0x64>
 801843e:	4b05      	ldr	r3, [pc, #20]	@ (8018454 <tcp_output_fill_options+0x6c>)
 8018440:	f240 7275 	movw	r2, #1909	@ 0x775
 8018444:	4906      	ldr	r1, [pc, #24]	@ (8018460 <tcp_output_fill_options+0x78>)
 8018446:	4805      	ldr	r0, [pc, #20]	@ (801845c <tcp_output_fill_options+0x74>)
 8018448:	f004 f828 	bl	801c49c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801844c:	bf00      	nop
 801844e:	3720      	adds	r7, #32
 8018450:	46bd      	mov	sp, r7
 8018452:	bd80      	pop	{r7, pc}
 8018454:	08020960 	.word	0x08020960
 8018458:	08021090 	.word	0x08021090
 801845c:	080209b4 	.word	0x080209b4
 8018460:	08020f88 	.word	0x08020f88

08018464 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8018464:	b580      	push	{r7, lr}
 8018466:	b08a      	sub	sp, #40	@ 0x28
 8018468:	af04      	add	r7, sp, #16
 801846a:	60f8      	str	r0, [r7, #12]
 801846c:	60b9      	str	r1, [r7, #8]
 801846e:	607a      	str	r2, [r7, #4]
 8018470:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8018472:	68bb      	ldr	r3, [r7, #8]
 8018474:	2b00      	cmp	r3, #0
 8018476:	d106      	bne.n	8018486 <tcp_output_control_segment+0x22>
 8018478:	4b1c      	ldr	r3, [pc, #112]	@ (80184ec <tcp_output_control_segment+0x88>)
 801847a:	f240 7287 	movw	r2, #1927	@ 0x787
 801847e:	491c      	ldr	r1, [pc, #112]	@ (80184f0 <tcp_output_control_segment+0x8c>)
 8018480:	481c      	ldr	r0, [pc, #112]	@ (80184f4 <tcp_output_control_segment+0x90>)
 8018482:	f004 f80b 	bl	801c49c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8018486:	683a      	ldr	r2, [r7, #0]
 8018488:	6879      	ldr	r1, [r7, #4]
 801848a:	68f8      	ldr	r0, [r7, #12]
 801848c:	f7fe faea 	bl	8016a64 <tcp_route>
 8018490:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8018492:	693b      	ldr	r3, [r7, #16]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d102      	bne.n	801849e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8018498:	23fc      	movs	r3, #252	@ 0xfc
 801849a:	75fb      	strb	r3, [r7, #23]
 801849c:	e01c      	b.n	80184d8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d006      	beq.n	80184b2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	7adb      	ldrb	r3, [r3, #11]
 80184a8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	7a9b      	ldrb	r3, [r3, #10]
 80184ae:	757b      	strb	r3, [r7, #21]
 80184b0:	e003      	b.n	80184ba <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80184b2:	23ff      	movs	r3, #255	@ 0xff
 80184b4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80184b6:	2300      	movs	r3, #0
 80184b8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80184ba:	7dba      	ldrb	r2, [r7, #22]
 80184bc:	693b      	ldr	r3, [r7, #16]
 80184be:	9302      	str	r3, [sp, #8]
 80184c0:	2306      	movs	r3, #6
 80184c2:	9301      	str	r3, [sp, #4]
 80184c4:	7d7b      	ldrb	r3, [r7, #21]
 80184c6:	9300      	str	r3, [sp, #0]
 80184c8:	4613      	mov	r3, r2
 80184ca:	683a      	ldr	r2, [r7, #0]
 80184cc:	6879      	ldr	r1, [r7, #4]
 80184ce:	68b8      	ldr	r0, [r7, #8]
 80184d0:	f001 ff6e 	bl	801a3b0 <ip4_output_if>
 80184d4:	4603      	mov	r3, r0
 80184d6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80184d8:	68b8      	ldr	r0, [r7, #8]
 80184da:	f7f9 ff27 	bl	801232c <pbuf_free>
  return err;
 80184de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80184e2:	4618      	mov	r0, r3
 80184e4:	3718      	adds	r7, #24
 80184e6:	46bd      	mov	sp, r7
 80184e8:	bd80      	pop	{r7, pc}
 80184ea:	bf00      	nop
 80184ec:	08020960 	.word	0x08020960
 80184f0:	080210b8 	.word	0x080210b8
 80184f4:	080209b4 	.word	0x080209b4

080184f8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80184f8:	b590      	push	{r4, r7, lr}
 80184fa:	b08b      	sub	sp, #44	@ 0x2c
 80184fc:	af04      	add	r7, sp, #16
 80184fe:	60f8      	str	r0, [r7, #12]
 8018500:	60b9      	str	r1, [r7, #8]
 8018502:	607a      	str	r2, [r7, #4]
 8018504:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8018506:	683b      	ldr	r3, [r7, #0]
 8018508:	2b00      	cmp	r3, #0
 801850a:	d106      	bne.n	801851a <tcp_rst+0x22>
 801850c:	4b1f      	ldr	r3, [pc, #124]	@ (801858c <tcp_rst+0x94>)
 801850e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8018512:	491f      	ldr	r1, [pc, #124]	@ (8018590 <tcp_rst+0x98>)
 8018514:	481f      	ldr	r0, [pc, #124]	@ (8018594 <tcp_rst+0x9c>)
 8018516:	f003 ffc1 	bl	801c49c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801851a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801851c:	2b00      	cmp	r3, #0
 801851e:	d106      	bne.n	801852e <tcp_rst+0x36>
 8018520:	4b1a      	ldr	r3, [pc, #104]	@ (801858c <tcp_rst+0x94>)
 8018522:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8018526:	491c      	ldr	r1, [pc, #112]	@ (8018598 <tcp_rst+0xa0>)
 8018528:	481a      	ldr	r0, [pc, #104]	@ (8018594 <tcp_rst+0x9c>)
 801852a:	f003 ffb7 	bl	801c49c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801852e:	2300      	movs	r3, #0
 8018530:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8018532:	f246 0308 	movw	r3, #24584	@ 0x6008
 8018536:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8018538:	7dfb      	ldrb	r3, [r7, #23]
 801853a:	b29c      	uxth	r4, r3
 801853c:	68b8      	ldr	r0, [r7, #8]
 801853e:	f7f8 fb4b 	bl	8010bd8 <lwip_htonl>
 8018542:	4602      	mov	r2, r0
 8018544:	8abb      	ldrh	r3, [r7, #20]
 8018546:	9303      	str	r3, [sp, #12]
 8018548:	2314      	movs	r3, #20
 801854a:	9302      	str	r3, [sp, #8]
 801854c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801854e:	9301      	str	r3, [sp, #4]
 8018550:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8018552:	9300      	str	r3, [sp, #0]
 8018554:	4613      	mov	r3, r2
 8018556:	2200      	movs	r2, #0
 8018558:	4621      	mov	r1, r4
 801855a:	6878      	ldr	r0, [r7, #4]
 801855c:	f7ff fe94 	bl	8018288 <tcp_output_alloc_header_common>
 8018560:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8018562:	693b      	ldr	r3, [r7, #16]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d00c      	beq.n	8018582 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018568:	7dfb      	ldrb	r3, [r7, #23]
 801856a:	2200      	movs	r2, #0
 801856c:	6939      	ldr	r1, [r7, #16]
 801856e:	68f8      	ldr	r0, [r7, #12]
 8018570:	f7ff ff3a 	bl	80183e8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8018574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018576:	683a      	ldr	r2, [r7, #0]
 8018578:	6939      	ldr	r1, [r7, #16]
 801857a:	68f8      	ldr	r0, [r7, #12]
 801857c:	f7ff ff72 	bl	8018464 <tcp_output_control_segment>
 8018580:	e000      	b.n	8018584 <tcp_rst+0x8c>
    return;
 8018582:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8018584:	371c      	adds	r7, #28
 8018586:	46bd      	mov	sp, r7
 8018588:	bd90      	pop	{r4, r7, pc}
 801858a:	bf00      	nop
 801858c:	08020960 	.word	0x08020960
 8018590:	080210e4 	.word	0x080210e4
 8018594:	080209b4 	.word	0x080209b4
 8018598:	08021100 	.word	0x08021100

0801859c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801859c:	b590      	push	{r4, r7, lr}
 801859e:	b087      	sub	sp, #28
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80185a4:	2300      	movs	r3, #0
 80185a6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80185a8:	2300      	movs	r3, #0
 80185aa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d106      	bne.n	80185c0 <tcp_send_empty_ack+0x24>
 80185b2:	4b28      	ldr	r3, [pc, #160]	@ (8018654 <tcp_send_empty_ack+0xb8>)
 80185b4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80185b8:	4927      	ldr	r1, [pc, #156]	@ (8018658 <tcp_send_empty_ack+0xbc>)
 80185ba:	4828      	ldr	r0, [pc, #160]	@ (801865c <tcp_send_empty_ack+0xc0>)
 80185bc:	f003 ff6e 	bl	801c49c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80185c0:	7dfb      	ldrb	r3, [r7, #23]
 80185c2:	009b      	lsls	r3, r3, #2
 80185c4:	b2db      	uxtb	r3, r3
 80185c6:	f003 0304 	and.w	r3, r3, #4
 80185ca:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80185cc:	7d7b      	ldrb	r3, [r7, #21]
 80185ce:	b29c      	uxth	r4, r3
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80185d4:	4618      	mov	r0, r3
 80185d6:	f7f8 faff 	bl	8010bd8 <lwip_htonl>
 80185da:	4603      	mov	r3, r0
 80185dc:	2200      	movs	r2, #0
 80185de:	4621      	mov	r1, r4
 80185e0:	6878      	ldr	r0, [r7, #4]
 80185e2:	f7ff fec3 	bl	801836c <tcp_output_alloc_header>
 80185e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80185e8:	693b      	ldr	r3, [r7, #16]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d109      	bne.n	8018602 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	8b5b      	ldrh	r3, [r3, #26]
 80185f2:	f043 0303 	orr.w	r3, r3, #3
 80185f6:	b29a      	uxth	r2, r3
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80185fc:	f06f 0301 	mvn.w	r3, #1
 8018600:	e023      	b.n	801864a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8018602:	7dbb      	ldrb	r3, [r7, #22]
 8018604:	7dfa      	ldrb	r2, [r7, #23]
 8018606:	6939      	ldr	r1, [r7, #16]
 8018608:	6878      	ldr	r0, [r7, #4]
 801860a:	f7ff feed 	bl	80183e8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801860e:	687a      	ldr	r2, [r7, #4]
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	3304      	adds	r3, #4
 8018614:	6939      	ldr	r1, [r7, #16]
 8018616:	6878      	ldr	r0, [r7, #4]
 8018618:	f7ff ff24 	bl	8018464 <tcp_output_control_segment>
 801861c:	4603      	mov	r3, r0
 801861e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8018620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018624:	2b00      	cmp	r3, #0
 8018626:	d007      	beq.n	8018638 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	8b5b      	ldrh	r3, [r3, #26]
 801862c:	f043 0303 	orr.w	r3, r3, #3
 8018630:	b29a      	uxth	r2, r3
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	835a      	strh	r2, [r3, #26]
 8018636:	e006      	b.n	8018646 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	8b5b      	ldrh	r3, [r3, #26]
 801863c:	f023 0303 	bic.w	r3, r3, #3
 8018640:	b29a      	uxth	r2, r3
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8018646:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801864a:	4618      	mov	r0, r3
 801864c:	371c      	adds	r7, #28
 801864e:	46bd      	mov	sp, r7
 8018650:	bd90      	pop	{r4, r7, pc}
 8018652:	bf00      	nop
 8018654:	08020960 	.word	0x08020960
 8018658:	0802111c 	.word	0x0802111c
 801865c:	080209b4 	.word	0x080209b4

08018660 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8018660:	b590      	push	{r4, r7, lr}
 8018662:	b087      	sub	sp, #28
 8018664:	af00      	add	r7, sp, #0
 8018666:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018668:	2300      	movs	r3, #0
 801866a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	2b00      	cmp	r3, #0
 8018670:	d106      	bne.n	8018680 <tcp_keepalive+0x20>
 8018672:	4b18      	ldr	r3, [pc, #96]	@ (80186d4 <tcp_keepalive+0x74>)
 8018674:	f640 0224 	movw	r2, #2084	@ 0x824
 8018678:	4917      	ldr	r1, [pc, #92]	@ (80186d8 <tcp_keepalive+0x78>)
 801867a:	4818      	ldr	r0, [pc, #96]	@ (80186dc <tcp_keepalive+0x7c>)
 801867c:	f003 ff0e 	bl	801c49c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8018680:	7dfb      	ldrb	r3, [r7, #23]
 8018682:	b29c      	uxth	r4, r3
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018688:	3b01      	subs	r3, #1
 801868a:	4618      	mov	r0, r3
 801868c:	f7f8 faa4 	bl	8010bd8 <lwip_htonl>
 8018690:	4603      	mov	r3, r0
 8018692:	2200      	movs	r2, #0
 8018694:	4621      	mov	r1, r4
 8018696:	6878      	ldr	r0, [r7, #4]
 8018698:	f7ff fe68 	bl	801836c <tcp_output_alloc_header>
 801869c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801869e:	693b      	ldr	r3, [r7, #16]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d102      	bne.n	80186aa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80186a4:	f04f 33ff 	mov.w	r3, #4294967295
 80186a8:	e010      	b.n	80186cc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80186aa:	7dfb      	ldrb	r3, [r7, #23]
 80186ac:	2200      	movs	r2, #0
 80186ae:	6939      	ldr	r1, [r7, #16]
 80186b0:	6878      	ldr	r0, [r7, #4]
 80186b2:	f7ff fe99 	bl	80183e8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80186b6:	687a      	ldr	r2, [r7, #4]
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	3304      	adds	r3, #4
 80186bc:	6939      	ldr	r1, [r7, #16]
 80186be:	6878      	ldr	r0, [r7, #4]
 80186c0:	f7ff fed0 	bl	8018464 <tcp_output_control_segment>
 80186c4:	4603      	mov	r3, r0
 80186c6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80186c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80186cc:	4618      	mov	r0, r3
 80186ce:	371c      	adds	r7, #28
 80186d0:	46bd      	mov	sp, r7
 80186d2:	bd90      	pop	{r4, r7, pc}
 80186d4:	08020960 	.word	0x08020960
 80186d8:	0802113c 	.word	0x0802113c
 80186dc:	080209b4 	.word	0x080209b4

080186e0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80186e0:	b590      	push	{r4, r7, lr}
 80186e2:	b08b      	sub	sp, #44	@ 0x2c
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80186e8:	2300      	movs	r3, #0
 80186ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d106      	bne.n	8018702 <tcp_zero_window_probe+0x22>
 80186f4:	4b4c      	ldr	r3, [pc, #304]	@ (8018828 <tcp_zero_window_probe+0x148>)
 80186f6:	f640 024f 	movw	r2, #2127	@ 0x84f
 80186fa:	494c      	ldr	r1, [pc, #304]	@ (801882c <tcp_zero_window_probe+0x14c>)
 80186fc:	484c      	ldr	r0, [pc, #304]	@ (8018830 <tcp_zero_window_probe+0x150>)
 80186fe:	f003 fecd 	bl	801c49c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018706:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8018708:	6a3b      	ldr	r3, [r7, #32]
 801870a:	2b00      	cmp	r3, #0
 801870c:	d101      	bne.n	8018712 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801870e:	2300      	movs	r3, #0
 8018710:	e086      	b.n	8018820 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8018718:	2bff      	cmp	r3, #255	@ 0xff
 801871a:	d007      	beq.n	801872c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8018722:	3301      	adds	r3, #1
 8018724:	b2da      	uxtb	r2, r3
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801872c:	6a3b      	ldr	r3, [r7, #32]
 801872e:	68db      	ldr	r3, [r3, #12]
 8018730:	899b      	ldrh	r3, [r3, #12]
 8018732:	b29b      	uxth	r3, r3
 8018734:	4618      	mov	r0, r3
 8018736:	f7f8 fa39 	bl	8010bac <lwip_htons>
 801873a:	4603      	mov	r3, r0
 801873c:	b2db      	uxtb	r3, r3
 801873e:	f003 0301 	and.w	r3, r3, #1
 8018742:	2b00      	cmp	r3, #0
 8018744:	d005      	beq.n	8018752 <tcp_zero_window_probe+0x72>
 8018746:	6a3b      	ldr	r3, [r7, #32]
 8018748:	891b      	ldrh	r3, [r3, #8]
 801874a:	2b00      	cmp	r3, #0
 801874c:	d101      	bne.n	8018752 <tcp_zero_window_probe+0x72>
 801874e:	2301      	movs	r3, #1
 8018750:	e000      	b.n	8018754 <tcp_zero_window_probe+0x74>
 8018752:	2300      	movs	r3, #0
 8018754:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8018756:	7ffb      	ldrb	r3, [r7, #31]
 8018758:	2b00      	cmp	r3, #0
 801875a:	bf0c      	ite	eq
 801875c:	2301      	moveq	r3, #1
 801875e:	2300      	movne	r3, #0
 8018760:	b2db      	uxtb	r3, r3
 8018762:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8018764:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018768:	b299      	uxth	r1, r3
 801876a:	6a3b      	ldr	r3, [r7, #32]
 801876c:	68db      	ldr	r3, [r3, #12]
 801876e:	685b      	ldr	r3, [r3, #4]
 8018770:	8bba      	ldrh	r2, [r7, #28]
 8018772:	6878      	ldr	r0, [r7, #4]
 8018774:	f7ff fdfa 	bl	801836c <tcp_output_alloc_header>
 8018778:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801877a:	69bb      	ldr	r3, [r7, #24]
 801877c:	2b00      	cmp	r3, #0
 801877e:	d102      	bne.n	8018786 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8018780:	f04f 33ff 	mov.w	r3, #4294967295
 8018784:	e04c      	b.n	8018820 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8018786:	69bb      	ldr	r3, [r7, #24]
 8018788:	685b      	ldr	r3, [r3, #4]
 801878a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801878c:	7ffb      	ldrb	r3, [r7, #31]
 801878e:	2b00      	cmp	r3, #0
 8018790:	d011      	beq.n	80187b6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8018792:	697b      	ldr	r3, [r7, #20]
 8018794:	899b      	ldrh	r3, [r3, #12]
 8018796:	b29b      	uxth	r3, r3
 8018798:	b21b      	sxth	r3, r3
 801879a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801879e:	b21c      	sxth	r4, r3
 80187a0:	2011      	movs	r0, #17
 80187a2:	f7f8 fa03 	bl	8010bac <lwip_htons>
 80187a6:	4603      	mov	r3, r0
 80187a8:	b21b      	sxth	r3, r3
 80187aa:	4323      	orrs	r3, r4
 80187ac:	b21b      	sxth	r3, r3
 80187ae:	b29a      	uxth	r2, r3
 80187b0:	697b      	ldr	r3, [r7, #20]
 80187b2:	819a      	strh	r2, [r3, #12]
 80187b4:	e010      	b.n	80187d8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80187b6:	69bb      	ldr	r3, [r7, #24]
 80187b8:	685b      	ldr	r3, [r3, #4]
 80187ba:	3314      	adds	r3, #20
 80187bc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80187be:	6a3b      	ldr	r3, [r7, #32]
 80187c0:	6858      	ldr	r0, [r3, #4]
 80187c2:	6a3b      	ldr	r3, [r7, #32]
 80187c4:	685b      	ldr	r3, [r3, #4]
 80187c6:	891a      	ldrh	r2, [r3, #8]
 80187c8:	6a3b      	ldr	r3, [r7, #32]
 80187ca:	891b      	ldrh	r3, [r3, #8]
 80187cc:	1ad3      	subs	r3, r2, r3
 80187ce:	b29b      	uxth	r3, r3
 80187d0:	2201      	movs	r2, #1
 80187d2:	6939      	ldr	r1, [r7, #16]
 80187d4:	f7f9 ffa0 	bl	8012718 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80187d8:	6a3b      	ldr	r3, [r7, #32]
 80187da:	68db      	ldr	r3, [r3, #12]
 80187dc:	685b      	ldr	r3, [r3, #4]
 80187de:	4618      	mov	r0, r3
 80187e0:	f7f8 f9fa 	bl	8010bd8 <lwip_htonl>
 80187e4:	4603      	mov	r3, r0
 80187e6:	3301      	adds	r3, #1
 80187e8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80187ee:	68fb      	ldr	r3, [r7, #12]
 80187f0:	1ad3      	subs	r3, r2, r3
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	da02      	bge.n	80187fc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	68fa      	ldr	r2, [r7, #12]
 80187fa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80187fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018800:	2200      	movs	r2, #0
 8018802:	69b9      	ldr	r1, [r7, #24]
 8018804:	6878      	ldr	r0, [r7, #4]
 8018806:	f7ff fdef 	bl	80183e8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801880a:	687a      	ldr	r2, [r7, #4]
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	3304      	adds	r3, #4
 8018810:	69b9      	ldr	r1, [r7, #24]
 8018812:	6878      	ldr	r0, [r7, #4]
 8018814:	f7ff fe26 	bl	8018464 <tcp_output_control_segment>
 8018818:	4603      	mov	r3, r0
 801881a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801881c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8018820:	4618      	mov	r0, r3
 8018822:	372c      	adds	r7, #44	@ 0x2c
 8018824:	46bd      	mov	sp, r7
 8018826:	bd90      	pop	{r4, r7, pc}
 8018828:	08020960 	.word	0x08020960
 801882c:	08021158 	.word	0x08021158
 8018830:	080209b4 	.word	0x080209b4

08018834 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8018834:	b580      	push	{r7, lr}
 8018836:	b082      	sub	sp, #8
 8018838:	af00      	add	r7, sp, #0
 801883a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801883c:	f7fa f85a 	bl	80128f4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8018840:	4b0a      	ldr	r3, [pc, #40]	@ (801886c <tcpip_tcp_timer+0x38>)
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d103      	bne.n	8018850 <tcpip_tcp_timer+0x1c>
 8018848:	4b09      	ldr	r3, [pc, #36]	@ (8018870 <tcpip_tcp_timer+0x3c>)
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	2b00      	cmp	r3, #0
 801884e:	d005      	beq.n	801885c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018850:	2200      	movs	r2, #0
 8018852:	4908      	ldr	r1, [pc, #32]	@ (8018874 <tcpip_tcp_timer+0x40>)
 8018854:	20fa      	movs	r0, #250	@ 0xfa
 8018856:	f000 f8f3 	bl	8018a40 <sys_timeout>
 801885a:	e003      	b.n	8018864 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801885c:	4b06      	ldr	r3, [pc, #24]	@ (8018878 <tcpip_tcp_timer+0x44>)
 801885e:	2200      	movs	r2, #0
 8018860:	601a      	str	r2, [r3, #0]
  }
}
 8018862:	bf00      	nop
 8018864:	bf00      	nop
 8018866:	3708      	adds	r7, #8
 8018868:	46bd      	mov	sp, r7
 801886a:	bd80      	pop	{r7, pc}
 801886c:	2000c8d8 	.word	0x2000c8d8
 8018870:	2000c8dc 	.word	0x2000c8dc
 8018874:	08018835 	.word	0x08018835
 8018878:	2000c924 	.word	0x2000c924

0801887c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801887c:	b580      	push	{r7, lr}
 801887e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8018880:	4b0a      	ldr	r3, [pc, #40]	@ (80188ac <tcp_timer_needed+0x30>)
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	2b00      	cmp	r3, #0
 8018886:	d10f      	bne.n	80188a8 <tcp_timer_needed+0x2c>
 8018888:	4b09      	ldr	r3, [pc, #36]	@ (80188b0 <tcp_timer_needed+0x34>)
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	2b00      	cmp	r3, #0
 801888e:	d103      	bne.n	8018898 <tcp_timer_needed+0x1c>
 8018890:	4b08      	ldr	r3, [pc, #32]	@ (80188b4 <tcp_timer_needed+0x38>)
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	2b00      	cmp	r3, #0
 8018896:	d007      	beq.n	80188a8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8018898:	4b04      	ldr	r3, [pc, #16]	@ (80188ac <tcp_timer_needed+0x30>)
 801889a:	2201      	movs	r2, #1
 801889c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801889e:	2200      	movs	r2, #0
 80188a0:	4905      	ldr	r1, [pc, #20]	@ (80188b8 <tcp_timer_needed+0x3c>)
 80188a2:	20fa      	movs	r0, #250	@ 0xfa
 80188a4:	f000 f8cc 	bl	8018a40 <sys_timeout>
  }
}
 80188a8:	bf00      	nop
 80188aa:	bd80      	pop	{r7, pc}
 80188ac:	2000c924 	.word	0x2000c924
 80188b0:	2000c8d8 	.word	0x2000c8d8
 80188b4:	2000c8dc 	.word	0x2000c8dc
 80188b8:	08018835 	.word	0x08018835

080188bc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80188bc:	b580      	push	{r7, lr}
 80188be:	b086      	sub	sp, #24
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	60f8      	str	r0, [r7, #12]
 80188c4:	60b9      	str	r1, [r7, #8]
 80188c6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80188c8:	200a      	movs	r0, #10
 80188ca:	f7f8 fe47 	bl	801155c <memp_malloc>
 80188ce:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80188d0:	693b      	ldr	r3, [r7, #16]
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d109      	bne.n	80188ea <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80188d6:	693b      	ldr	r3, [r7, #16]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d151      	bne.n	8018980 <sys_timeout_abs+0xc4>
 80188dc:	4b2a      	ldr	r3, [pc, #168]	@ (8018988 <sys_timeout_abs+0xcc>)
 80188de:	22be      	movs	r2, #190	@ 0xbe
 80188e0:	492a      	ldr	r1, [pc, #168]	@ (801898c <sys_timeout_abs+0xd0>)
 80188e2:	482b      	ldr	r0, [pc, #172]	@ (8018990 <sys_timeout_abs+0xd4>)
 80188e4:	f003 fdda 	bl	801c49c <iprintf>
    return;
 80188e8:	e04a      	b.n	8018980 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80188ea:	693b      	ldr	r3, [r7, #16]
 80188ec:	2200      	movs	r2, #0
 80188ee:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80188f0:	693b      	ldr	r3, [r7, #16]
 80188f2:	68ba      	ldr	r2, [r7, #8]
 80188f4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80188f6:	693b      	ldr	r3, [r7, #16]
 80188f8:	687a      	ldr	r2, [r7, #4]
 80188fa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80188fc:	693b      	ldr	r3, [r7, #16]
 80188fe:	68fa      	ldr	r2, [r7, #12]
 8018900:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8018902:	4b24      	ldr	r3, [pc, #144]	@ (8018994 <sys_timeout_abs+0xd8>)
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	2b00      	cmp	r3, #0
 8018908:	d103      	bne.n	8018912 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801890a:	4a22      	ldr	r2, [pc, #136]	@ (8018994 <sys_timeout_abs+0xd8>)
 801890c:	693b      	ldr	r3, [r7, #16]
 801890e:	6013      	str	r3, [r2, #0]
    return;
 8018910:	e037      	b.n	8018982 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8018912:	693b      	ldr	r3, [r7, #16]
 8018914:	685a      	ldr	r2, [r3, #4]
 8018916:	4b1f      	ldr	r3, [pc, #124]	@ (8018994 <sys_timeout_abs+0xd8>)
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	685b      	ldr	r3, [r3, #4]
 801891c:	1ad3      	subs	r3, r2, r3
 801891e:	0fdb      	lsrs	r3, r3, #31
 8018920:	f003 0301 	and.w	r3, r3, #1
 8018924:	b2db      	uxtb	r3, r3
 8018926:	2b00      	cmp	r3, #0
 8018928:	d007      	beq.n	801893a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801892a:	4b1a      	ldr	r3, [pc, #104]	@ (8018994 <sys_timeout_abs+0xd8>)
 801892c:	681a      	ldr	r2, [r3, #0]
 801892e:	693b      	ldr	r3, [r7, #16]
 8018930:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8018932:	4a18      	ldr	r2, [pc, #96]	@ (8018994 <sys_timeout_abs+0xd8>)
 8018934:	693b      	ldr	r3, [r7, #16]
 8018936:	6013      	str	r3, [r2, #0]
 8018938:	e023      	b.n	8018982 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801893a:	4b16      	ldr	r3, [pc, #88]	@ (8018994 <sys_timeout_abs+0xd8>)
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	617b      	str	r3, [r7, #20]
 8018940:	e01a      	b.n	8018978 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8018942:	697b      	ldr	r3, [r7, #20]
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	2b00      	cmp	r3, #0
 8018948:	d00b      	beq.n	8018962 <sys_timeout_abs+0xa6>
 801894a:	693b      	ldr	r3, [r7, #16]
 801894c:	685a      	ldr	r2, [r3, #4]
 801894e:	697b      	ldr	r3, [r7, #20]
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	685b      	ldr	r3, [r3, #4]
 8018954:	1ad3      	subs	r3, r2, r3
 8018956:	0fdb      	lsrs	r3, r3, #31
 8018958:	f003 0301 	and.w	r3, r3, #1
 801895c:	b2db      	uxtb	r3, r3
 801895e:	2b00      	cmp	r3, #0
 8018960:	d007      	beq.n	8018972 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8018962:	697b      	ldr	r3, [r7, #20]
 8018964:	681a      	ldr	r2, [r3, #0]
 8018966:	693b      	ldr	r3, [r7, #16]
 8018968:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801896a:	697b      	ldr	r3, [r7, #20]
 801896c:	693a      	ldr	r2, [r7, #16]
 801896e:	601a      	str	r2, [r3, #0]
        break;
 8018970:	e007      	b.n	8018982 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8018972:	697b      	ldr	r3, [r7, #20]
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	617b      	str	r3, [r7, #20]
 8018978:	697b      	ldr	r3, [r7, #20]
 801897a:	2b00      	cmp	r3, #0
 801897c:	d1e1      	bne.n	8018942 <sys_timeout_abs+0x86>
 801897e:	e000      	b.n	8018982 <sys_timeout_abs+0xc6>
    return;
 8018980:	bf00      	nop
      }
    }
  }
}
 8018982:	3718      	adds	r7, #24
 8018984:	46bd      	mov	sp, r7
 8018986:	bd80      	pop	{r7, pc}
 8018988:	0802117c 	.word	0x0802117c
 801898c:	080211b0 	.word	0x080211b0
 8018990:	080211f0 	.word	0x080211f0
 8018994:	2000c91c 	.word	0x2000c91c

08018998 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8018998:	b580      	push	{r7, lr}
 801899a:	b086      	sub	sp, #24
 801899c:	af00      	add	r7, sp, #0
 801899e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80189a4:	697b      	ldr	r3, [r7, #20]
 80189a6:	685b      	ldr	r3, [r3, #4]
 80189a8:	4798      	blx	r3

  now = sys_now();
 80189aa:	f7f2 fccb 	bl	800b344 <sys_now>
 80189ae:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80189b0:	697b      	ldr	r3, [r7, #20]
 80189b2:	681a      	ldr	r2, [r3, #0]
 80189b4:	4b0f      	ldr	r3, [pc, #60]	@ (80189f4 <lwip_cyclic_timer+0x5c>)
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	4413      	add	r3, r2
 80189ba:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80189bc:	68fa      	ldr	r2, [r7, #12]
 80189be:	693b      	ldr	r3, [r7, #16]
 80189c0:	1ad3      	subs	r3, r2, r3
 80189c2:	0fdb      	lsrs	r3, r3, #31
 80189c4:	f003 0301 	and.w	r3, r3, #1
 80189c8:	b2db      	uxtb	r3, r3
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d009      	beq.n	80189e2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80189ce:	697b      	ldr	r3, [r7, #20]
 80189d0:	681a      	ldr	r2, [r3, #0]
 80189d2:	693b      	ldr	r3, [r7, #16]
 80189d4:	4413      	add	r3, r2
 80189d6:	687a      	ldr	r2, [r7, #4]
 80189d8:	4907      	ldr	r1, [pc, #28]	@ (80189f8 <lwip_cyclic_timer+0x60>)
 80189da:	4618      	mov	r0, r3
 80189dc:	f7ff ff6e 	bl	80188bc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80189e0:	e004      	b.n	80189ec <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80189e2:	687a      	ldr	r2, [r7, #4]
 80189e4:	4904      	ldr	r1, [pc, #16]	@ (80189f8 <lwip_cyclic_timer+0x60>)
 80189e6:	68f8      	ldr	r0, [r7, #12]
 80189e8:	f7ff ff68 	bl	80188bc <sys_timeout_abs>
}
 80189ec:	bf00      	nop
 80189ee:	3718      	adds	r7, #24
 80189f0:	46bd      	mov	sp, r7
 80189f2:	bd80      	pop	{r7, pc}
 80189f4:	2000c920 	.word	0x2000c920
 80189f8:	08018999 	.word	0x08018999

080189fc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80189fc:	b580      	push	{r7, lr}
 80189fe:	b082      	sub	sp, #8
 8018a00:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018a02:	2301      	movs	r3, #1
 8018a04:	607b      	str	r3, [r7, #4]
 8018a06:	e00e      	b.n	8018a26 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8018a08:	4a0b      	ldr	r2, [pc, #44]	@ (8018a38 <sys_timeouts_init+0x3c>)
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	00db      	lsls	r3, r3, #3
 8018a14:	4a08      	ldr	r2, [pc, #32]	@ (8018a38 <sys_timeouts_init+0x3c>)
 8018a16:	4413      	add	r3, r2
 8018a18:	461a      	mov	r2, r3
 8018a1a:	4908      	ldr	r1, [pc, #32]	@ (8018a3c <sys_timeouts_init+0x40>)
 8018a1c:	f000 f810 	bl	8018a40 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	3301      	adds	r3, #1
 8018a24:	607b      	str	r3, [r7, #4]
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	2b02      	cmp	r3, #2
 8018a2a:	d9ed      	bls.n	8018a08 <sys_timeouts_init+0xc>
  }
}
 8018a2c:	bf00      	nop
 8018a2e:	bf00      	nop
 8018a30:	3708      	adds	r7, #8
 8018a32:	46bd      	mov	sp, r7
 8018a34:	bd80      	pop	{r7, pc}
 8018a36:	bf00      	nop
 8018a38:	08021df0 	.word	0x08021df0
 8018a3c:	08018999 	.word	0x08018999

08018a40 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8018a40:	b580      	push	{r7, lr}
 8018a42:	b086      	sub	sp, #24
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	60f8      	str	r0, [r7, #12]
 8018a48:	60b9      	str	r1, [r7, #8]
 8018a4a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018a52:	d306      	bcc.n	8018a62 <sys_timeout+0x22>
 8018a54:	4b0a      	ldr	r3, [pc, #40]	@ (8018a80 <sys_timeout+0x40>)
 8018a56:	f240 1229 	movw	r2, #297	@ 0x129
 8018a5a:	490a      	ldr	r1, [pc, #40]	@ (8018a84 <sys_timeout+0x44>)
 8018a5c:	480a      	ldr	r0, [pc, #40]	@ (8018a88 <sys_timeout+0x48>)
 8018a5e:	f003 fd1d 	bl	801c49c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8018a62:	f7f2 fc6f 	bl	800b344 <sys_now>
 8018a66:	4602      	mov	r2, r0
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	4413      	add	r3, r2
 8018a6c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8018a6e:	687a      	ldr	r2, [r7, #4]
 8018a70:	68b9      	ldr	r1, [r7, #8]
 8018a72:	6978      	ldr	r0, [r7, #20]
 8018a74:	f7ff ff22 	bl	80188bc <sys_timeout_abs>
#endif
}
 8018a78:	bf00      	nop
 8018a7a:	3718      	adds	r7, #24
 8018a7c:	46bd      	mov	sp, r7
 8018a7e:	bd80      	pop	{r7, pc}
 8018a80:	0802117c 	.word	0x0802117c
 8018a84:	08021218 	.word	0x08021218
 8018a88:	080211f0 	.word	0x080211f0

08018a8c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8018a8c:	b580      	push	{r7, lr}
 8018a8e:	b084      	sub	sp, #16
 8018a90:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8018a92:	f7f2 fc57 	bl	800b344 <sys_now>
 8018a96:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8018a98:	4b17      	ldr	r3, [pc, #92]	@ (8018af8 <sys_check_timeouts+0x6c>)
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8018a9e:	68bb      	ldr	r3, [r7, #8]
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d022      	beq.n	8018aea <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8018aa4:	68bb      	ldr	r3, [r7, #8]
 8018aa6:	685b      	ldr	r3, [r3, #4]
 8018aa8:	68fa      	ldr	r2, [r7, #12]
 8018aaa:	1ad3      	subs	r3, r2, r3
 8018aac:	0fdb      	lsrs	r3, r3, #31
 8018aae:	f003 0301 	and.w	r3, r3, #1
 8018ab2:	b2db      	uxtb	r3, r3
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d11a      	bne.n	8018aee <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8018ab8:	68bb      	ldr	r3, [r7, #8]
 8018aba:	681b      	ldr	r3, [r3, #0]
 8018abc:	4a0e      	ldr	r2, [pc, #56]	@ (8018af8 <sys_check_timeouts+0x6c>)
 8018abe:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8018ac0:	68bb      	ldr	r3, [r7, #8]
 8018ac2:	689b      	ldr	r3, [r3, #8]
 8018ac4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8018ac6:	68bb      	ldr	r3, [r7, #8]
 8018ac8:	68db      	ldr	r3, [r3, #12]
 8018aca:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8018acc:	68bb      	ldr	r3, [r7, #8]
 8018ace:	685b      	ldr	r3, [r3, #4]
 8018ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8018afc <sys_check_timeouts+0x70>)
 8018ad2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8018ad4:	68b9      	ldr	r1, [r7, #8]
 8018ad6:	200a      	movs	r0, #10
 8018ad8:	f7f8 fdb6 	bl	8011648 <memp_free>
    if (handler != NULL) {
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	d0da      	beq.n	8018a98 <sys_check_timeouts+0xc>
      handler(arg);
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	6838      	ldr	r0, [r7, #0]
 8018ae6:	4798      	blx	r3
  do {
 8018ae8:	e7d6      	b.n	8018a98 <sys_check_timeouts+0xc>
      return;
 8018aea:	bf00      	nop
 8018aec:	e000      	b.n	8018af0 <sys_check_timeouts+0x64>
      return;
 8018aee:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8018af0:	3710      	adds	r7, #16
 8018af2:	46bd      	mov	sp, r7
 8018af4:	bd80      	pop	{r7, pc}
 8018af6:	bf00      	nop
 8018af8:	2000c91c 	.word	0x2000c91c
 8018afc:	2000c920 	.word	0x2000c920

08018b00 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8018b00:	b580      	push	{r7, lr}
 8018b02:	b082      	sub	sp, #8
 8018b04:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8018b06:	4b16      	ldr	r3, [pc, #88]	@ (8018b60 <sys_timeouts_sleeptime+0x60>)
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d102      	bne.n	8018b14 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8018b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8018b12:	e020      	b.n	8018b56 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8018b14:	f7f2 fc16 	bl	800b344 <sys_now>
 8018b18:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8018b1a:	4b11      	ldr	r3, [pc, #68]	@ (8018b60 <sys_timeouts_sleeptime+0x60>)
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	685a      	ldr	r2, [r3, #4]
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	1ad3      	subs	r3, r2, r3
 8018b24:	0fdb      	lsrs	r3, r3, #31
 8018b26:	f003 0301 	and.w	r3, r3, #1
 8018b2a:	b2db      	uxtb	r3, r3
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d001      	beq.n	8018b34 <sys_timeouts_sleeptime+0x34>
    return 0;
 8018b30:	2300      	movs	r3, #0
 8018b32:	e010      	b.n	8018b56 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8018b34:	4b0a      	ldr	r3, [pc, #40]	@ (8018b60 <sys_timeouts_sleeptime+0x60>)
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	685a      	ldr	r2, [r3, #4]
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	1ad3      	subs	r3, r2, r3
 8018b3e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8018b40:	683b      	ldr	r3, [r7, #0]
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	da06      	bge.n	8018b54 <sys_timeouts_sleeptime+0x54>
 8018b46:	4b07      	ldr	r3, [pc, #28]	@ (8018b64 <sys_timeouts_sleeptime+0x64>)
 8018b48:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8018b4c:	4906      	ldr	r1, [pc, #24]	@ (8018b68 <sys_timeouts_sleeptime+0x68>)
 8018b4e:	4807      	ldr	r0, [pc, #28]	@ (8018b6c <sys_timeouts_sleeptime+0x6c>)
 8018b50:	f003 fca4 	bl	801c49c <iprintf>
    return ret;
 8018b54:	683b      	ldr	r3, [r7, #0]
  }
}
 8018b56:	4618      	mov	r0, r3
 8018b58:	3708      	adds	r7, #8
 8018b5a:	46bd      	mov	sp, r7
 8018b5c:	bd80      	pop	{r7, pc}
 8018b5e:	bf00      	nop
 8018b60:	2000c91c 	.word	0x2000c91c
 8018b64:	0802117c 	.word	0x0802117c
 8018b68:	08021250 	.word	0x08021250
 8018b6c:	080211f0 	.word	0x080211f0

08018b70 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8018b70:	b580      	push	{r7, lr}
 8018b72:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018b74:	f003 fb0e 	bl	801c194 <rand>
 8018b78:	4603      	mov	r3, r0
 8018b7a:	b29b      	uxth	r3, r3
 8018b7c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018b80:	b29b      	uxth	r3, r3
 8018b82:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8018b86:	b29a      	uxth	r2, r3
 8018b88:	4b01      	ldr	r3, [pc, #4]	@ (8018b90 <udp_init+0x20>)
 8018b8a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018b8c:	bf00      	nop
 8018b8e:	bd80      	pop	{r7, pc}
 8018b90:	200000a4 	.word	0x200000a4

08018b94 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8018b94:	b580      	push	{r7, lr}
 8018b96:	b084      	sub	sp, #16
 8018b98:	af00      	add	r7, sp, #0
 8018b9a:	60f8      	str	r0, [r7, #12]
 8018b9c:	60b9      	str	r1, [r7, #8]
 8018b9e:	4613      	mov	r3, r2
 8018ba0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d105      	bne.n	8018bb4 <udp_input_local_match+0x20>
 8018ba8:	4b27      	ldr	r3, [pc, #156]	@ (8018c48 <udp_input_local_match+0xb4>)
 8018baa:	2287      	movs	r2, #135	@ 0x87
 8018bac:	4927      	ldr	r1, [pc, #156]	@ (8018c4c <udp_input_local_match+0xb8>)
 8018bae:	4828      	ldr	r0, [pc, #160]	@ (8018c50 <udp_input_local_match+0xbc>)
 8018bb0:	f003 fc74 	bl	801c49c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8018bb4:	68bb      	ldr	r3, [r7, #8]
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d105      	bne.n	8018bc6 <udp_input_local_match+0x32>
 8018bba:	4b23      	ldr	r3, [pc, #140]	@ (8018c48 <udp_input_local_match+0xb4>)
 8018bbc:	2288      	movs	r2, #136	@ 0x88
 8018bbe:	4925      	ldr	r1, [pc, #148]	@ (8018c54 <udp_input_local_match+0xc0>)
 8018bc0:	4823      	ldr	r0, [pc, #140]	@ (8018c50 <udp_input_local_match+0xbc>)
 8018bc2:	f003 fc6b 	bl	801c49c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	7a1b      	ldrb	r3, [r3, #8]
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d00b      	beq.n	8018be6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	7a1a      	ldrb	r2, [r3, #8]
 8018bd2:	4b21      	ldr	r3, [pc, #132]	@ (8018c58 <udp_input_local_match+0xc4>)
 8018bd4:	685b      	ldr	r3, [r3, #4]
 8018bd6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018bda:	3301      	adds	r3, #1
 8018bdc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018bde:	429a      	cmp	r2, r3
 8018be0:	d001      	beq.n	8018be6 <udp_input_local_match+0x52>
    return 0;
 8018be2:	2300      	movs	r3, #0
 8018be4:	e02b      	b.n	8018c3e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8018be6:	79fb      	ldrb	r3, [r7, #7]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d018      	beq.n	8018c1e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d013      	beq.n	8018c1a <udp_input_local_match+0x86>
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	d00f      	beq.n	8018c1a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018bfa:	4b17      	ldr	r3, [pc, #92]	@ (8018c58 <udp_input_local_match+0xc4>)
 8018bfc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c02:	d00a      	beq.n	8018c1a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	681a      	ldr	r2, [r3, #0]
 8018c08:	4b13      	ldr	r3, [pc, #76]	@ (8018c58 <udp_input_local_match+0xc4>)
 8018c0a:	695b      	ldr	r3, [r3, #20]
 8018c0c:	405a      	eors	r2, r3
 8018c0e:	68bb      	ldr	r3, [r7, #8]
 8018c10:	3308      	adds	r3, #8
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	d110      	bne.n	8018c3c <udp_input_local_match+0xa8>
          return 1;
 8018c1a:	2301      	movs	r3, #1
 8018c1c:	e00f      	b.n	8018c3e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d009      	beq.n	8018c38 <udp_input_local_match+0xa4>
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d005      	beq.n	8018c38 <udp_input_local_match+0xa4>
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	681a      	ldr	r2, [r3, #0]
 8018c30:	4b09      	ldr	r3, [pc, #36]	@ (8018c58 <udp_input_local_match+0xc4>)
 8018c32:	695b      	ldr	r3, [r3, #20]
 8018c34:	429a      	cmp	r2, r3
 8018c36:	d101      	bne.n	8018c3c <udp_input_local_match+0xa8>
        return 1;
 8018c38:	2301      	movs	r3, #1
 8018c3a:	e000      	b.n	8018c3e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8018c3c:	2300      	movs	r3, #0
}
 8018c3e:	4618      	mov	r0, r3
 8018c40:	3710      	adds	r7, #16
 8018c42:	46bd      	mov	sp, r7
 8018c44:	bd80      	pop	{r7, pc}
 8018c46:	bf00      	nop
 8018c48:	08021264 	.word	0x08021264
 8018c4c:	08021294 	.word	0x08021294
 8018c50:	080212b8 	.word	0x080212b8
 8018c54:	080212e0 	.word	0x080212e0
 8018c58:	20009178 	.word	0x20009178

08018c5c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8018c5c:	b590      	push	{r4, r7, lr}
 8018c5e:	b08d      	sub	sp, #52	@ 0x34
 8018c60:	af02      	add	r7, sp, #8
 8018c62:	6078      	str	r0, [r7, #4]
 8018c64:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8018c66:	2300      	movs	r3, #0
 8018c68:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d105      	bne.n	8018c7c <udp_input+0x20>
 8018c70:	4b7c      	ldr	r3, [pc, #496]	@ (8018e64 <udp_input+0x208>)
 8018c72:	22cf      	movs	r2, #207	@ 0xcf
 8018c74:	497c      	ldr	r1, [pc, #496]	@ (8018e68 <udp_input+0x20c>)
 8018c76:	487d      	ldr	r0, [pc, #500]	@ (8018e6c <udp_input+0x210>)
 8018c78:	f003 fc10 	bl	801c49c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8018c7c:	683b      	ldr	r3, [r7, #0]
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	d105      	bne.n	8018c8e <udp_input+0x32>
 8018c82:	4b78      	ldr	r3, [pc, #480]	@ (8018e64 <udp_input+0x208>)
 8018c84:	22d0      	movs	r2, #208	@ 0xd0
 8018c86:	497a      	ldr	r1, [pc, #488]	@ (8018e70 <udp_input+0x214>)
 8018c88:	4878      	ldr	r0, [pc, #480]	@ (8018e6c <udp_input+0x210>)
 8018c8a:	f003 fc07 	bl	801c49c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	895b      	ldrh	r3, [r3, #10]
 8018c92:	2b07      	cmp	r3, #7
 8018c94:	d803      	bhi.n	8018c9e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8018c96:	6878      	ldr	r0, [r7, #4]
 8018c98:	f7f9 fb48 	bl	801232c <pbuf_free>
    goto end;
 8018c9c:	e0de      	b.n	8018e5c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	685b      	ldr	r3, [r3, #4]
 8018ca2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8018ca4:	4b73      	ldr	r3, [pc, #460]	@ (8018e74 <udp_input+0x218>)
 8018ca6:	695b      	ldr	r3, [r3, #20]
 8018ca8:	4a72      	ldr	r2, [pc, #456]	@ (8018e74 <udp_input+0x218>)
 8018caa:	6812      	ldr	r2, [r2, #0]
 8018cac:	4611      	mov	r1, r2
 8018cae:	4618      	mov	r0, r3
 8018cb0:	f001 fc56 	bl	801a560 <ip4_addr_isbroadcast_u32>
 8018cb4:	4603      	mov	r3, r0
 8018cb6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8018cb8:	697b      	ldr	r3, [r7, #20]
 8018cba:	881b      	ldrh	r3, [r3, #0]
 8018cbc:	b29b      	uxth	r3, r3
 8018cbe:	4618      	mov	r0, r3
 8018cc0:	f7f7 ff74 	bl	8010bac <lwip_htons>
 8018cc4:	4603      	mov	r3, r0
 8018cc6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8018cc8:	697b      	ldr	r3, [r7, #20]
 8018cca:	885b      	ldrh	r3, [r3, #2]
 8018ccc:	b29b      	uxth	r3, r3
 8018cce:	4618      	mov	r0, r3
 8018cd0:	f7f7 ff6c 	bl	8010bac <lwip_htons>
 8018cd4:	4603      	mov	r3, r0
 8018cd6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8018cd8:	2300      	movs	r3, #0
 8018cda:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8018cdc:	2300      	movs	r3, #0
 8018cde:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8018ce0:	2300      	movs	r3, #0
 8018ce2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018ce4:	4b64      	ldr	r3, [pc, #400]	@ (8018e78 <udp_input+0x21c>)
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8018cea:	e054      	b.n	8018d96 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8018cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cee:	8a5b      	ldrh	r3, [r3, #18]
 8018cf0:	89fa      	ldrh	r2, [r7, #14]
 8018cf2:	429a      	cmp	r2, r3
 8018cf4:	d14a      	bne.n	8018d8c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8018cf6:	7cfb      	ldrb	r3, [r7, #19]
 8018cf8:	461a      	mov	r2, r3
 8018cfa:	6839      	ldr	r1, [r7, #0]
 8018cfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018cfe:	f7ff ff49 	bl	8018b94 <udp_input_local_match>
 8018d02:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d041      	beq.n	8018d8c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8018d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d0a:	7c1b      	ldrb	r3, [r3, #16]
 8018d0c:	f003 0304 	and.w	r3, r3, #4
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d11d      	bne.n	8018d50 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8018d14:	69fb      	ldr	r3, [r7, #28]
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d102      	bne.n	8018d20 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8018d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d1c:	61fb      	str	r3, [r7, #28]
 8018d1e:	e017      	b.n	8018d50 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8018d20:	7cfb      	ldrb	r3, [r7, #19]
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d014      	beq.n	8018d50 <udp_input+0xf4>
 8018d26:	4b53      	ldr	r3, [pc, #332]	@ (8018e74 <udp_input+0x218>)
 8018d28:	695b      	ldr	r3, [r3, #20]
 8018d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d2e:	d10f      	bne.n	8018d50 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8018d30:	69fb      	ldr	r3, [r7, #28]
 8018d32:	681a      	ldr	r2, [r3, #0]
 8018d34:	683b      	ldr	r3, [r7, #0]
 8018d36:	3304      	adds	r3, #4
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	429a      	cmp	r2, r3
 8018d3c:	d008      	beq.n	8018d50 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8018d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d40:	681a      	ldr	r2, [r3, #0]
 8018d42:	683b      	ldr	r3, [r7, #0]
 8018d44:	3304      	adds	r3, #4
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	429a      	cmp	r2, r3
 8018d4a:	d101      	bne.n	8018d50 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8018d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d4e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8018d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d52:	8a9b      	ldrh	r3, [r3, #20]
 8018d54:	8a3a      	ldrh	r2, [r7, #16]
 8018d56:	429a      	cmp	r2, r3
 8018d58:	d118      	bne.n	8018d8c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d5c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d005      	beq.n	8018d6e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8018d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d64:	685a      	ldr	r2, [r3, #4]
 8018d66:	4b43      	ldr	r3, [pc, #268]	@ (8018e74 <udp_input+0x218>)
 8018d68:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018d6a:	429a      	cmp	r2, r3
 8018d6c:	d10e      	bne.n	8018d8c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8018d6e:	6a3b      	ldr	r3, [r7, #32]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d014      	beq.n	8018d9e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8018d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d76:	68da      	ldr	r2, [r3, #12]
 8018d78:	6a3b      	ldr	r3, [r7, #32]
 8018d7a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8018d7c:	4b3e      	ldr	r3, [pc, #248]	@ (8018e78 <udp_input+0x21c>)
 8018d7e:	681a      	ldr	r2, [r3, #0]
 8018d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d82:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8018d84:	4a3c      	ldr	r2, [pc, #240]	@ (8018e78 <udp_input+0x21c>)
 8018d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d88:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8018d8a:	e008      	b.n	8018d9e <udp_input+0x142>
      }
    }

    prev = pcb;
 8018d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d8e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d92:	68db      	ldr	r3, [r3, #12]
 8018d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8018d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d1a7      	bne.n	8018cec <udp_input+0x90>
 8018d9c:	e000      	b.n	8018da0 <udp_input+0x144>
        break;
 8018d9e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8018da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d101      	bne.n	8018daa <udp_input+0x14e>
    pcb = uncon_pcb;
 8018da6:	69fb      	ldr	r3, [r7, #28]
 8018da8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8018daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	d002      	beq.n	8018db6 <udp_input+0x15a>
    for_us = 1;
 8018db0:	2301      	movs	r3, #1
 8018db2:	76fb      	strb	r3, [r7, #27]
 8018db4:	e00a      	b.n	8018dcc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8018db6:	683b      	ldr	r3, [r7, #0]
 8018db8:	3304      	adds	r3, #4
 8018dba:	681a      	ldr	r2, [r3, #0]
 8018dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8018e74 <udp_input+0x218>)
 8018dbe:	695b      	ldr	r3, [r3, #20]
 8018dc0:	429a      	cmp	r2, r3
 8018dc2:	bf0c      	ite	eq
 8018dc4:	2301      	moveq	r3, #1
 8018dc6:	2300      	movne	r3, #0
 8018dc8:	b2db      	uxtb	r3, r3
 8018dca:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018dcc:	7efb      	ldrb	r3, [r7, #27]
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d041      	beq.n	8018e56 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8018dd2:	2108      	movs	r1, #8
 8018dd4:	6878      	ldr	r0, [r7, #4]
 8018dd6:	f7f9 fa23 	bl	8012220 <pbuf_remove_header>
 8018dda:	4603      	mov	r3, r0
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d00a      	beq.n	8018df6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018de0:	4b20      	ldr	r3, [pc, #128]	@ (8018e64 <udp_input+0x208>)
 8018de2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8018de6:	4925      	ldr	r1, [pc, #148]	@ (8018e7c <udp_input+0x220>)
 8018de8:	4820      	ldr	r0, [pc, #128]	@ (8018e6c <udp_input+0x210>)
 8018dea:	f003 fb57 	bl	801c49c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018dee:	6878      	ldr	r0, [r7, #4]
 8018df0:	f7f9 fa9c 	bl	801232c <pbuf_free>
      goto end;
 8018df4:	e032      	b.n	8018e5c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8018df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d012      	beq.n	8018e22 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018dfe:	699b      	ldr	r3, [r3, #24]
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d00a      	beq.n	8018e1a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e06:	699c      	ldr	r4, [r3, #24]
 8018e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e0a:	69d8      	ldr	r0, [r3, #28]
 8018e0c:	8a3b      	ldrh	r3, [r7, #16]
 8018e0e:	9300      	str	r3, [sp, #0]
 8018e10:	4b1b      	ldr	r3, [pc, #108]	@ (8018e80 <udp_input+0x224>)
 8018e12:	687a      	ldr	r2, [r7, #4]
 8018e14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018e16:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018e18:	e021      	b.n	8018e5e <udp_input+0x202>
        pbuf_free(p);
 8018e1a:	6878      	ldr	r0, [r7, #4]
 8018e1c:	f7f9 fa86 	bl	801232c <pbuf_free>
        goto end;
 8018e20:	e01c      	b.n	8018e5c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018e22:	7cfb      	ldrb	r3, [r7, #19]
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d112      	bne.n	8018e4e <udp_input+0x1f2>
 8018e28:	4b12      	ldr	r3, [pc, #72]	@ (8018e74 <udp_input+0x218>)
 8018e2a:	695b      	ldr	r3, [r3, #20]
 8018e2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018e30:	2be0      	cmp	r3, #224	@ 0xe0
 8018e32:	d00c      	beq.n	8018e4e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018e34:	4b0f      	ldr	r3, [pc, #60]	@ (8018e74 <udp_input+0x218>)
 8018e36:	899b      	ldrh	r3, [r3, #12]
 8018e38:	3308      	adds	r3, #8
 8018e3a:	b29b      	uxth	r3, r3
 8018e3c:	b21b      	sxth	r3, r3
 8018e3e:	4619      	mov	r1, r3
 8018e40:	6878      	ldr	r0, [r7, #4]
 8018e42:	f7f9 fa60 	bl	8012306 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8018e46:	2103      	movs	r1, #3
 8018e48:	6878      	ldr	r0, [r7, #4]
 8018e4a:	f001 f869 	bl	8019f20 <icmp_dest_unreach>
      pbuf_free(p);
 8018e4e:	6878      	ldr	r0, [r7, #4]
 8018e50:	f7f9 fa6c 	bl	801232c <pbuf_free>
  return;
 8018e54:	e003      	b.n	8018e5e <udp_input+0x202>
    pbuf_free(p);
 8018e56:	6878      	ldr	r0, [r7, #4]
 8018e58:	f7f9 fa68 	bl	801232c <pbuf_free>
  return;
 8018e5c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8018e5e:	372c      	adds	r7, #44	@ 0x2c
 8018e60:	46bd      	mov	sp, r7
 8018e62:	bd90      	pop	{r4, r7, pc}
 8018e64:	08021264 	.word	0x08021264
 8018e68:	08021308 	.word	0x08021308
 8018e6c:	080212b8 	.word	0x080212b8
 8018e70:	08021320 	.word	0x08021320
 8018e74:	20009178 	.word	0x20009178
 8018e78:	2000c928 	.word	0x2000c928
 8018e7c:	0802133c 	.word	0x0802133c
 8018e80:	20009188 	.word	0x20009188

08018e84 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018e84:	b480      	push	{r7}
 8018e86:	b085      	sub	sp, #20
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	6078      	str	r0, [r7, #4]
 8018e8c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d01e      	beq.n	8018ed2 <udp_netif_ip_addr_changed+0x4e>
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d01a      	beq.n	8018ed2 <udp_netif_ip_addr_changed+0x4e>
 8018e9c:	683b      	ldr	r3, [r7, #0]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d017      	beq.n	8018ed2 <udp_netif_ip_addr_changed+0x4e>
 8018ea2:	683b      	ldr	r3, [r7, #0]
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d013      	beq.n	8018ed2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8018ee0 <udp_netif_ip_addr_changed+0x5c>)
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	60fb      	str	r3, [r7, #12]
 8018eb0:	e00c      	b.n	8018ecc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018eb2:	68fb      	ldr	r3, [r7, #12]
 8018eb4:	681a      	ldr	r2, [r3, #0]
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	429a      	cmp	r2, r3
 8018ebc:	d103      	bne.n	8018ec6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018ebe:	683b      	ldr	r3, [r7, #0]
 8018ec0:	681a      	ldr	r2, [r3, #0]
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	68db      	ldr	r3, [r3, #12]
 8018eca:	60fb      	str	r3, [r7, #12]
 8018ecc:	68fb      	ldr	r3, [r7, #12]
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d1ef      	bne.n	8018eb2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018ed2:	bf00      	nop
 8018ed4:	3714      	adds	r7, #20
 8018ed6:	46bd      	mov	sp, r7
 8018ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018edc:	4770      	bx	lr
 8018ede:	bf00      	nop
 8018ee0:	2000c928 	.word	0x2000c928

08018ee4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	b082      	sub	sp, #8
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018eec:	4915      	ldr	r1, [pc, #84]	@ (8018f44 <etharp_free_entry+0x60>)
 8018eee:	687a      	ldr	r2, [r7, #4]
 8018ef0:	4613      	mov	r3, r2
 8018ef2:	005b      	lsls	r3, r3, #1
 8018ef4:	4413      	add	r3, r2
 8018ef6:	00db      	lsls	r3, r3, #3
 8018ef8:	440b      	add	r3, r1
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d013      	beq.n	8018f28 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018f00:	4910      	ldr	r1, [pc, #64]	@ (8018f44 <etharp_free_entry+0x60>)
 8018f02:	687a      	ldr	r2, [r7, #4]
 8018f04:	4613      	mov	r3, r2
 8018f06:	005b      	lsls	r3, r3, #1
 8018f08:	4413      	add	r3, r2
 8018f0a:	00db      	lsls	r3, r3, #3
 8018f0c:	440b      	add	r3, r1
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	4618      	mov	r0, r3
 8018f12:	f7f9 fa0b 	bl	801232c <pbuf_free>
    arp_table[i].q = NULL;
 8018f16:	490b      	ldr	r1, [pc, #44]	@ (8018f44 <etharp_free_entry+0x60>)
 8018f18:	687a      	ldr	r2, [r7, #4]
 8018f1a:	4613      	mov	r3, r2
 8018f1c:	005b      	lsls	r3, r3, #1
 8018f1e:	4413      	add	r3, r2
 8018f20:	00db      	lsls	r3, r3, #3
 8018f22:	440b      	add	r3, r1
 8018f24:	2200      	movs	r2, #0
 8018f26:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018f28:	4906      	ldr	r1, [pc, #24]	@ (8018f44 <etharp_free_entry+0x60>)
 8018f2a:	687a      	ldr	r2, [r7, #4]
 8018f2c:	4613      	mov	r3, r2
 8018f2e:	005b      	lsls	r3, r3, #1
 8018f30:	4413      	add	r3, r2
 8018f32:	00db      	lsls	r3, r3, #3
 8018f34:	440b      	add	r3, r1
 8018f36:	3314      	adds	r3, #20
 8018f38:	2200      	movs	r2, #0
 8018f3a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018f3c:	bf00      	nop
 8018f3e:	3708      	adds	r7, #8
 8018f40:	46bd      	mov	sp, r7
 8018f42:	bd80      	pop	{r7, pc}
 8018f44:	2000c92c 	.word	0x2000c92c

08018f48 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018f48:	b580      	push	{r7, lr}
 8018f4a:	b082      	sub	sp, #8
 8018f4c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018f4e:	2300      	movs	r3, #0
 8018f50:	607b      	str	r3, [r7, #4]
 8018f52:	e096      	b.n	8019082 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018f54:	494f      	ldr	r1, [pc, #316]	@ (8019094 <etharp_tmr+0x14c>)
 8018f56:	687a      	ldr	r2, [r7, #4]
 8018f58:	4613      	mov	r3, r2
 8018f5a:	005b      	lsls	r3, r3, #1
 8018f5c:	4413      	add	r3, r2
 8018f5e:	00db      	lsls	r3, r3, #3
 8018f60:	440b      	add	r3, r1
 8018f62:	3314      	adds	r3, #20
 8018f64:	781b      	ldrb	r3, [r3, #0]
 8018f66:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018f68:	78fb      	ldrb	r3, [r7, #3]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	f000 8086 	beq.w	801907c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018f70:	4948      	ldr	r1, [pc, #288]	@ (8019094 <etharp_tmr+0x14c>)
 8018f72:	687a      	ldr	r2, [r7, #4]
 8018f74:	4613      	mov	r3, r2
 8018f76:	005b      	lsls	r3, r3, #1
 8018f78:	4413      	add	r3, r2
 8018f7a:	00db      	lsls	r3, r3, #3
 8018f7c:	440b      	add	r3, r1
 8018f7e:	3312      	adds	r3, #18
 8018f80:	881b      	ldrh	r3, [r3, #0]
 8018f82:	3301      	adds	r3, #1
 8018f84:	b298      	uxth	r0, r3
 8018f86:	4943      	ldr	r1, [pc, #268]	@ (8019094 <etharp_tmr+0x14c>)
 8018f88:	687a      	ldr	r2, [r7, #4]
 8018f8a:	4613      	mov	r3, r2
 8018f8c:	005b      	lsls	r3, r3, #1
 8018f8e:	4413      	add	r3, r2
 8018f90:	00db      	lsls	r3, r3, #3
 8018f92:	440b      	add	r3, r1
 8018f94:	3312      	adds	r3, #18
 8018f96:	4602      	mov	r2, r0
 8018f98:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018f9a:	493e      	ldr	r1, [pc, #248]	@ (8019094 <etharp_tmr+0x14c>)
 8018f9c:	687a      	ldr	r2, [r7, #4]
 8018f9e:	4613      	mov	r3, r2
 8018fa0:	005b      	lsls	r3, r3, #1
 8018fa2:	4413      	add	r3, r2
 8018fa4:	00db      	lsls	r3, r3, #3
 8018fa6:	440b      	add	r3, r1
 8018fa8:	3312      	adds	r3, #18
 8018faa:	881b      	ldrh	r3, [r3, #0]
 8018fac:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8018fb0:	d215      	bcs.n	8018fde <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018fb2:	4938      	ldr	r1, [pc, #224]	@ (8019094 <etharp_tmr+0x14c>)
 8018fb4:	687a      	ldr	r2, [r7, #4]
 8018fb6:	4613      	mov	r3, r2
 8018fb8:	005b      	lsls	r3, r3, #1
 8018fba:	4413      	add	r3, r2
 8018fbc:	00db      	lsls	r3, r3, #3
 8018fbe:	440b      	add	r3, r1
 8018fc0:	3314      	adds	r3, #20
 8018fc2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018fc4:	2b01      	cmp	r3, #1
 8018fc6:	d10e      	bne.n	8018fe6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018fc8:	4932      	ldr	r1, [pc, #200]	@ (8019094 <etharp_tmr+0x14c>)
 8018fca:	687a      	ldr	r2, [r7, #4]
 8018fcc:	4613      	mov	r3, r2
 8018fce:	005b      	lsls	r3, r3, #1
 8018fd0:	4413      	add	r3, r2
 8018fd2:	00db      	lsls	r3, r3, #3
 8018fd4:	440b      	add	r3, r1
 8018fd6:	3312      	adds	r3, #18
 8018fd8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018fda:	2b04      	cmp	r3, #4
 8018fdc:	d903      	bls.n	8018fe6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018fde:	6878      	ldr	r0, [r7, #4]
 8018fe0:	f7ff ff80 	bl	8018ee4 <etharp_free_entry>
 8018fe4:	e04a      	b.n	801907c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8018fe6:	492b      	ldr	r1, [pc, #172]	@ (8019094 <etharp_tmr+0x14c>)
 8018fe8:	687a      	ldr	r2, [r7, #4]
 8018fea:	4613      	mov	r3, r2
 8018fec:	005b      	lsls	r3, r3, #1
 8018fee:	4413      	add	r3, r2
 8018ff0:	00db      	lsls	r3, r3, #3
 8018ff2:	440b      	add	r3, r1
 8018ff4:	3314      	adds	r3, #20
 8018ff6:	781b      	ldrb	r3, [r3, #0]
 8018ff8:	2b03      	cmp	r3, #3
 8018ffa:	d10a      	bne.n	8019012 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018ffc:	4925      	ldr	r1, [pc, #148]	@ (8019094 <etharp_tmr+0x14c>)
 8018ffe:	687a      	ldr	r2, [r7, #4]
 8019000:	4613      	mov	r3, r2
 8019002:	005b      	lsls	r3, r3, #1
 8019004:	4413      	add	r3, r2
 8019006:	00db      	lsls	r3, r3, #3
 8019008:	440b      	add	r3, r1
 801900a:	3314      	adds	r3, #20
 801900c:	2204      	movs	r2, #4
 801900e:	701a      	strb	r2, [r3, #0]
 8019010:	e034      	b.n	801907c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8019012:	4920      	ldr	r1, [pc, #128]	@ (8019094 <etharp_tmr+0x14c>)
 8019014:	687a      	ldr	r2, [r7, #4]
 8019016:	4613      	mov	r3, r2
 8019018:	005b      	lsls	r3, r3, #1
 801901a:	4413      	add	r3, r2
 801901c:	00db      	lsls	r3, r3, #3
 801901e:	440b      	add	r3, r1
 8019020:	3314      	adds	r3, #20
 8019022:	781b      	ldrb	r3, [r3, #0]
 8019024:	2b04      	cmp	r3, #4
 8019026:	d10a      	bne.n	801903e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8019028:	491a      	ldr	r1, [pc, #104]	@ (8019094 <etharp_tmr+0x14c>)
 801902a:	687a      	ldr	r2, [r7, #4]
 801902c:	4613      	mov	r3, r2
 801902e:	005b      	lsls	r3, r3, #1
 8019030:	4413      	add	r3, r2
 8019032:	00db      	lsls	r3, r3, #3
 8019034:	440b      	add	r3, r1
 8019036:	3314      	adds	r3, #20
 8019038:	2202      	movs	r2, #2
 801903a:	701a      	strb	r2, [r3, #0]
 801903c:	e01e      	b.n	801907c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801903e:	4915      	ldr	r1, [pc, #84]	@ (8019094 <etharp_tmr+0x14c>)
 8019040:	687a      	ldr	r2, [r7, #4]
 8019042:	4613      	mov	r3, r2
 8019044:	005b      	lsls	r3, r3, #1
 8019046:	4413      	add	r3, r2
 8019048:	00db      	lsls	r3, r3, #3
 801904a:	440b      	add	r3, r1
 801904c:	3314      	adds	r3, #20
 801904e:	781b      	ldrb	r3, [r3, #0]
 8019050:	2b01      	cmp	r3, #1
 8019052:	d113      	bne.n	801907c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8019054:	490f      	ldr	r1, [pc, #60]	@ (8019094 <etharp_tmr+0x14c>)
 8019056:	687a      	ldr	r2, [r7, #4]
 8019058:	4613      	mov	r3, r2
 801905a:	005b      	lsls	r3, r3, #1
 801905c:	4413      	add	r3, r2
 801905e:	00db      	lsls	r3, r3, #3
 8019060:	440b      	add	r3, r1
 8019062:	3308      	adds	r3, #8
 8019064:	6818      	ldr	r0, [r3, #0]
 8019066:	687a      	ldr	r2, [r7, #4]
 8019068:	4613      	mov	r3, r2
 801906a:	005b      	lsls	r3, r3, #1
 801906c:	4413      	add	r3, r2
 801906e:	00db      	lsls	r3, r3, #3
 8019070:	4a08      	ldr	r2, [pc, #32]	@ (8019094 <etharp_tmr+0x14c>)
 8019072:	4413      	add	r3, r2
 8019074:	3304      	adds	r3, #4
 8019076:	4619      	mov	r1, r3
 8019078:	f000 fe3e 	bl	8019cf8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	3301      	adds	r3, #1
 8019080:	607b      	str	r3, [r7, #4]
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	2b09      	cmp	r3, #9
 8019086:	f77f af65 	ble.w	8018f54 <etharp_tmr+0xc>
      }
    }
  }
}
 801908a:	bf00      	nop
 801908c:	bf00      	nop
 801908e:	3708      	adds	r7, #8
 8019090:	46bd      	mov	sp, r7
 8019092:	bd80      	pop	{r7, pc}
 8019094:	2000c92c 	.word	0x2000c92c

08019098 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8019098:	b580      	push	{r7, lr}
 801909a:	b08a      	sub	sp, #40	@ 0x28
 801909c:	af00      	add	r7, sp, #0
 801909e:	60f8      	str	r0, [r7, #12]
 80190a0:	460b      	mov	r3, r1
 80190a2:	607a      	str	r2, [r7, #4]
 80190a4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80190a6:	230a      	movs	r3, #10
 80190a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80190aa:	230a      	movs	r3, #10
 80190ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80190ae:	230a      	movs	r3, #10
 80190b0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80190b2:	2300      	movs	r3, #0
 80190b4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80190b6:	230a      	movs	r3, #10
 80190b8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80190ba:	2300      	movs	r3, #0
 80190bc:	83bb      	strh	r3, [r7, #28]
 80190be:	2300      	movs	r3, #0
 80190c0:	837b      	strh	r3, [r7, #26]
 80190c2:	2300      	movs	r3, #0
 80190c4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80190c6:	2300      	movs	r3, #0
 80190c8:	843b      	strh	r3, [r7, #32]
 80190ca:	e0ae      	b.n	801922a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80190cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80190d0:	49a6      	ldr	r1, [pc, #664]	@ (801936c <etharp_find_entry+0x2d4>)
 80190d2:	4613      	mov	r3, r2
 80190d4:	005b      	lsls	r3, r3, #1
 80190d6:	4413      	add	r3, r2
 80190d8:	00db      	lsls	r3, r3, #3
 80190da:	440b      	add	r3, r1
 80190dc:	3314      	adds	r3, #20
 80190de:	781b      	ldrb	r3, [r3, #0]
 80190e0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80190e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80190e6:	2b0a      	cmp	r3, #10
 80190e8:	d105      	bne.n	80190f6 <etharp_find_entry+0x5e>
 80190ea:	7dfb      	ldrb	r3, [r7, #23]
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d102      	bne.n	80190f6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80190f0:	8c3b      	ldrh	r3, [r7, #32]
 80190f2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80190f4:	e095      	b.n	8019222 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80190f6:	7dfb      	ldrb	r3, [r7, #23]
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	f000 8092 	beq.w	8019222 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80190fe:	7dfb      	ldrb	r3, [r7, #23]
 8019100:	2b01      	cmp	r3, #1
 8019102:	d009      	beq.n	8019118 <etharp_find_entry+0x80>
 8019104:	7dfb      	ldrb	r3, [r7, #23]
 8019106:	2b01      	cmp	r3, #1
 8019108:	d806      	bhi.n	8019118 <etharp_find_entry+0x80>
 801910a:	4b99      	ldr	r3, [pc, #612]	@ (8019370 <etharp_find_entry+0x2d8>)
 801910c:	f240 1223 	movw	r2, #291	@ 0x123
 8019110:	4998      	ldr	r1, [pc, #608]	@ (8019374 <etharp_find_entry+0x2dc>)
 8019112:	4899      	ldr	r0, [pc, #612]	@ (8019378 <etharp_find_entry+0x2e0>)
 8019114:	f003 f9c2 	bl	801c49c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8019118:	68fb      	ldr	r3, [r7, #12]
 801911a:	2b00      	cmp	r3, #0
 801911c:	d020      	beq.n	8019160 <etharp_find_entry+0xc8>
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	6819      	ldr	r1, [r3, #0]
 8019122:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019126:	4891      	ldr	r0, [pc, #580]	@ (801936c <etharp_find_entry+0x2d4>)
 8019128:	4613      	mov	r3, r2
 801912a:	005b      	lsls	r3, r3, #1
 801912c:	4413      	add	r3, r2
 801912e:	00db      	lsls	r3, r3, #3
 8019130:	4403      	add	r3, r0
 8019132:	3304      	adds	r3, #4
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	4299      	cmp	r1, r3
 8019138:	d112      	bne.n	8019160 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	2b00      	cmp	r3, #0
 801913e:	d00c      	beq.n	801915a <etharp_find_entry+0xc2>
 8019140:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019144:	4989      	ldr	r1, [pc, #548]	@ (801936c <etharp_find_entry+0x2d4>)
 8019146:	4613      	mov	r3, r2
 8019148:	005b      	lsls	r3, r3, #1
 801914a:	4413      	add	r3, r2
 801914c:	00db      	lsls	r3, r3, #3
 801914e:	440b      	add	r3, r1
 8019150:	3308      	adds	r3, #8
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	687a      	ldr	r2, [r7, #4]
 8019156:	429a      	cmp	r2, r3
 8019158:	d102      	bne.n	8019160 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801915a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801915e:	e100      	b.n	8019362 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8019160:	7dfb      	ldrb	r3, [r7, #23]
 8019162:	2b01      	cmp	r3, #1
 8019164:	d140      	bne.n	80191e8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8019166:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801916a:	4980      	ldr	r1, [pc, #512]	@ (801936c <etharp_find_entry+0x2d4>)
 801916c:	4613      	mov	r3, r2
 801916e:	005b      	lsls	r3, r3, #1
 8019170:	4413      	add	r3, r2
 8019172:	00db      	lsls	r3, r3, #3
 8019174:	440b      	add	r3, r1
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	2b00      	cmp	r3, #0
 801917a:	d01a      	beq.n	80191b2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801917c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019180:	497a      	ldr	r1, [pc, #488]	@ (801936c <etharp_find_entry+0x2d4>)
 8019182:	4613      	mov	r3, r2
 8019184:	005b      	lsls	r3, r3, #1
 8019186:	4413      	add	r3, r2
 8019188:	00db      	lsls	r3, r3, #3
 801918a:	440b      	add	r3, r1
 801918c:	3312      	adds	r3, #18
 801918e:	881b      	ldrh	r3, [r3, #0]
 8019190:	8bba      	ldrh	r2, [r7, #28]
 8019192:	429a      	cmp	r2, r3
 8019194:	d845      	bhi.n	8019222 <etharp_find_entry+0x18a>
            old_queue = i;
 8019196:	8c3b      	ldrh	r3, [r7, #32]
 8019198:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801919a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801919e:	4973      	ldr	r1, [pc, #460]	@ (801936c <etharp_find_entry+0x2d4>)
 80191a0:	4613      	mov	r3, r2
 80191a2:	005b      	lsls	r3, r3, #1
 80191a4:	4413      	add	r3, r2
 80191a6:	00db      	lsls	r3, r3, #3
 80191a8:	440b      	add	r3, r1
 80191aa:	3312      	adds	r3, #18
 80191ac:	881b      	ldrh	r3, [r3, #0]
 80191ae:	83bb      	strh	r3, [r7, #28]
 80191b0:	e037      	b.n	8019222 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80191b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80191b6:	496d      	ldr	r1, [pc, #436]	@ (801936c <etharp_find_entry+0x2d4>)
 80191b8:	4613      	mov	r3, r2
 80191ba:	005b      	lsls	r3, r3, #1
 80191bc:	4413      	add	r3, r2
 80191be:	00db      	lsls	r3, r3, #3
 80191c0:	440b      	add	r3, r1
 80191c2:	3312      	adds	r3, #18
 80191c4:	881b      	ldrh	r3, [r3, #0]
 80191c6:	8b7a      	ldrh	r2, [r7, #26]
 80191c8:	429a      	cmp	r2, r3
 80191ca:	d82a      	bhi.n	8019222 <etharp_find_entry+0x18a>
            old_pending = i;
 80191cc:	8c3b      	ldrh	r3, [r7, #32]
 80191ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80191d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80191d4:	4965      	ldr	r1, [pc, #404]	@ (801936c <etharp_find_entry+0x2d4>)
 80191d6:	4613      	mov	r3, r2
 80191d8:	005b      	lsls	r3, r3, #1
 80191da:	4413      	add	r3, r2
 80191dc:	00db      	lsls	r3, r3, #3
 80191de:	440b      	add	r3, r1
 80191e0:	3312      	adds	r3, #18
 80191e2:	881b      	ldrh	r3, [r3, #0]
 80191e4:	837b      	strh	r3, [r7, #26]
 80191e6:	e01c      	b.n	8019222 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80191e8:	7dfb      	ldrb	r3, [r7, #23]
 80191ea:	2b01      	cmp	r3, #1
 80191ec:	d919      	bls.n	8019222 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80191ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80191f2:	495e      	ldr	r1, [pc, #376]	@ (801936c <etharp_find_entry+0x2d4>)
 80191f4:	4613      	mov	r3, r2
 80191f6:	005b      	lsls	r3, r3, #1
 80191f8:	4413      	add	r3, r2
 80191fa:	00db      	lsls	r3, r3, #3
 80191fc:	440b      	add	r3, r1
 80191fe:	3312      	adds	r3, #18
 8019200:	881b      	ldrh	r3, [r3, #0]
 8019202:	8b3a      	ldrh	r2, [r7, #24]
 8019204:	429a      	cmp	r2, r3
 8019206:	d80c      	bhi.n	8019222 <etharp_find_entry+0x18a>
            old_stable = i;
 8019208:	8c3b      	ldrh	r3, [r7, #32]
 801920a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801920c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019210:	4956      	ldr	r1, [pc, #344]	@ (801936c <etharp_find_entry+0x2d4>)
 8019212:	4613      	mov	r3, r2
 8019214:	005b      	lsls	r3, r3, #1
 8019216:	4413      	add	r3, r2
 8019218:	00db      	lsls	r3, r3, #3
 801921a:	440b      	add	r3, r1
 801921c:	3312      	adds	r3, #18
 801921e:	881b      	ldrh	r3, [r3, #0]
 8019220:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019222:	8c3b      	ldrh	r3, [r7, #32]
 8019224:	3301      	adds	r3, #1
 8019226:	b29b      	uxth	r3, r3
 8019228:	843b      	strh	r3, [r7, #32]
 801922a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801922e:	2b09      	cmp	r3, #9
 8019230:	f77f af4c 	ble.w	80190cc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8019234:	7afb      	ldrb	r3, [r7, #11]
 8019236:	f003 0302 	and.w	r3, r3, #2
 801923a:	2b00      	cmp	r3, #0
 801923c:	d108      	bne.n	8019250 <etharp_find_entry+0x1b8>
 801923e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8019242:	2b0a      	cmp	r3, #10
 8019244:	d107      	bne.n	8019256 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8019246:	7afb      	ldrb	r3, [r7, #11]
 8019248:	f003 0301 	and.w	r3, r3, #1
 801924c:	2b00      	cmp	r3, #0
 801924e:	d102      	bne.n	8019256 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8019250:	f04f 33ff 	mov.w	r3, #4294967295
 8019254:	e085      	b.n	8019362 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8019256:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801925a:	2b09      	cmp	r3, #9
 801925c:	dc02      	bgt.n	8019264 <etharp_find_entry+0x1cc>
    i = empty;
 801925e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019260:	843b      	strh	r3, [r7, #32]
 8019262:	e039      	b.n	80192d8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8019264:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8019268:	2b09      	cmp	r3, #9
 801926a:	dc14      	bgt.n	8019296 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801926c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801926e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8019270:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019274:	493d      	ldr	r1, [pc, #244]	@ (801936c <etharp_find_entry+0x2d4>)
 8019276:	4613      	mov	r3, r2
 8019278:	005b      	lsls	r3, r3, #1
 801927a:	4413      	add	r3, r2
 801927c:	00db      	lsls	r3, r3, #3
 801927e:	440b      	add	r3, r1
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	2b00      	cmp	r3, #0
 8019284:	d018      	beq.n	80192b8 <etharp_find_entry+0x220>
 8019286:	4b3a      	ldr	r3, [pc, #232]	@ (8019370 <etharp_find_entry+0x2d8>)
 8019288:	f240 126d 	movw	r2, #365	@ 0x16d
 801928c:	493b      	ldr	r1, [pc, #236]	@ (801937c <etharp_find_entry+0x2e4>)
 801928e:	483a      	ldr	r0, [pc, #232]	@ (8019378 <etharp_find_entry+0x2e0>)
 8019290:	f003 f904 	bl	801c49c <iprintf>
 8019294:	e010      	b.n	80192b8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8019296:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801929a:	2b09      	cmp	r3, #9
 801929c:	dc02      	bgt.n	80192a4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801929e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80192a0:	843b      	strh	r3, [r7, #32]
 80192a2:	e009      	b.n	80192b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80192a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80192a8:	2b09      	cmp	r3, #9
 80192aa:	dc02      	bgt.n	80192b2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80192ac:	8bfb      	ldrh	r3, [r7, #30]
 80192ae:	843b      	strh	r3, [r7, #32]
 80192b0:	e002      	b.n	80192b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80192b2:	f04f 33ff 	mov.w	r3, #4294967295
 80192b6:	e054      	b.n	8019362 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80192b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80192bc:	2b09      	cmp	r3, #9
 80192be:	dd06      	ble.n	80192ce <etharp_find_entry+0x236>
 80192c0:	4b2b      	ldr	r3, [pc, #172]	@ (8019370 <etharp_find_entry+0x2d8>)
 80192c2:	f240 127f 	movw	r2, #383	@ 0x17f
 80192c6:	492e      	ldr	r1, [pc, #184]	@ (8019380 <etharp_find_entry+0x2e8>)
 80192c8:	482b      	ldr	r0, [pc, #172]	@ (8019378 <etharp_find_entry+0x2e0>)
 80192ca:	f003 f8e7 	bl	801c49c <iprintf>
    etharp_free_entry(i);
 80192ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80192d2:	4618      	mov	r0, r3
 80192d4:	f7ff fe06 	bl	8018ee4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80192d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80192dc:	2b09      	cmp	r3, #9
 80192de:	dd06      	ble.n	80192ee <etharp_find_entry+0x256>
 80192e0:	4b23      	ldr	r3, [pc, #140]	@ (8019370 <etharp_find_entry+0x2d8>)
 80192e2:	f240 1283 	movw	r2, #387	@ 0x183
 80192e6:	4926      	ldr	r1, [pc, #152]	@ (8019380 <etharp_find_entry+0x2e8>)
 80192e8:	4823      	ldr	r0, [pc, #140]	@ (8019378 <etharp_find_entry+0x2e0>)
 80192ea:	f003 f8d7 	bl	801c49c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80192ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80192f2:	491e      	ldr	r1, [pc, #120]	@ (801936c <etharp_find_entry+0x2d4>)
 80192f4:	4613      	mov	r3, r2
 80192f6:	005b      	lsls	r3, r3, #1
 80192f8:	4413      	add	r3, r2
 80192fa:	00db      	lsls	r3, r3, #3
 80192fc:	440b      	add	r3, r1
 80192fe:	3314      	adds	r3, #20
 8019300:	781b      	ldrb	r3, [r3, #0]
 8019302:	2b00      	cmp	r3, #0
 8019304:	d006      	beq.n	8019314 <etharp_find_entry+0x27c>
 8019306:	4b1a      	ldr	r3, [pc, #104]	@ (8019370 <etharp_find_entry+0x2d8>)
 8019308:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801930c:	491d      	ldr	r1, [pc, #116]	@ (8019384 <etharp_find_entry+0x2ec>)
 801930e:	481a      	ldr	r0, [pc, #104]	@ (8019378 <etharp_find_entry+0x2e0>)
 8019310:	f003 f8c4 	bl	801c49c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	2b00      	cmp	r3, #0
 8019318:	d00b      	beq.n	8019332 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801931a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	6819      	ldr	r1, [r3, #0]
 8019322:	4812      	ldr	r0, [pc, #72]	@ (801936c <etharp_find_entry+0x2d4>)
 8019324:	4613      	mov	r3, r2
 8019326:	005b      	lsls	r3, r3, #1
 8019328:	4413      	add	r3, r2
 801932a:	00db      	lsls	r3, r3, #3
 801932c:	4403      	add	r3, r0
 801932e:	3304      	adds	r3, #4
 8019330:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8019332:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019336:	490d      	ldr	r1, [pc, #52]	@ (801936c <etharp_find_entry+0x2d4>)
 8019338:	4613      	mov	r3, r2
 801933a:	005b      	lsls	r3, r3, #1
 801933c:	4413      	add	r3, r2
 801933e:	00db      	lsls	r3, r3, #3
 8019340:	440b      	add	r3, r1
 8019342:	3312      	adds	r3, #18
 8019344:	2200      	movs	r2, #0
 8019346:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8019348:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801934c:	4907      	ldr	r1, [pc, #28]	@ (801936c <etharp_find_entry+0x2d4>)
 801934e:	4613      	mov	r3, r2
 8019350:	005b      	lsls	r3, r3, #1
 8019352:	4413      	add	r3, r2
 8019354:	00db      	lsls	r3, r3, #3
 8019356:	440b      	add	r3, r1
 8019358:	3308      	adds	r3, #8
 801935a:	687a      	ldr	r2, [r7, #4]
 801935c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801935e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8019362:	4618      	mov	r0, r3
 8019364:	3728      	adds	r7, #40	@ 0x28
 8019366:	46bd      	mov	sp, r7
 8019368:	bd80      	pop	{r7, pc}
 801936a:	bf00      	nop
 801936c:	2000c92c 	.word	0x2000c92c
 8019370:	080215c8 	.word	0x080215c8
 8019374:	08021600 	.word	0x08021600
 8019378:	08021640 	.word	0x08021640
 801937c:	08021668 	.word	0x08021668
 8019380:	08021680 	.word	0x08021680
 8019384:	08021694 	.word	0x08021694

08019388 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8019388:	b580      	push	{r7, lr}
 801938a:	b088      	sub	sp, #32
 801938c:	af02      	add	r7, sp, #8
 801938e:	60f8      	str	r0, [r7, #12]
 8019390:	60b9      	str	r1, [r7, #8]
 8019392:	607a      	str	r2, [r7, #4]
 8019394:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8019396:	68fb      	ldr	r3, [r7, #12]
 8019398:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801939c:	2b06      	cmp	r3, #6
 801939e:	d006      	beq.n	80193ae <etharp_update_arp_entry+0x26>
 80193a0:	4b48      	ldr	r3, [pc, #288]	@ (80194c4 <etharp_update_arp_entry+0x13c>)
 80193a2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80193a6:	4948      	ldr	r1, [pc, #288]	@ (80194c8 <etharp_update_arp_entry+0x140>)
 80193a8:	4848      	ldr	r0, [pc, #288]	@ (80194cc <etharp_update_arp_entry+0x144>)
 80193aa:	f003 f877 	bl	801c49c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80193ae:	68bb      	ldr	r3, [r7, #8]
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d012      	beq.n	80193da <etharp_update_arp_entry+0x52>
 80193b4:	68bb      	ldr	r3, [r7, #8]
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	d00e      	beq.n	80193da <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80193bc:	68bb      	ldr	r3, [r7, #8]
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	68f9      	ldr	r1, [r7, #12]
 80193c2:	4618      	mov	r0, r3
 80193c4:	f001 f8cc 	bl	801a560 <ip4_addr_isbroadcast_u32>
 80193c8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d105      	bne.n	80193da <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80193ce:	68bb      	ldr	r3, [r7, #8]
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80193d6:	2be0      	cmp	r3, #224	@ 0xe0
 80193d8:	d102      	bne.n	80193e0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80193da:	f06f 030f 	mvn.w	r3, #15
 80193de:	e06c      	b.n	80194ba <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80193e0:	78fb      	ldrb	r3, [r7, #3]
 80193e2:	68fa      	ldr	r2, [r7, #12]
 80193e4:	4619      	mov	r1, r3
 80193e6:	68b8      	ldr	r0, [r7, #8]
 80193e8:	f7ff fe56 	bl	8019098 <etharp_find_entry>
 80193ec:	4603      	mov	r3, r0
 80193ee:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80193f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	da02      	bge.n	80193fe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80193f8:	8afb      	ldrh	r3, [r7, #22]
 80193fa:	b25b      	sxtb	r3, r3
 80193fc:	e05d      	b.n	80194ba <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80193fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019402:	4933      	ldr	r1, [pc, #204]	@ (80194d0 <etharp_update_arp_entry+0x148>)
 8019404:	4613      	mov	r3, r2
 8019406:	005b      	lsls	r3, r3, #1
 8019408:	4413      	add	r3, r2
 801940a:	00db      	lsls	r3, r3, #3
 801940c:	440b      	add	r3, r1
 801940e:	3314      	adds	r3, #20
 8019410:	2202      	movs	r2, #2
 8019412:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8019414:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019418:	492d      	ldr	r1, [pc, #180]	@ (80194d0 <etharp_update_arp_entry+0x148>)
 801941a:	4613      	mov	r3, r2
 801941c:	005b      	lsls	r3, r3, #1
 801941e:	4413      	add	r3, r2
 8019420:	00db      	lsls	r3, r3, #3
 8019422:	440b      	add	r3, r1
 8019424:	3308      	adds	r3, #8
 8019426:	68fa      	ldr	r2, [r7, #12]
 8019428:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801942a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801942e:	4613      	mov	r3, r2
 8019430:	005b      	lsls	r3, r3, #1
 8019432:	4413      	add	r3, r2
 8019434:	00db      	lsls	r3, r3, #3
 8019436:	3308      	adds	r3, #8
 8019438:	4a25      	ldr	r2, [pc, #148]	@ (80194d0 <etharp_update_arp_entry+0x148>)
 801943a:	4413      	add	r3, r2
 801943c:	3304      	adds	r3, #4
 801943e:	2206      	movs	r2, #6
 8019440:	6879      	ldr	r1, [r7, #4]
 8019442:	4618      	mov	r0, r3
 8019444:	f003 f9dd 	bl	801c802 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8019448:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801944c:	4920      	ldr	r1, [pc, #128]	@ (80194d0 <etharp_update_arp_entry+0x148>)
 801944e:	4613      	mov	r3, r2
 8019450:	005b      	lsls	r3, r3, #1
 8019452:	4413      	add	r3, r2
 8019454:	00db      	lsls	r3, r3, #3
 8019456:	440b      	add	r3, r1
 8019458:	3312      	adds	r3, #18
 801945a:	2200      	movs	r2, #0
 801945c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801945e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019462:	491b      	ldr	r1, [pc, #108]	@ (80194d0 <etharp_update_arp_entry+0x148>)
 8019464:	4613      	mov	r3, r2
 8019466:	005b      	lsls	r3, r3, #1
 8019468:	4413      	add	r3, r2
 801946a:	00db      	lsls	r3, r3, #3
 801946c:	440b      	add	r3, r1
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	2b00      	cmp	r3, #0
 8019472:	d021      	beq.n	80194b8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8019474:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019478:	4915      	ldr	r1, [pc, #84]	@ (80194d0 <etharp_update_arp_entry+0x148>)
 801947a:	4613      	mov	r3, r2
 801947c:	005b      	lsls	r3, r3, #1
 801947e:	4413      	add	r3, r2
 8019480:	00db      	lsls	r3, r3, #3
 8019482:	440b      	add	r3, r1
 8019484:	681b      	ldr	r3, [r3, #0]
 8019486:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8019488:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801948c:	4910      	ldr	r1, [pc, #64]	@ (80194d0 <etharp_update_arp_entry+0x148>)
 801948e:	4613      	mov	r3, r2
 8019490:	005b      	lsls	r3, r3, #1
 8019492:	4413      	add	r3, r2
 8019494:	00db      	lsls	r3, r3, #3
 8019496:	440b      	add	r3, r1
 8019498:	2200      	movs	r2, #0
 801949a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80194a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80194a6:	9300      	str	r3, [sp, #0]
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	6939      	ldr	r1, [r7, #16]
 80194ac:	68f8      	ldr	r0, [r7, #12]
 80194ae:	f001 fff5 	bl	801b49c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80194b2:	6938      	ldr	r0, [r7, #16]
 80194b4:	f7f8 ff3a 	bl	801232c <pbuf_free>
  }
  return ERR_OK;
 80194b8:	2300      	movs	r3, #0
}
 80194ba:	4618      	mov	r0, r3
 80194bc:	3718      	adds	r7, #24
 80194be:	46bd      	mov	sp, r7
 80194c0:	bd80      	pop	{r7, pc}
 80194c2:	bf00      	nop
 80194c4:	080215c8 	.word	0x080215c8
 80194c8:	080216c0 	.word	0x080216c0
 80194cc:	08021640 	.word	0x08021640
 80194d0:	2000c92c 	.word	0x2000c92c

080194d4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80194d4:	b5b0      	push	{r4, r5, r7, lr}
 80194d6:	b08a      	sub	sp, #40	@ 0x28
 80194d8:	af04      	add	r7, sp, #16
 80194da:	6078      	str	r0, [r7, #4]
 80194dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80194de:	683b      	ldr	r3, [r7, #0]
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d107      	bne.n	80194f4 <etharp_input+0x20>
 80194e4:	4b3d      	ldr	r3, [pc, #244]	@ (80195dc <etharp_input+0x108>)
 80194e6:	f240 228a 	movw	r2, #650	@ 0x28a
 80194ea:	493d      	ldr	r1, [pc, #244]	@ (80195e0 <etharp_input+0x10c>)
 80194ec:	483d      	ldr	r0, [pc, #244]	@ (80195e4 <etharp_input+0x110>)
 80194ee:	f002 ffd5 	bl	801c49c <iprintf>
 80194f2:	e06f      	b.n	80195d4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	685b      	ldr	r3, [r3, #4]
 80194f8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80194fa:	693b      	ldr	r3, [r7, #16]
 80194fc:	881b      	ldrh	r3, [r3, #0]
 80194fe:	b29b      	uxth	r3, r3
 8019500:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019504:	d10c      	bne.n	8019520 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019506:	693b      	ldr	r3, [r7, #16]
 8019508:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801950a:	2b06      	cmp	r3, #6
 801950c:	d108      	bne.n	8019520 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801950e:	693b      	ldr	r3, [r7, #16]
 8019510:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019512:	2b04      	cmp	r3, #4
 8019514:	d104      	bne.n	8019520 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8019516:	693b      	ldr	r3, [r7, #16]
 8019518:	885b      	ldrh	r3, [r3, #2]
 801951a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801951c:	2b08      	cmp	r3, #8
 801951e:	d003      	beq.n	8019528 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8019520:	6878      	ldr	r0, [r7, #4]
 8019522:	f7f8 ff03 	bl	801232c <pbuf_free>
    return;
 8019526:	e055      	b.n	80195d4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8019528:	693b      	ldr	r3, [r7, #16]
 801952a:	330e      	adds	r3, #14
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8019530:	693b      	ldr	r3, [r7, #16]
 8019532:	3318      	adds	r3, #24
 8019534:	681b      	ldr	r3, [r3, #0]
 8019536:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019538:	683b      	ldr	r3, [r7, #0]
 801953a:	3304      	adds	r3, #4
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d102      	bne.n	8019548 <etharp_input+0x74>
    for_us = 0;
 8019542:	2300      	movs	r3, #0
 8019544:	75fb      	strb	r3, [r7, #23]
 8019546:	e009      	b.n	801955c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8019548:	68ba      	ldr	r2, [r7, #8]
 801954a:	683b      	ldr	r3, [r7, #0]
 801954c:	3304      	adds	r3, #4
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	429a      	cmp	r2, r3
 8019552:	bf0c      	ite	eq
 8019554:	2301      	moveq	r3, #1
 8019556:	2300      	movne	r3, #0
 8019558:	b2db      	uxtb	r3, r3
 801955a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801955c:	693b      	ldr	r3, [r7, #16]
 801955e:	f103 0208 	add.w	r2, r3, #8
 8019562:	7dfb      	ldrb	r3, [r7, #23]
 8019564:	2b00      	cmp	r3, #0
 8019566:	d001      	beq.n	801956c <etharp_input+0x98>
 8019568:	2301      	movs	r3, #1
 801956a:	e000      	b.n	801956e <etharp_input+0x9a>
 801956c:	2302      	movs	r3, #2
 801956e:	f107 010c 	add.w	r1, r7, #12
 8019572:	6838      	ldr	r0, [r7, #0]
 8019574:	f7ff ff08 	bl	8019388 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8019578:	693b      	ldr	r3, [r7, #16]
 801957a:	88db      	ldrh	r3, [r3, #6]
 801957c:	b29b      	uxth	r3, r3
 801957e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019582:	d003      	beq.n	801958c <etharp_input+0xb8>
 8019584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019588:	d01e      	beq.n	80195c8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801958a:	e020      	b.n	80195ce <etharp_input+0xfa>
      if (for_us) {
 801958c:	7dfb      	ldrb	r3, [r7, #23]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d01c      	beq.n	80195cc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8019592:	683b      	ldr	r3, [r7, #0]
 8019594:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8019598:	693b      	ldr	r3, [r7, #16]
 801959a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801959e:	683b      	ldr	r3, [r7, #0]
 80195a0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 80195a4:	683b      	ldr	r3, [r7, #0]
 80195a6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80195a8:	693a      	ldr	r2, [r7, #16]
 80195aa:	3208      	adds	r2, #8
        etharp_raw(netif,
 80195ac:	2102      	movs	r1, #2
 80195ae:	9103      	str	r1, [sp, #12]
 80195b0:	f107 010c 	add.w	r1, r7, #12
 80195b4:	9102      	str	r1, [sp, #8]
 80195b6:	9201      	str	r2, [sp, #4]
 80195b8:	9300      	str	r3, [sp, #0]
 80195ba:	462b      	mov	r3, r5
 80195bc:	4622      	mov	r2, r4
 80195be:	4601      	mov	r1, r0
 80195c0:	6838      	ldr	r0, [r7, #0]
 80195c2:	f000 faeb 	bl	8019b9c <etharp_raw>
      break;
 80195c6:	e001      	b.n	80195cc <etharp_input+0xf8>
      break;
 80195c8:	bf00      	nop
 80195ca:	e000      	b.n	80195ce <etharp_input+0xfa>
      break;
 80195cc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80195ce:	6878      	ldr	r0, [r7, #4]
 80195d0:	f7f8 feac 	bl	801232c <pbuf_free>
}
 80195d4:	3718      	adds	r7, #24
 80195d6:	46bd      	mov	sp, r7
 80195d8:	bdb0      	pop	{r4, r5, r7, pc}
 80195da:	bf00      	nop
 80195dc:	080215c8 	.word	0x080215c8
 80195e0:	08021718 	.word	0x08021718
 80195e4:	08021640 	.word	0x08021640

080195e8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80195e8:	b580      	push	{r7, lr}
 80195ea:	b086      	sub	sp, #24
 80195ec:	af02      	add	r7, sp, #8
 80195ee:	60f8      	str	r0, [r7, #12]
 80195f0:	60b9      	str	r1, [r7, #8]
 80195f2:	4613      	mov	r3, r2
 80195f4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80195f6:	79fa      	ldrb	r2, [r7, #7]
 80195f8:	4944      	ldr	r1, [pc, #272]	@ (801970c <etharp_output_to_arp_index+0x124>)
 80195fa:	4613      	mov	r3, r2
 80195fc:	005b      	lsls	r3, r3, #1
 80195fe:	4413      	add	r3, r2
 8019600:	00db      	lsls	r3, r3, #3
 8019602:	440b      	add	r3, r1
 8019604:	3314      	adds	r3, #20
 8019606:	781b      	ldrb	r3, [r3, #0]
 8019608:	2b01      	cmp	r3, #1
 801960a:	d806      	bhi.n	801961a <etharp_output_to_arp_index+0x32>
 801960c:	4b40      	ldr	r3, [pc, #256]	@ (8019710 <etharp_output_to_arp_index+0x128>)
 801960e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8019612:	4940      	ldr	r1, [pc, #256]	@ (8019714 <etharp_output_to_arp_index+0x12c>)
 8019614:	4840      	ldr	r0, [pc, #256]	@ (8019718 <etharp_output_to_arp_index+0x130>)
 8019616:	f002 ff41 	bl	801c49c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801961a:	79fa      	ldrb	r2, [r7, #7]
 801961c:	493b      	ldr	r1, [pc, #236]	@ (801970c <etharp_output_to_arp_index+0x124>)
 801961e:	4613      	mov	r3, r2
 8019620:	005b      	lsls	r3, r3, #1
 8019622:	4413      	add	r3, r2
 8019624:	00db      	lsls	r3, r3, #3
 8019626:	440b      	add	r3, r1
 8019628:	3314      	adds	r3, #20
 801962a:	781b      	ldrb	r3, [r3, #0]
 801962c:	2b02      	cmp	r3, #2
 801962e:	d153      	bne.n	80196d8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8019630:	79fa      	ldrb	r2, [r7, #7]
 8019632:	4936      	ldr	r1, [pc, #216]	@ (801970c <etharp_output_to_arp_index+0x124>)
 8019634:	4613      	mov	r3, r2
 8019636:	005b      	lsls	r3, r3, #1
 8019638:	4413      	add	r3, r2
 801963a:	00db      	lsls	r3, r3, #3
 801963c:	440b      	add	r3, r1
 801963e:	3312      	adds	r3, #18
 8019640:	881b      	ldrh	r3, [r3, #0]
 8019642:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8019646:	d919      	bls.n	801967c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8019648:	79fa      	ldrb	r2, [r7, #7]
 801964a:	4613      	mov	r3, r2
 801964c:	005b      	lsls	r3, r3, #1
 801964e:	4413      	add	r3, r2
 8019650:	00db      	lsls	r3, r3, #3
 8019652:	4a2e      	ldr	r2, [pc, #184]	@ (801970c <etharp_output_to_arp_index+0x124>)
 8019654:	4413      	add	r3, r2
 8019656:	3304      	adds	r3, #4
 8019658:	4619      	mov	r1, r3
 801965a:	68f8      	ldr	r0, [r7, #12]
 801965c:	f000 fb4c 	bl	8019cf8 <etharp_request>
 8019660:	4603      	mov	r3, r0
 8019662:	2b00      	cmp	r3, #0
 8019664:	d138      	bne.n	80196d8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019666:	79fa      	ldrb	r2, [r7, #7]
 8019668:	4928      	ldr	r1, [pc, #160]	@ (801970c <etharp_output_to_arp_index+0x124>)
 801966a:	4613      	mov	r3, r2
 801966c:	005b      	lsls	r3, r3, #1
 801966e:	4413      	add	r3, r2
 8019670:	00db      	lsls	r3, r3, #3
 8019672:	440b      	add	r3, r1
 8019674:	3314      	adds	r3, #20
 8019676:	2203      	movs	r2, #3
 8019678:	701a      	strb	r2, [r3, #0]
 801967a:	e02d      	b.n	80196d8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801967c:	79fa      	ldrb	r2, [r7, #7]
 801967e:	4923      	ldr	r1, [pc, #140]	@ (801970c <etharp_output_to_arp_index+0x124>)
 8019680:	4613      	mov	r3, r2
 8019682:	005b      	lsls	r3, r3, #1
 8019684:	4413      	add	r3, r2
 8019686:	00db      	lsls	r3, r3, #3
 8019688:	440b      	add	r3, r1
 801968a:	3312      	adds	r3, #18
 801968c:	881b      	ldrh	r3, [r3, #0]
 801968e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8019692:	d321      	bcc.n	80196d8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8019694:	79fa      	ldrb	r2, [r7, #7]
 8019696:	4613      	mov	r3, r2
 8019698:	005b      	lsls	r3, r3, #1
 801969a:	4413      	add	r3, r2
 801969c:	00db      	lsls	r3, r3, #3
 801969e:	4a1b      	ldr	r2, [pc, #108]	@ (801970c <etharp_output_to_arp_index+0x124>)
 80196a0:	4413      	add	r3, r2
 80196a2:	1d19      	adds	r1, r3, #4
 80196a4:	79fa      	ldrb	r2, [r7, #7]
 80196a6:	4613      	mov	r3, r2
 80196a8:	005b      	lsls	r3, r3, #1
 80196aa:	4413      	add	r3, r2
 80196ac:	00db      	lsls	r3, r3, #3
 80196ae:	3308      	adds	r3, #8
 80196b0:	4a16      	ldr	r2, [pc, #88]	@ (801970c <etharp_output_to_arp_index+0x124>)
 80196b2:	4413      	add	r3, r2
 80196b4:	3304      	adds	r3, #4
 80196b6:	461a      	mov	r2, r3
 80196b8:	68f8      	ldr	r0, [r7, #12]
 80196ba:	f000 fafb 	bl	8019cb4 <etharp_request_dst>
 80196be:	4603      	mov	r3, r0
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d109      	bne.n	80196d8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80196c4:	79fa      	ldrb	r2, [r7, #7]
 80196c6:	4911      	ldr	r1, [pc, #68]	@ (801970c <etharp_output_to_arp_index+0x124>)
 80196c8:	4613      	mov	r3, r2
 80196ca:	005b      	lsls	r3, r3, #1
 80196cc:	4413      	add	r3, r2
 80196ce:	00db      	lsls	r3, r3, #3
 80196d0:	440b      	add	r3, r1
 80196d2:	3314      	adds	r3, #20
 80196d4:	2203      	movs	r2, #3
 80196d6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80196d8:	68fb      	ldr	r3, [r7, #12]
 80196da:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80196de:	79fa      	ldrb	r2, [r7, #7]
 80196e0:	4613      	mov	r3, r2
 80196e2:	005b      	lsls	r3, r3, #1
 80196e4:	4413      	add	r3, r2
 80196e6:	00db      	lsls	r3, r3, #3
 80196e8:	3308      	adds	r3, #8
 80196ea:	4a08      	ldr	r2, [pc, #32]	@ (801970c <etharp_output_to_arp_index+0x124>)
 80196ec:	4413      	add	r3, r2
 80196ee:	3304      	adds	r3, #4
 80196f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80196f4:	9200      	str	r2, [sp, #0]
 80196f6:	460a      	mov	r2, r1
 80196f8:	68b9      	ldr	r1, [r7, #8]
 80196fa:	68f8      	ldr	r0, [r7, #12]
 80196fc:	f001 fece 	bl	801b49c <ethernet_output>
 8019700:	4603      	mov	r3, r0
}
 8019702:	4618      	mov	r0, r3
 8019704:	3710      	adds	r7, #16
 8019706:	46bd      	mov	sp, r7
 8019708:	bd80      	pop	{r7, pc}
 801970a:	bf00      	nop
 801970c:	2000c92c 	.word	0x2000c92c
 8019710:	080215c8 	.word	0x080215c8
 8019714:	08021738 	.word	0x08021738
 8019718:	08021640 	.word	0x08021640

0801971c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801971c:	b580      	push	{r7, lr}
 801971e:	b08a      	sub	sp, #40	@ 0x28
 8019720:	af02      	add	r7, sp, #8
 8019722:	60f8      	str	r0, [r7, #12]
 8019724:	60b9      	str	r1, [r7, #8]
 8019726:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801972c:	68fb      	ldr	r3, [r7, #12]
 801972e:	2b00      	cmp	r3, #0
 8019730:	d106      	bne.n	8019740 <etharp_output+0x24>
 8019732:	4b73      	ldr	r3, [pc, #460]	@ (8019900 <etharp_output+0x1e4>)
 8019734:	f240 321e 	movw	r2, #798	@ 0x31e
 8019738:	4972      	ldr	r1, [pc, #456]	@ (8019904 <etharp_output+0x1e8>)
 801973a:	4873      	ldr	r0, [pc, #460]	@ (8019908 <etharp_output+0x1ec>)
 801973c:	f002 feae 	bl	801c49c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8019740:	68bb      	ldr	r3, [r7, #8]
 8019742:	2b00      	cmp	r3, #0
 8019744:	d106      	bne.n	8019754 <etharp_output+0x38>
 8019746:	4b6e      	ldr	r3, [pc, #440]	@ (8019900 <etharp_output+0x1e4>)
 8019748:	f240 321f 	movw	r2, #799	@ 0x31f
 801974c:	496f      	ldr	r1, [pc, #444]	@ (801990c <etharp_output+0x1f0>)
 801974e:	486e      	ldr	r0, [pc, #440]	@ (8019908 <etharp_output+0x1ec>)
 8019750:	f002 fea4 	bl	801c49c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	2b00      	cmp	r3, #0
 8019758:	d106      	bne.n	8019768 <etharp_output+0x4c>
 801975a:	4b69      	ldr	r3, [pc, #420]	@ (8019900 <etharp_output+0x1e4>)
 801975c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8019760:	496b      	ldr	r1, [pc, #428]	@ (8019910 <etharp_output+0x1f4>)
 8019762:	4869      	ldr	r0, [pc, #420]	@ (8019908 <etharp_output+0x1ec>)
 8019764:	f002 fe9a 	bl	801c49c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	68f9      	ldr	r1, [r7, #12]
 801976e:	4618      	mov	r0, r3
 8019770:	f000 fef6 	bl	801a560 <ip4_addr_isbroadcast_u32>
 8019774:	4603      	mov	r3, r0
 8019776:	2b00      	cmp	r3, #0
 8019778:	d002      	beq.n	8019780 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801977a:	4b66      	ldr	r3, [pc, #408]	@ (8019914 <etharp_output+0x1f8>)
 801977c:	61fb      	str	r3, [r7, #28]
 801977e:	e0af      	b.n	80198e0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019788:	2be0      	cmp	r3, #224	@ 0xe0
 801978a:	d118      	bne.n	80197be <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801978c:	2301      	movs	r3, #1
 801978e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8019790:	2300      	movs	r3, #0
 8019792:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8019794:	235e      	movs	r3, #94	@ 0x5e
 8019796:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	3301      	adds	r3, #1
 801979c:	781b      	ldrb	r3, [r3, #0]
 801979e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80197a2:	b2db      	uxtb	r3, r3
 80197a4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	3302      	adds	r3, #2
 80197aa:	781b      	ldrb	r3, [r3, #0]
 80197ac:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	3303      	adds	r3, #3
 80197b2:	781b      	ldrb	r3, [r3, #0]
 80197b4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80197b6:	f107 0310 	add.w	r3, r7, #16
 80197ba:	61fb      	str	r3, [r7, #28]
 80197bc:	e090      	b.n	80198e0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	681a      	ldr	r2, [r3, #0]
 80197c2:	68fb      	ldr	r3, [r7, #12]
 80197c4:	3304      	adds	r3, #4
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	405a      	eors	r2, r3
 80197ca:	68fb      	ldr	r3, [r7, #12]
 80197cc:	3308      	adds	r3, #8
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	4013      	ands	r3, r2
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d012      	beq.n	80197fc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80197dc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80197e0:	4293      	cmp	r3, r2
 80197e2:	d00b      	beq.n	80197fc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	330c      	adds	r3, #12
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	d003      	beq.n	80197f6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80197ee:	68fb      	ldr	r3, [r7, #12]
 80197f0:	330c      	adds	r3, #12
 80197f2:	61bb      	str	r3, [r7, #24]
 80197f4:	e002      	b.n	80197fc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80197f6:	f06f 0303 	mvn.w	r3, #3
 80197fa:	e07d      	b.n	80198f8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80197fc:	4b46      	ldr	r3, [pc, #280]	@ (8019918 <etharp_output+0x1fc>)
 80197fe:	781b      	ldrb	r3, [r3, #0]
 8019800:	4619      	mov	r1, r3
 8019802:	4a46      	ldr	r2, [pc, #280]	@ (801991c <etharp_output+0x200>)
 8019804:	460b      	mov	r3, r1
 8019806:	005b      	lsls	r3, r3, #1
 8019808:	440b      	add	r3, r1
 801980a:	00db      	lsls	r3, r3, #3
 801980c:	4413      	add	r3, r2
 801980e:	3314      	adds	r3, #20
 8019810:	781b      	ldrb	r3, [r3, #0]
 8019812:	2b01      	cmp	r3, #1
 8019814:	d925      	bls.n	8019862 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019816:	4b40      	ldr	r3, [pc, #256]	@ (8019918 <etharp_output+0x1fc>)
 8019818:	781b      	ldrb	r3, [r3, #0]
 801981a:	4619      	mov	r1, r3
 801981c:	4a3f      	ldr	r2, [pc, #252]	@ (801991c <etharp_output+0x200>)
 801981e:	460b      	mov	r3, r1
 8019820:	005b      	lsls	r3, r3, #1
 8019822:	440b      	add	r3, r1
 8019824:	00db      	lsls	r3, r3, #3
 8019826:	4413      	add	r3, r2
 8019828:	3308      	adds	r3, #8
 801982a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801982c:	68fa      	ldr	r2, [r7, #12]
 801982e:	429a      	cmp	r2, r3
 8019830:	d117      	bne.n	8019862 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8019832:	69bb      	ldr	r3, [r7, #24]
 8019834:	681a      	ldr	r2, [r3, #0]
 8019836:	4b38      	ldr	r3, [pc, #224]	@ (8019918 <etharp_output+0x1fc>)
 8019838:	781b      	ldrb	r3, [r3, #0]
 801983a:	4618      	mov	r0, r3
 801983c:	4937      	ldr	r1, [pc, #220]	@ (801991c <etharp_output+0x200>)
 801983e:	4603      	mov	r3, r0
 8019840:	005b      	lsls	r3, r3, #1
 8019842:	4403      	add	r3, r0
 8019844:	00db      	lsls	r3, r3, #3
 8019846:	440b      	add	r3, r1
 8019848:	3304      	adds	r3, #4
 801984a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801984c:	429a      	cmp	r2, r3
 801984e:	d108      	bne.n	8019862 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8019850:	4b31      	ldr	r3, [pc, #196]	@ (8019918 <etharp_output+0x1fc>)
 8019852:	781b      	ldrb	r3, [r3, #0]
 8019854:	461a      	mov	r2, r3
 8019856:	68b9      	ldr	r1, [r7, #8]
 8019858:	68f8      	ldr	r0, [r7, #12]
 801985a:	f7ff fec5 	bl	80195e8 <etharp_output_to_arp_index>
 801985e:	4603      	mov	r3, r0
 8019860:	e04a      	b.n	80198f8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019862:	2300      	movs	r3, #0
 8019864:	75fb      	strb	r3, [r7, #23]
 8019866:	e031      	b.n	80198cc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019868:	7dfa      	ldrb	r2, [r7, #23]
 801986a:	492c      	ldr	r1, [pc, #176]	@ (801991c <etharp_output+0x200>)
 801986c:	4613      	mov	r3, r2
 801986e:	005b      	lsls	r3, r3, #1
 8019870:	4413      	add	r3, r2
 8019872:	00db      	lsls	r3, r3, #3
 8019874:	440b      	add	r3, r1
 8019876:	3314      	adds	r3, #20
 8019878:	781b      	ldrb	r3, [r3, #0]
 801987a:	2b01      	cmp	r3, #1
 801987c:	d923      	bls.n	80198c6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801987e:	7dfa      	ldrb	r2, [r7, #23]
 8019880:	4926      	ldr	r1, [pc, #152]	@ (801991c <etharp_output+0x200>)
 8019882:	4613      	mov	r3, r2
 8019884:	005b      	lsls	r3, r3, #1
 8019886:	4413      	add	r3, r2
 8019888:	00db      	lsls	r3, r3, #3
 801988a:	440b      	add	r3, r1
 801988c:	3308      	adds	r3, #8
 801988e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019890:	68fa      	ldr	r2, [r7, #12]
 8019892:	429a      	cmp	r2, r3
 8019894:	d117      	bne.n	80198c6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8019896:	69bb      	ldr	r3, [r7, #24]
 8019898:	6819      	ldr	r1, [r3, #0]
 801989a:	7dfa      	ldrb	r2, [r7, #23]
 801989c:	481f      	ldr	r0, [pc, #124]	@ (801991c <etharp_output+0x200>)
 801989e:	4613      	mov	r3, r2
 80198a0:	005b      	lsls	r3, r3, #1
 80198a2:	4413      	add	r3, r2
 80198a4:	00db      	lsls	r3, r3, #3
 80198a6:	4403      	add	r3, r0
 80198a8:	3304      	adds	r3, #4
 80198aa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80198ac:	4299      	cmp	r1, r3
 80198ae:	d10a      	bne.n	80198c6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80198b0:	4a19      	ldr	r2, [pc, #100]	@ (8019918 <etharp_output+0x1fc>)
 80198b2:	7dfb      	ldrb	r3, [r7, #23]
 80198b4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80198b6:	7dfb      	ldrb	r3, [r7, #23]
 80198b8:	461a      	mov	r2, r3
 80198ba:	68b9      	ldr	r1, [r7, #8]
 80198bc:	68f8      	ldr	r0, [r7, #12]
 80198be:	f7ff fe93 	bl	80195e8 <etharp_output_to_arp_index>
 80198c2:	4603      	mov	r3, r0
 80198c4:	e018      	b.n	80198f8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80198c6:	7dfb      	ldrb	r3, [r7, #23]
 80198c8:	3301      	adds	r3, #1
 80198ca:	75fb      	strb	r3, [r7, #23]
 80198cc:	7dfb      	ldrb	r3, [r7, #23]
 80198ce:	2b09      	cmp	r3, #9
 80198d0:	d9ca      	bls.n	8019868 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80198d2:	68ba      	ldr	r2, [r7, #8]
 80198d4:	69b9      	ldr	r1, [r7, #24]
 80198d6:	68f8      	ldr	r0, [r7, #12]
 80198d8:	f000 f822 	bl	8019920 <etharp_query>
 80198dc:	4603      	mov	r3, r0
 80198de:	e00b      	b.n	80198f8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80198e0:	68fb      	ldr	r3, [r7, #12]
 80198e2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80198e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80198ea:	9300      	str	r3, [sp, #0]
 80198ec:	69fb      	ldr	r3, [r7, #28]
 80198ee:	68b9      	ldr	r1, [r7, #8]
 80198f0:	68f8      	ldr	r0, [r7, #12]
 80198f2:	f001 fdd3 	bl	801b49c <ethernet_output>
 80198f6:	4603      	mov	r3, r0
}
 80198f8:	4618      	mov	r0, r3
 80198fa:	3720      	adds	r7, #32
 80198fc:	46bd      	mov	sp, r7
 80198fe:	bd80      	pop	{r7, pc}
 8019900:	080215c8 	.word	0x080215c8
 8019904:	08021718 	.word	0x08021718
 8019908:	08021640 	.word	0x08021640
 801990c:	08021768 	.word	0x08021768
 8019910:	08021708 	.word	0x08021708
 8019914:	08021e0c 	.word	0x08021e0c
 8019918:	2000ca1c 	.word	0x2000ca1c
 801991c:	2000c92c 	.word	0x2000c92c

08019920 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8019920:	b580      	push	{r7, lr}
 8019922:	b08c      	sub	sp, #48	@ 0x30
 8019924:	af02      	add	r7, sp, #8
 8019926:	60f8      	str	r0, [r7, #12]
 8019928:	60b9      	str	r1, [r7, #8]
 801992a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801992c:	68fb      	ldr	r3, [r7, #12]
 801992e:	3326      	adds	r3, #38	@ 0x26
 8019930:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8019932:	23ff      	movs	r3, #255	@ 0xff
 8019934:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8019938:	2300      	movs	r3, #0
 801993a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801993c:	68bb      	ldr	r3, [r7, #8]
 801993e:	681b      	ldr	r3, [r3, #0]
 8019940:	68f9      	ldr	r1, [r7, #12]
 8019942:	4618      	mov	r0, r3
 8019944:	f000 fe0c 	bl	801a560 <ip4_addr_isbroadcast_u32>
 8019948:	4603      	mov	r3, r0
 801994a:	2b00      	cmp	r3, #0
 801994c:	d10c      	bne.n	8019968 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801994e:	68bb      	ldr	r3, [r7, #8]
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019956:	2be0      	cmp	r3, #224	@ 0xe0
 8019958:	d006      	beq.n	8019968 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801995a:	68bb      	ldr	r3, [r7, #8]
 801995c:	2b00      	cmp	r3, #0
 801995e:	d003      	beq.n	8019968 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019960:	68bb      	ldr	r3, [r7, #8]
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	2b00      	cmp	r3, #0
 8019966:	d102      	bne.n	801996e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019968:	f06f 030f 	mvn.w	r3, #15
 801996c:	e101      	b.n	8019b72 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801996e:	68fa      	ldr	r2, [r7, #12]
 8019970:	2101      	movs	r1, #1
 8019972:	68b8      	ldr	r0, [r7, #8]
 8019974:	f7ff fb90 	bl	8019098 <etharp_find_entry>
 8019978:	4603      	mov	r3, r0
 801997a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801997c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019980:	2b00      	cmp	r3, #0
 8019982:	da02      	bge.n	801998a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8019984:	8a7b      	ldrh	r3, [r7, #18]
 8019986:	b25b      	sxtb	r3, r3
 8019988:	e0f3      	b.n	8019b72 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801998a:	8a7b      	ldrh	r3, [r7, #18]
 801998c:	2b7e      	cmp	r3, #126	@ 0x7e
 801998e:	d906      	bls.n	801999e <etharp_query+0x7e>
 8019990:	4b7a      	ldr	r3, [pc, #488]	@ (8019b7c <etharp_query+0x25c>)
 8019992:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8019996:	497a      	ldr	r1, [pc, #488]	@ (8019b80 <etharp_query+0x260>)
 8019998:	487a      	ldr	r0, [pc, #488]	@ (8019b84 <etharp_query+0x264>)
 801999a:	f002 fd7f 	bl	801c49c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801999e:	8a7b      	ldrh	r3, [r7, #18]
 80199a0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80199a2:	7c7a      	ldrb	r2, [r7, #17]
 80199a4:	4978      	ldr	r1, [pc, #480]	@ (8019b88 <etharp_query+0x268>)
 80199a6:	4613      	mov	r3, r2
 80199a8:	005b      	lsls	r3, r3, #1
 80199aa:	4413      	add	r3, r2
 80199ac:	00db      	lsls	r3, r3, #3
 80199ae:	440b      	add	r3, r1
 80199b0:	3314      	adds	r3, #20
 80199b2:	781b      	ldrb	r3, [r3, #0]
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d115      	bne.n	80199e4 <etharp_query+0xc4>
    is_new_entry = 1;
 80199b8:	2301      	movs	r3, #1
 80199ba:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80199bc:	7c7a      	ldrb	r2, [r7, #17]
 80199be:	4972      	ldr	r1, [pc, #456]	@ (8019b88 <etharp_query+0x268>)
 80199c0:	4613      	mov	r3, r2
 80199c2:	005b      	lsls	r3, r3, #1
 80199c4:	4413      	add	r3, r2
 80199c6:	00db      	lsls	r3, r3, #3
 80199c8:	440b      	add	r3, r1
 80199ca:	3314      	adds	r3, #20
 80199cc:	2201      	movs	r2, #1
 80199ce:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80199d0:	7c7a      	ldrb	r2, [r7, #17]
 80199d2:	496d      	ldr	r1, [pc, #436]	@ (8019b88 <etharp_query+0x268>)
 80199d4:	4613      	mov	r3, r2
 80199d6:	005b      	lsls	r3, r3, #1
 80199d8:	4413      	add	r3, r2
 80199da:	00db      	lsls	r3, r3, #3
 80199dc:	440b      	add	r3, r1
 80199de:	3308      	adds	r3, #8
 80199e0:	68fa      	ldr	r2, [r7, #12]
 80199e2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80199e4:	7c7a      	ldrb	r2, [r7, #17]
 80199e6:	4968      	ldr	r1, [pc, #416]	@ (8019b88 <etharp_query+0x268>)
 80199e8:	4613      	mov	r3, r2
 80199ea:	005b      	lsls	r3, r3, #1
 80199ec:	4413      	add	r3, r2
 80199ee:	00db      	lsls	r3, r3, #3
 80199f0:	440b      	add	r3, r1
 80199f2:	3314      	adds	r3, #20
 80199f4:	781b      	ldrb	r3, [r3, #0]
 80199f6:	2b01      	cmp	r3, #1
 80199f8:	d011      	beq.n	8019a1e <etharp_query+0xfe>
 80199fa:	7c7a      	ldrb	r2, [r7, #17]
 80199fc:	4962      	ldr	r1, [pc, #392]	@ (8019b88 <etharp_query+0x268>)
 80199fe:	4613      	mov	r3, r2
 8019a00:	005b      	lsls	r3, r3, #1
 8019a02:	4413      	add	r3, r2
 8019a04:	00db      	lsls	r3, r3, #3
 8019a06:	440b      	add	r3, r1
 8019a08:	3314      	adds	r3, #20
 8019a0a:	781b      	ldrb	r3, [r3, #0]
 8019a0c:	2b01      	cmp	r3, #1
 8019a0e:	d806      	bhi.n	8019a1e <etharp_query+0xfe>
 8019a10:	4b5a      	ldr	r3, [pc, #360]	@ (8019b7c <etharp_query+0x25c>)
 8019a12:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8019a16:	495d      	ldr	r1, [pc, #372]	@ (8019b8c <etharp_query+0x26c>)
 8019a18:	485a      	ldr	r0, [pc, #360]	@ (8019b84 <etharp_query+0x264>)
 8019a1a:	f002 fd3f 	bl	801c49c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8019a1e:	6a3b      	ldr	r3, [r7, #32]
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d102      	bne.n	8019a2a <etharp_query+0x10a>
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d10c      	bne.n	8019a44 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8019a2a:	68b9      	ldr	r1, [r7, #8]
 8019a2c:	68f8      	ldr	r0, [r7, #12]
 8019a2e:	f000 f963 	bl	8019cf8 <etharp_request>
 8019a32:	4603      	mov	r3, r0
 8019a34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	d102      	bne.n	8019a44 <etharp_query+0x124>
      return result;
 8019a3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8019a42:	e096      	b.n	8019b72 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	2b00      	cmp	r3, #0
 8019a48:	d106      	bne.n	8019a58 <etharp_query+0x138>
 8019a4a:	4b4c      	ldr	r3, [pc, #304]	@ (8019b7c <etharp_query+0x25c>)
 8019a4c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8019a50:	494f      	ldr	r1, [pc, #316]	@ (8019b90 <etharp_query+0x270>)
 8019a52:	484c      	ldr	r0, [pc, #304]	@ (8019b84 <etharp_query+0x264>)
 8019a54:	f002 fd22 	bl	801c49c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8019a58:	7c7a      	ldrb	r2, [r7, #17]
 8019a5a:	494b      	ldr	r1, [pc, #300]	@ (8019b88 <etharp_query+0x268>)
 8019a5c:	4613      	mov	r3, r2
 8019a5e:	005b      	lsls	r3, r3, #1
 8019a60:	4413      	add	r3, r2
 8019a62:	00db      	lsls	r3, r3, #3
 8019a64:	440b      	add	r3, r1
 8019a66:	3314      	adds	r3, #20
 8019a68:	781b      	ldrb	r3, [r3, #0]
 8019a6a:	2b01      	cmp	r3, #1
 8019a6c:	d917      	bls.n	8019a9e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8019a6e:	4a49      	ldr	r2, [pc, #292]	@ (8019b94 <etharp_query+0x274>)
 8019a70:	7c7b      	ldrb	r3, [r7, #17]
 8019a72:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8019a74:	7c7a      	ldrb	r2, [r7, #17]
 8019a76:	4613      	mov	r3, r2
 8019a78:	005b      	lsls	r3, r3, #1
 8019a7a:	4413      	add	r3, r2
 8019a7c:	00db      	lsls	r3, r3, #3
 8019a7e:	3308      	adds	r3, #8
 8019a80:	4a41      	ldr	r2, [pc, #260]	@ (8019b88 <etharp_query+0x268>)
 8019a82:	4413      	add	r3, r2
 8019a84:	3304      	adds	r3, #4
 8019a86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019a8a:	9200      	str	r2, [sp, #0]
 8019a8c:	697a      	ldr	r2, [r7, #20]
 8019a8e:	6879      	ldr	r1, [r7, #4]
 8019a90:	68f8      	ldr	r0, [r7, #12]
 8019a92:	f001 fd03 	bl	801b49c <ethernet_output>
 8019a96:	4603      	mov	r3, r0
 8019a98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019a9c:	e067      	b.n	8019b6e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019a9e:	7c7a      	ldrb	r2, [r7, #17]
 8019aa0:	4939      	ldr	r1, [pc, #228]	@ (8019b88 <etharp_query+0x268>)
 8019aa2:	4613      	mov	r3, r2
 8019aa4:	005b      	lsls	r3, r3, #1
 8019aa6:	4413      	add	r3, r2
 8019aa8:	00db      	lsls	r3, r3, #3
 8019aaa:	440b      	add	r3, r1
 8019aac:	3314      	adds	r3, #20
 8019aae:	781b      	ldrb	r3, [r3, #0]
 8019ab0:	2b01      	cmp	r3, #1
 8019ab2:	d15c      	bne.n	8019b6e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019ab4:	2300      	movs	r3, #0
 8019ab6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019abc:	e01c      	b.n	8019af8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019abe:	69fb      	ldr	r3, [r7, #28]
 8019ac0:	895a      	ldrh	r2, [r3, #10]
 8019ac2:	69fb      	ldr	r3, [r7, #28]
 8019ac4:	891b      	ldrh	r3, [r3, #8]
 8019ac6:	429a      	cmp	r2, r3
 8019ac8:	d10a      	bne.n	8019ae0 <etharp_query+0x1c0>
 8019aca:	69fb      	ldr	r3, [r7, #28]
 8019acc:	681b      	ldr	r3, [r3, #0]
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	d006      	beq.n	8019ae0 <etharp_query+0x1c0>
 8019ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8019b7c <etharp_query+0x25c>)
 8019ad4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8019ad8:	492f      	ldr	r1, [pc, #188]	@ (8019b98 <etharp_query+0x278>)
 8019ada:	482a      	ldr	r0, [pc, #168]	@ (8019b84 <etharp_query+0x264>)
 8019adc:	f002 fcde 	bl	801c49c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019ae0:	69fb      	ldr	r3, [r7, #28]
 8019ae2:	7b1b      	ldrb	r3, [r3, #12]
 8019ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d002      	beq.n	8019af2 <etharp_query+0x1d2>
        copy_needed = 1;
 8019aec:	2301      	movs	r3, #1
 8019aee:	61bb      	str	r3, [r7, #24]
        break;
 8019af0:	e005      	b.n	8019afe <etharp_query+0x1de>
      }
      p = p->next;
 8019af2:	69fb      	ldr	r3, [r7, #28]
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019af8:	69fb      	ldr	r3, [r7, #28]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d1df      	bne.n	8019abe <etharp_query+0x19e>
    }
    if (copy_needed) {
 8019afe:	69bb      	ldr	r3, [r7, #24]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d007      	beq.n	8019b14 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019b04:	687a      	ldr	r2, [r7, #4]
 8019b06:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8019b0a:	200e      	movs	r0, #14
 8019b0c:	f7f8 fe76 	bl	80127fc <pbuf_clone>
 8019b10:	61f8      	str	r0, [r7, #28]
 8019b12:	e004      	b.n	8019b1e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019b18:	69f8      	ldr	r0, [r7, #28]
 8019b1a:	f7f8 fcad 	bl	8012478 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8019b1e:	69fb      	ldr	r3, [r7, #28]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d021      	beq.n	8019b68 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019b24:	7c7a      	ldrb	r2, [r7, #17]
 8019b26:	4918      	ldr	r1, [pc, #96]	@ (8019b88 <etharp_query+0x268>)
 8019b28:	4613      	mov	r3, r2
 8019b2a:	005b      	lsls	r3, r3, #1
 8019b2c:	4413      	add	r3, r2
 8019b2e:	00db      	lsls	r3, r3, #3
 8019b30:	440b      	add	r3, r1
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d00a      	beq.n	8019b4e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8019b38:	7c7a      	ldrb	r2, [r7, #17]
 8019b3a:	4913      	ldr	r1, [pc, #76]	@ (8019b88 <etharp_query+0x268>)
 8019b3c:	4613      	mov	r3, r2
 8019b3e:	005b      	lsls	r3, r3, #1
 8019b40:	4413      	add	r3, r2
 8019b42:	00db      	lsls	r3, r3, #3
 8019b44:	440b      	add	r3, r1
 8019b46:	681b      	ldr	r3, [r3, #0]
 8019b48:	4618      	mov	r0, r3
 8019b4a:	f7f8 fbef 	bl	801232c <pbuf_free>
      }
      arp_table[i].q = p;
 8019b4e:	7c7a      	ldrb	r2, [r7, #17]
 8019b50:	490d      	ldr	r1, [pc, #52]	@ (8019b88 <etharp_query+0x268>)
 8019b52:	4613      	mov	r3, r2
 8019b54:	005b      	lsls	r3, r3, #1
 8019b56:	4413      	add	r3, r2
 8019b58:	00db      	lsls	r3, r3, #3
 8019b5a:	440b      	add	r3, r1
 8019b5c:	69fa      	ldr	r2, [r7, #28]
 8019b5e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019b60:	2300      	movs	r3, #0
 8019b62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019b66:	e002      	b.n	8019b6e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8019b68:	23ff      	movs	r3, #255	@ 0xff
 8019b6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8019b6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8019b72:	4618      	mov	r0, r3
 8019b74:	3728      	adds	r7, #40	@ 0x28
 8019b76:	46bd      	mov	sp, r7
 8019b78:	bd80      	pop	{r7, pc}
 8019b7a:	bf00      	nop
 8019b7c:	080215c8 	.word	0x080215c8
 8019b80:	08021774 	.word	0x08021774
 8019b84:	08021640 	.word	0x08021640
 8019b88:	2000c92c 	.word	0x2000c92c
 8019b8c:	08021784 	.word	0x08021784
 8019b90:	08021768 	.word	0x08021768
 8019b94:	2000ca1c 	.word	0x2000ca1c
 8019b98:	080217ac 	.word	0x080217ac

08019b9c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019b9c:	b580      	push	{r7, lr}
 8019b9e:	b08a      	sub	sp, #40	@ 0x28
 8019ba0:	af02      	add	r7, sp, #8
 8019ba2:	60f8      	str	r0, [r7, #12]
 8019ba4:	60b9      	str	r1, [r7, #8]
 8019ba6:	607a      	str	r2, [r7, #4]
 8019ba8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8019baa:	2300      	movs	r3, #0
 8019bac:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019bae:	68fb      	ldr	r3, [r7, #12]
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	d106      	bne.n	8019bc2 <etharp_raw+0x26>
 8019bb4:	4b3a      	ldr	r3, [pc, #232]	@ (8019ca0 <etharp_raw+0x104>)
 8019bb6:	f240 4257 	movw	r2, #1111	@ 0x457
 8019bba:	493a      	ldr	r1, [pc, #232]	@ (8019ca4 <etharp_raw+0x108>)
 8019bbc:	483a      	ldr	r0, [pc, #232]	@ (8019ca8 <etharp_raw+0x10c>)
 8019bbe:	f002 fc6d 	bl	801c49c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8019bc2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019bc6:	211c      	movs	r1, #28
 8019bc8:	200e      	movs	r0, #14
 8019bca:	f7f8 f8cb 	bl	8011d64 <pbuf_alloc>
 8019bce:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019bd0:	69bb      	ldr	r3, [r7, #24]
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d102      	bne.n	8019bdc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8019bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8019bda:	e05d      	b.n	8019c98 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019bdc:	69bb      	ldr	r3, [r7, #24]
 8019bde:	895b      	ldrh	r3, [r3, #10]
 8019be0:	2b1b      	cmp	r3, #27
 8019be2:	d806      	bhi.n	8019bf2 <etharp_raw+0x56>
 8019be4:	4b2e      	ldr	r3, [pc, #184]	@ (8019ca0 <etharp_raw+0x104>)
 8019be6:	f240 4262 	movw	r2, #1122	@ 0x462
 8019bea:	4930      	ldr	r1, [pc, #192]	@ (8019cac <etharp_raw+0x110>)
 8019bec:	482e      	ldr	r0, [pc, #184]	@ (8019ca8 <etharp_raw+0x10c>)
 8019bee:	f002 fc55 	bl	801c49c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8019bf2:	69bb      	ldr	r3, [r7, #24]
 8019bf4:	685b      	ldr	r3, [r3, #4]
 8019bf6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019bf8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019bfa:	4618      	mov	r0, r3
 8019bfc:	f7f6 ffd6 	bl	8010bac <lwip_htons>
 8019c00:	4603      	mov	r3, r0
 8019c02:	461a      	mov	r2, r3
 8019c04:	697b      	ldr	r3, [r7, #20]
 8019c06:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019c08:	68fb      	ldr	r3, [r7, #12]
 8019c0a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8019c0e:	2b06      	cmp	r3, #6
 8019c10:	d006      	beq.n	8019c20 <etharp_raw+0x84>
 8019c12:	4b23      	ldr	r3, [pc, #140]	@ (8019ca0 <etharp_raw+0x104>)
 8019c14:	f240 4269 	movw	r2, #1129	@ 0x469
 8019c18:	4925      	ldr	r1, [pc, #148]	@ (8019cb0 <etharp_raw+0x114>)
 8019c1a:	4823      	ldr	r0, [pc, #140]	@ (8019ca8 <etharp_raw+0x10c>)
 8019c1c:	f002 fc3e 	bl	801c49c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8019c20:	697b      	ldr	r3, [r7, #20]
 8019c22:	3308      	adds	r3, #8
 8019c24:	2206      	movs	r2, #6
 8019c26:	6839      	ldr	r1, [r7, #0]
 8019c28:	4618      	mov	r0, r3
 8019c2a:	f002 fdea 	bl	801c802 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8019c2e:	697b      	ldr	r3, [r7, #20]
 8019c30:	3312      	adds	r3, #18
 8019c32:	2206      	movs	r2, #6
 8019c34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019c36:	4618      	mov	r0, r3
 8019c38:	f002 fde3 	bl	801c802 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019c3c:	697b      	ldr	r3, [r7, #20]
 8019c3e:	330e      	adds	r3, #14
 8019c40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019c42:	6812      	ldr	r2, [r2, #0]
 8019c44:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8019c46:	697b      	ldr	r3, [r7, #20]
 8019c48:	3318      	adds	r3, #24
 8019c4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019c4c:	6812      	ldr	r2, [r2, #0]
 8019c4e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8019c50:	697b      	ldr	r3, [r7, #20]
 8019c52:	2200      	movs	r2, #0
 8019c54:	701a      	strb	r2, [r3, #0]
 8019c56:	2200      	movs	r2, #0
 8019c58:	f042 0201 	orr.w	r2, r2, #1
 8019c5c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8019c5e:	697b      	ldr	r3, [r7, #20]
 8019c60:	2200      	movs	r2, #0
 8019c62:	f042 0208 	orr.w	r2, r2, #8
 8019c66:	709a      	strb	r2, [r3, #2]
 8019c68:	2200      	movs	r2, #0
 8019c6a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019c6c:	697b      	ldr	r3, [r7, #20]
 8019c6e:	2206      	movs	r2, #6
 8019c70:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8019c72:	697b      	ldr	r3, [r7, #20]
 8019c74:	2204      	movs	r2, #4
 8019c76:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019c78:	f640 0306 	movw	r3, #2054	@ 0x806
 8019c7c:	9300      	str	r3, [sp, #0]
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	68ba      	ldr	r2, [r7, #8]
 8019c82:	69b9      	ldr	r1, [r7, #24]
 8019c84:	68f8      	ldr	r0, [r7, #12]
 8019c86:	f001 fc09 	bl	801b49c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019c8a:	69b8      	ldr	r0, [r7, #24]
 8019c8c:	f7f8 fb4e 	bl	801232c <pbuf_free>
  p = NULL;
 8019c90:	2300      	movs	r3, #0
 8019c92:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8019c94:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019c98:	4618      	mov	r0, r3
 8019c9a:	3720      	adds	r7, #32
 8019c9c:	46bd      	mov	sp, r7
 8019c9e:	bd80      	pop	{r7, pc}
 8019ca0:	080215c8 	.word	0x080215c8
 8019ca4:	08021718 	.word	0x08021718
 8019ca8:	08021640 	.word	0x08021640
 8019cac:	080217c8 	.word	0x080217c8
 8019cb0:	080217fc 	.word	0x080217fc

08019cb4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019cb4:	b580      	push	{r7, lr}
 8019cb6:	b088      	sub	sp, #32
 8019cb8:	af04      	add	r7, sp, #16
 8019cba:	60f8      	str	r0, [r7, #12]
 8019cbc:	60b9      	str	r1, [r7, #8]
 8019cbe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8019ccc:	68fb      	ldr	r3, [r7, #12]
 8019cce:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019cd0:	2201      	movs	r2, #1
 8019cd2:	9203      	str	r2, [sp, #12]
 8019cd4:	68ba      	ldr	r2, [r7, #8]
 8019cd6:	9202      	str	r2, [sp, #8]
 8019cd8:	4a06      	ldr	r2, [pc, #24]	@ (8019cf4 <etharp_request_dst+0x40>)
 8019cda:	9201      	str	r2, [sp, #4]
 8019cdc:	9300      	str	r3, [sp, #0]
 8019cde:	4603      	mov	r3, r0
 8019ce0:	687a      	ldr	r2, [r7, #4]
 8019ce2:	68f8      	ldr	r0, [r7, #12]
 8019ce4:	f7ff ff5a 	bl	8019b9c <etharp_raw>
 8019ce8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019cea:	4618      	mov	r0, r3
 8019cec:	3710      	adds	r7, #16
 8019cee:	46bd      	mov	sp, r7
 8019cf0:	bd80      	pop	{r7, pc}
 8019cf2:	bf00      	nop
 8019cf4:	08021e14 	.word	0x08021e14

08019cf8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019cf8:	b580      	push	{r7, lr}
 8019cfa:	b082      	sub	sp, #8
 8019cfc:	af00      	add	r7, sp, #0
 8019cfe:	6078      	str	r0, [r7, #4]
 8019d00:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8019d02:	4a05      	ldr	r2, [pc, #20]	@ (8019d18 <etharp_request+0x20>)
 8019d04:	6839      	ldr	r1, [r7, #0]
 8019d06:	6878      	ldr	r0, [r7, #4]
 8019d08:	f7ff ffd4 	bl	8019cb4 <etharp_request_dst>
 8019d0c:	4603      	mov	r3, r0
}
 8019d0e:	4618      	mov	r0, r3
 8019d10:	3708      	adds	r7, #8
 8019d12:	46bd      	mov	sp, r7
 8019d14:	bd80      	pop	{r7, pc}
 8019d16:	bf00      	nop
 8019d18:	08021e0c 	.word	0x08021e0c

08019d1c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8019d1c:	b580      	push	{r7, lr}
 8019d1e:	b08e      	sub	sp, #56	@ 0x38
 8019d20:	af04      	add	r7, sp, #16
 8019d22:	6078      	str	r0, [r7, #4]
 8019d24:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019d26:	4b78      	ldr	r3, [pc, #480]	@ (8019f08 <icmp_input+0x1ec>)
 8019d28:	689b      	ldr	r3, [r3, #8]
 8019d2a:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 8019d2c:	6a3b      	ldr	r3, [r7, #32]
 8019d2e:	781b      	ldrb	r3, [r3, #0]
 8019d30:	f003 030f 	and.w	r3, r3, #15
 8019d34:	b2db      	uxtb	r3, r3
 8019d36:	009b      	lsls	r3, r3, #2
 8019d38:	b2db      	uxtb	r3, r3
 8019d3a:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 8019d3c:	8bfb      	ldrh	r3, [r7, #30]
 8019d3e:	2b13      	cmp	r3, #19
 8019d40:	f240 80cf 	bls.w	8019ee2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	895b      	ldrh	r3, [r3, #10]
 8019d48:	2b03      	cmp	r3, #3
 8019d4a:	f240 80cc 	bls.w	8019ee6 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	685b      	ldr	r3, [r3, #4]
 8019d52:	781b      	ldrb	r3, [r3, #0]
 8019d54:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019d56:	7f7b      	ldrb	r3, [r7, #29]
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	f000 80bb 	beq.w	8019ed4 <icmp_input+0x1b8>
 8019d5e:	2b08      	cmp	r3, #8
 8019d60:	f040 80bb 	bne.w	8019eda <icmp_input+0x1be>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019d64:	4b69      	ldr	r3, [pc, #420]	@ (8019f0c <icmp_input+0x1f0>)
 8019d66:	627b      	str	r3, [r7, #36]	@ 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019d68:	4b67      	ldr	r3, [pc, #412]	@ (8019f08 <icmp_input+0x1ec>)
 8019d6a:	695b      	ldr	r3, [r3, #20]
 8019d6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019d70:	2be0      	cmp	r3, #224	@ 0xe0
 8019d72:	d102      	bne.n	8019d7a <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 8019d74:	683b      	ldr	r3, [r7, #0]
 8019d76:	3304      	adds	r3, #4
 8019d78:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019d7a:	4b63      	ldr	r3, [pc, #396]	@ (8019f08 <icmp_input+0x1ec>)
 8019d7c:	695b      	ldr	r3, [r3, #20]
 8019d7e:	4a62      	ldr	r2, [pc, #392]	@ (8019f08 <icmp_input+0x1ec>)
 8019d80:	6812      	ldr	r2, [r2, #0]
 8019d82:	4611      	mov	r1, r2
 8019d84:	4618      	mov	r0, r3
 8019d86:	f000 fbeb 	bl	801a560 <ip4_addr_isbroadcast_u32>
 8019d8a:	4603      	mov	r3, r0
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d002      	beq.n	8019d96 <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 8019d90:	683b      	ldr	r3, [r7, #0]
 8019d92:	3304      	adds	r3, #4
 8019d94:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	891b      	ldrh	r3, [r3, #8]
 8019d9a:	2b07      	cmp	r3, #7
 8019d9c:	f240 80a5 	bls.w	8019eea <icmp_input+0x1ce>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019da0:	8bfb      	ldrh	r3, [r7, #30]
 8019da2:	330e      	adds	r3, #14
 8019da4:	4619      	mov	r1, r3
 8019da6:	6878      	ldr	r0, [r7, #4]
 8019da8:	f7f8 fa2a 	bl	8012200 <pbuf_add_header>
 8019dac:	4603      	mov	r3, r0
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d04b      	beq.n	8019e4a <icmp_input+0x12e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	891a      	ldrh	r2, [r3, #8]
 8019db6:	8bfb      	ldrh	r3, [r7, #30]
 8019db8:	4413      	add	r3, r2
 8019dba:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	891b      	ldrh	r3, [r3, #8]
 8019dc0:	8b7a      	ldrh	r2, [r7, #26]
 8019dc2:	429a      	cmp	r2, r3
 8019dc4:	f0c0 8096 	bcc.w	8019ef4 <icmp_input+0x1d8>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019dc8:	8b7b      	ldrh	r3, [r7, #26]
 8019dca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019dce:	4619      	mov	r1, r3
 8019dd0:	200e      	movs	r0, #14
 8019dd2:	f7f7 ffc7 	bl	8011d64 <pbuf_alloc>
 8019dd6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019dd8:	697b      	ldr	r3, [r7, #20]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	f000 808c 	beq.w	8019ef8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019de0:	697b      	ldr	r3, [r7, #20]
 8019de2:	895b      	ldrh	r3, [r3, #10]
 8019de4:	461a      	mov	r2, r3
 8019de6:	8bfb      	ldrh	r3, [r7, #30]
 8019de8:	3308      	adds	r3, #8
 8019dea:	429a      	cmp	r2, r3
 8019dec:	d203      	bcs.n	8019df6 <icmp_input+0xda>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019dee:	6978      	ldr	r0, [r7, #20]
 8019df0:	f7f8 fa9c 	bl	801232c <pbuf_free>
          goto icmperr;
 8019df4:	e081      	b.n	8019efa <icmp_input+0x1de>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019df6:	697b      	ldr	r3, [r7, #20]
 8019df8:	685b      	ldr	r3, [r3, #4]
 8019dfa:	8bfa      	ldrh	r2, [r7, #30]
 8019dfc:	6a39      	ldr	r1, [r7, #32]
 8019dfe:	4618      	mov	r0, r3
 8019e00:	f002 fcff 	bl	801c802 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019e04:	8bfb      	ldrh	r3, [r7, #30]
 8019e06:	4619      	mov	r1, r3
 8019e08:	6978      	ldr	r0, [r7, #20]
 8019e0a:	f7f8 fa09 	bl	8012220 <pbuf_remove_header>
 8019e0e:	4603      	mov	r3, r0
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d009      	beq.n	8019e28 <icmp_input+0x10c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019e14:	4b3e      	ldr	r3, [pc, #248]	@ (8019f10 <icmp_input+0x1f4>)
 8019e16:	22b6      	movs	r2, #182	@ 0xb6
 8019e18:	493e      	ldr	r1, [pc, #248]	@ (8019f14 <icmp_input+0x1f8>)
 8019e1a:	483f      	ldr	r0, [pc, #252]	@ (8019f18 <icmp_input+0x1fc>)
 8019e1c:	f002 fb3e 	bl	801c49c <iprintf>
          pbuf_free(r);
 8019e20:	6978      	ldr	r0, [r7, #20]
 8019e22:	f7f8 fa83 	bl	801232c <pbuf_free>
          goto icmperr;
 8019e26:	e068      	b.n	8019efa <icmp_input+0x1de>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019e28:	6879      	ldr	r1, [r7, #4]
 8019e2a:	6978      	ldr	r0, [r7, #20]
 8019e2c:	f7f8 fba2 	bl	8012574 <pbuf_copy>
 8019e30:	4603      	mov	r3, r0
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d003      	beq.n	8019e3e <icmp_input+0x122>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019e36:	6978      	ldr	r0, [r7, #20]
 8019e38:	f7f8 fa78 	bl	801232c <pbuf_free>
          goto icmperr;
 8019e3c:	e05d      	b.n	8019efa <icmp_input+0x1de>
        }
        /* free the original p */
        pbuf_free(p);
 8019e3e:	6878      	ldr	r0, [r7, #4]
 8019e40:	f7f8 fa74 	bl	801232c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019e44:	697b      	ldr	r3, [r7, #20]
 8019e46:	607b      	str	r3, [r7, #4]
 8019e48:	e00f      	b.n	8019e6a <icmp_input+0x14e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019e4a:	8bfb      	ldrh	r3, [r7, #30]
 8019e4c:	330e      	adds	r3, #14
 8019e4e:	4619      	mov	r1, r3
 8019e50:	6878      	ldr	r0, [r7, #4]
 8019e52:	f7f8 f9e5 	bl	8012220 <pbuf_remove_header>
 8019e56:	4603      	mov	r3, r0
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d006      	beq.n	8019e6a <icmp_input+0x14e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8019f10 <icmp_input+0x1f4>)
 8019e5e:	22c7      	movs	r2, #199	@ 0xc7
 8019e60:	492e      	ldr	r1, [pc, #184]	@ (8019f1c <icmp_input+0x200>)
 8019e62:	482d      	ldr	r0, [pc, #180]	@ (8019f18 <icmp_input+0x1fc>)
 8019e64:	f002 fb1a 	bl	801c49c <iprintf>
          goto icmperr;
 8019e68:	e047      	b.n	8019efa <icmp_input+0x1de>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	685b      	ldr	r3, [r3, #4]
 8019e6e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019e70:	8bfb      	ldrh	r3, [r7, #30]
 8019e72:	4619      	mov	r1, r3
 8019e74:	6878      	ldr	r0, [r7, #4]
 8019e76:	f7f8 f9c3 	bl	8012200 <pbuf_add_header>
 8019e7a:	4603      	mov	r3, r0
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d12b      	bne.n	8019ed8 <icmp_input+0x1bc>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	685b      	ldr	r3, [r3, #4]
 8019e84:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e88:	681a      	ldr	r2, [r3, #0]
 8019e8a:	68fb      	ldr	r3, [r7, #12]
 8019e8c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8019f08 <icmp_input+0x1ec>)
 8019e90:	691a      	ldr	r2, [r3, #16]
 8019e92:	68fb      	ldr	r3, [r7, #12]
 8019e94:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019e96:	693b      	ldr	r3, [r7, #16]
 8019e98:	2200      	movs	r2, #0
 8019e9a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8019e9c:	693b      	ldr	r3, [r7, #16]
 8019e9e:	2200      	movs	r2, #0
 8019ea0:	709a      	strb	r2, [r3, #2]
 8019ea2:	2200      	movs	r2, #0
 8019ea4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	22ff      	movs	r2, #255	@ 0xff
 8019eaa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	2200      	movs	r2, #0
 8019eb0:	729a      	strb	r2, [r3, #10]
 8019eb2:	2200      	movs	r2, #0
 8019eb4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019eb6:	683b      	ldr	r3, [r7, #0]
 8019eb8:	9302      	str	r3, [sp, #8]
 8019eba:	2301      	movs	r3, #1
 8019ebc:	9301      	str	r3, [sp, #4]
 8019ebe:	2300      	movs	r3, #0
 8019ec0:	9300      	str	r3, [sp, #0]
 8019ec2:	23ff      	movs	r3, #255	@ 0xff
 8019ec4:	2200      	movs	r2, #0
 8019ec6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019ec8:	6878      	ldr	r0, [r7, #4]
 8019eca:	f000 fa71 	bl	801a3b0 <ip4_output_if>
 8019ece:	4603      	mov	r3, r0
 8019ed0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019ed2:	e001      	b.n	8019ed8 <icmp_input+0x1bc>
      break;
 8019ed4:	bf00      	nop
 8019ed6:	e000      	b.n	8019eda <icmp_input+0x1be>
      break;
 8019ed8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019eda:	6878      	ldr	r0, [r7, #4]
 8019edc:	f7f8 fa26 	bl	801232c <pbuf_free>
  return;
 8019ee0:	e00f      	b.n	8019f02 <icmp_input+0x1e6>
    goto lenerr;
 8019ee2:	bf00      	nop
 8019ee4:	e002      	b.n	8019eec <icmp_input+0x1d0>
    goto lenerr;
 8019ee6:	bf00      	nop
 8019ee8:	e000      	b.n	8019eec <icmp_input+0x1d0>
        goto lenerr;
 8019eea:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019eec:	6878      	ldr	r0, [r7, #4]
 8019eee:	f7f8 fa1d 	bl	801232c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019ef2:	e006      	b.n	8019f02 <icmp_input+0x1e6>
          goto icmperr;
 8019ef4:	bf00      	nop
 8019ef6:	e000      	b.n	8019efa <icmp_input+0x1de>
          goto icmperr;
 8019ef8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019efa:	6878      	ldr	r0, [r7, #4]
 8019efc:	f7f8 fa16 	bl	801232c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019f00:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019f02:	3728      	adds	r7, #40	@ 0x28
 8019f04:	46bd      	mov	sp, r7
 8019f06:	bd80      	pop	{r7, pc}
 8019f08:	20009178 	.word	0x20009178
 8019f0c:	2000918c 	.word	0x2000918c
 8019f10:	08021840 	.word	0x08021840
 8019f14:	08021878 	.word	0x08021878
 8019f18:	080218b0 	.word	0x080218b0
 8019f1c:	080218d8 	.word	0x080218d8

08019f20 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019f20:	b580      	push	{r7, lr}
 8019f22:	b082      	sub	sp, #8
 8019f24:	af00      	add	r7, sp, #0
 8019f26:	6078      	str	r0, [r7, #4]
 8019f28:	460b      	mov	r3, r1
 8019f2a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019f2c:	78fb      	ldrb	r3, [r7, #3]
 8019f2e:	461a      	mov	r2, r3
 8019f30:	2103      	movs	r1, #3
 8019f32:	6878      	ldr	r0, [r7, #4]
 8019f34:	f000 f814 	bl	8019f60 <icmp_send_response>
}
 8019f38:	bf00      	nop
 8019f3a:	3708      	adds	r7, #8
 8019f3c:	46bd      	mov	sp, r7
 8019f3e:	bd80      	pop	{r7, pc}

08019f40 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019f40:	b580      	push	{r7, lr}
 8019f42:	b082      	sub	sp, #8
 8019f44:	af00      	add	r7, sp, #0
 8019f46:	6078      	str	r0, [r7, #4]
 8019f48:	460b      	mov	r3, r1
 8019f4a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8019f4c:	78fb      	ldrb	r3, [r7, #3]
 8019f4e:	461a      	mov	r2, r3
 8019f50:	210b      	movs	r1, #11
 8019f52:	6878      	ldr	r0, [r7, #4]
 8019f54:	f000 f804 	bl	8019f60 <icmp_send_response>
}
 8019f58:	bf00      	nop
 8019f5a:	3708      	adds	r7, #8
 8019f5c:	46bd      	mov	sp, r7
 8019f5e:	bd80      	pop	{r7, pc}

08019f60 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019f60:	b580      	push	{r7, lr}
 8019f62:	b08c      	sub	sp, #48	@ 0x30
 8019f64:	af04      	add	r7, sp, #16
 8019f66:	6078      	str	r0, [r7, #4]
 8019f68:	460b      	mov	r3, r1
 8019f6a:	70fb      	strb	r3, [r7, #3]
 8019f6c:	4613      	mov	r3, r2
 8019f6e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019f70:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019f74:	2124      	movs	r1, #36	@ 0x24
 8019f76:	2022      	movs	r0, #34	@ 0x22
 8019f78:	f7f7 fef4 	bl	8011d64 <pbuf_alloc>
 8019f7c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8019f7e:	69fb      	ldr	r3, [r7, #28]
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d04c      	beq.n	801a01e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019f84:	69fb      	ldr	r3, [r7, #28]
 8019f86:	895b      	ldrh	r3, [r3, #10]
 8019f88:	2b23      	cmp	r3, #35	@ 0x23
 8019f8a:	d806      	bhi.n	8019f9a <icmp_send_response+0x3a>
 8019f8c:	4b26      	ldr	r3, [pc, #152]	@ (801a028 <icmp_send_response+0xc8>)
 8019f8e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8019f92:	4926      	ldr	r1, [pc, #152]	@ (801a02c <icmp_send_response+0xcc>)
 8019f94:	4826      	ldr	r0, [pc, #152]	@ (801a030 <icmp_send_response+0xd0>)
 8019f96:	f002 fa81 	bl	801c49c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	685b      	ldr	r3, [r3, #4]
 8019f9e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019fa0:	69fb      	ldr	r3, [r7, #28]
 8019fa2:	685b      	ldr	r3, [r3, #4]
 8019fa4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8019fa6:	697b      	ldr	r3, [r7, #20]
 8019fa8:	78fa      	ldrb	r2, [r7, #3]
 8019faa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019fac:	697b      	ldr	r3, [r7, #20]
 8019fae:	78ba      	ldrb	r2, [r7, #2]
 8019fb0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019fb2:	697b      	ldr	r3, [r7, #20]
 8019fb4:	2200      	movs	r2, #0
 8019fb6:	711a      	strb	r2, [r3, #4]
 8019fb8:	2200      	movs	r2, #0
 8019fba:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019fbc:	697b      	ldr	r3, [r7, #20]
 8019fbe:	2200      	movs	r2, #0
 8019fc0:	719a      	strb	r2, [r3, #6]
 8019fc2:	2200      	movs	r2, #0
 8019fc4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019fc6:	69fb      	ldr	r3, [r7, #28]
 8019fc8:	685b      	ldr	r3, [r3, #4]
 8019fca:	f103 0008 	add.w	r0, r3, #8
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	685b      	ldr	r3, [r3, #4]
 8019fd2:	221c      	movs	r2, #28
 8019fd4:	4619      	mov	r1, r3
 8019fd6:	f002 fc14 	bl	801c802 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019fda:	69bb      	ldr	r3, [r7, #24]
 8019fdc:	68db      	ldr	r3, [r3, #12]
 8019fde:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019fe0:	f107 030c 	add.w	r3, r7, #12
 8019fe4:	4618      	mov	r0, r3
 8019fe6:	f000 f825 	bl	801a034 <ip4_route>
 8019fea:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019fec:	693b      	ldr	r3, [r7, #16]
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	d011      	beq.n	801a016 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8019ff2:	697b      	ldr	r3, [r7, #20]
 8019ff4:	2200      	movs	r2, #0
 8019ff6:	709a      	strb	r2, [r3, #2]
 8019ff8:	2200      	movs	r2, #0
 8019ffa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019ffc:	f107 020c 	add.w	r2, r7, #12
 801a000:	693b      	ldr	r3, [r7, #16]
 801a002:	9302      	str	r3, [sp, #8]
 801a004:	2301      	movs	r3, #1
 801a006:	9301      	str	r3, [sp, #4]
 801a008:	2300      	movs	r3, #0
 801a00a:	9300      	str	r3, [sp, #0]
 801a00c:	23ff      	movs	r3, #255	@ 0xff
 801a00e:	2100      	movs	r1, #0
 801a010:	69f8      	ldr	r0, [r7, #28]
 801a012:	f000 f9cd 	bl	801a3b0 <ip4_output_if>
  }
  pbuf_free(q);
 801a016:	69f8      	ldr	r0, [r7, #28]
 801a018:	f7f8 f988 	bl	801232c <pbuf_free>
 801a01c:	e000      	b.n	801a020 <icmp_send_response+0xc0>
    return;
 801a01e:	bf00      	nop
}
 801a020:	3720      	adds	r7, #32
 801a022:	46bd      	mov	sp, r7
 801a024:	bd80      	pop	{r7, pc}
 801a026:	bf00      	nop
 801a028:	08021840 	.word	0x08021840
 801a02c:	0802190c 	.word	0x0802190c
 801a030:	080218b0 	.word	0x080218b0

0801a034 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801a034:	b480      	push	{r7}
 801a036:	b085      	sub	sp, #20
 801a038:	af00      	add	r7, sp, #0
 801a03a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801a03c:	4b33      	ldr	r3, [pc, #204]	@ (801a10c <ip4_route+0xd8>)
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	60fb      	str	r3, [r7, #12]
 801a042:	e036      	b.n	801a0b2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a044:	68fb      	ldr	r3, [r7, #12]
 801a046:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801a04a:	f003 0301 	and.w	r3, r3, #1
 801a04e:	b2db      	uxtb	r3, r3
 801a050:	2b00      	cmp	r3, #0
 801a052:	d02b      	beq.n	801a0ac <ip4_route+0x78>
 801a054:	68fb      	ldr	r3, [r7, #12]
 801a056:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801a05a:	089b      	lsrs	r3, r3, #2
 801a05c:	f003 0301 	and.w	r3, r3, #1
 801a060:	b2db      	uxtb	r3, r3
 801a062:	2b00      	cmp	r3, #0
 801a064:	d022      	beq.n	801a0ac <ip4_route+0x78>
 801a066:	68fb      	ldr	r3, [r7, #12]
 801a068:	3304      	adds	r3, #4
 801a06a:	681b      	ldr	r3, [r3, #0]
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	d01d      	beq.n	801a0ac <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	681a      	ldr	r2, [r3, #0]
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	3304      	adds	r3, #4
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	405a      	eors	r2, r3
 801a07c:	68fb      	ldr	r3, [r7, #12]
 801a07e:	3308      	adds	r3, #8
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	4013      	ands	r3, r2
 801a084:	2b00      	cmp	r3, #0
 801a086:	d101      	bne.n	801a08c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	e038      	b.n	801a0fe <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801a08c:	68fb      	ldr	r3, [r7, #12]
 801a08e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801a092:	f003 0302 	and.w	r3, r3, #2
 801a096:	2b00      	cmp	r3, #0
 801a098:	d108      	bne.n	801a0ac <ip4_route+0x78>
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	681a      	ldr	r2, [r3, #0]
 801a09e:	68fb      	ldr	r3, [r7, #12]
 801a0a0:	330c      	adds	r3, #12
 801a0a2:	681b      	ldr	r3, [r3, #0]
 801a0a4:	429a      	cmp	r2, r3
 801a0a6:	d101      	bne.n	801a0ac <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801a0a8:	68fb      	ldr	r3, [r7, #12]
 801a0aa:	e028      	b.n	801a0fe <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801a0ac:	68fb      	ldr	r3, [r7, #12]
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	60fb      	str	r3, [r7, #12]
 801a0b2:	68fb      	ldr	r3, [r7, #12]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d1c5      	bne.n	801a044 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a0b8:	4b15      	ldr	r3, [pc, #84]	@ (801a110 <ip4_route+0xdc>)
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d01a      	beq.n	801a0f6 <ip4_route+0xc2>
 801a0c0:	4b13      	ldr	r3, [pc, #76]	@ (801a110 <ip4_route+0xdc>)
 801a0c2:	681b      	ldr	r3, [r3, #0]
 801a0c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801a0c8:	f003 0301 	and.w	r3, r3, #1
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d012      	beq.n	801a0f6 <ip4_route+0xc2>
 801a0d0:	4b0f      	ldr	r3, [pc, #60]	@ (801a110 <ip4_route+0xdc>)
 801a0d2:	681b      	ldr	r3, [r3, #0]
 801a0d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801a0d8:	f003 0304 	and.w	r3, r3, #4
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	d00a      	beq.n	801a0f6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a0e0:	4b0b      	ldr	r3, [pc, #44]	@ (801a110 <ip4_route+0xdc>)
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	3304      	adds	r3, #4
 801a0e6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d004      	beq.n	801a0f6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	b2db      	uxtb	r3, r3
 801a0f2:	2b7f      	cmp	r3, #127	@ 0x7f
 801a0f4:	d101      	bne.n	801a0fa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801a0f6:	2300      	movs	r3, #0
 801a0f8:	e001      	b.n	801a0fe <ip4_route+0xca>
  }

  return netif_default;
 801a0fa:	4b05      	ldr	r3, [pc, #20]	@ (801a110 <ip4_route+0xdc>)
 801a0fc:	681b      	ldr	r3, [r3, #0]
}
 801a0fe:	4618      	mov	r0, r3
 801a100:	3714      	adds	r7, #20
 801a102:	46bd      	mov	sp, r7
 801a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a108:	4770      	bx	lr
 801a10a:	bf00      	nop
 801a10c:	2000c8c0 	.word	0x2000c8c0
 801a110:	2000c8c4 	.word	0x2000c8c4

0801a114 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801a114:	b580      	push	{r7, lr}
 801a116:	b082      	sub	sp, #8
 801a118:	af00      	add	r7, sp, #0
 801a11a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801a122:	f003 0301 	and.w	r3, r3, #1
 801a126:	b2db      	uxtb	r3, r3
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d016      	beq.n	801a15a <ip4_input_accept+0x46>
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	3304      	adds	r3, #4
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	2b00      	cmp	r3, #0
 801a134:	d011      	beq.n	801a15a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a136:	4b0b      	ldr	r3, [pc, #44]	@ (801a164 <ip4_input_accept+0x50>)
 801a138:	695a      	ldr	r2, [r3, #20]
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	3304      	adds	r3, #4
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	429a      	cmp	r2, r3
 801a142:	d008      	beq.n	801a156 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801a144:	4b07      	ldr	r3, [pc, #28]	@ (801a164 <ip4_input_accept+0x50>)
 801a146:	695b      	ldr	r3, [r3, #20]
 801a148:	6879      	ldr	r1, [r7, #4]
 801a14a:	4618      	mov	r0, r3
 801a14c:	f000 fa08 	bl	801a560 <ip4_addr_isbroadcast_u32>
 801a150:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a152:	2b00      	cmp	r3, #0
 801a154:	d001      	beq.n	801a15a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801a156:	2301      	movs	r3, #1
 801a158:	e000      	b.n	801a15c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801a15a:	2300      	movs	r3, #0
}
 801a15c:	4618      	mov	r0, r3
 801a15e:	3708      	adds	r7, #8
 801a160:	46bd      	mov	sp, r7
 801a162:	bd80      	pop	{r7, pc}
 801a164:	20009178 	.word	0x20009178

0801a168 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801a168:	b580      	push	{r7, lr}
 801a16a:	b086      	sub	sp, #24
 801a16c:	af00      	add	r7, sp, #0
 801a16e:	6078      	str	r0, [r7, #4]
 801a170:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	685b      	ldr	r3, [r3, #4]
 801a176:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801a178:	697b      	ldr	r3, [r7, #20]
 801a17a:	781b      	ldrb	r3, [r3, #0]
 801a17c:	091b      	lsrs	r3, r3, #4
 801a17e:	b2db      	uxtb	r3, r3
 801a180:	2b04      	cmp	r3, #4
 801a182:	d004      	beq.n	801a18e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801a184:	6878      	ldr	r0, [r7, #4]
 801a186:	f7f8 f8d1 	bl	801232c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801a18a:	2300      	movs	r3, #0
 801a18c:	e107      	b.n	801a39e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801a18e:	697b      	ldr	r3, [r7, #20]
 801a190:	781b      	ldrb	r3, [r3, #0]
 801a192:	f003 030f 	and.w	r3, r3, #15
 801a196:	b2db      	uxtb	r3, r3
 801a198:	009b      	lsls	r3, r3, #2
 801a19a:	b2db      	uxtb	r3, r3
 801a19c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801a19e:	697b      	ldr	r3, [r7, #20]
 801a1a0:	885b      	ldrh	r3, [r3, #2]
 801a1a2:	b29b      	uxth	r3, r3
 801a1a4:	4618      	mov	r0, r3
 801a1a6:	f7f6 fd01 	bl	8010bac <lwip_htons>
 801a1aa:	4603      	mov	r3, r0
 801a1ac:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	891b      	ldrh	r3, [r3, #8]
 801a1b2:	89ba      	ldrh	r2, [r7, #12]
 801a1b4:	429a      	cmp	r2, r3
 801a1b6:	d204      	bcs.n	801a1c2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801a1b8:	89bb      	ldrh	r3, [r7, #12]
 801a1ba:	4619      	mov	r1, r3
 801a1bc:	6878      	ldr	r0, [r7, #4]
 801a1be:	f7f7 ff2f 	bl	8012020 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	895b      	ldrh	r3, [r3, #10]
 801a1c6:	89fa      	ldrh	r2, [r7, #14]
 801a1c8:	429a      	cmp	r2, r3
 801a1ca:	d807      	bhi.n	801a1dc <ip4_input+0x74>
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	891b      	ldrh	r3, [r3, #8]
 801a1d0:	89ba      	ldrh	r2, [r7, #12]
 801a1d2:	429a      	cmp	r2, r3
 801a1d4:	d802      	bhi.n	801a1dc <ip4_input+0x74>
 801a1d6:	89fb      	ldrh	r3, [r7, #14]
 801a1d8:	2b13      	cmp	r3, #19
 801a1da:	d804      	bhi.n	801a1e6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801a1dc:	6878      	ldr	r0, [r7, #4]
 801a1de:	f7f8 f8a5 	bl	801232c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801a1e2:	2300      	movs	r3, #0
 801a1e4:	e0db      	b.n	801a39e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801a1e6:	697b      	ldr	r3, [r7, #20]
 801a1e8:	691b      	ldr	r3, [r3, #16]
 801a1ea:	4a6f      	ldr	r2, [pc, #444]	@ (801a3a8 <ip4_input+0x240>)
 801a1ec:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801a1ee:	697b      	ldr	r3, [r7, #20]
 801a1f0:	68db      	ldr	r3, [r3, #12]
 801a1f2:	4a6d      	ldr	r2, [pc, #436]	@ (801a3a8 <ip4_input+0x240>)
 801a1f4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a1f6:	4b6c      	ldr	r3, [pc, #432]	@ (801a3a8 <ip4_input+0x240>)
 801a1f8:	695b      	ldr	r3, [r3, #20]
 801a1fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a1fe:	2be0      	cmp	r3, #224	@ 0xe0
 801a200:	d112      	bne.n	801a228 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801a202:	683b      	ldr	r3, [r7, #0]
 801a204:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801a208:	f003 0301 	and.w	r3, r3, #1
 801a20c:	b2db      	uxtb	r3, r3
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d007      	beq.n	801a222 <ip4_input+0xba>
 801a212:	683b      	ldr	r3, [r7, #0]
 801a214:	3304      	adds	r3, #4
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	2b00      	cmp	r3, #0
 801a21a:	d002      	beq.n	801a222 <ip4_input+0xba>
      netif = inp;
 801a21c:	683b      	ldr	r3, [r7, #0]
 801a21e:	613b      	str	r3, [r7, #16]
 801a220:	e02a      	b.n	801a278 <ip4_input+0x110>
    } else {
      netif = NULL;
 801a222:	2300      	movs	r3, #0
 801a224:	613b      	str	r3, [r7, #16]
 801a226:	e027      	b.n	801a278 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801a228:	6838      	ldr	r0, [r7, #0]
 801a22a:	f7ff ff73 	bl	801a114 <ip4_input_accept>
 801a22e:	4603      	mov	r3, r0
 801a230:	2b00      	cmp	r3, #0
 801a232:	d002      	beq.n	801a23a <ip4_input+0xd2>
      netif = inp;
 801a234:	683b      	ldr	r3, [r7, #0]
 801a236:	613b      	str	r3, [r7, #16]
 801a238:	e01e      	b.n	801a278 <ip4_input+0x110>
    } else {
      netif = NULL;
 801a23a:	2300      	movs	r3, #0
 801a23c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801a23e:	4b5a      	ldr	r3, [pc, #360]	@ (801a3a8 <ip4_input+0x240>)
 801a240:	695b      	ldr	r3, [r3, #20]
 801a242:	b2db      	uxtb	r3, r3
 801a244:	2b7f      	cmp	r3, #127	@ 0x7f
 801a246:	d017      	beq.n	801a278 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801a248:	4b58      	ldr	r3, [pc, #352]	@ (801a3ac <ip4_input+0x244>)
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	613b      	str	r3, [r7, #16]
 801a24e:	e00e      	b.n	801a26e <ip4_input+0x106>
          if (netif == inp) {
 801a250:	693a      	ldr	r2, [r7, #16]
 801a252:	683b      	ldr	r3, [r7, #0]
 801a254:	429a      	cmp	r2, r3
 801a256:	d006      	beq.n	801a266 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801a258:	6938      	ldr	r0, [r7, #16]
 801a25a:	f7ff ff5b 	bl	801a114 <ip4_input_accept>
 801a25e:	4603      	mov	r3, r0
 801a260:	2b00      	cmp	r3, #0
 801a262:	d108      	bne.n	801a276 <ip4_input+0x10e>
 801a264:	e000      	b.n	801a268 <ip4_input+0x100>
            continue;
 801a266:	bf00      	nop
        NETIF_FOREACH(netif) {
 801a268:	693b      	ldr	r3, [r7, #16]
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	613b      	str	r3, [r7, #16]
 801a26e:	693b      	ldr	r3, [r7, #16]
 801a270:	2b00      	cmp	r3, #0
 801a272:	d1ed      	bne.n	801a250 <ip4_input+0xe8>
 801a274:	e000      	b.n	801a278 <ip4_input+0x110>
            break;
 801a276:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a278:	4b4b      	ldr	r3, [pc, #300]	@ (801a3a8 <ip4_input+0x240>)
 801a27a:	691b      	ldr	r3, [r3, #16]
 801a27c:	6839      	ldr	r1, [r7, #0]
 801a27e:	4618      	mov	r0, r3
 801a280:	f000 f96e 	bl	801a560 <ip4_addr_isbroadcast_u32>
 801a284:	4603      	mov	r3, r0
 801a286:	2b00      	cmp	r3, #0
 801a288:	d105      	bne.n	801a296 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801a28a:	4b47      	ldr	r3, [pc, #284]	@ (801a3a8 <ip4_input+0x240>)
 801a28c:	691b      	ldr	r3, [r3, #16]
 801a28e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a292:	2be0      	cmp	r3, #224	@ 0xe0
 801a294:	d104      	bne.n	801a2a0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801a296:	6878      	ldr	r0, [r7, #4]
 801a298:	f7f8 f848 	bl	801232c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801a29c:	2300      	movs	r3, #0
 801a29e:	e07e      	b.n	801a39e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801a2a0:	693b      	ldr	r3, [r7, #16]
 801a2a2:	2b00      	cmp	r3, #0
 801a2a4:	d104      	bne.n	801a2b0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801a2a6:	6878      	ldr	r0, [r7, #4]
 801a2a8:	f7f8 f840 	bl	801232c <pbuf_free>
    return ERR_OK;
 801a2ac:	2300      	movs	r3, #0
 801a2ae:	e076      	b.n	801a39e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801a2b0:	697b      	ldr	r3, [r7, #20]
 801a2b2:	88db      	ldrh	r3, [r3, #6]
 801a2b4:	b29b      	uxth	r3, r3
 801a2b6:	461a      	mov	r2, r3
 801a2b8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801a2bc:	4013      	ands	r3, r2
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d00b      	beq.n	801a2da <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801a2c2:	6878      	ldr	r0, [r7, #4]
 801a2c4:	f000 fd22 	bl	801ad0c <ip4_reass>
 801a2c8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d101      	bne.n	801a2d4 <ip4_input+0x16c>
      return ERR_OK;
 801a2d0:	2300      	movs	r3, #0
 801a2d2:	e064      	b.n	801a39e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	685b      	ldr	r3, [r3, #4]
 801a2d8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801a2da:	4a33      	ldr	r2, [pc, #204]	@ (801a3a8 <ip4_input+0x240>)
 801a2dc:	693b      	ldr	r3, [r7, #16]
 801a2de:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801a2e0:	4a31      	ldr	r2, [pc, #196]	@ (801a3a8 <ip4_input+0x240>)
 801a2e2:	683b      	ldr	r3, [r7, #0]
 801a2e4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801a2e6:	4a30      	ldr	r2, [pc, #192]	@ (801a3a8 <ip4_input+0x240>)
 801a2e8:	697b      	ldr	r3, [r7, #20]
 801a2ea:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801a2ec:	697b      	ldr	r3, [r7, #20]
 801a2ee:	781b      	ldrb	r3, [r3, #0]
 801a2f0:	f003 030f 	and.w	r3, r3, #15
 801a2f4:	b2db      	uxtb	r3, r3
 801a2f6:	009b      	lsls	r3, r3, #2
 801a2f8:	b2db      	uxtb	r3, r3
 801a2fa:	461a      	mov	r2, r3
 801a2fc:	4b2a      	ldr	r3, [pc, #168]	@ (801a3a8 <ip4_input+0x240>)
 801a2fe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801a300:	89fb      	ldrh	r3, [r7, #14]
 801a302:	4619      	mov	r1, r3
 801a304:	6878      	ldr	r0, [r7, #4]
 801a306:	f7f7 ff8b 	bl	8012220 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801a30a:	697b      	ldr	r3, [r7, #20]
 801a30c:	7a5b      	ldrb	r3, [r3, #9]
 801a30e:	2b11      	cmp	r3, #17
 801a310:	d006      	beq.n	801a320 <ip4_input+0x1b8>
 801a312:	2b11      	cmp	r3, #17
 801a314:	dc13      	bgt.n	801a33e <ip4_input+0x1d6>
 801a316:	2b01      	cmp	r3, #1
 801a318:	d00c      	beq.n	801a334 <ip4_input+0x1cc>
 801a31a:	2b06      	cmp	r3, #6
 801a31c:	d005      	beq.n	801a32a <ip4_input+0x1c2>
 801a31e:	e00e      	b.n	801a33e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801a320:	6839      	ldr	r1, [r7, #0]
 801a322:	6878      	ldr	r0, [r7, #4]
 801a324:	f7fe fc9a 	bl	8018c5c <udp_input>
        break;
 801a328:	e026      	b.n	801a378 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801a32a:	6839      	ldr	r1, [r7, #0]
 801a32c:	6878      	ldr	r0, [r7, #4]
 801a32e:	f7fa f891 	bl	8014454 <tcp_input>
        break;
 801a332:	e021      	b.n	801a378 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801a334:	6839      	ldr	r1, [r7, #0]
 801a336:	6878      	ldr	r0, [r7, #4]
 801a338:	f7ff fcf0 	bl	8019d1c <icmp_input>
        break;
 801a33c:	e01c      	b.n	801a378 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a33e:	4b1a      	ldr	r3, [pc, #104]	@ (801a3a8 <ip4_input+0x240>)
 801a340:	695b      	ldr	r3, [r3, #20]
 801a342:	6939      	ldr	r1, [r7, #16]
 801a344:	4618      	mov	r0, r3
 801a346:	f000 f90b 	bl	801a560 <ip4_addr_isbroadcast_u32>
 801a34a:	4603      	mov	r3, r0
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	d10f      	bne.n	801a370 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a350:	4b15      	ldr	r3, [pc, #84]	@ (801a3a8 <ip4_input+0x240>)
 801a352:	695b      	ldr	r3, [r3, #20]
 801a354:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a358:	2be0      	cmp	r3, #224	@ 0xe0
 801a35a:	d009      	beq.n	801a370 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801a35c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a360:	4619      	mov	r1, r3
 801a362:	6878      	ldr	r0, [r7, #4]
 801a364:	f7f7 ffcf 	bl	8012306 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a368:	2102      	movs	r1, #2
 801a36a:	6878      	ldr	r0, [r7, #4]
 801a36c:	f7ff fdd8 	bl	8019f20 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801a370:	6878      	ldr	r0, [r7, #4]
 801a372:	f7f7 ffdb 	bl	801232c <pbuf_free>
        break;
 801a376:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a378:	4b0b      	ldr	r3, [pc, #44]	@ (801a3a8 <ip4_input+0x240>)
 801a37a:	2200      	movs	r2, #0
 801a37c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a37e:	4b0a      	ldr	r3, [pc, #40]	@ (801a3a8 <ip4_input+0x240>)
 801a380:	2200      	movs	r2, #0
 801a382:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a384:	4b08      	ldr	r3, [pc, #32]	@ (801a3a8 <ip4_input+0x240>)
 801a386:	2200      	movs	r2, #0
 801a388:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a38a:	4b07      	ldr	r3, [pc, #28]	@ (801a3a8 <ip4_input+0x240>)
 801a38c:	2200      	movs	r2, #0
 801a38e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a390:	4b05      	ldr	r3, [pc, #20]	@ (801a3a8 <ip4_input+0x240>)
 801a392:	2200      	movs	r2, #0
 801a394:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a396:	4b04      	ldr	r3, [pc, #16]	@ (801a3a8 <ip4_input+0x240>)
 801a398:	2200      	movs	r2, #0
 801a39a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a39c:	2300      	movs	r3, #0
}
 801a39e:	4618      	mov	r0, r3
 801a3a0:	3718      	adds	r7, #24
 801a3a2:	46bd      	mov	sp, r7
 801a3a4:	bd80      	pop	{r7, pc}
 801a3a6:	bf00      	nop
 801a3a8:	20009178 	.word	0x20009178
 801a3ac:	2000c8c0 	.word	0x2000c8c0

0801a3b0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801a3b0:	b580      	push	{r7, lr}
 801a3b2:	b08a      	sub	sp, #40	@ 0x28
 801a3b4:	af04      	add	r7, sp, #16
 801a3b6:	60f8      	str	r0, [r7, #12]
 801a3b8:	60b9      	str	r1, [r7, #8]
 801a3ba:	607a      	str	r2, [r7, #4]
 801a3bc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a3be:	68bb      	ldr	r3, [r7, #8]
 801a3c0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d009      	beq.n	801a3dc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801a3c8:	68bb      	ldr	r3, [r7, #8]
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	d003      	beq.n	801a3d6 <ip4_output_if+0x26>
 801a3ce:	68bb      	ldr	r3, [r7, #8]
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d102      	bne.n	801a3dc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801a3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3d8:	3304      	adds	r3, #4
 801a3da:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801a3dc:	78fa      	ldrb	r2, [r7, #3]
 801a3de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3e0:	9302      	str	r3, [sp, #8]
 801a3e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801a3e6:	9301      	str	r3, [sp, #4]
 801a3e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a3ec:	9300      	str	r3, [sp, #0]
 801a3ee:	4613      	mov	r3, r2
 801a3f0:	687a      	ldr	r2, [r7, #4]
 801a3f2:	6979      	ldr	r1, [r7, #20]
 801a3f4:	68f8      	ldr	r0, [r7, #12]
 801a3f6:	f000 f805 	bl	801a404 <ip4_output_if_src>
 801a3fa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801a3fc:	4618      	mov	r0, r3
 801a3fe:	3718      	adds	r7, #24
 801a400:	46bd      	mov	sp, r7
 801a402:	bd80      	pop	{r7, pc}

0801a404 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801a404:	b580      	push	{r7, lr}
 801a406:	b088      	sub	sp, #32
 801a408:	af00      	add	r7, sp, #0
 801a40a:	60f8      	str	r0, [r7, #12]
 801a40c:	60b9      	str	r1, [r7, #8]
 801a40e:	607a      	str	r2, [r7, #4]
 801a410:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	7b9b      	ldrb	r3, [r3, #14]
 801a416:	2b01      	cmp	r3, #1
 801a418:	d006      	beq.n	801a428 <ip4_output_if_src+0x24>
 801a41a:	4b4b      	ldr	r3, [pc, #300]	@ (801a548 <ip4_output_if_src+0x144>)
 801a41c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801a420:	494a      	ldr	r1, [pc, #296]	@ (801a54c <ip4_output_if_src+0x148>)
 801a422:	484b      	ldr	r0, [pc, #300]	@ (801a550 <ip4_output_if_src+0x14c>)
 801a424:	f002 f83a 	bl	801c49c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d060      	beq.n	801a4f0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801a42e:	2314      	movs	r3, #20
 801a430:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801a432:	2114      	movs	r1, #20
 801a434:	68f8      	ldr	r0, [r7, #12]
 801a436:	f7f7 fee3 	bl	8012200 <pbuf_add_header>
 801a43a:	4603      	mov	r3, r0
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d002      	beq.n	801a446 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a440:	f06f 0301 	mvn.w	r3, #1
 801a444:	e07c      	b.n	801a540 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a446:	68fb      	ldr	r3, [r7, #12]
 801a448:	685b      	ldr	r3, [r3, #4]
 801a44a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a44c:	68fb      	ldr	r3, [r7, #12]
 801a44e:	895b      	ldrh	r3, [r3, #10]
 801a450:	2b13      	cmp	r3, #19
 801a452:	d806      	bhi.n	801a462 <ip4_output_if_src+0x5e>
 801a454:	4b3c      	ldr	r3, [pc, #240]	@ (801a548 <ip4_output_if_src+0x144>)
 801a456:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801a45a:	493e      	ldr	r1, [pc, #248]	@ (801a554 <ip4_output_if_src+0x150>)
 801a45c:	483c      	ldr	r0, [pc, #240]	@ (801a550 <ip4_output_if_src+0x14c>)
 801a45e:	f002 f81d 	bl	801c49c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a462:	69fb      	ldr	r3, [r7, #28]
 801a464:	78fa      	ldrb	r2, [r7, #3]
 801a466:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a468:	69fb      	ldr	r3, [r7, #28]
 801a46a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801a46e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	681a      	ldr	r2, [r3, #0]
 801a474:	69fb      	ldr	r3, [r7, #28]
 801a476:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a478:	8b7b      	ldrh	r3, [r7, #26]
 801a47a:	089b      	lsrs	r3, r3, #2
 801a47c:	b29b      	uxth	r3, r3
 801a47e:	b2db      	uxtb	r3, r3
 801a480:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a484:	b2da      	uxtb	r2, r3
 801a486:	69fb      	ldr	r3, [r7, #28]
 801a488:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a48a:	69fb      	ldr	r3, [r7, #28]
 801a48c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801a490:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a492:	68fb      	ldr	r3, [r7, #12]
 801a494:	891b      	ldrh	r3, [r3, #8]
 801a496:	4618      	mov	r0, r3
 801a498:	f7f6 fb88 	bl	8010bac <lwip_htons>
 801a49c:	4603      	mov	r3, r0
 801a49e:	461a      	mov	r2, r3
 801a4a0:	69fb      	ldr	r3, [r7, #28]
 801a4a2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a4a4:	69fb      	ldr	r3, [r7, #28]
 801a4a6:	2200      	movs	r2, #0
 801a4a8:	719a      	strb	r2, [r3, #6]
 801a4aa:	2200      	movs	r2, #0
 801a4ac:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a4ae:	4b2a      	ldr	r3, [pc, #168]	@ (801a558 <ip4_output_if_src+0x154>)
 801a4b0:	881b      	ldrh	r3, [r3, #0]
 801a4b2:	4618      	mov	r0, r3
 801a4b4:	f7f6 fb7a 	bl	8010bac <lwip_htons>
 801a4b8:	4603      	mov	r3, r0
 801a4ba:	461a      	mov	r2, r3
 801a4bc:	69fb      	ldr	r3, [r7, #28]
 801a4be:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a4c0:	4b25      	ldr	r3, [pc, #148]	@ (801a558 <ip4_output_if_src+0x154>)
 801a4c2:	881b      	ldrh	r3, [r3, #0]
 801a4c4:	3301      	adds	r3, #1
 801a4c6:	b29a      	uxth	r2, r3
 801a4c8:	4b23      	ldr	r3, [pc, #140]	@ (801a558 <ip4_output_if_src+0x154>)
 801a4ca:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a4cc:	68bb      	ldr	r3, [r7, #8]
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d104      	bne.n	801a4dc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a4d2:	4b22      	ldr	r3, [pc, #136]	@ (801a55c <ip4_output_if_src+0x158>)
 801a4d4:	681a      	ldr	r2, [r3, #0]
 801a4d6:	69fb      	ldr	r3, [r7, #28]
 801a4d8:	60da      	str	r2, [r3, #12]
 801a4da:	e003      	b.n	801a4e4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a4dc:	68bb      	ldr	r3, [r7, #8]
 801a4de:	681a      	ldr	r2, [r3, #0]
 801a4e0:	69fb      	ldr	r3, [r7, #28]
 801a4e2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801a4e4:	69fb      	ldr	r3, [r7, #28]
 801a4e6:	2200      	movs	r2, #0
 801a4e8:	729a      	strb	r2, [r3, #10]
 801a4ea:	2200      	movs	r2, #0
 801a4ec:	72da      	strb	r2, [r3, #11]
 801a4ee:	e00f      	b.n	801a510 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801a4f0:	68fb      	ldr	r3, [r7, #12]
 801a4f2:	895b      	ldrh	r3, [r3, #10]
 801a4f4:	2b13      	cmp	r3, #19
 801a4f6:	d802      	bhi.n	801a4fe <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a4f8:	f06f 0301 	mvn.w	r3, #1
 801a4fc:	e020      	b.n	801a540 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a4fe:	68fb      	ldr	r3, [r7, #12]
 801a500:	685b      	ldr	r3, [r3, #4]
 801a502:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a504:	69fb      	ldr	r3, [r7, #28]
 801a506:	691b      	ldr	r3, [r3, #16]
 801a508:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801a50a:	f107 0314 	add.w	r3, r7, #20
 801a50e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a512:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801a514:	2b00      	cmp	r3, #0
 801a516:	d00c      	beq.n	801a532 <ip4_output_if_src+0x12e>
 801a518:	68fb      	ldr	r3, [r7, #12]
 801a51a:	891a      	ldrh	r2, [r3, #8]
 801a51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a51e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801a520:	429a      	cmp	r2, r3
 801a522:	d906      	bls.n	801a532 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801a524:	687a      	ldr	r2, [r7, #4]
 801a526:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801a528:	68f8      	ldr	r0, [r7, #12]
 801a52a:	f000 fde3 	bl	801b0f4 <ip4_frag>
 801a52e:	4603      	mov	r3, r0
 801a530:	e006      	b.n	801a540 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a534:	695b      	ldr	r3, [r3, #20]
 801a536:	687a      	ldr	r2, [r7, #4]
 801a538:	68f9      	ldr	r1, [r7, #12]
 801a53a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a53c:	4798      	blx	r3
 801a53e:	4603      	mov	r3, r0
}
 801a540:	4618      	mov	r0, r3
 801a542:	3720      	adds	r7, #32
 801a544:	46bd      	mov	sp, r7
 801a546:	bd80      	pop	{r7, pc}
 801a548:	08021938 	.word	0x08021938
 801a54c:	0802196c 	.word	0x0802196c
 801a550:	08021978 	.word	0x08021978
 801a554:	080219a0 	.word	0x080219a0
 801a558:	2000ca1e 	.word	0x2000ca1e
 801a55c:	08021e08 	.word	0x08021e08

0801a560 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a560:	b480      	push	{r7}
 801a562:	b085      	sub	sp, #20
 801a564:	af00      	add	r7, sp, #0
 801a566:	6078      	str	r0, [r7, #4]
 801a568:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a574:	d002      	beq.n	801a57c <ip4_addr_isbroadcast_u32+0x1c>
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	2b00      	cmp	r3, #0
 801a57a:	d101      	bne.n	801a580 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a57c:	2301      	movs	r3, #1
 801a57e:	e02a      	b.n	801a5d6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a580:	683b      	ldr	r3, [r7, #0]
 801a582:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801a586:	f003 0302 	and.w	r3, r3, #2
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	d101      	bne.n	801a592 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a58e:	2300      	movs	r3, #0
 801a590:	e021      	b.n	801a5d6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a592:	683b      	ldr	r3, [r7, #0]
 801a594:	3304      	adds	r3, #4
 801a596:	681b      	ldr	r3, [r3, #0]
 801a598:	687a      	ldr	r2, [r7, #4]
 801a59a:	429a      	cmp	r2, r3
 801a59c:	d101      	bne.n	801a5a2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a59e:	2300      	movs	r3, #0
 801a5a0:	e019      	b.n	801a5d6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a5a2:	68fa      	ldr	r2, [r7, #12]
 801a5a4:	683b      	ldr	r3, [r7, #0]
 801a5a6:	3304      	adds	r3, #4
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	405a      	eors	r2, r3
 801a5ac:	683b      	ldr	r3, [r7, #0]
 801a5ae:	3308      	adds	r3, #8
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	4013      	ands	r3, r2
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d10d      	bne.n	801a5d4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a5b8:	683b      	ldr	r3, [r7, #0]
 801a5ba:	3308      	adds	r3, #8
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	43da      	mvns	r2, r3
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a5c4:	683b      	ldr	r3, [r7, #0]
 801a5c6:	3308      	adds	r3, #8
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a5cc:	429a      	cmp	r2, r3
 801a5ce:	d101      	bne.n	801a5d4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a5d0:	2301      	movs	r3, #1
 801a5d2:	e000      	b.n	801a5d6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a5d4:	2300      	movs	r3, #0
  }
}
 801a5d6:	4618      	mov	r0, r3
 801a5d8:	3714      	adds	r7, #20
 801a5da:	46bd      	mov	sp, r7
 801a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5e0:	4770      	bx	lr
	...

0801a5e4 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801a5e4:	b580      	push	{r7, lr}
 801a5e6:	b082      	sub	sp, #8
 801a5e8:	af00      	add	r7, sp, #0
 801a5ea:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801a5ec:	2210      	movs	r2, #16
 801a5ee:	4904      	ldr	r1, [pc, #16]	@ (801a600 <ip4addr_ntoa+0x1c>)
 801a5f0:	6878      	ldr	r0, [r7, #4]
 801a5f2:	f000 f807 	bl	801a604 <ip4addr_ntoa_r>
 801a5f6:	4603      	mov	r3, r0
}
 801a5f8:	4618      	mov	r0, r3
 801a5fa:	3708      	adds	r7, #8
 801a5fc:	46bd      	mov	sp, r7
 801a5fe:	bd80      	pop	{r7, pc}
 801a600:	2000ca20 	.word	0x2000ca20

0801a604 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801a604:	b480      	push	{r7}
 801a606:	b08d      	sub	sp, #52	@ 0x34
 801a608:	af00      	add	r7, sp, #0
 801a60a:	60f8      	str	r0, [r7, #12]
 801a60c:	60b9      	str	r1, [r7, #8]
 801a60e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801a610:	2300      	movs	r3, #0
 801a612:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801a614:	68fb      	ldr	r3, [r7, #12]
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801a61a:	68bb      	ldr	r3, [r7, #8]
 801a61c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 801a61e:	f107 0318 	add.w	r3, r7, #24
 801a622:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801a624:	2300      	movs	r3, #0
 801a626:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a62a:	e058      	b.n	801a6de <ip4addr_ntoa_r+0xda>
    i = 0;
 801a62c:	2300      	movs	r3, #0
 801a62e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 801a632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a634:	781a      	ldrb	r2, [r3, #0]
 801a636:	4b32      	ldr	r3, [pc, #200]	@ (801a700 <ip4addr_ntoa_r+0xfc>)
 801a638:	fba3 1302 	umull	r1, r3, r3, r2
 801a63c:	08d9      	lsrs	r1, r3, #3
 801a63e:	460b      	mov	r3, r1
 801a640:	009b      	lsls	r3, r3, #2
 801a642:	440b      	add	r3, r1
 801a644:	005b      	lsls	r3, r3, #1
 801a646:	1ad3      	subs	r3, r2, r3
 801a648:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801a64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a64c:	781b      	ldrb	r3, [r3, #0]
 801a64e:	4a2c      	ldr	r2, [pc, #176]	@ (801a700 <ip4addr_ntoa_r+0xfc>)
 801a650:	fba2 2303 	umull	r2, r3, r2, r3
 801a654:	08db      	lsrs	r3, r3, #3
 801a656:	b2da      	uxtb	r2, r3
 801a658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a65a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801a65c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a660:	1c5a      	adds	r2, r3, #1
 801a662:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801a666:	4619      	mov	r1, r3
 801a668:	7ffb      	ldrb	r3, [r7, #31]
 801a66a:	3330      	adds	r3, #48	@ 0x30
 801a66c:	b2da      	uxtb	r2, r3
 801a66e:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 801a672:	443b      	add	r3, r7
 801a674:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801a678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a67a:	781b      	ldrb	r3, [r3, #0]
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d1d8      	bne.n	801a632 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801a680:	e011      	b.n	801a6a6 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801a682:	6a3b      	ldr	r3, [r7, #32]
 801a684:	1c5a      	adds	r2, r3, #1
 801a686:	623a      	str	r2, [r7, #32]
 801a688:	687a      	ldr	r2, [r7, #4]
 801a68a:	429a      	cmp	r2, r3
 801a68c:	dc01      	bgt.n	801a692 <ip4addr_ntoa_r+0x8e>
        return NULL;
 801a68e:	2300      	movs	r3, #0
 801a690:	e030      	b.n	801a6f4 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801a692:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801a696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a698:	1c59      	adds	r1, r3, #1
 801a69a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a69c:	3230      	adds	r2, #48	@ 0x30
 801a69e:	443a      	add	r2, r7
 801a6a0:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801a6a4:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801a6a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a6aa:	1e5a      	subs	r2, r3, #1
 801a6ac:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d1e6      	bne.n	801a682 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801a6b4:	6a3b      	ldr	r3, [r7, #32]
 801a6b6:	1c5a      	adds	r2, r3, #1
 801a6b8:	623a      	str	r2, [r7, #32]
 801a6ba:	687a      	ldr	r2, [r7, #4]
 801a6bc:	429a      	cmp	r2, r3
 801a6be:	dc01      	bgt.n	801a6c4 <ip4addr_ntoa_r+0xc0>
      return NULL;
 801a6c0:	2300      	movs	r3, #0
 801a6c2:	e017      	b.n	801a6f4 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 801a6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6c6:	1c5a      	adds	r2, r3, #1
 801a6c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a6ca:	222e      	movs	r2, #46	@ 0x2e
 801a6cc:	701a      	strb	r2, [r3, #0]
    ap++;
 801a6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6d0:	3301      	adds	r3, #1
 801a6d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801a6d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a6d8:	3301      	adds	r3, #1
 801a6da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a6de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a6e2:	2b03      	cmp	r3, #3
 801a6e4:	d9a2      	bls.n	801a62c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801a6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6e8:	3b01      	subs	r3, #1
 801a6ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6ee:	2200      	movs	r2, #0
 801a6f0:	701a      	strb	r2, [r3, #0]
  return buf;
 801a6f2:	68bb      	ldr	r3, [r7, #8]
}
 801a6f4:	4618      	mov	r0, r3
 801a6f6:	3734      	adds	r7, #52	@ 0x34
 801a6f8:	46bd      	mov	sp, r7
 801a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6fe:	4770      	bx	lr
 801a700:	cccccccd 	.word	0xcccccccd

0801a704 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a704:	b580      	push	{r7, lr}
 801a706:	b084      	sub	sp, #16
 801a708:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a70a:	2300      	movs	r3, #0
 801a70c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a70e:	4b12      	ldr	r3, [pc, #72]	@ (801a758 <ip_reass_tmr+0x54>)
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a714:	e018      	b.n	801a748 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a716:	68fb      	ldr	r3, [r7, #12]
 801a718:	7fdb      	ldrb	r3, [r3, #31]
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	d00b      	beq.n	801a736 <ip_reass_tmr+0x32>
      r->timer--;
 801a71e:	68fb      	ldr	r3, [r7, #12]
 801a720:	7fdb      	ldrb	r3, [r3, #31]
 801a722:	3b01      	subs	r3, #1
 801a724:	b2da      	uxtb	r2, r3
 801a726:	68fb      	ldr	r3, [r7, #12]
 801a728:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a72a:	68fb      	ldr	r3, [r7, #12]
 801a72c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a72e:	68fb      	ldr	r3, [r7, #12]
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	60fb      	str	r3, [r7, #12]
 801a734:	e008      	b.n	801a748 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a736:	68fb      	ldr	r3, [r7, #12]
 801a738:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a73a:	68fb      	ldr	r3, [r7, #12]
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a740:	68b9      	ldr	r1, [r7, #8]
 801a742:	6878      	ldr	r0, [r7, #4]
 801a744:	f000 f80a 	bl	801a75c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d1e3      	bne.n	801a716 <ip_reass_tmr+0x12>
    }
  }
}
 801a74e:	bf00      	nop
 801a750:	bf00      	nop
 801a752:	3710      	adds	r7, #16
 801a754:	46bd      	mov	sp, r7
 801a756:	bd80      	pop	{r7, pc}
 801a758:	2000ca30 	.word	0x2000ca30

0801a75c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a75c:	b580      	push	{r7, lr}
 801a75e:	b088      	sub	sp, #32
 801a760:	af00      	add	r7, sp, #0
 801a762:	6078      	str	r0, [r7, #4]
 801a764:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a766:	2300      	movs	r3, #0
 801a768:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a76a:	683a      	ldr	r2, [r7, #0]
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	429a      	cmp	r2, r3
 801a770:	d105      	bne.n	801a77e <ip_reass_free_complete_datagram+0x22>
 801a772:	4b45      	ldr	r3, [pc, #276]	@ (801a888 <ip_reass_free_complete_datagram+0x12c>)
 801a774:	22ab      	movs	r2, #171	@ 0xab
 801a776:	4945      	ldr	r1, [pc, #276]	@ (801a88c <ip_reass_free_complete_datagram+0x130>)
 801a778:	4845      	ldr	r0, [pc, #276]	@ (801a890 <ip_reass_free_complete_datagram+0x134>)
 801a77a:	f001 fe8f 	bl	801c49c <iprintf>
  if (prev != NULL) {
 801a77e:	683b      	ldr	r3, [r7, #0]
 801a780:	2b00      	cmp	r3, #0
 801a782:	d00a      	beq.n	801a79a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a784:	683b      	ldr	r3, [r7, #0]
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	687a      	ldr	r2, [r7, #4]
 801a78a:	429a      	cmp	r2, r3
 801a78c:	d005      	beq.n	801a79a <ip_reass_free_complete_datagram+0x3e>
 801a78e:	4b3e      	ldr	r3, [pc, #248]	@ (801a888 <ip_reass_free_complete_datagram+0x12c>)
 801a790:	22ad      	movs	r2, #173	@ 0xad
 801a792:	4940      	ldr	r1, [pc, #256]	@ (801a894 <ip_reass_free_complete_datagram+0x138>)
 801a794:	483e      	ldr	r0, [pc, #248]	@ (801a890 <ip_reass_free_complete_datagram+0x134>)
 801a796:	f001 fe81 	bl	801c49c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	685b      	ldr	r3, [r3, #4]
 801a79e:	685b      	ldr	r3, [r3, #4]
 801a7a0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a7a2:	697b      	ldr	r3, [r7, #20]
 801a7a4:	889b      	ldrh	r3, [r3, #4]
 801a7a6:	b29b      	uxth	r3, r3
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	d12a      	bne.n	801a802 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	685b      	ldr	r3, [r3, #4]
 801a7b0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a7b2:	697b      	ldr	r3, [r7, #20]
 801a7b4:	681a      	ldr	r2, [r3, #0]
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a7ba:	69bb      	ldr	r3, [r7, #24]
 801a7bc:	6858      	ldr	r0, [r3, #4]
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	3308      	adds	r3, #8
 801a7c2:	2214      	movs	r2, #20
 801a7c4:	4619      	mov	r1, r3
 801a7c6:	f002 f81c 	bl	801c802 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a7ca:	2101      	movs	r1, #1
 801a7cc:	69b8      	ldr	r0, [r7, #24]
 801a7ce:	f7ff fbb7 	bl	8019f40 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a7d2:	69b8      	ldr	r0, [r7, #24]
 801a7d4:	f7f7 fe38 	bl	8012448 <pbuf_clen>
 801a7d8:	4603      	mov	r3, r0
 801a7da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a7dc:	8bfa      	ldrh	r2, [r7, #30]
 801a7de:	8a7b      	ldrh	r3, [r7, #18]
 801a7e0:	4413      	add	r3, r2
 801a7e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a7e6:	db05      	blt.n	801a7f4 <ip_reass_free_complete_datagram+0x98>
 801a7e8:	4b27      	ldr	r3, [pc, #156]	@ (801a888 <ip_reass_free_complete_datagram+0x12c>)
 801a7ea:	22bc      	movs	r2, #188	@ 0xbc
 801a7ec:	492a      	ldr	r1, [pc, #168]	@ (801a898 <ip_reass_free_complete_datagram+0x13c>)
 801a7ee:	4828      	ldr	r0, [pc, #160]	@ (801a890 <ip_reass_free_complete_datagram+0x134>)
 801a7f0:	f001 fe54 	bl	801c49c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a7f4:	8bfa      	ldrh	r2, [r7, #30]
 801a7f6:	8a7b      	ldrh	r3, [r7, #18]
 801a7f8:	4413      	add	r3, r2
 801a7fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a7fc:	69b8      	ldr	r0, [r7, #24]
 801a7fe:	f7f7 fd95 	bl	801232c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	685b      	ldr	r3, [r3, #4]
 801a806:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a808:	e01f      	b.n	801a84a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a80a:	69bb      	ldr	r3, [r7, #24]
 801a80c:	685b      	ldr	r3, [r3, #4]
 801a80e:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a810:	69bb      	ldr	r3, [r7, #24]
 801a812:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a814:	697b      	ldr	r3, [r7, #20]
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a81a:	68f8      	ldr	r0, [r7, #12]
 801a81c:	f7f7 fe14 	bl	8012448 <pbuf_clen>
 801a820:	4603      	mov	r3, r0
 801a822:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a824:	8bfa      	ldrh	r2, [r7, #30]
 801a826:	8a7b      	ldrh	r3, [r7, #18]
 801a828:	4413      	add	r3, r2
 801a82a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a82e:	db05      	blt.n	801a83c <ip_reass_free_complete_datagram+0xe0>
 801a830:	4b15      	ldr	r3, [pc, #84]	@ (801a888 <ip_reass_free_complete_datagram+0x12c>)
 801a832:	22cc      	movs	r2, #204	@ 0xcc
 801a834:	4918      	ldr	r1, [pc, #96]	@ (801a898 <ip_reass_free_complete_datagram+0x13c>)
 801a836:	4816      	ldr	r0, [pc, #88]	@ (801a890 <ip_reass_free_complete_datagram+0x134>)
 801a838:	f001 fe30 	bl	801c49c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a83c:	8bfa      	ldrh	r2, [r7, #30]
 801a83e:	8a7b      	ldrh	r3, [r7, #18]
 801a840:	4413      	add	r3, r2
 801a842:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a844:	68f8      	ldr	r0, [r7, #12]
 801a846:	f7f7 fd71 	bl	801232c <pbuf_free>
  while (p != NULL) {
 801a84a:	69bb      	ldr	r3, [r7, #24]
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d1dc      	bne.n	801a80a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a850:	6839      	ldr	r1, [r7, #0]
 801a852:	6878      	ldr	r0, [r7, #4]
 801a854:	f000 f8c2 	bl	801a9dc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a858:	4b10      	ldr	r3, [pc, #64]	@ (801a89c <ip_reass_free_complete_datagram+0x140>)
 801a85a:	881b      	ldrh	r3, [r3, #0]
 801a85c:	8bfa      	ldrh	r2, [r7, #30]
 801a85e:	429a      	cmp	r2, r3
 801a860:	d905      	bls.n	801a86e <ip_reass_free_complete_datagram+0x112>
 801a862:	4b09      	ldr	r3, [pc, #36]	@ (801a888 <ip_reass_free_complete_datagram+0x12c>)
 801a864:	22d2      	movs	r2, #210	@ 0xd2
 801a866:	490e      	ldr	r1, [pc, #56]	@ (801a8a0 <ip_reass_free_complete_datagram+0x144>)
 801a868:	4809      	ldr	r0, [pc, #36]	@ (801a890 <ip_reass_free_complete_datagram+0x134>)
 801a86a:	f001 fe17 	bl	801c49c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a86e:	4b0b      	ldr	r3, [pc, #44]	@ (801a89c <ip_reass_free_complete_datagram+0x140>)
 801a870:	881a      	ldrh	r2, [r3, #0]
 801a872:	8bfb      	ldrh	r3, [r7, #30]
 801a874:	1ad3      	subs	r3, r2, r3
 801a876:	b29a      	uxth	r2, r3
 801a878:	4b08      	ldr	r3, [pc, #32]	@ (801a89c <ip_reass_free_complete_datagram+0x140>)
 801a87a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a87c:	8bfb      	ldrh	r3, [r7, #30]
}
 801a87e:	4618      	mov	r0, r3
 801a880:	3720      	adds	r7, #32
 801a882:	46bd      	mov	sp, r7
 801a884:	bd80      	pop	{r7, pc}
 801a886:	bf00      	nop
 801a888:	080219d0 	.word	0x080219d0
 801a88c:	08021a0c 	.word	0x08021a0c
 801a890:	08021a18 	.word	0x08021a18
 801a894:	08021a40 	.word	0x08021a40
 801a898:	08021a54 	.word	0x08021a54
 801a89c:	2000ca34 	.word	0x2000ca34
 801a8a0:	08021a74 	.word	0x08021a74

0801a8a4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a8a4:	b580      	push	{r7, lr}
 801a8a6:	b08a      	sub	sp, #40	@ 0x28
 801a8a8:	af00      	add	r7, sp, #0
 801a8aa:	6078      	str	r0, [r7, #4]
 801a8ac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a8ae:	2300      	movs	r3, #0
 801a8b0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a8b2:	2300      	movs	r3, #0
 801a8b4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a8b6:	2300      	movs	r3, #0
 801a8b8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a8ba:	2300      	movs	r3, #0
 801a8bc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a8be:	2300      	movs	r3, #0
 801a8c0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a8c2:	4b28      	ldr	r3, [pc, #160]	@ (801a964 <ip_reass_remove_oldest_datagram+0xc0>)
 801a8c4:	681b      	ldr	r3, [r3, #0]
 801a8c6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801a8c8:	e030      	b.n	801a92c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8cc:	695a      	ldr	r2, [r3, #20]
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	68db      	ldr	r3, [r3, #12]
 801a8d2:	429a      	cmp	r2, r3
 801a8d4:	d10c      	bne.n	801a8f0 <ip_reass_remove_oldest_datagram+0x4c>
 801a8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8d8:	699a      	ldr	r2, [r3, #24]
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	691b      	ldr	r3, [r3, #16]
 801a8de:	429a      	cmp	r2, r3
 801a8e0:	d106      	bne.n	801a8f0 <ip_reass_remove_oldest_datagram+0x4c>
 801a8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8e4:	899a      	ldrh	r2, [r3, #12]
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	889b      	ldrh	r3, [r3, #4]
 801a8ea:	b29b      	uxth	r3, r3
 801a8ec:	429a      	cmp	r2, r3
 801a8ee:	d014      	beq.n	801a91a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a8f0:	693b      	ldr	r3, [r7, #16]
 801a8f2:	3301      	adds	r3, #1
 801a8f4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a8f6:	6a3b      	ldr	r3, [r7, #32]
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	d104      	bne.n	801a906 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8fe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a900:	69fb      	ldr	r3, [r7, #28]
 801a902:	61bb      	str	r3, [r7, #24]
 801a904:	e009      	b.n	801a91a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a908:	7fda      	ldrb	r2, [r3, #31]
 801a90a:	6a3b      	ldr	r3, [r7, #32]
 801a90c:	7fdb      	ldrb	r3, [r3, #31]
 801a90e:	429a      	cmp	r2, r3
 801a910:	d803      	bhi.n	801a91a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a914:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a916:	69fb      	ldr	r3, [r7, #28]
 801a918:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a91c:	681b      	ldr	r3, [r3, #0]
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d001      	beq.n	801a926 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a924:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801a92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a92e:	2b00      	cmp	r3, #0
 801a930:	d1cb      	bne.n	801a8ca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a932:	6a3b      	ldr	r3, [r7, #32]
 801a934:	2b00      	cmp	r3, #0
 801a936:	d008      	beq.n	801a94a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a938:	69b9      	ldr	r1, [r7, #24]
 801a93a:	6a38      	ldr	r0, [r7, #32]
 801a93c:	f7ff ff0e 	bl	801a75c <ip_reass_free_complete_datagram>
 801a940:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a942:	697a      	ldr	r2, [r7, #20]
 801a944:	68fb      	ldr	r3, [r7, #12]
 801a946:	4413      	add	r3, r2
 801a948:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a94a:	697a      	ldr	r2, [r7, #20]
 801a94c:	683b      	ldr	r3, [r7, #0]
 801a94e:	429a      	cmp	r2, r3
 801a950:	da02      	bge.n	801a958 <ip_reass_remove_oldest_datagram+0xb4>
 801a952:	693b      	ldr	r3, [r7, #16]
 801a954:	2b01      	cmp	r3, #1
 801a956:	dcac      	bgt.n	801a8b2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a958:	697b      	ldr	r3, [r7, #20]
}
 801a95a:	4618      	mov	r0, r3
 801a95c:	3728      	adds	r7, #40	@ 0x28
 801a95e:	46bd      	mov	sp, r7
 801a960:	bd80      	pop	{r7, pc}
 801a962:	bf00      	nop
 801a964:	2000ca30 	.word	0x2000ca30

0801a968 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a968:	b580      	push	{r7, lr}
 801a96a:	b084      	sub	sp, #16
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	6078      	str	r0, [r7, #4]
 801a970:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a972:	2004      	movs	r0, #4
 801a974:	f7f6 fdf2 	bl	801155c <memp_malloc>
 801a978:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a97a:	68fb      	ldr	r3, [r7, #12]
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d110      	bne.n	801a9a2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a980:	6839      	ldr	r1, [r7, #0]
 801a982:	6878      	ldr	r0, [r7, #4]
 801a984:	f7ff ff8e 	bl	801a8a4 <ip_reass_remove_oldest_datagram>
 801a988:	4602      	mov	r2, r0
 801a98a:	683b      	ldr	r3, [r7, #0]
 801a98c:	4293      	cmp	r3, r2
 801a98e:	dc03      	bgt.n	801a998 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a990:	2004      	movs	r0, #4
 801a992:	f7f6 fde3 	bl	801155c <memp_malloc>
 801a996:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a998:	68fb      	ldr	r3, [r7, #12]
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	d101      	bne.n	801a9a2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a99e:	2300      	movs	r3, #0
 801a9a0:	e016      	b.n	801a9d0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a9a2:	2220      	movs	r2, #32
 801a9a4:	2100      	movs	r1, #0
 801a9a6:	68f8      	ldr	r0, [r7, #12]
 801a9a8:	f001 fe2d 	bl	801c606 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	220f      	movs	r2, #15
 801a9b0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a9b2:	4b09      	ldr	r3, [pc, #36]	@ (801a9d8 <ip_reass_enqueue_new_datagram+0x70>)
 801a9b4:	681a      	ldr	r2, [r3, #0]
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a9ba:	4a07      	ldr	r2, [pc, #28]	@ (801a9d8 <ip_reass_enqueue_new_datagram+0x70>)
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a9c0:	68fb      	ldr	r3, [r7, #12]
 801a9c2:	3308      	adds	r3, #8
 801a9c4:	2214      	movs	r2, #20
 801a9c6:	6879      	ldr	r1, [r7, #4]
 801a9c8:	4618      	mov	r0, r3
 801a9ca:	f001 ff1a 	bl	801c802 <memcpy>
  return ipr;
 801a9ce:	68fb      	ldr	r3, [r7, #12]
}
 801a9d0:	4618      	mov	r0, r3
 801a9d2:	3710      	adds	r7, #16
 801a9d4:	46bd      	mov	sp, r7
 801a9d6:	bd80      	pop	{r7, pc}
 801a9d8:	2000ca30 	.word	0x2000ca30

0801a9dc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a9dc:	b580      	push	{r7, lr}
 801a9de:	b082      	sub	sp, #8
 801a9e0:	af00      	add	r7, sp, #0
 801a9e2:	6078      	str	r0, [r7, #4]
 801a9e4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a9e6:	4b10      	ldr	r3, [pc, #64]	@ (801aa28 <ip_reass_dequeue_datagram+0x4c>)
 801a9e8:	681b      	ldr	r3, [r3, #0]
 801a9ea:	687a      	ldr	r2, [r7, #4]
 801a9ec:	429a      	cmp	r2, r3
 801a9ee:	d104      	bne.n	801a9fa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	681b      	ldr	r3, [r3, #0]
 801a9f4:	4a0c      	ldr	r2, [pc, #48]	@ (801aa28 <ip_reass_dequeue_datagram+0x4c>)
 801a9f6:	6013      	str	r3, [r2, #0]
 801a9f8:	e00d      	b.n	801aa16 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a9fa:	683b      	ldr	r3, [r7, #0]
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d106      	bne.n	801aa0e <ip_reass_dequeue_datagram+0x32>
 801aa00:	4b0a      	ldr	r3, [pc, #40]	@ (801aa2c <ip_reass_dequeue_datagram+0x50>)
 801aa02:	f240 1245 	movw	r2, #325	@ 0x145
 801aa06:	490a      	ldr	r1, [pc, #40]	@ (801aa30 <ip_reass_dequeue_datagram+0x54>)
 801aa08:	480a      	ldr	r0, [pc, #40]	@ (801aa34 <ip_reass_dequeue_datagram+0x58>)
 801aa0a:	f001 fd47 	bl	801c49c <iprintf>
    prev->next = ipr->next;
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	681a      	ldr	r2, [r3, #0]
 801aa12:	683b      	ldr	r3, [r7, #0]
 801aa14:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801aa16:	6879      	ldr	r1, [r7, #4]
 801aa18:	2004      	movs	r0, #4
 801aa1a:	f7f6 fe15 	bl	8011648 <memp_free>
}
 801aa1e:	bf00      	nop
 801aa20:	3708      	adds	r7, #8
 801aa22:	46bd      	mov	sp, r7
 801aa24:	bd80      	pop	{r7, pc}
 801aa26:	bf00      	nop
 801aa28:	2000ca30 	.word	0x2000ca30
 801aa2c:	080219d0 	.word	0x080219d0
 801aa30:	08021a98 	.word	0x08021a98
 801aa34:	08021a18 	.word	0x08021a18

0801aa38 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801aa38:	b580      	push	{r7, lr}
 801aa3a:	b08c      	sub	sp, #48	@ 0x30
 801aa3c:	af00      	add	r7, sp, #0
 801aa3e:	60f8      	str	r0, [r7, #12]
 801aa40:	60b9      	str	r1, [r7, #8]
 801aa42:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801aa44:	2300      	movs	r3, #0
 801aa46:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801aa48:	2301      	movs	r3, #1
 801aa4a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801aa4c:	68bb      	ldr	r3, [r7, #8]
 801aa4e:	685b      	ldr	r3, [r3, #4]
 801aa50:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801aa52:	69fb      	ldr	r3, [r7, #28]
 801aa54:	885b      	ldrh	r3, [r3, #2]
 801aa56:	b29b      	uxth	r3, r3
 801aa58:	4618      	mov	r0, r3
 801aa5a:	f7f6 f8a7 	bl	8010bac <lwip_htons>
 801aa5e:	4603      	mov	r3, r0
 801aa60:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801aa62:	69fb      	ldr	r3, [r7, #28]
 801aa64:	781b      	ldrb	r3, [r3, #0]
 801aa66:	f003 030f 	and.w	r3, r3, #15
 801aa6a:	b2db      	uxtb	r3, r3
 801aa6c:	009b      	lsls	r3, r3, #2
 801aa6e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801aa70:	7e7b      	ldrb	r3, [r7, #25]
 801aa72:	b29b      	uxth	r3, r3
 801aa74:	8b7a      	ldrh	r2, [r7, #26]
 801aa76:	429a      	cmp	r2, r3
 801aa78:	d202      	bcs.n	801aa80 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aa7a:	f04f 33ff 	mov.w	r3, #4294967295
 801aa7e:	e135      	b.n	801acec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801aa80:	7e7b      	ldrb	r3, [r7, #25]
 801aa82:	b29b      	uxth	r3, r3
 801aa84:	8b7a      	ldrh	r2, [r7, #26]
 801aa86:	1ad3      	subs	r3, r2, r3
 801aa88:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801aa8a:	69fb      	ldr	r3, [r7, #28]
 801aa8c:	88db      	ldrh	r3, [r3, #6]
 801aa8e:	b29b      	uxth	r3, r3
 801aa90:	4618      	mov	r0, r3
 801aa92:	f7f6 f88b 	bl	8010bac <lwip_htons>
 801aa96:	4603      	mov	r3, r0
 801aa98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801aa9c:	b29b      	uxth	r3, r3
 801aa9e:	00db      	lsls	r3, r3, #3
 801aaa0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801aaa2:	68bb      	ldr	r3, [r7, #8]
 801aaa4:	685b      	ldr	r3, [r3, #4]
 801aaa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801aaa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aaaa:	2200      	movs	r2, #0
 801aaac:	701a      	strb	r2, [r3, #0]
 801aaae:	2200      	movs	r2, #0
 801aab0:	705a      	strb	r2, [r3, #1]
 801aab2:	2200      	movs	r2, #0
 801aab4:	709a      	strb	r2, [r3, #2]
 801aab6:	2200      	movs	r2, #0
 801aab8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801aaba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aabc:	8afa      	ldrh	r2, [r7, #22]
 801aabe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801aac0:	8afa      	ldrh	r2, [r7, #22]
 801aac2:	8b7b      	ldrh	r3, [r7, #26]
 801aac4:	4413      	add	r3, r2
 801aac6:	b29a      	uxth	r2, r3
 801aac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aaca:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801aacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aace:	88db      	ldrh	r3, [r3, #6]
 801aad0:	b29b      	uxth	r3, r3
 801aad2:	8afa      	ldrh	r2, [r7, #22]
 801aad4:	429a      	cmp	r2, r3
 801aad6:	d902      	bls.n	801aade <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801aad8:	f04f 33ff 	mov.w	r3, #4294967295
 801aadc:	e106      	b.n	801acec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801aade:	68fb      	ldr	r3, [r7, #12]
 801aae0:	685b      	ldr	r3, [r3, #4]
 801aae2:	627b      	str	r3, [r7, #36]	@ 0x24
 801aae4:	e068      	b.n	801abb8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801aae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aae8:	685b      	ldr	r3, [r3, #4]
 801aaea:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801aaec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aaee:	889b      	ldrh	r3, [r3, #4]
 801aaf0:	b29a      	uxth	r2, r3
 801aaf2:	693b      	ldr	r3, [r7, #16]
 801aaf4:	889b      	ldrh	r3, [r3, #4]
 801aaf6:	b29b      	uxth	r3, r3
 801aaf8:	429a      	cmp	r2, r3
 801aafa:	d235      	bcs.n	801ab68 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801aafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aafe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ab00:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801ab02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	d020      	beq.n	801ab4a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801ab08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab0a:	889b      	ldrh	r3, [r3, #4]
 801ab0c:	b29a      	uxth	r2, r3
 801ab0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab10:	88db      	ldrh	r3, [r3, #6]
 801ab12:	b29b      	uxth	r3, r3
 801ab14:	429a      	cmp	r2, r3
 801ab16:	d307      	bcc.n	801ab28 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801ab18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab1a:	88db      	ldrh	r3, [r3, #6]
 801ab1c:	b29a      	uxth	r2, r3
 801ab1e:	693b      	ldr	r3, [r7, #16]
 801ab20:	889b      	ldrh	r3, [r3, #4]
 801ab22:	b29b      	uxth	r3, r3
 801ab24:	429a      	cmp	r2, r3
 801ab26:	d902      	bls.n	801ab2e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ab28:	f04f 33ff 	mov.w	r3, #4294967295
 801ab2c:	e0de      	b.n	801acec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801ab2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab30:	68ba      	ldr	r2, [r7, #8]
 801ab32:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801ab34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab36:	88db      	ldrh	r3, [r3, #6]
 801ab38:	b29a      	uxth	r2, r3
 801ab3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab3c:	889b      	ldrh	r3, [r3, #4]
 801ab3e:	b29b      	uxth	r3, r3
 801ab40:	429a      	cmp	r2, r3
 801ab42:	d03d      	beq.n	801abc0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ab44:	2300      	movs	r3, #0
 801ab46:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801ab48:	e03a      	b.n	801abc0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801ab4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab4c:	88db      	ldrh	r3, [r3, #6]
 801ab4e:	b29a      	uxth	r2, r3
 801ab50:	693b      	ldr	r3, [r7, #16]
 801ab52:	889b      	ldrh	r3, [r3, #4]
 801ab54:	b29b      	uxth	r3, r3
 801ab56:	429a      	cmp	r2, r3
 801ab58:	d902      	bls.n	801ab60 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ab5a:	f04f 33ff 	mov.w	r3, #4294967295
 801ab5e:	e0c5      	b.n	801acec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801ab60:	68fb      	ldr	r3, [r7, #12]
 801ab62:	68ba      	ldr	r2, [r7, #8]
 801ab64:	605a      	str	r2, [r3, #4]
      break;
 801ab66:	e02b      	b.n	801abc0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801ab68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab6a:	889b      	ldrh	r3, [r3, #4]
 801ab6c:	b29a      	uxth	r2, r3
 801ab6e:	693b      	ldr	r3, [r7, #16]
 801ab70:	889b      	ldrh	r3, [r3, #4]
 801ab72:	b29b      	uxth	r3, r3
 801ab74:	429a      	cmp	r2, r3
 801ab76:	d102      	bne.n	801ab7e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ab78:	f04f 33ff 	mov.w	r3, #4294967295
 801ab7c:	e0b6      	b.n	801acec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801ab7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab80:	889b      	ldrh	r3, [r3, #4]
 801ab82:	b29a      	uxth	r2, r3
 801ab84:	693b      	ldr	r3, [r7, #16]
 801ab86:	88db      	ldrh	r3, [r3, #6]
 801ab88:	b29b      	uxth	r3, r3
 801ab8a:	429a      	cmp	r2, r3
 801ab8c:	d202      	bcs.n	801ab94 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ab8e:	f04f 33ff 	mov.w	r3, #4294967295
 801ab92:	e0ab      	b.n	801acec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801ab94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	d009      	beq.n	801abae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801ab9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab9c:	88db      	ldrh	r3, [r3, #6]
 801ab9e:	b29a      	uxth	r2, r3
 801aba0:	693b      	ldr	r3, [r7, #16]
 801aba2:	889b      	ldrh	r3, [r3, #4]
 801aba4:	b29b      	uxth	r3, r3
 801aba6:	429a      	cmp	r2, r3
 801aba8:	d001      	beq.n	801abae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801abaa:	2300      	movs	r3, #0
 801abac:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801abae:	693b      	ldr	r3, [r7, #16]
 801abb0:	681b      	ldr	r3, [r3, #0]
 801abb2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801abb4:	693b      	ldr	r3, [r7, #16]
 801abb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801abb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d193      	bne.n	801aae6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801abbe:	e000      	b.n	801abc2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801abc0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801abc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d12d      	bne.n	801ac24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801abc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abca:	2b00      	cmp	r3, #0
 801abcc:	d01c      	beq.n	801ac08 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801abce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abd0:	88db      	ldrh	r3, [r3, #6]
 801abd2:	b29a      	uxth	r2, r3
 801abd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801abd6:	889b      	ldrh	r3, [r3, #4]
 801abd8:	b29b      	uxth	r3, r3
 801abda:	429a      	cmp	r2, r3
 801abdc:	d906      	bls.n	801abec <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801abde:	4b45      	ldr	r3, [pc, #276]	@ (801acf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801abe0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801abe4:	4944      	ldr	r1, [pc, #272]	@ (801acf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801abe6:	4845      	ldr	r0, [pc, #276]	@ (801acfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801abe8:	f001 fc58 	bl	801c49c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801abec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abee:	68ba      	ldr	r2, [r7, #8]
 801abf0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801abf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abf4:	88db      	ldrh	r3, [r3, #6]
 801abf6:	b29a      	uxth	r2, r3
 801abf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801abfa:	889b      	ldrh	r3, [r3, #4]
 801abfc:	b29b      	uxth	r3, r3
 801abfe:	429a      	cmp	r2, r3
 801ac00:	d010      	beq.n	801ac24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801ac02:	2300      	movs	r3, #0
 801ac04:	623b      	str	r3, [r7, #32]
 801ac06:	e00d      	b.n	801ac24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801ac08:	68fb      	ldr	r3, [r7, #12]
 801ac0a:	685b      	ldr	r3, [r3, #4]
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	d006      	beq.n	801ac1e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801ac10:	4b38      	ldr	r3, [pc, #224]	@ (801acf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ac12:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801ac16:	493a      	ldr	r1, [pc, #232]	@ (801ad00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801ac18:	4838      	ldr	r0, [pc, #224]	@ (801acfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ac1a:	f001 fc3f 	bl	801c49c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801ac1e:	68fb      	ldr	r3, [r7, #12]
 801ac20:	68ba      	ldr	r2, [r7, #8]
 801ac22:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	d105      	bne.n	801ac36 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801ac2a:	68fb      	ldr	r3, [r7, #12]
 801ac2c:	7f9b      	ldrb	r3, [r3, #30]
 801ac2e:	f003 0301 	and.w	r3, r3, #1
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	d059      	beq.n	801acea <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801ac36:	6a3b      	ldr	r3, [r7, #32]
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d04f      	beq.n	801acdc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801ac3c:	68fb      	ldr	r3, [r7, #12]
 801ac3e:	685b      	ldr	r3, [r3, #4]
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	d006      	beq.n	801ac52 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801ac44:	68fb      	ldr	r3, [r7, #12]
 801ac46:	685b      	ldr	r3, [r3, #4]
 801ac48:	685b      	ldr	r3, [r3, #4]
 801ac4a:	889b      	ldrh	r3, [r3, #4]
 801ac4c:	b29b      	uxth	r3, r3
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	d002      	beq.n	801ac58 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801ac52:	2300      	movs	r3, #0
 801ac54:	623b      	str	r3, [r7, #32]
 801ac56:	e041      	b.n	801acdc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801ac58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac5a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801ac5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801ac62:	e012      	b.n	801ac8a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801ac64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac66:	685b      	ldr	r3, [r3, #4]
 801ac68:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801ac6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ac6c:	88db      	ldrh	r3, [r3, #6]
 801ac6e:	b29a      	uxth	r2, r3
 801ac70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac72:	889b      	ldrh	r3, [r3, #4]
 801ac74:	b29b      	uxth	r3, r3
 801ac76:	429a      	cmp	r2, r3
 801ac78:	d002      	beq.n	801ac80 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801ac7a:	2300      	movs	r3, #0
 801ac7c:	623b      	str	r3, [r7, #32]
            break;
 801ac7e:	e007      	b.n	801ac90 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801ac80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac82:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801ac84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801ac8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d1e9      	bne.n	801ac64 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801ac90:	6a3b      	ldr	r3, [r7, #32]
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	d022      	beq.n	801acdc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801ac96:	68fb      	ldr	r3, [r7, #12]
 801ac98:	685b      	ldr	r3, [r3, #4]
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d106      	bne.n	801acac <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801ac9e:	4b15      	ldr	r3, [pc, #84]	@ (801acf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801aca0:	f240 12df 	movw	r2, #479	@ 0x1df
 801aca4:	4917      	ldr	r1, [pc, #92]	@ (801ad04 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801aca6:	4815      	ldr	r0, [pc, #84]	@ (801acfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801aca8:	f001 fbf8 	bl	801c49c <iprintf>
          LWIP_ASSERT("sanity check",
 801acac:	68fb      	ldr	r3, [r7, #12]
 801acae:	685b      	ldr	r3, [r3, #4]
 801acb0:	685b      	ldr	r3, [r3, #4]
 801acb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801acb4:	429a      	cmp	r2, r3
 801acb6:	d106      	bne.n	801acc6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801acb8:	4b0e      	ldr	r3, [pc, #56]	@ (801acf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801acba:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801acbe:	4911      	ldr	r1, [pc, #68]	@ (801ad04 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801acc0:	480e      	ldr	r0, [pc, #56]	@ (801acfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801acc2:	f001 fbeb 	bl	801c49c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801acc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	2b00      	cmp	r3, #0
 801accc:	d006      	beq.n	801acdc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801acce:	4b09      	ldr	r3, [pc, #36]	@ (801acf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801acd0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801acd4:	490c      	ldr	r1, [pc, #48]	@ (801ad08 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801acd6:	4809      	ldr	r0, [pc, #36]	@ (801acfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801acd8:	f001 fbe0 	bl	801c49c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801acdc:	6a3b      	ldr	r3, [r7, #32]
 801acde:	2b00      	cmp	r3, #0
 801ace0:	bf14      	ite	ne
 801ace2:	2301      	movne	r3, #1
 801ace4:	2300      	moveq	r3, #0
 801ace6:	b2db      	uxtb	r3, r3
 801ace8:	e000      	b.n	801acec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801acea:	2300      	movs	r3, #0
}
 801acec:	4618      	mov	r0, r3
 801acee:	3730      	adds	r7, #48	@ 0x30
 801acf0:	46bd      	mov	sp, r7
 801acf2:	bd80      	pop	{r7, pc}
 801acf4:	080219d0 	.word	0x080219d0
 801acf8:	08021ab4 	.word	0x08021ab4
 801acfc:	08021a18 	.word	0x08021a18
 801ad00:	08021ad4 	.word	0x08021ad4
 801ad04:	08021b0c 	.word	0x08021b0c
 801ad08:	08021b1c 	.word	0x08021b1c

0801ad0c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801ad0c:	b580      	push	{r7, lr}
 801ad0e:	b08e      	sub	sp, #56	@ 0x38
 801ad10:	af00      	add	r7, sp, #0
 801ad12:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	685b      	ldr	r3, [r3, #4]
 801ad18:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801ad1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ad1c:	781b      	ldrb	r3, [r3, #0]
 801ad1e:	f003 030f 	and.w	r3, r3, #15
 801ad22:	b2db      	uxtb	r3, r3
 801ad24:	009b      	lsls	r3, r3, #2
 801ad26:	b2db      	uxtb	r3, r3
 801ad28:	2b14      	cmp	r3, #20
 801ad2a:	f040 8171 	bne.w	801b010 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801ad2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ad30:	88db      	ldrh	r3, [r3, #6]
 801ad32:	b29b      	uxth	r3, r3
 801ad34:	4618      	mov	r0, r3
 801ad36:	f7f5 ff39 	bl	8010bac <lwip_htons>
 801ad3a:	4603      	mov	r3, r0
 801ad3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ad40:	b29b      	uxth	r3, r3
 801ad42:	00db      	lsls	r3, r3, #3
 801ad44:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ad46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ad48:	885b      	ldrh	r3, [r3, #2]
 801ad4a:	b29b      	uxth	r3, r3
 801ad4c:	4618      	mov	r0, r3
 801ad4e:	f7f5 ff2d 	bl	8010bac <lwip_htons>
 801ad52:	4603      	mov	r3, r0
 801ad54:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801ad56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ad58:	781b      	ldrb	r3, [r3, #0]
 801ad5a:	f003 030f 	and.w	r3, r3, #15
 801ad5e:	b2db      	uxtb	r3, r3
 801ad60:	009b      	lsls	r3, r3, #2
 801ad62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801ad66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ad6a:	b29b      	uxth	r3, r3
 801ad6c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ad6e:	429a      	cmp	r2, r3
 801ad70:	f0c0 8150 	bcc.w	801b014 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801ad74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ad78:	b29b      	uxth	r3, r3
 801ad7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ad7c:	1ad3      	subs	r3, r2, r3
 801ad7e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801ad80:	6878      	ldr	r0, [r7, #4]
 801ad82:	f7f7 fb61 	bl	8012448 <pbuf_clen>
 801ad86:	4603      	mov	r3, r0
 801ad88:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801ad8a:	4b8c      	ldr	r3, [pc, #560]	@ (801afbc <ip4_reass+0x2b0>)
 801ad8c:	881b      	ldrh	r3, [r3, #0]
 801ad8e:	461a      	mov	r2, r3
 801ad90:	8c3b      	ldrh	r3, [r7, #32]
 801ad92:	4413      	add	r3, r2
 801ad94:	2b0a      	cmp	r3, #10
 801ad96:	dd10      	ble.n	801adba <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ad98:	8c3b      	ldrh	r3, [r7, #32]
 801ad9a:	4619      	mov	r1, r3
 801ad9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ad9e:	f7ff fd81 	bl	801a8a4 <ip_reass_remove_oldest_datagram>
 801ada2:	4603      	mov	r3, r0
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	f000 8137 	beq.w	801b018 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801adaa:	4b84      	ldr	r3, [pc, #528]	@ (801afbc <ip4_reass+0x2b0>)
 801adac:	881b      	ldrh	r3, [r3, #0]
 801adae:	461a      	mov	r2, r3
 801adb0:	8c3b      	ldrh	r3, [r7, #32]
 801adb2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801adb4:	2b0a      	cmp	r3, #10
 801adb6:	f300 812f 	bgt.w	801b018 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801adba:	4b81      	ldr	r3, [pc, #516]	@ (801afc0 <ip4_reass+0x2b4>)
 801adbc:	681b      	ldr	r3, [r3, #0]
 801adbe:	633b      	str	r3, [r7, #48]	@ 0x30
 801adc0:	e015      	b.n	801adee <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801adc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801adc4:	695a      	ldr	r2, [r3, #20]
 801adc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801adc8:	68db      	ldr	r3, [r3, #12]
 801adca:	429a      	cmp	r2, r3
 801adcc:	d10c      	bne.n	801ade8 <ip4_reass+0xdc>
 801adce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801add0:	699a      	ldr	r2, [r3, #24]
 801add2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801add4:	691b      	ldr	r3, [r3, #16]
 801add6:	429a      	cmp	r2, r3
 801add8:	d106      	bne.n	801ade8 <ip4_reass+0xdc>
 801adda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801addc:	899a      	ldrh	r2, [r3, #12]
 801adde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ade0:	889b      	ldrh	r3, [r3, #4]
 801ade2:	b29b      	uxth	r3, r3
 801ade4:	429a      	cmp	r2, r3
 801ade6:	d006      	beq.n	801adf6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ade8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801adea:	681b      	ldr	r3, [r3, #0]
 801adec:	633b      	str	r3, [r7, #48]	@ 0x30
 801adee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d1e6      	bne.n	801adc2 <ip4_reass+0xb6>
 801adf4:	e000      	b.n	801adf8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801adf6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801adf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	d109      	bne.n	801ae12 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801adfe:	8c3b      	ldrh	r3, [r7, #32]
 801ae00:	4619      	mov	r1, r3
 801ae02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ae04:	f7ff fdb0 	bl	801a968 <ip_reass_enqueue_new_datagram>
 801ae08:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801ae0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	d11c      	bne.n	801ae4a <ip4_reass+0x13e>
      goto nullreturn;
 801ae10:	e105      	b.n	801b01e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ae12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae14:	88db      	ldrh	r3, [r3, #6]
 801ae16:	b29b      	uxth	r3, r3
 801ae18:	4618      	mov	r0, r3
 801ae1a:	f7f5 fec7 	bl	8010bac <lwip_htons>
 801ae1e:	4603      	mov	r3, r0
 801ae20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ae24:	2b00      	cmp	r3, #0
 801ae26:	d110      	bne.n	801ae4a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801ae28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae2a:	89db      	ldrh	r3, [r3, #14]
 801ae2c:	4618      	mov	r0, r3
 801ae2e:	f7f5 febd 	bl	8010bac <lwip_htons>
 801ae32:	4603      	mov	r3, r0
 801ae34:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d006      	beq.n	801ae4a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801ae3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae3e:	3308      	adds	r3, #8
 801ae40:	2214      	movs	r2, #20
 801ae42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801ae44:	4618      	mov	r0, r3
 801ae46:	f001 fcdc 	bl	801c802 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801ae4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae4c:	88db      	ldrh	r3, [r3, #6]
 801ae4e:	b29b      	uxth	r3, r3
 801ae50:	f003 0320 	and.w	r3, r3, #32
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	bf0c      	ite	eq
 801ae58:	2301      	moveq	r3, #1
 801ae5a:	2300      	movne	r3, #0
 801ae5c:	b2db      	uxtb	r3, r3
 801ae5e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801ae60:	69fb      	ldr	r3, [r7, #28]
 801ae62:	2b00      	cmp	r3, #0
 801ae64:	d00e      	beq.n	801ae84 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801ae66:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801ae68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ae6a:	4413      	add	r3, r2
 801ae6c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801ae6e:	8b7a      	ldrh	r2, [r7, #26]
 801ae70:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801ae72:	429a      	cmp	r2, r3
 801ae74:	f0c0 80a0 	bcc.w	801afb8 <ip4_reass+0x2ac>
 801ae78:	8b7b      	ldrh	r3, [r7, #26]
 801ae7a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801ae7e:	4293      	cmp	r3, r2
 801ae80:	f200 809a 	bhi.w	801afb8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801ae84:	69fa      	ldr	r2, [r7, #28]
 801ae86:	6879      	ldr	r1, [r7, #4]
 801ae88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801ae8a:	f7ff fdd5 	bl	801aa38 <ip_reass_chain_frag_into_datagram_and_validate>
 801ae8e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801ae90:	697b      	ldr	r3, [r7, #20]
 801ae92:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ae96:	f000 809b 	beq.w	801afd0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ae9a:	4b48      	ldr	r3, [pc, #288]	@ (801afbc <ip4_reass+0x2b0>)
 801ae9c:	881a      	ldrh	r2, [r3, #0]
 801ae9e:	8c3b      	ldrh	r3, [r7, #32]
 801aea0:	4413      	add	r3, r2
 801aea2:	b29a      	uxth	r2, r3
 801aea4:	4b45      	ldr	r3, [pc, #276]	@ (801afbc <ip4_reass+0x2b0>)
 801aea6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801aea8:	69fb      	ldr	r3, [r7, #28]
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	d00d      	beq.n	801aeca <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801aeae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801aeb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aeb2:	4413      	add	r3, r2
 801aeb4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801aeb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aeb8:	8a7a      	ldrh	r2, [r7, #18]
 801aeba:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801aebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aebe:	7f9b      	ldrb	r3, [r3, #30]
 801aec0:	f043 0301 	orr.w	r3, r3, #1
 801aec4:	b2da      	uxtb	r2, r3
 801aec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aec8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801aeca:	697b      	ldr	r3, [r7, #20]
 801aecc:	2b01      	cmp	r3, #1
 801aece:	d171      	bne.n	801afb4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801aed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aed2:	8b9b      	ldrh	r3, [r3, #28]
 801aed4:	3314      	adds	r3, #20
 801aed6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801aed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aeda:	685b      	ldr	r3, [r3, #4]
 801aedc:	685b      	ldr	r3, [r3, #4]
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801aee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aee4:	685b      	ldr	r3, [r3, #4]
 801aee6:	685b      	ldr	r3, [r3, #4]
 801aee8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801aeea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aeec:	3308      	adds	r3, #8
 801aeee:	2214      	movs	r2, #20
 801aef0:	4619      	mov	r1, r3
 801aef2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801aef4:	f001 fc85 	bl	801c802 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801aef8:	8a3b      	ldrh	r3, [r7, #16]
 801aefa:	4618      	mov	r0, r3
 801aefc:	f7f5 fe56 	bl	8010bac <lwip_htons>
 801af00:	4603      	mov	r3, r0
 801af02:	461a      	mov	r2, r3
 801af04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af06:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801af08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af0a:	2200      	movs	r2, #0
 801af0c:	719a      	strb	r2, [r3, #6]
 801af0e:	2200      	movs	r2, #0
 801af10:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801af12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af14:	2200      	movs	r2, #0
 801af16:	729a      	strb	r2, [r3, #10]
 801af18:	2200      	movs	r2, #0
 801af1a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801af1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af1e:	685b      	ldr	r3, [r3, #4]
 801af20:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801af22:	e00d      	b.n	801af40 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801af24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801af26:	685b      	ldr	r3, [r3, #4]
 801af28:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801af2a:	2114      	movs	r1, #20
 801af2c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801af2e:	f7f7 f977 	bl	8012220 <pbuf_remove_header>
      pbuf_cat(p, r);
 801af32:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801af34:	6878      	ldr	r0, [r7, #4]
 801af36:	f7f7 fac7 	bl	80124c8 <pbuf_cat>
      r = iprh->next_pbuf;
 801af3a:	68fb      	ldr	r3, [r7, #12]
 801af3c:	681b      	ldr	r3, [r3, #0]
 801af3e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801af40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801af42:	2b00      	cmp	r3, #0
 801af44:	d1ee      	bne.n	801af24 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801af46:	4b1e      	ldr	r3, [pc, #120]	@ (801afc0 <ip4_reass+0x2b4>)
 801af48:	681b      	ldr	r3, [r3, #0]
 801af4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801af4c:	429a      	cmp	r2, r3
 801af4e:	d102      	bne.n	801af56 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801af50:	2300      	movs	r3, #0
 801af52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801af54:	e010      	b.n	801af78 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801af56:	4b1a      	ldr	r3, [pc, #104]	@ (801afc0 <ip4_reass+0x2b4>)
 801af58:	681b      	ldr	r3, [r3, #0]
 801af5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801af5c:	e007      	b.n	801af6e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801af5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af60:	681b      	ldr	r3, [r3, #0]
 801af62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801af64:	429a      	cmp	r2, r3
 801af66:	d006      	beq.n	801af76 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801af68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801af6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af70:	2b00      	cmp	r3, #0
 801af72:	d1f4      	bne.n	801af5e <ip4_reass+0x252>
 801af74:	e000      	b.n	801af78 <ip4_reass+0x26c>
          break;
 801af76:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801af78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801af7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801af7c:	f7ff fd2e 	bl	801a9dc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801af80:	6878      	ldr	r0, [r7, #4]
 801af82:	f7f7 fa61 	bl	8012448 <pbuf_clen>
 801af86:	4603      	mov	r3, r0
 801af88:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801af8a:	4b0c      	ldr	r3, [pc, #48]	@ (801afbc <ip4_reass+0x2b0>)
 801af8c:	881b      	ldrh	r3, [r3, #0]
 801af8e:	8c3a      	ldrh	r2, [r7, #32]
 801af90:	429a      	cmp	r2, r3
 801af92:	d906      	bls.n	801afa2 <ip4_reass+0x296>
 801af94:	4b0b      	ldr	r3, [pc, #44]	@ (801afc4 <ip4_reass+0x2b8>)
 801af96:	f240 229b 	movw	r2, #667	@ 0x29b
 801af9a:	490b      	ldr	r1, [pc, #44]	@ (801afc8 <ip4_reass+0x2bc>)
 801af9c:	480b      	ldr	r0, [pc, #44]	@ (801afcc <ip4_reass+0x2c0>)
 801af9e:	f001 fa7d 	bl	801c49c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801afa2:	4b06      	ldr	r3, [pc, #24]	@ (801afbc <ip4_reass+0x2b0>)
 801afa4:	881a      	ldrh	r2, [r3, #0]
 801afa6:	8c3b      	ldrh	r3, [r7, #32]
 801afa8:	1ad3      	subs	r3, r2, r3
 801afaa:	b29a      	uxth	r2, r3
 801afac:	4b03      	ldr	r3, [pc, #12]	@ (801afbc <ip4_reass+0x2b0>)
 801afae:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	e038      	b.n	801b026 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801afb4:	2300      	movs	r3, #0
 801afb6:	e036      	b.n	801b026 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801afb8:	bf00      	nop
 801afba:	e00a      	b.n	801afd2 <ip4_reass+0x2c6>
 801afbc:	2000ca34 	.word	0x2000ca34
 801afc0:	2000ca30 	.word	0x2000ca30
 801afc4:	080219d0 	.word	0x080219d0
 801afc8:	08021b40 	.word	0x08021b40
 801afcc:	08021a18 	.word	0x08021a18
    goto nullreturn_ipr;
 801afd0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801afd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801afd4:	2b00      	cmp	r3, #0
 801afd6:	d106      	bne.n	801afe6 <ip4_reass+0x2da>
 801afd8:	4b15      	ldr	r3, [pc, #84]	@ (801b030 <ip4_reass+0x324>)
 801afda:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801afde:	4915      	ldr	r1, [pc, #84]	@ (801b034 <ip4_reass+0x328>)
 801afe0:	4815      	ldr	r0, [pc, #84]	@ (801b038 <ip4_reass+0x32c>)
 801afe2:	f001 fa5b 	bl	801c49c <iprintf>
  if (ipr->p == NULL) {
 801afe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801afe8:	685b      	ldr	r3, [r3, #4]
 801afea:	2b00      	cmp	r3, #0
 801afec:	d116      	bne.n	801b01c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801afee:	4b13      	ldr	r3, [pc, #76]	@ (801b03c <ip4_reass+0x330>)
 801aff0:	681b      	ldr	r3, [r3, #0]
 801aff2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aff4:	429a      	cmp	r2, r3
 801aff6:	d006      	beq.n	801b006 <ip4_reass+0x2fa>
 801aff8:	4b0d      	ldr	r3, [pc, #52]	@ (801b030 <ip4_reass+0x324>)
 801affa:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801affe:	4910      	ldr	r1, [pc, #64]	@ (801b040 <ip4_reass+0x334>)
 801b000:	480d      	ldr	r0, [pc, #52]	@ (801b038 <ip4_reass+0x32c>)
 801b002:	f001 fa4b 	bl	801c49c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801b006:	2100      	movs	r1, #0
 801b008:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b00a:	f7ff fce7 	bl	801a9dc <ip_reass_dequeue_datagram>
 801b00e:	e006      	b.n	801b01e <ip4_reass+0x312>
    goto nullreturn;
 801b010:	bf00      	nop
 801b012:	e004      	b.n	801b01e <ip4_reass+0x312>
    goto nullreturn;
 801b014:	bf00      	nop
 801b016:	e002      	b.n	801b01e <ip4_reass+0x312>
      goto nullreturn;
 801b018:	bf00      	nop
 801b01a:	e000      	b.n	801b01e <ip4_reass+0x312>
  }

nullreturn:
 801b01c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801b01e:	6878      	ldr	r0, [r7, #4]
 801b020:	f7f7 f984 	bl	801232c <pbuf_free>
  return NULL;
 801b024:	2300      	movs	r3, #0
}
 801b026:	4618      	mov	r0, r3
 801b028:	3738      	adds	r7, #56	@ 0x38
 801b02a:	46bd      	mov	sp, r7
 801b02c:	bd80      	pop	{r7, pc}
 801b02e:	bf00      	nop
 801b030:	080219d0 	.word	0x080219d0
 801b034:	08021b5c 	.word	0x08021b5c
 801b038:	08021a18 	.word	0x08021a18
 801b03c:	2000ca30 	.word	0x2000ca30
 801b040:	08021b68 	.word	0x08021b68

0801b044 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801b044:	b580      	push	{r7, lr}
 801b046:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801b048:	2005      	movs	r0, #5
 801b04a:	f7f6 fa87 	bl	801155c <memp_malloc>
 801b04e:	4603      	mov	r3, r0
}
 801b050:	4618      	mov	r0, r3
 801b052:	bd80      	pop	{r7, pc}

0801b054 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801b054:	b580      	push	{r7, lr}
 801b056:	b082      	sub	sp, #8
 801b058:	af00      	add	r7, sp, #0
 801b05a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	2b00      	cmp	r3, #0
 801b060:	d106      	bne.n	801b070 <ip_frag_free_pbuf_custom_ref+0x1c>
 801b062:	4b07      	ldr	r3, [pc, #28]	@ (801b080 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801b064:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801b068:	4906      	ldr	r1, [pc, #24]	@ (801b084 <ip_frag_free_pbuf_custom_ref+0x30>)
 801b06a:	4807      	ldr	r0, [pc, #28]	@ (801b088 <ip_frag_free_pbuf_custom_ref+0x34>)
 801b06c:	f001 fa16 	bl	801c49c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801b070:	6879      	ldr	r1, [r7, #4]
 801b072:	2005      	movs	r0, #5
 801b074:	f7f6 fae8 	bl	8011648 <memp_free>
}
 801b078:	bf00      	nop
 801b07a:	3708      	adds	r7, #8
 801b07c:	46bd      	mov	sp, r7
 801b07e:	bd80      	pop	{r7, pc}
 801b080:	080219d0 	.word	0x080219d0
 801b084:	08021b88 	.word	0x08021b88
 801b088:	08021a18 	.word	0x08021a18

0801b08c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801b08c:	b580      	push	{r7, lr}
 801b08e:	b084      	sub	sp, #16
 801b090:	af00      	add	r7, sp, #0
 801b092:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801b098:	68fb      	ldr	r3, [r7, #12]
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d106      	bne.n	801b0ac <ipfrag_free_pbuf_custom+0x20>
 801b09e:	4b11      	ldr	r3, [pc, #68]	@ (801b0e4 <ipfrag_free_pbuf_custom+0x58>)
 801b0a0:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801b0a4:	4910      	ldr	r1, [pc, #64]	@ (801b0e8 <ipfrag_free_pbuf_custom+0x5c>)
 801b0a6:	4811      	ldr	r0, [pc, #68]	@ (801b0ec <ipfrag_free_pbuf_custom+0x60>)
 801b0a8:	f001 f9f8 	bl	801c49c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801b0ac:	68fa      	ldr	r2, [r7, #12]
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	429a      	cmp	r2, r3
 801b0b2:	d006      	beq.n	801b0c2 <ipfrag_free_pbuf_custom+0x36>
 801b0b4:	4b0b      	ldr	r3, [pc, #44]	@ (801b0e4 <ipfrag_free_pbuf_custom+0x58>)
 801b0b6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801b0ba:	490d      	ldr	r1, [pc, #52]	@ (801b0f0 <ipfrag_free_pbuf_custom+0x64>)
 801b0bc:	480b      	ldr	r0, [pc, #44]	@ (801b0ec <ipfrag_free_pbuf_custom+0x60>)
 801b0be:	f001 f9ed 	bl	801c49c <iprintf>
  if (pcr->original != NULL) {
 801b0c2:	68fb      	ldr	r3, [r7, #12]
 801b0c4:	695b      	ldr	r3, [r3, #20]
 801b0c6:	2b00      	cmp	r3, #0
 801b0c8:	d004      	beq.n	801b0d4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801b0ca:	68fb      	ldr	r3, [r7, #12]
 801b0cc:	695b      	ldr	r3, [r3, #20]
 801b0ce:	4618      	mov	r0, r3
 801b0d0:	f7f7 f92c 	bl	801232c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801b0d4:	68f8      	ldr	r0, [r7, #12]
 801b0d6:	f7ff ffbd 	bl	801b054 <ip_frag_free_pbuf_custom_ref>
}
 801b0da:	bf00      	nop
 801b0dc:	3710      	adds	r7, #16
 801b0de:	46bd      	mov	sp, r7
 801b0e0:	bd80      	pop	{r7, pc}
 801b0e2:	bf00      	nop
 801b0e4:	080219d0 	.word	0x080219d0
 801b0e8:	08021b94 	.word	0x08021b94
 801b0ec:	08021a18 	.word	0x08021a18
 801b0f0:	08021ba0 	.word	0x08021ba0

0801b0f4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801b0f4:	b580      	push	{r7, lr}
 801b0f6:	b094      	sub	sp, #80	@ 0x50
 801b0f8:	af02      	add	r7, sp, #8
 801b0fa:	60f8      	str	r0, [r7, #12]
 801b0fc:	60b9      	str	r1, [r7, #8]
 801b0fe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801b100:	2300      	movs	r3, #0
 801b102:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801b106:	68bb      	ldr	r3, [r7, #8]
 801b108:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801b10a:	3b14      	subs	r3, #20
 801b10c:	2b00      	cmp	r3, #0
 801b10e:	da00      	bge.n	801b112 <ip4_frag+0x1e>
 801b110:	3307      	adds	r3, #7
 801b112:	10db      	asrs	r3, r3, #3
 801b114:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801b116:	2314      	movs	r3, #20
 801b118:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801b11a:	68fb      	ldr	r3, [r7, #12]
 801b11c:	685b      	ldr	r3, [r3, #4]
 801b11e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801b120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b122:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801b124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b126:	781b      	ldrb	r3, [r3, #0]
 801b128:	f003 030f 	and.w	r3, r3, #15
 801b12c:	b2db      	uxtb	r3, r3
 801b12e:	009b      	lsls	r3, r3, #2
 801b130:	b2db      	uxtb	r3, r3
 801b132:	2b14      	cmp	r3, #20
 801b134:	d002      	beq.n	801b13c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801b136:	f06f 0305 	mvn.w	r3, #5
 801b13a:	e110      	b.n	801b35e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801b13c:	68fb      	ldr	r3, [r7, #12]
 801b13e:	895b      	ldrh	r3, [r3, #10]
 801b140:	2b13      	cmp	r3, #19
 801b142:	d809      	bhi.n	801b158 <ip4_frag+0x64>
 801b144:	4b88      	ldr	r3, [pc, #544]	@ (801b368 <ip4_frag+0x274>)
 801b146:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801b14a:	4988      	ldr	r1, [pc, #544]	@ (801b36c <ip4_frag+0x278>)
 801b14c:	4888      	ldr	r0, [pc, #544]	@ (801b370 <ip4_frag+0x27c>)
 801b14e:	f001 f9a5 	bl	801c49c <iprintf>
 801b152:	f06f 0305 	mvn.w	r3, #5
 801b156:	e102      	b.n	801b35e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801b158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b15a:	88db      	ldrh	r3, [r3, #6]
 801b15c:	b29b      	uxth	r3, r3
 801b15e:	4618      	mov	r0, r3
 801b160:	f7f5 fd24 	bl	8010bac <lwip_htons>
 801b164:	4603      	mov	r3, r0
 801b166:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801b168:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b16a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b16e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801b172:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b174:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801b178:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801b17a:	68fb      	ldr	r3, [r7, #12]
 801b17c:	891b      	ldrh	r3, [r3, #8]
 801b17e:	3b14      	subs	r3, #20
 801b180:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801b184:	e0e1      	b.n	801b34a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801b186:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801b188:	00db      	lsls	r3, r3, #3
 801b18a:	b29b      	uxth	r3, r3
 801b18c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801b190:	4293      	cmp	r3, r2
 801b192:	bf28      	it	cs
 801b194:	4613      	movcs	r3, r2
 801b196:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801b198:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b19c:	2114      	movs	r1, #20
 801b19e:	200e      	movs	r0, #14
 801b1a0:	f7f6 fde0 	bl	8011d64 <pbuf_alloc>
 801b1a4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801b1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	f000 80d5 	beq.w	801b358 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1b0:	895b      	ldrh	r3, [r3, #10]
 801b1b2:	2b13      	cmp	r3, #19
 801b1b4:	d806      	bhi.n	801b1c4 <ip4_frag+0xd0>
 801b1b6:	4b6c      	ldr	r3, [pc, #432]	@ (801b368 <ip4_frag+0x274>)
 801b1b8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801b1bc:	496d      	ldr	r1, [pc, #436]	@ (801b374 <ip4_frag+0x280>)
 801b1be:	486c      	ldr	r0, [pc, #432]	@ (801b370 <ip4_frag+0x27c>)
 801b1c0:	f001 f96c 	bl	801c49c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1c6:	685b      	ldr	r3, [r3, #4]
 801b1c8:	2214      	movs	r2, #20
 801b1ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801b1cc:	4618      	mov	r0, r3
 801b1ce:	f001 fb18 	bl	801c802 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1d4:	685b      	ldr	r3, [r3, #4]
 801b1d6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801b1d8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801b1da:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801b1de:	e064      	b.n	801b2aa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801b1e0:	68fb      	ldr	r3, [r7, #12]
 801b1e2:	895a      	ldrh	r2, [r3, #10]
 801b1e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b1e6:	1ad3      	subs	r3, r2, r3
 801b1e8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801b1ea:	68fb      	ldr	r3, [r7, #12]
 801b1ec:	895b      	ldrh	r3, [r3, #10]
 801b1ee:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801b1f0:	429a      	cmp	r2, r3
 801b1f2:	d906      	bls.n	801b202 <ip4_frag+0x10e>
 801b1f4:	4b5c      	ldr	r3, [pc, #368]	@ (801b368 <ip4_frag+0x274>)
 801b1f6:	f240 322d 	movw	r2, #813	@ 0x32d
 801b1fa:	495f      	ldr	r1, [pc, #380]	@ (801b378 <ip4_frag+0x284>)
 801b1fc:	485c      	ldr	r0, [pc, #368]	@ (801b370 <ip4_frag+0x27c>)
 801b1fe:	f001 f94d 	bl	801c49c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b202:	8bfa      	ldrh	r2, [r7, #30]
 801b204:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801b208:	4293      	cmp	r3, r2
 801b20a:	bf28      	it	cs
 801b20c:	4613      	movcs	r3, r2
 801b20e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801b212:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801b216:	2b00      	cmp	r3, #0
 801b218:	d105      	bne.n	801b226 <ip4_frag+0x132>
        poff = 0;
 801b21a:	2300      	movs	r3, #0
 801b21c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801b21e:	68fb      	ldr	r3, [r7, #12]
 801b220:	681b      	ldr	r3, [r3, #0]
 801b222:	60fb      	str	r3, [r7, #12]
        continue;
 801b224:	e041      	b.n	801b2aa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b226:	f7ff ff0d 	bl	801b044 <ip_frag_alloc_pbuf_custom_ref>
 801b22a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801b22c:	69bb      	ldr	r3, [r7, #24]
 801b22e:	2b00      	cmp	r3, #0
 801b230:	d103      	bne.n	801b23a <ip4_frag+0x146>
        pbuf_free(rambuf);
 801b232:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b234:	f7f7 f87a 	bl	801232c <pbuf_free>
        goto memerr;
 801b238:	e08f      	b.n	801b35a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b23a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801b23c:	68fb      	ldr	r3, [r7, #12]
 801b23e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b240:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b242:	4413      	add	r3, r2
 801b244:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801b248:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801b24c:	9201      	str	r2, [sp, #4]
 801b24e:	9300      	str	r3, [sp, #0]
 801b250:	4603      	mov	r3, r0
 801b252:	2241      	movs	r2, #65	@ 0x41
 801b254:	2000      	movs	r0, #0
 801b256:	f7f6 feaf 	bl	8011fb8 <pbuf_alloced_custom>
 801b25a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801b25c:	697b      	ldr	r3, [r7, #20]
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d106      	bne.n	801b270 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801b262:	69b8      	ldr	r0, [r7, #24]
 801b264:	f7ff fef6 	bl	801b054 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801b268:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b26a:	f7f7 f85f 	bl	801232c <pbuf_free>
        goto memerr;
 801b26e:	e074      	b.n	801b35a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801b270:	68f8      	ldr	r0, [r7, #12]
 801b272:	f7f7 f901 	bl	8012478 <pbuf_ref>
      pcr->original = p;
 801b276:	69bb      	ldr	r3, [r7, #24]
 801b278:	68fa      	ldr	r2, [r7, #12]
 801b27a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801b27c:	69bb      	ldr	r3, [r7, #24]
 801b27e:	4a3f      	ldr	r2, [pc, #252]	@ (801b37c <ip4_frag+0x288>)
 801b280:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801b282:	6979      	ldr	r1, [r7, #20]
 801b284:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b286:	f7f7 f91f 	bl	80124c8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801b28a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801b28e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801b292:	1ad3      	subs	r3, r2, r3
 801b294:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801b298:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	d004      	beq.n	801b2aa <ip4_frag+0x1b6>
        poff = 0;
 801b2a0:	2300      	movs	r3, #0
 801b2a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801b2a4:	68fb      	ldr	r3, [r7, #12]
 801b2a6:	681b      	ldr	r3, [r3, #0]
 801b2a8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801b2aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d196      	bne.n	801b1e0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801b2b2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801b2b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801b2b8:	4413      	add	r3, r2
 801b2ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801b2bc:	68bb      	ldr	r3, [r7, #8]
 801b2be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801b2c0:	f1a3 0213 	sub.w	r2, r3, #19
 801b2c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801b2c8:	429a      	cmp	r2, r3
 801b2ca:	bfcc      	ite	gt
 801b2cc:	2301      	movgt	r3, #1
 801b2ce:	2300      	movle	r3, #0
 801b2d0:	b2db      	uxtb	r3, r3
 801b2d2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801b2d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801b2d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b2dc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801b2de:	6a3b      	ldr	r3, [r7, #32]
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d002      	beq.n	801b2ea <ip4_frag+0x1f6>
 801b2e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b2e6:	2b00      	cmp	r3, #0
 801b2e8:	d003      	beq.n	801b2f2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801b2ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b2ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801b2f0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801b2f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b2f4:	4618      	mov	r0, r3
 801b2f6:	f7f5 fc59 	bl	8010bac <lwip_htons>
 801b2fa:	4603      	mov	r3, r0
 801b2fc:	461a      	mov	r2, r3
 801b2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b300:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801b302:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801b304:	3314      	adds	r3, #20
 801b306:	b29b      	uxth	r3, r3
 801b308:	4618      	mov	r0, r3
 801b30a:	f7f5 fc4f 	bl	8010bac <lwip_htons>
 801b30e:	4603      	mov	r3, r0
 801b310:	461a      	mov	r2, r3
 801b312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b314:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801b316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b318:	2200      	movs	r2, #0
 801b31a:	729a      	strb	r2, [r3, #10]
 801b31c:	2200      	movs	r2, #0
 801b31e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801b320:	68bb      	ldr	r3, [r7, #8]
 801b322:	695b      	ldr	r3, [r3, #20]
 801b324:	687a      	ldr	r2, [r7, #4]
 801b326:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b328:	68b8      	ldr	r0, [r7, #8]
 801b32a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801b32c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b32e:	f7f6 fffd 	bl	801232c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801b332:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801b336:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801b338:	1ad3      	subs	r3, r2, r3
 801b33a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801b33e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801b342:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801b344:	4413      	add	r3, r2
 801b346:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801b34a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801b34e:	2b00      	cmp	r3, #0
 801b350:	f47f af19 	bne.w	801b186 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801b354:	2300      	movs	r3, #0
 801b356:	e002      	b.n	801b35e <ip4_frag+0x26a>
      goto memerr;
 801b358:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801b35a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b35e:	4618      	mov	r0, r3
 801b360:	3748      	adds	r7, #72	@ 0x48
 801b362:	46bd      	mov	sp, r7
 801b364:	bd80      	pop	{r7, pc}
 801b366:	bf00      	nop
 801b368:	080219d0 	.word	0x080219d0
 801b36c:	08021bac 	.word	0x08021bac
 801b370:	08021a18 	.word	0x08021a18
 801b374:	08021bc8 	.word	0x08021bc8
 801b378:	08021be8 	.word	0x08021be8
 801b37c:	0801b08d 	.word	0x0801b08d

0801b380 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801b380:	b580      	push	{r7, lr}
 801b382:	b086      	sub	sp, #24
 801b384:	af00      	add	r7, sp, #0
 801b386:	6078      	str	r0, [r7, #4]
 801b388:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801b38a:	230e      	movs	r3, #14
 801b38c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	895b      	ldrh	r3, [r3, #10]
 801b392:	2b0e      	cmp	r3, #14
 801b394:	d96e      	bls.n	801b474 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	7bdb      	ldrb	r3, [r3, #15]
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	d106      	bne.n	801b3ac <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801b39e:	683b      	ldr	r3, [r7, #0]
 801b3a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b3a4:	3301      	adds	r3, #1
 801b3a6:	b2da      	uxtb	r2, r3
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	685b      	ldr	r3, [r3, #4]
 801b3b0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801b3b2:	693b      	ldr	r3, [r7, #16]
 801b3b4:	7b1a      	ldrb	r2, [r3, #12]
 801b3b6:	7b5b      	ldrb	r3, [r3, #13]
 801b3b8:	021b      	lsls	r3, r3, #8
 801b3ba:	4313      	orrs	r3, r2
 801b3bc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801b3be:	693b      	ldr	r3, [r7, #16]
 801b3c0:	781b      	ldrb	r3, [r3, #0]
 801b3c2:	f003 0301 	and.w	r3, r3, #1
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	d023      	beq.n	801b412 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801b3ca:	693b      	ldr	r3, [r7, #16]
 801b3cc:	781b      	ldrb	r3, [r3, #0]
 801b3ce:	2b01      	cmp	r3, #1
 801b3d0:	d10f      	bne.n	801b3f2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b3d2:	693b      	ldr	r3, [r7, #16]
 801b3d4:	785b      	ldrb	r3, [r3, #1]
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d11b      	bne.n	801b412 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801b3da:	693b      	ldr	r3, [r7, #16]
 801b3dc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b3de:	2b5e      	cmp	r3, #94	@ 0x5e
 801b3e0:	d117      	bne.n	801b412 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	7b5b      	ldrb	r3, [r3, #13]
 801b3e6:	f043 0310 	orr.w	r3, r3, #16
 801b3ea:	b2da      	uxtb	r2, r3
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	735a      	strb	r2, [r3, #13]
 801b3f0:	e00f      	b.n	801b412 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801b3f2:	693b      	ldr	r3, [r7, #16]
 801b3f4:	2206      	movs	r2, #6
 801b3f6:	4928      	ldr	r1, [pc, #160]	@ (801b498 <ethernet_input+0x118>)
 801b3f8:	4618      	mov	r0, r3
 801b3fa:	f001 f8da 	bl	801c5b2 <memcmp>
 801b3fe:	4603      	mov	r3, r0
 801b400:	2b00      	cmp	r3, #0
 801b402:	d106      	bne.n	801b412 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	7b5b      	ldrb	r3, [r3, #13]
 801b408:	f043 0308 	orr.w	r3, r3, #8
 801b40c:	b2da      	uxtb	r2, r3
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801b412:	89fb      	ldrh	r3, [r7, #14]
 801b414:	2b08      	cmp	r3, #8
 801b416:	d003      	beq.n	801b420 <ethernet_input+0xa0>
 801b418:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801b41c:	d014      	beq.n	801b448 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801b41e:	e032      	b.n	801b486 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b420:	683b      	ldr	r3, [r7, #0]
 801b422:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b426:	f003 0308 	and.w	r3, r3, #8
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	d024      	beq.n	801b478 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b42e:	8afb      	ldrh	r3, [r7, #22]
 801b430:	4619      	mov	r1, r3
 801b432:	6878      	ldr	r0, [r7, #4]
 801b434:	f7f6 fef4 	bl	8012220 <pbuf_remove_header>
 801b438:	4603      	mov	r3, r0
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	d11e      	bne.n	801b47c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801b43e:	6839      	ldr	r1, [r7, #0]
 801b440:	6878      	ldr	r0, [r7, #4]
 801b442:	f7fe fe91 	bl	801a168 <ip4_input>
      break;
 801b446:	e013      	b.n	801b470 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b448:	683b      	ldr	r3, [r7, #0]
 801b44a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b44e:	f003 0308 	and.w	r3, r3, #8
 801b452:	2b00      	cmp	r3, #0
 801b454:	d014      	beq.n	801b480 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b456:	8afb      	ldrh	r3, [r7, #22]
 801b458:	4619      	mov	r1, r3
 801b45a:	6878      	ldr	r0, [r7, #4]
 801b45c:	f7f6 fee0 	bl	8012220 <pbuf_remove_header>
 801b460:	4603      	mov	r3, r0
 801b462:	2b00      	cmp	r3, #0
 801b464:	d10e      	bne.n	801b484 <ethernet_input+0x104>
        etharp_input(p, netif);
 801b466:	6839      	ldr	r1, [r7, #0]
 801b468:	6878      	ldr	r0, [r7, #4]
 801b46a:	f7fe f833 	bl	80194d4 <etharp_input>
      break;
 801b46e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801b470:	2300      	movs	r3, #0
 801b472:	e00c      	b.n	801b48e <ethernet_input+0x10e>
    goto free_and_return;
 801b474:	bf00      	nop
 801b476:	e006      	b.n	801b486 <ethernet_input+0x106>
        goto free_and_return;
 801b478:	bf00      	nop
 801b47a:	e004      	b.n	801b486 <ethernet_input+0x106>
        goto free_and_return;
 801b47c:	bf00      	nop
 801b47e:	e002      	b.n	801b486 <ethernet_input+0x106>
        goto free_and_return;
 801b480:	bf00      	nop
 801b482:	e000      	b.n	801b486 <ethernet_input+0x106>
        goto free_and_return;
 801b484:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801b486:	6878      	ldr	r0, [r7, #4]
 801b488:	f7f6 ff50 	bl	801232c <pbuf_free>
  return ERR_OK;
 801b48c:	2300      	movs	r3, #0
}
 801b48e:	4618      	mov	r0, r3
 801b490:	3718      	adds	r7, #24
 801b492:	46bd      	mov	sp, r7
 801b494:	bd80      	pop	{r7, pc}
 801b496:	bf00      	nop
 801b498:	08021e0c 	.word	0x08021e0c

0801b49c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801b49c:	b580      	push	{r7, lr}
 801b49e:	b086      	sub	sp, #24
 801b4a0:	af00      	add	r7, sp, #0
 801b4a2:	60f8      	str	r0, [r7, #12]
 801b4a4:	60b9      	str	r1, [r7, #8]
 801b4a6:	607a      	str	r2, [r7, #4]
 801b4a8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801b4aa:	8c3b      	ldrh	r3, [r7, #32]
 801b4ac:	4618      	mov	r0, r3
 801b4ae:	f7f5 fb7d 	bl	8010bac <lwip_htons>
 801b4b2:	4603      	mov	r3, r0
 801b4b4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801b4b6:	210e      	movs	r1, #14
 801b4b8:	68b8      	ldr	r0, [r7, #8]
 801b4ba:	f7f6 fea1 	bl	8012200 <pbuf_add_header>
 801b4be:	4603      	mov	r3, r0
 801b4c0:	2b00      	cmp	r3, #0
 801b4c2:	d125      	bne.n	801b510 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801b4c4:	68bb      	ldr	r3, [r7, #8]
 801b4c6:	685b      	ldr	r3, [r3, #4]
 801b4c8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801b4ca:	693b      	ldr	r3, [r7, #16]
 801b4cc:	8afa      	ldrh	r2, [r7, #22]
 801b4ce:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801b4d0:	693b      	ldr	r3, [r7, #16]
 801b4d2:	2206      	movs	r2, #6
 801b4d4:	6839      	ldr	r1, [r7, #0]
 801b4d6:	4618      	mov	r0, r3
 801b4d8:	f001 f993 	bl	801c802 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801b4dc:	693b      	ldr	r3, [r7, #16]
 801b4de:	3306      	adds	r3, #6
 801b4e0:	2206      	movs	r2, #6
 801b4e2:	6879      	ldr	r1, [r7, #4]
 801b4e4:	4618      	mov	r0, r3
 801b4e6:	f001 f98c 	bl	801c802 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801b4ea:	68fb      	ldr	r3, [r7, #12]
 801b4ec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801b4f0:	2b06      	cmp	r3, #6
 801b4f2:	d006      	beq.n	801b502 <ethernet_output+0x66>
 801b4f4:	4b0a      	ldr	r3, [pc, #40]	@ (801b520 <ethernet_output+0x84>)
 801b4f6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801b4fa:	490a      	ldr	r1, [pc, #40]	@ (801b524 <ethernet_output+0x88>)
 801b4fc:	480a      	ldr	r0, [pc, #40]	@ (801b528 <ethernet_output+0x8c>)
 801b4fe:	f000 ffcd 	bl	801c49c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801b502:	68fb      	ldr	r3, [r7, #12]
 801b504:	699b      	ldr	r3, [r3, #24]
 801b506:	68b9      	ldr	r1, [r7, #8]
 801b508:	68f8      	ldr	r0, [r7, #12]
 801b50a:	4798      	blx	r3
 801b50c:	4603      	mov	r3, r0
 801b50e:	e002      	b.n	801b516 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801b510:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801b512:	f06f 0301 	mvn.w	r3, #1
}
 801b516:	4618      	mov	r0, r3
 801b518:	3718      	adds	r7, #24
 801b51a:	46bd      	mov	sp, r7
 801b51c:	bd80      	pop	{r7, pc}
 801b51e:	bf00      	nop
 801b520:	08021bf8 	.word	0x08021bf8
 801b524:	08021c30 	.word	0x08021c30
 801b528:	08021c64 	.word	0x08021c64

0801b52c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801b52c:	b580      	push	{r7, lr}
 801b52e:	b086      	sub	sp, #24
 801b530:	af00      	add	r7, sp, #0
 801b532:	6078      	str	r0, [r7, #4]
 801b534:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801b536:	683b      	ldr	r3, [r7, #0]
 801b538:	60bb      	str	r3, [r7, #8]
 801b53a:	2304      	movs	r3, #4
 801b53c:	60fb      	str	r3, [r7, #12]
 801b53e:	2300      	movs	r3, #0
 801b540:	613b      	str	r3, [r7, #16]
 801b542:	2300      	movs	r3, #0
 801b544:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801b546:	f107 0308 	add.w	r3, r7, #8
 801b54a:	2100      	movs	r1, #0
 801b54c:	4618      	mov	r0, r3
 801b54e:	f7f2 fc15 	bl	800dd7c <osMessageCreate>
 801b552:	4602      	mov	r2, r0
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	681b      	ldr	r3, [r3, #0]
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d102      	bne.n	801b566 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801b560:	f04f 33ff 	mov.w	r3, #4294967295
 801b564:	e000      	b.n	801b568 <sys_mbox_new+0x3c>

  return ERR_OK;
 801b566:	2300      	movs	r3, #0
}
 801b568:	4618      	mov	r0, r3
 801b56a:	3718      	adds	r7, #24
 801b56c:	46bd      	mov	sp, r7
 801b56e:	bd80      	pop	{r7, pc}

0801b570 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801b570:	b580      	push	{r7, lr}
 801b572:	b084      	sub	sp, #16
 801b574:	af00      	add	r7, sp, #0
 801b576:	6078      	str	r0, [r7, #4]
 801b578:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	681b      	ldr	r3, [r3, #0]
 801b57e:	6839      	ldr	r1, [r7, #0]
 801b580:	2200      	movs	r2, #0
 801b582:	4618      	mov	r0, r3
 801b584:	f7f2 fc22 	bl	800ddcc <osMessagePut>
 801b588:	4603      	mov	r3, r0
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	d102      	bne.n	801b594 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801b58e:	2300      	movs	r3, #0
 801b590:	73fb      	strb	r3, [r7, #15]
 801b592:	e001      	b.n	801b598 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801b594:	23ff      	movs	r3, #255	@ 0xff
 801b596:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801b598:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b59c:	4618      	mov	r0, r3
 801b59e:	3710      	adds	r7, #16
 801b5a0:	46bd      	mov	sp, r7
 801b5a2:	bd80      	pop	{r7, pc}

0801b5a4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801b5a4:	b580      	push	{r7, lr}
 801b5a6:	b08c      	sub	sp, #48	@ 0x30
 801b5a8:	af00      	add	r7, sp, #0
 801b5aa:	61f8      	str	r0, [r7, #28]
 801b5ac:	61b9      	str	r1, [r7, #24]
 801b5ae:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801b5b0:	f7f2 fa22 	bl	800d9f8 <osKernelSysTick>
 801b5b4:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801b5b6:	697b      	ldr	r3, [r7, #20]
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d017      	beq.n	801b5ec <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801b5bc:	69fb      	ldr	r3, [r7, #28]
 801b5be:	6819      	ldr	r1, [r3, #0]
 801b5c0:	f107 0320 	add.w	r3, r7, #32
 801b5c4:	697a      	ldr	r2, [r7, #20]
 801b5c6:	4618      	mov	r0, r3
 801b5c8:	f7f2 fc40 	bl	800de4c <osMessageGet>

    if(event.status == osEventMessage)
 801b5cc:	6a3b      	ldr	r3, [r7, #32]
 801b5ce:	2b10      	cmp	r3, #16
 801b5d0:	d109      	bne.n	801b5e6 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801b5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b5d4:	461a      	mov	r2, r3
 801b5d6:	69bb      	ldr	r3, [r7, #24]
 801b5d8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801b5da:	f7f2 fa0d 	bl	800d9f8 <osKernelSysTick>
 801b5de:	4602      	mov	r2, r0
 801b5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5e2:	1ad3      	subs	r3, r2, r3
 801b5e4:	e019      	b.n	801b61a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b5e6:	f04f 33ff 	mov.w	r3, #4294967295
 801b5ea:	e016      	b.n	801b61a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801b5ec:	69fb      	ldr	r3, [r7, #28]
 801b5ee:	6819      	ldr	r1, [r3, #0]
 801b5f0:	463b      	mov	r3, r7
 801b5f2:	f04f 32ff 	mov.w	r2, #4294967295
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	f7f2 fc28 	bl	800de4c <osMessageGet>
 801b5fc:	f107 0320 	add.w	r3, r7, #32
 801b600:	463a      	mov	r2, r7
 801b602:	ca07      	ldmia	r2, {r0, r1, r2}
 801b604:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801b608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b60a:	461a      	mov	r2, r3
 801b60c:	69bb      	ldr	r3, [r7, #24]
 801b60e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801b610:	f7f2 f9f2 	bl	800d9f8 <osKernelSysTick>
 801b614:	4602      	mov	r2, r0
 801b616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b618:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801b61a:	4618      	mov	r0, r3
 801b61c:	3730      	adds	r7, #48	@ 0x30
 801b61e:	46bd      	mov	sp, r7
 801b620:	bd80      	pop	{r7, pc}

0801b622 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801b622:	b480      	push	{r7}
 801b624:	b083      	sub	sp, #12
 801b626:	af00      	add	r7, sp, #0
 801b628:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	681b      	ldr	r3, [r3, #0]
 801b62e:	2b00      	cmp	r3, #0
 801b630:	d101      	bne.n	801b636 <sys_mbox_valid+0x14>
    return 0;
 801b632:	2300      	movs	r3, #0
 801b634:	e000      	b.n	801b638 <sys_mbox_valid+0x16>
  else
    return 1;
 801b636:	2301      	movs	r3, #1
}
 801b638:	4618      	mov	r0, r3
 801b63a:	370c      	adds	r7, #12
 801b63c:	46bd      	mov	sp, r7
 801b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b642:	4770      	bx	lr

0801b644 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801b644:	b580      	push	{r7, lr}
 801b646:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801b648:	4803      	ldr	r0, [pc, #12]	@ (801b658 <sys_init+0x14>)
 801b64a:	f7f2 fa45 	bl	800dad8 <osMutexCreate>
 801b64e:	4603      	mov	r3, r0
 801b650:	4a02      	ldr	r2, [pc, #8]	@ (801b65c <sys_init+0x18>)
 801b652:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801b654:	bf00      	nop
 801b656:	bd80      	pop	{r7, pc}
 801b658:	08021e1c 	.word	0x08021e1c
 801b65c:	2000ca38 	.word	0x2000ca38

0801b660 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801b660:	b580      	push	{r7, lr}
 801b662:	b084      	sub	sp, #16
 801b664:	af00      	add	r7, sp, #0
 801b666:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801b668:	2300      	movs	r3, #0
 801b66a:	60bb      	str	r3, [r7, #8]
 801b66c:	2300      	movs	r3, #0
 801b66e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801b670:	f107 0308 	add.w	r3, r7, #8
 801b674:	4618      	mov	r0, r3
 801b676:	f7f2 fa2f 	bl	800dad8 <osMutexCreate>
 801b67a:	4602      	mov	r2, r0
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	681b      	ldr	r3, [r3, #0]
 801b684:	2b00      	cmp	r3, #0
 801b686:	d102      	bne.n	801b68e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b688:	f04f 33ff 	mov.w	r3, #4294967295
 801b68c:	e000      	b.n	801b690 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801b68e:	2300      	movs	r3, #0
}
 801b690:	4618      	mov	r0, r3
 801b692:	3710      	adds	r7, #16
 801b694:	46bd      	mov	sp, r7
 801b696:	bd80      	pop	{r7, pc}

0801b698 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801b698:	b580      	push	{r7, lr}
 801b69a:	b082      	sub	sp, #8
 801b69c:	af00      	add	r7, sp, #0
 801b69e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	f04f 31ff 	mov.w	r1, #4294967295
 801b6a8:	4618      	mov	r0, r3
 801b6aa:	f7f2 fa2d 	bl	800db08 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801b6ae:	bf00      	nop
 801b6b0:	3708      	adds	r7, #8
 801b6b2:	46bd      	mov	sp, r7
 801b6b4:	bd80      	pop	{r7, pc}

0801b6b6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801b6b6:	b580      	push	{r7, lr}
 801b6b8:	b082      	sub	sp, #8
 801b6ba:	af00      	add	r7, sp, #0
 801b6bc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	681b      	ldr	r3, [r3, #0]
 801b6c2:	4618      	mov	r0, r3
 801b6c4:	f7f2 fa6e 	bl	800dba4 <osMutexRelease>
}
 801b6c8:	bf00      	nop
 801b6ca:	3708      	adds	r7, #8
 801b6cc:	46bd      	mov	sp, r7
 801b6ce:	bd80      	pop	{r7, pc}

0801b6d0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801b6d0:	b580      	push	{r7, lr}
 801b6d2:	b08c      	sub	sp, #48	@ 0x30
 801b6d4:	af00      	add	r7, sp, #0
 801b6d6:	60f8      	str	r0, [r7, #12]
 801b6d8:	60b9      	str	r1, [r7, #8]
 801b6da:	607a      	str	r2, [r7, #4]
 801b6dc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801b6de:	f107 0314 	add.w	r3, r7, #20
 801b6e2:	2200      	movs	r2, #0
 801b6e4:	601a      	str	r2, [r3, #0]
 801b6e6:	605a      	str	r2, [r3, #4]
 801b6e8:	609a      	str	r2, [r3, #8]
 801b6ea:	60da      	str	r2, [r3, #12]
 801b6ec:	611a      	str	r2, [r3, #16]
 801b6ee:	615a      	str	r2, [r3, #20]
 801b6f0:	619a      	str	r2, [r3, #24]
 801b6f2:	68fb      	ldr	r3, [r7, #12]
 801b6f4:	617b      	str	r3, [r7, #20]
 801b6f6:	68bb      	ldr	r3, [r7, #8]
 801b6f8:	61bb      	str	r3, [r7, #24]
 801b6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b6fc:	b21b      	sxth	r3, r3
 801b6fe:	83bb      	strh	r3, [r7, #28]
 801b700:	683b      	ldr	r3, [r7, #0]
 801b702:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801b704:	f107 0314 	add.w	r3, r7, #20
 801b708:	6879      	ldr	r1, [r7, #4]
 801b70a:	4618      	mov	r0, r3
 801b70c:	f7f2 f984 	bl	800da18 <osThreadCreate>
 801b710:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801b712:	4618      	mov	r0, r3
 801b714:	3730      	adds	r7, #48	@ 0x30
 801b716:	46bd      	mov	sp, r7
 801b718:	bd80      	pop	{r7, pc}
	...

0801b71c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b71c:	b580      	push	{r7, lr}
 801b71e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801b720:	4b04      	ldr	r3, [pc, #16]	@ (801b734 <sys_arch_protect+0x18>)
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	f04f 31ff 	mov.w	r1, #4294967295
 801b728:	4618      	mov	r0, r3
 801b72a:	f7f2 f9ed 	bl	800db08 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801b72e:	2301      	movs	r3, #1
}
 801b730:	4618      	mov	r0, r3
 801b732:	bd80      	pop	{r7, pc}
 801b734:	2000ca38 	.word	0x2000ca38

0801b738 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b738:	b580      	push	{r7, lr}
 801b73a:	b082      	sub	sp, #8
 801b73c:	af00      	add	r7, sp, #0
 801b73e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b740:	4b04      	ldr	r3, [pc, #16]	@ (801b754 <sys_arch_unprotect+0x1c>)
 801b742:	681b      	ldr	r3, [r3, #0]
 801b744:	4618      	mov	r0, r3
 801b746:	f7f2 fa2d 	bl	800dba4 <osMutexRelease>
}
 801b74a:	bf00      	nop
 801b74c:	3708      	adds	r7, #8
 801b74e:	46bd      	mov	sp, r7
 801b750:	bd80      	pop	{r7, pc}
 801b752:	bf00      	nop
 801b754:	2000ca38 	.word	0x2000ca38

0801b758 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801b758:	b580      	push	{r7, lr}
 801b75a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801b75c:	2200      	movs	r2, #0
 801b75e:	4912      	ldr	r1, [pc, #72]	@ (801b7a8 <MX_USB_DEVICE_Init+0x50>)
 801b760:	4812      	ldr	r0, [pc, #72]	@ (801b7ac <MX_USB_DEVICE_Init+0x54>)
 801b762:	f7f0 fdf9 	bl	800c358 <USBD_Init>
 801b766:	4603      	mov	r3, r0
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d001      	beq.n	801b770 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801b76c:	f7e6 f9bc 	bl	8001ae8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801b770:	490f      	ldr	r1, [pc, #60]	@ (801b7b0 <MX_USB_DEVICE_Init+0x58>)
 801b772:	480e      	ldr	r0, [pc, #56]	@ (801b7ac <MX_USB_DEVICE_Init+0x54>)
 801b774:	f7f0 fe20 	bl	800c3b8 <USBD_RegisterClass>
 801b778:	4603      	mov	r3, r0
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	d001      	beq.n	801b782 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801b77e:	f7e6 f9b3 	bl	8001ae8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801b782:	490c      	ldr	r1, [pc, #48]	@ (801b7b4 <MX_USB_DEVICE_Init+0x5c>)
 801b784:	4809      	ldr	r0, [pc, #36]	@ (801b7ac <MX_USB_DEVICE_Init+0x54>)
 801b786:	f7f0 fd17 	bl	800c1b8 <USBD_CDC_RegisterInterface>
 801b78a:	4603      	mov	r3, r0
 801b78c:	2b00      	cmp	r3, #0
 801b78e:	d001      	beq.n	801b794 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801b790:	f7e6 f9aa 	bl	8001ae8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801b794:	4805      	ldr	r0, [pc, #20]	@ (801b7ac <MX_USB_DEVICE_Init+0x54>)
 801b796:	f7f0 fe45 	bl	800c424 <USBD_Start>
 801b79a:	4603      	mov	r3, r0
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d001      	beq.n	801b7a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801b7a0:	f7e6 f9a2 	bl	8001ae8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801b7a4:	bf00      	nop
 801b7a6:	bd80      	pop	{r7, pc}
 801b7a8:	200000bc 	.word	0x200000bc
 801b7ac:	2000ca3c 	.word	0x2000ca3c
 801b7b0:	20000018 	.word	0x20000018
 801b7b4:	200000a8 	.word	0x200000a8

0801b7b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801b7b8:	b580      	push	{r7, lr}
 801b7ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801b7bc:	2200      	movs	r2, #0
 801b7be:	4905      	ldr	r1, [pc, #20]	@ (801b7d4 <CDC_Init_FS+0x1c>)
 801b7c0:	4805      	ldr	r0, [pc, #20]	@ (801b7d8 <CDC_Init_FS+0x20>)
 801b7c2:	f7f0 fd13 	bl	800c1ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801b7c6:	4905      	ldr	r1, [pc, #20]	@ (801b7dc <CDC_Init_FS+0x24>)
 801b7c8:	4803      	ldr	r0, [pc, #12]	@ (801b7d8 <CDC_Init_FS+0x20>)
 801b7ca:	f7f0 fd31 	bl	800c230 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801b7ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801b7d0:	4618      	mov	r0, r3
 801b7d2:	bd80      	pop	{r7, pc}
 801b7d4:	2000d518 	.word	0x2000d518
 801b7d8:	2000ca3c 	.word	0x2000ca3c
 801b7dc:	2000cd18 	.word	0x2000cd18

0801b7e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801b7e0:	b480      	push	{r7}
 801b7e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801b7e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801b7e6:	4618      	mov	r0, r3
 801b7e8:	46bd      	mov	sp, r7
 801b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7ee:	4770      	bx	lr

0801b7f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801b7f0:	b480      	push	{r7}
 801b7f2:	b083      	sub	sp, #12
 801b7f4:	af00      	add	r7, sp, #0
 801b7f6:	4603      	mov	r3, r0
 801b7f8:	6039      	str	r1, [r7, #0]
 801b7fa:	71fb      	strb	r3, [r7, #7]
 801b7fc:	4613      	mov	r3, r2
 801b7fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801b800:	79fb      	ldrb	r3, [r7, #7]
 801b802:	2b23      	cmp	r3, #35	@ 0x23
 801b804:	d84a      	bhi.n	801b89c <CDC_Control_FS+0xac>
 801b806:	a201      	add	r2, pc, #4	@ (adr r2, 801b80c <CDC_Control_FS+0x1c>)
 801b808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b80c:	0801b89d 	.word	0x0801b89d
 801b810:	0801b89d 	.word	0x0801b89d
 801b814:	0801b89d 	.word	0x0801b89d
 801b818:	0801b89d 	.word	0x0801b89d
 801b81c:	0801b89d 	.word	0x0801b89d
 801b820:	0801b89d 	.word	0x0801b89d
 801b824:	0801b89d 	.word	0x0801b89d
 801b828:	0801b89d 	.word	0x0801b89d
 801b82c:	0801b89d 	.word	0x0801b89d
 801b830:	0801b89d 	.word	0x0801b89d
 801b834:	0801b89d 	.word	0x0801b89d
 801b838:	0801b89d 	.word	0x0801b89d
 801b83c:	0801b89d 	.word	0x0801b89d
 801b840:	0801b89d 	.word	0x0801b89d
 801b844:	0801b89d 	.word	0x0801b89d
 801b848:	0801b89d 	.word	0x0801b89d
 801b84c:	0801b89d 	.word	0x0801b89d
 801b850:	0801b89d 	.word	0x0801b89d
 801b854:	0801b89d 	.word	0x0801b89d
 801b858:	0801b89d 	.word	0x0801b89d
 801b85c:	0801b89d 	.word	0x0801b89d
 801b860:	0801b89d 	.word	0x0801b89d
 801b864:	0801b89d 	.word	0x0801b89d
 801b868:	0801b89d 	.word	0x0801b89d
 801b86c:	0801b89d 	.word	0x0801b89d
 801b870:	0801b89d 	.word	0x0801b89d
 801b874:	0801b89d 	.word	0x0801b89d
 801b878:	0801b89d 	.word	0x0801b89d
 801b87c:	0801b89d 	.word	0x0801b89d
 801b880:	0801b89d 	.word	0x0801b89d
 801b884:	0801b89d 	.word	0x0801b89d
 801b888:	0801b89d 	.word	0x0801b89d
 801b88c:	0801b89d 	.word	0x0801b89d
 801b890:	0801b89d 	.word	0x0801b89d
 801b894:	0801b89d 	.word	0x0801b89d
 801b898:	0801b89d 	.word	0x0801b89d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801b89c:	bf00      	nop
  }

  return (USBD_OK);
 801b89e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	370c      	adds	r7, #12
 801b8a4:	46bd      	mov	sp, r7
 801b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8aa:	4770      	bx	lr

0801b8ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801b8ac:	b580      	push	{r7, lr}
 801b8ae:	b082      	sub	sp, #8
 801b8b0:	af00      	add	r7, sp, #0
 801b8b2:	6078      	str	r0, [r7, #4]
 801b8b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801b8b6:	6879      	ldr	r1, [r7, #4]
 801b8b8:	4805      	ldr	r0, [pc, #20]	@ (801b8d0 <CDC_Receive_FS+0x24>)
 801b8ba:	f7f0 fcb9 	bl	800c230 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801b8be:	4804      	ldr	r0, [pc, #16]	@ (801b8d0 <CDC_Receive_FS+0x24>)
 801b8c0:	f7f0 fd14 	bl	800c2ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801b8c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801b8c6:	4618      	mov	r0, r3
 801b8c8:	3708      	adds	r7, #8
 801b8ca:	46bd      	mov	sp, r7
 801b8cc:	bd80      	pop	{r7, pc}
 801b8ce:	bf00      	nop
 801b8d0:	2000ca3c 	.word	0x2000ca3c

0801b8d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801b8d4:	b580      	push	{r7, lr}
 801b8d6:	b084      	sub	sp, #16
 801b8d8:	af00      	add	r7, sp, #0
 801b8da:	6078      	str	r0, [r7, #4]
 801b8dc:	460b      	mov	r3, r1
 801b8de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801b8e0:	2300      	movs	r3, #0
 801b8e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801b8e4:	4b0d      	ldr	r3, [pc, #52]	@ (801b91c <CDC_Transmit_FS+0x48>)
 801b8e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801b8ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801b8ec:	68bb      	ldr	r3, [r7, #8]
 801b8ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801b8f2:	2b00      	cmp	r3, #0
 801b8f4:	d001      	beq.n	801b8fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801b8f6:	2301      	movs	r3, #1
 801b8f8:	e00b      	b.n	801b912 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801b8fa:	887b      	ldrh	r3, [r7, #2]
 801b8fc:	461a      	mov	r2, r3
 801b8fe:	6879      	ldr	r1, [r7, #4]
 801b900:	4806      	ldr	r0, [pc, #24]	@ (801b91c <CDC_Transmit_FS+0x48>)
 801b902:	f7f0 fc73 	bl	800c1ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801b906:	4805      	ldr	r0, [pc, #20]	@ (801b91c <CDC_Transmit_FS+0x48>)
 801b908:	f7f0 fcb0 	bl	800c26c <USBD_CDC_TransmitPacket>
 801b90c:	4603      	mov	r3, r0
 801b90e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801b910:	7bfb      	ldrb	r3, [r7, #15]
}
 801b912:	4618      	mov	r0, r3
 801b914:	3710      	adds	r7, #16
 801b916:	46bd      	mov	sp, r7
 801b918:	bd80      	pop	{r7, pc}
 801b91a:	bf00      	nop
 801b91c:	2000ca3c 	.word	0x2000ca3c

0801b920 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801b920:	b480      	push	{r7}
 801b922:	b087      	sub	sp, #28
 801b924:	af00      	add	r7, sp, #0
 801b926:	60f8      	str	r0, [r7, #12]
 801b928:	60b9      	str	r1, [r7, #8]
 801b92a:	4613      	mov	r3, r2
 801b92c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801b92e:	2300      	movs	r3, #0
 801b930:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801b932:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b936:	4618      	mov	r0, r3
 801b938:	371c      	adds	r7, #28
 801b93a:	46bd      	mov	sp, r7
 801b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b940:	4770      	bx	lr
	...

0801b944 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b944:	b480      	push	{r7}
 801b946:	b083      	sub	sp, #12
 801b948:	af00      	add	r7, sp, #0
 801b94a:	4603      	mov	r3, r0
 801b94c:	6039      	str	r1, [r7, #0]
 801b94e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801b950:	683b      	ldr	r3, [r7, #0]
 801b952:	2212      	movs	r2, #18
 801b954:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801b956:	4b03      	ldr	r3, [pc, #12]	@ (801b964 <USBD_FS_DeviceDescriptor+0x20>)
}
 801b958:	4618      	mov	r0, r3
 801b95a:	370c      	adds	r7, #12
 801b95c:	46bd      	mov	sp, r7
 801b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b962:	4770      	bx	lr
 801b964:	200000d8 	.word	0x200000d8

0801b968 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b968:	b480      	push	{r7}
 801b96a:	b083      	sub	sp, #12
 801b96c:	af00      	add	r7, sp, #0
 801b96e:	4603      	mov	r3, r0
 801b970:	6039      	str	r1, [r7, #0]
 801b972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801b974:	683b      	ldr	r3, [r7, #0]
 801b976:	2204      	movs	r2, #4
 801b978:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801b97a:	4b03      	ldr	r3, [pc, #12]	@ (801b988 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801b97c:	4618      	mov	r0, r3
 801b97e:	370c      	adds	r7, #12
 801b980:	46bd      	mov	sp, r7
 801b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b986:	4770      	bx	lr
 801b988:	200000ec 	.word	0x200000ec

0801b98c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b98c:	b580      	push	{r7, lr}
 801b98e:	b082      	sub	sp, #8
 801b990:	af00      	add	r7, sp, #0
 801b992:	4603      	mov	r3, r0
 801b994:	6039      	str	r1, [r7, #0]
 801b996:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b998:	79fb      	ldrb	r3, [r7, #7]
 801b99a:	2b00      	cmp	r3, #0
 801b99c:	d105      	bne.n	801b9aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b99e:	683a      	ldr	r2, [r7, #0]
 801b9a0:	4907      	ldr	r1, [pc, #28]	@ (801b9c0 <USBD_FS_ProductStrDescriptor+0x34>)
 801b9a2:	4808      	ldr	r0, [pc, #32]	@ (801b9c4 <USBD_FS_ProductStrDescriptor+0x38>)
 801b9a4:	f7f1 ff04 	bl	800d7b0 <USBD_GetString>
 801b9a8:	e004      	b.n	801b9b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b9aa:	683a      	ldr	r2, [r7, #0]
 801b9ac:	4904      	ldr	r1, [pc, #16]	@ (801b9c0 <USBD_FS_ProductStrDescriptor+0x34>)
 801b9ae:	4805      	ldr	r0, [pc, #20]	@ (801b9c4 <USBD_FS_ProductStrDescriptor+0x38>)
 801b9b0:	f7f1 fefe 	bl	800d7b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801b9b4:	4b02      	ldr	r3, [pc, #8]	@ (801b9c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801b9b6:	4618      	mov	r0, r3
 801b9b8:	3708      	adds	r7, #8
 801b9ba:	46bd      	mov	sp, r7
 801b9bc:	bd80      	pop	{r7, pc}
 801b9be:	bf00      	nop
 801b9c0:	2000dd18 	.word	0x2000dd18
 801b9c4:	08021c8c 	.word	0x08021c8c

0801b9c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b9c8:	b580      	push	{r7, lr}
 801b9ca:	b082      	sub	sp, #8
 801b9cc:	af00      	add	r7, sp, #0
 801b9ce:	4603      	mov	r3, r0
 801b9d0:	6039      	str	r1, [r7, #0]
 801b9d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801b9d4:	683a      	ldr	r2, [r7, #0]
 801b9d6:	4904      	ldr	r1, [pc, #16]	@ (801b9e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801b9d8:	4804      	ldr	r0, [pc, #16]	@ (801b9ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801b9da:	f7f1 fee9 	bl	800d7b0 <USBD_GetString>
  return USBD_StrDesc;
 801b9de:	4b02      	ldr	r3, [pc, #8]	@ (801b9e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801b9e0:	4618      	mov	r0, r3
 801b9e2:	3708      	adds	r7, #8
 801b9e4:	46bd      	mov	sp, r7
 801b9e6:	bd80      	pop	{r7, pc}
 801b9e8:	2000dd18 	.word	0x2000dd18
 801b9ec:	08021ca4 	.word	0x08021ca4

0801b9f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b9f0:	b580      	push	{r7, lr}
 801b9f2:	b082      	sub	sp, #8
 801b9f4:	af00      	add	r7, sp, #0
 801b9f6:	4603      	mov	r3, r0
 801b9f8:	6039      	str	r1, [r7, #0]
 801b9fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801b9fc:	683b      	ldr	r3, [r7, #0]
 801b9fe:	221a      	movs	r2, #26
 801ba00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801ba02:	f000 f843 	bl	801ba8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801ba06:	4b02      	ldr	r3, [pc, #8]	@ (801ba10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801ba08:	4618      	mov	r0, r3
 801ba0a:	3708      	adds	r7, #8
 801ba0c:	46bd      	mov	sp, r7
 801ba0e:	bd80      	pop	{r7, pc}
 801ba10:	200000f0 	.word	0x200000f0

0801ba14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ba14:	b580      	push	{r7, lr}
 801ba16:	b082      	sub	sp, #8
 801ba18:	af00      	add	r7, sp, #0
 801ba1a:	4603      	mov	r3, r0
 801ba1c:	6039      	str	r1, [r7, #0]
 801ba1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801ba20:	79fb      	ldrb	r3, [r7, #7]
 801ba22:	2b00      	cmp	r3, #0
 801ba24:	d105      	bne.n	801ba32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ba26:	683a      	ldr	r2, [r7, #0]
 801ba28:	4907      	ldr	r1, [pc, #28]	@ (801ba48 <USBD_FS_ConfigStrDescriptor+0x34>)
 801ba2a:	4808      	ldr	r0, [pc, #32]	@ (801ba4c <USBD_FS_ConfigStrDescriptor+0x38>)
 801ba2c:	f7f1 fec0 	bl	800d7b0 <USBD_GetString>
 801ba30:	e004      	b.n	801ba3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ba32:	683a      	ldr	r2, [r7, #0]
 801ba34:	4904      	ldr	r1, [pc, #16]	@ (801ba48 <USBD_FS_ConfigStrDescriptor+0x34>)
 801ba36:	4805      	ldr	r0, [pc, #20]	@ (801ba4c <USBD_FS_ConfigStrDescriptor+0x38>)
 801ba38:	f7f1 feba 	bl	800d7b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ba3c:	4b02      	ldr	r3, [pc, #8]	@ (801ba48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801ba3e:	4618      	mov	r0, r3
 801ba40:	3708      	adds	r7, #8
 801ba42:	46bd      	mov	sp, r7
 801ba44:	bd80      	pop	{r7, pc}
 801ba46:	bf00      	nop
 801ba48:	2000dd18 	.word	0x2000dd18
 801ba4c:	08021cb8 	.word	0x08021cb8

0801ba50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ba50:	b580      	push	{r7, lr}
 801ba52:	b082      	sub	sp, #8
 801ba54:	af00      	add	r7, sp, #0
 801ba56:	4603      	mov	r3, r0
 801ba58:	6039      	str	r1, [r7, #0]
 801ba5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ba5c:	79fb      	ldrb	r3, [r7, #7]
 801ba5e:	2b00      	cmp	r3, #0
 801ba60:	d105      	bne.n	801ba6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ba62:	683a      	ldr	r2, [r7, #0]
 801ba64:	4907      	ldr	r1, [pc, #28]	@ (801ba84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801ba66:	4808      	ldr	r0, [pc, #32]	@ (801ba88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801ba68:	f7f1 fea2 	bl	800d7b0 <USBD_GetString>
 801ba6c:	e004      	b.n	801ba78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ba6e:	683a      	ldr	r2, [r7, #0]
 801ba70:	4904      	ldr	r1, [pc, #16]	@ (801ba84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801ba72:	4805      	ldr	r0, [pc, #20]	@ (801ba88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801ba74:	f7f1 fe9c 	bl	800d7b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ba78:	4b02      	ldr	r3, [pc, #8]	@ (801ba84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801ba7a:	4618      	mov	r0, r3
 801ba7c:	3708      	adds	r7, #8
 801ba7e:	46bd      	mov	sp, r7
 801ba80:	bd80      	pop	{r7, pc}
 801ba82:	bf00      	nop
 801ba84:	2000dd18 	.word	0x2000dd18
 801ba88:	08021cc4 	.word	0x08021cc4

0801ba8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801ba8c:	b580      	push	{r7, lr}
 801ba8e:	b084      	sub	sp, #16
 801ba90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801ba92:	4b0f      	ldr	r3, [pc, #60]	@ (801bad0 <Get_SerialNum+0x44>)
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801ba98:	4b0e      	ldr	r3, [pc, #56]	@ (801bad4 <Get_SerialNum+0x48>)
 801ba9a:	681b      	ldr	r3, [r3, #0]
 801ba9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801ba9e:	4b0e      	ldr	r3, [pc, #56]	@ (801bad8 <Get_SerialNum+0x4c>)
 801baa0:	681b      	ldr	r3, [r3, #0]
 801baa2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801baa4:	68fa      	ldr	r2, [r7, #12]
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	4413      	add	r3, r2
 801baaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801baac:	68fb      	ldr	r3, [r7, #12]
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d009      	beq.n	801bac6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801bab2:	2208      	movs	r2, #8
 801bab4:	4909      	ldr	r1, [pc, #36]	@ (801badc <Get_SerialNum+0x50>)
 801bab6:	68f8      	ldr	r0, [r7, #12]
 801bab8:	f000 f814 	bl	801bae4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801babc:	2204      	movs	r2, #4
 801babe:	4908      	ldr	r1, [pc, #32]	@ (801bae0 <Get_SerialNum+0x54>)
 801bac0:	68b8      	ldr	r0, [r7, #8]
 801bac2:	f000 f80f 	bl	801bae4 <IntToUnicode>
  }
}
 801bac6:	bf00      	nop
 801bac8:	3710      	adds	r7, #16
 801baca:	46bd      	mov	sp, r7
 801bacc:	bd80      	pop	{r7, pc}
 801bace:	bf00      	nop
 801bad0:	1fff7a10 	.word	0x1fff7a10
 801bad4:	1fff7a14 	.word	0x1fff7a14
 801bad8:	1fff7a18 	.word	0x1fff7a18
 801badc:	200000f2 	.word	0x200000f2
 801bae0:	20000102 	.word	0x20000102

0801bae4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801bae4:	b480      	push	{r7}
 801bae6:	b087      	sub	sp, #28
 801bae8:	af00      	add	r7, sp, #0
 801baea:	60f8      	str	r0, [r7, #12]
 801baec:	60b9      	str	r1, [r7, #8]
 801baee:	4613      	mov	r3, r2
 801baf0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801baf2:	2300      	movs	r3, #0
 801baf4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801baf6:	2300      	movs	r3, #0
 801baf8:	75fb      	strb	r3, [r7, #23]
 801bafa:	e027      	b.n	801bb4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801bafc:	68fb      	ldr	r3, [r7, #12]
 801bafe:	0f1b      	lsrs	r3, r3, #28
 801bb00:	2b09      	cmp	r3, #9
 801bb02:	d80b      	bhi.n	801bb1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801bb04:	68fb      	ldr	r3, [r7, #12]
 801bb06:	0f1b      	lsrs	r3, r3, #28
 801bb08:	b2da      	uxtb	r2, r3
 801bb0a:	7dfb      	ldrb	r3, [r7, #23]
 801bb0c:	005b      	lsls	r3, r3, #1
 801bb0e:	4619      	mov	r1, r3
 801bb10:	68bb      	ldr	r3, [r7, #8]
 801bb12:	440b      	add	r3, r1
 801bb14:	3230      	adds	r2, #48	@ 0x30
 801bb16:	b2d2      	uxtb	r2, r2
 801bb18:	701a      	strb	r2, [r3, #0]
 801bb1a:	e00a      	b.n	801bb32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801bb1c:	68fb      	ldr	r3, [r7, #12]
 801bb1e:	0f1b      	lsrs	r3, r3, #28
 801bb20:	b2da      	uxtb	r2, r3
 801bb22:	7dfb      	ldrb	r3, [r7, #23]
 801bb24:	005b      	lsls	r3, r3, #1
 801bb26:	4619      	mov	r1, r3
 801bb28:	68bb      	ldr	r3, [r7, #8]
 801bb2a:	440b      	add	r3, r1
 801bb2c:	3237      	adds	r2, #55	@ 0x37
 801bb2e:	b2d2      	uxtb	r2, r2
 801bb30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801bb32:	68fb      	ldr	r3, [r7, #12]
 801bb34:	011b      	lsls	r3, r3, #4
 801bb36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801bb38:	7dfb      	ldrb	r3, [r7, #23]
 801bb3a:	005b      	lsls	r3, r3, #1
 801bb3c:	3301      	adds	r3, #1
 801bb3e:	68ba      	ldr	r2, [r7, #8]
 801bb40:	4413      	add	r3, r2
 801bb42:	2200      	movs	r2, #0
 801bb44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801bb46:	7dfb      	ldrb	r3, [r7, #23]
 801bb48:	3301      	adds	r3, #1
 801bb4a:	75fb      	strb	r3, [r7, #23]
 801bb4c:	7dfa      	ldrb	r2, [r7, #23]
 801bb4e:	79fb      	ldrb	r3, [r7, #7]
 801bb50:	429a      	cmp	r2, r3
 801bb52:	d3d3      	bcc.n	801bafc <IntToUnicode+0x18>
  }
}
 801bb54:	bf00      	nop
 801bb56:	bf00      	nop
 801bb58:	371c      	adds	r7, #28
 801bb5a:	46bd      	mov	sp, r7
 801bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb60:	4770      	bx	lr
	...

0801bb64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801bb64:	b580      	push	{r7, lr}
 801bb66:	b08a      	sub	sp, #40	@ 0x28
 801bb68:	af00      	add	r7, sp, #0
 801bb6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801bb6c:	f107 0314 	add.w	r3, r7, #20
 801bb70:	2200      	movs	r2, #0
 801bb72:	601a      	str	r2, [r3, #0]
 801bb74:	605a      	str	r2, [r3, #4]
 801bb76:	609a      	str	r2, [r3, #8]
 801bb78:	60da      	str	r2, [r3, #12]
 801bb7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	681b      	ldr	r3, [r3, #0]
 801bb80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801bb84:	d13a      	bne.n	801bbfc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801bb86:	2300      	movs	r3, #0
 801bb88:	613b      	str	r3, [r7, #16]
 801bb8a:	4b1e      	ldr	r3, [pc, #120]	@ (801bc04 <HAL_PCD_MspInit+0xa0>)
 801bb8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bb8e:	4a1d      	ldr	r2, [pc, #116]	@ (801bc04 <HAL_PCD_MspInit+0xa0>)
 801bb90:	f043 0301 	orr.w	r3, r3, #1
 801bb94:	6313      	str	r3, [r2, #48]	@ 0x30
 801bb96:	4b1b      	ldr	r3, [pc, #108]	@ (801bc04 <HAL_PCD_MspInit+0xa0>)
 801bb98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bb9a:	f003 0301 	and.w	r3, r3, #1
 801bb9e:	613b      	str	r3, [r7, #16]
 801bba0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801bba2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801bba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bba8:	2302      	movs	r3, #2
 801bbaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bbac:	2300      	movs	r3, #0
 801bbae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bbb0:	2303      	movs	r3, #3
 801bbb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801bbb4:	230a      	movs	r3, #10
 801bbb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801bbb8:	f107 0314 	add.w	r3, r7, #20
 801bbbc:	4619      	mov	r1, r3
 801bbbe:	4812      	ldr	r0, [pc, #72]	@ (801bc08 <HAL_PCD_MspInit+0xa4>)
 801bbc0:	f7e9 ff7a 	bl	8005ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801bbc4:	4b0f      	ldr	r3, [pc, #60]	@ (801bc04 <HAL_PCD_MspInit+0xa0>)
 801bbc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bbc8:	4a0e      	ldr	r2, [pc, #56]	@ (801bc04 <HAL_PCD_MspInit+0xa0>)
 801bbca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801bbce:	6353      	str	r3, [r2, #52]	@ 0x34
 801bbd0:	2300      	movs	r3, #0
 801bbd2:	60fb      	str	r3, [r7, #12]
 801bbd4:	4b0b      	ldr	r3, [pc, #44]	@ (801bc04 <HAL_PCD_MspInit+0xa0>)
 801bbd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bbd8:	4a0a      	ldr	r2, [pc, #40]	@ (801bc04 <HAL_PCD_MspInit+0xa0>)
 801bbda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801bbde:	6453      	str	r3, [r2, #68]	@ 0x44
 801bbe0:	4b08      	ldr	r3, [pc, #32]	@ (801bc04 <HAL_PCD_MspInit+0xa0>)
 801bbe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bbe4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801bbe8:	60fb      	str	r3, [r7, #12]
 801bbea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801bbec:	2200      	movs	r2, #0
 801bbee:	2106      	movs	r1, #6
 801bbf0:	2043      	movs	r0, #67	@ 0x43
 801bbf2:	f7e8 fd03 	bl	80045fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801bbf6:	2043      	movs	r0, #67	@ 0x43
 801bbf8:	f7e8 fd1c 	bl	8004634 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801bbfc:	bf00      	nop
 801bbfe:	3728      	adds	r7, #40	@ 0x28
 801bc00:	46bd      	mov	sp, r7
 801bc02:	bd80      	pop	{r7, pc}
 801bc04:	40023800 	.word	0x40023800
 801bc08:	40020000 	.word	0x40020000

0801bc0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bc0c:	b580      	push	{r7, lr}
 801bc0e:	b082      	sub	sp, #8
 801bc10:	af00      	add	r7, sp, #0
 801bc12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801bc20:	4619      	mov	r1, r3
 801bc22:	4610      	mov	r0, r2
 801bc24:	f7f0 fc4b 	bl	800c4be <USBD_LL_SetupStage>
}
 801bc28:	bf00      	nop
 801bc2a:	3708      	adds	r7, #8
 801bc2c:	46bd      	mov	sp, r7
 801bc2e:	bd80      	pop	{r7, pc}

0801bc30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bc30:	b580      	push	{r7, lr}
 801bc32:	b082      	sub	sp, #8
 801bc34:	af00      	add	r7, sp, #0
 801bc36:	6078      	str	r0, [r7, #4]
 801bc38:	460b      	mov	r3, r1
 801bc3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801bc42:	78fa      	ldrb	r2, [r7, #3]
 801bc44:	6879      	ldr	r1, [r7, #4]
 801bc46:	4613      	mov	r3, r2
 801bc48:	00db      	lsls	r3, r3, #3
 801bc4a:	4413      	add	r3, r2
 801bc4c:	009b      	lsls	r3, r3, #2
 801bc4e:	440b      	add	r3, r1
 801bc50:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801bc54:	681a      	ldr	r2, [r3, #0]
 801bc56:	78fb      	ldrb	r3, [r7, #3]
 801bc58:	4619      	mov	r1, r3
 801bc5a:	f7f0 fc85 	bl	800c568 <USBD_LL_DataOutStage>
}
 801bc5e:	bf00      	nop
 801bc60:	3708      	adds	r7, #8
 801bc62:	46bd      	mov	sp, r7
 801bc64:	bd80      	pop	{r7, pc}

0801bc66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bc66:	b580      	push	{r7, lr}
 801bc68:	b082      	sub	sp, #8
 801bc6a:	af00      	add	r7, sp, #0
 801bc6c:	6078      	str	r0, [r7, #4]
 801bc6e:	460b      	mov	r3, r1
 801bc70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801bc78:	78fa      	ldrb	r2, [r7, #3]
 801bc7a:	6879      	ldr	r1, [r7, #4]
 801bc7c:	4613      	mov	r3, r2
 801bc7e:	00db      	lsls	r3, r3, #3
 801bc80:	4413      	add	r3, r2
 801bc82:	009b      	lsls	r3, r3, #2
 801bc84:	440b      	add	r3, r1
 801bc86:	3320      	adds	r3, #32
 801bc88:	681a      	ldr	r2, [r3, #0]
 801bc8a:	78fb      	ldrb	r3, [r7, #3]
 801bc8c:	4619      	mov	r1, r3
 801bc8e:	f7f0 fd27 	bl	800c6e0 <USBD_LL_DataInStage>
}
 801bc92:	bf00      	nop
 801bc94:	3708      	adds	r7, #8
 801bc96:	46bd      	mov	sp, r7
 801bc98:	bd80      	pop	{r7, pc}

0801bc9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bc9a:	b580      	push	{r7, lr}
 801bc9c:	b082      	sub	sp, #8
 801bc9e:	af00      	add	r7, sp, #0
 801bca0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801bca8:	4618      	mov	r0, r3
 801bcaa:	f7f0 fe6b 	bl	800c984 <USBD_LL_SOF>
}
 801bcae:	bf00      	nop
 801bcb0:	3708      	adds	r7, #8
 801bcb2:	46bd      	mov	sp, r7
 801bcb4:	bd80      	pop	{r7, pc}

0801bcb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bcb6:	b580      	push	{r7, lr}
 801bcb8:	b084      	sub	sp, #16
 801bcba:	af00      	add	r7, sp, #0
 801bcbc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801bcbe:	2301      	movs	r3, #1
 801bcc0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	79db      	ldrb	r3, [r3, #7]
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	d102      	bne.n	801bcd0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801bcca:	2300      	movs	r3, #0
 801bccc:	73fb      	strb	r3, [r7, #15]
 801bcce:	e008      	b.n	801bce2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	79db      	ldrb	r3, [r3, #7]
 801bcd4:	2b02      	cmp	r3, #2
 801bcd6:	d102      	bne.n	801bcde <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801bcd8:	2301      	movs	r3, #1
 801bcda:	73fb      	strb	r3, [r7, #15]
 801bcdc:	e001      	b.n	801bce2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801bcde:	f7e5 ff03 	bl	8001ae8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801bce8:	7bfa      	ldrb	r2, [r7, #15]
 801bcea:	4611      	mov	r1, r2
 801bcec:	4618      	mov	r0, r3
 801bcee:	f7f0 fe05 	bl	800c8fc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	f7f0 fdac 	bl	800c856 <USBD_LL_Reset>
}
 801bcfe:	bf00      	nop
 801bd00:	3710      	adds	r7, #16
 801bd02:	46bd      	mov	sp, r7
 801bd04:	bd80      	pop	{r7, pc}
	...

0801bd08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bd08:	b580      	push	{r7, lr}
 801bd0a:	b082      	sub	sp, #8
 801bd0c:	af00      	add	r7, sp, #0
 801bd0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801bd16:	4618      	mov	r0, r3
 801bd18:	f7f0 fe00 	bl	800c91c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	681b      	ldr	r3, [r3, #0]
 801bd20:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801bd24:	681b      	ldr	r3, [r3, #0]
 801bd26:	687a      	ldr	r2, [r7, #4]
 801bd28:	6812      	ldr	r2, [r2, #0]
 801bd2a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801bd2e:	f043 0301 	orr.w	r3, r3, #1
 801bd32:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801bd34:	687b      	ldr	r3, [r7, #4]
 801bd36:	7adb      	ldrb	r3, [r3, #11]
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	d005      	beq.n	801bd48 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801bd3c:	4b04      	ldr	r3, [pc, #16]	@ (801bd50 <HAL_PCD_SuspendCallback+0x48>)
 801bd3e:	691b      	ldr	r3, [r3, #16]
 801bd40:	4a03      	ldr	r2, [pc, #12]	@ (801bd50 <HAL_PCD_SuspendCallback+0x48>)
 801bd42:	f043 0306 	orr.w	r3, r3, #6
 801bd46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801bd48:	bf00      	nop
 801bd4a:	3708      	adds	r7, #8
 801bd4c:	46bd      	mov	sp, r7
 801bd4e:	bd80      	pop	{r7, pc}
 801bd50:	e000ed00 	.word	0xe000ed00

0801bd54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bd54:	b580      	push	{r7, lr}
 801bd56:	b082      	sub	sp, #8
 801bd58:	af00      	add	r7, sp, #0
 801bd5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801bd62:	4618      	mov	r0, r3
 801bd64:	f7f0 fdf6 	bl	800c954 <USBD_LL_Resume>
}
 801bd68:	bf00      	nop
 801bd6a:	3708      	adds	r7, #8
 801bd6c:	46bd      	mov	sp, r7
 801bd6e:	bd80      	pop	{r7, pc}

0801bd70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bd70:	b580      	push	{r7, lr}
 801bd72:	b082      	sub	sp, #8
 801bd74:	af00      	add	r7, sp, #0
 801bd76:	6078      	str	r0, [r7, #4]
 801bd78:	460b      	mov	r3, r1
 801bd7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801bd82:	78fa      	ldrb	r2, [r7, #3]
 801bd84:	4611      	mov	r1, r2
 801bd86:	4618      	mov	r0, r3
 801bd88:	f7f0 fe4e 	bl	800ca28 <USBD_LL_IsoOUTIncomplete>
}
 801bd8c:	bf00      	nop
 801bd8e:	3708      	adds	r7, #8
 801bd90:	46bd      	mov	sp, r7
 801bd92:	bd80      	pop	{r7, pc}

0801bd94 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bd94:	b580      	push	{r7, lr}
 801bd96:	b082      	sub	sp, #8
 801bd98:	af00      	add	r7, sp, #0
 801bd9a:	6078      	str	r0, [r7, #4]
 801bd9c:	460b      	mov	r3, r1
 801bd9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801bda0:	687b      	ldr	r3, [r7, #4]
 801bda2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801bda6:	78fa      	ldrb	r2, [r7, #3]
 801bda8:	4611      	mov	r1, r2
 801bdaa:	4618      	mov	r0, r3
 801bdac:	f7f0 fe0a 	bl	800c9c4 <USBD_LL_IsoINIncomplete>
}
 801bdb0:	bf00      	nop
 801bdb2:	3708      	adds	r7, #8
 801bdb4:	46bd      	mov	sp, r7
 801bdb6:	bd80      	pop	{r7, pc}

0801bdb8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bdb8:	b580      	push	{r7, lr}
 801bdba:	b082      	sub	sp, #8
 801bdbc:	af00      	add	r7, sp, #0
 801bdbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801bdc6:	4618      	mov	r0, r3
 801bdc8:	f7f0 fe60 	bl	800ca8c <USBD_LL_DevConnected>
}
 801bdcc:	bf00      	nop
 801bdce:	3708      	adds	r7, #8
 801bdd0:	46bd      	mov	sp, r7
 801bdd2:	bd80      	pop	{r7, pc}

0801bdd4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bdd4:	b580      	push	{r7, lr}
 801bdd6:	b082      	sub	sp, #8
 801bdd8:	af00      	add	r7, sp, #0
 801bdda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801bde2:	4618      	mov	r0, r3
 801bde4:	f7f0 fe5d 	bl	800caa2 <USBD_LL_DevDisconnected>
}
 801bde8:	bf00      	nop
 801bdea:	3708      	adds	r7, #8
 801bdec:	46bd      	mov	sp, r7
 801bdee:	bd80      	pop	{r7, pc}

0801bdf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801bdf0:	b580      	push	{r7, lr}
 801bdf2:	b082      	sub	sp, #8
 801bdf4:	af00      	add	r7, sp, #0
 801bdf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	781b      	ldrb	r3, [r3, #0]
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d13c      	bne.n	801be7a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801be00:	4a20      	ldr	r2, [pc, #128]	@ (801be84 <USBD_LL_Init+0x94>)
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	4a1e      	ldr	r2, [pc, #120]	@ (801be84 <USBD_LL_Init+0x94>)
 801be0c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801be10:	4b1c      	ldr	r3, [pc, #112]	@ (801be84 <USBD_LL_Init+0x94>)
 801be12:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801be16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801be18:	4b1a      	ldr	r3, [pc, #104]	@ (801be84 <USBD_LL_Init+0x94>)
 801be1a:	2204      	movs	r2, #4
 801be1c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801be1e:	4b19      	ldr	r3, [pc, #100]	@ (801be84 <USBD_LL_Init+0x94>)
 801be20:	2202      	movs	r2, #2
 801be22:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801be24:	4b17      	ldr	r3, [pc, #92]	@ (801be84 <USBD_LL_Init+0x94>)
 801be26:	2200      	movs	r2, #0
 801be28:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801be2a:	4b16      	ldr	r3, [pc, #88]	@ (801be84 <USBD_LL_Init+0x94>)
 801be2c:	2202      	movs	r2, #2
 801be2e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801be30:	4b14      	ldr	r3, [pc, #80]	@ (801be84 <USBD_LL_Init+0x94>)
 801be32:	2200      	movs	r2, #0
 801be34:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801be36:	4b13      	ldr	r3, [pc, #76]	@ (801be84 <USBD_LL_Init+0x94>)
 801be38:	2200      	movs	r2, #0
 801be3a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801be3c:	4b11      	ldr	r3, [pc, #68]	@ (801be84 <USBD_LL_Init+0x94>)
 801be3e:	2200      	movs	r2, #0
 801be40:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801be42:	4b10      	ldr	r3, [pc, #64]	@ (801be84 <USBD_LL_Init+0x94>)
 801be44:	2200      	movs	r2, #0
 801be46:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801be48:	4b0e      	ldr	r3, [pc, #56]	@ (801be84 <USBD_LL_Init+0x94>)
 801be4a:	2200      	movs	r2, #0
 801be4c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801be4e:	480d      	ldr	r0, [pc, #52]	@ (801be84 <USBD_LL_Init+0x94>)
 801be50:	f7e9 ffe7 	bl	8005e22 <HAL_PCD_Init>
 801be54:	4603      	mov	r3, r0
 801be56:	2b00      	cmp	r3, #0
 801be58:	d001      	beq.n	801be5e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801be5a:	f7e5 fe45 	bl	8001ae8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801be5e:	2180      	movs	r1, #128	@ 0x80
 801be60:	4808      	ldr	r0, [pc, #32]	@ (801be84 <USBD_LL_Init+0x94>)
 801be62:	f7eb fa14 	bl	800728e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801be66:	2240      	movs	r2, #64	@ 0x40
 801be68:	2100      	movs	r1, #0
 801be6a:	4806      	ldr	r0, [pc, #24]	@ (801be84 <USBD_LL_Init+0x94>)
 801be6c:	f7eb f9c8 	bl	8007200 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801be70:	2280      	movs	r2, #128	@ 0x80
 801be72:	2101      	movs	r1, #1
 801be74:	4803      	ldr	r0, [pc, #12]	@ (801be84 <USBD_LL_Init+0x94>)
 801be76:	f7eb f9c3 	bl	8007200 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801be7a:	2300      	movs	r3, #0
}
 801be7c:	4618      	mov	r0, r3
 801be7e:	3708      	adds	r7, #8
 801be80:	46bd      	mov	sp, r7
 801be82:	bd80      	pop	{r7, pc}
 801be84:	2000df18 	.word	0x2000df18

0801be88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801be88:	b580      	push	{r7, lr}
 801be8a:	b084      	sub	sp, #16
 801be8c:	af00      	add	r7, sp, #0
 801be8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801be90:	2300      	movs	r3, #0
 801be92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801be94:	2300      	movs	r3, #0
 801be96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801be9e:	4618      	mov	r0, r3
 801bea0:	f7ea f8ce 	bl	8006040 <HAL_PCD_Start>
 801bea4:	4603      	mov	r3, r0
 801bea6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bea8:	7bfb      	ldrb	r3, [r7, #15]
 801beaa:	4618      	mov	r0, r3
 801beac:	f000 f942 	bl	801c134 <USBD_Get_USB_Status>
 801beb0:	4603      	mov	r3, r0
 801beb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801beb4:	7bbb      	ldrb	r3, [r7, #14]
}
 801beb6:	4618      	mov	r0, r3
 801beb8:	3710      	adds	r7, #16
 801beba:	46bd      	mov	sp, r7
 801bebc:	bd80      	pop	{r7, pc}

0801bebe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801bebe:	b580      	push	{r7, lr}
 801bec0:	b084      	sub	sp, #16
 801bec2:	af00      	add	r7, sp, #0
 801bec4:	6078      	str	r0, [r7, #4]
 801bec6:	4608      	mov	r0, r1
 801bec8:	4611      	mov	r1, r2
 801beca:	461a      	mov	r2, r3
 801becc:	4603      	mov	r3, r0
 801bece:	70fb      	strb	r3, [r7, #3]
 801bed0:	460b      	mov	r3, r1
 801bed2:	70bb      	strb	r3, [r7, #2]
 801bed4:	4613      	mov	r3, r2
 801bed6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bed8:	2300      	movs	r3, #0
 801beda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bedc:	2300      	movs	r3, #0
 801bede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801bee6:	78bb      	ldrb	r3, [r7, #2]
 801bee8:	883a      	ldrh	r2, [r7, #0]
 801beea:	78f9      	ldrb	r1, [r7, #3]
 801beec:	f7ea fda2 	bl	8006a34 <HAL_PCD_EP_Open>
 801bef0:	4603      	mov	r3, r0
 801bef2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bef4:	7bfb      	ldrb	r3, [r7, #15]
 801bef6:	4618      	mov	r0, r3
 801bef8:	f000 f91c 	bl	801c134 <USBD_Get_USB_Status>
 801befc:	4603      	mov	r3, r0
 801befe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bf00:	7bbb      	ldrb	r3, [r7, #14]
}
 801bf02:	4618      	mov	r0, r3
 801bf04:	3710      	adds	r7, #16
 801bf06:	46bd      	mov	sp, r7
 801bf08:	bd80      	pop	{r7, pc}

0801bf0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bf0a:	b580      	push	{r7, lr}
 801bf0c:	b084      	sub	sp, #16
 801bf0e:	af00      	add	r7, sp, #0
 801bf10:	6078      	str	r0, [r7, #4]
 801bf12:	460b      	mov	r3, r1
 801bf14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bf16:	2300      	movs	r3, #0
 801bf18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bf1a:	2300      	movs	r3, #0
 801bf1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bf24:	78fa      	ldrb	r2, [r7, #3]
 801bf26:	4611      	mov	r1, r2
 801bf28:	4618      	mov	r0, r3
 801bf2a:	f7ea fded 	bl	8006b08 <HAL_PCD_EP_Close>
 801bf2e:	4603      	mov	r3, r0
 801bf30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bf32:	7bfb      	ldrb	r3, [r7, #15]
 801bf34:	4618      	mov	r0, r3
 801bf36:	f000 f8fd 	bl	801c134 <USBD_Get_USB_Status>
 801bf3a:	4603      	mov	r3, r0
 801bf3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bf3e:	7bbb      	ldrb	r3, [r7, #14]
}
 801bf40:	4618      	mov	r0, r3
 801bf42:	3710      	adds	r7, #16
 801bf44:	46bd      	mov	sp, r7
 801bf46:	bd80      	pop	{r7, pc}

0801bf48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bf48:	b580      	push	{r7, lr}
 801bf4a:	b084      	sub	sp, #16
 801bf4c:	af00      	add	r7, sp, #0
 801bf4e:	6078      	str	r0, [r7, #4]
 801bf50:	460b      	mov	r3, r1
 801bf52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bf54:	2300      	movs	r3, #0
 801bf56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bf58:	2300      	movs	r3, #0
 801bf5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bf62:	78fa      	ldrb	r2, [r7, #3]
 801bf64:	4611      	mov	r1, r2
 801bf66:	4618      	mov	r0, r3
 801bf68:	f7ea fea5 	bl	8006cb6 <HAL_PCD_EP_SetStall>
 801bf6c:	4603      	mov	r3, r0
 801bf6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bf70:	7bfb      	ldrb	r3, [r7, #15]
 801bf72:	4618      	mov	r0, r3
 801bf74:	f000 f8de 	bl	801c134 <USBD_Get_USB_Status>
 801bf78:	4603      	mov	r3, r0
 801bf7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bf7c:	7bbb      	ldrb	r3, [r7, #14]
}
 801bf7e:	4618      	mov	r0, r3
 801bf80:	3710      	adds	r7, #16
 801bf82:	46bd      	mov	sp, r7
 801bf84:	bd80      	pop	{r7, pc}

0801bf86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bf86:	b580      	push	{r7, lr}
 801bf88:	b084      	sub	sp, #16
 801bf8a:	af00      	add	r7, sp, #0
 801bf8c:	6078      	str	r0, [r7, #4]
 801bf8e:	460b      	mov	r3, r1
 801bf90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bf92:	2300      	movs	r3, #0
 801bf94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bf96:	2300      	movs	r3, #0
 801bf98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bfa0:	78fa      	ldrb	r2, [r7, #3]
 801bfa2:	4611      	mov	r1, r2
 801bfa4:	4618      	mov	r0, r3
 801bfa6:	f7ea fee9 	bl	8006d7c <HAL_PCD_EP_ClrStall>
 801bfaa:	4603      	mov	r3, r0
 801bfac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bfae:	7bfb      	ldrb	r3, [r7, #15]
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	f000 f8bf 	bl	801c134 <USBD_Get_USB_Status>
 801bfb6:	4603      	mov	r3, r0
 801bfb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bfba:	7bbb      	ldrb	r3, [r7, #14]
}
 801bfbc:	4618      	mov	r0, r3
 801bfbe:	3710      	adds	r7, #16
 801bfc0:	46bd      	mov	sp, r7
 801bfc2:	bd80      	pop	{r7, pc}

0801bfc4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bfc4:	b480      	push	{r7}
 801bfc6:	b085      	sub	sp, #20
 801bfc8:	af00      	add	r7, sp, #0
 801bfca:	6078      	str	r0, [r7, #4]
 801bfcc:	460b      	mov	r3, r1
 801bfce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801bfd6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801bfd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	da0b      	bge.n	801bff8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801bfe0:	78fb      	ldrb	r3, [r7, #3]
 801bfe2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801bfe6:	68f9      	ldr	r1, [r7, #12]
 801bfe8:	4613      	mov	r3, r2
 801bfea:	00db      	lsls	r3, r3, #3
 801bfec:	4413      	add	r3, r2
 801bfee:	009b      	lsls	r3, r3, #2
 801bff0:	440b      	add	r3, r1
 801bff2:	3316      	adds	r3, #22
 801bff4:	781b      	ldrb	r3, [r3, #0]
 801bff6:	e00b      	b.n	801c010 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801bff8:	78fb      	ldrb	r3, [r7, #3]
 801bffa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801bffe:	68f9      	ldr	r1, [r7, #12]
 801c000:	4613      	mov	r3, r2
 801c002:	00db      	lsls	r3, r3, #3
 801c004:	4413      	add	r3, r2
 801c006:	009b      	lsls	r3, r3, #2
 801c008:	440b      	add	r3, r1
 801c00a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801c00e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801c010:	4618      	mov	r0, r3
 801c012:	3714      	adds	r7, #20
 801c014:	46bd      	mov	sp, r7
 801c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c01a:	4770      	bx	lr

0801c01c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801c01c:	b580      	push	{r7, lr}
 801c01e:	b084      	sub	sp, #16
 801c020:	af00      	add	r7, sp, #0
 801c022:	6078      	str	r0, [r7, #4]
 801c024:	460b      	mov	r3, r1
 801c026:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c028:	2300      	movs	r3, #0
 801c02a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c02c:	2300      	movs	r3, #0
 801c02e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801c036:	78fa      	ldrb	r2, [r7, #3]
 801c038:	4611      	mov	r1, r2
 801c03a:	4618      	mov	r0, r3
 801c03c:	f7ea fcd6 	bl	80069ec <HAL_PCD_SetAddress>
 801c040:	4603      	mov	r3, r0
 801c042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c044:	7bfb      	ldrb	r3, [r7, #15]
 801c046:	4618      	mov	r0, r3
 801c048:	f000 f874 	bl	801c134 <USBD_Get_USB_Status>
 801c04c:	4603      	mov	r3, r0
 801c04e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c050:	7bbb      	ldrb	r3, [r7, #14]
}
 801c052:	4618      	mov	r0, r3
 801c054:	3710      	adds	r7, #16
 801c056:	46bd      	mov	sp, r7
 801c058:	bd80      	pop	{r7, pc}

0801c05a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801c05a:	b580      	push	{r7, lr}
 801c05c:	b086      	sub	sp, #24
 801c05e:	af00      	add	r7, sp, #0
 801c060:	60f8      	str	r0, [r7, #12]
 801c062:	607a      	str	r2, [r7, #4]
 801c064:	603b      	str	r3, [r7, #0]
 801c066:	460b      	mov	r3, r1
 801c068:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c06a:	2300      	movs	r3, #0
 801c06c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c06e:	2300      	movs	r3, #0
 801c070:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801c072:	68fb      	ldr	r3, [r7, #12]
 801c074:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801c078:	7af9      	ldrb	r1, [r7, #11]
 801c07a:	683b      	ldr	r3, [r7, #0]
 801c07c:	687a      	ldr	r2, [r7, #4]
 801c07e:	f7ea fde0 	bl	8006c42 <HAL_PCD_EP_Transmit>
 801c082:	4603      	mov	r3, r0
 801c084:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c086:	7dfb      	ldrb	r3, [r7, #23]
 801c088:	4618      	mov	r0, r3
 801c08a:	f000 f853 	bl	801c134 <USBD_Get_USB_Status>
 801c08e:	4603      	mov	r3, r0
 801c090:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801c092:	7dbb      	ldrb	r3, [r7, #22]
}
 801c094:	4618      	mov	r0, r3
 801c096:	3718      	adds	r7, #24
 801c098:	46bd      	mov	sp, r7
 801c09a:	bd80      	pop	{r7, pc}

0801c09c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801c09c:	b580      	push	{r7, lr}
 801c09e:	b086      	sub	sp, #24
 801c0a0:	af00      	add	r7, sp, #0
 801c0a2:	60f8      	str	r0, [r7, #12]
 801c0a4:	607a      	str	r2, [r7, #4]
 801c0a6:	603b      	str	r3, [r7, #0]
 801c0a8:	460b      	mov	r3, r1
 801c0aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c0ac:	2300      	movs	r3, #0
 801c0ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c0b0:	2300      	movs	r3, #0
 801c0b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801c0b4:	68fb      	ldr	r3, [r7, #12]
 801c0b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801c0ba:	7af9      	ldrb	r1, [r7, #11]
 801c0bc:	683b      	ldr	r3, [r7, #0]
 801c0be:	687a      	ldr	r2, [r7, #4]
 801c0c0:	f7ea fd6c 	bl	8006b9c <HAL_PCD_EP_Receive>
 801c0c4:	4603      	mov	r3, r0
 801c0c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c0c8:	7dfb      	ldrb	r3, [r7, #23]
 801c0ca:	4618      	mov	r0, r3
 801c0cc:	f000 f832 	bl	801c134 <USBD_Get_USB_Status>
 801c0d0:	4603      	mov	r3, r0
 801c0d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801c0d4:	7dbb      	ldrb	r3, [r7, #22]
}
 801c0d6:	4618      	mov	r0, r3
 801c0d8:	3718      	adds	r7, #24
 801c0da:	46bd      	mov	sp, r7
 801c0dc:	bd80      	pop	{r7, pc}

0801c0de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c0de:	b580      	push	{r7, lr}
 801c0e0:	b082      	sub	sp, #8
 801c0e2:	af00      	add	r7, sp, #0
 801c0e4:	6078      	str	r0, [r7, #4]
 801c0e6:	460b      	mov	r3, r1
 801c0e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801c0f0:	78fa      	ldrb	r2, [r7, #3]
 801c0f2:	4611      	mov	r1, r2
 801c0f4:	4618      	mov	r0, r3
 801c0f6:	f7ea fd8c 	bl	8006c12 <HAL_PCD_EP_GetRxCount>
 801c0fa:	4603      	mov	r3, r0
}
 801c0fc:	4618      	mov	r0, r3
 801c0fe:	3708      	adds	r7, #8
 801c100:	46bd      	mov	sp, r7
 801c102:	bd80      	pop	{r7, pc}

0801c104 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801c104:	b480      	push	{r7}
 801c106:	b083      	sub	sp, #12
 801c108:	af00      	add	r7, sp, #0
 801c10a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801c10c:	4b03      	ldr	r3, [pc, #12]	@ (801c11c <USBD_static_malloc+0x18>)
}
 801c10e:	4618      	mov	r0, r3
 801c110:	370c      	adds	r7, #12
 801c112:	46bd      	mov	sp, r7
 801c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c118:	4770      	bx	lr
 801c11a:	bf00      	nop
 801c11c:	2000e3fc 	.word	0x2000e3fc

0801c120 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801c120:	b480      	push	{r7}
 801c122:	b083      	sub	sp, #12
 801c124:	af00      	add	r7, sp, #0
 801c126:	6078      	str	r0, [r7, #4]

}
 801c128:	bf00      	nop
 801c12a:	370c      	adds	r7, #12
 801c12c:	46bd      	mov	sp, r7
 801c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c132:	4770      	bx	lr

0801c134 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801c134:	b480      	push	{r7}
 801c136:	b085      	sub	sp, #20
 801c138:	af00      	add	r7, sp, #0
 801c13a:	4603      	mov	r3, r0
 801c13c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c13e:	2300      	movs	r3, #0
 801c140:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801c142:	79fb      	ldrb	r3, [r7, #7]
 801c144:	2b03      	cmp	r3, #3
 801c146:	d817      	bhi.n	801c178 <USBD_Get_USB_Status+0x44>
 801c148:	a201      	add	r2, pc, #4	@ (adr r2, 801c150 <USBD_Get_USB_Status+0x1c>)
 801c14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c14e:	bf00      	nop
 801c150:	0801c161 	.word	0x0801c161
 801c154:	0801c167 	.word	0x0801c167
 801c158:	0801c16d 	.word	0x0801c16d
 801c15c:	0801c173 	.word	0x0801c173
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801c160:	2300      	movs	r3, #0
 801c162:	73fb      	strb	r3, [r7, #15]
    break;
 801c164:	e00b      	b.n	801c17e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801c166:	2303      	movs	r3, #3
 801c168:	73fb      	strb	r3, [r7, #15]
    break;
 801c16a:	e008      	b.n	801c17e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801c16c:	2301      	movs	r3, #1
 801c16e:	73fb      	strb	r3, [r7, #15]
    break;
 801c170:	e005      	b.n	801c17e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801c172:	2303      	movs	r3, #3
 801c174:	73fb      	strb	r3, [r7, #15]
    break;
 801c176:	e002      	b.n	801c17e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801c178:	2303      	movs	r3, #3
 801c17a:	73fb      	strb	r3, [r7, #15]
    break;
 801c17c:	bf00      	nop
  }
  return usb_status;
 801c17e:	7bfb      	ldrb	r3, [r7, #15]
}
 801c180:	4618      	mov	r0, r3
 801c182:	3714      	adds	r7, #20
 801c184:	46bd      	mov	sp, r7
 801c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c18a:	4770      	bx	lr

0801c18c <atoi>:
 801c18c:	220a      	movs	r2, #10
 801c18e:	2100      	movs	r1, #0
 801c190:	f000 b8b8 	b.w	801c304 <strtol>

0801c194 <rand>:
 801c194:	4b16      	ldr	r3, [pc, #88]	@ (801c1f0 <rand+0x5c>)
 801c196:	b510      	push	{r4, lr}
 801c198:	681c      	ldr	r4, [r3, #0]
 801c19a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c19c:	b9b3      	cbnz	r3, 801c1cc <rand+0x38>
 801c19e:	2018      	movs	r0, #24
 801c1a0:	f000 fba6 	bl	801c8f0 <malloc>
 801c1a4:	4602      	mov	r2, r0
 801c1a6:	6320      	str	r0, [r4, #48]	@ 0x30
 801c1a8:	b920      	cbnz	r0, 801c1b4 <rand+0x20>
 801c1aa:	4b12      	ldr	r3, [pc, #72]	@ (801c1f4 <rand+0x60>)
 801c1ac:	4812      	ldr	r0, [pc, #72]	@ (801c1f8 <rand+0x64>)
 801c1ae:	2152      	movs	r1, #82	@ 0x52
 801c1b0:	f000 fb36 	bl	801c820 <__assert_func>
 801c1b4:	4911      	ldr	r1, [pc, #68]	@ (801c1fc <rand+0x68>)
 801c1b6:	4b12      	ldr	r3, [pc, #72]	@ (801c200 <rand+0x6c>)
 801c1b8:	e9c0 1300 	strd	r1, r3, [r0]
 801c1bc:	4b11      	ldr	r3, [pc, #68]	@ (801c204 <rand+0x70>)
 801c1be:	6083      	str	r3, [r0, #8]
 801c1c0:	230b      	movs	r3, #11
 801c1c2:	8183      	strh	r3, [r0, #12]
 801c1c4:	2100      	movs	r1, #0
 801c1c6:	2001      	movs	r0, #1
 801c1c8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c1cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c1ce:	480e      	ldr	r0, [pc, #56]	@ (801c208 <rand+0x74>)
 801c1d0:	690b      	ldr	r3, [r1, #16]
 801c1d2:	694c      	ldr	r4, [r1, #20]
 801c1d4:	4a0d      	ldr	r2, [pc, #52]	@ (801c20c <rand+0x78>)
 801c1d6:	4358      	muls	r0, r3
 801c1d8:	fb02 0004 	mla	r0, r2, r4, r0
 801c1dc:	fba3 3202 	umull	r3, r2, r3, r2
 801c1e0:	3301      	adds	r3, #1
 801c1e2:	eb40 0002 	adc.w	r0, r0, r2
 801c1e6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801c1ea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801c1ee:	bd10      	pop	{r4, pc}
 801c1f0:	20000118 	.word	0x20000118
 801c1f4:	08021e24 	.word	0x08021e24
 801c1f8:	08021e3b 	.word	0x08021e3b
 801c1fc:	abcd330e 	.word	0xabcd330e
 801c200:	e66d1234 	.word	0xe66d1234
 801c204:	0005deec 	.word	0x0005deec
 801c208:	5851f42d 	.word	0x5851f42d
 801c20c:	4c957f2d 	.word	0x4c957f2d

0801c210 <_strtol_l.isra.0>:
 801c210:	2b24      	cmp	r3, #36	@ 0x24
 801c212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c216:	4686      	mov	lr, r0
 801c218:	4690      	mov	r8, r2
 801c21a:	d801      	bhi.n	801c220 <_strtol_l.isra.0+0x10>
 801c21c:	2b01      	cmp	r3, #1
 801c21e:	d106      	bne.n	801c22e <_strtol_l.isra.0+0x1e>
 801c220:	f000 faba 	bl	801c798 <__errno>
 801c224:	2316      	movs	r3, #22
 801c226:	6003      	str	r3, [r0, #0]
 801c228:	2000      	movs	r0, #0
 801c22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c22e:	4834      	ldr	r0, [pc, #208]	@ (801c300 <_strtol_l.isra.0+0xf0>)
 801c230:	460d      	mov	r5, r1
 801c232:	462a      	mov	r2, r5
 801c234:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c238:	5d06      	ldrb	r6, [r0, r4]
 801c23a:	f016 0608 	ands.w	r6, r6, #8
 801c23e:	d1f8      	bne.n	801c232 <_strtol_l.isra.0+0x22>
 801c240:	2c2d      	cmp	r4, #45	@ 0x2d
 801c242:	d110      	bne.n	801c266 <_strtol_l.isra.0+0x56>
 801c244:	782c      	ldrb	r4, [r5, #0]
 801c246:	2601      	movs	r6, #1
 801c248:	1c95      	adds	r5, r2, #2
 801c24a:	f033 0210 	bics.w	r2, r3, #16
 801c24e:	d115      	bne.n	801c27c <_strtol_l.isra.0+0x6c>
 801c250:	2c30      	cmp	r4, #48	@ 0x30
 801c252:	d10d      	bne.n	801c270 <_strtol_l.isra.0+0x60>
 801c254:	782a      	ldrb	r2, [r5, #0]
 801c256:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801c25a:	2a58      	cmp	r2, #88	@ 0x58
 801c25c:	d108      	bne.n	801c270 <_strtol_l.isra.0+0x60>
 801c25e:	786c      	ldrb	r4, [r5, #1]
 801c260:	3502      	adds	r5, #2
 801c262:	2310      	movs	r3, #16
 801c264:	e00a      	b.n	801c27c <_strtol_l.isra.0+0x6c>
 801c266:	2c2b      	cmp	r4, #43	@ 0x2b
 801c268:	bf04      	itt	eq
 801c26a:	782c      	ldrbeq	r4, [r5, #0]
 801c26c:	1c95      	addeq	r5, r2, #2
 801c26e:	e7ec      	b.n	801c24a <_strtol_l.isra.0+0x3a>
 801c270:	2b00      	cmp	r3, #0
 801c272:	d1f6      	bne.n	801c262 <_strtol_l.isra.0+0x52>
 801c274:	2c30      	cmp	r4, #48	@ 0x30
 801c276:	bf14      	ite	ne
 801c278:	230a      	movne	r3, #10
 801c27a:	2308      	moveq	r3, #8
 801c27c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801c280:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c284:	2200      	movs	r2, #0
 801c286:	fbbc f9f3 	udiv	r9, ip, r3
 801c28a:	4610      	mov	r0, r2
 801c28c:	fb03 ca19 	mls	sl, r3, r9, ip
 801c290:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801c294:	2f09      	cmp	r7, #9
 801c296:	d80f      	bhi.n	801c2b8 <_strtol_l.isra.0+0xa8>
 801c298:	463c      	mov	r4, r7
 801c29a:	42a3      	cmp	r3, r4
 801c29c:	dd1b      	ble.n	801c2d6 <_strtol_l.isra.0+0xc6>
 801c29e:	1c57      	adds	r7, r2, #1
 801c2a0:	d007      	beq.n	801c2b2 <_strtol_l.isra.0+0xa2>
 801c2a2:	4581      	cmp	r9, r0
 801c2a4:	d314      	bcc.n	801c2d0 <_strtol_l.isra.0+0xc0>
 801c2a6:	d101      	bne.n	801c2ac <_strtol_l.isra.0+0x9c>
 801c2a8:	45a2      	cmp	sl, r4
 801c2aa:	db11      	blt.n	801c2d0 <_strtol_l.isra.0+0xc0>
 801c2ac:	fb00 4003 	mla	r0, r0, r3, r4
 801c2b0:	2201      	movs	r2, #1
 801c2b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c2b6:	e7eb      	b.n	801c290 <_strtol_l.isra.0+0x80>
 801c2b8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801c2bc:	2f19      	cmp	r7, #25
 801c2be:	d801      	bhi.n	801c2c4 <_strtol_l.isra.0+0xb4>
 801c2c0:	3c37      	subs	r4, #55	@ 0x37
 801c2c2:	e7ea      	b.n	801c29a <_strtol_l.isra.0+0x8a>
 801c2c4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801c2c8:	2f19      	cmp	r7, #25
 801c2ca:	d804      	bhi.n	801c2d6 <_strtol_l.isra.0+0xc6>
 801c2cc:	3c57      	subs	r4, #87	@ 0x57
 801c2ce:	e7e4      	b.n	801c29a <_strtol_l.isra.0+0x8a>
 801c2d0:	f04f 32ff 	mov.w	r2, #4294967295
 801c2d4:	e7ed      	b.n	801c2b2 <_strtol_l.isra.0+0xa2>
 801c2d6:	1c53      	adds	r3, r2, #1
 801c2d8:	d108      	bne.n	801c2ec <_strtol_l.isra.0+0xdc>
 801c2da:	2322      	movs	r3, #34	@ 0x22
 801c2dc:	f8ce 3000 	str.w	r3, [lr]
 801c2e0:	4660      	mov	r0, ip
 801c2e2:	f1b8 0f00 	cmp.w	r8, #0
 801c2e6:	d0a0      	beq.n	801c22a <_strtol_l.isra.0+0x1a>
 801c2e8:	1e69      	subs	r1, r5, #1
 801c2ea:	e006      	b.n	801c2fa <_strtol_l.isra.0+0xea>
 801c2ec:	b106      	cbz	r6, 801c2f0 <_strtol_l.isra.0+0xe0>
 801c2ee:	4240      	negs	r0, r0
 801c2f0:	f1b8 0f00 	cmp.w	r8, #0
 801c2f4:	d099      	beq.n	801c22a <_strtol_l.isra.0+0x1a>
 801c2f6:	2a00      	cmp	r2, #0
 801c2f8:	d1f6      	bne.n	801c2e8 <_strtol_l.isra.0+0xd8>
 801c2fa:	f8c8 1000 	str.w	r1, [r8]
 801c2fe:	e794      	b.n	801c22a <_strtol_l.isra.0+0x1a>
 801c300:	08021f03 	.word	0x08021f03

0801c304 <strtol>:
 801c304:	4613      	mov	r3, r2
 801c306:	460a      	mov	r2, r1
 801c308:	4601      	mov	r1, r0
 801c30a:	4802      	ldr	r0, [pc, #8]	@ (801c314 <strtol+0x10>)
 801c30c:	6800      	ldr	r0, [r0, #0]
 801c30e:	f7ff bf7f 	b.w	801c210 <_strtol_l.isra.0>
 801c312:	bf00      	nop
 801c314:	20000118 	.word	0x20000118

0801c318 <std>:
 801c318:	2300      	movs	r3, #0
 801c31a:	b510      	push	{r4, lr}
 801c31c:	4604      	mov	r4, r0
 801c31e:	e9c0 3300 	strd	r3, r3, [r0]
 801c322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c326:	6083      	str	r3, [r0, #8]
 801c328:	8181      	strh	r1, [r0, #12]
 801c32a:	6643      	str	r3, [r0, #100]	@ 0x64
 801c32c:	81c2      	strh	r2, [r0, #14]
 801c32e:	6183      	str	r3, [r0, #24]
 801c330:	4619      	mov	r1, r3
 801c332:	2208      	movs	r2, #8
 801c334:	305c      	adds	r0, #92	@ 0x5c
 801c336:	f000 f966 	bl	801c606 <memset>
 801c33a:	4b0d      	ldr	r3, [pc, #52]	@ (801c370 <std+0x58>)
 801c33c:	6263      	str	r3, [r4, #36]	@ 0x24
 801c33e:	4b0d      	ldr	r3, [pc, #52]	@ (801c374 <std+0x5c>)
 801c340:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c342:	4b0d      	ldr	r3, [pc, #52]	@ (801c378 <std+0x60>)
 801c344:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c346:	4b0d      	ldr	r3, [pc, #52]	@ (801c37c <std+0x64>)
 801c348:	6323      	str	r3, [r4, #48]	@ 0x30
 801c34a:	4b0d      	ldr	r3, [pc, #52]	@ (801c380 <std+0x68>)
 801c34c:	6224      	str	r4, [r4, #32]
 801c34e:	429c      	cmp	r4, r3
 801c350:	d006      	beq.n	801c360 <std+0x48>
 801c352:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c356:	4294      	cmp	r4, r2
 801c358:	d002      	beq.n	801c360 <std+0x48>
 801c35a:	33d0      	adds	r3, #208	@ 0xd0
 801c35c:	429c      	cmp	r4, r3
 801c35e:	d105      	bne.n	801c36c <std+0x54>
 801c360:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c368:	f000 ba40 	b.w	801c7ec <__retarget_lock_init_recursive>
 801c36c:	bd10      	pop	{r4, pc}
 801c36e:	bf00      	nop
 801c370:	0801c52d 	.word	0x0801c52d
 801c374:	0801c54f 	.word	0x0801c54f
 801c378:	0801c587 	.word	0x0801c587
 801c37c:	0801c5ab 	.word	0x0801c5ab
 801c380:	2000e61c 	.word	0x2000e61c

0801c384 <stdio_exit_handler>:
 801c384:	4a02      	ldr	r2, [pc, #8]	@ (801c390 <stdio_exit_handler+0xc>)
 801c386:	4903      	ldr	r1, [pc, #12]	@ (801c394 <stdio_exit_handler+0x10>)
 801c388:	4803      	ldr	r0, [pc, #12]	@ (801c398 <stdio_exit_handler+0x14>)
 801c38a:	f000 b869 	b.w	801c460 <_fwalk_sglue>
 801c38e:	bf00      	nop
 801c390:	2000010c 	.word	0x2000010c
 801c394:	0801d3b1 	.word	0x0801d3b1
 801c398:	2000011c 	.word	0x2000011c

0801c39c <cleanup_stdio>:
 801c39c:	6841      	ldr	r1, [r0, #4]
 801c39e:	4b0c      	ldr	r3, [pc, #48]	@ (801c3d0 <cleanup_stdio+0x34>)
 801c3a0:	4299      	cmp	r1, r3
 801c3a2:	b510      	push	{r4, lr}
 801c3a4:	4604      	mov	r4, r0
 801c3a6:	d001      	beq.n	801c3ac <cleanup_stdio+0x10>
 801c3a8:	f001 f802 	bl	801d3b0 <_fflush_r>
 801c3ac:	68a1      	ldr	r1, [r4, #8]
 801c3ae:	4b09      	ldr	r3, [pc, #36]	@ (801c3d4 <cleanup_stdio+0x38>)
 801c3b0:	4299      	cmp	r1, r3
 801c3b2:	d002      	beq.n	801c3ba <cleanup_stdio+0x1e>
 801c3b4:	4620      	mov	r0, r4
 801c3b6:	f000 fffb 	bl	801d3b0 <_fflush_r>
 801c3ba:	68e1      	ldr	r1, [r4, #12]
 801c3bc:	4b06      	ldr	r3, [pc, #24]	@ (801c3d8 <cleanup_stdio+0x3c>)
 801c3be:	4299      	cmp	r1, r3
 801c3c0:	d004      	beq.n	801c3cc <cleanup_stdio+0x30>
 801c3c2:	4620      	mov	r0, r4
 801c3c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c3c8:	f000 bff2 	b.w	801d3b0 <_fflush_r>
 801c3cc:	bd10      	pop	{r4, pc}
 801c3ce:	bf00      	nop
 801c3d0:	2000e61c 	.word	0x2000e61c
 801c3d4:	2000e684 	.word	0x2000e684
 801c3d8:	2000e6ec 	.word	0x2000e6ec

0801c3dc <global_stdio_init.part.0>:
 801c3dc:	b510      	push	{r4, lr}
 801c3de:	4b0b      	ldr	r3, [pc, #44]	@ (801c40c <global_stdio_init.part.0+0x30>)
 801c3e0:	4c0b      	ldr	r4, [pc, #44]	@ (801c410 <global_stdio_init.part.0+0x34>)
 801c3e2:	4a0c      	ldr	r2, [pc, #48]	@ (801c414 <global_stdio_init.part.0+0x38>)
 801c3e4:	601a      	str	r2, [r3, #0]
 801c3e6:	4620      	mov	r0, r4
 801c3e8:	2200      	movs	r2, #0
 801c3ea:	2104      	movs	r1, #4
 801c3ec:	f7ff ff94 	bl	801c318 <std>
 801c3f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c3f4:	2201      	movs	r2, #1
 801c3f6:	2109      	movs	r1, #9
 801c3f8:	f7ff ff8e 	bl	801c318 <std>
 801c3fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c400:	2202      	movs	r2, #2
 801c402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c406:	2112      	movs	r1, #18
 801c408:	f7ff bf86 	b.w	801c318 <std>
 801c40c:	2000e754 	.word	0x2000e754
 801c410:	2000e61c 	.word	0x2000e61c
 801c414:	0801c385 	.word	0x0801c385

0801c418 <__sfp_lock_acquire>:
 801c418:	4801      	ldr	r0, [pc, #4]	@ (801c420 <__sfp_lock_acquire+0x8>)
 801c41a:	f000 b9e8 	b.w	801c7ee <__retarget_lock_acquire_recursive>
 801c41e:	bf00      	nop
 801c420:	2000e75d 	.word	0x2000e75d

0801c424 <__sfp_lock_release>:
 801c424:	4801      	ldr	r0, [pc, #4]	@ (801c42c <__sfp_lock_release+0x8>)
 801c426:	f000 b9e3 	b.w	801c7f0 <__retarget_lock_release_recursive>
 801c42a:	bf00      	nop
 801c42c:	2000e75d 	.word	0x2000e75d

0801c430 <__sinit>:
 801c430:	b510      	push	{r4, lr}
 801c432:	4604      	mov	r4, r0
 801c434:	f7ff fff0 	bl	801c418 <__sfp_lock_acquire>
 801c438:	6a23      	ldr	r3, [r4, #32]
 801c43a:	b11b      	cbz	r3, 801c444 <__sinit+0x14>
 801c43c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c440:	f7ff bff0 	b.w	801c424 <__sfp_lock_release>
 801c444:	4b04      	ldr	r3, [pc, #16]	@ (801c458 <__sinit+0x28>)
 801c446:	6223      	str	r3, [r4, #32]
 801c448:	4b04      	ldr	r3, [pc, #16]	@ (801c45c <__sinit+0x2c>)
 801c44a:	681b      	ldr	r3, [r3, #0]
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	d1f5      	bne.n	801c43c <__sinit+0xc>
 801c450:	f7ff ffc4 	bl	801c3dc <global_stdio_init.part.0>
 801c454:	e7f2      	b.n	801c43c <__sinit+0xc>
 801c456:	bf00      	nop
 801c458:	0801c39d 	.word	0x0801c39d
 801c45c:	2000e754 	.word	0x2000e754

0801c460 <_fwalk_sglue>:
 801c460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c464:	4607      	mov	r7, r0
 801c466:	4688      	mov	r8, r1
 801c468:	4614      	mov	r4, r2
 801c46a:	2600      	movs	r6, #0
 801c46c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c470:	f1b9 0901 	subs.w	r9, r9, #1
 801c474:	d505      	bpl.n	801c482 <_fwalk_sglue+0x22>
 801c476:	6824      	ldr	r4, [r4, #0]
 801c478:	2c00      	cmp	r4, #0
 801c47a:	d1f7      	bne.n	801c46c <_fwalk_sglue+0xc>
 801c47c:	4630      	mov	r0, r6
 801c47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c482:	89ab      	ldrh	r3, [r5, #12]
 801c484:	2b01      	cmp	r3, #1
 801c486:	d907      	bls.n	801c498 <_fwalk_sglue+0x38>
 801c488:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c48c:	3301      	adds	r3, #1
 801c48e:	d003      	beq.n	801c498 <_fwalk_sglue+0x38>
 801c490:	4629      	mov	r1, r5
 801c492:	4638      	mov	r0, r7
 801c494:	47c0      	blx	r8
 801c496:	4306      	orrs	r6, r0
 801c498:	3568      	adds	r5, #104	@ 0x68
 801c49a:	e7e9      	b.n	801c470 <_fwalk_sglue+0x10>

0801c49c <iprintf>:
 801c49c:	b40f      	push	{r0, r1, r2, r3}
 801c49e:	b507      	push	{r0, r1, r2, lr}
 801c4a0:	4906      	ldr	r1, [pc, #24]	@ (801c4bc <iprintf+0x20>)
 801c4a2:	ab04      	add	r3, sp, #16
 801c4a4:	6808      	ldr	r0, [r1, #0]
 801c4a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801c4aa:	6881      	ldr	r1, [r0, #8]
 801c4ac:	9301      	str	r3, [sp, #4]
 801c4ae:	f000 fc57 	bl	801cd60 <_vfiprintf_r>
 801c4b2:	b003      	add	sp, #12
 801c4b4:	f85d eb04 	ldr.w	lr, [sp], #4
 801c4b8:	b004      	add	sp, #16
 801c4ba:	4770      	bx	lr
 801c4bc:	20000118 	.word	0x20000118

0801c4c0 <sniprintf>:
 801c4c0:	b40c      	push	{r2, r3}
 801c4c2:	b530      	push	{r4, r5, lr}
 801c4c4:	4b18      	ldr	r3, [pc, #96]	@ (801c528 <sniprintf+0x68>)
 801c4c6:	1e0c      	subs	r4, r1, #0
 801c4c8:	681d      	ldr	r5, [r3, #0]
 801c4ca:	b09d      	sub	sp, #116	@ 0x74
 801c4cc:	da08      	bge.n	801c4e0 <sniprintf+0x20>
 801c4ce:	238b      	movs	r3, #139	@ 0x8b
 801c4d0:	602b      	str	r3, [r5, #0]
 801c4d2:	f04f 30ff 	mov.w	r0, #4294967295
 801c4d6:	b01d      	add	sp, #116	@ 0x74
 801c4d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c4dc:	b002      	add	sp, #8
 801c4de:	4770      	bx	lr
 801c4e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801c4e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c4e8:	f04f 0300 	mov.w	r3, #0
 801c4ec:	931b      	str	r3, [sp, #108]	@ 0x6c
 801c4ee:	bf14      	ite	ne
 801c4f0:	f104 33ff 	addne.w	r3, r4, #4294967295
 801c4f4:	4623      	moveq	r3, r4
 801c4f6:	9304      	str	r3, [sp, #16]
 801c4f8:	9307      	str	r3, [sp, #28]
 801c4fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c4fe:	9002      	str	r0, [sp, #8]
 801c500:	9006      	str	r0, [sp, #24]
 801c502:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c506:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801c508:	ab21      	add	r3, sp, #132	@ 0x84
 801c50a:	a902      	add	r1, sp, #8
 801c50c:	4628      	mov	r0, r5
 801c50e:	9301      	str	r3, [sp, #4]
 801c510:	f000 fb00 	bl	801cb14 <_svfiprintf_r>
 801c514:	1c43      	adds	r3, r0, #1
 801c516:	bfbc      	itt	lt
 801c518:	238b      	movlt	r3, #139	@ 0x8b
 801c51a:	602b      	strlt	r3, [r5, #0]
 801c51c:	2c00      	cmp	r4, #0
 801c51e:	d0da      	beq.n	801c4d6 <sniprintf+0x16>
 801c520:	9b02      	ldr	r3, [sp, #8]
 801c522:	2200      	movs	r2, #0
 801c524:	701a      	strb	r2, [r3, #0]
 801c526:	e7d6      	b.n	801c4d6 <sniprintf+0x16>
 801c528:	20000118 	.word	0x20000118

0801c52c <__sread>:
 801c52c:	b510      	push	{r4, lr}
 801c52e:	460c      	mov	r4, r1
 801c530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c534:	f000 f90c 	bl	801c750 <_read_r>
 801c538:	2800      	cmp	r0, #0
 801c53a:	bfab      	itete	ge
 801c53c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c53e:	89a3      	ldrhlt	r3, [r4, #12]
 801c540:	181b      	addge	r3, r3, r0
 801c542:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c546:	bfac      	ite	ge
 801c548:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c54a:	81a3      	strhlt	r3, [r4, #12]
 801c54c:	bd10      	pop	{r4, pc}

0801c54e <__swrite>:
 801c54e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c552:	461f      	mov	r7, r3
 801c554:	898b      	ldrh	r3, [r1, #12]
 801c556:	05db      	lsls	r3, r3, #23
 801c558:	4605      	mov	r5, r0
 801c55a:	460c      	mov	r4, r1
 801c55c:	4616      	mov	r6, r2
 801c55e:	d505      	bpl.n	801c56c <__swrite+0x1e>
 801c560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c564:	2302      	movs	r3, #2
 801c566:	2200      	movs	r2, #0
 801c568:	f000 f8e0 	bl	801c72c <_lseek_r>
 801c56c:	89a3      	ldrh	r3, [r4, #12]
 801c56e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c572:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c576:	81a3      	strh	r3, [r4, #12]
 801c578:	4632      	mov	r2, r6
 801c57a:	463b      	mov	r3, r7
 801c57c:	4628      	mov	r0, r5
 801c57e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c582:	f000 b8f7 	b.w	801c774 <_write_r>

0801c586 <__sseek>:
 801c586:	b510      	push	{r4, lr}
 801c588:	460c      	mov	r4, r1
 801c58a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c58e:	f000 f8cd 	bl	801c72c <_lseek_r>
 801c592:	1c43      	adds	r3, r0, #1
 801c594:	89a3      	ldrh	r3, [r4, #12]
 801c596:	bf15      	itete	ne
 801c598:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c59a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c59e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c5a2:	81a3      	strheq	r3, [r4, #12]
 801c5a4:	bf18      	it	ne
 801c5a6:	81a3      	strhne	r3, [r4, #12]
 801c5a8:	bd10      	pop	{r4, pc}

0801c5aa <__sclose>:
 801c5aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c5ae:	f000 b84f 	b.w	801c650 <_close_r>

0801c5b2 <memcmp>:
 801c5b2:	b510      	push	{r4, lr}
 801c5b4:	3901      	subs	r1, #1
 801c5b6:	4402      	add	r2, r0
 801c5b8:	4290      	cmp	r0, r2
 801c5ba:	d101      	bne.n	801c5c0 <memcmp+0xe>
 801c5bc:	2000      	movs	r0, #0
 801c5be:	e005      	b.n	801c5cc <memcmp+0x1a>
 801c5c0:	7803      	ldrb	r3, [r0, #0]
 801c5c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c5c6:	42a3      	cmp	r3, r4
 801c5c8:	d001      	beq.n	801c5ce <memcmp+0x1c>
 801c5ca:	1b18      	subs	r0, r3, r4
 801c5cc:	bd10      	pop	{r4, pc}
 801c5ce:	3001      	adds	r0, #1
 801c5d0:	e7f2      	b.n	801c5b8 <memcmp+0x6>

0801c5d2 <memmove>:
 801c5d2:	4288      	cmp	r0, r1
 801c5d4:	b510      	push	{r4, lr}
 801c5d6:	eb01 0402 	add.w	r4, r1, r2
 801c5da:	d902      	bls.n	801c5e2 <memmove+0x10>
 801c5dc:	4284      	cmp	r4, r0
 801c5de:	4623      	mov	r3, r4
 801c5e0:	d807      	bhi.n	801c5f2 <memmove+0x20>
 801c5e2:	1e43      	subs	r3, r0, #1
 801c5e4:	42a1      	cmp	r1, r4
 801c5e6:	d008      	beq.n	801c5fa <memmove+0x28>
 801c5e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c5ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c5f0:	e7f8      	b.n	801c5e4 <memmove+0x12>
 801c5f2:	4402      	add	r2, r0
 801c5f4:	4601      	mov	r1, r0
 801c5f6:	428a      	cmp	r2, r1
 801c5f8:	d100      	bne.n	801c5fc <memmove+0x2a>
 801c5fa:	bd10      	pop	{r4, pc}
 801c5fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c600:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c604:	e7f7      	b.n	801c5f6 <memmove+0x24>

0801c606 <memset>:
 801c606:	4402      	add	r2, r0
 801c608:	4603      	mov	r3, r0
 801c60a:	4293      	cmp	r3, r2
 801c60c:	d100      	bne.n	801c610 <memset+0xa>
 801c60e:	4770      	bx	lr
 801c610:	f803 1b01 	strb.w	r1, [r3], #1
 801c614:	e7f9      	b.n	801c60a <memset+0x4>

0801c616 <strcat>:
 801c616:	b510      	push	{r4, lr}
 801c618:	4602      	mov	r2, r0
 801c61a:	7814      	ldrb	r4, [r2, #0]
 801c61c:	4613      	mov	r3, r2
 801c61e:	3201      	adds	r2, #1
 801c620:	2c00      	cmp	r4, #0
 801c622:	d1fa      	bne.n	801c61a <strcat+0x4>
 801c624:	3b01      	subs	r3, #1
 801c626:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c62a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c62e:	2a00      	cmp	r2, #0
 801c630:	d1f9      	bne.n	801c626 <strcat+0x10>
 801c632:	bd10      	pop	{r4, pc}

0801c634 <strchr>:
 801c634:	b2c9      	uxtb	r1, r1
 801c636:	4603      	mov	r3, r0
 801c638:	4618      	mov	r0, r3
 801c63a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c63e:	b112      	cbz	r2, 801c646 <strchr+0x12>
 801c640:	428a      	cmp	r2, r1
 801c642:	d1f9      	bne.n	801c638 <strchr+0x4>
 801c644:	4770      	bx	lr
 801c646:	2900      	cmp	r1, #0
 801c648:	bf18      	it	ne
 801c64a:	2000      	movne	r0, #0
 801c64c:	4770      	bx	lr
	...

0801c650 <_close_r>:
 801c650:	b538      	push	{r3, r4, r5, lr}
 801c652:	4d06      	ldr	r5, [pc, #24]	@ (801c66c <_close_r+0x1c>)
 801c654:	2300      	movs	r3, #0
 801c656:	4604      	mov	r4, r0
 801c658:	4608      	mov	r0, r1
 801c65a:	602b      	str	r3, [r5, #0]
 801c65c:	f7e7 fa9e 	bl	8003b9c <_close>
 801c660:	1c43      	adds	r3, r0, #1
 801c662:	d102      	bne.n	801c66a <_close_r+0x1a>
 801c664:	682b      	ldr	r3, [r5, #0]
 801c666:	b103      	cbz	r3, 801c66a <_close_r+0x1a>
 801c668:	6023      	str	r3, [r4, #0]
 801c66a:	bd38      	pop	{r3, r4, r5, pc}
 801c66c:	2000e758 	.word	0x2000e758

0801c670 <_reclaim_reent>:
 801c670:	4b2d      	ldr	r3, [pc, #180]	@ (801c728 <_reclaim_reent+0xb8>)
 801c672:	681b      	ldr	r3, [r3, #0]
 801c674:	4283      	cmp	r3, r0
 801c676:	b570      	push	{r4, r5, r6, lr}
 801c678:	4604      	mov	r4, r0
 801c67a:	d053      	beq.n	801c724 <_reclaim_reent+0xb4>
 801c67c:	69c3      	ldr	r3, [r0, #28]
 801c67e:	b31b      	cbz	r3, 801c6c8 <_reclaim_reent+0x58>
 801c680:	68db      	ldr	r3, [r3, #12]
 801c682:	b163      	cbz	r3, 801c69e <_reclaim_reent+0x2e>
 801c684:	2500      	movs	r5, #0
 801c686:	69e3      	ldr	r3, [r4, #28]
 801c688:	68db      	ldr	r3, [r3, #12]
 801c68a:	5959      	ldr	r1, [r3, r5]
 801c68c:	b9b1      	cbnz	r1, 801c6bc <_reclaim_reent+0x4c>
 801c68e:	3504      	adds	r5, #4
 801c690:	2d80      	cmp	r5, #128	@ 0x80
 801c692:	d1f8      	bne.n	801c686 <_reclaim_reent+0x16>
 801c694:	69e3      	ldr	r3, [r4, #28]
 801c696:	4620      	mov	r0, r4
 801c698:	68d9      	ldr	r1, [r3, #12]
 801c69a:	f000 f8df 	bl	801c85c <_free_r>
 801c69e:	69e3      	ldr	r3, [r4, #28]
 801c6a0:	6819      	ldr	r1, [r3, #0]
 801c6a2:	b111      	cbz	r1, 801c6aa <_reclaim_reent+0x3a>
 801c6a4:	4620      	mov	r0, r4
 801c6a6:	f000 f8d9 	bl	801c85c <_free_r>
 801c6aa:	69e3      	ldr	r3, [r4, #28]
 801c6ac:	689d      	ldr	r5, [r3, #8]
 801c6ae:	b15d      	cbz	r5, 801c6c8 <_reclaim_reent+0x58>
 801c6b0:	4629      	mov	r1, r5
 801c6b2:	4620      	mov	r0, r4
 801c6b4:	682d      	ldr	r5, [r5, #0]
 801c6b6:	f000 f8d1 	bl	801c85c <_free_r>
 801c6ba:	e7f8      	b.n	801c6ae <_reclaim_reent+0x3e>
 801c6bc:	680e      	ldr	r6, [r1, #0]
 801c6be:	4620      	mov	r0, r4
 801c6c0:	f000 f8cc 	bl	801c85c <_free_r>
 801c6c4:	4631      	mov	r1, r6
 801c6c6:	e7e1      	b.n	801c68c <_reclaim_reent+0x1c>
 801c6c8:	6961      	ldr	r1, [r4, #20]
 801c6ca:	b111      	cbz	r1, 801c6d2 <_reclaim_reent+0x62>
 801c6cc:	4620      	mov	r0, r4
 801c6ce:	f000 f8c5 	bl	801c85c <_free_r>
 801c6d2:	69e1      	ldr	r1, [r4, #28]
 801c6d4:	b111      	cbz	r1, 801c6dc <_reclaim_reent+0x6c>
 801c6d6:	4620      	mov	r0, r4
 801c6d8:	f000 f8c0 	bl	801c85c <_free_r>
 801c6dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c6de:	b111      	cbz	r1, 801c6e6 <_reclaim_reent+0x76>
 801c6e0:	4620      	mov	r0, r4
 801c6e2:	f000 f8bb 	bl	801c85c <_free_r>
 801c6e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c6e8:	b111      	cbz	r1, 801c6f0 <_reclaim_reent+0x80>
 801c6ea:	4620      	mov	r0, r4
 801c6ec:	f000 f8b6 	bl	801c85c <_free_r>
 801c6f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801c6f2:	b111      	cbz	r1, 801c6fa <_reclaim_reent+0x8a>
 801c6f4:	4620      	mov	r0, r4
 801c6f6:	f000 f8b1 	bl	801c85c <_free_r>
 801c6fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801c6fc:	b111      	cbz	r1, 801c704 <_reclaim_reent+0x94>
 801c6fe:	4620      	mov	r0, r4
 801c700:	f000 f8ac 	bl	801c85c <_free_r>
 801c704:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801c706:	b111      	cbz	r1, 801c70e <_reclaim_reent+0x9e>
 801c708:	4620      	mov	r0, r4
 801c70a:	f000 f8a7 	bl	801c85c <_free_r>
 801c70e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801c710:	b111      	cbz	r1, 801c718 <_reclaim_reent+0xa8>
 801c712:	4620      	mov	r0, r4
 801c714:	f000 f8a2 	bl	801c85c <_free_r>
 801c718:	6a23      	ldr	r3, [r4, #32]
 801c71a:	b11b      	cbz	r3, 801c724 <_reclaim_reent+0xb4>
 801c71c:	4620      	mov	r0, r4
 801c71e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c722:	4718      	bx	r3
 801c724:	bd70      	pop	{r4, r5, r6, pc}
 801c726:	bf00      	nop
 801c728:	20000118 	.word	0x20000118

0801c72c <_lseek_r>:
 801c72c:	b538      	push	{r3, r4, r5, lr}
 801c72e:	4d07      	ldr	r5, [pc, #28]	@ (801c74c <_lseek_r+0x20>)
 801c730:	4604      	mov	r4, r0
 801c732:	4608      	mov	r0, r1
 801c734:	4611      	mov	r1, r2
 801c736:	2200      	movs	r2, #0
 801c738:	602a      	str	r2, [r5, #0]
 801c73a:	461a      	mov	r2, r3
 801c73c:	f7e7 fa55 	bl	8003bea <_lseek>
 801c740:	1c43      	adds	r3, r0, #1
 801c742:	d102      	bne.n	801c74a <_lseek_r+0x1e>
 801c744:	682b      	ldr	r3, [r5, #0]
 801c746:	b103      	cbz	r3, 801c74a <_lseek_r+0x1e>
 801c748:	6023      	str	r3, [r4, #0]
 801c74a:	bd38      	pop	{r3, r4, r5, pc}
 801c74c:	2000e758 	.word	0x2000e758

0801c750 <_read_r>:
 801c750:	b538      	push	{r3, r4, r5, lr}
 801c752:	4d07      	ldr	r5, [pc, #28]	@ (801c770 <_read_r+0x20>)
 801c754:	4604      	mov	r4, r0
 801c756:	4608      	mov	r0, r1
 801c758:	4611      	mov	r1, r2
 801c75a:	2200      	movs	r2, #0
 801c75c:	602a      	str	r2, [r5, #0]
 801c75e:	461a      	mov	r2, r3
 801c760:	f7e7 f9e3 	bl	8003b2a <_read>
 801c764:	1c43      	adds	r3, r0, #1
 801c766:	d102      	bne.n	801c76e <_read_r+0x1e>
 801c768:	682b      	ldr	r3, [r5, #0]
 801c76a:	b103      	cbz	r3, 801c76e <_read_r+0x1e>
 801c76c:	6023      	str	r3, [r4, #0]
 801c76e:	bd38      	pop	{r3, r4, r5, pc}
 801c770:	2000e758 	.word	0x2000e758

0801c774 <_write_r>:
 801c774:	b538      	push	{r3, r4, r5, lr}
 801c776:	4d07      	ldr	r5, [pc, #28]	@ (801c794 <_write_r+0x20>)
 801c778:	4604      	mov	r4, r0
 801c77a:	4608      	mov	r0, r1
 801c77c:	4611      	mov	r1, r2
 801c77e:	2200      	movs	r2, #0
 801c780:	602a      	str	r2, [r5, #0]
 801c782:	461a      	mov	r2, r3
 801c784:	f7e7 f9ee 	bl	8003b64 <_write>
 801c788:	1c43      	adds	r3, r0, #1
 801c78a:	d102      	bne.n	801c792 <_write_r+0x1e>
 801c78c:	682b      	ldr	r3, [r5, #0]
 801c78e:	b103      	cbz	r3, 801c792 <_write_r+0x1e>
 801c790:	6023      	str	r3, [r4, #0]
 801c792:	bd38      	pop	{r3, r4, r5, pc}
 801c794:	2000e758 	.word	0x2000e758

0801c798 <__errno>:
 801c798:	4b01      	ldr	r3, [pc, #4]	@ (801c7a0 <__errno+0x8>)
 801c79a:	6818      	ldr	r0, [r3, #0]
 801c79c:	4770      	bx	lr
 801c79e:	bf00      	nop
 801c7a0:	20000118 	.word	0x20000118

0801c7a4 <__libc_init_array>:
 801c7a4:	b570      	push	{r4, r5, r6, lr}
 801c7a6:	4d0d      	ldr	r5, [pc, #52]	@ (801c7dc <__libc_init_array+0x38>)
 801c7a8:	4c0d      	ldr	r4, [pc, #52]	@ (801c7e0 <__libc_init_array+0x3c>)
 801c7aa:	1b64      	subs	r4, r4, r5
 801c7ac:	10a4      	asrs	r4, r4, #2
 801c7ae:	2600      	movs	r6, #0
 801c7b0:	42a6      	cmp	r6, r4
 801c7b2:	d109      	bne.n	801c7c8 <__libc_init_array+0x24>
 801c7b4:	4d0b      	ldr	r5, [pc, #44]	@ (801c7e4 <__libc_init_array+0x40>)
 801c7b6:	4c0c      	ldr	r4, [pc, #48]	@ (801c7e8 <__libc_init_array+0x44>)
 801c7b8:	f000 ffde 	bl	801d778 <_init>
 801c7bc:	1b64      	subs	r4, r4, r5
 801c7be:	10a4      	asrs	r4, r4, #2
 801c7c0:	2600      	movs	r6, #0
 801c7c2:	42a6      	cmp	r6, r4
 801c7c4:	d105      	bne.n	801c7d2 <__libc_init_array+0x2e>
 801c7c6:	bd70      	pop	{r4, r5, r6, pc}
 801c7c8:	f855 3b04 	ldr.w	r3, [r5], #4
 801c7cc:	4798      	blx	r3
 801c7ce:	3601      	adds	r6, #1
 801c7d0:	e7ee      	b.n	801c7b0 <__libc_init_array+0xc>
 801c7d2:	f855 3b04 	ldr.w	r3, [r5], #4
 801c7d6:	4798      	blx	r3
 801c7d8:	3601      	adds	r6, #1
 801c7da:	e7f2      	b.n	801c7c2 <__libc_init_array+0x1e>
 801c7dc:	0802200c 	.word	0x0802200c
 801c7e0:	0802200c 	.word	0x0802200c
 801c7e4:	0802200c 	.word	0x0802200c
 801c7e8:	08022010 	.word	0x08022010

0801c7ec <__retarget_lock_init_recursive>:
 801c7ec:	4770      	bx	lr

0801c7ee <__retarget_lock_acquire_recursive>:
 801c7ee:	4770      	bx	lr

0801c7f0 <__retarget_lock_release_recursive>:
 801c7f0:	4770      	bx	lr

0801c7f2 <strcpy>:
 801c7f2:	4603      	mov	r3, r0
 801c7f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c7f8:	f803 2b01 	strb.w	r2, [r3], #1
 801c7fc:	2a00      	cmp	r2, #0
 801c7fe:	d1f9      	bne.n	801c7f4 <strcpy+0x2>
 801c800:	4770      	bx	lr

0801c802 <memcpy>:
 801c802:	440a      	add	r2, r1
 801c804:	4291      	cmp	r1, r2
 801c806:	f100 33ff 	add.w	r3, r0, #4294967295
 801c80a:	d100      	bne.n	801c80e <memcpy+0xc>
 801c80c:	4770      	bx	lr
 801c80e:	b510      	push	{r4, lr}
 801c810:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c814:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c818:	4291      	cmp	r1, r2
 801c81a:	d1f9      	bne.n	801c810 <memcpy+0xe>
 801c81c:	bd10      	pop	{r4, pc}
	...

0801c820 <__assert_func>:
 801c820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c822:	4614      	mov	r4, r2
 801c824:	461a      	mov	r2, r3
 801c826:	4b09      	ldr	r3, [pc, #36]	@ (801c84c <__assert_func+0x2c>)
 801c828:	681b      	ldr	r3, [r3, #0]
 801c82a:	4605      	mov	r5, r0
 801c82c:	68d8      	ldr	r0, [r3, #12]
 801c82e:	b14c      	cbz	r4, 801c844 <__assert_func+0x24>
 801c830:	4b07      	ldr	r3, [pc, #28]	@ (801c850 <__assert_func+0x30>)
 801c832:	9100      	str	r1, [sp, #0]
 801c834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c838:	4906      	ldr	r1, [pc, #24]	@ (801c854 <__assert_func+0x34>)
 801c83a:	462b      	mov	r3, r5
 801c83c:	f000 fde0 	bl	801d400 <fiprintf>
 801c840:	f000 fe94 	bl	801d56c <abort>
 801c844:	4b04      	ldr	r3, [pc, #16]	@ (801c858 <__assert_func+0x38>)
 801c846:	461c      	mov	r4, r3
 801c848:	e7f3      	b.n	801c832 <__assert_func+0x12>
 801c84a:	bf00      	nop
 801c84c:	20000118 	.word	0x20000118
 801c850:	08021e93 	.word	0x08021e93
 801c854:	08021ea0 	.word	0x08021ea0
 801c858:	08021ece 	.word	0x08021ece

0801c85c <_free_r>:
 801c85c:	b538      	push	{r3, r4, r5, lr}
 801c85e:	4605      	mov	r5, r0
 801c860:	2900      	cmp	r1, #0
 801c862:	d041      	beq.n	801c8e8 <_free_r+0x8c>
 801c864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c868:	1f0c      	subs	r4, r1, #4
 801c86a:	2b00      	cmp	r3, #0
 801c86c:	bfb8      	it	lt
 801c86e:	18e4      	addlt	r4, r4, r3
 801c870:	f000 f8e8 	bl	801ca44 <__malloc_lock>
 801c874:	4a1d      	ldr	r2, [pc, #116]	@ (801c8ec <_free_r+0x90>)
 801c876:	6813      	ldr	r3, [r2, #0]
 801c878:	b933      	cbnz	r3, 801c888 <_free_r+0x2c>
 801c87a:	6063      	str	r3, [r4, #4]
 801c87c:	6014      	str	r4, [r2, #0]
 801c87e:	4628      	mov	r0, r5
 801c880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c884:	f000 b8e4 	b.w	801ca50 <__malloc_unlock>
 801c888:	42a3      	cmp	r3, r4
 801c88a:	d908      	bls.n	801c89e <_free_r+0x42>
 801c88c:	6820      	ldr	r0, [r4, #0]
 801c88e:	1821      	adds	r1, r4, r0
 801c890:	428b      	cmp	r3, r1
 801c892:	bf01      	itttt	eq
 801c894:	6819      	ldreq	r1, [r3, #0]
 801c896:	685b      	ldreq	r3, [r3, #4]
 801c898:	1809      	addeq	r1, r1, r0
 801c89a:	6021      	streq	r1, [r4, #0]
 801c89c:	e7ed      	b.n	801c87a <_free_r+0x1e>
 801c89e:	461a      	mov	r2, r3
 801c8a0:	685b      	ldr	r3, [r3, #4]
 801c8a2:	b10b      	cbz	r3, 801c8a8 <_free_r+0x4c>
 801c8a4:	42a3      	cmp	r3, r4
 801c8a6:	d9fa      	bls.n	801c89e <_free_r+0x42>
 801c8a8:	6811      	ldr	r1, [r2, #0]
 801c8aa:	1850      	adds	r0, r2, r1
 801c8ac:	42a0      	cmp	r0, r4
 801c8ae:	d10b      	bne.n	801c8c8 <_free_r+0x6c>
 801c8b0:	6820      	ldr	r0, [r4, #0]
 801c8b2:	4401      	add	r1, r0
 801c8b4:	1850      	adds	r0, r2, r1
 801c8b6:	4283      	cmp	r3, r0
 801c8b8:	6011      	str	r1, [r2, #0]
 801c8ba:	d1e0      	bne.n	801c87e <_free_r+0x22>
 801c8bc:	6818      	ldr	r0, [r3, #0]
 801c8be:	685b      	ldr	r3, [r3, #4]
 801c8c0:	6053      	str	r3, [r2, #4]
 801c8c2:	4408      	add	r0, r1
 801c8c4:	6010      	str	r0, [r2, #0]
 801c8c6:	e7da      	b.n	801c87e <_free_r+0x22>
 801c8c8:	d902      	bls.n	801c8d0 <_free_r+0x74>
 801c8ca:	230c      	movs	r3, #12
 801c8cc:	602b      	str	r3, [r5, #0]
 801c8ce:	e7d6      	b.n	801c87e <_free_r+0x22>
 801c8d0:	6820      	ldr	r0, [r4, #0]
 801c8d2:	1821      	adds	r1, r4, r0
 801c8d4:	428b      	cmp	r3, r1
 801c8d6:	bf04      	itt	eq
 801c8d8:	6819      	ldreq	r1, [r3, #0]
 801c8da:	685b      	ldreq	r3, [r3, #4]
 801c8dc:	6063      	str	r3, [r4, #4]
 801c8de:	bf04      	itt	eq
 801c8e0:	1809      	addeq	r1, r1, r0
 801c8e2:	6021      	streq	r1, [r4, #0]
 801c8e4:	6054      	str	r4, [r2, #4]
 801c8e6:	e7ca      	b.n	801c87e <_free_r+0x22>
 801c8e8:	bd38      	pop	{r3, r4, r5, pc}
 801c8ea:	bf00      	nop
 801c8ec:	2000e764 	.word	0x2000e764

0801c8f0 <malloc>:
 801c8f0:	4b02      	ldr	r3, [pc, #8]	@ (801c8fc <malloc+0xc>)
 801c8f2:	4601      	mov	r1, r0
 801c8f4:	6818      	ldr	r0, [r3, #0]
 801c8f6:	f000 b825 	b.w	801c944 <_malloc_r>
 801c8fa:	bf00      	nop
 801c8fc:	20000118 	.word	0x20000118

0801c900 <sbrk_aligned>:
 801c900:	b570      	push	{r4, r5, r6, lr}
 801c902:	4e0f      	ldr	r6, [pc, #60]	@ (801c940 <sbrk_aligned+0x40>)
 801c904:	460c      	mov	r4, r1
 801c906:	6831      	ldr	r1, [r6, #0]
 801c908:	4605      	mov	r5, r0
 801c90a:	b911      	cbnz	r1, 801c912 <sbrk_aligned+0x12>
 801c90c:	f000 fe1e 	bl	801d54c <_sbrk_r>
 801c910:	6030      	str	r0, [r6, #0]
 801c912:	4621      	mov	r1, r4
 801c914:	4628      	mov	r0, r5
 801c916:	f000 fe19 	bl	801d54c <_sbrk_r>
 801c91a:	1c43      	adds	r3, r0, #1
 801c91c:	d103      	bne.n	801c926 <sbrk_aligned+0x26>
 801c91e:	f04f 34ff 	mov.w	r4, #4294967295
 801c922:	4620      	mov	r0, r4
 801c924:	bd70      	pop	{r4, r5, r6, pc}
 801c926:	1cc4      	adds	r4, r0, #3
 801c928:	f024 0403 	bic.w	r4, r4, #3
 801c92c:	42a0      	cmp	r0, r4
 801c92e:	d0f8      	beq.n	801c922 <sbrk_aligned+0x22>
 801c930:	1a21      	subs	r1, r4, r0
 801c932:	4628      	mov	r0, r5
 801c934:	f000 fe0a 	bl	801d54c <_sbrk_r>
 801c938:	3001      	adds	r0, #1
 801c93a:	d1f2      	bne.n	801c922 <sbrk_aligned+0x22>
 801c93c:	e7ef      	b.n	801c91e <sbrk_aligned+0x1e>
 801c93e:	bf00      	nop
 801c940:	2000e760 	.word	0x2000e760

0801c944 <_malloc_r>:
 801c944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c948:	1ccd      	adds	r5, r1, #3
 801c94a:	f025 0503 	bic.w	r5, r5, #3
 801c94e:	3508      	adds	r5, #8
 801c950:	2d0c      	cmp	r5, #12
 801c952:	bf38      	it	cc
 801c954:	250c      	movcc	r5, #12
 801c956:	2d00      	cmp	r5, #0
 801c958:	4606      	mov	r6, r0
 801c95a:	db01      	blt.n	801c960 <_malloc_r+0x1c>
 801c95c:	42a9      	cmp	r1, r5
 801c95e:	d904      	bls.n	801c96a <_malloc_r+0x26>
 801c960:	230c      	movs	r3, #12
 801c962:	6033      	str	r3, [r6, #0]
 801c964:	2000      	movs	r0, #0
 801c966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c96a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ca40 <_malloc_r+0xfc>
 801c96e:	f000 f869 	bl	801ca44 <__malloc_lock>
 801c972:	f8d8 3000 	ldr.w	r3, [r8]
 801c976:	461c      	mov	r4, r3
 801c978:	bb44      	cbnz	r4, 801c9cc <_malloc_r+0x88>
 801c97a:	4629      	mov	r1, r5
 801c97c:	4630      	mov	r0, r6
 801c97e:	f7ff ffbf 	bl	801c900 <sbrk_aligned>
 801c982:	1c43      	adds	r3, r0, #1
 801c984:	4604      	mov	r4, r0
 801c986:	d158      	bne.n	801ca3a <_malloc_r+0xf6>
 801c988:	f8d8 4000 	ldr.w	r4, [r8]
 801c98c:	4627      	mov	r7, r4
 801c98e:	2f00      	cmp	r7, #0
 801c990:	d143      	bne.n	801ca1a <_malloc_r+0xd6>
 801c992:	2c00      	cmp	r4, #0
 801c994:	d04b      	beq.n	801ca2e <_malloc_r+0xea>
 801c996:	6823      	ldr	r3, [r4, #0]
 801c998:	4639      	mov	r1, r7
 801c99a:	4630      	mov	r0, r6
 801c99c:	eb04 0903 	add.w	r9, r4, r3
 801c9a0:	f000 fdd4 	bl	801d54c <_sbrk_r>
 801c9a4:	4581      	cmp	r9, r0
 801c9a6:	d142      	bne.n	801ca2e <_malloc_r+0xea>
 801c9a8:	6821      	ldr	r1, [r4, #0]
 801c9aa:	1a6d      	subs	r5, r5, r1
 801c9ac:	4629      	mov	r1, r5
 801c9ae:	4630      	mov	r0, r6
 801c9b0:	f7ff ffa6 	bl	801c900 <sbrk_aligned>
 801c9b4:	3001      	adds	r0, #1
 801c9b6:	d03a      	beq.n	801ca2e <_malloc_r+0xea>
 801c9b8:	6823      	ldr	r3, [r4, #0]
 801c9ba:	442b      	add	r3, r5
 801c9bc:	6023      	str	r3, [r4, #0]
 801c9be:	f8d8 3000 	ldr.w	r3, [r8]
 801c9c2:	685a      	ldr	r2, [r3, #4]
 801c9c4:	bb62      	cbnz	r2, 801ca20 <_malloc_r+0xdc>
 801c9c6:	f8c8 7000 	str.w	r7, [r8]
 801c9ca:	e00f      	b.n	801c9ec <_malloc_r+0xa8>
 801c9cc:	6822      	ldr	r2, [r4, #0]
 801c9ce:	1b52      	subs	r2, r2, r5
 801c9d0:	d420      	bmi.n	801ca14 <_malloc_r+0xd0>
 801c9d2:	2a0b      	cmp	r2, #11
 801c9d4:	d917      	bls.n	801ca06 <_malloc_r+0xc2>
 801c9d6:	1961      	adds	r1, r4, r5
 801c9d8:	42a3      	cmp	r3, r4
 801c9da:	6025      	str	r5, [r4, #0]
 801c9dc:	bf18      	it	ne
 801c9de:	6059      	strne	r1, [r3, #4]
 801c9e0:	6863      	ldr	r3, [r4, #4]
 801c9e2:	bf08      	it	eq
 801c9e4:	f8c8 1000 	streq.w	r1, [r8]
 801c9e8:	5162      	str	r2, [r4, r5]
 801c9ea:	604b      	str	r3, [r1, #4]
 801c9ec:	4630      	mov	r0, r6
 801c9ee:	f000 f82f 	bl	801ca50 <__malloc_unlock>
 801c9f2:	f104 000b 	add.w	r0, r4, #11
 801c9f6:	1d23      	adds	r3, r4, #4
 801c9f8:	f020 0007 	bic.w	r0, r0, #7
 801c9fc:	1ac2      	subs	r2, r0, r3
 801c9fe:	bf1c      	itt	ne
 801ca00:	1a1b      	subne	r3, r3, r0
 801ca02:	50a3      	strne	r3, [r4, r2]
 801ca04:	e7af      	b.n	801c966 <_malloc_r+0x22>
 801ca06:	6862      	ldr	r2, [r4, #4]
 801ca08:	42a3      	cmp	r3, r4
 801ca0a:	bf0c      	ite	eq
 801ca0c:	f8c8 2000 	streq.w	r2, [r8]
 801ca10:	605a      	strne	r2, [r3, #4]
 801ca12:	e7eb      	b.n	801c9ec <_malloc_r+0xa8>
 801ca14:	4623      	mov	r3, r4
 801ca16:	6864      	ldr	r4, [r4, #4]
 801ca18:	e7ae      	b.n	801c978 <_malloc_r+0x34>
 801ca1a:	463c      	mov	r4, r7
 801ca1c:	687f      	ldr	r7, [r7, #4]
 801ca1e:	e7b6      	b.n	801c98e <_malloc_r+0x4a>
 801ca20:	461a      	mov	r2, r3
 801ca22:	685b      	ldr	r3, [r3, #4]
 801ca24:	42a3      	cmp	r3, r4
 801ca26:	d1fb      	bne.n	801ca20 <_malloc_r+0xdc>
 801ca28:	2300      	movs	r3, #0
 801ca2a:	6053      	str	r3, [r2, #4]
 801ca2c:	e7de      	b.n	801c9ec <_malloc_r+0xa8>
 801ca2e:	230c      	movs	r3, #12
 801ca30:	6033      	str	r3, [r6, #0]
 801ca32:	4630      	mov	r0, r6
 801ca34:	f000 f80c 	bl	801ca50 <__malloc_unlock>
 801ca38:	e794      	b.n	801c964 <_malloc_r+0x20>
 801ca3a:	6005      	str	r5, [r0, #0]
 801ca3c:	e7d6      	b.n	801c9ec <_malloc_r+0xa8>
 801ca3e:	bf00      	nop
 801ca40:	2000e764 	.word	0x2000e764

0801ca44 <__malloc_lock>:
 801ca44:	4801      	ldr	r0, [pc, #4]	@ (801ca4c <__malloc_lock+0x8>)
 801ca46:	f7ff bed2 	b.w	801c7ee <__retarget_lock_acquire_recursive>
 801ca4a:	bf00      	nop
 801ca4c:	2000e75c 	.word	0x2000e75c

0801ca50 <__malloc_unlock>:
 801ca50:	4801      	ldr	r0, [pc, #4]	@ (801ca58 <__malloc_unlock+0x8>)
 801ca52:	f7ff becd 	b.w	801c7f0 <__retarget_lock_release_recursive>
 801ca56:	bf00      	nop
 801ca58:	2000e75c 	.word	0x2000e75c

0801ca5c <__ssputs_r>:
 801ca5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ca60:	688e      	ldr	r6, [r1, #8]
 801ca62:	461f      	mov	r7, r3
 801ca64:	42be      	cmp	r6, r7
 801ca66:	680b      	ldr	r3, [r1, #0]
 801ca68:	4682      	mov	sl, r0
 801ca6a:	460c      	mov	r4, r1
 801ca6c:	4690      	mov	r8, r2
 801ca6e:	d82d      	bhi.n	801cacc <__ssputs_r+0x70>
 801ca70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ca74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801ca78:	d026      	beq.n	801cac8 <__ssputs_r+0x6c>
 801ca7a:	6965      	ldr	r5, [r4, #20]
 801ca7c:	6909      	ldr	r1, [r1, #16]
 801ca7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ca82:	eba3 0901 	sub.w	r9, r3, r1
 801ca86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ca8a:	1c7b      	adds	r3, r7, #1
 801ca8c:	444b      	add	r3, r9
 801ca8e:	106d      	asrs	r5, r5, #1
 801ca90:	429d      	cmp	r5, r3
 801ca92:	bf38      	it	cc
 801ca94:	461d      	movcc	r5, r3
 801ca96:	0553      	lsls	r3, r2, #21
 801ca98:	d527      	bpl.n	801caea <__ssputs_r+0x8e>
 801ca9a:	4629      	mov	r1, r5
 801ca9c:	f7ff ff52 	bl	801c944 <_malloc_r>
 801caa0:	4606      	mov	r6, r0
 801caa2:	b360      	cbz	r0, 801cafe <__ssputs_r+0xa2>
 801caa4:	6921      	ldr	r1, [r4, #16]
 801caa6:	464a      	mov	r2, r9
 801caa8:	f7ff feab 	bl	801c802 <memcpy>
 801caac:	89a3      	ldrh	r3, [r4, #12]
 801caae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801cab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cab6:	81a3      	strh	r3, [r4, #12]
 801cab8:	6126      	str	r6, [r4, #16]
 801caba:	6165      	str	r5, [r4, #20]
 801cabc:	444e      	add	r6, r9
 801cabe:	eba5 0509 	sub.w	r5, r5, r9
 801cac2:	6026      	str	r6, [r4, #0]
 801cac4:	60a5      	str	r5, [r4, #8]
 801cac6:	463e      	mov	r6, r7
 801cac8:	42be      	cmp	r6, r7
 801caca:	d900      	bls.n	801cace <__ssputs_r+0x72>
 801cacc:	463e      	mov	r6, r7
 801cace:	6820      	ldr	r0, [r4, #0]
 801cad0:	4632      	mov	r2, r6
 801cad2:	4641      	mov	r1, r8
 801cad4:	f7ff fd7d 	bl	801c5d2 <memmove>
 801cad8:	68a3      	ldr	r3, [r4, #8]
 801cada:	1b9b      	subs	r3, r3, r6
 801cadc:	60a3      	str	r3, [r4, #8]
 801cade:	6823      	ldr	r3, [r4, #0]
 801cae0:	4433      	add	r3, r6
 801cae2:	6023      	str	r3, [r4, #0]
 801cae4:	2000      	movs	r0, #0
 801cae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801caea:	462a      	mov	r2, r5
 801caec:	f000 fd45 	bl	801d57a <_realloc_r>
 801caf0:	4606      	mov	r6, r0
 801caf2:	2800      	cmp	r0, #0
 801caf4:	d1e0      	bne.n	801cab8 <__ssputs_r+0x5c>
 801caf6:	6921      	ldr	r1, [r4, #16]
 801caf8:	4650      	mov	r0, sl
 801cafa:	f7ff feaf 	bl	801c85c <_free_r>
 801cafe:	230c      	movs	r3, #12
 801cb00:	f8ca 3000 	str.w	r3, [sl]
 801cb04:	89a3      	ldrh	r3, [r4, #12]
 801cb06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cb0a:	81a3      	strh	r3, [r4, #12]
 801cb0c:	f04f 30ff 	mov.w	r0, #4294967295
 801cb10:	e7e9      	b.n	801cae6 <__ssputs_r+0x8a>
	...

0801cb14 <_svfiprintf_r>:
 801cb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb18:	4698      	mov	r8, r3
 801cb1a:	898b      	ldrh	r3, [r1, #12]
 801cb1c:	061b      	lsls	r3, r3, #24
 801cb1e:	b09d      	sub	sp, #116	@ 0x74
 801cb20:	4607      	mov	r7, r0
 801cb22:	460d      	mov	r5, r1
 801cb24:	4614      	mov	r4, r2
 801cb26:	d510      	bpl.n	801cb4a <_svfiprintf_r+0x36>
 801cb28:	690b      	ldr	r3, [r1, #16]
 801cb2a:	b973      	cbnz	r3, 801cb4a <_svfiprintf_r+0x36>
 801cb2c:	2140      	movs	r1, #64	@ 0x40
 801cb2e:	f7ff ff09 	bl	801c944 <_malloc_r>
 801cb32:	6028      	str	r0, [r5, #0]
 801cb34:	6128      	str	r0, [r5, #16]
 801cb36:	b930      	cbnz	r0, 801cb46 <_svfiprintf_r+0x32>
 801cb38:	230c      	movs	r3, #12
 801cb3a:	603b      	str	r3, [r7, #0]
 801cb3c:	f04f 30ff 	mov.w	r0, #4294967295
 801cb40:	b01d      	add	sp, #116	@ 0x74
 801cb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb46:	2340      	movs	r3, #64	@ 0x40
 801cb48:	616b      	str	r3, [r5, #20]
 801cb4a:	2300      	movs	r3, #0
 801cb4c:	9309      	str	r3, [sp, #36]	@ 0x24
 801cb4e:	2320      	movs	r3, #32
 801cb50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801cb54:	f8cd 800c 	str.w	r8, [sp, #12]
 801cb58:	2330      	movs	r3, #48	@ 0x30
 801cb5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801ccf8 <_svfiprintf_r+0x1e4>
 801cb5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801cb62:	f04f 0901 	mov.w	r9, #1
 801cb66:	4623      	mov	r3, r4
 801cb68:	469a      	mov	sl, r3
 801cb6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cb6e:	b10a      	cbz	r2, 801cb74 <_svfiprintf_r+0x60>
 801cb70:	2a25      	cmp	r2, #37	@ 0x25
 801cb72:	d1f9      	bne.n	801cb68 <_svfiprintf_r+0x54>
 801cb74:	ebba 0b04 	subs.w	fp, sl, r4
 801cb78:	d00b      	beq.n	801cb92 <_svfiprintf_r+0x7e>
 801cb7a:	465b      	mov	r3, fp
 801cb7c:	4622      	mov	r2, r4
 801cb7e:	4629      	mov	r1, r5
 801cb80:	4638      	mov	r0, r7
 801cb82:	f7ff ff6b 	bl	801ca5c <__ssputs_r>
 801cb86:	3001      	adds	r0, #1
 801cb88:	f000 80a7 	beq.w	801ccda <_svfiprintf_r+0x1c6>
 801cb8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cb8e:	445a      	add	r2, fp
 801cb90:	9209      	str	r2, [sp, #36]	@ 0x24
 801cb92:	f89a 3000 	ldrb.w	r3, [sl]
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	f000 809f 	beq.w	801ccda <_svfiprintf_r+0x1c6>
 801cb9c:	2300      	movs	r3, #0
 801cb9e:	f04f 32ff 	mov.w	r2, #4294967295
 801cba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cba6:	f10a 0a01 	add.w	sl, sl, #1
 801cbaa:	9304      	str	r3, [sp, #16]
 801cbac:	9307      	str	r3, [sp, #28]
 801cbae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801cbb2:	931a      	str	r3, [sp, #104]	@ 0x68
 801cbb4:	4654      	mov	r4, sl
 801cbb6:	2205      	movs	r2, #5
 801cbb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cbbc:	484e      	ldr	r0, [pc, #312]	@ (801ccf8 <_svfiprintf_r+0x1e4>)
 801cbbe:	f7e3 fb0f 	bl	80001e0 <memchr>
 801cbc2:	9a04      	ldr	r2, [sp, #16]
 801cbc4:	b9d8      	cbnz	r0, 801cbfe <_svfiprintf_r+0xea>
 801cbc6:	06d0      	lsls	r0, r2, #27
 801cbc8:	bf44      	itt	mi
 801cbca:	2320      	movmi	r3, #32
 801cbcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cbd0:	0711      	lsls	r1, r2, #28
 801cbd2:	bf44      	itt	mi
 801cbd4:	232b      	movmi	r3, #43	@ 0x2b
 801cbd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cbda:	f89a 3000 	ldrb.w	r3, [sl]
 801cbde:	2b2a      	cmp	r3, #42	@ 0x2a
 801cbe0:	d015      	beq.n	801cc0e <_svfiprintf_r+0xfa>
 801cbe2:	9a07      	ldr	r2, [sp, #28]
 801cbe4:	4654      	mov	r4, sl
 801cbe6:	2000      	movs	r0, #0
 801cbe8:	f04f 0c0a 	mov.w	ip, #10
 801cbec:	4621      	mov	r1, r4
 801cbee:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cbf2:	3b30      	subs	r3, #48	@ 0x30
 801cbf4:	2b09      	cmp	r3, #9
 801cbf6:	d94b      	bls.n	801cc90 <_svfiprintf_r+0x17c>
 801cbf8:	b1b0      	cbz	r0, 801cc28 <_svfiprintf_r+0x114>
 801cbfa:	9207      	str	r2, [sp, #28]
 801cbfc:	e014      	b.n	801cc28 <_svfiprintf_r+0x114>
 801cbfe:	eba0 0308 	sub.w	r3, r0, r8
 801cc02:	fa09 f303 	lsl.w	r3, r9, r3
 801cc06:	4313      	orrs	r3, r2
 801cc08:	9304      	str	r3, [sp, #16]
 801cc0a:	46a2      	mov	sl, r4
 801cc0c:	e7d2      	b.n	801cbb4 <_svfiprintf_r+0xa0>
 801cc0e:	9b03      	ldr	r3, [sp, #12]
 801cc10:	1d19      	adds	r1, r3, #4
 801cc12:	681b      	ldr	r3, [r3, #0]
 801cc14:	9103      	str	r1, [sp, #12]
 801cc16:	2b00      	cmp	r3, #0
 801cc18:	bfbb      	ittet	lt
 801cc1a:	425b      	neglt	r3, r3
 801cc1c:	f042 0202 	orrlt.w	r2, r2, #2
 801cc20:	9307      	strge	r3, [sp, #28]
 801cc22:	9307      	strlt	r3, [sp, #28]
 801cc24:	bfb8      	it	lt
 801cc26:	9204      	strlt	r2, [sp, #16]
 801cc28:	7823      	ldrb	r3, [r4, #0]
 801cc2a:	2b2e      	cmp	r3, #46	@ 0x2e
 801cc2c:	d10a      	bne.n	801cc44 <_svfiprintf_r+0x130>
 801cc2e:	7863      	ldrb	r3, [r4, #1]
 801cc30:	2b2a      	cmp	r3, #42	@ 0x2a
 801cc32:	d132      	bne.n	801cc9a <_svfiprintf_r+0x186>
 801cc34:	9b03      	ldr	r3, [sp, #12]
 801cc36:	1d1a      	adds	r2, r3, #4
 801cc38:	681b      	ldr	r3, [r3, #0]
 801cc3a:	9203      	str	r2, [sp, #12]
 801cc3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801cc40:	3402      	adds	r4, #2
 801cc42:	9305      	str	r3, [sp, #20]
 801cc44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801cd08 <_svfiprintf_r+0x1f4>
 801cc48:	7821      	ldrb	r1, [r4, #0]
 801cc4a:	2203      	movs	r2, #3
 801cc4c:	4650      	mov	r0, sl
 801cc4e:	f7e3 fac7 	bl	80001e0 <memchr>
 801cc52:	b138      	cbz	r0, 801cc64 <_svfiprintf_r+0x150>
 801cc54:	9b04      	ldr	r3, [sp, #16]
 801cc56:	eba0 000a 	sub.w	r0, r0, sl
 801cc5a:	2240      	movs	r2, #64	@ 0x40
 801cc5c:	4082      	lsls	r2, r0
 801cc5e:	4313      	orrs	r3, r2
 801cc60:	3401      	adds	r4, #1
 801cc62:	9304      	str	r3, [sp, #16]
 801cc64:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cc68:	4824      	ldr	r0, [pc, #144]	@ (801ccfc <_svfiprintf_r+0x1e8>)
 801cc6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801cc6e:	2206      	movs	r2, #6
 801cc70:	f7e3 fab6 	bl	80001e0 <memchr>
 801cc74:	2800      	cmp	r0, #0
 801cc76:	d036      	beq.n	801cce6 <_svfiprintf_r+0x1d2>
 801cc78:	4b21      	ldr	r3, [pc, #132]	@ (801cd00 <_svfiprintf_r+0x1ec>)
 801cc7a:	bb1b      	cbnz	r3, 801ccc4 <_svfiprintf_r+0x1b0>
 801cc7c:	9b03      	ldr	r3, [sp, #12]
 801cc7e:	3307      	adds	r3, #7
 801cc80:	f023 0307 	bic.w	r3, r3, #7
 801cc84:	3308      	adds	r3, #8
 801cc86:	9303      	str	r3, [sp, #12]
 801cc88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc8a:	4433      	add	r3, r6
 801cc8c:	9309      	str	r3, [sp, #36]	@ 0x24
 801cc8e:	e76a      	b.n	801cb66 <_svfiprintf_r+0x52>
 801cc90:	fb0c 3202 	mla	r2, ip, r2, r3
 801cc94:	460c      	mov	r4, r1
 801cc96:	2001      	movs	r0, #1
 801cc98:	e7a8      	b.n	801cbec <_svfiprintf_r+0xd8>
 801cc9a:	2300      	movs	r3, #0
 801cc9c:	3401      	adds	r4, #1
 801cc9e:	9305      	str	r3, [sp, #20]
 801cca0:	4619      	mov	r1, r3
 801cca2:	f04f 0c0a 	mov.w	ip, #10
 801cca6:	4620      	mov	r0, r4
 801cca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ccac:	3a30      	subs	r2, #48	@ 0x30
 801ccae:	2a09      	cmp	r2, #9
 801ccb0:	d903      	bls.n	801ccba <_svfiprintf_r+0x1a6>
 801ccb2:	2b00      	cmp	r3, #0
 801ccb4:	d0c6      	beq.n	801cc44 <_svfiprintf_r+0x130>
 801ccb6:	9105      	str	r1, [sp, #20]
 801ccb8:	e7c4      	b.n	801cc44 <_svfiprintf_r+0x130>
 801ccba:	fb0c 2101 	mla	r1, ip, r1, r2
 801ccbe:	4604      	mov	r4, r0
 801ccc0:	2301      	movs	r3, #1
 801ccc2:	e7f0      	b.n	801cca6 <_svfiprintf_r+0x192>
 801ccc4:	ab03      	add	r3, sp, #12
 801ccc6:	9300      	str	r3, [sp, #0]
 801ccc8:	462a      	mov	r2, r5
 801ccca:	4b0e      	ldr	r3, [pc, #56]	@ (801cd04 <_svfiprintf_r+0x1f0>)
 801cccc:	a904      	add	r1, sp, #16
 801ccce:	4638      	mov	r0, r7
 801ccd0:	f3af 8000 	nop.w
 801ccd4:	1c42      	adds	r2, r0, #1
 801ccd6:	4606      	mov	r6, r0
 801ccd8:	d1d6      	bne.n	801cc88 <_svfiprintf_r+0x174>
 801ccda:	89ab      	ldrh	r3, [r5, #12]
 801ccdc:	065b      	lsls	r3, r3, #25
 801ccde:	f53f af2d 	bmi.w	801cb3c <_svfiprintf_r+0x28>
 801cce2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cce4:	e72c      	b.n	801cb40 <_svfiprintf_r+0x2c>
 801cce6:	ab03      	add	r3, sp, #12
 801cce8:	9300      	str	r3, [sp, #0]
 801ccea:	462a      	mov	r2, r5
 801ccec:	4b05      	ldr	r3, [pc, #20]	@ (801cd04 <_svfiprintf_r+0x1f0>)
 801ccee:	a904      	add	r1, sp, #16
 801ccf0:	4638      	mov	r0, r7
 801ccf2:	f000 f9bb 	bl	801d06c <_printf_i>
 801ccf6:	e7ed      	b.n	801ccd4 <_svfiprintf_r+0x1c0>
 801ccf8:	08021ecf 	.word	0x08021ecf
 801ccfc:	08021ed9 	.word	0x08021ed9
 801cd00:	00000000 	.word	0x00000000
 801cd04:	0801ca5d 	.word	0x0801ca5d
 801cd08:	08021ed5 	.word	0x08021ed5

0801cd0c <__sfputc_r>:
 801cd0c:	6893      	ldr	r3, [r2, #8]
 801cd0e:	3b01      	subs	r3, #1
 801cd10:	2b00      	cmp	r3, #0
 801cd12:	b410      	push	{r4}
 801cd14:	6093      	str	r3, [r2, #8]
 801cd16:	da08      	bge.n	801cd2a <__sfputc_r+0x1e>
 801cd18:	6994      	ldr	r4, [r2, #24]
 801cd1a:	42a3      	cmp	r3, r4
 801cd1c:	db01      	blt.n	801cd22 <__sfputc_r+0x16>
 801cd1e:	290a      	cmp	r1, #10
 801cd20:	d103      	bne.n	801cd2a <__sfputc_r+0x1e>
 801cd22:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cd26:	f000 bb7d 	b.w	801d424 <__swbuf_r>
 801cd2a:	6813      	ldr	r3, [r2, #0]
 801cd2c:	1c58      	adds	r0, r3, #1
 801cd2e:	6010      	str	r0, [r2, #0]
 801cd30:	7019      	strb	r1, [r3, #0]
 801cd32:	4608      	mov	r0, r1
 801cd34:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cd38:	4770      	bx	lr

0801cd3a <__sfputs_r>:
 801cd3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd3c:	4606      	mov	r6, r0
 801cd3e:	460f      	mov	r7, r1
 801cd40:	4614      	mov	r4, r2
 801cd42:	18d5      	adds	r5, r2, r3
 801cd44:	42ac      	cmp	r4, r5
 801cd46:	d101      	bne.n	801cd4c <__sfputs_r+0x12>
 801cd48:	2000      	movs	r0, #0
 801cd4a:	e007      	b.n	801cd5c <__sfputs_r+0x22>
 801cd4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cd50:	463a      	mov	r2, r7
 801cd52:	4630      	mov	r0, r6
 801cd54:	f7ff ffda 	bl	801cd0c <__sfputc_r>
 801cd58:	1c43      	adds	r3, r0, #1
 801cd5a:	d1f3      	bne.n	801cd44 <__sfputs_r+0xa>
 801cd5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cd60 <_vfiprintf_r>:
 801cd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd64:	460d      	mov	r5, r1
 801cd66:	b09d      	sub	sp, #116	@ 0x74
 801cd68:	4614      	mov	r4, r2
 801cd6a:	4698      	mov	r8, r3
 801cd6c:	4606      	mov	r6, r0
 801cd6e:	b118      	cbz	r0, 801cd78 <_vfiprintf_r+0x18>
 801cd70:	6a03      	ldr	r3, [r0, #32]
 801cd72:	b90b      	cbnz	r3, 801cd78 <_vfiprintf_r+0x18>
 801cd74:	f7ff fb5c 	bl	801c430 <__sinit>
 801cd78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cd7a:	07d9      	lsls	r1, r3, #31
 801cd7c:	d405      	bmi.n	801cd8a <_vfiprintf_r+0x2a>
 801cd7e:	89ab      	ldrh	r3, [r5, #12]
 801cd80:	059a      	lsls	r2, r3, #22
 801cd82:	d402      	bmi.n	801cd8a <_vfiprintf_r+0x2a>
 801cd84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cd86:	f7ff fd32 	bl	801c7ee <__retarget_lock_acquire_recursive>
 801cd8a:	89ab      	ldrh	r3, [r5, #12]
 801cd8c:	071b      	lsls	r3, r3, #28
 801cd8e:	d501      	bpl.n	801cd94 <_vfiprintf_r+0x34>
 801cd90:	692b      	ldr	r3, [r5, #16]
 801cd92:	b99b      	cbnz	r3, 801cdbc <_vfiprintf_r+0x5c>
 801cd94:	4629      	mov	r1, r5
 801cd96:	4630      	mov	r0, r6
 801cd98:	f000 fb82 	bl	801d4a0 <__swsetup_r>
 801cd9c:	b170      	cbz	r0, 801cdbc <_vfiprintf_r+0x5c>
 801cd9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cda0:	07dc      	lsls	r4, r3, #31
 801cda2:	d504      	bpl.n	801cdae <_vfiprintf_r+0x4e>
 801cda4:	f04f 30ff 	mov.w	r0, #4294967295
 801cda8:	b01d      	add	sp, #116	@ 0x74
 801cdaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdae:	89ab      	ldrh	r3, [r5, #12]
 801cdb0:	0598      	lsls	r0, r3, #22
 801cdb2:	d4f7      	bmi.n	801cda4 <_vfiprintf_r+0x44>
 801cdb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cdb6:	f7ff fd1b 	bl	801c7f0 <__retarget_lock_release_recursive>
 801cdba:	e7f3      	b.n	801cda4 <_vfiprintf_r+0x44>
 801cdbc:	2300      	movs	r3, #0
 801cdbe:	9309      	str	r3, [sp, #36]	@ 0x24
 801cdc0:	2320      	movs	r3, #32
 801cdc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801cdc6:	f8cd 800c 	str.w	r8, [sp, #12]
 801cdca:	2330      	movs	r3, #48	@ 0x30
 801cdcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801cf7c <_vfiprintf_r+0x21c>
 801cdd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801cdd4:	f04f 0901 	mov.w	r9, #1
 801cdd8:	4623      	mov	r3, r4
 801cdda:	469a      	mov	sl, r3
 801cddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cde0:	b10a      	cbz	r2, 801cde6 <_vfiprintf_r+0x86>
 801cde2:	2a25      	cmp	r2, #37	@ 0x25
 801cde4:	d1f9      	bne.n	801cdda <_vfiprintf_r+0x7a>
 801cde6:	ebba 0b04 	subs.w	fp, sl, r4
 801cdea:	d00b      	beq.n	801ce04 <_vfiprintf_r+0xa4>
 801cdec:	465b      	mov	r3, fp
 801cdee:	4622      	mov	r2, r4
 801cdf0:	4629      	mov	r1, r5
 801cdf2:	4630      	mov	r0, r6
 801cdf4:	f7ff ffa1 	bl	801cd3a <__sfputs_r>
 801cdf8:	3001      	adds	r0, #1
 801cdfa:	f000 80a7 	beq.w	801cf4c <_vfiprintf_r+0x1ec>
 801cdfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ce00:	445a      	add	r2, fp
 801ce02:	9209      	str	r2, [sp, #36]	@ 0x24
 801ce04:	f89a 3000 	ldrb.w	r3, [sl]
 801ce08:	2b00      	cmp	r3, #0
 801ce0a:	f000 809f 	beq.w	801cf4c <_vfiprintf_r+0x1ec>
 801ce0e:	2300      	movs	r3, #0
 801ce10:	f04f 32ff 	mov.w	r2, #4294967295
 801ce14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ce18:	f10a 0a01 	add.w	sl, sl, #1
 801ce1c:	9304      	str	r3, [sp, #16]
 801ce1e:	9307      	str	r3, [sp, #28]
 801ce20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ce24:	931a      	str	r3, [sp, #104]	@ 0x68
 801ce26:	4654      	mov	r4, sl
 801ce28:	2205      	movs	r2, #5
 801ce2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ce2e:	4853      	ldr	r0, [pc, #332]	@ (801cf7c <_vfiprintf_r+0x21c>)
 801ce30:	f7e3 f9d6 	bl	80001e0 <memchr>
 801ce34:	9a04      	ldr	r2, [sp, #16]
 801ce36:	b9d8      	cbnz	r0, 801ce70 <_vfiprintf_r+0x110>
 801ce38:	06d1      	lsls	r1, r2, #27
 801ce3a:	bf44      	itt	mi
 801ce3c:	2320      	movmi	r3, #32
 801ce3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ce42:	0713      	lsls	r3, r2, #28
 801ce44:	bf44      	itt	mi
 801ce46:	232b      	movmi	r3, #43	@ 0x2b
 801ce48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ce4c:	f89a 3000 	ldrb.w	r3, [sl]
 801ce50:	2b2a      	cmp	r3, #42	@ 0x2a
 801ce52:	d015      	beq.n	801ce80 <_vfiprintf_r+0x120>
 801ce54:	9a07      	ldr	r2, [sp, #28]
 801ce56:	4654      	mov	r4, sl
 801ce58:	2000      	movs	r0, #0
 801ce5a:	f04f 0c0a 	mov.w	ip, #10
 801ce5e:	4621      	mov	r1, r4
 801ce60:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ce64:	3b30      	subs	r3, #48	@ 0x30
 801ce66:	2b09      	cmp	r3, #9
 801ce68:	d94b      	bls.n	801cf02 <_vfiprintf_r+0x1a2>
 801ce6a:	b1b0      	cbz	r0, 801ce9a <_vfiprintf_r+0x13a>
 801ce6c:	9207      	str	r2, [sp, #28]
 801ce6e:	e014      	b.n	801ce9a <_vfiprintf_r+0x13a>
 801ce70:	eba0 0308 	sub.w	r3, r0, r8
 801ce74:	fa09 f303 	lsl.w	r3, r9, r3
 801ce78:	4313      	orrs	r3, r2
 801ce7a:	9304      	str	r3, [sp, #16]
 801ce7c:	46a2      	mov	sl, r4
 801ce7e:	e7d2      	b.n	801ce26 <_vfiprintf_r+0xc6>
 801ce80:	9b03      	ldr	r3, [sp, #12]
 801ce82:	1d19      	adds	r1, r3, #4
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	9103      	str	r1, [sp, #12]
 801ce88:	2b00      	cmp	r3, #0
 801ce8a:	bfbb      	ittet	lt
 801ce8c:	425b      	neglt	r3, r3
 801ce8e:	f042 0202 	orrlt.w	r2, r2, #2
 801ce92:	9307      	strge	r3, [sp, #28]
 801ce94:	9307      	strlt	r3, [sp, #28]
 801ce96:	bfb8      	it	lt
 801ce98:	9204      	strlt	r2, [sp, #16]
 801ce9a:	7823      	ldrb	r3, [r4, #0]
 801ce9c:	2b2e      	cmp	r3, #46	@ 0x2e
 801ce9e:	d10a      	bne.n	801ceb6 <_vfiprintf_r+0x156>
 801cea0:	7863      	ldrb	r3, [r4, #1]
 801cea2:	2b2a      	cmp	r3, #42	@ 0x2a
 801cea4:	d132      	bne.n	801cf0c <_vfiprintf_r+0x1ac>
 801cea6:	9b03      	ldr	r3, [sp, #12]
 801cea8:	1d1a      	adds	r2, r3, #4
 801ceaa:	681b      	ldr	r3, [r3, #0]
 801ceac:	9203      	str	r2, [sp, #12]
 801ceae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ceb2:	3402      	adds	r4, #2
 801ceb4:	9305      	str	r3, [sp, #20]
 801ceb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801cf8c <_vfiprintf_r+0x22c>
 801ceba:	7821      	ldrb	r1, [r4, #0]
 801cebc:	2203      	movs	r2, #3
 801cebe:	4650      	mov	r0, sl
 801cec0:	f7e3 f98e 	bl	80001e0 <memchr>
 801cec4:	b138      	cbz	r0, 801ced6 <_vfiprintf_r+0x176>
 801cec6:	9b04      	ldr	r3, [sp, #16]
 801cec8:	eba0 000a 	sub.w	r0, r0, sl
 801cecc:	2240      	movs	r2, #64	@ 0x40
 801cece:	4082      	lsls	r2, r0
 801ced0:	4313      	orrs	r3, r2
 801ced2:	3401      	adds	r4, #1
 801ced4:	9304      	str	r3, [sp, #16]
 801ced6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ceda:	4829      	ldr	r0, [pc, #164]	@ (801cf80 <_vfiprintf_r+0x220>)
 801cedc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801cee0:	2206      	movs	r2, #6
 801cee2:	f7e3 f97d 	bl	80001e0 <memchr>
 801cee6:	2800      	cmp	r0, #0
 801cee8:	d03f      	beq.n	801cf6a <_vfiprintf_r+0x20a>
 801ceea:	4b26      	ldr	r3, [pc, #152]	@ (801cf84 <_vfiprintf_r+0x224>)
 801ceec:	bb1b      	cbnz	r3, 801cf36 <_vfiprintf_r+0x1d6>
 801ceee:	9b03      	ldr	r3, [sp, #12]
 801cef0:	3307      	adds	r3, #7
 801cef2:	f023 0307 	bic.w	r3, r3, #7
 801cef6:	3308      	adds	r3, #8
 801cef8:	9303      	str	r3, [sp, #12]
 801cefa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cefc:	443b      	add	r3, r7
 801cefe:	9309      	str	r3, [sp, #36]	@ 0x24
 801cf00:	e76a      	b.n	801cdd8 <_vfiprintf_r+0x78>
 801cf02:	fb0c 3202 	mla	r2, ip, r2, r3
 801cf06:	460c      	mov	r4, r1
 801cf08:	2001      	movs	r0, #1
 801cf0a:	e7a8      	b.n	801ce5e <_vfiprintf_r+0xfe>
 801cf0c:	2300      	movs	r3, #0
 801cf0e:	3401      	adds	r4, #1
 801cf10:	9305      	str	r3, [sp, #20]
 801cf12:	4619      	mov	r1, r3
 801cf14:	f04f 0c0a 	mov.w	ip, #10
 801cf18:	4620      	mov	r0, r4
 801cf1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cf1e:	3a30      	subs	r2, #48	@ 0x30
 801cf20:	2a09      	cmp	r2, #9
 801cf22:	d903      	bls.n	801cf2c <_vfiprintf_r+0x1cc>
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	d0c6      	beq.n	801ceb6 <_vfiprintf_r+0x156>
 801cf28:	9105      	str	r1, [sp, #20]
 801cf2a:	e7c4      	b.n	801ceb6 <_vfiprintf_r+0x156>
 801cf2c:	fb0c 2101 	mla	r1, ip, r1, r2
 801cf30:	4604      	mov	r4, r0
 801cf32:	2301      	movs	r3, #1
 801cf34:	e7f0      	b.n	801cf18 <_vfiprintf_r+0x1b8>
 801cf36:	ab03      	add	r3, sp, #12
 801cf38:	9300      	str	r3, [sp, #0]
 801cf3a:	462a      	mov	r2, r5
 801cf3c:	4b12      	ldr	r3, [pc, #72]	@ (801cf88 <_vfiprintf_r+0x228>)
 801cf3e:	a904      	add	r1, sp, #16
 801cf40:	4630      	mov	r0, r6
 801cf42:	f3af 8000 	nop.w
 801cf46:	4607      	mov	r7, r0
 801cf48:	1c78      	adds	r0, r7, #1
 801cf4a:	d1d6      	bne.n	801cefa <_vfiprintf_r+0x19a>
 801cf4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cf4e:	07d9      	lsls	r1, r3, #31
 801cf50:	d405      	bmi.n	801cf5e <_vfiprintf_r+0x1fe>
 801cf52:	89ab      	ldrh	r3, [r5, #12]
 801cf54:	059a      	lsls	r2, r3, #22
 801cf56:	d402      	bmi.n	801cf5e <_vfiprintf_r+0x1fe>
 801cf58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cf5a:	f7ff fc49 	bl	801c7f0 <__retarget_lock_release_recursive>
 801cf5e:	89ab      	ldrh	r3, [r5, #12]
 801cf60:	065b      	lsls	r3, r3, #25
 801cf62:	f53f af1f 	bmi.w	801cda4 <_vfiprintf_r+0x44>
 801cf66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cf68:	e71e      	b.n	801cda8 <_vfiprintf_r+0x48>
 801cf6a:	ab03      	add	r3, sp, #12
 801cf6c:	9300      	str	r3, [sp, #0]
 801cf6e:	462a      	mov	r2, r5
 801cf70:	4b05      	ldr	r3, [pc, #20]	@ (801cf88 <_vfiprintf_r+0x228>)
 801cf72:	a904      	add	r1, sp, #16
 801cf74:	4630      	mov	r0, r6
 801cf76:	f000 f879 	bl	801d06c <_printf_i>
 801cf7a:	e7e4      	b.n	801cf46 <_vfiprintf_r+0x1e6>
 801cf7c:	08021ecf 	.word	0x08021ecf
 801cf80:	08021ed9 	.word	0x08021ed9
 801cf84:	00000000 	.word	0x00000000
 801cf88:	0801cd3b 	.word	0x0801cd3b
 801cf8c:	08021ed5 	.word	0x08021ed5

0801cf90 <_printf_common>:
 801cf90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf94:	4616      	mov	r6, r2
 801cf96:	4698      	mov	r8, r3
 801cf98:	688a      	ldr	r2, [r1, #8]
 801cf9a:	690b      	ldr	r3, [r1, #16]
 801cf9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801cfa0:	4293      	cmp	r3, r2
 801cfa2:	bfb8      	it	lt
 801cfa4:	4613      	movlt	r3, r2
 801cfa6:	6033      	str	r3, [r6, #0]
 801cfa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801cfac:	4607      	mov	r7, r0
 801cfae:	460c      	mov	r4, r1
 801cfb0:	b10a      	cbz	r2, 801cfb6 <_printf_common+0x26>
 801cfb2:	3301      	adds	r3, #1
 801cfb4:	6033      	str	r3, [r6, #0]
 801cfb6:	6823      	ldr	r3, [r4, #0]
 801cfb8:	0699      	lsls	r1, r3, #26
 801cfba:	bf42      	ittt	mi
 801cfbc:	6833      	ldrmi	r3, [r6, #0]
 801cfbe:	3302      	addmi	r3, #2
 801cfc0:	6033      	strmi	r3, [r6, #0]
 801cfc2:	6825      	ldr	r5, [r4, #0]
 801cfc4:	f015 0506 	ands.w	r5, r5, #6
 801cfc8:	d106      	bne.n	801cfd8 <_printf_common+0x48>
 801cfca:	f104 0a19 	add.w	sl, r4, #25
 801cfce:	68e3      	ldr	r3, [r4, #12]
 801cfd0:	6832      	ldr	r2, [r6, #0]
 801cfd2:	1a9b      	subs	r3, r3, r2
 801cfd4:	42ab      	cmp	r3, r5
 801cfd6:	dc26      	bgt.n	801d026 <_printf_common+0x96>
 801cfd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801cfdc:	6822      	ldr	r2, [r4, #0]
 801cfde:	3b00      	subs	r3, #0
 801cfe0:	bf18      	it	ne
 801cfe2:	2301      	movne	r3, #1
 801cfe4:	0692      	lsls	r2, r2, #26
 801cfe6:	d42b      	bmi.n	801d040 <_printf_common+0xb0>
 801cfe8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801cfec:	4641      	mov	r1, r8
 801cfee:	4638      	mov	r0, r7
 801cff0:	47c8      	blx	r9
 801cff2:	3001      	adds	r0, #1
 801cff4:	d01e      	beq.n	801d034 <_printf_common+0xa4>
 801cff6:	6823      	ldr	r3, [r4, #0]
 801cff8:	6922      	ldr	r2, [r4, #16]
 801cffa:	f003 0306 	and.w	r3, r3, #6
 801cffe:	2b04      	cmp	r3, #4
 801d000:	bf02      	ittt	eq
 801d002:	68e5      	ldreq	r5, [r4, #12]
 801d004:	6833      	ldreq	r3, [r6, #0]
 801d006:	1aed      	subeq	r5, r5, r3
 801d008:	68a3      	ldr	r3, [r4, #8]
 801d00a:	bf0c      	ite	eq
 801d00c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d010:	2500      	movne	r5, #0
 801d012:	4293      	cmp	r3, r2
 801d014:	bfc4      	itt	gt
 801d016:	1a9b      	subgt	r3, r3, r2
 801d018:	18ed      	addgt	r5, r5, r3
 801d01a:	2600      	movs	r6, #0
 801d01c:	341a      	adds	r4, #26
 801d01e:	42b5      	cmp	r5, r6
 801d020:	d11a      	bne.n	801d058 <_printf_common+0xc8>
 801d022:	2000      	movs	r0, #0
 801d024:	e008      	b.n	801d038 <_printf_common+0xa8>
 801d026:	2301      	movs	r3, #1
 801d028:	4652      	mov	r2, sl
 801d02a:	4641      	mov	r1, r8
 801d02c:	4638      	mov	r0, r7
 801d02e:	47c8      	blx	r9
 801d030:	3001      	adds	r0, #1
 801d032:	d103      	bne.n	801d03c <_printf_common+0xac>
 801d034:	f04f 30ff 	mov.w	r0, #4294967295
 801d038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d03c:	3501      	adds	r5, #1
 801d03e:	e7c6      	b.n	801cfce <_printf_common+0x3e>
 801d040:	18e1      	adds	r1, r4, r3
 801d042:	1c5a      	adds	r2, r3, #1
 801d044:	2030      	movs	r0, #48	@ 0x30
 801d046:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d04a:	4422      	add	r2, r4
 801d04c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d050:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d054:	3302      	adds	r3, #2
 801d056:	e7c7      	b.n	801cfe8 <_printf_common+0x58>
 801d058:	2301      	movs	r3, #1
 801d05a:	4622      	mov	r2, r4
 801d05c:	4641      	mov	r1, r8
 801d05e:	4638      	mov	r0, r7
 801d060:	47c8      	blx	r9
 801d062:	3001      	adds	r0, #1
 801d064:	d0e6      	beq.n	801d034 <_printf_common+0xa4>
 801d066:	3601      	adds	r6, #1
 801d068:	e7d9      	b.n	801d01e <_printf_common+0x8e>
	...

0801d06c <_printf_i>:
 801d06c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d070:	7e0f      	ldrb	r7, [r1, #24]
 801d072:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d074:	2f78      	cmp	r7, #120	@ 0x78
 801d076:	4691      	mov	r9, r2
 801d078:	4680      	mov	r8, r0
 801d07a:	460c      	mov	r4, r1
 801d07c:	469a      	mov	sl, r3
 801d07e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d082:	d807      	bhi.n	801d094 <_printf_i+0x28>
 801d084:	2f62      	cmp	r7, #98	@ 0x62
 801d086:	d80a      	bhi.n	801d09e <_printf_i+0x32>
 801d088:	2f00      	cmp	r7, #0
 801d08a:	f000 80d1 	beq.w	801d230 <_printf_i+0x1c4>
 801d08e:	2f58      	cmp	r7, #88	@ 0x58
 801d090:	f000 80b8 	beq.w	801d204 <_printf_i+0x198>
 801d094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d098:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d09c:	e03a      	b.n	801d114 <_printf_i+0xa8>
 801d09e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d0a2:	2b15      	cmp	r3, #21
 801d0a4:	d8f6      	bhi.n	801d094 <_printf_i+0x28>
 801d0a6:	a101      	add	r1, pc, #4	@ (adr r1, 801d0ac <_printf_i+0x40>)
 801d0a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d0ac:	0801d105 	.word	0x0801d105
 801d0b0:	0801d119 	.word	0x0801d119
 801d0b4:	0801d095 	.word	0x0801d095
 801d0b8:	0801d095 	.word	0x0801d095
 801d0bc:	0801d095 	.word	0x0801d095
 801d0c0:	0801d095 	.word	0x0801d095
 801d0c4:	0801d119 	.word	0x0801d119
 801d0c8:	0801d095 	.word	0x0801d095
 801d0cc:	0801d095 	.word	0x0801d095
 801d0d0:	0801d095 	.word	0x0801d095
 801d0d4:	0801d095 	.word	0x0801d095
 801d0d8:	0801d217 	.word	0x0801d217
 801d0dc:	0801d143 	.word	0x0801d143
 801d0e0:	0801d1d1 	.word	0x0801d1d1
 801d0e4:	0801d095 	.word	0x0801d095
 801d0e8:	0801d095 	.word	0x0801d095
 801d0ec:	0801d239 	.word	0x0801d239
 801d0f0:	0801d095 	.word	0x0801d095
 801d0f4:	0801d143 	.word	0x0801d143
 801d0f8:	0801d095 	.word	0x0801d095
 801d0fc:	0801d095 	.word	0x0801d095
 801d100:	0801d1d9 	.word	0x0801d1d9
 801d104:	6833      	ldr	r3, [r6, #0]
 801d106:	1d1a      	adds	r2, r3, #4
 801d108:	681b      	ldr	r3, [r3, #0]
 801d10a:	6032      	str	r2, [r6, #0]
 801d10c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d110:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d114:	2301      	movs	r3, #1
 801d116:	e09c      	b.n	801d252 <_printf_i+0x1e6>
 801d118:	6833      	ldr	r3, [r6, #0]
 801d11a:	6820      	ldr	r0, [r4, #0]
 801d11c:	1d19      	adds	r1, r3, #4
 801d11e:	6031      	str	r1, [r6, #0]
 801d120:	0606      	lsls	r6, r0, #24
 801d122:	d501      	bpl.n	801d128 <_printf_i+0xbc>
 801d124:	681d      	ldr	r5, [r3, #0]
 801d126:	e003      	b.n	801d130 <_printf_i+0xc4>
 801d128:	0645      	lsls	r5, r0, #25
 801d12a:	d5fb      	bpl.n	801d124 <_printf_i+0xb8>
 801d12c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d130:	2d00      	cmp	r5, #0
 801d132:	da03      	bge.n	801d13c <_printf_i+0xd0>
 801d134:	232d      	movs	r3, #45	@ 0x2d
 801d136:	426d      	negs	r5, r5
 801d138:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d13c:	4858      	ldr	r0, [pc, #352]	@ (801d2a0 <_printf_i+0x234>)
 801d13e:	230a      	movs	r3, #10
 801d140:	e011      	b.n	801d166 <_printf_i+0xfa>
 801d142:	6821      	ldr	r1, [r4, #0]
 801d144:	6833      	ldr	r3, [r6, #0]
 801d146:	0608      	lsls	r0, r1, #24
 801d148:	f853 5b04 	ldr.w	r5, [r3], #4
 801d14c:	d402      	bmi.n	801d154 <_printf_i+0xe8>
 801d14e:	0649      	lsls	r1, r1, #25
 801d150:	bf48      	it	mi
 801d152:	b2ad      	uxthmi	r5, r5
 801d154:	2f6f      	cmp	r7, #111	@ 0x6f
 801d156:	4852      	ldr	r0, [pc, #328]	@ (801d2a0 <_printf_i+0x234>)
 801d158:	6033      	str	r3, [r6, #0]
 801d15a:	bf14      	ite	ne
 801d15c:	230a      	movne	r3, #10
 801d15e:	2308      	moveq	r3, #8
 801d160:	2100      	movs	r1, #0
 801d162:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d166:	6866      	ldr	r6, [r4, #4]
 801d168:	60a6      	str	r6, [r4, #8]
 801d16a:	2e00      	cmp	r6, #0
 801d16c:	db05      	blt.n	801d17a <_printf_i+0x10e>
 801d16e:	6821      	ldr	r1, [r4, #0]
 801d170:	432e      	orrs	r6, r5
 801d172:	f021 0104 	bic.w	r1, r1, #4
 801d176:	6021      	str	r1, [r4, #0]
 801d178:	d04b      	beq.n	801d212 <_printf_i+0x1a6>
 801d17a:	4616      	mov	r6, r2
 801d17c:	fbb5 f1f3 	udiv	r1, r5, r3
 801d180:	fb03 5711 	mls	r7, r3, r1, r5
 801d184:	5dc7      	ldrb	r7, [r0, r7]
 801d186:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d18a:	462f      	mov	r7, r5
 801d18c:	42bb      	cmp	r3, r7
 801d18e:	460d      	mov	r5, r1
 801d190:	d9f4      	bls.n	801d17c <_printf_i+0x110>
 801d192:	2b08      	cmp	r3, #8
 801d194:	d10b      	bne.n	801d1ae <_printf_i+0x142>
 801d196:	6823      	ldr	r3, [r4, #0]
 801d198:	07df      	lsls	r7, r3, #31
 801d19a:	d508      	bpl.n	801d1ae <_printf_i+0x142>
 801d19c:	6923      	ldr	r3, [r4, #16]
 801d19e:	6861      	ldr	r1, [r4, #4]
 801d1a0:	4299      	cmp	r1, r3
 801d1a2:	bfde      	ittt	le
 801d1a4:	2330      	movle	r3, #48	@ 0x30
 801d1a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d1aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d1ae:	1b92      	subs	r2, r2, r6
 801d1b0:	6122      	str	r2, [r4, #16]
 801d1b2:	f8cd a000 	str.w	sl, [sp]
 801d1b6:	464b      	mov	r3, r9
 801d1b8:	aa03      	add	r2, sp, #12
 801d1ba:	4621      	mov	r1, r4
 801d1bc:	4640      	mov	r0, r8
 801d1be:	f7ff fee7 	bl	801cf90 <_printf_common>
 801d1c2:	3001      	adds	r0, #1
 801d1c4:	d14a      	bne.n	801d25c <_printf_i+0x1f0>
 801d1c6:	f04f 30ff 	mov.w	r0, #4294967295
 801d1ca:	b004      	add	sp, #16
 801d1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d1d0:	6823      	ldr	r3, [r4, #0]
 801d1d2:	f043 0320 	orr.w	r3, r3, #32
 801d1d6:	6023      	str	r3, [r4, #0]
 801d1d8:	4832      	ldr	r0, [pc, #200]	@ (801d2a4 <_printf_i+0x238>)
 801d1da:	2778      	movs	r7, #120	@ 0x78
 801d1dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d1e0:	6823      	ldr	r3, [r4, #0]
 801d1e2:	6831      	ldr	r1, [r6, #0]
 801d1e4:	061f      	lsls	r7, r3, #24
 801d1e6:	f851 5b04 	ldr.w	r5, [r1], #4
 801d1ea:	d402      	bmi.n	801d1f2 <_printf_i+0x186>
 801d1ec:	065f      	lsls	r7, r3, #25
 801d1ee:	bf48      	it	mi
 801d1f0:	b2ad      	uxthmi	r5, r5
 801d1f2:	6031      	str	r1, [r6, #0]
 801d1f4:	07d9      	lsls	r1, r3, #31
 801d1f6:	bf44      	itt	mi
 801d1f8:	f043 0320 	orrmi.w	r3, r3, #32
 801d1fc:	6023      	strmi	r3, [r4, #0]
 801d1fe:	b11d      	cbz	r5, 801d208 <_printf_i+0x19c>
 801d200:	2310      	movs	r3, #16
 801d202:	e7ad      	b.n	801d160 <_printf_i+0xf4>
 801d204:	4826      	ldr	r0, [pc, #152]	@ (801d2a0 <_printf_i+0x234>)
 801d206:	e7e9      	b.n	801d1dc <_printf_i+0x170>
 801d208:	6823      	ldr	r3, [r4, #0]
 801d20a:	f023 0320 	bic.w	r3, r3, #32
 801d20e:	6023      	str	r3, [r4, #0]
 801d210:	e7f6      	b.n	801d200 <_printf_i+0x194>
 801d212:	4616      	mov	r6, r2
 801d214:	e7bd      	b.n	801d192 <_printf_i+0x126>
 801d216:	6833      	ldr	r3, [r6, #0]
 801d218:	6825      	ldr	r5, [r4, #0]
 801d21a:	6961      	ldr	r1, [r4, #20]
 801d21c:	1d18      	adds	r0, r3, #4
 801d21e:	6030      	str	r0, [r6, #0]
 801d220:	062e      	lsls	r6, r5, #24
 801d222:	681b      	ldr	r3, [r3, #0]
 801d224:	d501      	bpl.n	801d22a <_printf_i+0x1be>
 801d226:	6019      	str	r1, [r3, #0]
 801d228:	e002      	b.n	801d230 <_printf_i+0x1c4>
 801d22a:	0668      	lsls	r0, r5, #25
 801d22c:	d5fb      	bpl.n	801d226 <_printf_i+0x1ba>
 801d22e:	8019      	strh	r1, [r3, #0]
 801d230:	2300      	movs	r3, #0
 801d232:	6123      	str	r3, [r4, #16]
 801d234:	4616      	mov	r6, r2
 801d236:	e7bc      	b.n	801d1b2 <_printf_i+0x146>
 801d238:	6833      	ldr	r3, [r6, #0]
 801d23a:	1d1a      	adds	r2, r3, #4
 801d23c:	6032      	str	r2, [r6, #0]
 801d23e:	681e      	ldr	r6, [r3, #0]
 801d240:	6862      	ldr	r2, [r4, #4]
 801d242:	2100      	movs	r1, #0
 801d244:	4630      	mov	r0, r6
 801d246:	f7e2 ffcb 	bl	80001e0 <memchr>
 801d24a:	b108      	cbz	r0, 801d250 <_printf_i+0x1e4>
 801d24c:	1b80      	subs	r0, r0, r6
 801d24e:	6060      	str	r0, [r4, #4]
 801d250:	6863      	ldr	r3, [r4, #4]
 801d252:	6123      	str	r3, [r4, #16]
 801d254:	2300      	movs	r3, #0
 801d256:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d25a:	e7aa      	b.n	801d1b2 <_printf_i+0x146>
 801d25c:	6923      	ldr	r3, [r4, #16]
 801d25e:	4632      	mov	r2, r6
 801d260:	4649      	mov	r1, r9
 801d262:	4640      	mov	r0, r8
 801d264:	47d0      	blx	sl
 801d266:	3001      	adds	r0, #1
 801d268:	d0ad      	beq.n	801d1c6 <_printf_i+0x15a>
 801d26a:	6823      	ldr	r3, [r4, #0]
 801d26c:	079b      	lsls	r3, r3, #30
 801d26e:	d413      	bmi.n	801d298 <_printf_i+0x22c>
 801d270:	68e0      	ldr	r0, [r4, #12]
 801d272:	9b03      	ldr	r3, [sp, #12]
 801d274:	4298      	cmp	r0, r3
 801d276:	bfb8      	it	lt
 801d278:	4618      	movlt	r0, r3
 801d27a:	e7a6      	b.n	801d1ca <_printf_i+0x15e>
 801d27c:	2301      	movs	r3, #1
 801d27e:	4632      	mov	r2, r6
 801d280:	4649      	mov	r1, r9
 801d282:	4640      	mov	r0, r8
 801d284:	47d0      	blx	sl
 801d286:	3001      	adds	r0, #1
 801d288:	d09d      	beq.n	801d1c6 <_printf_i+0x15a>
 801d28a:	3501      	adds	r5, #1
 801d28c:	68e3      	ldr	r3, [r4, #12]
 801d28e:	9903      	ldr	r1, [sp, #12]
 801d290:	1a5b      	subs	r3, r3, r1
 801d292:	42ab      	cmp	r3, r5
 801d294:	dcf2      	bgt.n	801d27c <_printf_i+0x210>
 801d296:	e7eb      	b.n	801d270 <_printf_i+0x204>
 801d298:	2500      	movs	r5, #0
 801d29a:	f104 0619 	add.w	r6, r4, #25
 801d29e:	e7f5      	b.n	801d28c <_printf_i+0x220>
 801d2a0:	08021ee0 	.word	0x08021ee0
 801d2a4:	08021ef1 	.word	0x08021ef1

0801d2a8 <__sflush_r>:
 801d2a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2b0:	0716      	lsls	r6, r2, #28
 801d2b2:	4605      	mov	r5, r0
 801d2b4:	460c      	mov	r4, r1
 801d2b6:	d454      	bmi.n	801d362 <__sflush_r+0xba>
 801d2b8:	684b      	ldr	r3, [r1, #4]
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	dc02      	bgt.n	801d2c4 <__sflush_r+0x1c>
 801d2be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d2c0:	2b00      	cmp	r3, #0
 801d2c2:	dd48      	ble.n	801d356 <__sflush_r+0xae>
 801d2c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d2c6:	2e00      	cmp	r6, #0
 801d2c8:	d045      	beq.n	801d356 <__sflush_r+0xae>
 801d2ca:	2300      	movs	r3, #0
 801d2cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d2d0:	682f      	ldr	r7, [r5, #0]
 801d2d2:	6a21      	ldr	r1, [r4, #32]
 801d2d4:	602b      	str	r3, [r5, #0]
 801d2d6:	d030      	beq.n	801d33a <__sflush_r+0x92>
 801d2d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d2da:	89a3      	ldrh	r3, [r4, #12]
 801d2dc:	0759      	lsls	r1, r3, #29
 801d2de:	d505      	bpl.n	801d2ec <__sflush_r+0x44>
 801d2e0:	6863      	ldr	r3, [r4, #4]
 801d2e2:	1ad2      	subs	r2, r2, r3
 801d2e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d2e6:	b10b      	cbz	r3, 801d2ec <__sflush_r+0x44>
 801d2e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d2ea:	1ad2      	subs	r2, r2, r3
 801d2ec:	2300      	movs	r3, #0
 801d2ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d2f0:	6a21      	ldr	r1, [r4, #32]
 801d2f2:	4628      	mov	r0, r5
 801d2f4:	47b0      	blx	r6
 801d2f6:	1c43      	adds	r3, r0, #1
 801d2f8:	89a3      	ldrh	r3, [r4, #12]
 801d2fa:	d106      	bne.n	801d30a <__sflush_r+0x62>
 801d2fc:	6829      	ldr	r1, [r5, #0]
 801d2fe:	291d      	cmp	r1, #29
 801d300:	d82b      	bhi.n	801d35a <__sflush_r+0xb2>
 801d302:	4a2a      	ldr	r2, [pc, #168]	@ (801d3ac <__sflush_r+0x104>)
 801d304:	40ca      	lsrs	r2, r1
 801d306:	07d6      	lsls	r6, r2, #31
 801d308:	d527      	bpl.n	801d35a <__sflush_r+0xb2>
 801d30a:	2200      	movs	r2, #0
 801d30c:	6062      	str	r2, [r4, #4]
 801d30e:	04d9      	lsls	r1, r3, #19
 801d310:	6922      	ldr	r2, [r4, #16]
 801d312:	6022      	str	r2, [r4, #0]
 801d314:	d504      	bpl.n	801d320 <__sflush_r+0x78>
 801d316:	1c42      	adds	r2, r0, #1
 801d318:	d101      	bne.n	801d31e <__sflush_r+0x76>
 801d31a:	682b      	ldr	r3, [r5, #0]
 801d31c:	b903      	cbnz	r3, 801d320 <__sflush_r+0x78>
 801d31e:	6560      	str	r0, [r4, #84]	@ 0x54
 801d320:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d322:	602f      	str	r7, [r5, #0]
 801d324:	b1b9      	cbz	r1, 801d356 <__sflush_r+0xae>
 801d326:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d32a:	4299      	cmp	r1, r3
 801d32c:	d002      	beq.n	801d334 <__sflush_r+0x8c>
 801d32e:	4628      	mov	r0, r5
 801d330:	f7ff fa94 	bl	801c85c <_free_r>
 801d334:	2300      	movs	r3, #0
 801d336:	6363      	str	r3, [r4, #52]	@ 0x34
 801d338:	e00d      	b.n	801d356 <__sflush_r+0xae>
 801d33a:	2301      	movs	r3, #1
 801d33c:	4628      	mov	r0, r5
 801d33e:	47b0      	blx	r6
 801d340:	4602      	mov	r2, r0
 801d342:	1c50      	adds	r0, r2, #1
 801d344:	d1c9      	bne.n	801d2da <__sflush_r+0x32>
 801d346:	682b      	ldr	r3, [r5, #0]
 801d348:	2b00      	cmp	r3, #0
 801d34a:	d0c6      	beq.n	801d2da <__sflush_r+0x32>
 801d34c:	2b1d      	cmp	r3, #29
 801d34e:	d001      	beq.n	801d354 <__sflush_r+0xac>
 801d350:	2b16      	cmp	r3, #22
 801d352:	d11e      	bne.n	801d392 <__sflush_r+0xea>
 801d354:	602f      	str	r7, [r5, #0]
 801d356:	2000      	movs	r0, #0
 801d358:	e022      	b.n	801d3a0 <__sflush_r+0xf8>
 801d35a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d35e:	b21b      	sxth	r3, r3
 801d360:	e01b      	b.n	801d39a <__sflush_r+0xf2>
 801d362:	690f      	ldr	r7, [r1, #16]
 801d364:	2f00      	cmp	r7, #0
 801d366:	d0f6      	beq.n	801d356 <__sflush_r+0xae>
 801d368:	0793      	lsls	r3, r2, #30
 801d36a:	680e      	ldr	r6, [r1, #0]
 801d36c:	bf08      	it	eq
 801d36e:	694b      	ldreq	r3, [r1, #20]
 801d370:	600f      	str	r7, [r1, #0]
 801d372:	bf18      	it	ne
 801d374:	2300      	movne	r3, #0
 801d376:	eba6 0807 	sub.w	r8, r6, r7
 801d37a:	608b      	str	r3, [r1, #8]
 801d37c:	f1b8 0f00 	cmp.w	r8, #0
 801d380:	dde9      	ble.n	801d356 <__sflush_r+0xae>
 801d382:	6a21      	ldr	r1, [r4, #32]
 801d384:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d386:	4643      	mov	r3, r8
 801d388:	463a      	mov	r2, r7
 801d38a:	4628      	mov	r0, r5
 801d38c:	47b0      	blx	r6
 801d38e:	2800      	cmp	r0, #0
 801d390:	dc08      	bgt.n	801d3a4 <__sflush_r+0xfc>
 801d392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d39a:	81a3      	strh	r3, [r4, #12]
 801d39c:	f04f 30ff 	mov.w	r0, #4294967295
 801d3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d3a4:	4407      	add	r7, r0
 801d3a6:	eba8 0800 	sub.w	r8, r8, r0
 801d3aa:	e7e7      	b.n	801d37c <__sflush_r+0xd4>
 801d3ac:	20400001 	.word	0x20400001

0801d3b0 <_fflush_r>:
 801d3b0:	b538      	push	{r3, r4, r5, lr}
 801d3b2:	690b      	ldr	r3, [r1, #16]
 801d3b4:	4605      	mov	r5, r0
 801d3b6:	460c      	mov	r4, r1
 801d3b8:	b913      	cbnz	r3, 801d3c0 <_fflush_r+0x10>
 801d3ba:	2500      	movs	r5, #0
 801d3bc:	4628      	mov	r0, r5
 801d3be:	bd38      	pop	{r3, r4, r5, pc}
 801d3c0:	b118      	cbz	r0, 801d3ca <_fflush_r+0x1a>
 801d3c2:	6a03      	ldr	r3, [r0, #32]
 801d3c4:	b90b      	cbnz	r3, 801d3ca <_fflush_r+0x1a>
 801d3c6:	f7ff f833 	bl	801c430 <__sinit>
 801d3ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d3ce:	2b00      	cmp	r3, #0
 801d3d0:	d0f3      	beq.n	801d3ba <_fflush_r+0xa>
 801d3d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d3d4:	07d0      	lsls	r0, r2, #31
 801d3d6:	d404      	bmi.n	801d3e2 <_fflush_r+0x32>
 801d3d8:	0599      	lsls	r1, r3, #22
 801d3da:	d402      	bmi.n	801d3e2 <_fflush_r+0x32>
 801d3dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d3de:	f7ff fa06 	bl	801c7ee <__retarget_lock_acquire_recursive>
 801d3e2:	4628      	mov	r0, r5
 801d3e4:	4621      	mov	r1, r4
 801d3e6:	f7ff ff5f 	bl	801d2a8 <__sflush_r>
 801d3ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d3ec:	07da      	lsls	r2, r3, #31
 801d3ee:	4605      	mov	r5, r0
 801d3f0:	d4e4      	bmi.n	801d3bc <_fflush_r+0xc>
 801d3f2:	89a3      	ldrh	r3, [r4, #12]
 801d3f4:	059b      	lsls	r3, r3, #22
 801d3f6:	d4e1      	bmi.n	801d3bc <_fflush_r+0xc>
 801d3f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d3fa:	f7ff f9f9 	bl	801c7f0 <__retarget_lock_release_recursive>
 801d3fe:	e7dd      	b.n	801d3bc <_fflush_r+0xc>

0801d400 <fiprintf>:
 801d400:	b40e      	push	{r1, r2, r3}
 801d402:	b503      	push	{r0, r1, lr}
 801d404:	4601      	mov	r1, r0
 801d406:	ab03      	add	r3, sp, #12
 801d408:	4805      	ldr	r0, [pc, #20]	@ (801d420 <fiprintf+0x20>)
 801d40a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d40e:	6800      	ldr	r0, [r0, #0]
 801d410:	9301      	str	r3, [sp, #4]
 801d412:	f7ff fca5 	bl	801cd60 <_vfiprintf_r>
 801d416:	b002      	add	sp, #8
 801d418:	f85d eb04 	ldr.w	lr, [sp], #4
 801d41c:	b003      	add	sp, #12
 801d41e:	4770      	bx	lr
 801d420:	20000118 	.word	0x20000118

0801d424 <__swbuf_r>:
 801d424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d426:	460e      	mov	r6, r1
 801d428:	4614      	mov	r4, r2
 801d42a:	4605      	mov	r5, r0
 801d42c:	b118      	cbz	r0, 801d436 <__swbuf_r+0x12>
 801d42e:	6a03      	ldr	r3, [r0, #32]
 801d430:	b90b      	cbnz	r3, 801d436 <__swbuf_r+0x12>
 801d432:	f7fe fffd 	bl	801c430 <__sinit>
 801d436:	69a3      	ldr	r3, [r4, #24]
 801d438:	60a3      	str	r3, [r4, #8]
 801d43a:	89a3      	ldrh	r3, [r4, #12]
 801d43c:	071a      	lsls	r2, r3, #28
 801d43e:	d501      	bpl.n	801d444 <__swbuf_r+0x20>
 801d440:	6923      	ldr	r3, [r4, #16]
 801d442:	b943      	cbnz	r3, 801d456 <__swbuf_r+0x32>
 801d444:	4621      	mov	r1, r4
 801d446:	4628      	mov	r0, r5
 801d448:	f000 f82a 	bl	801d4a0 <__swsetup_r>
 801d44c:	b118      	cbz	r0, 801d456 <__swbuf_r+0x32>
 801d44e:	f04f 37ff 	mov.w	r7, #4294967295
 801d452:	4638      	mov	r0, r7
 801d454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d456:	6823      	ldr	r3, [r4, #0]
 801d458:	6922      	ldr	r2, [r4, #16]
 801d45a:	1a98      	subs	r0, r3, r2
 801d45c:	6963      	ldr	r3, [r4, #20]
 801d45e:	b2f6      	uxtb	r6, r6
 801d460:	4283      	cmp	r3, r0
 801d462:	4637      	mov	r7, r6
 801d464:	dc05      	bgt.n	801d472 <__swbuf_r+0x4e>
 801d466:	4621      	mov	r1, r4
 801d468:	4628      	mov	r0, r5
 801d46a:	f7ff ffa1 	bl	801d3b0 <_fflush_r>
 801d46e:	2800      	cmp	r0, #0
 801d470:	d1ed      	bne.n	801d44e <__swbuf_r+0x2a>
 801d472:	68a3      	ldr	r3, [r4, #8]
 801d474:	3b01      	subs	r3, #1
 801d476:	60a3      	str	r3, [r4, #8]
 801d478:	6823      	ldr	r3, [r4, #0]
 801d47a:	1c5a      	adds	r2, r3, #1
 801d47c:	6022      	str	r2, [r4, #0]
 801d47e:	701e      	strb	r6, [r3, #0]
 801d480:	6962      	ldr	r2, [r4, #20]
 801d482:	1c43      	adds	r3, r0, #1
 801d484:	429a      	cmp	r2, r3
 801d486:	d004      	beq.n	801d492 <__swbuf_r+0x6e>
 801d488:	89a3      	ldrh	r3, [r4, #12]
 801d48a:	07db      	lsls	r3, r3, #31
 801d48c:	d5e1      	bpl.n	801d452 <__swbuf_r+0x2e>
 801d48e:	2e0a      	cmp	r6, #10
 801d490:	d1df      	bne.n	801d452 <__swbuf_r+0x2e>
 801d492:	4621      	mov	r1, r4
 801d494:	4628      	mov	r0, r5
 801d496:	f7ff ff8b 	bl	801d3b0 <_fflush_r>
 801d49a:	2800      	cmp	r0, #0
 801d49c:	d0d9      	beq.n	801d452 <__swbuf_r+0x2e>
 801d49e:	e7d6      	b.n	801d44e <__swbuf_r+0x2a>

0801d4a0 <__swsetup_r>:
 801d4a0:	b538      	push	{r3, r4, r5, lr}
 801d4a2:	4b29      	ldr	r3, [pc, #164]	@ (801d548 <__swsetup_r+0xa8>)
 801d4a4:	4605      	mov	r5, r0
 801d4a6:	6818      	ldr	r0, [r3, #0]
 801d4a8:	460c      	mov	r4, r1
 801d4aa:	b118      	cbz	r0, 801d4b4 <__swsetup_r+0x14>
 801d4ac:	6a03      	ldr	r3, [r0, #32]
 801d4ae:	b90b      	cbnz	r3, 801d4b4 <__swsetup_r+0x14>
 801d4b0:	f7fe ffbe 	bl	801c430 <__sinit>
 801d4b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d4b8:	0719      	lsls	r1, r3, #28
 801d4ba:	d422      	bmi.n	801d502 <__swsetup_r+0x62>
 801d4bc:	06da      	lsls	r2, r3, #27
 801d4be:	d407      	bmi.n	801d4d0 <__swsetup_r+0x30>
 801d4c0:	2209      	movs	r2, #9
 801d4c2:	602a      	str	r2, [r5, #0]
 801d4c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d4c8:	81a3      	strh	r3, [r4, #12]
 801d4ca:	f04f 30ff 	mov.w	r0, #4294967295
 801d4ce:	e033      	b.n	801d538 <__swsetup_r+0x98>
 801d4d0:	0758      	lsls	r0, r3, #29
 801d4d2:	d512      	bpl.n	801d4fa <__swsetup_r+0x5a>
 801d4d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d4d6:	b141      	cbz	r1, 801d4ea <__swsetup_r+0x4a>
 801d4d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d4dc:	4299      	cmp	r1, r3
 801d4de:	d002      	beq.n	801d4e6 <__swsetup_r+0x46>
 801d4e0:	4628      	mov	r0, r5
 801d4e2:	f7ff f9bb 	bl	801c85c <_free_r>
 801d4e6:	2300      	movs	r3, #0
 801d4e8:	6363      	str	r3, [r4, #52]	@ 0x34
 801d4ea:	89a3      	ldrh	r3, [r4, #12]
 801d4ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d4f0:	81a3      	strh	r3, [r4, #12]
 801d4f2:	2300      	movs	r3, #0
 801d4f4:	6063      	str	r3, [r4, #4]
 801d4f6:	6923      	ldr	r3, [r4, #16]
 801d4f8:	6023      	str	r3, [r4, #0]
 801d4fa:	89a3      	ldrh	r3, [r4, #12]
 801d4fc:	f043 0308 	orr.w	r3, r3, #8
 801d500:	81a3      	strh	r3, [r4, #12]
 801d502:	6923      	ldr	r3, [r4, #16]
 801d504:	b94b      	cbnz	r3, 801d51a <__swsetup_r+0x7a>
 801d506:	89a3      	ldrh	r3, [r4, #12]
 801d508:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d50c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d510:	d003      	beq.n	801d51a <__swsetup_r+0x7a>
 801d512:	4621      	mov	r1, r4
 801d514:	4628      	mov	r0, r5
 801d516:	f000 f884 	bl	801d622 <__smakebuf_r>
 801d51a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d51e:	f013 0201 	ands.w	r2, r3, #1
 801d522:	d00a      	beq.n	801d53a <__swsetup_r+0x9a>
 801d524:	2200      	movs	r2, #0
 801d526:	60a2      	str	r2, [r4, #8]
 801d528:	6962      	ldr	r2, [r4, #20]
 801d52a:	4252      	negs	r2, r2
 801d52c:	61a2      	str	r2, [r4, #24]
 801d52e:	6922      	ldr	r2, [r4, #16]
 801d530:	b942      	cbnz	r2, 801d544 <__swsetup_r+0xa4>
 801d532:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d536:	d1c5      	bne.n	801d4c4 <__swsetup_r+0x24>
 801d538:	bd38      	pop	{r3, r4, r5, pc}
 801d53a:	0799      	lsls	r1, r3, #30
 801d53c:	bf58      	it	pl
 801d53e:	6962      	ldrpl	r2, [r4, #20]
 801d540:	60a2      	str	r2, [r4, #8]
 801d542:	e7f4      	b.n	801d52e <__swsetup_r+0x8e>
 801d544:	2000      	movs	r0, #0
 801d546:	e7f7      	b.n	801d538 <__swsetup_r+0x98>
 801d548:	20000118 	.word	0x20000118

0801d54c <_sbrk_r>:
 801d54c:	b538      	push	{r3, r4, r5, lr}
 801d54e:	4d06      	ldr	r5, [pc, #24]	@ (801d568 <_sbrk_r+0x1c>)
 801d550:	2300      	movs	r3, #0
 801d552:	4604      	mov	r4, r0
 801d554:	4608      	mov	r0, r1
 801d556:	602b      	str	r3, [r5, #0]
 801d558:	f7e6 fb54 	bl	8003c04 <_sbrk>
 801d55c:	1c43      	adds	r3, r0, #1
 801d55e:	d102      	bne.n	801d566 <_sbrk_r+0x1a>
 801d560:	682b      	ldr	r3, [r5, #0]
 801d562:	b103      	cbz	r3, 801d566 <_sbrk_r+0x1a>
 801d564:	6023      	str	r3, [r4, #0]
 801d566:	bd38      	pop	{r3, r4, r5, pc}
 801d568:	2000e758 	.word	0x2000e758

0801d56c <abort>:
 801d56c:	b508      	push	{r3, lr}
 801d56e:	2006      	movs	r0, #6
 801d570:	f000 f8bc 	bl	801d6ec <raise>
 801d574:	2001      	movs	r0, #1
 801d576:	f7e6 facd 	bl	8003b14 <_exit>

0801d57a <_realloc_r>:
 801d57a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d57e:	4607      	mov	r7, r0
 801d580:	4614      	mov	r4, r2
 801d582:	460d      	mov	r5, r1
 801d584:	b921      	cbnz	r1, 801d590 <_realloc_r+0x16>
 801d586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d58a:	4611      	mov	r1, r2
 801d58c:	f7ff b9da 	b.w	801c944 <_malloc_r>
 801d590:	b92a      	cbnz	r2, 801d59e <_realloc_r+0x24>
 801d592:	f7ff f963 	bl	801c85c <_free_r>
 801d596:	4625      	mov	r5, r4
 801d598:	4628      	mov	r0, r5
 801d59a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d59e:	f000 f8e3 	bl	801d768 <_malloc_usable_size_r>
 801d5a2:	4284      	cmp	r4, r0
 801d5a4:	4606      	mov	r6, r0
 801d5a6:	d802      	bhi.n	801d5ae <_realloc_r+0x34>
 801d5a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d5ac:	d8f4      	bhi.n	801d598 <_realloc_r+0x1e>
 801d5ae:	4621      	mov	r1, r4
 801d5b0:	4638      	mov	r0, r7
 801d5b2:	f7ff f9c7 	bl	801c944 <_malloc_r>
 801d5b6:	4680      	mov	r8, r0
 801d5b8:	b908      	cbnz	r0, 801d5be <_realloc_r+0x44>
 801d5ba:	4645      	mov	r5, r8
 801d5bc:	e7ec      	b.n	801d598 <_realloc_r+0x1e>
 801d5be:	42b4      	cmp	r4, r6
 801d5c0:	4622      	mov	r2, r4
 801d5c2:	4629      	mov	r1, r5
 801d5c4:	bf28      	it	cs
 801d5c6:	4632      	movcs	r2, r6
 801d5c8:	f7ff f91b 	bl	801c802 <memcpy>
 801d5cc:	4629      	mov	r1, r5
 801d5ce:	4638      	mov	r0, r7
 801d5d0:	f7ff f944 	bl	801c85c <_free_r>
 801d5d4:	e7f1      	b.n	801d5ba <_realloc_r+0x40>

0801d5d6 <__swhatbuf_r>:
 801d5d6:	b570      	push	{r4, r5, r6, lr}
 801d5d8:	460c      	mov	r4, r1
 801d5da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d5de:	2900      	cmp	r1, #0
 801d5e0:	b096      	sub	sp, #88	@ 0x58
 801d5e2:	4615      	mov	r5, r2
 801d5e4:	461e      	mov	r6, r3
 801d5e6:	da0d      	bge.n	801d604 <__swhatbuf_r+0x2e>
 801d5e8:	89a3      	ldrh	r3, [r4, #12]
 801d5ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d5ee:	f04f 0100 	mov.w	r1, #0
 801d5f2:	bf14      	ite	ne
 801d5f4:	2340      	movne	r3, #64	@ 0x40
 801d5f6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d5fa:	2000      	movs	r0, #0
 801d5fc:	6031      	str	r1, [r6, #0]
 801d5fe:	602b      	str	r3, [r5, #0]
 801d600:	b016      	add	sp, #88	@ 0x58
 801d602:	bd70      	pop	{r4, r5, r6, pc}
 801d604:	466a      	mov	r2, sp
 801d606:	f000 f879 	bl	801d6fc <_fstat_r>
 801d60a:	2800      	cmp	r0, #0
 801d60c:	dbec      	blt.n	801d5e8 <__swhatbuf_r+0x12>
 801d60e:	9901      	ldr	r1, [sp, #4]
 801d610:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d614:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d618:	4259      	negs	r1, r3
 801d61a:	4159      	adcs	r1, r3
 801d61c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d620:	e7eb      	b.n	801d5fa <__swhatbuf_r+0x24>

0801d622 <__smakebuf_r>:
 801d622:	898b      	ldrh	r3, [r1, #12]
 801d624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d626:	079d      	lsls	r5, r3, #30
 801d628:	4606      	mov	r6, r0
 801d62a:	460c      	mov	r4, r1
 801d62c:	d507      	bpl.n	801d63e <__smakebuf_r+0x1c>
 801d62e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d632:	6023      	str	r3, [r4, #0]
 801d634:	6123      	str	r3, [r4, #16]
 801d636:	2301      	movs	r3, #1
 801d638:	6163      	str	r3, [r4, #20]
 801d63a:	b003      	add	sp, #12
 801d63c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d63e:	ab01      	add	r3, sp, #4
 801d640:	466a      	mov	r2, sp
 801d642:	f7ff ffc8 	bl	801d5d6 <__swhatbuf_r>
 801d646:	9f00      	ldr	r7, [sp, #0]
 801d648:	4605      	mov	r5, r0
 801d64a:	4639      	mov	r1, r7
 801d64c:	4630      	mov	r0, r6
 801d64e:	f7ff f979 	bl	801c944 <_malloc_r>
 801d652:	b948      	cbnz	r0, 801d668 <__smakebuf_r+0x46>
 801d654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d658:	059a      	lsls	r2, r3, #22
 801d65a:	d4ee      	bmi.n	801d63a <__smakebuf_r+0x18>
 801d65c:	f023 0303 	bic.w	r3, r3, #3
 801d660:	f043 0302 	orr.w	r3, r3, #2
 801d664:	81a3      	strh	r3, [r4, #12]
 801d666:	e7e2      	b.n	801d62e <__smakebuf_r+0xc>
 801d668:	89a3      	ldrh	r3, [r4, #12]
 801d66a:	6020      	str	r0, [r4, #0]
 801d66c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d670:	81a3      	strh	r3, [r4, #12]
 801d672:	9b01      	ldr	r3, [sp, #4]
 801d674:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d678:	b15b      	cbz	r3, 801d692 <__smakebuf_r+0x70>
 801d67a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d67e:	4630      	mov	r0, r6
 801d680:	f000 f84e 	bl	801d720 <_isatty_r>
 801d684:	b128      	cbz	r0, 801d692 <__smakebuf_r+0x70>
 801d686:	89a3      	ldrh	r3, [r4, #12]
 801d688:	f023 0303 	bic.w	r3, r3, #3
 801d68c:	f043 0301 	orr.w	r3, r3, #1
 801d690:	81a3      	strh	r3, [r4, #12]
 801d692:	89a3      	ldrh	r3, [r4, #12]
 801d694:	431d      	orrs	r5, r3
 801d696:	81a5      	strh	r5, [r4, #12]
 801d698:	e7cf      	b.n	801d63a <__smakebuf_r+0x18>

0801d69a <_raise_r>:
 801d69a:	291f      	cmp	r1, #31
 801d69c:	b538      	push	{r3, r4, r5, lr}
 801d69e:	4605      	mov	r5, r0
 801d6a0:	460c      	mov	r4, r1
 801d6a2:	d904      	bls.n	801d6ae <_raise_r+0x14>
 801d6a4:	2316      	movs	r3, #22
 801d6a6:	6003      	str	r3, [r0, #0]
 801d6a8:	f04f 30ff 	mov.w	r0, #4294967295
 801d6ac:	bd38      	pop	{r3, r4, r5, pc}
 801d6ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801d6b0:	b112      	cbz	r2, 801d6b8 <_raise_r+0x1e>
 801d6b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d6b6:	b94b      	cbnz	r3, 801d6cc <_raise_r+0x32>
 801d6b8:	4628      	mov	r0, r5
 801d6ba:	f000 f853 	bl	801d764 <_getpid_r>
 801d6be:	4622      	mov	r2, r4
 801d6c0:	4601      	mov	r1, r0
 801d6c2:	4628      	mov	r0, r5
 801d6c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d6c8:	f000 b83a 	b.w	801d740 <_kill_r>
 801d6cc:	2b01      	cmp	r3, #1
 801d6ce:	d00a      	beq.n	801d6e6 <_raise_r+0x4c>
 801d6d0:	1c59      	adds	r1, r3, #1
 801d6d2:	d103      	bne.n	801d6dc <_raise_r+0x42>
 801d6d4:	2316      	movs	r3, #22
 801d6d6:	6003      	str	r3, [r0, #0]
 801d6d8:	2001      	movs	r0, #1
 801d6da:	e7e7      	b.n	801d6ac <_raise_r+0x12>
 801d6dc:	2100      	movs	r1, #0
 801d6de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801d6e2:	4620      	mov	r0, r4
 801d6e4:	4798      	blx	r3
 801d6e6:	2000      	movs	r0, #0
 801d6e8:	e7e0      	b.n	801d6ac <_raise_r+0x12>
	...

0801d6ec <raise>:
 801d6ec:	4b02      	ldr	r3, [pc, #8]	@ (801d6f8 <raise+0xc>)
 801d6ee:	4601      	mov	r1, r0
 801d6f0:	6818      	ldr	r0, [r3, #0]
 801d6f2:	f7ff bfd2 	b.w	801d69a <_raise_r>
 801d6f6:	bf00      	nop
 801d6f8:	20000118 	.word	0x20000118

0801d6fc <_fstat_r>:
 801d6fc:	b538      	push	{r3, r4, r5, lr}
 801d6fe:	4d07      	ldr	r5, [pc, #28]	@ (801d71c <_fstat_r+0x20>)
 801d700:	2300      	movs	r3, #0
 801d702:	4604      	mov	r4, r0
 801d704:	4608      	mov	r0, r1
 801d706:	4611      	mov	r1, r2
 801d708:	602b      	str	r3, [r5, #0]
 801d70a:	f7e6 fa53 	bl	8003bb4 <_fstat>
 801d70e:	1c43      	adds	r3, r0, #1
 801d710:	d102      	bne.n	801d718 <_fstat_r+0x1c>
 801d712:	682b      	ldr	r3, [r5, #0]
 801d714:	b103      	cbz	r3, 801d718 <_fstat_r+0x1c>
 801d716:	6023      	str	r3, [r4, #0]
 801d718:	bd38      	pop	{r3, r4, r5, pc}
 801d71a:	bf00      	nop
 801d71c:	2000e758 	.word	0x2000e758

0801d720 <_isatty_r>:
 801d720:	b538      	push	{r3, r4, r5, lr}
 801d722:	4d06      	ldr	r5, [pc, #24]	@ (801d73c <_isatty_r+0x1c>)
 801d724:	2300      	movs	r3, #0
 801d726:	4604      	mov	r4, r0
 801d728:	4608      	mov	r0, r1
 801d72a:	602b      	str	r3, [r5, #0]
 801d72c:	f7e6 fa52 	bl	8003bd4 <_isatty>
 801d730:	1c43      	adds	r3, r0, #1
 801d732:	d102      	bne.n	801d73a <_isatty_r+0x1a>
 801d734:	682b      	ldr	r3, [r5, #0]
 801d736:	b103      	cbz	r3, 801d73a <_isatty_r+0x1a>
 801d738:	6023      	str	r3, [r4, #0]
 801d73a:	bd38      	pop	{r3, r4, r5, pc}
 801d73c:	2000e758 	.word	0x2000e758

0801d740 <_kill_r>:
 801d740:	b538      	push	{r3, r4, r5, lr}
 801d742:	4d07      	ldr	r5, [pc, #28]	@ (801d760 <_kill_r+0x20>)
 801d744:	2300      	movs	r3, #0
 801d746:	4604      	mov	r4, r0
 801d748:	4608      	mov	r0, r1
 801d74a:	4611      	mov	r1, r2
 801d74c:	602b      	str	r3, [r5, #0]
 801d74e:	f7e6 f9cf 	bl	8003af0 <_kill>
 801d752:	1c43      	adds	r3, r0, #1
 801d754:	d102      	bne.n	801d75c <_kill_r+0x1c>
 801d756:	682b      	ldr	r3, [r5, #0]
 801d758:	b103      	cbz	r3, 801d75c <_kill_r+0x1c>
 801d75a:	6023      	str	r3, [r4, #0]
 801d75c:	bd38      	pop	{r3, r4, r5, pc}
 801d75e:	bf00      	nop
 801d760:	2000e758 	.word	0x2000e758

0801d764 <_getpid_r>:
 801d764:	f7e6 b9bc 	b.w	8003ae0 <_getpid>

0801d768 <_malloc_usable_size_r>:
 801d768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d76c:	1f18      	subs	r0, r3, #4
 801d76e:	2b00      	cmp	r3, #0
 801d770:	bfbc      	itt	lt
 801d772:	580b      	ldrlt	r3, [r1, r0]
 801d774:	18c0      	addlt	r0, r0, r3
 801d776:	4770      	bx	lr

0801d778 <_init>:
 801d778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d77a:	bf00      	nop
 801d77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d77e:	bc08      	pop	{r3}
 801d780:	469e      	mov	lr, r3
 801d782:	4770      	bx	lr

0801d784 <_fini>:
 801d784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d786:	bf00      	nop
 801d788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d78a:	bc08      	pop	{r3}
 801d78c:	469e      	mov	lr, r3
 801d78e:	4770      	bx	lr

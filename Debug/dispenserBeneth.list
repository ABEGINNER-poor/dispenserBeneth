
dispenserBeneth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a8ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004998  0801aa7c  0801aa7c  0001ba7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f414  0801f414  0002117c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801f414  0801f414  00020414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f41c  0801f41c  0002117c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f41c  0801f41c  0002041c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f420  0801f420  00020420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  0801f424  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002117c  2**0
                  CONTENTS
 10 .bss          00010890  2000017c  2000017c  0002117c  2**2
                  ALLOC
 11 .eth_desc     00000014  20010a0c  20010a0c  0002117c  2**0
                  ALLOC
 12 .eth_buf      00000000  20010a20  20010a20  0002117c  2**0
                  CONTENTS
 13 ._user_heap_stack 00000600  20010a20  20010a20  0002117c  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  0002117c  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003dc38  00000000  00000000  000211ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000099c3  00000000  00000000  0005ede4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002ab0  00000000  00000000  000687a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000216d  00000000  00000000  0006b258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001504d  00000000  00000000  0006d3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000420dd  00000000  00000000  00082412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f746f  00000000  00000000  000c44ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001bb95e  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000bbc4  00000000  00000000  001bb9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006b  00000000  00000000  001c7568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000017c 	.word	0x2000017c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801aa64 	.word	0x0801aa64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000180 	.word	0x20000180
 80001cc:	0801aa64 	.word	0x0801aa64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000198 	.word	0x20000198
 80005dc:	20000238 	.word	0x20000238

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f001 fa73 	bl	8001ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f825 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 f917 	bl	8000820 <MX_GPIO_Init>
  MX_FSMC_Init();
 80005f2:	f000 f99d 	bl	8000930 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 80005f6:	f000 f8bf 	bl	8000778 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80005fa:	f000 f8e7 	bl	80007cc <MX_USART6_UART_Init>
  MX_TIM7_Init();
 80005fe:	f000 f885 	bl	800070c <MX_TIM7_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8000602:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <main+0x50>)
 8000604:	1d3c      	adds	r4, r7, #4
 8000606:	461d      	mov	r5, r3
 8000608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f009 fd5b 	bl	800a0d4 <osThreadCreate>
 800061e:	4603      	mov	r3, r0
 8000620:	4a04      	ldr	r2, [pc, #16]	@ (8000634 <main+0x54>)
 8000622:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000624:	f009 fd3f 	bl	800a0a6 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(100);
 8000628:	2064      	movs	r0, #100	@ 0x64
 800062a:	f001 fa93 	bl	8001b54 <HAL_Delay>
 800062e:	e7fb      	b.n	8000628 <main+0x48>
 8000630:	0801aa88 	.word	0x0801aa88
 8000634:	20000560 	.word	0x20000560

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	@ 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	@ 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f019 f9de 	bl	8019a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b28      	ldr	r3, [pc, #160]	@ (8000704 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	4a27      	ldr	r2, [pc, #156]	@ (8000704 <SystemClock_Config+0xcc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	@ 0x40
 800066c:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b22      	ldr	r3, [pc, #136]	@ (8000708 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a21      	ldr	r2, [pc, #132]	@ (8000708 <SystemClock_Config+0xd0>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	@ (8000708 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800069c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80006a8:	230f      	movs	r3, #15
 80006aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006ac:	2390      	movs	r3, #144	@ 0x90
 80006ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006b4:	2305      	movs	r3, #5
 80006b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 fffb 	bl	80046b8 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 fbea 	bl	8000ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2103      	movs	r1, #3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 fa5c 	bl	8004ba8 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f6:	f000 fbd3 	bl	8000ea0 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	@ 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000712:	463b      	mov	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800071a:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <MX_TIM7_Init+0x64>)
 800071c:	4a15      	ldr	r2, [pc, #84]	@ (8000774 <MX_TIM7_Init+0x68>)
 800071e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8000720:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <MX_TIM7_Init+0x64>)
 8000722:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000726:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000728:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_TIM7_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800072e:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <MX_TIM7_Init+0x64>)
 8000730:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000734:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_TIM7_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800073c:	480c      	ldr	r0, [pc, #48]	@ (8000770 <MX_TIM7_Init+0x64>)
 800073e:	f004 fc8d 	bl	800505c <HAL_TIM_Base_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000748:	f000 fbaa 	bl	8000ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074c:	2300      	movs	r3, #0
 800074e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000754:	463b      	mov	r3, r7
 8000756:	4619      	mov	r1, r3
 8000758:	4805      	ldr	r0, [pc, #20]	@ (8000770 <MX_TIM7_Init+0x64>)
 800075a:	f004 fefd 	bl	8005558 <HAL_TIMEx_MasterConfigSynchronization>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000764:	f000 fb9c 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000438 	.word	0x20000438
 8000774:	40001400 	.word	0x40001400

08000778 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800077c:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_USART1_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	@ (80007c8 <MX_USART1_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_USART1_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_USART1_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007b0:	f004 ff62 	bl	8005678 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ba:	f000 fb71 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000480 	.word	0x20000480
 80007c8:	40011000 	.word	0x40011000

080007cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80007d0:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <MX_USART6_UART_Init+0x4c>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	@ (800081c <MX_USART6_UART_Init+0x50>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80007d6:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <MX_USART6_UART_Init+0x4c>)
 80007d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <MX_USART6_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MX_USART6_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <MX_USART6_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <MX_USART6_UART_Init+0x4c>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <MX_USART6_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_USART6_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_USART6_UART_Init+0x4c>)
 8000804:	f004 ff38 	bl	8005678 <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800080e:	f000 fb47 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200004c8 	.word	0x200004c8
 800081c:	40011400 	.word	0x40011400

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	@ 0x30
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	4b3b      	ldr	r3, [pc, #236]	@ (8000928 <MX_GPIO_Init+0x108>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a3a      	ldr	r2, [pc, #232]	@ (8000928 <MX_GPIO_Init+0x108>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b38      	ldr	r3, [pc, #224]	@ (8000928 <MX_GPIO_Init+0x108>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	61bb      	str	r3, [r7, #24]
 8000850:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	4b34      	ldr	r3, [pc, #208]	@ (8000928 <MX_GPIO_Init+0x108>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a33      	ldr	r2, [pc, #204]	@ (8000928 <MX_GPIO_Init+0x108>)
 800085c:	f043 0320 	orr.w	r3, r3, #32
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b31      	ldr	r3, [pc, #196]	@ (8000928 <MX_GPIO_Init+0x108>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0320 	and.w	r3, r3, #32
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b2d      	ldr	r3, [pc, #180]	@ (8000928 <MX_GPIO_Init+0x108>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a2c      	ldr	r2, [pc, #176]	@ (8000928 <MX_GPIO_Init+0x108>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b2a      	ldr	r3, [pc, #168]	@ (8000928 <MX_GPIO_Init+0x108>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b26      	ldr	r3, [pc, #152]	@ (8000928 <MX_GPIO_Init+0x108>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a25      	ldr	r2, [pc, #148]	@ (8000928 <MX_GPIO_Init+0x108>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b23      	ldr	r3, [pc, #140]	@ (8000928 <MX_GPIO_Init+0x108>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000928 <MX_GPIO_Init+0x108>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000928 <MX_GPIO_Init+0x108>)
 80008b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000928 <MX_GPIO_Init+0x108>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b18      	ldr	r3, [pc, #96]	@ (8000928 <MX_GPIO_Init+0x108>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a17      	ldr	r2, [pc, #92]	@ (8000928 <MX_GPIO_Init+0x108>)
 80008cc:	f043 0310 	orr.w	r3, r3, #16
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b15      	ldr	r3, [pc, #84]	@ (8000928 <MX_GPIO_Init+0x108>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <MX_GPIO_Init+0x108>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a10      	ldr	r2, [pc, #64]	@ (8000928 <MX_GPIO_Init+0x108>)
 80008e8:	f043 0308 	orr.w	r3, r3, #8
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <MX_GPIO_Init+0x108>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0308 	and.w	r3, r3, #8
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	2108      	movs	r1, #8
 80008fe:	480b      	ldr	r0, [pc, #44]	@ (800092c <MX_GPIO_Init+0x10c>)
 8000900:	f002 fc6e 	bl	80031e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000904:	2308      	movs	r3, #8
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4804      	ldr	r0, [pc, #16]	@ (800092c <MX_GPIO_Init+0x10c>)
 800091c:	f002 fac4 	bl	8002ea8 <HAL_GPIO_Init>
  // PHY 复位
      /*HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET); // 拉低
      HAL_Delay(20); // 延时 >10ms
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);   // 拉高*/
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000920:	bf00      	nop
 8000922:	3730      	adds	r7, #48	@ 0x30
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	40020c00 	.word	0x40020c00

08000930 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
 8000944:	615a      	str	r2, [r3, #20]
 8000946:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 8000948:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <MX_FSMC_Init+0xb4>)
 800094a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800094e:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000950:	4b24      	ldr	r3, [pc, #144]	@ (80009e4 <MX_FSMC_Init+0xb4>)
 8000952:	4a25      	ldr	r2, [pc, #148]	@ (80009e8 <MX_FSMC_Init+0xb8>)
 8000954:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 8000956:	4b23      	ldr	r3, [pc, #140]	@ (80009e4 <MX_FSMC_Init+0xb4>)
 8000958:	2204      	movs	r2, #4
 800095a:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800095c:	4b21      	ldr	r3, [pc, #132]	@ (80009e4 <MX_FSMC_Init+0xb4>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000962:	4b20      	ldr	r3, [pc, #128]	@ (80009e4 <MX_FSMC_Init+0xb4>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000968:	4b1e      	ldr	r3, [pc, #120]	@ (80009e4 <MX_FSMC_Init+0xb4>)
 800096a:	2210      	movs	r2, #16
 800096c:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800096e:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <MX_FSMC_Init+0xb4>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000974:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <MX_FSMC_Init+0xb4>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800097a:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <MX_FSMC_Init+0xb4>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000980:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <MX_FSMC_Init+0xb4>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8000986:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <MX_FSMC_Init+0xb4>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800098c:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <MX_FSMC_Init+0xb4>)
 800098e:	2200      	movs	r2, #0
 8000990:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000992:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <MX_FSMC_Init+0xb4>)
 8000994:	2200      	movs	r2, #0
 8000996:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000998:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <MX_FSMC_Init+0xb4>)
 800099a:	2200      	movs	r2, #0
 800099c:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800099e:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <MX_FSMC_Init+0xb4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <MX_FSMC_Init+0xb4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80009aa:	230f      	movs	r3, #15
 80009ac:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80009ae:	230f      	movs	r3, #15
 80009b0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80009b2:	23ff      	movs	r3, #255	@ 0xff
 80009b4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80009b6:	230f      	movs	r3, #15
 80009b8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80009ba:	2310      	movs	r3, #16
 80009bc:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80009be:	2311      	movs	r3, #17
 80009c0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2200      	movs	r2, #0
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_FSMC_Init+0xb4>)
 80009ce:	f004 fafd 	bl	8004fcc <HAL_SRAM_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 80009d8:	f000 fa62 	bl	8000ea0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000510 	.word	0x20000510
 80009e8:	a0000104 	.word	0xa0000104

080009ec <Check_Network_Status>:

/**
 * @brief 检查网络状态
 */
void Check_Network_Status(void)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b0a9      	sub	sp, #164	@ 0xa4
 80009f0:	af04      	add	r7, sp, #16
    char msg[128];
    extern ETH_HandleTypeDef heth;
    extern struct netif gnetif;
    
    // 1. 检查ETH初始化状态
    snprintf(msg, sizeof(msg), "ETH gState: %d\r\n", heth.gState);
 80009f2:	4b5b      	ldr	r3, [pc, #364]	@ (8000b60 <Check_Network_Status+0x174>)
 80009f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80009f8:	f107 0008 	add.w	r0, r7, #8
 80009fc:	4a59      	ldr	r2, [pc, #356]	@ (8000b64 <Check_Network_Status+0x178>)
 80009fe:	2180      	movs	r1, #128	@ 0x80
 8000a00:	f018 fea8 	bl	8019754 <sniprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fbe1 	bl	80001d0 <strlen>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f018 f8c7 	bl	8018bac <CDC_Transmit_FS>
    
    // 2. 检查PHY链路状态
    uint32_t phy_reg = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
    if (HAL_ETH_ReadPHYRegister(&heth, 0x00, PHY_BSR, &phy_reg) == HAL_OK) {
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2201      	movs	r2, #1
 8000a26:	2100      	movs	r1, #0
 8000a28:	484d      	ldr	r0, [pc, #308]	@ (8000b60 <Check_Network_Status+0x174>)
 8000a2a:	f001 fd6d 	bl	8002508 <HAL_ETH_ReadPHYRegister>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d127      	bne.n	8000a84 <Check_Network_Status+0x98>
        bool link_up = (phy_reg & PHY_LINKED_STATUS) != 0;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	bf14      	ite	ne
 8000a3e:	2301      	movne	r3, #1
 8000a40:	2300      	moveq	r3, #0
 8000a42:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        snprintf(msg, sizeof(msg), "PHY BSR: 0x%04lX, Link: %s\r\n", 
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <Check_Network_Status+0x6a>
 8000a52:	4b45      	ldr	r3, [pc, #276]	@ (8000b68 <Check_Network_Status+0x17c>)
 8000a54:	e000      	b.n	8000a58 <Check_Network_Status+0x6c>
 8000a56:	4b45      	ldr	r3, [pc, #276]	@ (8000b6c <Check_Network_Status+0x180>)
 8000a58:	f107 0008 	add.w	r0, r7, #8
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	4a43      	ldr	r2, [pc, #268]	@ (8000b70 <Check_Network_Status+0x184>)
 8000a62:	2180      	movs	r1, #128	@ 0x80
 8000a64:	f018 fe76 	bl	8019754 <sniprintf>
                 phy_reg & 0xFFFF, link_up ? "UP" : "DOWN");
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fbaf 	bl	80001d0 <strlen>
 8000a72:	4603      	mov	r3, r0
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	f107 0308 	add.w	r3, r7, #8
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f018 f895 	bl	8018bac <CDC_Transmit_FS>
 8000a82:	e003      	b.n	8000a8c <Check_Network_Status+0xa0>
    } else {
        CDC_Transmit_FS((uint8_t*)"PHY Read Failed\r\n", 17);
 8000a84:	2111      	movs	r1, #17
 8000a86:	483b      	ldr	r0, [pc, #236]	@ (8000b74 <Check_Network_Status+0x188>)
 8000a88:	f018 f890 	bl	8018bac <CDC_Transmit_FS>
    }
    
    // 3. 检查LWIP netif状态
    if (netif_is_up(&gnetif)) {
 8000a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8000b78 <Check_Network_Status+0x18c>)
 8000a8e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d029      	beq.n	8000af0 <Check_Network_Status+0x104>
        if (netif_is_link_up(&gnetif)) {
 8000a9c:	4b36      	ldr	r3, [pc, #216]	@ (8000b78 <Check_Network_Status+0x18c>)
 8000a9e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000aa2:	089b      	lsrs	r3, r3, #2
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d018      	beq.n	8000ae0 <Check_Network_Status+0xf4>
            snprintf(msg, sizeof(msg), "LWIP: UP, IP: %d.%d.%d.%d\r\n",
                     (int)((gnetif.ip_addr.addr >> 0) & 0xFF),
 8000aae:	4b32      	ldr	r3, [pc, #200]	@ (8000b78 <Check_Network_Status+0x18c>)
 8000ab0:	685b      	ldr	r3, [r3, #4]
            snprintf(msg, sizeof(msg), "LWIP: UP, IP: %d.%d.%d.%d\r\n",
 8000ab2:	b2dc      	uxtb	r4, r3
                     (int)((gnetif.ip_addr.addr >> 8) & 0xFF),
 8000ab4:	4b30      	ldr	r3, [pc, #192]	@ (8000b78 <Check_Network_Status+0x18c>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
            snprintf(msg, sizeof(msg), "LWIP: UP, IP: %d.%d.%d.%d\r\n",
 8000aba:	b2db      	uxtb	r3, r3
                     (int)((gnetif.ip_addr.addr >> 16) & 0xFF),
 8000abc:	4a2e      	ldr	r2, [pc, #184]	@ (8000b78 <Check_Network_Status+0x18c>)
 8000abe:	6852      	ldr	r2, [r2, #4]
 8000ac0:	0c12      	lsrs	r2, r2, #16
            snprintf(msg, sizeof(msg), "LWIP: UP, IP: %d.%d.%d.%d\r\n",
 8000ac2:	b2d2      	uxtb	r2, r2
                     (int)((gnetif.ip_addr.addr >> 24) & 0xFF));
 8000ac4:	492c      	ldr	r1, [pc, #176]	@ (8000b78 <Check_Network_Status+0x18c>)
 8000ac6:	6849      	ldr	r1, [r1, #4]
 8000ac8:	0e09      	lsrs	r1, r1, #24
            snprintf(msg, sizeof(msg), "LWIP: UP, IP: %d.%d.%d.%d\r\n",
 8000aca:	f107 0008 	add.w	r0, r7, #8
 8000ace:	9102      	str	r1, [sp, #8]
 8000ad0:	9201      	str	r2, [sp, #4]
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	4623      	mov	r3, r4
 8000ad6:	4a29      	ldr	r2, [pc, #164]	@ (8000b7c <Check_Network_Status+0x190>)
 8000ad8:	2180      	movs	r1, #128	@ 0x80
 8000ada:	f018 fe3b 	bl	8019754 <sniprintf>
 8000ade:	e00e      	b.n	8000afe <Check_Network_Status+0x112>
        } else {
            snprintf(msg, sizeof(msg), "LWIP: Interface UP, but Link DOWN\r\n");
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	4a26      	ldr	r2, [pc, #152]	@ (8000b80 <Check_Network_Status+0x194>)
 8000ae6:	2180      	movs	r1, #128	@ 0x80
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f018 fe33 	bl	8019754 <sniprintf>
 8000aee:	e006      	b.n	8000afe <Check_Network_Status+0x112>
        }
    } else {
        snprintf(msg, sizeof(msg), "LWIP: Interface DOWN\r\n");
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	4a23      	ldr	r2, [pc, #140]	@ (8000b84 <Check_Network_Status+0x198>)
 8000af6:	2180      	movs	r1, #128	@ 0x80
 8000af8:	4618      	mov	r0, r3
 8000afa:	f018 fe2b 	bl	8019754 <sniprintf>
    }
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8000afe:	f107 0308 	add.w	r3, r7, #8
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fb64 	bl	80001d0 <strlen>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f018 f84a 	bl	8018bac <CDC_Transmit_FS>
    
    // 4. 检查DMA状态
    uint32_t dma_status = ETH->DMASR;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	@ (8000b88 <Check_Network_Status+0x19c>)
 8000b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    snprintf(msg, sizeof(msg), "DMA Status: 0x%08lX\r\n", dma_status);
 8000b24:	f107 0008 	add.w	r0, r7, #8
 8000b28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000b2c:	4a17      	ldr	r2, [pc, #92]	@ (8000b8c <Check_Network_Status+0x1a0>)
 8000b2e:	2180      	movs	r1, #128	@ 0x80
 8000b30:	f018 fe10 	bl	8019754 <sniprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8000b34:	f107 0308 	add.w	r3, r7, #8
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fb49 	bl	80001d0 <strlen>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	f107 0308 	add.w	r3, r7, #8
 8000b46:	4611      	mov	r1, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f018 f82f 	bl	8018bac <CDC_Transmit_FS>
    
    CDC_Transmit_FS((uint8_t*)"--- Network Check Complete ---\r\n", 33);
 8000b4e:	2121      	movs	r1, #33	@ 0x21
 8000b50:	480f      	ldr	r0, [pc, #60]	@ (8000b90 <Check_Network_Status+0x1a4>)
 8000b52:	f018 f82b 	bl	8018bac <CDC_Transmit_FS>
}
 8000b56:	bf00      	nop
 8000b58:	3794      	adds	r7, #148	@ 0x94
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd90      	pop	{r4, r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20005110 	.word	0x20005110
 8000b64:	0801aaa4 	.word	0x0801aaa4
 8000b68:	0801aab8 	.word	0x0801aab8
 8000b6c:	0801aabc 	.word	0x0801aabc
 8000b70:	0801aac4 	.word	0x0801aac4
 8000b74:	0801aae4 	.word	0x0801aae4
 8000b78:	200005b8 	.word	0x200005b8
 8000b7c:	0801aaf8 	.word	0x0801aaf8
 8000b80:	0801ab14 	.word	0x0801ab14
 8000b84:	0801ab38 	.word	0x0801ab38
 8000b88:	40028000 	.word	0x40028000
 8000b8c:	0801ab50 	.word	0x0801ab50
 8000b90:	0801ab68 	.word	0x0801ab68

08000b94 <Debug_Packet_Reception_Chain>:

/**
 * @brief 调试数据包接收链路 - 专门排查ping包为什么到不了ICMP层
 */
void Debug_Packet_Reception_Chain(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b0a6      	sub	sp, #152	@ 0x98
 8000b98:	af02      	add	r7, sp, #8
    char msg[128];
    extern ETH_HandleTypeDef heth;
    extern struct netif gnetif;
    
    CDC_Transmit_FS((uint8_t*)"\r\n=== PING包接收链路调试 ===\r\n", 32);
 8000b9a:	2120      	movs	r1, #32
 8000b9c:	486e      	ldr	r0, [pc, #440]	@ (8000d58 <Debug_Packet_Reception_Chain+0x1c4>)
 8000b9e:	f018 f805 	bl	8018bac <CDC_Transmit_FS>
    
    // 1. 检查ETH DMA接收状态
    uint32_t dma_sr = ETH->DMASR;
 8000ba2:	4b6e      	ldr	r3, [pc, #440]	@ (8000d5c <Debug_Packet_Reception_Chain+0x1c8>)
 8000ba4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    snprintf(msg, sizeof(msg), "DMA Status: 0x%08lX\r\n", dma_sr);
 8000bae:	4638      	mov	r0, r7
 8000bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000bb4:	4a6a      	ldr	r2, [pc, #424]	@ (8000d60 <Debug_Packet_Reception_Chain+0x1cc>)
 8000bb6:	2180      	movs	r1, #128	@ 0x80
 8000bb8:	f018 fdcc 	bl	8019754 <sniprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fb06 	bl	80001d0 <strlen>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	463b      	mov	r3, r7
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f017 ffed 	bl	8018bac <CDC_Transmit_FS>
    
    // 检查ETH是否启动
    uint32_t maccr = ETH->MACCR;
 8000bd2:	4b62      	ldr	r3, [pc, #392]	@ (8000d5c <Debug_Packet_Reception_Chain+0x1c8>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    snprintf(msg, sizeof(msg), "ETH MACCR: 0x%08lX\r\n", maccr);
 8000bda:	4638      	mov	r0, r7
 8000bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000be0:	4a60      	ldr	r2, [pc, #384]	@ (8000d64 <Debug_Packet_Reception_Chain+0x1d0>)
 8000be2:	2180      	movs	r1, #128	@ 0x80
 8000be4:	f018 fdb6 	bl	8019754 <sniprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8000be8:	463b      	mov	r3, r7
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff faf0 	bl	80001d0 <strlen>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f017 ffd7 	bl	8018bac <CDC_Transmit_FS>
    
    if (maccr & (1 << 2)) {  // RE - Receiver Enable
 8000bfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d004      	beq.n	8000c14 <Debug_Packet_Reception_Chain+0x80>
        CDC_Transmit_FS((uint8_t*)"✅ ETH接收已启用\r\n", 21);
 8000c0a:	2115      	movs	r1, #21
 8000c0c:	4856      	ldr	r0, [pc, #344]	@ (8000d68 <Debug_Packet_Reception_Chain+0x1d4>)
 8000c0e:	f017 ffcd 	bl	8018bac <CDC_Transmit_FS>
 8000c12:	e003      	b.n	8000c1c <Debug_Packet_Reception_Chain+0x88>
    } else {
        CDC_Transmit_FS((uint8_t*)"❌ ETH接收未启用！\r\n", 23);
 8000c14:	2117      	movs	r1, #23
 8000c16:	4855      	ldr	r0, [pc, #340]	@ (8000d6c <Debug_Packet_Reception_Chain+0x1d8>)
 8000c18:	f017 ffc8 	bl	8018bac <CDC_Transmit_FS>
    }
    
    if (maccr & (1 << 3)) {  // TE - Transmitter Enable  
 8000c1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000c20:	f003 0308 	and.w	r3, r3, #8
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d004      	beq.n	8000c32 <Debug_Packet_Reception_Chain+0x9e>
        CDC_Transmit_FS((uint8_t*)"✅ ETH发送已启用\r\n", 21);
 8000c28:	2115      	movs	r1, #21
 8000c2a:	4851      	ldr	r0, [pc, #324]	@ (8000d70 <Debug_Packet_Reception_Chain+0x1dc>)
 8000c2c:	f017 ffbe 	bl	8018bac <CDC_Transmit_FS>
 8000c30:	e003      	b.n	8000c3a <Debug_Packet_Reception_Chain+0xa6>
    } else {
        CDC_Transmit_FS((uint8_t*)"❌ ETH发送未启用！\r\n", 23);
 8000c32:	2117      	movs	r1, #23
 8000c34:	484f      	ldr	r0, [pc, #316]	@ (8000d74 <Debug_Packet_Reception_Chain+0x1e0>)
 8000c36:	f017 ffb9 	bl	8018bac <CDC_Transmit_FS>
    }
    
    // 检查DMA接收相关位
    if (dma_sr & (1 << 6)) {  // RI - Receive Interrupt
 8000c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d004      	beq.n	8000c50 <Debug_Packet_Reception_Chain+0xbc>
        CDC_Transmit_FS((uint8_t*)"✅ DMA接收中断标志置位\r\n", 28);
 8000c46:	211c      	movs	r1, #28
 8000c48:	484b      	ldr	r0, [pc, #300]	@ (8000d78 <Debug_Packet_Reception_Chain+0x1e4>)
 8000c4a:	f017 ffaf 	bl	8018bac <CDC_Transmit_FS>
 8000c4e:	e003      	b.n	8000c58 <Debug_Packet_Reception_Chain+0xc4>
    } else {
        CDC_Transmit_FS((uint8_t*)"❌ DMA接收中断标志未置位\r\n", 30);
 8000c50:	211e      	movs	r1, #30
 8000c52:	484a      	ldr	r0, [pc, #296]	@ (8000d7c <Debug_Packet_Reception_Chain+0x1e8>)
 8000c54:	f017 ffaa 	bl	8018bac <CDC_Transmit_FS>
    }
    
    if (dma_sr & (1 << 7)) {  // RU - Receive Buffer Unavailable
 8000c58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d003      	beq.n	8000c6c <Debug_Packet_Reception_Chain+0xd8>
        CDC_Transmit_FS((uint8_t*)"⚠️ 接收缓冲区不可用\r\n", 24);
 8000c64:	2118      	movs	r1, #24
 8000c66:	4846      	ldr	r0, [pc, #280]	@ (8000d80 <Debug_Packet_Reception_Chain+0x1ec>)
 8000c68:	f017 ffa0 	bl	8018bac <CDC_Transmit_FS>
    }
    
    // 2. 检查ETH MAC接收状态
    uint32_t mac_sr = ETH->MACSR;
 8000c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d5c <Debug_Packet_Reception_Chain+0x1c8>)
 8000c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    snprintf(msg, sizeof(msg), "MAC Status: 0x%08lX\r\n", mac_sr);
 8000c74:	4638      	mov	r0, r7
 8000c76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000c7a:	4a42      	ldr	r2, [pc, #264]	@ (8000d84 <Debug_Packet_Reception_Chain+0x1f0>)
 8000c7c:	2180      	movs	r1, #128	@ 0x80
 8000c7e:	f018 fd69 	bl	8019754 <sniprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8000c82:	463b      	mov	r3, r7
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff faa3 	bl	80001d0 <strlen>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f017 ff8a 	bl	8018bac <CDC_Transmit_FS>
    
    // 3. 检查接收描述符状态 (跳过具体地址检查)
    CDC_Transmit_FS((uint8_t*)"RX Desc: Configured\r\n", 21);
 8000c98:	2115      	movs	r1, #21
 8000c9a:	483b      	ldr	r0, [pc, #236]	@ (8000d88 <Debug_Packet_Reception_Chain+0x1f4>)
 8000c9c:	f017 ff86 	bl	8018bac <CDC_Transmit_FS>
    
    // 4. 检查ETH错误状态
    uint32_t eth_error = HAL_ETH_GetError(&heth);
 8000ca0:	483a      	ldr	r0, [pc, #232]	@ (8000d8c <Debug_Packet_Reception_Chain+0x1f8>)
 8000ca2:	f001 fcc5 	bl	8002630 <HAL_ETH_GetError>
 8000ca6:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if (eth_error != HAL_ETH_ERROR_NONE) {
 8000caa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d012      	beq.n	8000cd8 <Debug_Packet_Reception_Chain+0x144>
        snprintf(msg, sizeof(msg), "❌ ETH Error: 0x%08lX\r\n", eth_error);
 8000cb2:	4638      	mov	r0, r7
 8000cb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000cb8:	4a35      	ldr	r2, [pc, #212]	@ (8000d90 <Debug_Packet_Reception_Chain+0x1fc>)
 8000cba:	2180      	movs	r1, #128	@ 0x80
 8000cbc:	f018 fd4a 	bl	8019754 <sniprintf>
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fa84 	bl	80001d0 <strlen>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	463b      	mov	r3, r7
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f017 ff6b 	bl	8018bac <CDC_Transmit_FS>
 8000cd6:	e003      	b.n	8000ce0 <Debug_Packet_Reception_Chain+0x14c>
    } else {
        CDC_Transmit_FS((uint8_t*)"✅ ETH Error: None\r\n", 21);
 8000cd8:	2115      	movs	r1, #21
 8000cda:	482e      	ldr	r0, [pc, #184]	@ (8000d94 <Debug_Packet_Reception_Chain+0x200>)
 8000cdc:	f017 ff66 	bl	8018bac <CDC_Transmit_FS>
    }
    
    // 5. 检查网络接口基本信息
    snprintf(msg, sizeof(msg), "LWIP netif name: %c%c\r\n", gnetif.name[0], gnetif.name[1]);
 8000ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d98 <Debug_Packet_Reception_Chain+0x204>)
 8000ce2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d98 <Debug_Packet_Reception_Chain+0x204>)
 8000cea:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8000cee:	4638      	mov	r0, r7
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	4a29      	ldr	r2, [pc, #164]	@ (8000d9c <Debug_Packet_Reception_Chain+0x208>)
 8000cf6:	2180      	movs	r1, #128	@ 0x80
 8000cf8:	f018 fd2c 	bl	8019754 <sniprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fa66 	bl	80001d0 <strlen>
 8000d04:	4603      	mov	r3, r0
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	463b      	mov	r3, r7
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f017 ff4d 	bl	8018bac <CDC_Transmit_FS>
    
    snprintf(msg, sizeof(msg), "LWIP MTU: %u\r\n", gnetif.mtu);
 8000d12:	4b21      	ldr	r3, [pc, #132]	@ (8000d98 <Debug_Packet_Reception_Chain+0x204>)
 8000d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000d16:	4638      	mov	r0, r7
 8000d18:	4a21      	ldr	r2, [pc, #132]	@ (8000da0 <Debug_Packet_Reception_Chain+0x20c>)
 8000d1a:	2180      	movs	r1, #128	@ 0x80
 8000d1c:	f018 fd1a 	bl	8019754 <sniprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8000d20:	463b      	mov	r3, r7
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fa54 	bl	80001d0 <strlen>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f017 ff3b 	bl	8018bac <CDC_Transmit_FS>
    
    CDC_Transmit_FS((uint8_t*)"💡 建议: 在HAL_ETH_RxCpltCallback中加断点\r\n", 48);
 8000d36:	2130      	movs	r1, #48	@ 0x30
 8000d38:	481a      	ldr	r0, [pc, #104]	@ (8000da4 <Debug_Packet_Reception_Chain+0x210>)
 8000d3a:	f017 ff37 	bl	8018bac <CDC_Transmit_FS>
    CDC_Transmit_FS((uint8_t*)"💡 建议: 在ethernetif_input中加断点\r\n", 38);
 8000d3e:	2126      	movs	r1, #38	@ 0x26
 8000d40:	4819      	ldr	r0, [pc, #100]	@ (8000da8 <Debug_Packet_Reception_Chain+0x214>)
 8000d42:	f017 ff33 	bl	8018bac <CDC_Transmit_FS>
    
    CDC_Transmit_FS((uint8_t*)"--- 接收链路调试完成 ---\r\n", 29);
 8000d46:	211d      	movs	r1, #29
 8000d48:	4818      	ldr	r0, [pc, #96]	@ (8000dac <Debug_Packet_Reception_Chain+0x218>)
 8000d4a:	f017 ff2f 	bl	8018bac <CDC_Transmit_FS>
}
 8000d4e:	bf00      	nop
 8000d50:	3790      	adds	r7, #144	@ 0x90
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	0801ab8c 	.word	0x0801ab8c
 8000d5c:	40028000 	.word	0x40028000
 8000d60:	0801ab50 	.word	0x0801ab50
 8000d64:	0801abb4 	.word	0x0801abb4
 8000d68:	0801abcc 	.word	0x0801abcc
 8000d6c:	0801abe8 	.word	0x0801abe8
 8000d70:	0801ac04 	.word	0x0801ac04
 8000d74:	0801ac20 	.word	0x0801ac20
 8000d78:	0801ac3c 	.word	0x0801ac3c
 8000d7c:	0801ac60 	.word	0x0801ac60
 8000d80:	0801ac88 	.word	0x0801ac88
 8000d84:	0801acac 	.word	0x0801acac
 8000d88:	0801acc4 	.word	0x0801acc4
 8000d8c:	20005110 	.word	0x20005110
 8000d90:	0801acdc 	.word	0x0801acdc
 8000d94:	0801acf8 	.word	0x0801acf8
 8000d98:	200005b8 	.word	0x200005b8
 8000d9c:	0801ad10 	.word	0x0801ad10
 8000da0:	0801ad28 	.word	0x0801ad28
 8000da4:	0801ad38 	.word	0x0801ad38
 8000da8:	0801ad70 	.word	0x0801ad70
 8000dac:	0801ada0 	.word	0x0801ada0

08000db0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b0a4      	sub	sp, #144	@ 0x90
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000db8:	f017 fe3a 	bl	8018a30 <MX_USB_DEVICE_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 8000dbc:	f006 fb3e 	bl	800743c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  char usb_msg[128];
  uint32_t cycle_counter = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t network_check_counter = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  // 等待 USB 枚举就绪
  osDelay(2000);
 8000dcc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000dd0:	f009 f9cc 	bl	800a16c <osDelay>
  
  CDC_Transmit_FS((uint8_t*)"=== STM32 Network Test Started ===\r\n", 37);
 8000dd4:	2125      	movs	r1, #37	@ 0x25
 8000dd6:	4825      	ldr	r0, [pc, #148]	@ (8000e6c <StartDefaultTask+0xbc>)
 8000dd8:	f017 fee8 	bl	8018bac <CDC_Transmit_FS>

  for(;;)
  {
    cycle_counter++;
 8000ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000de0:	3301      	adds	r3, #1
 8000de2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    
    // 每5个周期（10秒）执行一次网络状态检查
    if (++network_check_counter >= 5) {
 8000de6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000dea:	3301      	adds	r3, #1
 8000dec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000df0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d91f      	bls.n	8000e38 <StartDefaultTask+0x88>
        network_check_counter = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        
        snprintf(usb_msg, sizeof(usb_msg), "\r\n=== Network Check #%lu ===\r\n", cycle_counter / 5);
 8000dfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000e02:	4a1b      	ldr	r2, [pc, #108]	@ (8000e70 <StartDefaultTask+0xc0>)
 8000e04:	fba2 2303 	umull	r2, r3, r2, r3
 8000e08:	089b      	lsrs	r3, r3, #2
 8000e0a:	f107 0008 	add.w	r0, r7, #8
 8000e0e:	4a19      	ldr	r2, [pc, #100]	@ (8000e74 <StartDefaultTask+0xc4>)
 8000e10:	2180      	movs	r1, #128	@ 0x80
 8000e12:	f018 fc9f 	bl	8019754 <sniprintf>
        CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff f9d8 	bl	80001d0 <strlen>
 8000e20:	4603      	mov	r3, r0
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f017 febe 	bl	8018bac <CDC_Transmit_FS>
        
        Check_Network_Status();
 8000e30:	f7ff fddc 	bl	80009ec <Check_Network_Status>
        
        // 添加ping包接收链路调试
        Debug_Packet_Reception_Chain();
 8000e34:	f7ff feae 	bl	8000b94 <Debug_Packet_Reception_Chain>
    }
    
    // 发送心跳消息
    snprintf(usb_msg, sizeof(usb_msg), "Heartbeat #%lu - ping接收调试中...\r\n", cycle_counter);
 8000e38:	f107 0008 	add.w	r0, r7, #8
 8000e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000e40:	4a0d      	ldr	r2, [pc, #52]	@ (8000e78 <StartDefaultTask+0xc8>)
 8000e42:	2180      	movs	r1, #128	@ 0x80
 8000e44:	f018 fc86 	bl	8019754 <sniprintf>
    CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8000e48:	f107 0308 	add.w	r3, r7, #8
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff f9bf 	bl	80001d0 <strlen>
 8000e52:	4603      	mov	r3, r0
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f017 fea5 	bl	8018bac <CDC_Transmit_FS>
    
    osDelay(2000); // 2秒间隔
 8000e62:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e66:	f009 f981 	bl	800a16c <osDelay>
    cycle_counter++;
 8000e6a:	e7b7      	b.n	8000ddc <StartDefaultTask+0x2c>
 8000e6c:	0801adc4 	.word	0x0801adc4
 8000e70:	cccccccd 	.word	0xcccccccd
 8000e74:	0801adec 	.word	0x0801adec
 8000e78:	0801ae0c 	.word	0x0801ae0c

08000e7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000e8e:	f000 fe41 	bl	8001b14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40002000 	.word	0x40002000

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
}
 8000ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <Error_Handler+0x8>

08000eac <HAL_ETH_MspInit>:
  *   - Peripheral's GPIO Configuration  
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b092      	sub	sp, #72	@ 0x48
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a88      	ldr	r2, [pc, #544]	@ (80010ec <HAL_ETH_MspInit+0x240>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	f040 8109 	bne.w	80010e2 <HAL_ETH_MspInit+0x236>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	633b      	str	r3, [r7, #48]	@ 0x30
 8000ed4:	4b86      	ldr	r3, [pc, #536]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed8:	4a85      	ldr	r2, [pc, #532]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000eda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ede:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee0:	4b83      	ldr	r3, [pc, #524]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ee8:	633b      	str	r3, [r7, #48]	@ 0x30
 8000eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000eec:	2300      	movs	r3, #0
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ef0:	4b7f      	ldr	r3, [pc, #508]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef4:	4a7e      	ldr	r2, [pc, #504]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000ef6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000efa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efc:	4b7c      	ldr	r3, [pc, #496]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f0c:	4b78      	ldr	r3, [pc, #480]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f10:	4a77      	ldr	r2, [pc, #476]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000f12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f16:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f18:	4b75      	ldr	r3, [pc, #468]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_ETHMAC_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f28:	4b71      	ldr	r3, [pc, #452]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2c:	4a70      	ldr	r2, [pc, #448]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000f2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f34:	4b6e      	ldr	r3, [pc, #440]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_ETHMACTX_CLK_ENABLE();
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
 8000f44:	4b6a      	ldr	r3, [pc, #424]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f48:	4a69      	ldr	r2, [pc, #420]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000f4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f50:	4b67      	ldr	r3, [pc, #412]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f58:	623b      	str	r3, [r7, #32]
 8000f5a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHMACRX_CLK_ENABLE();
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	4b63      	ldr	r3, [pc, #396]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f64:	4a62      	ldr	r2, [pc, #392]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000f66:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6c:	4b60      	ldr	r3, [pc, #384]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f74:	61fb      	str	r3, [r7, #28]
 8000f76:	69fb      	ldr	r3, [r7, #28]
    
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61bb      	str	r3, [r7, #24]
 8000f7c:	4b5c      	ldr	r3, [pc, #368]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f80:	4a5b      	ldr	r2, [pc, #364]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f88:	4b59      	ldr	r3, [pc, #356]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	61bb      	str	r3, [r7, #24]
 8000f92:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	4b55      	ldr	r3, [pc, #340]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9c:	4a54      	ldr	r2, [pc, #336]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000f9e:	f043 0302 	orr.w	r3, r3, #2
 8000fa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa4:	4b52      	ldr	r3, [pc, #328]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	4b4e      	ldr	r3, [pc, #312]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb8:	4a4d      	ldr	r2, [pc, #308]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc0:	4b4b      	ldr	r3, [pc, #300]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	4b47      	ldr	r3, [pc, #284]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd4:	4a46      	ldr	r2, [pc, #280]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000fd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fdc:	4b44      	ldr	r3, [pc, #272]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	4b40      	ldr	r3, [pc, #256]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff0:	4a3f      	ldr	r2, [pc, #252]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff8:	4b3d      	ldr	r3, [pc, #244]	@ (80010f0 <HAL_ETH_MspInit+0x244>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    PD3      ------> ETH_RESET
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001004:	2302      	movs	r3, #2
 8001006:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001014:	230b      	movs	r3, #11
 8001016:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001018:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800101c:	4619      	mov	r1, r3
 800101e:	4835      	ldr	r0, [pc, #212]	@ (80010f4 <HAL_ETH_MspInit+0x248>)
 8001020:	f001 ff42 	bl	8002ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001024:	2386      	movs	r3, #134	@ 0x86
 8001026:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001034:	230b      	movs	r3, #11
 8001036:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800103c:	4619      	mov	r1, r3
 800103e:	482e      	ldr	r0, [pc, #184]	@ (80010f8 <HAL_ETH_MspInit+0x24c>)
 8001040:	f001 ff32 	bl	8002ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001044:	2330      	movs	r3, #48	@ 0x30
 8001046:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001054:	230b      	movs	r3, #11
 8001056:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001058:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800105c:	4619      	mov	r1, r3
 800105e:	4825      	ldr	r0, [pc, #148]	@ (80010f4 <HAL_ETH_MspInit+0x248>)
 8001060:	f001 ff22 	bl	8002ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001064:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001068:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001072:	2303      	movs	r3, #3
 8001074:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001076:	230b      	movs	r3, #11
 8001078:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800107a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800107e:	4619      	mov	r1, r3
 8001080:	481e      	ldr	r0, [pc, #120]	@ (80010fc <HAL_ETH_MspInit+0x250>)
 8001082:	f001 ff11 	bl	8002ea8 <HAL_GPIO_Init>

    /* Configure ETH_RESET Pin (PD3) */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001086:	2308      	movs	r3, #8
 8001088:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108e:	2301      	movs	r3, #1
 8001090:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001096:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800109a:	4619      	mov	r1, r3
 800109c:	4818      	ldr	r0, [pc, #96]	@ (8001100 <HAL_ETH_MspInit+0x254>)
 800109e:	f001 ff03 	bl	8002ea8 <HAL_GPIO_Init>
    
    /* Reset PHY */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2108      	movs	r1, #8
 80010a6:	4816      	ldr	r0, [pc, #88]	@ (8001100 <HAL_ETH_MspInit+0x254>)
 80010a8:	f002 f89a 	bl	80031e0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80010ac:	2064      	movs	r0, #100	@ 0x64
 80010ae:	f000 fd51 	bl	8001b54 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2108      	movs	r1, #8
 80010b6:	4812      	ldr	r0, [pc, #72]	@ (8001100 <HAL_ETH_MspInit+0x254>)
 80010b8:	f002 f892 	bl	80031e0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80010bc:	2064      	movs	r0, #100	@ 0x64
 80010be:	f000 fd49 	bl	8001b54 <HAL_Delay>

    /* USER CODE BEGIN ETH_MspInit 1 */
    /* ❗️❗️❗️ 关键修复：配置ETH中断到NVIC ❗️❗️❗️ */
    /* ETH Interrupt NVIC Configuration */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2105      	movs	r1, #5
 80010c6:	203d      	movs	r0, #61	@ 0x3d
 80010c8:	f000 fe20 	bl	8001d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80010cc:	203d      	movs	r0, #61	@ 0x3d
 80010ce:	f000 fe39 	bl	8001d44 <HAL_NVIC_EnableIRQ>
    
    /* ETH Wake-up interrupt NVIC Configuration */
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2105      	movs	r1, #5
 80010d6:	203e      	movs	r0, #62	@ 0x3e
 80010d8:	f000 fe18 	bl	8001d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 80010dc:	203e      	movs	r0, #62	@ 0x3e
 80010de:	f000 fe31 	bl	8001d44 <HAL_NVIC_EnableIRQ>
    /* USER CODE END ETH_MspInit 1 */
  }
}
 80010e2:	bf00      	nop
 80010e4:	3748      	adds	r7, #72	@ 0x48
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40028000 	.word	0x40028000
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020800 	.word	0x40020800
 80010f8:	40020000 	.word	0x40020000
 80010fc:	40021800 	.word	0x40021800
 8001100:	40020c00 	.word	0x40020c00

08001104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <HAL_MspInit+0x54>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001112:	4a11      	ldr	r2, [pc, #68]	@ (8001158 <HAL_MspInit+0x54>)
 8001114:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001118:	6453      	str	r3, [r2, #68]	@ 0x44
 800111a:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <HAL_MspInit+0x54>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <HAL_MspInit+0x54>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <HAL_MspInit+0x54>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001134:	6413      	str	r3, [r2, #64]	@ 0x40
 8001136:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <HAL_MspInit+0x54>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	210f      	movs	r1, #15
 8001146:	f06f 0001 	mvn.w	r0, #1
 800114a:	f000 fddf 	bl	8001d0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800

0800115c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0e      	ldr	r2, [pc, #56]	@ (80011a4 <HAL_TIM_Base_MspInit+0x48>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d115      	bne.n	800119a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <HAL_TIM_Base_MspInit+0x4c>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	4a0c      	ldr	r2, [pc, #48]	@ (80011a8 <HAL_TIM_Base_MspInit+0x4c>)
 8001178:	f043 0320 	orr.w	r3, r3, #32
 800117c:	6413      	str	r3, [r2, #64]	@ 0x40
 800117e:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <HAL_TIM_Base_MspInit+0x4c>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	f003 0320 	and.w	r3, r3, #32
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2105      	movs	r1, #5
 800118e:	2037      	movs	r0, #55	@ 0x37
 8001190:	f000 fdbc 	bl	8001d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001194:	2037      	movs	r0, #55	@ 0x37
 8001196:	f000 fdd5 	bl	8001d44 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40001400 	.word	0x40001400
 80011a8:	40023800 	.word	0x40023800

080011ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08c      	sub	sp, #48	@ 0x30
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a32      	ldr	r2, [pc, #200]	@ (8001294 <HAL_UART_MspInit+0xe8>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d12d      	bne.n	800122a <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	4b31      	ldr	r3, [pc, #196]	@ (8001298 <HAL_UART_MspInit+0xec>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d6:	4a30      	ldr	r2, [pc, #192]	@ (8001298 <HAL_UART_MspInit+0xec>)
 80011d8:	f043 0310 	orr.w	r3, r3, #16
 80011dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011de:	4b2e      	ldr	r3, [pc, #184]	@ (8001298 <HAL_UART_MspInit+0xec>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001298 <HAL_UART_MspInit+0xec>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a29      	ldr	r2, [pc, #164]	@ (8001298 <HAL_UART_MspInit+0xec>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b27      	ldr	r3, [pc, #156]	@ (8001298 <HAL_UART_MspInit+0xec>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001206:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001218:	2307      	movs	r3, #7
 800121a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	481e      	ldr	r0, [pc, #120]	@ (800129c <HAL_UART_MspInit+0xf0>)
 8001224:	f001 fe40 	bl	8002ea8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001228:	e030      	b.n	800128c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a1c      	ldr	r2, [pc, #112]	@ (80012a0 <HAL_UART_MspInit+0xf4>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d12b      	bne.n	800128c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <HAL_UART_MspInit+0xec>)
 800123a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123c:	4a16      	ldr	r2, [pc, #88]	@ (8001298 <HAL_UART_MspInit+0xec>)
 800123e:	f043 0320 	orr.w	r3, r3, #32
 8001242:	6453      	str	r3, [r2, #68]	@ 0x44
 8001244:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <HAL_UART_MspInit+0xec>)
 8001246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001248:	f003 0320 	and.w	r3, r3, #32
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <HAL_UART_MspInit+0xec>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001258:	4a0f      	ldr	r2, [pc, #60]	@ (8001298 <HAL_UART_MspInit+0xec>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001260:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <HAL_UART_MspInit+0xec>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800126c:	23c0      	movs	r3, #192	@ 0xc0
 800126e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800127c:	2308      	movs	r3, #8
 800127e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4807      	ldr	r0, [pc, #28]	@ (80012a4 <HAL_UART_MspInit+0xf8>)
 8001288:	f001 fe0e 	bl	8002ea8 <HAL_GPIO_Init>
}
 800128c:	bf00      	nop
 800128e:	3730      	adds	r7, #48	@ 0x30
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40011000 	.word	0x40011000
 8001298:	40023800 	.word	0x40023800
 800129c:	40020000 	.word	0x40020000
 80012a0:	40011400 	.word	0x40011400
 80012a4:	40020800 	.word	0x40020800

080012a8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80012bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001370 <HAL_FSMC_MspInit+0xc8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d151      	bne.n	8001368 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 80012c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001370 <HAL_FSMC_MspInit+0xc8>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	4b29      	ldr	r3, [pc, #164]	@ (8001374 <HAL_FSMC_MspInit+0xcc>)
 80012d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012d2:	4a28      	ldr	r2, [pc, #160]	@ (8001374 <HAL_FSMC_MspInit+0xcc>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6393      	str	r3, [r2, #56]	@ 0x38
 80012da:	4b26      	ldr	r3, [pc, #152]	@ (8001374 <HAL_FSMC_MspInit+0xcc>)
 80012dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80012e6:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 80012ea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80012f8:	230c      	movs	r3, #12
 80012fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4619      	mov	r1, r3
 8001300:	481d      	ldr	r0, [pc, #116]	@ (8001378 <HAL_FSMC_MspInit+0xd0>)
 8001302:	f001 fdd1 	bl	8002ea8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001306:	f240 433f 	movw	r3, #1087	@ 0x43f
 800130a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001318:	230c      	movs	r3, #12
 800131a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4619      	mov	r1, r3
 8001320:	4816      	ldr	r0, [pc, #88]	@ (800137c <HAL_FSMC_MspInit+0xd4>)
 8001322:	f001 fdc1 	bl	8002ea8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001326:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800132a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001338:	230c      	movs	r3, #12
 800133a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	4619      	mov	r1, r3
 8001340:	480f      	ldr	r0, [pc, #60]	@ (8001380 <HAL_FSMC_MspInit+0xd8>)
 8001342:	f001 fdb1 	bl	8002ea8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001346:	f64f 7333 	movw	r3, #65331	@ 0xff33
 800134a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001358:	230c      	movs	r3, #12
 800135a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	4619      	mov	r1, r3
 8001360:	4808      	ldr	r0, [pc, #32]	@ (8001384 <HAL_FSMC_MspInit+0xdc>)
 8001362:	f001 fda1 	bl	8002ea8 <HAL_GPIO_Init>
 8001366:	e000      	b.n	800136a <HAL_FSMC_MspInit+0xc2>
    return;
 8001368:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000564 	.word	0x20000564
 8001374:	40023800 	.word	0x40023800
 8001378:	40021400 	.word	0x40021400
 800137c:	40021800 	.word	0x40021800
 8001380:	40021000 	.word	0x40021000
 8001384:	40020c00 	.word	0x40020c00

08001388 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001390:	f7ff ff8a 	bl	80012a8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08e      	sub	sp, #56	@ 0x38
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4b33      	ldr	r3, [pc, #204]	@ (8001480 <HAL_InitTick+0xe4>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	4a32      	ldr	r2, [pc, #200]	@ (8001480 <HAL_InitTick+0xe4>)
 80013b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80013bc:	4b30      	ldr	r3, [pc, #192]	@ (8001480 <HAL_InitTick+0xe4>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013c8:	f107 0210 	add.w	r2, r7, #16
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4611      	mov	r1, r2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 fdc8 	bl	8004f68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d103      	bne.n	80013ea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013e2:	f003 fd99 	bl	8004f18 <HAL_RCC_GetPCLK1Freq>
 80013e6:	6378      	str	r0, [r7, #52]	@ 0x34
 80013e8:	e004      	b.n	80013f4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013ea:	f003 fd95 	bl	8004f18 <HAL_RCC_GetPCLK1Freq>
 80013ee:	4603      	mov	r3, r0
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013f6:	4a23      	ldr	r2, [pc, #140]	@ (8001484 <HAL_InitTick+0xe8>)
 80013f8:	fba2 2303 	umull	r2, r3, r2, r3
 80013fc:	0c9b      	lsrs	r3, r3, #18
 80013fe:	3b01      	subs	r3, #1
 8001400:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001402:	4b21      	ldr	r3, [pc, #132]	@ (8001488 <HAL_InitTick+0xec>)
 8001404:	4a21      	ldr	r2, [pc, #132]	@ (800148c <HAL_InitTick+0xf0>)
 8001406:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001408:	4b1f      	ldr	r3, [pc, #124]	@ (8001488 <HAL_InitTick+0xec>)
 800140a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800140e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001410:	4a1d      	ldr	r2, [pc, #116]	@ (8001488 <HAL_InitTick+0xec>)
 8001412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001414:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001416:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <HAL_InitTick+0xec>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141c:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <HAL_InitTick+0xec>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001422:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <HAL_InitTick+0xec>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001428:	4817      	ldr	r0, [pc, #92]	@ (8001488 <HAL_InitTick+0xec>)
 800142a:	f003 fe17 	bl	800505c <HAL_TIM_Base_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001434:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001438:	2b00      	cmp	r3, #0
 800143a:	d11b      	bne.n	8001474 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 800143c:	4812      	ldr	r0, [pc, #72]	@ (8001488 <HAL_InitTick+0xec>)
 800143e:	f003 fe5d 	bl	80050fc <HAL_TIM_Base_Start_IT>
 8001442:	4603      	mov	r3, r0
 8001444:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001448:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800144c:	2b00      	cmp	r3, #0
 800144e:	d111      	bne.n	8001474 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001450:	202d      	movs	r0, #45	@ 0x2d
 8001452:	f000 fc77 	bl	8001d44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b0f      	cmp	r3, #15
 800145a:	d808      	bhi.n	800146e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800145c:	2200      	movs	r2, #0
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	202d      	movs	r0, #45	@ 0x2d
 8001462:	f000 fc53 	bl	8001d0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001466:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <HAL_InitTick+0xf4>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	e002      	b.n	8001474 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001474:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001478:	4618      	mov	r0, r3
 800147a:	3738      	adds	r7, #56	@ 0x38
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40023800 	.word	0x40023800
 8001484:	431bde83 	.word	0x431bde83
 8001488:	20000568 	.word	0x20000568
 800148c:	40002000 	.word	0x40002000
 8001490:	20000004 	.word	0x20000004

08001494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <NMI_Handler+0x4>

0800149c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <HardFault_Handler+0x4>

080014a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <MemManage_Handler+0x4>

080014ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <UsageFault_Handler+0x4>

080014bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80014d2:	f003 fe83 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000568 	.word	0x20000568

080014e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <TIM7_IRQHandler+0x10>)
 80014e6:	f003 fe79 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000438 	.word	0x20000438

080014f4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <ETH_IRQHandler+0x10>)
 80014fa:	f000 ff3f 	bl	800237c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20005110 	.word	0x20005110

08001508 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800150c:	4802      	ldr	r0, [pc, #8]	@ (8001518 <ETH_WKUP_IRQHandler+0x10>)
 800150e:	f000 ff35 	bl	800237c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20005110 	.word	0x20005110

0800151c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001520:	4802      	ldr	r0, [pc, #8]	@ (800152c <OTG_FS_IRQHandler+0x10>)
 8001522:	f001 ffba 	bl	800349a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200101bc 	.word	0x200101bc

08001530 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return 1;
 8001534:	2301      	movs	r3, #1
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_kill>:

int _kill(int pid, int sig)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800154a:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <_kill+0x20>)
 800154c:	2216      	movs	r2, #22
 800154e:	601a      	str	r2, [r3, #0]
  return -1;
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	200109fc 	.word	0x200109fc

08001564 <_exit>:

void _exit (int status)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800156c:	f04f 31ff 	mov.w	r1, #4294967295
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ffe5 	bl	8001540 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001576:	bf00      	nop
 8001578:	e7fd      	b.n	8001576 <_exit+0x12>

0800157a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	e00a      	b.n	80015a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800158c:	f3af 8000 	nop.w
 8001590:	4601      	mov	r1, r0
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	60ba      	str	r2, [r7, #8]
 8001598:	b2ca      	uxtb	r2, r1
 800159a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	3301      	adds	r3, #1
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	dbf0      	blt.n	800158c <_read+0x12>
  }

  return len;
 80015aa:	687b      	ldr	r3, [r7, #4]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	e009      	b.n	80015da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	60ba      	str	r2, [r7, #8]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	3301      	adds	r3, #1
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	429a      	cmp	r2, r3
 80015e0:	dbf1      	blt.n	80015c6 <_write+0x12>
  }
  return len;
 80015e2:	687b      	ldr	r3, [r7, #4]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_close>:

int _close(int file)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001614:	605a      	str	r2, [r3, #4]
  return 0;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_isatty>:

int _isatty(int file)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800162c:	2301      	movs	r3, #1
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800163a:	b480      	push	{r7}
 800163c:	b085      	sub	sp, #20
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800165c:	4a14      	ldr	r2, [pc, #80]	@ (80016b0 <_sbrk+0x5c>)
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <_sbrk+0x60>)
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001668:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <_sbrk+0x64>)
 8001672:	4a12      	ldr	r2, [pc, #72]	@ (80016bc <_sbrk+0x68>)
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	429a      	cmp	r2, r3
 8001682:	d205      	bcs.n	8001690 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001684:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <_sbrk+0x6c>)
 8001686:	220c      	movs	r2, #12
 8001688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
 800168e:	e009      	b.n	80016a4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001690:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001696:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <_sbrk+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	4a06      	ldr	r2, [pc, #24]	@ (80016b8 <_sbrk+0x64>)
 80016a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a2:	68fb      	ldr	r3, [r7, #12]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	371c      	adds	r7, #28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	20020000 	.word	0x20020000
 80016b4:	00000400 	.word	0x00000400
 80016b8:	200005b0 	.word	0x200005b0
 80016bc:	20010a20 	.word	0x20010a20
 80016c0:	200109fc 	.word	0x200109fc

080016c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <SystemInit+0x20>)
 80016ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ce:	4a05      	ldr	r2, [pc, #20]	@ (80016e4 <SystemInit+0x20>)
 80016d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001720 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016ec:	f7ff ffea 	bl	80016c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f0:	480c      	ldr	r0, [pc, #48]	@ (8001724 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016f2:	490d      	ldr	r1, [pc, #52]	@ (8001728 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016f4:	4a0d      	ldr	r2, [pc, #52]	@ (800172c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f8:	e002      	b.n	8001700 <LoopCopyDataInit>

080016fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fe:	3304      	adds	r3, #4

08001700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001704:	d3f9      	bcc.n	80016fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001706:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001708:	4c0a      	ldr	r4, [pc, #40]	@ (8001734 <LoopFillZerobss+0x22>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800170c:	e001      	b.n	8001712 <LoopFillZerobss>

0800170e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001710:	3204      	adds	r2, #4

08001712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001714:	d3fb      	bcc.n	800170e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001716:	f018 fa23 	bl	8019b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171a:	f7fe ff61 	bl	80005e0 <main>
  bx  lr    
 800171e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001720:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001728:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800172c:	0801f424 	.word	0x0801f424
  ldr r2, =_sbss
 8001730:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001734:	20010a0c 	.word	0x20010a0c

08001738 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC_IRQHandler>

0800173a <yt8512c_regster_bus_io>:
  * @param       ioctx：保存设备IO功能
  * @retval      YT8512C_STATUS_OK：OK
  *              YT8512C_STATUS_ERROR：缺少功能
  */
int32_t  yt8512c_regster_bus_io(yt8512c_object_t *pobj, yt8512c_ioc_tx_t *ioctx)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
    if (!pobj || !ioctx->readreg || !ioctx->writereg || !ioctx->gettick)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00b      	beq.n	8001762 <yt8512c_regster_bus_io+0x28>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d007      	beq.n	8001762 <yt8512c_regster_bus_io+0x28>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <yt8512c_regster_bus_io+0x28>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <yt8512c_regster_bus_io+0x2e>
    {
        return YT8512C_STATUS_ERROR;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	e014      	b.n	8001792 <yt8512c_regster_bus_io+0x58>
    }

    pobj->io.init = ioctx->init;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	609a      	str	r2, [r3, #8]
    pobj->io.deinit = ioctx->deinit;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	60da      	str	r2, [r3, #12]
    pobj->io.readreg = ioctx->readreg;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	615a      	str	r2, [r3, #20]
    pobj->io.writereg = ioctx->writereg;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	611a      	str	r2, [r3, #16]
    pobj->io.gettick = ioctx->gettick;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	691a      	ldr	r2, [r3, #16]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]

    return YT8512C_STATUS_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <yt8512c_init>:
                 YT8512C_STATUS_READ_ERROR：不能读取寄存器
                 YT8512C_STATUS_WRITE_ERROR：不能写入寄存器
                 YT8512C_STATUS_RESET_TIMEOUT：无法执行软件复位
  */
int32_t yt8512c_init(yt8512c_object_t *pobj)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b098      	sub	sp, #96	@ 0x60
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80017ac:	2300      	movs	r3, #0
 80017ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80017b0:	2300      	movs	r3, #0
 80017b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int32_t status = YT8512C_STATUS_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	65bb      	str	r3, [r7, #88]	@ 0x58

    if (pobj->is_initialized == 0)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d17e      	bne.n	80018be <yt8512c_init+0x11e>
    {
        if (pobj->io.init != 0)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <yt8512c_init+0x2e>
        {
            pobj->io.init();
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4798      	blx	r3
        }

        pobj->devaddr = YT8512C_MAX_DEV_ADDR + 1;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2220      	movs	r2, #32
 80017d2:	601a      	str	r2, [r3, #0]

        for (addr = 0; addr <= YT8512C_MAX_DEV_ADDR; addr++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80017d8:	e01e      	b.n	8001818 <yt8512c_init+0x78>
        {
            // 使用标准PHY ID寄存器来检测PHY存在
            if (pobj->io.readreg(addr, PHY_REGISTER2, &regvalue) < 0)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80017e2:	2102      	movs	r1, #2
 80017e4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80017e6:	4798      	blx	r3
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	da03      	bge.n	80017f6 <yt8512c_init+0x56>
            {
                status = YT8512C_STATUS_READ_ERROR;
 80017ee:	f06f 0304 	mvn.w	r3, #4
 80017f2:	65bb      	str	r3, [r7, #88]	@ 0x58
                continue;
 80017f4:	e00d      	b.n	8001812 <yt8512c_init+0x72>
            }
            // 检查是否为有效的YT8512C PHY ID
            if (regvalue != 0x0000 && regvalue != 0xFFFF)
 80017f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00a      	beq.n	8001812 <yt8512c_init+0x72>
 80017fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80017fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001802:	4293      	cmp	r3, r2
 8001804:	d005      	beq.n	8001812 <yt8512c_init+0x72>
            {
                pobj->devaddr = addr;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800180a:	601a      	str	r2, [r3, #0]
                status = YT8512C_STATUS_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	65bb      	str	r3, [r7, #88]	@ 0x58
                break;
 8001810:	e005      	b.n	800181e <yt8512c_init+0x7e>
        for (addr = 0; addr <= YT8512C_MAX_DEV_ADDR; addr++)
 8001812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001814:	3301      	adds	r3, #1
 8001816:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001818:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800181a:	2b1f      	cmp	r3, #31
 800181c:	d9dd      	bls.n	80017da <yt8512c_init+0x3a>
            }
        }

        if (pobj->devaddr > YT8512C_MAX_DEV_ADDR)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b1f      	cmp	r3, #31
 8001824:	d902      	bls.n	800182c <yt8512c_init+0x8c>
        {
            status = YT8512C_STATUS_ADDRESS_ERROR;
 8001826:	f06f 0302 	mvn.w	r3, #2
 800182a:	65bb      	str	r3, [r7, #88]	@ 0x58
        }

        if (status == YT8512C_STATUS_OK)
 800182c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800182e:	2b00      	cmp	r3, #0
 8001830:	d145      	bne.n	80018be <yt8512c_init+0x11e>
        {
            if (pobj->io.writereg(pobj->devaddr, YT8512C_BCR, YT8512C_BCR_SOFT_RESET) >= 0)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6810      	ldr	r0, [r2, #0]
 800183a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800183e:	2100      	movs	r1, #0
 8001840:	4798      	blx	r3
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	db37      	blt.n	80018b8 <yt8512c_init+0x118>
            {
                if (pobj->io.readreg(pobj->devaddr, YT8512C_BCR, &regvalue) >= 0)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6810      	ldr	r0, [r2, #0]
 8001850:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001854:	2100      	movs	r1, #0
 8001856:	4798      	blx	r3
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	db28      	blt.n	80018b0 <yt8512c_init+0x110>
                {
                    tickstart = pobj->io.gettick();
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	4798      	blx	r3
 8001864:	4603      	mov	r3, r0
 8001866:	657b      	str	r3, [r7, #84]	@ 0x54
                    while (regvalue & YT8512C_BCR_SOFT_RESET)
 8001868:	e01c      	b.n	80018a4 <yt8512c_init+0x104>
                    {
                        if ((pobj->io.gettick() - tickstart) <= 2000)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	4798      	blx	r3
 8001870:	4603      	mov	r3, r0
 8001872:	461a      	mov	r2, r3
 8001874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800187c:	d80e      	bhi.n	800189c <yt8512c_init+0xfc>
                        {
                            if (pobj->io.readreg(pobj->devaddr, YT8512C_BCR, &regvalue) < 0)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6810      	ldr	r0, [r2, #0]
 8001886:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800188a:	2100      	movs	r1, #0
 800188c:	4798      	blx	r3
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	da07      	bge.n	80018a4 <yt8512c_init+0x104>
                            {
                                status = YT8512C_STATUS_READ_ERROR;
 8001894:	f06f 0304 	mvn.w	r3, #4
 8001898:	65bb      	str	r3, [r7, #88]	@ 0x58
                                break;
 800189a:	e010      	b.n	80018be <yt8512c_init+0x11e>
                            }
                        }
                        else
                        {
                            status = YT8512C_STATUS_RESET_TIMEOUT;
 800189c:	f06f 0301 	mvn.w	r3, #1
 80018a0:	65bb      	str	r3, [r7, #88]	@ 0x58
                            break;
 80018a2:	e00c      	b.n	80018be <yt8512c_init+0x11e>
                    while (regvalue & YT8512C_BCR_SOFT_RESET)
 80018a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1dd      	bne.n	800186a <yt8512c_init+0xca>
 80018ae:	e006      	b.n	80018be <yt8512c_init+0x11e>
                        }
                    }
                }
                else
                {
                    status = YT8512C_STATUS_READ_ERROR;
 80018b0:	f06f 0304 	mvn.w	r3, #4
 80018b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80018b6:	e002      	b.n	80018be <yt8512c_init+0x11e>
                }
            }
            else
            {
                status = YT8512C_STATUS_WRITE_ERROR;
 80018b8:	f06f 0303 	mvn.w	r3, #3
 80018bc:	65bb      	str	r3, [r7, #88]	@ 0x58
            }
        }
    }

    if (status == YT8512C_STATUS_OK)
 80018be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f040 8084 	bne.w	80019ce <yt8512c_init+0x22e>
    {
        /* YT8512C扩展寄存器配置 - 关键RMII配置 */
        
        // 配置扩展寄存器0x1E (UTP Cable Test Control Register)
        // 设置RMII模式和50MHz时钟配置
        if (pobj->io.writereg(pobj->devaddr, 0x1E, 0x0001) < 0) {
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6810      	ldr	r0, [r2, #0]
 80018ce:	2201      	movs	r2, #1
 80018d0:	211e      	movs	r1, #30
 80018d2:	4798      	blx	r3
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	da03      	bge.n	80018e2 <yt8512c_init+0x142>
            CDC_Transmit_FS((uint8_t*)"YT8512C扩展寄存器0x1E配置失败\r\n", 32);
 80018da:	2120      	movs	r1, #32
 80018dc:	4840      	ldr	r0, [pc, #256]	@ (80019e0 <yt8512c_init+0x240>)
 80018de:	f017 f965 	bl	8018bac <CDC_Transmit_FS>
        }
        
        // 配置扩展寄存器0x1F (UTP Cable Test Data Register)  
        // RMII接口配置：启用RMII模式，设置50MHz时钟
        if (pobj->io.writereg(pobj->devaddr, 0x1F, 0x8000) < 0) {
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6810      	ldr	r0, [r2, #0]
 80018ea:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018ee:	211f      	movs	r1, #31
 80018f0:	4798      	blx	r3
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	da03      	bge.n	8001900 <yt8512c_init+0x160>
            CDC_Transmit_FS((uint8_t*)"YT8512C扩展寄存器0x1F配置失败\r\n", 32);
 80018f8:	2120      	movs	r1, #32
 80018fa:	483a      	ldr	r0, [pc, #232]	@ (80019e4 <yt8512c_init+0x244>)
 80018fc:	f017 f956 	bl	8018bac <CDC_Transmit_FS>
        }
        
        // 读取并配置扩展寄存器0x12 (Specific Status Register)
        uint32_t ssr_val = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	64fb      	str	r3, [r7, #76]	@ 0x4c
        if (pobj->io.readreg(pobj->devaddr, 0x12, &ssr_val) >= 0) {
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6810      	ldr	r0, [r2, #0]
 800190c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001910:	2112      	movs	r1, #18
 8001912:	4798      	blx	r3
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	db11      	blt.n	800193e <yt8512c_init+0x19e>
            // 设置RMII时钟模式和极性
            ssr_val |= 0x0080;  // 设置RMII_CLK_MODE位
 800191a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800191c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001920:	64fb      	str	r3, [r7, #76]	@ 0x4c
            if (pobj->io.writereg(pobj->devaddr, 0x12, ssr_val) < 0) {
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6810      	ldr	r0, [r2, #0]
 800192a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800192c:	2112      	movs	r1, #18
 800192e:	4798      	blx	r3
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	da03      	bge.n	800193e <yt8512c_init+0x19e>
                CDC_Transmit_FS((uint8_t*)"YT8512C SSR寄存器配置失败\r\n", 28);
 8001936:	211c      	movs	r1, #28
 8001938:	482b      	ldr	r0, [pc, #172]	@ (80019e8 <yt8512c_init+0x248>)
 800193a:	f017 f937 	bl	8018bac <CDC_Transmit_FS>
            }
        }
        
        // 强制重新启动自动协商以应用新配置
        uint32_t bcr_val = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	64bb      	str	r3, [r7, #72]	@ 0x48
        if (pobj->io.readreg(pobj->devaddr, YT8512C_BCR, &bcr_val) >= 0) {
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6810      	ldr	r0, [r2, #0]
 800194a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800194e:	2100      	movs	r1, #0
 8001950:	4798      	blx	r3
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	db11      	blt.n	800197c <yt8512c_init+0x1dc>
            bcr_val |= YT8512C_BCR_RESTART_AUTONEGO;
 8001958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800195a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800195e:	64bb      	str	r3, [r7, #72]	@ 0x48
            if (pobj->io.writereg(pobj->devaddr, YT8512C_BCR, bcr_val) < 0) {
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6810      	ldr	r0, [r2, #0]
 8001968:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800196a:	2100      	movs	r1, #0
 800196c:	4798      	blx	r3
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	da03      	bge.n	800197c <yt8512c_init+0x1dc>
                CDC_Transmit_FS((uint8_t*)"YT8512C重启自动协商失败\r\n", 27);
 8001974:	211b      	movs	r1, #27
 8001976:	481d      	ldr	r0, [pc, #116]	@ (80019ec <yt8512c_init+0x24c>)
 8001978:	f017 f918 	bl	8018bac <CDC_Transmit_FS>
            }
        }
        
        tickstart = pobj->io.gettick();
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4798      	blx	r3
 8001982:	4603      	mov	r3, r0
 8001984:	657b      	str	r3, [r7, #84]	@ 0x54
        while ((pobj->io.gettick() - tickstart) <= 2000)
 8001986:	bf00      	nop
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	4798      	blx	r3
 800198e:	4603      	mov	r3, r0
 8001990:	461a      	mov	r2, r3
 8001992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800199a:	d9f5      	bls.n	8001988 <yt8512c_init+0x1e8>
        {
        }
        pobj->is_initialized = 1;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	605a      	str	r2, [r3, #4]
        char buffer[64];
        snprintf(buffer, sizeof(buffer), "YT8512C Init OK with RMII Config, Addr: 0x%02lX\r\n", pobj->devaddr);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f107 0008 	add.w	r0, r7, #8
 80019aa:	4a11      	ldr	r2, [pc, #68]	@ (80019f0 <yt8512c_init+0x250>)
 80019ac:	2140      	movs	r1, #64	@ 0x40
 80019ae:	f017 fed1 	bl	8019754 <sniprintf>
        CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fc0a 	bl	80001d0 <strlen>
 80019bc:	4603      	mov	r3, r0
 80019be:	b29a      	uxth	r2, r3
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	4611      	mov	r1, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f017 f8f0 	bl	8018bac <CDC_Transmit_FS>
 80019cc:	e003      	b.n	80019d6 <yt8512c_init+0x236>
    }
    else
    {
        CDC_Transmit_FS((uint8_t *)"YT8512C Init Failed\r\n", 20);
 80019ce:	2114      	movs	r1, #20
 80019d0:	4808      	ldr	r0, [pc, #32]	@ (80019f4 <yt8512c_init+0x254>)
 80019d2:	f017 f8eb 	bl	8018bac <CDC_Transmit_FS>
    }
    return status;
 80019d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3760      	adds	r7, #96	@ 0x60
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	0801ae38 	.word	0x0801ae38
 80019e4:	0801ae64 	.word	0x0801ae64
 80019e8:	0801ae90 	.word	0x0801ae90
 80019ec:	0801aeb4 	.word	0x0801aeb4
 80019f0:	0801aed8 	.word	0x0801aed8
 80019f4:	0801af0c 	.word	0x0801af0c

080019f8 <yt8512c_start_auto_nego>:
  * @retval      YT8512C_STATUS_OK：关闭成功
                 YT8512C_STATUS_READ_ERROR：不能读取寄存器
                 YT8512C_STATUS_WRITE_ERROR：不能写寄存器
  */
int32_t yt8512c_start_auto_nego(yt8512c_object_t *pobj)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
    int32_t status = YT8512C_STATUS_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]

    if (pobj->io.readreg(pobj->devaddr, YT8512C_BCR, &readval) >= 0)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6810      	ldr	r0, [r2, #0]
 8001a10:	f107 0208 	add.w	r2, r7, #8
 8001a14:	2100      	movs	r1, #0
 8001a16:	4798      	blx	r3
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	db11      	blt.n	8001a42 <yt8512c_start_auto_nego+0x4a>
    {
        readval |= YT8512C_BCR_AUTONEGO_EN;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a24:	60bb      	str	r3, [r7, #8]

        /* 启动自动协商 */
        if (pobj->io.writereg(pobj->devaddr, YT8512C_BCR, readval) < 0)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6810      	ldr	r0, [r2, #0]
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	2100      	movs	r1, #0
 8001a32:	4798      	blx	r3
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	da06      	bge.n	8001a48 <yt8512c_start_auto_nego+0x50>
        {
            status =  YT8512C_STATUS_WRITE_ERROR;
 8001a3a:	f06f 0303 	mvn.w	r3, #3
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	e002      	b.n	8001a48 <yt8512c_start_auto_nego+0x50>
        }
    }
    else
    {
        status = YT8512C_STATUS_READ_ERROR;
 8001a42:	f06f 0304 	mvn.w	r3, #4
 8001a46:	60fb      	str	r3, [r7, #12]
    }

    return status;
 8001a48:	68fb      	ldr	r3, [r7, #12]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <yt8512c_get_link_state>:
                 YT8512C_STATUS_10MBITS_FULLDUPLEX：10M，全双工
                 YT8512C_STATUS_10MBITS_HALFDUPLEX ：10M，半双工
                 YT8512C_STATUS_READ_ERROR：不能读取寄存器
  */
int32_t yt8512c_get_link_state(yt8512c_object_t *pobj)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
    uint32_t bsr_value = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]
    if (pobj->io.readreg(pobj->devaddr, YT8512C_BSR, &bsr_value) < 0)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6810      	ldr	r0, [r2, #0]
 8001a68:	f107 0210 	add.w	r2, r7, #16
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	4798      	blx	r3
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	da06      	bge.n	8001a84 <yt8512c_get_link_state+0x30>
    {
        CDC_Transmit_FS((uint8_t *)"BSR Read Error\r\n", 14);
 8001a76:	210e      	movs	r1, #14
 8001a78:	4814      	ldr	r0, [pc, #80]	@ (8001acc <yt8512c_get_link_state+0x78>)
 8001a7a:	f017 f897 	bl	8018bac <CDC_Transmit_FS>
        return YT8512C_STATUS_READ_ERROR;
 8001a7e:	f06f 0304 	mvn.w	r3, #4
 8001a82:	e01e      	b.n	8001ac2 <yt8512c_get_link_state+0x6e>
    }
    if (!(bsr_value & YT8512C_BSR_LINK_STATUS))
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <yt8512c_get_link_state+0x3e>
    {
        return YT8512C_STATUS_LINK_DOWN;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e017      	b.n	8001ac2 <yt8512c_get_link_state+0x6e>
    }

    // 简化版本：检查链路状态，如果UP就配置为100M全双工
    // 同时强制配置PHY为RMII模式
    uint32_t bcr_value = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
    
    // 读取并检查基本控制寄存器
    if (pobj->io.readreg(pobj->devaddr, YT8512C_BCR, &bcr_value) >= 0) {
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6810      	ldr	r0, [r2, #0]
 8001a9e:	f107 020c 	add.w	r2, r7, #12
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4798      	blx	r3
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	db09      	blt.n	8001ac0 <yt8512c_get_link_state+0x6c>
        // 强制设置100M全双工+自动协商
        uint32_t new_bcr = YT8512C_BCR_AUTONEGO_EN | YT8512C_BCR_SPEED_SELECT | YT8512C_BCR_DUPLEX_MODE;
 8001aac:	f44f 5344 	mov.w	r3, #12544	@ 0x3100
 8001ab0:	617b      	str	r3, [r7, #20]
        pobj->io.writereg(pobj->devaddr, YT8512C_BCR, new_bcr);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6810      	ldr	r0, [r2, #0]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	2100      	movs	r1, #0
 8001abe:	4798      	blx	r3
    }
    
    return YT8512C_STATUS_100MBITS_FULLDUPLEX;
 8001ac0:	2302      	movs	r3, #2
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	0801af24 	.word	0x0801af24

08001ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <HAL_Init+0x40>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b10 <HAL_Init+0x40>)
 8001ada:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <HAL_Init+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b10 <HAL_Init+0x40>)
 8001ae6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aec:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <HAL_Init+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a07      	ldr	r2, [pc, #28]	@ (8001b10 <HAL_Init+0x40>)
 8001af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f000 f8fc 	bl	8001cf6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afe:	200f      	movs	r0, #15
 8001b00:	f7ff fc4c 	bl	800139c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b04:	f7ff fafe 	bl	8001104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023c00 	.word	0x40023c00

08001b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b18:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_IncTick+0x20>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_IncTick+0x24>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <HAL_IncTick+0x24>)
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000008 	.word	0x20000008
 8001b38:	200005b4 	.word	0x200005b4

08001b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b40:	4b03      	ldr	r3, [pc, #12]	@ (8001b50 <HAL_GetTick+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	200005b4 	.word	0x200005b4

08001b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b5c:	f7ff ffee 	bl	8001b3c <HAL_GetTick>
 8001b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6c:	d005      	beq.n	8001b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <HAL_Delay+0x44>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4413      	add	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b7a:	bf00      	nop
 8001b7c:	f7ff ffde 	bl	8001b3c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d8f7      	bhi.n	8001b7c <HAL_Delay+0x28>
  {
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000008 	.word	0x20000008

08001b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bac:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bce:	4a04      	ldr	r2, [pc, #16]	@ (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	60d3      	str	r3, [r2, #12]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be8:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <__NVIC_GetPriorityGrouping+0x18>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	f003 0307 	and.w	r3, r3, #7
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	db0b      	blt.n	8001c2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	f003 021f 	and.w	r2, r3, #31
 8001c18:	4907      	ldr	r1, [pc, #28]	@ (8001c38 <__NVIC_EnableIRQ+0x38>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	2001      	movs	r0, #1
 8001c22:	fa00 f202 	lsl.w	r2, r0, r2
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	@ (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	@ (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	@ 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
         );
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	@ 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ff4c 	bl	8001b9c <__NVIC_SetPriorityGrouping>
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d1e:	f7ff ff61 	bl	8001be4 <__NVIC_GetPriorityGrouping>
 8001d22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	68b9      	ldr	r1, [r7, #8]
 8001d28:	6978      	ldr	r0, [r7, #20]
 8001d2a:	f7ff ffb1 	bl	8001c90 <NVIC_EncodePriority>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff80 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d3c:	bf00      	nop
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff54 	bl	8001c00 <__NVIC_EnableIRQ>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e08a      	b.n	8001e88 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d106      	bne.n	8001d8a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff f891 	bl	8000eac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	4b40      	ldr	r3, [pc, #256]	@ (8001e90 <HAL_ETH_Init+0x130>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	4a3f      	ldr	r2, [pc, #252]	@ (8001e90 <HAL_ETH_Init+0x130>)
 8001d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e90 <HAL_ETH_Init+0x130>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001da6:	4b3b      	ldr	r3, [pc, #236]	@ (8001e94 <HAL_ETH_Init+0x134>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	4a3a      	ldr	r2, [pc, #232]	@ (8001e94 <HAL_ETH_Init+0x134>)
 8001dac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001db0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001db2:	4b38      	ldr	r3, [pc, #224]	@ (8001e94 <HAL_ETH_Init+0x134>)
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	4936      	ldr	r1, [pc, #216]	@ (8001e94 <HAL_ETH_Init+0x134>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001dc0:	4b34      	ldr	r3, [pc, #208]	@ (8001e94 <HAL_ETH_Init+0x134>)
 8001dc2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001dda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ddc:	f7ff feae 	bl	8001b3c <HAL_GetTick>
 8001de0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001de2:	e011      	b.n	8001e08 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001de4:	f7ff feaa 	bl	8001b3c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001df2:	d909      	bls.n	8001e08 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2204      	movs	r2, #4
 8001df8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	22e0      	movs	r2, #224	@ 0xe0
 8001e00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e03f      	b.n	8001e88 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1e4      	bne.n	8001de4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fd86 	bl	800292c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 fe31 	bl	8002a88 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fe87 	bl	8002b3a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	461a      	mov	r2, r3
 8001e32:	2100      	movs	r1, #0
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 fdef 	bl	8002a18 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001e48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e5a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e5e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001e72:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2210      	movs	r2, #16
 8001e82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40013800 	.word	0x40013800

08001e98 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ea6:	2b10      	cmp	r3, #16
 8001ea8:	d161      	bne.n	8001f6e <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2220      	movs	r2, #32
 8001eae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2204      	movs	r2, #4
 8001ebc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f975 	bl	80021ae <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f7ff fe41 	bl	8001b54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001eec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ef0:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f08:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fbaa 	bl	8002664 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0208 	orr.w	r2, r2, #8
 8001f1e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f7ff fe13 	bl	8001b54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0204 	orr.w	r2, r2, #4
 8001f44:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8001f58:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8001f5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f60:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2240      	movs	r2, #64	@ 0x40
 8001f66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e000      	b.n	8001f70 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
  }
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d109      	bne.n	8001f9c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f8e:	f043 0201 	orr.w	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e045      	b.n	8002028 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fa2:	2b40      	cmp	r3, #64	@ 0x40
 8001fa4:	d13f      	bne.n	8002026 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	6839      	ldr	r1, [r7, #0]
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fe30 	bl	8002c18 <ETH_Prepare_Tx_Descriptors>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc4:	f043 0202 	orr.w	r2, r3, #2
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e02a      	b.n	8002028 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001fd2:	f3bf 8f4f 	dsb	sy
}
 8001fd6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d904      	bls.n	8001ff4 <HAL_ETH_Transmit_IT+0x7c>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fee:	1f1a      	subs	r2, r3, #4
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00d      	beq.n	8002022 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800200e:	461a      	mov	r2, r3
 8002010:	2304      	movs	r3, #4
 8002012:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800201c:	461a      	mov	r2, r3
 800201e:	2300      	movs	r3, #0
 8002020:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	e000      	b.n	8002028 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
  }
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d109      	bne.n	800205c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204e:	f043 0201 	orr.w	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0a4      	b.n	80021a6 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002062:	2b40      	cmp	r3, #64	@ 0x40
 8002064:	d001      	beq.n	800206a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e09d      	b.n	80021a6 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	3212      	adds	r2, #18
 8002076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002080:	f1c3 0304 	rsb	r3, r3, #4
 8002084:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002086:	e066      	b.n	8002156 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d007      	beq.n	80020a4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	69da      	ldr	r2, [r3, #28]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	699a      	ldr	r2, [r3, #24]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d103      	bne.n	80020b8 <HAL_ETH_ReadData+0x88>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d03c      	beq.n	8002132 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	0c1b      	lsrs	r3, r3, #16
 80020d6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80020da:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80020f0:	2301      	movs	r3, #1
 80020f2:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	b29b      	uxth	r3, r3
 8002112:	f005 ff63 	bl	8007fdc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	441a      	add	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2200      	movs	r2, #0
 8002130:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3301      	adds	r3, #1
 8002136:	61fb      	str	r3, [r7, #28]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	2b03      	cmp	r3, #3
 800213c:	d902      	bls.n	8002144 <HAL_ETH_ReadData+0x114>
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3b04      	subs	r3, #4
 8002142:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	3212      	adds	r2, #18
 800214a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	3301      	adds	r3, #1
 8002154:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800215a:	2b00      	cmp	r3, #0
 800215c:	db06      	blt.n	800216c <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	429a      	cmp	r2, r3
 8002164:	d202      	bcs.n	800216c <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002166:	7cfb      	ldrb	r3, [r7, #19]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d08d      	beq.n	8002088 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	441a      	add	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f814 	bl	80021ae <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800218c:	7cfb      	ldrb	r3, [r7, #19]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d108      	bne.n	80021a4 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	e000      	b.n	80021a6 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3720      	adds	r7, #32
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b088      	sub	sp, #32
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80021ba:	2301      	movs	r3, #1
 80021bc:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021c2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	3212      	adds	r2, #18
 80021ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ce:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021d4:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80021d6:	e044      	b.n	8002262 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d112      	bne.n	8002206 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80021e0:	f107 0308 	add.w	r3, r7, #8
 80021e4:	4618      	mov	r0, r3
 80021e6:	f005 fec9 	bl	8007f7c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	74fb      	strb	r3, [r7, #19]
 80021f4:	e007      	b.n	8002206 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	461a      	mov	r2, r3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	461a      	mov	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002206:	7cfb      	ldrb	r3, [r7, #19]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d02a      	beq.n	8002262 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002210:	2b00      	cmp	r3, #0
 8002212:	d108      	bne.n	8002226 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800221c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	6053      	str	r3, [r2, #4]
 8002224:	e005      	b.n	8002232 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3301      	adds	r3, #1
 8002242:	61fb      	str	r3, [r7, #28]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	2b03      	cmp	r3, #3
 8002248:	d902      	bls.n	8002250 <ETH_UpdateDescriptor+0xa2>
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3b04      	subs	r3, #4
 800224e:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	3212      	adds	r2, #18
 8002256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225a:	617b      	str	r3, [r7, #20]
      desccount--;
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	3b01      	subs	r3, #1
 8002260:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <ETH_UpdateDescriptor+0xc0>
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1b4      	bne.n	80021d8 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	429a      	cmp	r2, r3
 8002276:	d01a      	beq.n	80022ae <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	3303      	adds	r3, #3
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002282:	f3bf 8f5f 	dmb	sy
}
 8002286:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6919      	ldr	r1, [r3, #16]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	18ca      	adds	r2, r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022a0:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80022ae:	bf00      	nop
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b086      	sub	sp, #24
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3318      	adds	r3, #24
 80022c2:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c8:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ce:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80022d0:	2301      	movs	r3, #1
 80022d2:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80022d4:	e047      	b.n	8002366 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80022d6:	2301      	movs	r3, #1
 80022d8:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3b01      	subs	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	3304      	adds	r3, #4
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10a      	bne.n	8002306 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	3301      	adds	r3, #1
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d902      	bls.n	8002302 <HAL_ETH_ReleaseTxPacket+0x4c>
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	3b04      	subs	r3, #4
 8002300:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002306:	7bbb      	ldrb	r3, [r7, #14]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d02c      	beq.n	8002366 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68d9      	ldr	r1, [r3, #12]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	440b      	add	r3, r1
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	db1f      	blt.n	8002362 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	3304      	adds	r3, #4
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	4618      	mov	r0, r3
 8002330:	f005 fe94 	bl	800805c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	3304      	adds	r3, #4
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	2200      	movs	r2, #0
 8002340:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	3301      	adds	r3, #1
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d902      	bls.n	8002354 <HAL_ETH_ReleaseTxPacket+0x9e>
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	3b04      	subs	r3, #4
 8002352:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002360:	e001      	b.n	8002366 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <HAL_ETH_ReleaseTxPacket+0xbc>
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1b1      	bne.n	80022d6 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800238a:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80023a4:	4b4b      	ldr	r3, [pc, #300]	@ (80024d4 <HAL_ETH_IRQHandler+0x158>)
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00e      	beq.n	80023d2 <HAL_ETH_IRQHandler+0x56>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d009      	beq.n	80023d2 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023c6:	461a      	mov	r2, r3
 80023c8:	4b43      	ldr	r3, [pc, #268]	@ (80024d8 <HAL_ETH_IRQHandler+0x15c>)
 80023ca:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f005 f9db 	bl	8007788 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00f      	beq.n	80023fc <HAL_ETH_IRQHandler+0x80>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ee:	461a      	mov	r2, r3
 80023f0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80023f4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f005 f9d6 	bl	80077a8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d042      	beq.n	800248c <HAL_ETH_IRQHandler+0x110>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d03d      	beq.n	800248c <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002416:	f043 0208 	orr.w	r2, r3, #8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d01a      	beq.n	8002460 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	4b29      	ldr	r3, [pc, #164]	@ (80024dc <HAL_ETH_IRQHandler+0x160>)
 8002436:	4013      	ands	r3, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002450:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002454:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	22e0      	movs	r2, #224	@ 0xe0
 800245a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800245e:	e012      	b.n	8002486 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	f248 6380 	movw	r3, #34432	@ 0x8680
 800246e:	4013      	ands	r3, r2
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800247e:	461a      	mov	r2, r3
 8002480:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002484:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f005 f99e 	bl	80077c8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00e      	beq.n	80024b4 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f81a 	bl	80024e0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d006      	beq.n	80024cc <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80024be:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <HAL_ETH_IRQHandler+0x158>)
 80024c0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80024c4:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f814 	bl	80024f4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80024cc:	bf00      	nop
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40013c00 	.word	0x40013c00
 80024d8:	00010040 	.word	0x00010040
 80024dc:	007e2000 	.word	0x007e2000

080024e0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f003 031c 	and.w	r3, r3, #28
 8002524:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	02db      	lsls	r3, r3, #11
 800252a:	b29b      	uxth	r3, r3
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	4313      	orrs	r3, r2
 8002530:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	019b      	lsls	r3, r3, #6
 8002536:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f023 0302 	bic.w	r3, r3, #2
 8002546:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002558:	f7ff faf0 	bl	8001b3c <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800255e:	e00d      	b.n	800257c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002560:	f7ff faec 	bl	8001b3c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800256e:	d301      	bcc.n	8002574 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e010      	b.n	8002596 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1ec      	bne.n	8002560 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	b29b      	uxth	r3, r3
 800258e:	461a      	mov	r2, r3
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f003 031c 	and.w	r3, r3, #28
 80025ba:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	02db      	lsls	r3, r3, #11
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	019b      	lsls	r3, r3, #6
 80025cc:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025f8:	f7ff faa0 	bl	8001b3c <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025fe:	e00d      	b.n	800261c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002600:	f7ff fa9c 	bl	8001b3c <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800260e:	d301      	bcc.n	8002614 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e009      	b.n	8002628 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1ec      	bne.n	8002600 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002682:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002686:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002694:	2001      	movs	r0, #1
 8002696:	f7ff fa5d 	bl	8001b54 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026a4:	6193      	str	r3, [r2, #24]
}
 80026a6:	bf00      	nop
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4b53      	ldr	r3, [pc, #332]	@ (8002814 <ETH_SetMACConfig+0x164>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	7b9b      	ldrb	r3, [r3, #14]
 80026ce:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	7c12      	ldrb	r2, [r2, #16]
 80026d4:	2a00      	cmp	r2, #0
 80026d6:	d102      	bne.n	80026de <ETH_SetMACConfig+0x2e>
 80026d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026dc:	e000      	b.n	80026e0 <ETH_SetMACConfig+0x30>
 80026de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80026e0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	7c52      	ldrb	r2, [r2, #17]
 80026e6:	2a00      	cmp	r2, #0
 80026e8:	d102      	bne.n	80026f0 <ETH_SetMACConfig+0x40>
 80026ea:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80026ee:	e000      	b.n	80026f2 <ETH_SetMACConfig+0x42>
 80026f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026f2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	7fdb      	ldrb	r3, [r3, #31]
 80026fe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002700:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002706:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	7f92      	ldrb	r2, [r2, #30]
 800270c:	2a00      	cmp	r2, #0
 800270e:	d102      	bne.n	8002716 <ETH_SetMACConfig+0x66>
 8002710:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002714:	e000      	b.n	8002718 <ETH_SetMACConfig+0x68>
 8002716:	2200      	movs	r2, #0
                        macconf->Speed |
 8002718:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	7f1b      	ldrb	r3, [r3, #28]
 800271e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002720:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002726:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	791b      	ldrb	r3, [r3, #4]
 800272c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800272e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002736:	2a00      	cmp	r2, #0
 8002738:	d102      	bne.n	8002740 <ETH_SetMACConfig+0x90>
 800273a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800273e:	e000      	b.n	8002742 <ETH_SetMACConfig+0x92>
 8002740:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002742:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	7bdb      	ldrb	r3, [r3, #15]
 8002748:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800274a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002750:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002758:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800275a:	4313      	orrs	r3, r2
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002772:	2001      	movs	r0, #1
 8002774:	f7ff f9ee 	bl	8001b54 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800278e:	4013      	ands	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002796:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800279e:	2a00      	cmp	r2, #0
 80027a0:	d101      	bne.n	80027a6 <ETH_SetMACConfig+0xf6>
 80027a2:	2280      	movs	r2, #128	@ 0x80
 80027a4:	e000      	b.n	80027a8 <ETH_SetMACConfig+0xf8>
 80027a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027a8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80027b6:	2a01      	cmp	r2, #1
 80027b8:	d101      	bne.n	80027be <ETH_SetMACConfig+0x10e>
 80027ba:	2208      	movs	r2, #8
 80027bc:	e000      	b.n	80027c0 <ETH_SetMACConfig+0x110>
 80027be:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80027c0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80027c8:	2a01      	cmp	r2, #1
 80027ca:	d101      	bne.n	80027d0 <ETH_SetMACConfig+0x120>
 80027cc:	2204      	movs	r2, #4
 80027ce:	e000      	b.n	80027d2 <ETH_SetMACConfig+0x122>
 80027d0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80027d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80027da:	2a01      	cmp	r2, #1
 80027dc:	d101      	bne.n	80027e2 <ETH_SetMACConfig+0x132>
 80027de:	2202      	movs	r2, #2
 80027e0:	e000      	b.n	80027e4 <ETH_SetMACConfig+0x134>
 80027e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027e4:	4313      	orrs	r3, r2
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027fc:	2001      	movs	r0, #1
 80027fe:	f7ff f9a9 	bl	8001b54 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	619a      	str	r2, [r3, #24]
}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	fd20810f 	.word	0xfd20810f

08002818 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4b3d      	ldr	r3, [pc, #244]	@ (8002928 <ETH_SetDMAConfig+0x110>)
 8002832:	4013      	ands	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	7b1b      	ldrb	r3, [r3, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d102      	bne.n	8002844 <ETH_SetDMAConfig+0x2c>
 800283e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002842:	e000      	b.n	8002846 <ETH_SetDMAConfig+0x2e>
 8002844:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	7b5b      	ldrb	r3, [r3, #13]
 800284a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800284c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	7f52      	ldrb	r2, [r2, #29]
 8002852:	2a00      	cmp	r2, #0
 8002854:	d102      	bne.n	800285c <ETH_SetDMAConfig+0x44>
 8002856:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800285a:	e000      	b.n	800285e <ETH_SetDMAConfig+0x46>
 800285c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800285e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	7b9b      	ldrb	r3, [r3, #14]
 8002864:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002866:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800286c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	7f1b      	ldrb	r3, [r3, #28]
 8002872:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002874:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	7f9b      	ldrb	r3, [r3, #30]
 800287a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800287c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002882:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800288a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800288c:	4313      	orrs	r3, r2
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4313      	orrs	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800289c:	461a      	mov	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028ae:	2001      	movs	r0, #1
 80028b0:	f7ff f950 	bl	8001b54 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028bc:	461a      	mov	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	791b      	ldrb	r3, [r3, #4]
 80028c6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028cc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80028d2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80028d8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028e0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80028e2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80028ea:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80028f0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028fe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800290c:	2001      	movs	r0, #1
 800290e:	f7ff f921 	bl	8001b54 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800291a:	461a      	mov	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6013      	str	r3, [r2, #0]
}
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	f8de3f23 	.word	0xf8de3f23

0800292c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b0a6      	sub	sp, #152	@ 0x98
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002934:	2301      	movs	r3, #1
 8002936:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800293a:	2301      	movs	r3, #1
 800293c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002940:	2300      	movs	r3, #0
 8002942:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002944:	2300      	movs	r3, #0
 8002946:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800294a:	2301      	movs	r3, #1
 800294c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002950:	2300      	movs	r3, #0
 8002952:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002956:	2301      	movs	r3, #1
 8002958:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800295c:	2301      	movs	r3, #1
 800295e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002968:	2300      	movs	r3, #0
 800296a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800296e:	2300      	movs	r3, #0
 8002970:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002972:	2300      	movs	r3, #0
 8002974:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002978:	2300      	movs	r3, #0
 800297a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800297c:	2300      	movs	r3, #0
 800297e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002982:	2300      	movs	r3, #0
 8002984:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800298e:	2300      	movs	r3, #0
 8002990:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002994:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002998:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800299a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800299e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80029a6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029aa:	4619      	mov	r1, r3
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff fe7f 	bl	80026b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80029b2:	2301      	movs	r3, #1
 80029b4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80029b6:	2301      	movs	r3, #1
 80029b8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80029ba:	2301      	movs	r3, #1
 80029bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80029c0:	2301      	movs	r3, #1
 80029c2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80029d4:	2300      	movs	r3, #0
 80029d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80029d8:	2301      	movs	r3, #1
 80029da:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80029de:	2301      	movs	r3, #1
 80029e0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80029e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029e6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029e8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80029ec:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029f2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a02:	f107 0308 	add.w	r3, r7, #8
 8002a06:	4619      	mov	r1, r3
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff05 	bl	8002818 <ETH_SetDMAConfig>
}
 8002a0e:	bf00      	nop
 8002a10:	3798      	adds	r7, #152	@ 0x98
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3305      	adds	r3, #5
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	3204      	adds	r2, #4
 8002a30:	7812      	ldrb	r2, [r2, #0]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <ETH_MACAddressConfig+0x68>)
 8002a3a:	4413      	add	r3, r2
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3303      	adds	r3, #3
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	061a      	lsls	r2, r3, #24
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3302      	adds	r3, #2
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	041b      	lsls	r3, r3, #16
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3301      	adds	r3, #1
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	021b      	lsls	r3, r3, #8
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	7812      	ldrb	r2, [r2, #0]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <ETH_MACAddressConfig+0x6c>)
 8002a6a:	4413      	add	r3, r2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	6013      	str	r3, [r2, #0]
}
 8002a72:	bf00      	nop
 8002a74:	371c      	adds	r7, #28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40028040 	.word	0x40028040
 8002a84:	40028044 	.word	0x40028044

08002a88 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	e03e      	b.n	8002b14 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68d9      	ldr	r1, [r3, #12]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2200      	movs	r2, #0
 8002abe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	3206      	adds	r2, #6
 8002ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d80c      	bhi.n	8002af8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68d9      	ldr	r1, [r3, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	440b      	add	r3, r1
 8002af0:	461a      	mov	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	e004      	b.n	8002b02 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	461a      	mov	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3301      	adds	r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d9bd      	bls.n	8002a96 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b2c:	611a      	str	r2, [r3, #16]
}
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b085      	sub	sp, #20
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	e048      	b.n	8002bda <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6919      	ldr	r1, [r3, #16]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	440b      	add	r3, r1
 8002b58:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2200      	movs	r2, #0
 8002b64:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2200      	movs	r2, #0
 8002b76:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002b84:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	3212      	adds	r2, #18
 8002ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d80c      	bhi.n	8002bca <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6919      	ldr	r1, [r3, #16]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	60da      	str	r2, [r3, #12]
 8002bc8:	e004      	b.n	8002bd4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d9b3      	bls.n	8002b48 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c0a:	60da      	str	r2, [r3, #12]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b091      	sub	sp, #68	@ 0x44
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3318      	adds	r3, #24
 8002c28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c42:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c5a:	d007      	beq.n	8002c6c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c60:	3304      	adds	r3, #4
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e115      	b.n	8002e9c <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8002c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c72:	3301      	adds	r3, #1
 8002c74:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002c88:	f023 031f 	bic.w	r3, r3, #31
 8002c8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c8e:	6852      	ldr	r2, [r2, #4]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c94:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d008      	beq.n	8002cb4 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf4:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002cf6:	e084      	b.n	8002e02 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d02:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d006      	beq.n	8002d18 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	e005      	b.n	8002d24 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d22:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d26:	3301      	adds	r3, #1
 8002d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d902      	bls.n	8002d36 <ETH_Prepare_Tx_Descriptors+0x11e>
 8002d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d32:	3b04      	subs	r3, #4
 8002d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d3e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d4c:	d007      	beq.n	8002d5e <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d52:	3304      	adds	r3, #4
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d029      	beq.n	8002db2 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d70:	e019      	b.n	8002da6 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8002d72:	f3bf 8f5f 	dmb	sy
}
 8002d76:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d82:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d86:	3301      	adds	r3, #1
 8002d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d902      	bls.n	8002d96 <ETH_Prepare_Tx_Descriptors+0x17e>
 8002d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d92:	3b04      	subs	r3, #4
 8002d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d9e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da2:	3301      	adds	r3, #1
 8002da4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002da6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d3e1      	bcc.n	8002d72 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8002dae:	2302      	movs	r3, #2
 8002db0:	e074      	b.n	8002e9c <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dbc:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd2:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002ddc:	f023 031f 	bic.w	r3, r3, #31
 8002de0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002de2:	6852      	ldr	r2, [r2, #4]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de8:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dec:	3301      	adds	r3, #1
 8002dee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002df0:	f3bf 8f5f 	dmb	sy
}
 8002df4:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e00:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f47f af76 	bne.w	8002cf8 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d006      	beq.n	8002e20 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e005      	b.n	8002e2c <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e36:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3a:	6a3a      	ldr	r2, [r7, #32]
 8002e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e40:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002e42:	f3bf 8f5f 	dmb	sy
}
 8002e46:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e52:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e68:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e6e:	613b      	str	r3, [r7, #16]
  return(result);
 8002e70:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	2301      	movs	r3, #1
 8002e76:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f383 8810 	msr	PRIMASK, r3
}
 8002e7e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e86:	4413      	add	r3, r2
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	f383 8810 	msr	PRIMASK, r3
}
 8002e98:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3744      	adds	r7, #68	@ 0x44
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b089      	sub	sp, #36	@ 0x24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	e16b      	b.n	800319c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	f040 815a 	bne.w	8003196 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d005      	beq.n	8002efa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d130      	bne.n	8002f5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	2203      	movs	r2, #3
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f30:	2201      	movs	r2, #1
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	091b      	lsrs	r3, r3, #4
 8002f46:	f003 0201 	and.w	r2, r3, #1
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d017      	beq.n	8002f98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	2203      	movs	r2, #3
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d123      	bne.n	8002fec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	08da      	lsrs	r2, r3, #3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3208      	adds	r2, #8
 8002fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	220f      	movs	r2, #15
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	08da      	lsrs	r2, r3, #3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3208      	adds	r2, #8
 8002fe6:	69b9      	ldr	r1, [r7, #24]
 8002fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0203 	and.w	r2, r3, #3
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80b4 	beq.w	8003196 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	4b60      	ldr	r3, [pc, #384]	@ (80031b4 <HAL_GPIO_Init+0x30c>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003036:	4a5f      	ldr	r2, [pc, #380]	@ (80031b4 <HAL_GPIO_Init+0x30c>)
 8003038:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800303c:	6453      	str	r3, [r2, #68]	@ 0x44
 800303e:	4b5d      	ldr	r3, [pc, #372]	@ (80031b4 <HAL_GPIO_Init+0x30c>)
 8003040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003042:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800304a:	4a5b      	ldr	r2, [pc, #364]	@ (80031b8 <HAL_GPIO_Init+0x310>)
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	089b      	lsrs	r3, r3, #2
 8003050:	3302      	adds	r3, #2
 8003052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	220f      	movs	r2, #15
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a52      	ldr	r2, [pc, #328]	@ (80031bc <HAL_GPIO_Init+0x314>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d02b      	beq.n	80030ce <HAL_GPIO_Init+0x226>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a51      	ldr	r2, [pc, #324]	@ (80031c0 <HAL_GPIO_Init+0x318>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d025      	beq.n	80030ca <HAL_GPIO_Init+0x222>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a50      	ldr	r2, [pc, #320]	@ (80031c4 <HAL_GPIO_Init+0x31c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d01f      	beq.n	80030c6 <HAL_GPIO_Init+0x21e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a4f      	ldr	r2, [pc, #316]	@ (80031c8 <HAL_GPIO_Init+0x320>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d019      	beq.n	80030c2 <HAL_GPIO_Init+0x21a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a4e      	ldr	r2, [pc, #312]	@ (80031cc <HAL_GPIO_Init+0x324>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d013      	beq.n	80030be <HAL_GPIO_Init+0x216>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a4d      	ldr	r2, [pc, #308]	@ (80031d0 <HAL_GPIO_Init+0x328>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00d      	beq.n	80030ba <HAL_GPIO_Init+0x212>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a4c      	ldr	r2, [pc, #304]	@ (80031d4 <HAL_GPIO_Init+0x32c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d007      	beq.n	80030b6 <HAL_GPIO_Init+0x20e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a4b      	ldr	r2, [pc, #300]	@ (80031d8 <HAL_GPIO_Init+0x330>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d101      	bne.n	80030b2 <HAL_GPIO_Init+0x20a>
 80030ae:	2307      	movs	r3, #7
 80030b0:	e00e      	b.n	80030d0 <HAL_GPIO_Init+0x228>
 80030b2:	2308      	movs	r3, #8
 80030b4:	e00c      	b.n	80030d0 <HAL_GPIO_Init+0x228>
 80030b6:	2306      	movs	r3, #6
 80030b8:	e00a      	b.n	80030d0 <HAL_GPIO_Init+0x228>
 80030ba:	2305      	movs	r3, #5
 80030bc:	e008      	b.n	80030d0 <HAL_GPIO_Init+0x228>
 80030be:	2304      	movs	r3, #4
 80030c0:	e006      	b.n	80030d0 <HAL_GPIO_Init+0x228>
 80030c2:	2303      	movs	r3, #3
 80030c4:	e004      	b.n	80030d0 <HAL_GPIO_Init+0x228>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e002      	b.n	80030d0 <HAL_GPIO_Init+0x228>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <HAL_GPIO_Init+0x228>
 80030ce:	2300      	movs	r3, #0
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	f002 0203 	and.w	r2, r2, #3
 80030d6:	0092      	lsls	r2, r2, #2
 80030d8:	4093      	lsls	r3, r2
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4313      	orrs	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030e0:	4935      	ldr	r1, [pc, #212]	@ (80031b8 <HAL_GPIO_Init+0x310>)
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	089b      	lsrs	r3, r3, #2
 80030e6:	3302      	adds	r3, #2
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ee:	4b3b      	ldr	r3, [pc, #236]	@ (80031dc <HAL_GPIO_Init+0x334>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	43db      	mvns	r3, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4013      	ands	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003112:	4a32      	ldr	r2, [pc, #200]	@ (80031dc <HAL_GPIO_Init+0x334>)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003118:	4b30      	ldr	r3, [pc, #192]	@ (80031dc <HAL_GPIO_Init+0x334>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800313c:	4a27      	ldr	r2, [pc, #156]	@ (80031dc <HAL_GPIO_Init+0x334>)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003142:	4b26      	ldr	r3, [pc, #152]	@ (80031dc <HAL_GPIO_Init+0x334>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003166:	4a1d      	ldr	r2, [pc, #116]	@ (80031dc <HAL_GPIO_Init+0x334>)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800316c:	4b1b      	ldr	r3, [pc, #108]	@ (80031dc <HAL_GPIO_Init+0x334>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003190:	4a12      	ldr	r2, [pc, #72]	@ (80031dc <HAL_GPIO_Init+0x334>)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	3301      	adds	r3, #1
 800319a:	61fb      	str	r3, [r7, #28]
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	2b0f      	cmp	r3, #15
 80031a0:	f67f ae90 	bls.w	8002ec4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	3724      	adds	r7, #36	@ 0x24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40013800 	.word	0x40013800
 80031bc:	40020000 	.word	0x40020000
 80031c0:	40020400 	.word	0x40020400
 80031c4:	40020800 	.word	0x40020800
 80031c8:	40020c00 	.word	0x40020c00
 80031cc:	40021000 	.word	0x40021000
 80031d0:	40021400 	.word	0x40021400
 80031d4:	40021800 	.word	0x40021800
 80031d8:	40021c00 	.word	0x40021c00
 80031dc:	40013c00 	.word	0x40013c00

080031e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	807b      	strh	r3, [r7, #2]
 80031ec:	4613      	mov	r3, r2
 80031ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031f0:	787b      	ldrb	r3, [r7, #1]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031f6:	887a      	ldrh	r2, [r7, #2]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031fc:	e003      	b.n	8003206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031fe:	887b      	ldrh	r3, [r7, #2]
 8003200:	041a      	lsls	r2, r3, #16
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	619a      	str	r2, [r3, #24]
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b086      	sub	sp, #24
 8003216:	af02      	add	r7, sp, #8
 8003218:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e101      	b.n	8003428 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d106      	bne.n	8003244 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f015 fdfc 	bl	8018e3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2203      	movs	r2, #3
 8003248:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003252:	d102      	bne.n	800325a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f002 feb5 	bl	8005fce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	7c1a      	ldrb	r2, [r3, #16]
 800326c:	f88d 2000 	strb.w	r2, [sp]
 8003270:	3304      	adds	r3, #4
 8003272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003274:	f002 fd94 	bl	8005da0 <USB_CoreInit>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2202      	movs	r2, #2
 8003282:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e0ce      	b.n	8003428 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f002 fead 	bl	8005ff0 <USB_SetCurrentMode>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0bf      	b.n	8003428 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a8:	2300      	movs	r3, #0
 80032aa:	73fb      	strb	r3, [r7, #15]
 80032ac:	e04a      	b.n	8003344 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	3315      	adds	r3, #21
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032c2:	7bfa      	ldrb	r2, [r7, #15]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4413      	add	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	3314      	adds	r3, #20
 80032d2:	7bfa      	ldrb	r2, [r7, #15]
 80032d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
 80032da:	b298      	uxth	r0, r3
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	332e      	adds	r3, #46	@ 0x2e
 80032ea:	4602      	mov	r2, r0
 80032ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032ee:	7bfa      	ldrb	r2, [r7, #15]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	3318      	adds	r3, #24
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	331c      	adds	r3, #28
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	3320      	adds	r3, #32
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800332a:	7bfa      	ldrb	r2, [r7, #15]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	3324      	adds	r3, #36	@ 0x24
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	3301      	adds	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	791b      	ldrb	r3, [r3, #4]
 8003348:	7bfa      	ldrb	r2, [r7, #15]
 800334a:	429a      	cmp	r2, r3
 800334c:	d3af      	bcc.n	80032ae <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800334e:	2300      	movs	r3, #0
 8003350:	73fb      	strb	r3, [r7, #15]
 8003352:	e044      	b.n	80033de <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003354:	7bfa      	ldrb	r2, [r7, #15]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003366:	2200      	movs	r2, #0
 8003368:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800336a:	7bfa      	ldrb	r2, [r7, #15]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800337c:	7bfa      	ldrb	r2, [r7, #15]
 800337e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003380:	7bfa      	ldrb	r2, [r7, #15]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003396:	7bfa      	ldrb	r2, [r7, #15]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033ac:	7bfa      	ldrb	r2, [r7, #15]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033c2:	7bfa      	ldrb	r2, [r7, #15]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	3301      	adds	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	791b      	ldrb	r3, [r3, #4]
 80033e2:	7bfa      	ldrb	r2, [r7, #15]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d3b5      	bcc.n	8003354 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	7c1a      	ldrb	r2, [r3, #16]
 80033f0:	f88d 2000 	strb.w	r2, [sp]
 80033f4:	3304      	adds	r3, #4
 80033f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033f8:	f002 fe46 	bl	8006088 <USB_DevInit>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2202      	movs	r2, #2
 8003406:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e00c      	b.n	8003428 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f003 fe90 	bl	8007146 <USB_DevDisconnect>

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_PCD_Start+0x1c>
 8003448:	2302      	movs	r3, #2
 800344a:	e022      	b.n	8003492 <HAL_PCD_Start+0x62>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d009      	beq.n	8003474 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003464:	2b01      	cmp	r3, #1
 8003466:	d105      	bne.n	8003474 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f002 fd97 	bl	8005fac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f003 fe3e 	bl	8007104 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800349a:	b590      	push	{r4, r7, lr}
 800349c:	b08d      	sub	sp, #52	@ 0x34
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f003 fefc 	bl	80072ae <USB_GetMode>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f040 848c 	bne.w	8003dd6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f003 fe60 	bl	8007188 <USB_ReadInterrupts>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 8482 	beq.w	8003dd4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	0a1b      	lsrs	r3, r3, #8
 80034da:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f003 fe4d 	bl	8007188 <USB_ReadInterrupts>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d107      	bne.n	8003508 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f002 0202 	and.w	r2, r2, #2
 8003506:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f003 fe3b 	bl	8007188 <USB_ReadInterrupts>
 8003512:	4603      	mov	r3, r0
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b10      	cmp	r3, #16
 800351a:	d161      	bne.n	80035e0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0210 	bic.w	r2, r2, #16
 800352a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	f003 020f 	and.w	r2, r3, #15
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	4413      	add	r3, r2
 8003548:	3304      	adds	r3, #4
 800354a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003552:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003556:	d124      	bne.n	80035a2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d035      	beq.n	80035d0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800356e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003572:	b29b      	uxth	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	6a38      	ldr	r0, [r7, #32]
 8003578:	f003 fc72 	bl	8006e60 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003588:	441a      	add	r2, r3
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800359a:	441a      	add	r2, r3
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	615a      	str	r2, [r3, #20]
 80035a0:	e016      	b.n	80035d0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80035a8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80035ac:	d110      	bne.n	80035d0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035b4:	2208      	movs	r2, #8
 80035b6:	4619      	mov	r1, r3
 80035b8:	6a38      	ldr	r0, [r7, #32]
 80035ba:	f003 fc51 	bl	8006e60 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035ca:	441a      	add	r2, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0210 	orr.w	r2, r2, #16
 80035de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f003 fdcf 	bl	8007188 <USB_ReadInterrupts>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80035f4:	f040 80a7 	bne.w	8003746 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f003 fdd4 	bl	80071ae <USB_ReadDevAllOutEpInterrupt>
 8003606:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003608:	e099      	b.n	800373e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800360a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 808e 	beq.w	8003732 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	4611      	mov	r1, r2
 8003620:	4618      	mov	r0, r3
 8003622:	f003 fdf8 	bl	8007216 <USB_ReadDevOutEPInterrupt>
 8003626:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00c      	beq.n	800364c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800363e:	461a      	mov	r2, r3
 8003640:	2301      	movs	r3, #1
 8003642:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003644:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fea4 	bl	8004394 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00c      	beq.n	8003670 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	015a      	lsls	r2, r3, #5
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	4413      	add	r3, r2
 800365e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003662:	461a      	mov	r2, r3
 8003664:	2308      	movs	r3, #8
 8003666:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003668:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 ff7a 	bl	8004564 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003686:	461a      	mov	r2, r3
 8003688:	2310      	movs	r3, #16
 800368a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d030      	beq.n	80036f8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800369e:	2b80      	cmp	r3, #128	@ 0x80
 80036a0:	d109      	bne.n	80036b6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036b4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80036b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	4413      	add	r3, r2
 80036c8:	3304      	adds	r3, #4
 80036ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	78db      	ldrb	r3, [r3, #3]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d108      	bne.n	80036e6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2200      	movs	r2, #0
 80036d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80036da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	4619      	mov	r1, r3
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f015 fcb1 	bl	8019048 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80036e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036f2:	461a      	mov	r2, r3
 80036f4:	2302      	movs	r3, #2
 80036f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d008      	beq.n	8003714 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800370e:	461a      	mov	r2, r3
 8003710:	2320      	movs	r3, #32
 8003712:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800372a:	461a      	mov	r2, r3
 800372c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003730:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003734:	3301      	adds	r3, #1
 8003736:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800373a:	085b      	lsrs	r3, r3, #1
 800373c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800373e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003740:	2b00      	cmp	r3, #0
 8003742:	f47f af62 	bne.w	800360a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f003 fd1c 	bl	8007188 <USB_ReadInterrupts>
 8003750:	4603      	mov	r3, r0
 8003752:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003756:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800375a:	f040 80db 	bne.w	8003914 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f003 fd3d 	bl	80071e2 <USB_ReadDevAllInEpInterrupt>
 8003768:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800376e:	e0cd      	b.n	800390c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 80c2 	beq.w	8003900 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	4611      	mov	r1, r2
 8003786:	4618      	mov	r0, r3
 8003788:	f003 fd63 	bl	8007252 <USB_ReadDevInEPInterrupt>
 800378c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d057      	beq.n	8003848 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	2201      	movs	r2, #1
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69f9      	ldr	r1, [r7, #28]
 80037b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037b8:	4013      	ands	r3, r2
 80037ba:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80037bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037c8:	461a      	mov	r2, r3
 80037ca:	2301      	movs	r3, #1
 80037cc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	799b      	ldrb	r3, [r3, #6]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d132      	bne.n	800383c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037da:	4613      	mov	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	3320      	adds	r3, #32
 80037e6:	6819      	ldr	r1, [r3, #0]
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ec:	4613      	mov	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4403      	add	r3, r0
 80037f6:	331c      	adds	r3, #28
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4419      	add	r1, r3
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4413      	add	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4403      	add	r3, r0
 800380a:	3320      	adds	r3, #32
 800380c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003810:	2b00      	cmp	r3, #0
 8003812:	d113      	bne.n	800383c <HAL_PCD_IRQHandler+0x3a2>
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	3324      	adds	r3, #36	@ 0x24
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d108      	bne.n	800383c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003834:	461a      	mov	r2, r3
 8003836:	2101      	movs	r1, #1
 8003838:	f003 fd6a 	bl	8007310 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383e:	b2db      	uxtb	r3, r3
 8003840:	4619      	mov	r1, r3
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f015 fb7b 	bl	8018f3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800385e:	461a      	mov	r2, r3
 8003860:	2308      	movs	r3, #8
 8003862:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	d008      	beq.n	8003880 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	4413      	add	r3, r2
 8003876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800387a:	461a      	mov	r2, r3
 800387c:	2310      	movs	r3, #16
 800387e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800388a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003896:	461a      	mov	r2, r3
 8003898:	2340      	movs	r3, #64	@ 0x40
 800389a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d023      	beq.n	80038ee <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80038a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038a8:	6a38      	ldr	r0, [r7, #32]
 80038aa:	f002 fd51 	bl	8006350 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80038ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	3310      	adds	r3, #16
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	4413      	add	r3, r2
 80038be:	3304      	adds	r3, #4
 80038c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	78db      	ldrb	r3, [r3, #3]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d108      	bne.n	80038dc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2200      	movs	r2, #0
 80038ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80038d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	4619      	mov	r1, r3
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f015 fbc8 	bl	801906c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80038dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038e8:	461a      	mov	r2, r3
 80038ea:	2302      	movs	r3, #2
 80038ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80038f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fcbd 	bl	800427a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	3301      	adds	r3, #1
 8003904:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800390c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390e:	2b00      	cmp	r3, #0
 8003910:	f47f af2e 	bne.w	8003770 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f003 fc35 	bl	8007188 <USB_ReadInterrupts>
 800391e:	4603      	mov	r3, r0
 8003920:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003924:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003928:	d122      	bne.n	8003970 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003938:	f023 0301 	bic.w	r3, r3, #1
 800393c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003944:	2b01      	cmp	r3, #1
 8003946:	d108      	bne.n	800395a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003950:	2100      	movs	r1, #0
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fea4 	bl	80046a0 <HAL_PCDEx_LPM_Callback>
 8003958:	e002      	b.n	8003960 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f015 fb66 	bl	801902c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800396e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f003 fc07 	bl	8007188 <USB_ReadInterrupts>
 800397a:	4603      	mov	r3, r0
 800397c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003980:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003984:	d112      	bne.n	80039ac <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b01      	cmp	r3, #1
 8003994:	d102      	bne.n	800399c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f015 fb22 	bl	8018fe0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80039aa:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f003 fbe9 	bl	8007188 <USB_ReadInterrupts>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c0:	f040 80b7 	bne.w	8003b32 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039d2:	f023 0301 	bic.w	r3, r3, #1
 80039d6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2110      	movs	r1, #16
 80039de:	4618      	mov	r0, r3
 80039e0:	f002 fcb6 	bl	8006350 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039e4:	2300      	movs	r3, #0
 80039e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039e8:	e046      	b.n	8003a78 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80039ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039f6:	461a      	mov	r2, r3
 80039f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80039fc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80039fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a0e:	0151      	lsls	r1, r2, #5
 8003a10:	69fa      	ldr	r2, [r7, #28]
 8003a12:	440a      	add	r2, r1
 8003a14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a30:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a42:	0151      	lsls	r1, r2, #5
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	440a      	add	r2, r1
 8003a48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a4c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a62:	0151      	lsls	r1, r2, #5
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	440a      	add	r2, r1
 8003a68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003a70:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a74:	3301      	adds	r3, #1
 8003a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	791b      	ldrb	r3, [r3, #4]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d3b2      	bcc.n	80039ea <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a92:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003a96:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	7bdb      	ldrb	r3, [r3, #15]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d016      	beq.n	8003ace <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aaa:	69fa      	ldr	r2, [r7, #28]
 8003aac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ab0:	f043 030b 	orr.w	r3, r3, #11
 8003ab4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ac6:	f043 030b 	orr.w	r3, r3, #11
 8003aca:	6453      	str	r3, [r2, #68]	@ 0x44
 8003acc:	e015      	b.n	8003afa <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003adc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ae0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003ae4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003af4:	f043 030b 	orr.w	r3, r3, #11
 8003af8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69fa      	ldr	r2, [r7, #28]
 8003b04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b08:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003b0c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f003 fbf7 	bl	8007310 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f003 fb26 	bl	8007188 <USB_ReadInterrupts>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b46:	d123      	bne.n	8003b90 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f003 fbbc 	bl	80072ca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f002 fc73 	bl	8006442 <USB_GetDevSpeed>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	461a      	mov	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681c      	ldr	r4, [r3, #0]
 8003b68:	f001 f9ca 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8003b6c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b72:	461a      	mov	r2, r3
 8003b74:	4620      	mov	r0, r4
 8003b76:	f002 f977 	bl	8005e68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f015 fa07 	bl	8018f8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695a      	ldr	r2, [r3, #20]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003b8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f003 faf7 	bl	8007188 <USB_ReadInterrupts>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d10a      	bne.n	8003bba <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f015 f9e4 	bl	8018f72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f002 0208 	and.w	r2, r2, #8
 8003bb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f003 fae2 	bl	8007188 <USB_ReadInterrupts>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bca:	2b80      	cmp	r3, #128	@ 0x80
 8003bcc:	d123      	bne.n	8003c16 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bda:	2301      	movs	r3, #1
 8003bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bde:	e014      	b.n	8003c0a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003be4:	4613      	mov	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d105      	bne.n	8003c04 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fb0a 	bl	8004218 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c06:	3301      	adds	r3, #1
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	791b      	ldrb	r3, [r3, #4]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d3e4      	bcc.n	8003be0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f003 fab4 	bl	8007188 <USB_ReadInterrupts>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c2a:	d13c      	bne.n	8003ca6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c30:	e02b      	b.n	8003c8a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c46:	4613      	mov	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	3318      	adds	r3, #24
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d115      	bne.n	8003c84 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003c58:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	da12      	bge.n	8003c84 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	3317      	adds	r3, #23
 8003c6e:	2201      	movs	r2, #1
 8003c70:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 faca 	bl	8004218 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c86:	3301      	adds	r3, #1
 8003c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	791b      	ldrb	r3, [r3, #4]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d3cd      	bcc.n	8003c32 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695a      	ldr	r2, [r3, #20]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003ca4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f003 fa6c 	bl	8007188 <USB_ReadInterrupts>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cba:	d156      	bne.n	8003d6a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cc0:	e045      	b.n	8003d4e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d12e      	bne.n	8003d48 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003cea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	da2b      	bge.n	8003d48 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	0c1a      	lsrs	r2, r3, #16
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003cfa:	4053      	eors	r3, r2
 8003cfc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d121      	bne.n	8003d48 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d08:	4613      	mov	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003d16:	2201      	movs	r2, #1
 8003d18:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10a      	bne.n	8003d48 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	69fa      	ldr	r2, [r7, #28]
 8003d3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d44:	6053      	str	r3, [r2, #4]
            break;
 8003d46:	e008      	b.n	8003d5a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	791b      	ldrb	r3, [r3, #4]
 8003d52:	461a      	mov	r2, r3
 8003d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d3b3      	bcc.n	8003cc2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695a      	ldr	r2, [r3, #20]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003d68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f003 fa0a 	bl	8007188 <USB_ReadInterrupts>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d7e:	d10a      	bne.n	8003d96 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f015 f985 	bl	8019090 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695a      	ldr	r2, [r3, #20]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003d94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f003 f9f4 	bl	8007188 <USB_ReadInterrupts>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d115      	bne.n	8003dd6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f015 f975 	bl	80190ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6859      	ldr	r1, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	e000      	b.n	8003dd6 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003dd4:	bf00      	nop
    }
  }
}
 8003dd6:	3734      	adds	r7, #52	@ 0x34
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd90      	pop	{r4, r7, pc}

08003ddc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_PCD_SetAddress+0x1a>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e012      	b.n	8003e1c <HAL_PCD_SetAddress+0x40>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	78fa      	ldrb	r2, [r7, #3]
 8003e02:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	78fa      	ldrb	r2, [r7, #3]
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f003 f953 	bl	80070b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	4608      	mov	r0, r1
 8003e2e:	4611      	mov	r1, r2
 8003e30:	461a      	mov	r2, r3
 8003e32:	4603      	mov	r3, r0
 8003e34:	70fb      	strb	r3, [r7, #3]
 8003e36:	460b      	mov	r3, r1
 8003e38:	803b      	strh	r3, [r7, #0]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	da0f      	bge.n	8003e6a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	f003 020f 	and.w	r2, r3, #15
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	3310      	adds	r3, #16
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	3304      	adds	r3, #4
 8003e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	705a      	strb	r2, [r3, #1]
 8003e68:	e00f      	b.n	8003e8a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e6a:	78fb      	ldrb	r3, [r7, #3]
 8003e6c:	f003 020f 	and.w	r2, r3, #15
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	4413      	add	r3, r2
 8003e80:	3304      	adds	r3, #4
 8003e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003e96:	883b      	ldrh	r3, [r7, #0]
 8003e98:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	78ba      	ldrb	r2, [r7, #2]
 8003ea4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	785b      	ldrb	r3, [r3, #1]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d004      	beq.n	8003eb8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003eb8:	78bb      	ldrb	r3, [r7, #2]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d102      	bne.n	8003ec4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_PCD_EP_Open+0xae>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e00e      	b.n	8003ef0 <HAL_PCD_EP_Open+0xcc>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68f9      	ldr	r1, [r7, #12]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f002 fad3 	bl	800648c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003eee:	7afb      	ldrb	r3, [r7, #11]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	da0f      	bge.n	8003f2c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	f003 020f 	and.w	r2, r3, #15
 8003f12:	4613      	mov	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	3310      	adds	r3, #16
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	4413      	add	r3, r2
 8003f20:	3304      	adds	r3, #4
 8003f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2201      	movs	r2, #1
 8003f28:	705a      	strb	r2, [r3, #1]
 8003f2a:	e00f      	b.n	8003f4c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	f003 020f 	and.w	r2, r3, #15
 8003f32:	4613      	mov	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	4413      	add	r3, r2
 8003f42:	3304      	adds	r3, #4
 8003f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_PCD_EP_Close+0x6e>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e00e      	b.n	8003f84 <HAL_PCD_EP_Close+0x8c>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68f9      	ldr	r1, [r7, #12]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f002 fb11 	bl	800659c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f9c:	7afb      	ldrb	r3, [r7, #11]
 8003f9e:	f003 020f 	and.w	r2, r3, #15
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fce:	7afb      	ldrb	r3, [r7, #11]
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	799b      	ldrb	r3, [r3, #6]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d102      	bne.n	8003fe8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	799b      	ldrb	r3, [r3, #6]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	6979      	ldr	r1, [r7, #20]
 8003ff4:	f002 fbae 	bl	8006754 <USB_EPStartXfer>

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	460b      	mov	r3, r1
 800400c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	f003 020f 	and.w	r2, r3, #15
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004024:	681b      	ldr	r3, [r3, #0]
}
 8004026:	4618      	mov	r0, r3
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b086      	sub	sp, #24
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
 800403e:	460b      	mov	r3, r1
 8004040:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004042:	7afb      	ldrb	r3, [r7, #11]
 8004044:	f003 020f 	and.w	r2, r3, #15
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	3310      	adds	r3, #16
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4413      	add	r3, r2
 8004056:	3304      	adds	r3, #4
 8004058:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2200      	movs	r2, #0
 800406a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2201      	movs	r2, #1
 8004070:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004072:	7afb      	ldrb	r3, [r7, #11]
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	b2da      	uxtb	r2, r3
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	799b      	ldrb	r3, [r3, #6]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d102      	bne.n	800408c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	799b      	ldrb	r3, [r3, #6]
 8004094:	461a      	mov	r2, r3
 8004096:	6979      	ldr	r1, [r7, #20]
 8004098:	f002 fb5c 	bl	8006754 <USB_EPStartXfer>

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b084      	sub	sp, #16
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	460b      	mov	r3, r1
 80040b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	7912      	ldrb	r2, [r2, #4]
 80040bc:	4293      	cmp	r3, r2
 80040be:	d901      	bls.n	80040c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e04f      	b.n	8004164 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	da0f      	bge.n	80040ec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040cc:	78fb      	ldrb	r3, [r7, #3]
 80040ce:	f003 020f 	and.w	r2, r3, #15
 80040d2:	4613      	mov	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	3310      	adds	r3, #16
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	4413      	add	r3, r2
 80040e0:	3304      	adds	r3, #4
 80040e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	705a      	strb	r2, [r3, #1]
 80040ea:	e00d      	b.n	8004108 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040ec:	78fa      	ldrb	r2, [r7, #3]
 80040ee:	4613      	mov	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4413      	add	r3, r2
 80040fe:	3304      	adds	r3, #4
 8004100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2201      	movs	r2, #1
 800410c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	b2da      	uxtb	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_PCD_EP_SetStall+0x82>
 8004124:	2302      	movs	r3, #2
 8004126:	e01d      	b.n	8004164 <HAL_PCD_EP_SetStall+0xbe>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68f9      	ldr	r1, [r7, #12]
 8004136:	4618      	mov	r0, r3
 8004138:	f002 feea 	bl	8006f10 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	2b00      	cmp	r3, #0
 8004144:	d109      	bne.n	800415a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	7999      	ldrb	r1, [r3, #6]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004154:	461a      	mov	r2, r3
 8004156:	f003 f8db 	bl	8007310 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	7912      	ldrb	r2, [r2, #4]
 8004182:	4293      	cmp	r3, r2
 8004184:	d901      	bls.n	800418a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e042      	b.n	8004210 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800418a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800418e:	2b00      	cmp	r3, #0
 8004190:	da0f      	bge.n	80041b2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	f003 020f 	and.w	r2, r3, #15
 8004198:	4613      	mov	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	3310      	adds	r3, #16
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	4413      	add	r3, r2
 80041a6:	3304      	adds	r3, #4
 80041a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	705a      	strb	r2, [r3, #1]
 80041b0:	e00f      	b.n	80041d2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041b2:	78fb      	ldrb	r3, [r7, #3]
 80041b4:	f003 020f 	and.w	r2, r3, #15
 80041b8:	4613      	mov	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4413      	add	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	4413      	add	r3, r2
 80041c8:	3304      	adds	r3, #4
 80041ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	f003 030f 	and.w	r3, r3, #15
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_PCD_EP_ClrStall+0x86>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e00e      	b.n	8004210 <HAL_PCD_EP_ClrStall+0xa4>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68f9      	ldr	r1, [r7, #12]
 8004200:	4618      	mov	r0, r3
 8004202:	f002 fef3 	bl	8006fec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004228:	2b00      	cmp	r3, #0
 800422a:	da0c      	bge.n	8004246 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	f003 020f 	and.w	r2, r3, #15
 8004232:	4613      	mov	r3, r2
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	3310      	adds	r3, #16
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	4413      	add	r3, r2
 8004240:	3304      	adds	r3, #4
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	e00c      	b.n	8004260 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	f003 020f 	and.w	r2, r3, #15
 800424c:	4613      	mov	r3, r2
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	4413      	add	r3, r2
 800425c:	3304      	adds	r3, #4
 800425e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68f9      	ldr	r1, [r7, #12]
 8004266:	4618      	mov	r0, r3
 8004268:	f002 fd12 	bl	8006c90 <USB_EPStopXfer>
 800426c:	4603      	mov	r3, r0
 800426e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004270:	7afb      	ldrb	r3, [r7, #11]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b08a      	sub	sp, #40	@ 0x28
 800427e:	af02      	add	r7, sp, #8
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	3310      	adds	r3, #16
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	4413      	add	r3, r2
 800429e:	3304      	adds	r3, #4
 80042a0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d901      	bls.n	80042b2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e06b      	b.n	800438a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	69fa      	ldr	r2, [r7, #28]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d902      	bls.n	80042ce <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	3303      	adds	r3, #3
 80042d2:	089b      	lsrs	r3, r3, #2
 80042d4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042d6:	e02a      	b.n	800432e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	69fa      	ldr	r2, [r7, #28]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d902      	bls.n	80042f4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	3303      	adds	r3, #3
 80042f8:	089b      	lsrs	r3, r3, #2
 80042fa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	68d9      	ldr	r1, [r3, #12]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	b2da      	uxtb	r2, r3
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	4603      	mov	r3, r0
 8004310:	6978      	ldr	r0, [r7, #20]
 8004312:	f002 fd67 	bl	8006de4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	441a      	add	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	695a      	ldr	r2, [r3, #20]
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	441a      	add	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	429a      	cmp	r2, r3
 8004342:	d809      	bhi.n	8004358 <PCD_WriteEmptyTxFifo+0xde>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	695a      	ldr	r2, [r3, #20]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800434c:	429a      	cmp	r2, r3
 800434e:	d203      	bcs.n	8004358 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1bf      	bne.n	80042d8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	429a      	cmp	r2, r3
 8004362:	d811      	bhi.n	8004388 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	2201      	movs	r2, #1
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004378:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	43db      	mvns	r3, r3
 800437e:	6939      	ldr	r1, [r7, #16]
 8004380:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004384:	4013      	ands	r3, r2
 8004386:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	333c      	adds	r3, #60	@ 0x3c
 80043ac:	3304      	adds	r3, #4
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	799b      	ldrb	r3, [r3, #6]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d17b      	bne.n	80044c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d015      	beq.n	8004400 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	4a61      	ldr	r2, [pc, #388]	@ (800455c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	f240 80b9 	bls.w	8004550 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80b3 	beq.w	8004550 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043f6:	461a      	mov	r2, r3
 80043f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043fc:	6093      	str	r3, [r2, #8]
 80043fe:	e0a7      	b.n	8004550 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004416:	461a      	mov	r2, r3
 8004418:	2320      	movs	r3, #32
 800441a:	6093      	str	r3, [r2, #8]
 800441c:	e098      	b.n	8004550 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004424:	2b00      	cmp	r3, #0
 8004426:	f040 8093 	bne.w	8004550 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	4a4b      	ldr	r2, [pc, #300]	@ (800455c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d90f      	bls.n	8004452 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004448:	461a      	mov	r2, r3
 800444a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800444e:	6093      	str	r3, [r2, #8]
 8004450:	e07e      	b.n	8004550 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	4613      	mov	r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	4413      	add	r3, r2
 8004464:	3304      	adds	r3, #4
 8004466:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a1a      	ldr	r2, [r3, #32]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	0159      	lsls	r1, r3, #5
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	440b      	add	r3, r1
 8004474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800447e:	1ad2      	subs	r2, r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d114      	bne.n	80044b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800449c:	461a      	mov	r2, r3
 800449e:	2101      	movs	r1, #1
 80044a0:	f002 ff36 	bl	8007310 <USB_EP0_OutStart>
 80044a4:	e006      	b.n	80044b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	441a      	add	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	4619      	mov	r1, r3
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f014 fd24 	bl	8018f08 <HAL_PCD_DataOutStageCallback>
 80044c0:	e046      	b.n	8004550 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	4a26      	ldr	r2, [pc, #152]	@ (8004560 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d124      	bne.n	8004514 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044e0:	461a      	mov	r2, r3
 80044e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044e6:	6093      	str	r3, [r2, #8]
 80044e8:	e032      	b.n	8004550 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004500:	461a      	mov	r2, r3
 8004502:	2320      	movs	r3, #32
 8004504:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	4619      	mov	r1, r3
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f014 fcfb 	bl	8018f08 <HAL_PCD_DataOutStageCallback>
 8004512:	e01d      	b.n	8004550 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d114      	bne.n	8004544 <PCD_EP_OutXfrComplete_int+0x1b0>
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	4613      	mov	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d108      	bne.n	8004544 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800453c:	461a      	mov	r2, r3
 800453e:	2100      	movs	r1, #0
 8004540:	f002 fee6 	bl	8007310 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	4619      	mov	r1, r3
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f014 fcdc 	bl	8018f08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3720      	adds	r7, #32
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	4f54300a 	.word	0x4f54300a
 8004560:	4f54310a 	.word	0x4f54310a

08004564 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	333c      	adds	r3, #60	@ 0x3c
 800457c:	3304      	adds	r3, #4
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a15      	ldr	r2, [pc, #84]	@ (80045ec <PCD_EP_OutSetupPacket_int+0x88>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d90e      	bls.n	80045b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d009      	beq.n	80045b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045b0:	461a      	mov	r2, r3
 80045b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f014 fc93 	bl	8018ee4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4a0a      	ldr	r2, [pc, #40]	@ (80045ec <PCD_EP_OutSetupPacket_int+0x88>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d90c      	bls.n	80045e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	799b      	ldrb	r3, [r3, #6]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d108      	bne.n	80045e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80045d8:	461a      	mov	r2, r3
 80045da:	2101      	movs	r1, #1
 80045dc:	f002 fe98 	bl	8007310 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	4f54300a 	.word	0x4f54300a

080045f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	70fb      	strb	r3, [r7, #3]
 80045fc:	4613      	mov	r3, r2
 80045fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004606:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d107      	bne.n	800461e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800460e:	883b      	ldrh	r3, [r7, #0]
 8004610:	0419      	lsls	r1, r3, #16
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	430a      	orrs	r2, r1
 800461a:	629a      	str	r2, [r3, #40]	@ 0x28
 800461c:	e028      	b.n	8004670 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004624:	0c1b      	lsrs	r3, r3, #16
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	4413      	add	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800462c:	2300      	movs	r3, #0
 800462e:	73fb      	strb	r3, [r7, #15]
 8004630:	e00d      	b.n	800464e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	7bfb      	ldrb	r3, [r7, #15]
 8004638:	3340      	adds	r3, #64	@ 0x40
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	0c1b      	lsrs	r3, r3, #16
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	4413      	add	r3, r2
 8004646:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	3301      	adds	r3, #1
 800464c:	73fb      	strb	r3, [r7, #15]
 800464e:	7bfa      	ldrb	r2, [r7, #15]
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	3b01      	subs	r3, #1
 8004654:	429a      	cmp	r2, r3
 8004656:	d3ec      	bcc.n	8004632 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004658:	883b      	ldrh	r3, [r7, #0]
 800465a:	0418      	lsls	r0, r3, #16
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6819      	ldr	r1, [r3, #0]
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	3b01      	subs	r3, #1
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	4302      	orrs	r2, r0
 8004668:	3340      	adds	r3, #64	@ 0x40
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	460b      	mov	r3, r1
 8004688:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	887a      	ldrh	r2, [r7, #2]
 8004690:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	460b      	mov	r3, r1
 80046aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e267      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d075      	beq.n	80047c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046d6:	4b88      	ldr	r3, [pc, #544]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 030c 	and.w	r3, r3, #12
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d00c      	beq.n	80046fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046e2:	4b85      	ldr	r3, [pc, #532]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d112      	bne.n	8004714 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ee:	4b82      	ldr	r3, [pc, #520]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046fa:	d10b      	bne.n	8004714 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046fc:	4b7e      	ldr	r3, [pc, #504]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d05b      	beq.n	80047c0 <HAL_RCC_OscConfig+0x108>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d157      	bne.n	80047c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e242      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800471c:	d106      	bne.n	800472c <HAL_RCC_OscConfig+0x74>
 800471e:	4b76      	ldr	r3, [pc, #472]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a75      	ldr	r2, [pc, #468]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	e01d      	b.n	8004768 <HAL_RCC_OscConfig+0xb0>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004734:	d10c      	bne.n	8004750 <HAL_RCC_OscConfig+0x98>
 8004736:	4b70      	ldr	r3, [pc, #448]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a6f      	ldr	r2, [pc, #444]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800473c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	4b6d      	ldr	r3, [pc, #436]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a6c      	ldr	r2, [pc, #432]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e00b      	b.n	8004768 <HAL_RCC_OscConfig+0xb0>
 8004750:	4b69      	ldr	r3, [pc, #420]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a68      	ldr	r2, [pc, #416]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	4b66      	ldr	r3, [pc, #408]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a65      	ldr	r2, [pc, #404]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d013      	beq.n	8004798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004770:	f7fd f9e4 	bl	8001b3c <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004778:	f7fd f9e0 	bl	8001b3c <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b64      	cmp	r3, #100	@ 0x64
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e207      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	4b5b      	ldr	r3, [pc, #364]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f0      	beq.n	8004778 <HAL_RCC_OscConfig+0xc0>
 8004796:	e014      	b.n	80047c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004798:	f7fd f9d0 	bl	8001b3c <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047a0:	f7fd f9cc 	bl	8001b3c <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b64      	cmp	r3, #100	@ 0x64
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e1f3      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047b2:	4b51      	ldr	r3, [pc, #324]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0xe8>
 80047be:	e000      	b.n	80047c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d063      	beq.n	8004896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047ce:	4b4a      	ldr	r3, [pc, #296]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 030c 	and.w	r3, r3, #12
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00b      	beq.n	80047f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047da:	4b47      	ldr	r3, [pc, #284]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d11c      	bne.n	8004820 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047e6:	4b44      	ldr	r3, [pc, #272]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d116      	bne.n	8004820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047f2:	4b41      	ldr	r3, [pc, #260]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d005      	beq.n	800480a <HAL_RCC_OscConfig+0x152>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d001      	beq.n	800480a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e1c7      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480a:	4b3b      	ldr	r3, [pc, #236]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	4937      	ldr	r1, [pc, #220]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800481a:	4313      	orrs	r3, r2
 800481c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800481e:	e03a      	b.n	8004896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d020      	beq.n	800486a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004828:	4b34      	ldr	r3, [pc, #208]	@ (80048fc <HAL_RCC_OscConfig+0x244>)
 800482a:	2201      	movs	r2, #1
 800482c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482e:	f7fd f985 	bl	8001b3c <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004836:	f7fd f981 	bl	8001b3c <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e1a8      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004848:	4b2b      	ldr	r3, [pc, #172]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f0      	beq.n	8004836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004854:	4b28      	ldr	r3, [pc, #160]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	4925      	ldr	r1, [pc, #148]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004864:	4313      	orrs	r3, r2
 8004866:	600b      	str	r3, [r1, #0]
 8004868:	e015      	b.n	8004896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800486a:	4b24      	ldr	r3, [pc, #144]	@ (80048fc <HAL_RCC_OscConfig+0x244>)
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fd f964 	bl	8001b3c <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004878:	f7fd f960 	bl	8001b3c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e187      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800488a:	4b1b      	ldr	r3, [pc, #108]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d036      	beq.n	8004910 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d016      	beq.n	80048d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048aa:	4b15      	ldr	r3, [pc, #84]	@ (8004900 <HAL_RCC_OscConfig+0x248>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b0:	f7fd f944 	bl	8001b3c <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048b8:	f7fd f940 	bl	8001b3c <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e167      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ca:	4b0b      	ldr	r3, [pc, #44]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80048cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCC_OscConfig+0x200>
 80048d6:	e01b      	b.n	8004910 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048d8:	4b09      	ldr	r3, [pc, #36]	@ (8004900 <HAL_RCC_OscConfig+0x248>)
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048de:	f7fd f92d 	bl	8001b3c <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e4:	e00e      	b.n	8004904 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048e6:	f7fd f929 	bl	8001b3c <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d907      	bls.n	8004904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e150      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
 80048f8:	40023800 	.word	0x40023800
 80048fc:	42470000 	.word	0x42470000
 8004900:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004904:	4b88      	ldr	r3, [pc, #544]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1ea      	bne.n	80048e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8097 	beq.w	8004a4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800491e:	2300      	movs	r3, #0
 8004920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004922:	4b81      	ldr	r3, [pc, #516]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10f      	bne.n	800494e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800492e:	2300      	movs	r3, #0
 8004930:	60bb      	str	r3, [r7, #8]
 8004932:	4b7d      	ldr	r3, [pc, #500]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004936:	4a7c      	ldr	r2, [pc, #496]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800493c:	6413      	str	r3, [r2, #64]	@ 0x40
 800493e:	4b7a      	ldr	r3, [pc, #488]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004946:	60bb      	str	r3, [r7, #8]
 8004948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800494a:	2301      	movs	r3, #1
 800494c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494e:	4b77      	ldr	r3, [pc, #476]	@ (8004b2c <HAL_RCC_OscConfig+0x474>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004956:	2b00      	cmp	r3, #0
 8004958:	d118      	bne.n	800498c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800495a:	4b74      	ldr	r3, [pc, #464]	@ (8004b2c <HAL_RCC_OscConfig+0x474>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a73      	ldr	r2, [pc, #460]	@ (8004b2c <HAL_RCC_OscConfig+0x474>)
 8004960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004966:	f7fd f8e9 	bl	8001b3c <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496e:	f7fd f8e5 	bl	8001b3c <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e10c      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004980:	4b6a      	ldr	r3, [pc, #424]	@ (8004b2c <HAL_RCC_OscConfig+0x474>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d106      	bne.n	80049a2 <HAL_RCC_OscConfig+0x2ea>
 8004994:	4b64      	ldr	r3, [pc, #400]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004998:	4a63      	ldr	r2, [pc, #396]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	6713      	str	r3, [r2, #112]	@ 0x70
 80049a0:	e01c      	b.n	80049dc <HAL_RCC_OscConfig+0x324>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b05      	cmp	r3, #5
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCC_OscConfig+0x30c>
 80049aa:	4b5f      	ldr	r3, [pc, #380]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ae:	4a5e      	ldr	r2, [pc, #376]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049b0:	f043 0304 	orr.w	r3, r3, #4
 80049b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80049b6:	4b5c      	ldr	r3, [pc, #368]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ba:	4a5b      	ldr	r2, [pc, #364]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80049c2:	e00b      	b.n	80049dc <HAL_RCC_OscConfig+0x324>
 80049c4:	4b58      	ldr	r3, [pc, #352]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c8:	4a57      	ldr	r2, [pc, #348]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049ca:	f023 0301 	bic.w	r3, r3, #1
 80049ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80049d0:	4b55      	ldr	r3, [pc, #340]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d4:	4a54      	ldr	r2, [pc, #336]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049d6:	f023 0304 	bic.w	r3, r3, #4
 80049da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d015      	beq.n	8004a10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e4:	f7fd f8aa 	bl	8001b3c <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ea:	e00a      	b.n	8004a02 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ec:	f7fd f8a6 	bl	8001b3c <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e0cb      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a02:	4b49      	ldr	r3, [pc, #292]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0ee      	beq.n	80049ec <HAL_RCC_OscConfig+0x334>
 8004a0e:	e014      	b.n	8004a3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a10:	f7fd f894 	bl	8001b3c <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a16:	e00a      	b.n	8004a2e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a18:	f7fd f890 	bl	8001b3c <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e0b5      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1ee      	bne.n	8004a18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d105      	bne.n	8004a4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a40:	4b39      	ldr	r3, [pc, #228]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a44:	4a38      	ldr	r2, [pc, #224]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80a1 	beq.w	8004b98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a56:	4b34      	ldr	r3, [pc, #208]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d05c      	beq.n	8004b1c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d141      	bne.n	8004aee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a6a:	4b31      	ldr	r3, [pc, #196]	@ (8004b30 <HAL_RCC_OscConfig+0x478>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a70:	f7fd f864 	bl	8001b3c <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a78:	f7fd f860 	bl	8001b3c <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e087      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a8a:	4b27      	ldr	r3, [pc, #156]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69da      	ldr	r2, [r3, #28]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa4:	019b      	lsls	r3, r3, #6
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aac:	085b      	lsrs	r3, r3, #1
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab8:	061b      	lsls	r3, r3, #24
 8004aba:	491b      	ldr	r1, [pc, #108]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8004b30 <HAL_RCC_OscConfig+0x478>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac6:	f7fd f839 	bl	8001b3c <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ace:	f7fd f835 	bl	8001b3c <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e05c      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae0:	4b11      	ldr	r3, [pc, #68]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f0      	beq.n	8004ace <HAL_RCC_OscConfig+0x416>
 8004aec:	e054      	b.n	8004b98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aee:	4b10      	ldr	r3, [pc, #64]	@ (8004b30 <HAL_RCC_OscConfig+0x478>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af4:	f7fd f822 	bl	8001b3c <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004afc:	f7fd f81e 	bl	8001b3c <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e045      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0e:	4b06      	ldr	r3, [pc, #24]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x444>
 8004b1a:	e03d      	b.n	8004b98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e038      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	40007000 	.word	0x40007000
 8004b30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b34:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba4 <HAL_RCC_OscConfig+0x4ec>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d028      	beq.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d121      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d11a      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b64:	4013      	ands	r3, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d111      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7a:	085b      	lsrs	r3, r3, #1
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d107      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40023800 	.word	0x40023800

08004ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0cc      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bbc:	4b68      	ldr	r3, [pc, #416]	@ (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d90c      	bls.n	8004be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bca:	4b65      	ldr	r3, [pc, #404]	@ (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd2:	4b63      	ldr	r3, [pc, #396]	@ (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0b8      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d020      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bfc:	4b59      	ldr	r3, [pc, #356]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	4a58      	ldr	r2, [pc, #352]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c14:	4b53      	ldr	r3, [pc, #332]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	4a52      	ldr	r2, [pc, #328]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c20:	4b50      	ldr	r3, [pc, #320]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	494d      	ldr	r1, [pc, #308]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d044      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d107      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c46:	4b47      	ldr	r3, [pc, #284]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d119      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e07f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d003      	beq.n	8004c66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d107      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c66:	4b3f      	ldr	r3, [pc, #252]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e06f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c76:	4b3b      	ldr	r3, [pc, #236]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e067      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c86:	4b37      	ldr	r3, [pc, #220]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f023 0203 	bic.w	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4934      	ldr	r1, [pc, #208]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c98:	f7fc ff50 	bl	8001b3c <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca0:	f7fc ff4c 	bl	8001b3c <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e04f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 020c 	and.w	r2, r3, #12
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d1eb      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc8:	4b25      	ldr	r3, [pc, #148]	@ (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d20c      	bcs.n	8004cf0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd6:	4b22      	ldr	r3, [pc, #136]	@ (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cde:	4b20      	ldr	r3, [pc, #128]	@ (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e032      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cfc:	4b19      	ldr	r3, [pc, #100]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4916      	ldr	r1, [pc, #88]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d1a:	4b12      	ldr	r3, [pc, #72]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	490e      	ldr	r1, [pc, #56]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d2e:	f000 f821 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 8004d32:	4602      	mov	r2, r0
 8004d34:	4b0b      	ldr	r3, [pc, #44]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	091b      	lsrs	r3, r3, #4
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	490a      	ldr	r1, [pc, #40]	@ (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004d40:	5ccb      	ldrb	r3, [r1, r3]
 8004d42:	fa22 f303 	lsr.w	r3, r2, r3
 8004d46:	4a09      	ldr	r2, [pc, #36]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d4a:	4b09      	ldr	r3, [pc, #36]	@ (8004d70 <HAL_RCC_ClockConfig+0x1c8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fc fb24 	bl	800139c <HAL_InitTick>

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	40023c00 	.word	0x40023c00
 8004d64:	40023800 	.word	0x40023800
 8004d68:	0801f154 	.word	0x0801f154
 8004d6c:	20000000 	.word	0x20000000
 8004d70:	20000004 	.word	0x20000004

08004d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d78:	b090      	sub	sp, #64	@ 0x40
 8004d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d8c:	4b59      	ldr	r3, [pc, #356]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 030c 	and.w	r3, r3, #12
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d00d      	beq.n	8004db4 <HAL_RCC_GetSysClockFreq+0x40>
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	f200 80a1 	bhi.w	8004ee0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_RCC_GetSysClockFreq+0x34>
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d003      	beq.n	8004dae <HAL_RCC_GetSysClockFreq+0x3a>
 8004da6:	e09b      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004da8:	4b53      	ldr	r3, [pc, #332]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004daa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004dac:	e09b      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dae:	4b53      	ldr	r3, [pc, #332]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x188>)
 8004db0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004db2:	e098      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004db4:	4b4f      	ldr	r3, [pc, #316]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dbc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dbe:	4b4d      	ldr	r3, [pc, #308]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d028      	beq.n	8004e1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dca:	4b4a      	ldr	r3, [pc, #296]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	099b      	lsrs	r3, r3, #6
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	623b      	str	r3, [r7, #32]
 8004dd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ddc:	2100      	movs	r1, #0
 8004dde:	4b47      	ldr	r3, [pc, #284]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x188>)
 8004de0:	fb03 f201 	mul.w	r2, r3, r1
 8004de4:	2300      	movs	r3, #0
 8004de6:	fb00 f303 	mul.w	r3, r0, r3
 8004dea:	4413      	add	r3, r2
 8004dec:	4a43      	ldr	r2, [pc, #268]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x188>)
 8004dee:	fba0 1202 	umull	r1, r2, r0, r2
 8004df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004df4:	460a      	mov	r2, r1
 8004df6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dfa:	4413      	add	r3, r2
 8004dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e00:	2200      	movs	r2, #0
 8004e02:	61bb      	str	r3, [r7, #24]
 8004e04:	61fa      	str	r2, [r7, #28]
 8004e06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004e0e:	f7fb fa37 	bl	8000280 <__aeabi_uldivmod>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	4613      	mov	r3, r2
 8004e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e1a:	e053      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e1c:	4b35      	ldr	r3, [pc, #212]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	099b      	lsrs	r3, r3, #6
 8004e22:	2200      	movs	r2, #0
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	617a      	str	r2, [r7, #20]
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004e2e:	f04f 0b00 	mov.w	fp, #0
 8004e32:	4652      	mov	r2, sl
 8004e34:	465b      	mov	r3, fp
 8004e36:	f04f 0000 	mov.w	r0, #0
 8004e3a:	f04f 0100 	mov.w	r1, #0
 8004e3e:	0159      	lsls	r1, r3, #5
 8004e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e44:	0150      	lsls	r0, r2, #5
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	ebb2 080a 	subs.w	r8, r2, sl
 8004e4e:	eb63 090b 	sbc.w	r9, r3, fp
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e66:	ebb2 0408 	subs.w	r4, r2, r8
 8004e6a:	eb63 0509 	sbc.w	r5, r3, r9
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	00eb      	lsls	r3, r5, #3
 8004e78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e7c:	00e2      	lsls	r2, r4, #3
 8004e7e:	4614      	mov	r4, r2
 8004e80:	461d      	mov	r5, r3
 8004e82:	eb14 030a 	adds.w	r3, r4, sl
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	eb45 030b 	adc.w	r3, r5, fp
 8004e8c:	607b      	str	r3, [r7, #4]
 8004e8e:	f04f 0200 	mov.w	r2, #0
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	028b      	lsls	r3, r1, #10
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ea4:	4621      	mov	r1, r4
 8004ea6:	028a      	lsls	r2, r1, #10
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eae:	2200      	movs	r2, #0
 8004eb0:	60bb      	str	r3, [r7, #8]
 8004eb2:	60fa      	str	r2, [r7, #12]
 8004eb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eb8:	f7fb f9e2 	bl	8000280 <__aeabi_uldivmod>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	0c1b      	lsrs	r3, r3, #16
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	3301      	adds	r3, #1
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004ed4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004edc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ede:	e002      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ee0:	4b05      	ldr	r3, [pc, #20]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3740      	adds	r7, #64	@ 0x40
 8004eec:	46bd      	mov	sp, r7
 8004eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	00f42400 	.word	0x00f42400
 8004efc:	017d7840 	.word	0x017d7840

08004f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f04:	4b03      	ldr	r3, [pc, #12]	@ (8004f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f06:	681b      	ldr	r3, [r3, #0]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	20000000 	.word	0x20000000

08004f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f1c:	f7ff fff0 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004f20:	4602      	mov	r2, r0
 8004f22:	4b05      	ldr	r3, [pc, #20]	@ (8004f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	0a9b      	lsrs	r3, r3, #10
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	4903      	ldr	r1, [pc, #12]	@ (8004f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f2e:	5ccb      	ldrb	r3, [r1, r3]
 8004f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	0801f164 	.word	0x0801f164

08004f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f44:	f7ff ffdc 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	4b05      	ldr	r3, [pc, #20]	@ (8004f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	0b5b      	lsrs	r3, r3, #13
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	4903      	ldr	r1, [pc, #12]	@ (8004f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f56:	5ccb      	ldrb	r3, [r1, r3]
 8004f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40023800 	.word	0x40023800
 8004f64:	0801f164 	.word	0x0801f164

08004f68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	220f      	movs	r2, #15
 8004f76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f78:	4b12      	ldr	r3, [pc, #72]	@ (8004fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 0203 	and.w	r2, r3, #3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f84:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f90:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f9c:	4b09      	ldr	r3, [pc, #36]	@ (8004fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	08db      	lsrs	r3, r3, #3
 8004fa2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004faa:	4b07      	ldr	r3, [pc, #28]	@ (8004fc8 <HAL_RCC_GetClockConfig+0x60>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0207 	and.w	r2, r3, #7
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	601a      	str	r2, [r3, #0]
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	40023c00 	.word	0x40023c00

08004fcc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e038      	b.n	8005054 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f7fc f9c6 	bl	8001388 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3308      	adds	r3, #8
 8005004:	4619      	mov	r1, r3
 8005006:	4610      	mov	r0, r2
 8005008:	f000 fdfa 	bl	8005c00 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	461a      	mov	r2, r3
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	f000 fe5c 	bl	8005cd4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6858      	ldr	r0, [r3, #4]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	f000 fe81 	bl	8005d30 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	6892      	ldr	r2, [r2, #8]
 8005036:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	6892      	ldr	r2, [r2, #8]
 8005042:	f041 0101 	orr.w	r1, r1, #1
 8005046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e041      	b.n	80050f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fc f86a 	bl	800115c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3304      	adds	r3, #4
 8005098:	4619      	mov	r1, r3
 800509a:	4610      	mov	r0, r2
 800509c:	f000 f9b6 	bl	800540c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b01      	cmp	r3, #1
 800510e:	d001      	beq.n	8005114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e04e      	b.n	80051b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a23      	ldr	r2, [pc, #140]	@ (80051c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d022      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800513e:	d01d      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1f      	ldr	r2, [pc, #124]	@ (80051c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d018      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1e      	ldr	r2, [pc, #120]	@ (80051c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d013      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a1c      	ldr	r2, [pc, #112]	@ (80051cc <HAL_TIM_Base_Start_IT+0xd0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00e      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1b      	ldr	r2, [pc, #108]	@ (80051d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d009      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a19      	ldr	r2, [pc, #100]	@ (80051d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d004      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a18      	ldr	r2, [pc, #96]	@ (80051d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d111      	bne.n	80051a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b06      	cmp	r3, #6
 800518c:	d010      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0201 	orr.w	r2, r2, #1
 800519c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519e:	e007      	b.n	80051b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40010000 	.word	0x40010000
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40000800 	.word	0x40000800
 80051cc:	40000c00 	.word	0x40000c00
 80051d0:	40010400 	.word	0x40010400
 80051d4:	40014000 	.word	0x40014000
 80051d8:	40001800 	.word	0x40001800

080051dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d020      	beq.n	8005240 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01b      	beq.n	8005240 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0202 	mvn.w	r2, #2
 8005210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f8d2 	bl	80053d0 <HAL_TIM_IC_CaptureCallback>
 800522c:	e005      	b.n	800523a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f8c4 	bl	80053bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f8d5 	bl	80053e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	d020      	beq.n	800528c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01b      	beq.n	800528c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0204 	mvn.w	r2, #4
 800525c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2202      	movs	r2, #2
 8005262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f8ac 	bl	80053d0 <HAL_TIM_IC_CaptureCallback>
 8005278:	e005      	b.n	8005286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f89e 	bl	80053bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f8af 	bl	80053e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d020      	beq.n	80052d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01b      	beq.n	80052d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0208 	mvn.w	r2, #8
 80052a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2204      	movs	r2, #4
 80052ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f886 	bl	80053d0 <HAL_TIM_IC_CaptureCallback>
 80052c4:	e005      	b.n	80052d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f878 	bl	80053bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f889 	bl	80053e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d020      	beq.n	8005324 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01b      	beq.n	8005324 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0210 	mvn.w	r2, #16
 80052f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2208      	movs	r2, #8
 80052fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f860 	bl	80053d0 <HAL_TIM_IC_CaptureCallback>
 8005310:	e005      	b.n	800531e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f852 	bl	80053bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f863 	bl	80053e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00c      	beq.n	8005348 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	d007      	beq.n	8005348 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0201 	mvn.w	r2, #1
 8005340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fb fd9a 	bl	8000e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00c      	beq.n	800536c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f97c 	bl	8005664 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00c      	beq.n	8005390 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f834 	bl	80053f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00c      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0220 	mvn.w	r2, #32
 80053ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f94e 	bl	8005650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053b4:	bf00      	nop
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a43      	ldr	r2, [pc, #268]	@ (800552c <TIM_Base_SetConfig+0x120>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d013      	beq.n	800544c <TIM_Base_SetConfig+0x40>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800542a:	d00f      	beq.n	800544c <TIM_Base_SetConfig+0x40>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a40      	ldr	r2, [pc, #256]	@ (8005530 <TIM_Base_SetConfig+0x124>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00b      	beq.n	800544c <TIM_Base_SetConfig+0x40>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a3f      	ldr	r2, [pc, #252]	@ (8005534 <TIM_Base_SetConfig+0x128>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d007      	beq.n	800544c <TIM_Base_SetConfig+0x40>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a3e      	ldr	r2, [pc, #248]	@ (8005538 <TIM_Base_SetConfig+0x12c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d003      	beq.n	800544c <TIM_Base_SetConfig+0x40>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a3d      	ldr	r2, [pc, #244]	@ (800553c <TIM_Base_SetConfig+0x130>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d108      	bne.n	800545e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a32      	ldr	r2, [pc, #200]	@ (800552c <TIM_Base_SetConfig+0x120>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d02b      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800546c:	d027      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a2f      	ldr	r2, [pc, #188]	@ (8005530 <TIM_Base_SetConfig+0x124>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d023      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a2e      	ldr	r2, [pc, #184]	@ (8005534 <TIM_Base_SetConfig+0x128>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d01f      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a2d      	ldr	r2, [pc, #180]	@ (8005538 <TIM_Base_SetConfig+0x12c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d01b      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a2c      	ldr	r2, [pc, #176]	@ (800553c <TIM_Base_SetConfig+0x130>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d017      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a2b      	ldr	r2, [pc, #172]	@ (8005540 <TIM_Base_SetConfig+0x134>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d013      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a2a      	ldr	r2, [pc, #168]	@ (8005544 <TIM_Base_SetConfig+0x138>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00f      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a29      	ldr	r2, [pc, #164]	@ (8005548 <TIM_Base_SetConfig+0x13c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00b      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a28      	ldr	r2, [pc, #160]	@ (800554c <TIM_Base_SetConfig+0x140>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d007      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a27      	ldr	r2, [pc, #156]	@ (8005550 <TIM_Base_SetConfig+0x144>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d003      	beq.n	80054be <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a26      	ldr	r2, [pc, #152]	@ (8005554 <TIM_Base_SetConfig+0x148>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d108      	bne.n	80054d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a0e      	ldr	r2, [pc, #56]	@ (800552c <TIM_Base_SetConfig+0x120>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d003      	beq.n	80054fe <TIM_Base_SetConfig+0xf2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a10      	ldr	r2, [pc, #64]	@ (800553c <TIM_Base_SetConfig+0x130>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d103      	bne.n	8005506 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	691a      	ldr	r2, [r3, #16]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f043 0204 	orr.w	r2, r3, #4
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	601a      	str	r2, [r3, #0]
}
 800551e:	bf00      	nop
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40010000 	.word	0x40010000
 8005530:	40000400 	.word	0x40000400
 8005534:	40000800 	.word	0x40000800
 8005538:	40000c00 	.word	0x40000c00
 800553c:	40010400 	.word	0x40010400
 8005540:	40014000 	.word	0x40014000
 8005544:	40014400 	.word	0x40014400
 8005548:	40014800 	.word	0x40014800
 800554c:	40001800 	.word	0x40001800
 8005550:	40001c00 	.word	0x40001c00
 8005554:	40002000 	.word	0x40002000

08005558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800556c:	2302      	movs	r3, #2
 800556e:	e05a      	b.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a21      	ldr	r2, [pc, #132]	@ (8005634 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d022      	beq.n	80055fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055bc:	d01d      	beq.n	80055fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a1d      	ldr	r2, [pc, #116]	@ (8005638 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d018      	beq.n	80055fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a1b      	ldr	r2, [pc, #108]	@ (800563c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d013      	beq.n	80055fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005640 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00e      	beq.n	80055fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a18      	ldr	r2, [pc, #96]	@ (8005644 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d009      	beq.n	80055fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a17      	ldr	r2, [pc, #92]	@ (8005648 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d004      	beq.n	80055fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a15      	ldr	r2, [pc, #84]	@ (800564c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d10c      	bne.n	8005614 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	4313      	orrs	r3, r2
 800560a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	40010000 	.word	0x40010000
 8005638:	40000400 	.word	0x40000400
 800563c:	40000800 	.word	0x40000800
 8005640:	40000c00 	.word	0x40000c00
 8005644:	40010400 	.word	0x40010400
 8005648:	40014000 	.word	0x40014000
 800564c:	40001800 	.word	0x40001800

08005650 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e042      	b.n	8005710 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fb fd84 	bl	80011ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2224      	movs	r2, #36	@ 0x24
 80056a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f82b 	bl	8005718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	691a      	ldr	r2, [r3, #16]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695a      	ldr	r2, [r3, #20]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68da      	ldr	r2, [r3, #12]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2220      	movs	r2, #32
 8005704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800571c:	b0c0      	sub	sp, #256	@ 0x100
 800571e:	af00      	add	r7, sp, #0
 8005720:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005734:	68d9      	ldr	r1, [r3, #12]
 8005736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	ea40 0301 	orr.w	r3, r0, r1
 8005740:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	431a      	orrs	r2, r3
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	431a      	orrs	r2, r3
 8005758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	4313      	orrs	r3, r2
 8005760:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005770:	f021 010c 	bic.w	r1, r1, #12
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800577e:	430b      	orrs	r3, r1
 8005780:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800578e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005792:	6999      	ldr	r1, [r3, #24]
 8005794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	ea40 0301 	orr.w	r3, r0, r1
 800579e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	4b8f      	ldr	r3, [pc, #572]	@ (80059e4 <UART_SetConfig+0x2cc>)
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d005      	beq.n	80057b8 <UART_SetConfig+0xa0>
 80057ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4b8d      	ldr	r3, [pc, #564]	@ (80059e8 <UART_SetConfig+0x2d0>)
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d104      	bne.n	80057c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057b8:	f7ff fbc2 	bl	8004f40 <HAL_RCC_GetPCLK2Freq>
 80057bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80057c0:	e003      	b.n	80057ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057c2:	f7ff fba9 	bl	8004f18 <HAL_RCC_GetPCLK1Freq>
 80057c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057d4:	f040 810c 	bne.w	80059f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057dc:	2200      	movs	r2, #0
 80057de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80057e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80057ea:	4622      	mov	r2, r4
 80057ec:	462b      	mov	r3, r5
 80057ee:	1891      	adds	r1, r2, r2
 80057f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80057f2:	415b      	adcs	r3, r3
 80057f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80057fa:	4621      	mov	r1, r4
 80057fc:	eb12 0801 	adds.w	r8, r2, r1
 8005800:	4629      	mov	r1, r5
 8005802:	eb43 0901 	adc.w	r9, r3, r1
 8005806:	f04f 0200 	mov.w	r2, #0
 800580a:	f04f 0300 	mov.w	r3, #0
 800580e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800581a:	4690      	mov	r8, r2
 800581c:	4699      	mov	r9, r3
 800581e:	4623      	mov	r3, r4
 8005820:	eb18 0303 	adds.w	r3, r8, r3
 8005824:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005828:	462b      	mov	r3, r5
 800582a:	eb49 0303 	adc.w	r3, r9, r3
 800582e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800583e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005842:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005846:	460b      	mov	r3, r1
 8005848:	18db      	adds	r3, r3, r3
 800584a:	653b      	str	r3, [r7, #80]	@ 0x50
 800584c:	4613      	mov	r3, r2
 800584e:	eb42 0303 	adc.w	r3, r2, r3
 8005852:	657b      	str	r3, [r7, #84]	@ 0x54
 8005854:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005858:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800585c:	f7fa fd10 	bl	8000280 <__aeabi_uldivmod>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4b61      	ldr	r3, [pc, #388]	@ (80059ec <UART_SetConfig+0x2d4>)
 8005866:	fba3 2302 	umull	r2, r3, r3, r2
 800586a:	095b      	lsrs	r3, r3, #5
 800586c:	011c      	lsls	r4, r3, #4
 800586e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005872:	2200      	movs	r2, #0
 8005874:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005878:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800587c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005880:	4642      	mov	r2, r8
 8005882:	464b      	mov	r3, r9
 8005884:	1891      	adds	r1, r2, r2
 8005886:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005888:	415b      	adcs	r3, r3
 800588a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800588c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005890:	4641      	mov	r1, r8
 8005892:	eb12 0a01 	adds.w	sl, r2, r1
 8005896:	4649      	mov	r1, r9
 8005898:	eb43 0b01 	adc.w	fp, r3, r1
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058b0:	4692      	mov	sl, r2
 80058b2:	469b      	mov	fp, r3
 80058b4:	4643      	mov	r3, r8
 80058b6:	eb1a 0303 	adds.w	r3, sl, r3
 80058ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058be:	464b      	mov	r3, r9
 80058c0:	eb4b 0303 	adc.w	r3, fp, r3
 80058c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80058d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058dc:	460b      	mov	r3, r1
 80058de:	18db      	adds	r3, r3, r3
 80058e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80058e2:	4613      	mov	r3, r2
 80058e4:	eb42 0303 	adc.w	r3, r2, r3
 80058e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80058ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80058ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80058f2:	f7fa fcc5 	bl	8000280 <__aeabi_uldivmod>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4611      	mov	r1, r2
 80058fc:	4b3b      	ldr	r3, [pc, #236]	@ (80059ec <UART_SetConfig+0x2d4>)
 80058fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005902:	095b      	lsrs	r3, r3, #5
 8005904:	2264      	movs	r2, #100	@ 0x64
 8005906:	fb02 f303 	mul.w	r3, r2, r3
 800590a:	1acb      	subs	r3, r1, r3
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005912:	4b36      	ldr	r3, [pc, #216]	@ (80059ec <UART_SetConfig+0x2d4>)
 8005914:	fba3 2302 	umull	r2, r3, r3, r2
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005920:	441c      	add	r4, r3
 8005922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005926:	2200      	movs	r2, #0
 8005928:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800592c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005930:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005934:	4642      	mov	r2, r8
 8005936:	464b      	mov	r3, r9
 8005938:	1891      	adds	r1, r2, r2
 800593a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800593c:	415b      	adcs	r3, r3
 800593e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005940:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005944:	4641      	mov	r1, r8
 8005946:	1851      	adds	r1, r2, r1
 8005948:	6339      	str	r1, [r7, #48]	@ 0x30
 800594a:	4649      	mov	r1, r9
 800594c:	414b      	adcs	r3, r1
 800594e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800595c:	4659      	mov	r1, fp
 800595e:	00cb      	lsls	r3, r1, #3
 8005960:	4651      	mov	r1, sl
 8005962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005966:	4651      	mov	r1, sl
 8005968:	00ca      	lsls	r2, r1, #3
 800596a:	4610      	mov	r0, r2
 800596c:	4619      	mov	r1, r3
 800596e:	4603      	mov	r3, r0
 8005970:	4642      	mov	r2, r8
 8005972:	189b      	adds	r3, r3, r2
 8005974:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005978:	464b      	mov	r3, r9
 800597a:	460a      	mov	r2, r1
 800597c:	eb42 0303 	adc.w	r3, r2, r3
 8005980:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005990:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005994:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005998:	460b      	mov	r3, r1
 800599a:	18db      	adds	r3, r3, r3
 800599c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800599e:	4613      	mov	r3, r2
 80059a0:	eb42 0303 	adc.w	r3, r2, r3
 80059a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80059ae:	f7fa fc67 	bl	8000280 <__aeabi_uldivmod>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4b0d      	ldr	r3, [pc, #52]	@ (80059ec <UART_SetConfig+0x2d4>)
 80059b8:	fba3 1302 	umull	r1, r3, r3, r2
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	2164      	movs	r1, #100	@ 0x64
 80059c0:	fb01 f303 	mul.w	r3, r1, r3
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	3332      	adds	r3, #50	@ 0x32
 80059ca:	4a08      	ldr	r2, [pc, #32]	@ (80059ec <UART_SetConfig+0x2d4>)
 80059cc:	fba2 2303 	umull	r2, r3, r2, r3
 80059d0:	095b      	lsrs	r3, r3, #5
 80059d2:	f003 0207 	and.w	r2, r3, #7
 80059d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4422      	add	r2, r4
 80059de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059e0:	e106      	b.n	8005bf0 <UART_SetConfig+0x4d8>
 80059e2:	bf00      	nop
 80059e4:	40011000 	.word	0x40011000
 80059e8:	40011400 	.word	0x40011400
 80059ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059f4:	2200      	movs	r2, #0
 80059f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80059fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005a02:	4642      	mov	r2, r8
 8005a04:	464b      	mov	r3, r9
 8005a06:	1891      	adds	r1, r2, r2
 8005a08:	6239      	str	r1, [r7, #32]
 8005a0a:	415b      	adcs	r3, r3
 8005a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a12:	4641      	mov	r1, r8
 8005a14:	1854      	adds	r4, r2, r1
 8005a16:	4649      	mov	r1, r9
 8005a18:	eb43 0501 	adc.w	r5, r3, r1
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	00eb      	lsls	r3, r5, #3
 8005a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a2a:	00e2      	lsls	r2, r4, #3
 8005a2c:	4614      	mov	r4, r2
 8005a2e:	461d      	mov	r5, r3
 8005a30:	4643      	mov	r3, r8
 8005a32:	18e3      	adds	r3, r4, r3
 8005a34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a38:	464b      	mov	r3, r9
 8005a3a:	eb45 0303 	adc.w	r3, r5, r3
 8005a3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a52:	f04f 0200 	mov.w	r2, #0
 8005a56:	f04f 0300 	mov.w	r3, #0
 8005a5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a5e:	4629      	mov	r1, r5
 8005a60:	008b      	lsls	r3, r1, #2
 8005a62:	4621      	mov	r1, r4
 8005a64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a68:	4621      	mov	r1, r4
 8005a6a:	008a      	lsls	r2, r1, #2
 8005a6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a70:	f7fa fc06 	bl	8000280 <__aeabi_uldivmod>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4b60      	ldr	r3, [pc, #384]	@ (8005bfc <UART_SetConfig+0x4e4>)
 8005a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a7e:	095b      	lsrs	r3, r3, #5
 8005a80:	011c      	lsls	r4, r3, #4
 8005a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a86:	2200      	movs	r2, #0
 8005a88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a94:	4642      	mov	r2, r8
 8005a96:	464b      	mov	r3, r9
 8005a98:	1891      	adds	r1, r2, r2
 8005a9a:	61b9      	str	r1, [r7, #24]
 8005a9c:	415b      	adcs	r3, r3
 8005a9e:	61fb      	str	r3, [r7, #28]
 8005aa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005aa4:	4641      	mov	r1, r8
 8005aa6:	1851      	adds	r1, r2, r1
 8005aa8:	6139      	str	r1, [r7, #16]
 8005aaa:	4649      	mov	r1, r9
 8005aac:	414b      	adcs	r3, r1
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005abc:	4659      	mov	r1, fp
 8005abe:	00cb      	lsls	r3, r1, #3
 8005ac0:	4651      	mov	r1, sl
 8005ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ac6:	4651      	mov	r1, sl
 8005ac8:	00ca      	lsls	r2, r1, #3
 8005aca:	4610      	mov	r0, r2
 8005acc:	4619      	mov	r1, r3
 8005ace:	4603      	mov	r3, r0
 8005ad0:	4642      	mov	r2, r8
 8005ad2:	189b      	adds	r3, r3, r2
 8005ad4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ad8:	464b      	mov	r3, r9
 8005ada:	460a      	mov	r2, r1
 8005adc:	eb42 0303 	adc.w	r3, r2, r3
 8005ae0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005aee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	f04f 0300 	mov.w	r3, #0
 8005af8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005afc:	4649      	mov	r1, r9
 8005afe:	008b      	lsls	r3, r1, #2
 8005b00:	4641      	mov	r1, r8
 8005b02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b06:	4641      	mov	r1, r8
 8005b08:	008a      	lsls	r2, r1, #2
 8005b0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b0e:	f7fa fbb7 	bl	8000280 <__aeabi_uldivmod>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4611      	mov	r1, r2
 8005b18:	4b38      	ldr	r3, [pc, #224]	@ (8005bfc <UART_SetConfig+0x4e4>)
 8005b1a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b1e:	095b      	lsrs	r3, r3, #5
 8005b20:	2264      	movs	r2, #100	@ 0x64
 8005b22:	fb02 f303 	mul.w	r3, r2, r3
 8005b26:	1acb      	subs	r3, r1, r3
 8005b28:	011b      	lsls	r3, r3, #4
 8005b2a:	3332      	adds	r3, #50	@ 0x32
 8005b2c:	4a33      	ldr	r2, [pc, #204]	@ (8005bfc <UART_SetConfig+0x4e4>)
 8005b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b38:	441c      	add	r4, r3
 8005b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b3e:	2200      	movs	r2, #0
 8005b40:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b42:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b48:	4642      	mov	r2, r8
 8005b4a:	464b      	mov	r3, r9
 8005b4c:	1891      	adds	r1, r2, r2
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	415b      	adcs	r3, r3
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b58:	4641      	mov	r1, r8
 8005b5a:	1851      	adds	r1, r2, r1
 8005b5c:	6039      	str	r1, [r7, #0]
 8005b5e:	4649      	mov	r1, r9
 8005b60:	414b      	adcs	r3, r1
 8005b62:	607b      	str	r3, [r7, #4]
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b70:	4659      	mov	r1, fp
 8005b72:	00cb      	lsls	r3, r1, #3
 8005b74:	4651      	mov	r1, sl
 8005b76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b7a:	4651      	mov	r1, sl
 8005b7c:	00ca      	lsls	r2, r1, #3
 8005b7e:	4610      	mov	r0, r2
 8005b80:	4619      	mov	r1, r3
 8005b82:	4603      	mov	r3, r0
 8005b84:	4642      	mov	r2, r8
 8005b86:	189b      	adds	r3, r3, r2
 8005b88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	460a      	mov	r2, r1
 8005b8e:	eb42 0303 	adc.w	r3, r2, r3
 8005b92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ba0:	f04f 0200 	mov.w	r2, #0
 8005ba4:	f04f 0300 	mov.w	r3, #0
 8005ba8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005bac:	4649      	mov	r1, r9
 8005bae:	008b      	lsls	r3, r1, #2
 8005bb0:	4641      	mov	r1, r8
 8005bb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bb6:	4641      	mov	r1, r8
 8005bb8:	008a      	lsls	r2, r1, #2
 8005bba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005bbe:	f7fa fb5f 	bl	8000280 <__aeabi_uldivmod>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bfc <UART_SetConfig+0x4e4>)
 8005bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	2164      	movs	r1, #100	@ 0x64
 8005bd0:	fb01 f303 	mul.w	r3, r1, r3
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	3332      	adds	r3, #50	@ 0x32
 8005bda:	4a08      	ldr	r2, [pc, #32]	@ (8005bfc <UART_SetConfig+0x4e4>)
 8005bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005be0:	095b      	lsrs	r3, r3, #5
 8005be2:	f003 020f 	and.w	r2, r3, #15
 8005be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4422      	add	r2, r4
 8005bee:	609a      	str	r2, [r3, #8]
}
 8005bf0:	bf00      	nop
 8005bf2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bfc:	51eb851f 	.word	0x51eb851f

08005c00 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	6812      	ldr	r2, [r2, #0]
 8005c18:	f023 0101 	bic.w	r1, r3, #1
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	2b08      	cmp	r3, #8
 8005c28:	d102      	bne.n	8005c30 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005c2a:	2340      	movs	r3, #64	@ 0x40
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	e001      	b.n	8005c34 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005c30:	2300      	movs	r3, #0
 8005c32:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005c40:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005c46:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005c4c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005c52:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005c58:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8005c5e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8005c64:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8005c6a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8005c70:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8005c8e:	4b10      	ldr	r3, [pc, #64]	@ (8005cd0 <FSMC_NORSRAM_Init+0xd0>)
 8005c90:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c98:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8005ca0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	43db      	mvns	r3, r3
 8005cb0:	ea02 0103 	and.w	r1, r2, r3
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	4319      	orrs	r1, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	0008fb7f 	.word	0x0008fb7f

08005cd4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8005cea:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8005cf2:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8005cfa:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	3b01      	subs	r3, #1
 8005d02:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8005d04:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	3b02      	subs	r3, #2
 8005d0c:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8005d0e:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8005d1a:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d44:	d11d      	bne.n	8005d82 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d4e:	4b13      	ldr	r3, [pc, #76]	@ (8005d9c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	6811      	ldr	r1, [r2, #0]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	6852      	ldr	r2, [r2, #4]
 8005d5a:	0112      	lsls	r2, r2, #4
 8005d5c:	4311      	orrs	r1, r2
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	6892      	ldr	r2, [r2, #8]
 8005d62:	0212      	lsls	r2, r2, #8
 8005d64:	4311      	orrs	r1, r2
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	6992      	ldr	r2, [r2, #24]
 8005d6a:	4311      	orrs	r1, r2
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	68d2      	ldr	r2, [r2, #12]
 8005d70:	0412      	lsls	r2, r2, #16
 8005d72:	430a      	orrs	r2, r1
 8005d74:	ea43 0102 	orr.w	r1, r3, r2
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005d80:	e005      	b.n	8005d8e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8005d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	cff00000 	.word	0xcff00000

08005da0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005da0:	b084      	sub	sp, #16
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	f107 001c 	add.w	r0, r7, #28
 8005dae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005db2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d123      	bne.n	8005e02 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dbe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005dce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005de2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d105      	bne.n	8005df6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f001 fae8 	bl	80073cc <USB_CoreReset>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	73fb      	strb	r3, [r7, #15]
 8005e00:	e01b      	b.n	8005e3a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f001 fadc 	bl	80073cc <USB_CoreReset>
 8005e14:	4603      	mov	r3, r0
 8005e16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e18:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d106      	bne.n	8005e2e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e24:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e2c:	e005      	b.n	8005e3a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e32:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e3a:	7fbb      	ldrb	r3, [r7, #30]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d10b      	bne.n	8005e58 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f043 0206 	orr.w	r2, r3, #6
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f043 0220 	orr.w	r2, r3, #32
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e64:	b004      	add	sp, #16
 8005e66:	4770      	bx	lr

08005e68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	4613      	mov	r3, r2
 8005e74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e76:	79fb      	ldrb	r3, [r7, #7]
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d165      	bne.n	8005f48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4a41      	ldr	r2, [pc, #260]	@ (8005f84 <USB_SetTurnaroundTime+0x11c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d906      	bls.n	8005e92 <USB_SetTurnaroundTime+0x2a>
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4a40      	ldr	r2, [pc, #256]	@ (8005f88 <USB_SetTurnaroundTime+0x120>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d202      	bcs.n	8005e92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e8c:	230f      	movs	r3, #15
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	e062      	b.n	8005f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	4a3c      	ldr	r2, [pc, #240]	@ (8005f88 <USB_SetTurnaroundTime+0x120>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d306      	bcc.n	8005ea8 <USB_SetTurnaroundTime+0x40>
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	4a3b      	ldr	r2, [pc, #236]	@ (8005f8c <USB_SetTurnaroundTime+0x124>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d202      	bcs.n	8005ea8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005ea2:	230e      	movs	r3, #14
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	e057      	b.n	8005f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	4a38      	ldr	r2, [pc, #224]	@ (8005f8c <USB_SetTurnaroundTime+0x124>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d306      	bcc.n	8005ebe <USB_SetTurnaroundTime+0x56>
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4a37      	ldr	r2, [pc, #220]	@ (8005f90 <USB_SetTurnaroundTime+0x128>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d202      	bcs.n	8005ebe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005eb8:	230d      	movs	r3, #13
 8005eba:	617b      	str	r3, [r7, #20]
 8005ebc:	e04c      	b.n	8005f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	4a33      	ldr	r2, [pc, #204]	@ (8005f90 <USB_SetTurnaroundTime+0x128>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d306      	bcc.n	8005ed4 <USB_SetTurnaroundTime+0x6c>
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	4a32      	ldr	r2, [pc, #200]	@ (8005f94 <USB_SetTurnaroundTime+0x12c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d802      	bhi.n	8005ed4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005ece:	230c      	movs	r3, #12
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	e041      	b.n	8005f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4a2f      	ldr	r2, [pc, #188]	@ (8005f94 <USB_SetTurnaroundTime+0x12c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d906      	bls.n	8005eea <USB_SetTurnaroundTime+0x82>
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4a2e      	ldr	r2, [pc, #184]	@ (8005f98 <USB_SetTurnaroundTime+0x130>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d802      	bhi.n	8005eea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ee4:	230b      	movs	r3, #11
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	e036      	b.n	8005f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	4a2a      	ldr	r2, [pc, #168]	@ (8005f98 <USB_SetTurnaroundTime+0x130>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d906      	bls.n	8005f00 <USB_SetTurnaroundTime+0x98>
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	4a29      	ldr	r2, [pc, #164]	@ (8005f9c <USB_SetTurnaroundTime+0x134>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d802      	bhi.n	8005f00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005efa:	230a      	movs	r3, #10
 8005efc:	617b      	str	r3, [r7, #20]
 8005efe:	e02b      	b.n	8005f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	4a26      	ldr	r2, [pc, #152]	@ (8005f9c <USB_SetTurnaroundTime+0x134>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d906      	bls.n	8005f16 <USB_SetTurnaroundTime+0xae>
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	4a25      	ldr	r2, [pc, #148]	@ (8005fa0 <USB_SetTurnaroundTime+0x138>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d202      	bcs.n	8005f16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005f10:	2309      	movs	r3, #9
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	e020      	b.n	8005f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	4a21      	ldr	r2, [pc, #132]	@ (8005fa0 <USB_SetTurnaroundTime+0x138>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d306      	bcc.n	8005f2c <USB_SetTurnaroundTime+0xc4>
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	4a20      	ldr	r2, [pc, #128]	@ (8005fa4 <USB_SetTurnaroundTime+0x13c>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d802      	bhi.n	8005f2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f26:	2308      	movs	r3, #8
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	e015      	b.n	8005f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa4 <USB_SetTurnaroundTime+0x13c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d906      	bls.n	8005f42 <USB_SetTurnaroundTime+0xda>
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa8 <USB_SetTurnaroundTime+0x140>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d202      	bcs.n	8005f42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f3c:	2307      	movs	r3, #7
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	e00a      	b.n	8005f58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f42:	2306      	movs	r3, #6
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	e007      	b.n	8005f58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f48:	79fb      	ldrb	r3, [r7, #7]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d102      	bne.n	8005f54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f4e:	2309      	movs	r3, #9
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	e001      	b.n	8005f58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f54:	2309      	movs	r3, #9
 8005f56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	029b      	lsls	r3, r3, #10
 8005f6c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005f70:	431a      	orrs	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	371c      	adds	r7, #28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	00d8acbf 	.word	0x00d8acbf
 8005f88:	00e4e1c0 	.word	0x00e4e1c0
 8005f8c:	00f42400 	.word	0x00f42400
 8005f90:	01067380 	.word	0x01067380
 8005f94:	011a499f 	.word	0x011a499f
 8005f98:	01312cff 	.word	0x01312cff
 8005f9c:	014ca43f 	.word	0x014ca43f
 8005fa0:	016e3600 	.word	0x016e3600
 8005fa4:	01a6ab1f 	.word	0x01a6ab1f
 8005fa8:	01e84800 	.word	0x01e84800

08005fac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f043 0201 	orr.w	r2, r3, #1
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b083      	sub	sp, #12
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f023 0201 	bic.w	r2, r3, #1
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800600c:	78fb      	ldrb	r3, [r7, #3]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d115      	bne.n	800603e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800601e:	200a      	movs	r0, #10
 8006020:	f7fb fd98 	bl	8001b54 <HAL_Delay>
      ms += 10U;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	330a      	adds	r3, #10
 8006028:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f001 f93f 	bl	80072ae <USB_GetMode>
 8006030:	4603      	mov	r3, r0
 8006032:	2b01      	cmp	r3, #1
 8006034:	d01e      	beq.n	8006074 <USB_SetCurrentMode+0x84>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2bc7      	cmp	r3, #199	@ 0xc7
 800603a:	d9f0      	bls.n	800601e <USB_SetCurrentMode+0x2e>
 800603c:	e01a      	b.n	8006074 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800603e:	78fb      	ldrb	r3, [r7, #3]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d115      	bne.n	8006070 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006050:	200a      	movs	r0, #10
 8006052:	f7fb fd7f 	bl	8001b54 <HAL_Delay>
      ms += 10U;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	330a      	adds	r3, #10
 800605a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f001 f926 	bl	80072ae <USB_GetMode>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <USB_SetCurrentMode+0x84>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2bc7      	cmp	r3, #199	@ 0xc7
 800606c:	d9f0      	bls.n	8006050 <USB_SetCurrentMode+0x60>
 800606e:	e001      	b.n	8006074 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e005      	b.n	8006080 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2bc8      	cmp	r3, #200	@ 0xc8
 8006078:	d101      	bne.n	800607e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e000      	b.n	8006080 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006088:	b084      	sub	sp, #16
 800608a:	b580      	push	{r7, lr}
 800608c:	b086      	sub	sp, #24
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006096:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80060a2:	2300      	movs	r3, #0
 80060a4:	613b      	str	r3, [r7, #16]
 80060a6:	e009      	b.n	80060bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	3340      	adds	r3, #64	@ 0x40
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	2200      	movs	r2, #0
 80060b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	3301      	adds	r3, #1
 80060ba:	613b      	str	r3, [r7, #16]
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	2b0e      	cmp	r3, #14
 80060c0:	d9f2      	bls.n	80060a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80060c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d11c      	bne.n	8006104 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060d8:	f043 0302 	orr.w	r3, r3, #2
 80060dc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ee:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060fa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	639a      	str	r2, [r3, #56]	@ 0x38
 8006102:	e00b      	b.n	800611c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006108:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006114:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006122:	461a      	mov	r2, r3
 8006124:	2300      	movs	r3, #0
 8006126:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006128:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800612c:	2b01      	cmp	r3, #1
 800612e:	d10d      	bne.n	800614c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006130:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006134:	2b00      	cmp	r3, #0
 8006136:	d104      	bne.n	8006142 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006138:	2100      	movs	r1, #0
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f968 	bl	8006410 <USB_SetDevSpeed>
 8006140:	e008      	b.n	8006154 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006142:	2101      	movs	r1, #1
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f963 	bl	8006410 <USB_SetDevSpeed>
 800614a:	e003      	b.n	8006154 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800614c:	2103      	movs	r1, #3
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f95e 	bl	8006410 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006154:	2110      	movs	r1, #16
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f8fa 	bl	8006350 <USB_FlushTxFifo>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f924 	bl	80063b4 <USB_FlushRxFifo>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800617c:	461a      	mov	r2, r3
 800617e:	2300      	movs	r3, #0
 8006180:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006188:	461a      	mov	r2, r3
 800618a:	2300      	movs	r3, #0
 800618c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006194:	461a      	mov	r2, r3
 8006196:	2300      	movs	r3, #0
 8006198:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800619a:	2300      	movs	r3, #0
 800619c:	613b      	str	r3, [r7, #16]
 800619e:	e043      	b.n	8006228 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061b6:	d118      	bne.n	80061ea <USB_DevInit+0x162>
    {
      if (i == 0U)
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10a      	bne.n	80061d4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061ca:	461a      	mov	r2, r3
 80061cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80061d0:	6013      	str	r3, [r2, #0]
 80061d2:	e013      	b.n	80061fc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e0:	461a      	mov	r2, r3
 80061e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80061e6:	6013      	str	r3, [r2, #0]
 80061e8:	e008      	b.n	80061fc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061f6:	461a      	mov	r2, r3
 80061f8:	2300      	movs	r3, #0
 80061fa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006208:	461a      	mov	r2, r3
 800620a:	2300      	movs	r3, #0
 800620c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800621a:	461a      	mov	r2, r3
 800621c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006220:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	3301      	adds	r3, #1
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800622c:	461a      	mov	r2, r3
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	4293      	cmp	r3, r2
 8006232:	d3b5      	bcc.n	80061a0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006234:	2300      	movs	r3, #0
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	e043      	b.n	80062c2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800624c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006250:	d118      	bne.n	8006284 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10a      	bne.n	800626e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006264:	461a      	mov	r2, r3
 8006266:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	e013      	b.n	8006296 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800627a:	461a      	mov	r2, r3
 800627c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	e008      	b.n	8006296 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006290:	461a      	mov	r2, r3
 8006292:	2300      	movs	r3, #0
 8006294:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a2:	461a      	mov	r2, r3
 80062a4:	2300      	movs	r3, #0
 80062a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b4:	461a      	mov	r2, r3
 80062b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80062ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	3301      	adds	r3, #1
 80062c0:	613b      	str	r3, [r7, #16]
 80062c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80062c6:	461a      	mov	r2, r3
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d3b5      	bcc.n	800623a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062e0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80062ee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80062f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d105      	bne.n	8006304 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	f043 0210 	orr.w	r2, r3, #16
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	699a      	ldr	r2, [r3, #24]
 8006308:	4b10      	ldr	r3, [pc, #64]	@ (800634c <USB_DevInit+0x2c4>)
 800630a:	4313      	orrs	r3, r2
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006310:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006314:	2b00      	cmp	r3, #0
 8006316:	d005      	beq.n	8006324 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	f043 0208 	orr.w	r2, r3, #8
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006324:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006328:	2b01      	cmp	r3, #1
 800632a:	d107      	bne.n	800633c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006334:	f043 0304 	orr.w	r3, r3, #4
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800633c:	7dfb      	ldrb	r3, [r7, #23]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006348:	b004      	add	sp, #16
 800634a:	4770      	bx	lr
 800634c:	803c3800 	.word	0x803c3800

08006350 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3301      	adds	r3, #1
 8006362:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800636a:	d901      	bls.n	8006370 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e01b      	b.n	80063a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	daf2      	bge.n	800635e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	019b      	lsls	r3, r3, #6
 8006380:	f043 0220 	orr.w	r2, r3, #32
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3301      	adds	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006394:	d901      	bls.n	800639a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e006      	b.n	80063a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b20      	cmp	r3, #32
 80063a4:	d0f0      	beq.n	8006388 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	3301      	adds	r3, #1
 80063c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063cc:	d901      	bls.n	80063d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e018      	b.n	8006404 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	daf2      	bge.n	80063c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2210      	movs	r2, #16
 80063e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3301      	adds	r3, #1
 80063e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063f0:	d901      	bls.n	80063f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e006      	b.n	8006404 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f003 0310 	and.w	r3, r3, #16
 80063fe:	2b10      	cmp	r3, #16
 8006400:	d0f0      	beq.n	80063e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	460b      	mov	r3, r1
 800641a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	78fb      	ldrb	r3, [r7, #3]
 800642a:	68f9      	ldr	r1, [r7, #12]
 800642c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006430:	4313      	orrs	r3, r2
 8006432:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006442:	b480      	push	{r7}
 8006444:	b087      	sub	sp, #28
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f003 0306 	and.w	r3, r3, #6
 800645a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d102      	bne.n	8006468 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006462:	2300      	movs	r3, #0
 8006464:	75fb      	strb	r3, [r7, #23]
 8006466:	e00a      	b.n	800647e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b02      	cmp	r3, #2
 800646c:	d002      	beq.n	8006474 <USB_GetDevSpeed+0x32>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b06      	cmp	r3, #6
 8006472:	d102      	bne.n	800647a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006474:	2302      	movs	r3, #2
 8006476:	75fb      	strb	r3, [r7, #23]
 8006478:	e001      	b.n	800647e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800647a:	230f      	movs	r3, #15
 800647c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800647e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006480:	4618      	mov	r0, r3
 8006482:	371c      	adds	r7, #28
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d13a      	bne.n	800651e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ae:	69da      	ldr	r2, [r3, #28]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	f003 030f 	and.w	r3, r3, #15
 80064b8:	2101      	movs	r1, #1
 80064ba:	fa01 f303 	lsl.w	r3, r1, r3
 80064be:	b29b      	uxth	r3, r3
 80064c0:	68f9      	ldr	r1, [r7, #12]
 80064c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064c6:	4313      	orrs	r3, r2
 80064c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d155      	bne.n	800658c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	791b      	ldrb	r3, [r3, #4]
 80064fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	059b      	lsls	r3, r3, #22
 8006502:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006504:	4313      	orrs	r3, r2
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	0151      	lsls	r1, r2, #5
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	440a      	add	r2, r1
 800650e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800651a:	6013      	str	r3, [r2, #0]
 800651c:	e036      	b.n	800658c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006524:	69da      	ldr	r2, [r3, #28]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	f003 030f 	and.w	r3, r3, #15
 800652e:	2101      	movs	r1, #1
 8006530:	fa01 f303 	lsl.w	r3, r1, r3
 8006534:	041b      	lsls	r3, r3, #16
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800653c:	4313      	orrs	r3, r2
 800653e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d11a      	bne.n	800658c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	791b      	ldrb	r3, [r3, #4]
 8006570:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006572:	430b      	orrs	r3, r1
 8006574:	4313      	orrs	r3, r2
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	0151      	lsls	r1, r2, #5
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	440a      	add	r2, r1
 800657e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006586:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800658a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
	...

0800659c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	785b      	ldrb	r3, [r3, #1]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d161      	bne.n	800667c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065ce:	d11f      	bne.n	8006610 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	0151      	lsls	r1, r2, #5
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	440a      	add	r2, r1
 80065e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80065ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	0151      	lsls	r1, r2, #5
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	440a      	add	r2, r1
 8006606:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800660a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800660e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006616:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	f003 030f 	and.w	r3, r3, #15
 8006620:	2101      	movs	r1, #1
 8006622:	fa01 f303 	lsl.w	r3, r1, r3
 8006626:	b29b      	uxth	r3, r3
 8006628:	43db      	mvns	r3, r3
 800662a:	68f9      	ldr	r1, [r7, #12]
 800662c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006630:	4013      	ands	r3, r2
 8006632:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800663a:	69da      	ldr	r2, [r3, #28]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	f003 030f 	and.w	r3, r3, #15
 8006644:	2101      	movs	r1, #1
 8006646:	fa01 f303 	lsl.w	r3, r1, r3
 800664a:	b29b      	uxth	r3, r3
 800664c:	43db      	mvns	r3, r3
 800664e:	68f9      	ldr	r1, [r7, #12]
 8006650:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006654:	4013      	ands	r3, r2
 8006656:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	0159      	lsls	r1, r3, #5
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	440b      	add	r3, r1
 800666e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006672:	4619      	mov	r1, r3
 8006674:	4b35      	ldr	r3, [pc, #212]	@ (800674c <USB_DeactivateEndpoint+0x1b0>)
 8006676:	4013      	ands	r3, r2
 8006678:	600b      	str	r3, [r1, #0]
 800667a:	e060      	b.n	800673e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800668e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006692:	d11f      	bne.n	80066d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	0151      	lsls	r1, r2, #5
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	440a      	add	r2, r1
 80066aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	0151      	lsls	r1, r2, #5
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	440a      	add	r2, r1
 80066ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	f003 030f 	and.w	r3, r3, #15
 80066e4:	2101      	movs	r1, #1
 80066e6:	fa01 f303 	lsl.w	r3, r1, r3
 80066ea:	041b      	lsls	r3, r3, #16
 80066ec:	43db      	mvns	r3, r3
 80066ee:	68f9      	ldr	r1, [r7, #12]
 80066f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066f4:	4013      	ands	r3, r2
 80066f6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066fe:	69da      	ldr	r2, [r3, #28]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	f003 030f 	and.w	r3, r3, #15
 8006708:	2101      	movs	r1, #1
 800670a:	fa01 f303 	lsl.w	r3, r1, r3
 800670e:	041b      	lsls	r3, r3, #16
 8006710:	43db      	mvns	r3, r3
 8006712:	68f9      	ldr	r1, [r7, #12]
 8006714:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006718:	4013      	ands	r3, r2
 800671a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4413      	add	r3, r2
 8006724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	0159      	lsls	r1, r3, #5
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	440b      	add	r3, r1
 8006732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006736:	4619      	mov	r1, r3
 8006738:	4b05      	ldr	r3, [pc, #20]	@ (8006750 <USB_DeactivateEndpoint+0x1b4>)
 800673a:	4013      	ands	r3, r2
 800673c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	ec337800 	.word	0xec337800
 8006750:	eff37800 	.word	0xeff37800

08006754 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b08a      	sub	sp, #40	@ 0x28
 8006758:	af02      	add	r7, sp, #8
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	4613      	mov	r3, r2
 8006760:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	785b      	ldrb	r3, [r3, #1]
 8006770:	2b01      	cmp	r3, #1
 8006772:	f040 817f 	bne.w	8006a74 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d132      	bne.n	80067e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	4413      	add	r3, r2
 8006786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	0151      	lsls	r1, r2, #5
 8006790:	69fa      	ldr	r2, [r7, #28]
 8006792:	440a      	add	r2, r1
 8006794:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006798:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800679c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80067a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	0151      	lsls	r1, r2, #5
 80067b4:	69fa      	ldr	r2, [r7, #28]
 80067b6:	440a      	add	r2, r1
 80067b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80067c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	69fa      	ldr	r2, [r7, #28]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067dc:	0cdb      	lsrs	r3, r3, #19
 80067de:	04db      	lsls	r3, r3, #19
 80067e0:	6113      	str	r3, [r2, #16]
 80067e2:	e097      	b.n	8006914 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	0151      	lsls	r1, r2, #5
 80067f6:	69fa      	ldr	r2, [r7, #28]
 80067f8:	440a      	add	r2, r1
 80067fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067fe:	0cdb      	lsrs	r3, r3, #19
 8006800:	04db      	lsls	r3, r3, #19
 8006802:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	0151      	lsls	r1, r2, #5
 8006816:	69fa      	ldr	r2, [r7, #28]
 8006818:	440a      	add	r2, r1
 800681a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800681e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006822:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006826:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d11a      	bne.n	8006864 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	691a      	ldr	r2, [r3, #16]
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	429a      	cmp	r2, r3
 8006838:	d903      	bls.n	8006842 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	689a      	ldr	r2, [r3, #8]
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	0151      	lsls	r1, r2, #5
 8006854:	69fa      	ldr	r2, [r7, #28]
 8006856:	440a      	add	r2, r1
 8006858:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800685c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006860:	6113      	str	r3, [r2, #16]
 8006862:	e044      	b.n	80068ee <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	4413      	add	r3, r2
 800686e:	1e5a      	subs	r2, r3, #1
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	fbb2 f3f3 	udiv	r3, r2, r3
 8006878:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006886:	691a      	ldr	r2, [r3, #16]
 8006888:	8afb      	ldrh	r3, [r7, #22]
 800688a:	04d9      	lsls	r1, r3, #19
 800688c:	4ba4      	ldr	r3, [pc, #656]	@ (8006b20 <USB_EPStartXfer+0x3cc>)
 800688e:	400b      	ands	r3, r1
 8006890:	69b9      	ldr	r1, [r7, #24]
 8006892:	0148      	lsls	r0, r1, #5
 8006894:	69f9      	ldr	r1, [r7, #28]
 8006896:	4401      	add	r1, r0
 8006898:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800689c:	4313      	orrs	r3, r2
 800689e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	791b      	ldrb	r3, [r3, #4]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d122      	bne.n	80068ee <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	0151      	lsls	r1, r2, #5
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	440a      	add	r2, r1
 80068be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068c2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80068c6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068d4:	691a      	ldr	r2, [r3, #16]
 80068d6:	8afb      	ldrh	r3, [r7, #22]
 80068d8:	075b      	lsls	r3, r3, #29
 80068da:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80068de:	69b9      	ldr	r1, [r7, #24]
 80068e0:	0148      	lsls	r0, r1, #5
 80068e2:	69f9      	ldr	r1, [r7, #28]
 80068e4:	4401      	add	r1, r0
 80068e6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80068ea:	4313      	orrs	r3, r2
 80068ec:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068fa:	691a      	ldr	r2, [r3, #16]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006904:	69b9      	ldr	r1, [r7, #24]
 8006906:	0148      	lsls	r0, r1, #5
 8006908:	69f9      	ldr	r1, [r7, #28]
 800690a:	4401      	add	r1, r0
 800690c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006910:	4313      	orrs	r3, r2
 8006912:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006914:	79fb      	ldrb	r3, [r7, #7]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d14b      	bne.n	80069b2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d009      	beq.n	8006936 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800692e:	461a      	mov	r2, r3
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	791b      	ldrb	r3, [r3, #4]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d128      	bne.n	8006990 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800694a:	2b00      	cmp	r3, #0
 800694c:	d110      	bne.n	8006970 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	4413      	add	r3, r2
 8006956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	0151      	lsls	r1, r2, #5
 8006960:	69fa      	ldr	r2, [r7, #28]
 8006962:	440a      	add	r2, r1
 8006964:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006968:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	e00f      	b.n	8006990 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	0151      	lsls	r1, r2, #5
 8006982:	69fa      	ldr	r2, [r7, #28]
 8006984:	440a      	add	r2, r1
 8006986:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800698a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800698e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	0151      	lsls	r1, r2, #5
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	440a      	add	r2, r1
 80069a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069aa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	e166      	b.n	8006c80 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	0151      	lsls	r1, r2, #5
 80069c4:	69fa      	ldr	r2, [r7, #28]
 80069c6:	440a      	add	r2, r1
 80069c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069cc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80069d0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	791b      	ldrb	r3, [r3, #4]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d015      	beq.n	8006a06 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f000 814e 	beq.w	8006c80 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	f003 030f 	and.w	r3, r3, #15
 80069f4:	2101      	movs	r1, #1
 80069f6:	fa01 f303 	lsl.w	r3, r1, r3
 80069fa:	69f9      	ldr	r1, [r7, #28]
 80069fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a00:	4313      	orrs	r3, r2
 8006a02:	634b      	str	r3, [r1, #52]	@ 0x34
 8006a04:	e13c      	b.n	8006c80 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d110      	bne.n	8006a38 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	015a      	lsls	r2, r3, #5
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	69ba      	ldr	r2, [r7, #24]
 8006a26:	0151      	lsls	r1, r2, #5
 8006a28:	69fa      	ldr	r2, [r7, #28]
 8006a2a:	440a      	add	r2, r1
 8006a2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	e00f      	b.n	8006a58 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	0151      	lsls	r1, r2, #5
 8006a4a:	69fa      	ldr	r2, [r7, #28]
 8006a4c:	440a      	add	r2, r1
 8006a4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a56:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	68d9      	ldr	r1, [r3, #12]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	781a      	ldrb	r2, [r3, #0]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	b298      	uxth	r0, r3
 8006a66:	79fb      	ldrb	r3, [r7, #7]
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 f9b9 	bl	8006de4 <USB_WritePacket>
 8006a72:	e105      	b.n	8006c80 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	0151      	lsls	r1, r2, #5
 8006a86:	69fa      	ldr	r2, [r7, #28]
 8006a88:	440a      	add	r2, r1
 8006a8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a8e:	0cdb      	lsrs	r3, r3, #19
 8006a90:	04db      	lsls	r3, r3, #19
 8006a92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	69ba      	ldr	r2, [r7, #24]
 8006aa4:	0151      	lsls	r1, r2, #5
 8006aa6:	69fa      	ldr	r2, [r7, #28]
 8006aa8:	440a      	add	r2, r1
 8006aaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006aae:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006ab2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006ab6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d132      	bne.n	8006b24 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	689a      	ldr	r2, [r3, #8]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	689a      	ldr	r2, [r3, #8]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae2:	691a      	ldr	r2, [r3, #16]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aec:	69b9      	ldr	r1, [r7, #24]
 8006aee:	0148      	lsls	r0, r1, #5
 8006af0:	69f9      	ldr	r1, [r7, #28]
 8006af2:	4401      	add	r1, r0
 8006af4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006af8:	4313      	orrs	r3, r2
 8006afa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	69fa      	ldr	r2, [r7, #28]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b1a:	6113      	str	r3, [r2, #16]
 8006b1c:	e062      	b.n	8006be4 <USB_EPStartXfer+0x490>
 8006b1e:	bf00      	nop
 8006b20:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d123      	bne.n	8006b74 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b38:	691a      	ldr	r2, [r3, #16]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b42:	69b9      	ldr	r1, [r7, #24]
 8006b44:	0148      	lsls	r0, r1, #5
 8006b46:	69f9      	ldr	r1, [r7, #28]
 8006b48:	4401      	add	r1, r0
 8006b4a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	0151      	lsls	r1, r2, #5
 8006b64:	69fa      	ldr	r2, [r7, #28]
 8006b66:	440a      	add	r2, r1
 8006b68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b70:	6113      	str	r3, [r2, #16]
 8006b72:	e037      	b.n	8006be4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	691a      	ldr	r2, [r3, #16]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	1e5a      	subs	r2, r3, #1
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b88:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	8afa      	ldrh	r2, [r7, #22]
 8006b90:	fb03 f202 	mul.w	r2, r3, r2
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ba4:	691a      	ldr	r2, [r3, #16]
 8006ba6:	8afb      	ldrh	r3, [r7, #22]
 8006ba8:	04d9      	lsls	r1, r3, #19
 8006baa:	4b38      	ldr	r3, [pc, #224]	@ (8006c8c <USB_EPStartXfer+0x538>)
 8006bac:	400b      	ands	r3, r1
 8006bae:	69b9      	ldr	r1, [r7, #24]
 8006bb0:	0148      	lsls	r0, r1, #5
 8006bb2:	69f9      	ldr	r1, [r7, #28]
 8006bb4:	4401      	add	r1, r0
 8006bb6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bca:	691a      	ldr	r2, [r3, #16]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bd4:	69b9      	ldr	r1, [r7, #24]
 8006bd6:	0148      	lsls	r0, r1, #5
 8006bd8:	69f9      	ldr	r1, [r7, #28]
 8006bda:	4401      	add	r1, r0
 8006bdc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006be0:	4313      	orrs	r3, r2
 8006be2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006be4:	79fb      	ldrb	r3, [r7, #7]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d10d      	bne.n	8006c06 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	68d9      	ldr	r1, [r3, #12]
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c02:	460a      	mov	r2, r1
 8006c04:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	791b      	ldrb	r3, [r3, #4]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d128      	bne.n	8006c60 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d110      	bne.n	8006c40 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	69ba      	ldr	r2, [r7, #24]
 8006c2e:	0151      	lsls	r1, r2, #5
 8006c30:	69fa      	ldr	r2, [r7, #28]
 8006c32:	440a      	add	r2, r1
 8006c34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c3c:	6013      	str	r3, [r2, #0]
 8006c3e:	e00f      	b.n	8006c60 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	0151      	lsls	r1, r2, #5
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	440a      	add	r2, r1
 8006c56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c5e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	0151      	lsls	r1, r2, #5
 8006c72:	69fa      	ldr	r2, [r7, #28]
 8006c74:	440a      	add	r2, r1
 8006c76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c7a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006c7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3720      	adds	r7, #32
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	1ff80000 	.word	0x1ff80000

08006c90 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	785b      	ldrb	r3, [r3, #1]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d14a      	bne.n	8006d44 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cc6:	f040 8086 	bne.w	8006dd6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	7812      	ldrb	r2, [r2, #0]
 8006cde:	0151      	lsls	r1, r2, #5
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	440a      	add	r2, r1
 8006ce4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ce8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006cec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	7812      	ldrb	r2, [r2, #0]
 8006d02:	0151      	lsls	r1, r2, #5
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	440a      	add	r2, r1
 8006d08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	3301      	adds	r3, #1
 8006d16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d902      	bls.n	8006d28 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	75fb      	strb	r3, [r7, #23]
          break;
 8006d26:	e056      	b.n	8006dd6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d40:	d0e7      	beq.n	8006d12 <USB_EPStopXfer+0x82>
 8006d42:	e048      	b.n	8006dd6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d5c:	d13b      	bne.n	8006dd6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	7812      	ldrb	r2, [r2, #0]
 8006d72:	0151      	lsls	r1, r2, #5
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	440a      	add	r2, r1
 8006d78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d7c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d80:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	7812      	ldrb	r2, [r2, #0]
 8006d96:	0151      	lsls	r1, r2, #5
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	440a      	add	r2, r1
 8006d9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006da0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006da4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	3301      	adds	r3, #1
 8006daa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d902      	bls.n	8006dbc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	75fb      	strb	r3, [r7, #23]
          break;
 8006dba:	e00c      	b.n	8006dd6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dd4:	d0e7      	beq.n	8006da6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	371c      	adds	r7, #28
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b089      	sub	sp, #36	@ 0x24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	4611      	mov	r1, r2
 8006df0:	461a      	mov	r2, r3
 8006df2:	460b      	mov	r3, r1
 8006df4:	71fb      	strb	r3, [r7, #7]
 8006df6:	4613      	mov	r3, r2
 8006df8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006e02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d123      	bne.n	8006e52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e0a:	88bb      	ldrh	r3, [r7, #4]
 8006e0c:	3303      	adds	r3, #3
 8006e0e:	089b      	lsrs	r3, r3, #2
 8006e10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e12:	2300      	movs	r3, #0
 8006e14:	61bb      	str	r3, [r7, #24]
 8006e16:	e018      	b.n	8006e4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	031a      	lsls	r2, r3, #12
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e24:	461a      	mov	r2, r3
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	3301      	adds	r3, #1
 8006e36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	3301      	adds	r3, #1
 8006e42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	3301      	adds	r3, #1
 8006e48:	61bb      	str	r3, [r7, #24]
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d3e2      	bcc.n	8006e18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3724      	adds	r7, #36	@ 0x24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b08b      	sub	sp, #44	@ 0x2c
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e76:	88fb      	ldrh	r3, [r7, #6]
 8006e78:	089b      	lsrs	r3, r3, #2
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e7e:	88fb      	ldrh	r3, [r7, #6]
 8006e80:	f003 0303 	and.w	r3, r3, #3
 8006e84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e86:	2300      	movs	r3, #0
 8006e88:	623b      	str	r3, [r7, #32]
 8006e8a:	e014      	b.n	8006eb6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e96:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	3301      	adds	r3, #1
 8006eae:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	623b      	str	r3, [r7, #32]
 8006eb6:	6a3a      	ldr	r2, [r7, #32]
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d3e6      	bcc.n	8006e8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ebe:	8bfb      	ldrh	r3, [r7, #30]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d01e      	beq.n	8006f02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ece:	461a      	mov	r2, r3
 8006ed0:	f107 0310 	add.w	r3, r7, #16
 8006ed4:	6812      	ldr	r2, [r2, #0]
 8006ed6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	00db      	lsls	r3, r3, #3
 8006ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee8:	701a      	strb	r2, [r3, #0]
      i++;
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	3301      	adds	r3, #1
 8006eee:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006ef6:	8bfb      	ldrh	r3, [r7, #30]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006efc:	8bfb      	ldrh	r3, [r7, #30]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1ea      	bne.n	8006ed8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	372c      	adds	r7, #44	@ 0x2c
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	785b      	ldrb	r3, [r3, #1]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d12c      	bne.n	8006f86 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	db12      	blt.n	8006f64 <USB_EPSetStall+0x54>
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00f      	beq.n	8006f64 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	0151      	lsls	r1, r2, #5
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	440a      	add	r2, r1
 8006f5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f62:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	0151      	lsls	r1, r2, #5
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	440a      	add	r2, r1
 8006f7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	e02b      	b.n	8006fde <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	db12      	blt.n	8006fbe <USB_EPSetStall+0xae>
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00f      	beq.n	8006fbe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	015a      	lsls	r2, r3, #5
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	0151      	lsls	r1, r2, #5
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	440a      	add	r2, r1
 8006fb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fb8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006fbc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	0151      	lsls	r1, r2, #5
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	440a      	add	r2, r1
 8006fd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006fdc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	785b      	ldrb	r3, [r3, #1]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d128      	bne.n	800705a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4413      	add	r3, r2
 8007010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	0151      	lsls	r1, r2, #5
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	440a      	add	r2, r1
 800701e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007022:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007026:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	791b      	ldrb	r3, [r3, #4]
 800702c:	2b03      	cmp	r3, #3
 800702e:	d003      	beq.n	8007038 <USB_EPClearStall+0x4c>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	791b      	ldrb	r3, [r3, #4]
 8007034:	2b02      	cmp	r3, #2
 8007036:	d138      	bne.n	80070aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	0151      	lsls	r1, r2, #5
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	440a      	add	r2, r1
 800704e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	e027      	b.n	80070aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	0151      	lsls	r1, r2, #5
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	440a      	add	r2, r1
 8007070:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007074:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007078:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	791b      	ldrb	r3, [r3, #4]
 800707e:	2b03      	cmp	r3, #3
 8007080:	d003      	beq.n	800708a <USB_EPClearStall+0x9e>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	791b      	ldrb	r3, [r3, #4]
 8007086:	2b02      	cmp	r3, #2
 8007088:	d10f      	bne.n	80070aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4413      	add	r3, r2
 8007092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	0151      	lsls	r1, r2, #5
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	440a      	add	r2, r1
 80070a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80070da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	78fb      	ldrb	r3, [r7, #3]
 80070e6:	011b      	lsls	r3, r3, #4
 80070e8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80070ec:	68f9      	ldr	r1, [r7, #12]
 80070ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070f2:	4313      	orrs	r3, r2
 80070f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800711e:	f023 0303 	bic.w	r3, r3, #3
 8007122:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007132:	f023 0302 	bic.w	r3, r3, #2
 8007136:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007146:	b480      	push	{r7}
 8007148:	b085      	sub	sp, #20
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007160:	f023 0303 	bic.w	r3, r3, #3
 8007164:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007174:	f043 0302 	orr.w	r3, r3, #2
 8007178:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	4013      	ands	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80071a0:	68fb      	ldr	r3, [r7, #12]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b085      	sub	sp, #20
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071ca:	69db      	ldr	r3, [r3, #28]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	4013      	ands	r3, r2
 80071d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	0c1b      	lsrs	r3, r3, #16
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b085      	sub	sp, #20
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	4013      	ands	r3, r2
 8007204:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	b29b      	uxth	r3, r3
}
 800720a:	4618      	mov	r0, r3
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007216:	b480      	push	{r7}
 8007218:	b085      	sub	sp, #20
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	460b      	mov	r3, r1
 8007220:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007226:	78fb      	ldrb	r3, [r7, #3]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	4013      	ands	r3, r2
 8007242:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007244:	68bb      	ldr	r3, [r7, #8]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007252:	b480      	push	{r7}
 8007254:	b087      	sub	sp, #28
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	460b      	mov	r3, r1
 800725c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007274:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007276:	78fb      	ldrb	r3, [r7, #3]
 8007278:	f003 030f 	and.w	r3, r3, #15
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	fa22 f303 	lsr.w	r3, r2, r3
 8007282:	01db      	lsls	r3, r3, #7
 8007284:	b2db      	uxtb	r3, r3
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	4313      	orrs	r3, r2
 800728a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800728c:	78fb      	ldrb	r3, [r7, #3]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	4013      	ands	r3, r2
 800729e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072a0:	68bb      	ldr	r3, [r7, #8]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b083      	sub	sp, #12
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	f003 0301 	and.w	r3, r3, #1
}
 80072be:	4618      	mov	r0, r3
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b085      	sub	sp, #20
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072e4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80072e8:	f023 0307 	bic.w	r3, r3, #7
 80072ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007300:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	460b      	mov	r3, r1
 800731a:	607a      	str	r2, [r7, #4]
 800731c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	333c      	adds	r3, #60	@ 0x3c
 8007326:	3304      	adds	r3, #4
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	4a26      	ldr	r2, [pc, #152]	@ (80073c8 <USB_EP0_OutStart+0xb8>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d90a      	bls.n	800734a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007340:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007344:	d101      	bne.n	800734a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	e037      	b.n	80073ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007350:	461a      	mov	r2, r3
 8007352:	2300      	movs	r3, #0
 8007354:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007364:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007368:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007378:	f043 0318 	orr.w	r3, r3, #24
 800737c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800738c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007390:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007392:	7afb      	ldrb	r3, [r7, #11]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d10f      	bne.n	80073b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800739e:	461a      	mov	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073b2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80073b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	4f54300a 	.word	0x4f54300a

080073cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3301      	adds	r3, #1
 80073dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073e4:	d901      	bls.n	80073ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e022      	b.n	8007430 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	daf2      	bge.n	80073d8 <USB_CoreReset+0xc>

  count = 10U;
 80073f2:	230a      	movs	r3, #10
 80073f4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80073f6:	e002      	b.n	80073fe <USB_CoreReset+0x32>
  {
    count--;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1f9      	bne.n	80073f8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	f043 0201 	orr.w	r2, r3, #1
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	3301      	adds	r3, #1
 8007414:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800741c:	d901      	bls.n	8007422 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e006      	b.n	8007430 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b01      	cmp	r3, #1
 800742c:	d0f0      	beq.n	8007410 <USB_CoreReset+0x44>

  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800743c:	b5b0      	push	{r4, r5, r7, lr}
 800743e:	b08c      	sub	sp, #48	@ 0x30
 8007440:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007442:	4b91      	ldr	r3, [pc, #580]	@ (8007688 <MX_LWIP_Init+0x24c>)
 8007444:	22c0      	movs	r2, #192	@ 0xc0
 8007446:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007448:	4b8f      	ldr	r3, [pc, #572]	@ (8007688 <MX_LWIP_Init+0x24c>)
 800744a:	22a8      	movs	r2, #168	@ 0xa8
 800744c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 800744e:	4b8e      	ldr	r3, [pc, #568]	@ (8007688 <MX_LWIP_Init+0x24c>)
 8007450:	220a      	movs	r2, #10
 8007452:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 88;
 8007454:	4b8c      	ldr	r3, [pc, #560]	@ (8007688 <MX_LWIP_Init+0x24c>)
 8007456:	2258      	movs	r2, #88	@ 0x58
 8007458:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800745a:	4b8c      	ldr	r3, [pc, #560]	@ (800768c <MX_LWIP_Init+0x250>)
 800745c:	22ff      	movs	r2, #255	@ 0xff
 800745e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007460:	4b8a      	ldr	r3, [pc, #552]	@ (800768c <MX_LWIP_Init+0x250>)
 8007462:	22ff      	movs	r2, #255	@ 0xff
 8007464:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007466:	4b89      	ldr	r3, [pc, #548]	@ (800768c <MX_LWIP_Init+0x250>)
 8007468:	22ff      	movs	r2, #255	@ 0xff
 800746a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800746c:	4b87      	ldr	r3, [pc, #540]	@ (800768c <MX_LWIP_Init+0x250>)
 800746e:	2200      	movs	r2, #0
 8007470:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8007472:	4b87      	ldr	r3, [pc, #540]	@ (8007690 <MX_LWIP_Init+0x254>)
 8007474:	2200      	movs	r2, #0
 8007476:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8007478:	4b85      	ldr	r3, [pc, #532]	@ (8007690 <MX_LWIP_Init+0x254>)
 800747a:	2200      	movs	r2, #0
 800747c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800747e:	4b84      	ldr	r3, [pc, #528]	@ (8007690 <MX_LWIP_Init+0x254>)
 8007480:	2200      	movs	r2, #0
 8007482:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8007484:	4b82      	ldr	r3, [pc, #520]	@ (8007690 <MX_LWIP_Init+0x254>)
 8007486:	2200      	movs	r2, #0
 8007488:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800748a:	2100      	movs	r1, #0
 800748c:	2000      	movs	r0, #0
 800748e:	f005 fea3 	bl	800d1d8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007492:	4b7d      	ldr	r3, [pc, #500]	@ (8007688 <MX_LWIP_Init+0x24c>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	061a      	lsls	r2, r3, #24
 8007498:	4b7b      	ldr	r3, [pc, #492]	@ (8007688 <MX_LWIP_Init+0x24c>)
 800749a:	785b      	ldrb	r3, [r3, #1]
 800749c:	041b      	lsls	r3, r3, #16
 800749e:	431a      	orrs	r2, r3
 80074a0:	4b79      	ldr	r3, [pc, #484]	@ (8007688 <MX_LWIP_Init+0x24c>)
 80074a2:	789b      	ldrb	r3, [r3, #2]
 80074a4:	021b      	lsls	r3, r3, #8
 80074a6:	4313      	orrs	r3, r2
 80074a8:	4a77      	ldr	r2, [pc, #476]	@ (8007688 <MX_LWIP_Init+0x24c>)
 80074aa:	78d2      	ldrb	r2, [r2, #3]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	061a      	lsls	r2, r3, #24
 80074b0:	4b75      	ldr	r3, [pc, #468]	@ (8007688 <MX_LWIP_Init+0x24c>)
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	0619      	lsls	r1, r3, #24
 80074b6:	4b74      	ldr	r3, [pc, #464]	@ (8007688 <MX_LWIP_Init+0x24c>)
 80074b8:	785b      	ldrb	r3, [r3, #1]
 80074ba:	041b      	lsls	r3, r3, #16
 80074bc:	4319      	orrs	r1, r3
 80074be:	4b72      	ldr	r3, [pc, #456]	@ (8007688 <MX_LWIP_Init+0x24c>)
 80074c0:	789b      	ldrb	r3, [r3, #2]
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	430b      	orrs	r3, r1
 80074c6:	4970      	ldr	r1, [pc, #448]	@ (8007688 <MX_LWIP_Init+0x24c>)
 80074c8:	78c9      	ldrb	r1, [r1, #3]
 80074ca:	430b      	orrs	r3, r1
 80074cc:	021b      	lsls	r3, r3, #8
 80074ce:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80074d2:	431a      	orrs	r2, r3
 80074d4:	4b6c      	ldr	r3, [pc, #432]	@ (8007688 <MX_LWIP_Init+0x24c>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	0619      	lsls	r1, r3, #24
 80074da:	4b6b      	ldr	r3, [pc, #428]	@ (8007688 <MX_LWIP_Init+0x24c>)
 80074dc:	785b      	ldrb	r3, [r3, #1]
 80074de:	041b      	lsls	r3, r3, #16
 80074e0:	4319      	orrs	r1, r3
 80074e2:	4b69      	ldr	r3, [pc, #420]	@ (8007688 <MX_LWIP_Init+0x24c>)
 80074e4:	789b      	ldrb	r3, [r3, #2]
 80074e6:	021b      	lsls	r3, r3, #8
 80074e8:	430b      	orrs	r3, r1
 80074ea:	4967      	ldr	r1, [pc, #412]	@ (8007688 <MX_LWIP_Init+0x24c>)
 80074ec:	78c9      	ldrb	r1, [r1, #3]
 80074ee:	430b      	orrs	r3, r1
 80074f0:	0a1b      	lsrs	r3, r3, #8
 80074f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80074f6:	431a      	orrs	r2, r3
 80074f8:	4b63      	ldr	r3, [pc, #396]	@ (8007688 <MX_LWIP_Init+0x24c>)
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	0619      	lsls	r1, r3, #24
 80074fe:	4b62      	ldr	r3, [pc, #392]	@ (8007688 <MX_LWIP_Init+0x24c>)
 8007500:	785b      	ldrb	r3, [r3, #1]
 8007502:	041b      	lsls	r3, r3, #16
 8007504:	4319      	orrs	r1, r3
 8007506:	4b60      	ldr	r3, [pc, #384]	@ (8007688 <MX_LWIP_Init+0x24c>)
 8007508:	789b      	ldrb	r3, [r3, #2]
 800750a:	021b      	lsls	r3, r3, #8
 800750c:	430b      	orrs	r3, r1
 800750e:	495e      	ldr	r1, [pc, #376]	@ (8007688 <MX_LWIP_Init+0x24c>)
 8007510:	78c9      	ldrb	r1, [r1, #3]
 8007512:	430b      	orrs	r3, r1
 8007514:	0e1b      	lsrs	r3, r3, #24
 8007516:	4313      	orrs	r3, r2
 8007518:	4a5e      	ldr	r2, [pc, #376]	@ (8007694 <MX_LWIP_Init+0x258>)
 800751a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800751c:	4b5b      	ldr	r3, [pc, #364]	@ (800768c <MX_LWIP_Init+0x250>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	061a      	lsls	r2, r3, #24
 8007522:	4b5a      	ldr	r3, [pc, #360]	@ (800768c <MX_LWIP_Init+0x250>)
 8007524:	785b      	ldrb	r3, [r3, #1]
 8007526:	041b      	lsls	r3, r3, #16
 8007528:	431a      	orrs	r2, r3
 800752a:	4b58      	ldr	r3, [pc, #352]	@ (800768c <MX_LWIP_Init+0x250>)
 800752c:	789b      	ldrb	r3, [r3, #2]
 800752e:	021b      	lsls	r3, r3, #8
 8007530:	4313      	orrs	r3, r2
 8007532:	4a56      	ldr	r2, [pc, #344]	@ (800768c <MX_LWIP_Init+0x250>)
 8007534:	78d2      	ldrb	r2, [r2, #3]
 8007536:	4313      	orrs	r3, r2
 8007538:	061a      	lsls	r2, r3, #24
 800753a:	4b54      	ldr	r3, [pc, #336]	@ (800768c <MX_LWIP_Init+0x250>)
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	0619      	lsls	r1, r3, #24
 8007540:	4b52      	ldr	r3, [pc, #328]	@ (800768c <MX_LWIP_Init+0x250>)
 8007542:	785b      	ldrb	r3, [r3, #1]
 8007544:	041b      	lsls	r3, r3, #16
 8007546:	4319      	orrs	r1, r3
 8007548:	4b50      	ldr	r3, [pc, #320]	@ (800768c <MX_LWIP_Init+0x250>)
 800754a:	789b      	ldrb	r3, [r3, #2]
 800754c:	021b      	lsls	r3, r3, #8
 800754e:	430b      	orrs	r3, r1
 8007550:	494e      	ldr	r1, [pc, #312]	@ (800768c <MX_LWIP_Init+0x250>)
 8007552:	78c9      	ldrb	r1, [r1, #3]
 8007554:	430b      	orrs	r3, r1
 8007556:	021b      	lsls	r3, r3, #8
 8007558:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800755c:	431a      	orrs	r2, r3
 800755e:	4b4b      	ldr	r3, [pc, #300]	@ (800768c <MX_LWIP_Init+0x250>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	0619      	lsls	r1, r3, #24
 8007564:	4b49      	ldr	r3, [pc, #292]	@ (800768c <MX_LWIP_Init+0x250>)
 8007566:	785b      	ldrb	r3, [r3, #1]
 8007568:	041b      	lsls	r3, r3, #16
 800756a:	4319      	orrs	r1, r3
 800756c:	4b47      	ldr	r3, [pc, #284]	@ (800768c <MX_LWIP_Init+0x250>)
 800756e:	789b      	ldrb	r3, [r3, #2]
 8007570:	021b      	lsls	r3, r3, #8
 8007572:	430b      	orrs	r3, r1
 8007574:	4945      	ldr	r1, [pc, #276]	@ (800768c <MX_LWIP_Init+0x250>)
 8007576:	78c9      	ldrb	r1, [r1, #3]
 8007578:	430b      	orrs	r3, r1
 800757a:	0a1b      	lsrs	r3, r3, #8
 800757c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007580:	431a      	orrs	r2, r3
 8007582:	4b42      	ldr	r3, [pc, #264]	@ (800768c <MX_LWIP_Init+0x250>)
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	0619      	lsls	r1, r3, #24
 8007588:	4b40      	ldr	r3, [pc, #256]	@ (800768c <MX_LWIP_Init+0x250>)
 800758a:	785b      	ldrb	r3, [r3, #1]
 800758c:	041b      	lsls	r3, r3, #16
 800758e:	4319      	orrs	r1, r3
 8007590:	4b3e      	ldr	r3, [pc, #248]	@ (800768c <MX_LWIP_Init+0x250>)
 8007592:	789b      	ldrb	r3, [r3, #2]
 8007594:	021b      	lsls	r3, r3, #8
 8007596:	430b      	orrs	r3, r1
 8007598:	493c      	ldr	r1, [pc, #240]	@ (800768c <MX_LWIP_Init+0x250>)
 800759a:	78c9      	ldrb	r1, [r1, #3]
 800759c:	430b      	orrs	r3, r1
 800759e:	0e1b      	lsrs	r3, r3, #24
 80075a0:	4313      	orrs	r3, r2
 80075a2:	4a3d      	ldr	r2, [pc, #244]	@ (8007698 <MX_LWIP_Init+0x25c>)
 80075a4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80075a6:	4b3a      	ldr	r3, [pc, #232]	@ (8007690 <MX_LWIP_Init+0x254>)
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	061a      	lsls	r2, r3, #24
 80075ac:	4b38      	ldr	r3, [pc, #224]	@ (8007690 <MX_LWIP_Init+0x254>)
 80075ae:	785b      	ldrb	r3, [r3, #1]
 80075b0:	041b      	lsls	r3, r3, #16
 80075b2:	431a      	orrs	r2, r3
 80075b4:	4b36      	ldr	r3, [pc, #216]	@ (8007690 <MX_LWIP_Init+0x254>)
 80075b6:	789b      	ldrb	r3, [r3, #2]
 80075b8:	021b      	lsls	r3, r3, #8
 80075ba:	4313      	orrs	r3, r2
 80075bc:	4a34      	ldr	r2, [pc, #208]	@ (8007690 <MX_LWIP_Init+0x254>)
 80075be:	78d2      	ldrb	r2, [r2, #3]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	061a      	lsls	r2, r3, #24
 80075c4:	4b32      	ldr	r3, [pc, #200]	@ (8007690 <MX_LWIP_Init+0x254>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	0619      	lsls	r1, r3, #24
 80075ca:	4b31      	ldr	r3, [pc, #196]	@ (8007690 <MX_LWIP_Init+0x254>)
 80075cc:	785b      	ldrb	r3, [r3, #1]
 80075ce:	041b      	lsls	r3, r3, #16
 80075d0:	4319      	orrs	r1, r3
 80075d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007690 <MX_LWIP_Init+0x254>)
 80075d4:	789b      	ldrb	r3, [r3, #2]
 80075d6:	021b      	lsls	r3, r3, #8
 80075d8:	430b      	orrs	r3, r1
 80075da:	492d      	ldr	r1, [pc, #180]	@ (8007690 <MX_LWIP_Init+0x254>)
 80075dc:	78c9      	ldrb	r1, [r1, #3]
 80075de:	430b      	orrs	r3, r1
 80075e0:	021b      	lsls	r3, r3, #8
 80075e2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80075e6:	431a      	orrs	r2, r3
 80075e8:	4b29      	ldr	r3, [pc, #164]	@ (8007690 <MX_LWIP_Init+0x254>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	0619      	lsls	r1, r3, #24
 80075ee:	4b28      	ldr	r3, [pc, #160]	@ (8007690 <MX_LWIP_Init+0x254>)
 80075f0:	785b      	ldrb	r3, [r3, #1]
 80075f2:	041b      	lsls	r3, r3, #16
 80075f4:	4319      	orrs	r1, r3
 80075f6:	4b26      	ldr	r3, [pc, #152]	@ (8007690 <MX_LWIP_Init+0x254>)
 80075f8:	789b      	ldrb	r3, [r3, #2]
 80075fa:	021b      	lsls	r3, r3, #8
 80075fc:	430b      	orrs	r3, r1
 80075fe:	4924      	ldr	r1, [pc, #144]	@ (8007690 <MX_LWIP_Init+0x254>)
 8007600:	78c9      	ldrb	r1, [r1, #3]
 8007602:	430b      	orrs	r3, r1
 8007604:	0a1b      	lsrs	r3, r3, #8
 8007606:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800760a:	431a      	orrs	r2, r3
 800760c:	4b20      	ldr	r3, [pc, #128]	@ (8007690 <MX_LWIP_Init+0x254>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	0619      	lsls	r1, r3, #24
 8007612:	4b1f      	ldr	r3, [pc, #124]	@ (8007690 <MX_LWIP_Init+0x254>)
 8007614:	785b      	ldrb	r3, [r3, #1]
 8007616:	041b      	lsls	r3, r3, #16
 8007618:	4319      	orrs	r1, r3
 800761a:	4b1d      	ldr	r3, [pc, #116]	@ (8007690 <MX_LWIP_Init+0x254>)
 800761c:	789b      	ldrb	r3, [r3, #2]
 800761e:	021b      	lsls	r3, r3, #8
 8007620:	430b      	orrs	r3, r1
 8007622:	491b      	ldr	r1, [pc, #108]	@ (8007690 <MX_LWIP_Init+0x254>)
 8007624:	78c9      	ldrb	r1, [r1, #3]
 8007626:	430b      	orrs	r3, r1
 8007628:	0e1b      	lsrs	r3, r3, #24
 800762a:	4313      	orrs	r3, r2
 800762c:	4a1b      	ldr	r2, [pc, #108]	@ (800769c <MX_LWIP_Init+0x260>)
 800762e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007630:	4b1b      	ldr	r3, [pc, #108]	@ (80076a0 <MX_LWIP_Init+0x264>)
 8007632:	9302      	str	r3, [sp, #8]
 8007634:	4b1b      	ldr	r3, [pc, #108]	@ (80076a4 <MX_LWIP_Init+0x268>)
 8007636:	9301      	str	r3, [sp, #4]
 8007638:	2300      	movs	r3, #0
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	4b17      	ldr	r3, [pc, #92]	@ (800769c <MX_LWIP_Init+0x260>)
 800763e:	4a16      	ldr	r2, [pc, #88]	@ (8007698 <MX_LWIP_Init+0x25c>)
 8007640:	4914      	ldr	r1, [pc, #80]	@ (8007694 <MX_LWIP_Init+0x258>)
 8007642:	4819      	ldr	r0, [pc, #100]	@ (80076a8 <MX_LWIP_Init+0x26c>)
 8007644:	f006 fd26 	bl	800e094 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007648:	4817      	ldr	r0, [pc, #92]	@ (80076a8 <MX_LWIP_Init+0x26c>)
 800764a:	f006 ffcd 	bl	800e5e8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800764e:	4816      	ldr	r0, [pc, #88]	@ (80076a8 <MX_LWIP_Init+0x26c>)
 8007650:	f006 ffee 	bl	800e630 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007654:	4915      	ldr	r1, [pc, #84]	@ (80076ac <MX_LWIP_Init+0x270>)
 8007656:	4814      	ldr	r0, [pc, #80]	@ (80076a8 <MX_LWIP_Init+0x26c>)
 8007658:	f007 f8f6 	bl	800e848 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800765c:	4b14      	ldr	r3, [pc, #80]	@ (80076b0 <MX_LWIP_Init+0x274>)
 800765e:	1d3c      	adds	r4, r7, #4
 8007660:	461d      	mov	r5, r3
 8007662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800766a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800766e:	1d3b      	adds	r3, r7, #4
 8007670:	490d      	ldr	r1, [pc, #52]	@ (80076a8 <MX_LWIP_Init+0x26c>)
 8007672:	4618      	mov	r0, r3
 8007674:	f002 fd2e 	bl	800a0d4 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */
  // 给ethernet_link_thread一点时间启动，然后强制初始链路检查
  osDelay(100);
 8007678:	2064      	movs	r0, #100	@ 0x64
 800767a:	f002 fd77 	bl	800a16c <osDelay>
/* USER CODE END 3 */
}
 800767e:	bf00      	nop
 8007680:	3720      	adds	r7, #32
 8007682:	46bd      	mov	sp, r7
 8007684:	bdb0      	pop	{r4, r5, r7, pc}
 8007686:	bf00      	nop
 8007688:	20000600 	.word	0x20000600
 800768c:	20000604 	.word	0x20000604
 8007690:	20000608 	.word	0x20000608
 8007694:	200005f4 	.word	0x200005f4
 8007698:	200005f8 	.word	0x200005f8
 800769c:	200005fc 	.word	0x200005fc
 80076a0:	0800d115 	.word	0x0800d115
 80076a4:	08007e4d 	.word	0x08007e4d
 80076a8:	200005b8 	.word	0x200005b8
 80076ac:	080076b5 	.word	0x080076b5
 80076b0:	0801af40 	.word	0x0801af40

080076b4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <ethernet_link_status_updated+0x20>
  {
/* USER CODE BEGIN 5 */
    // 链路连接时，启动网络接口
    netif_set_up(netif);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f006 ffaf 	bl	800e630 <netif_set_up>
/* USER CODE BEGIN 6 */
    // 链路断开时，关闭网络接口
    netif_set_down(netif);
/* USER CODE END 6 */
  }
}
 80076d2:	e002      	b.n	80076da <ethernet_link_status_updated+0x26>
    netif_set_down(netif);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f007 f821 	bl	800e71c <netif_set_down>
}
 80076da:	bf00      	nop
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
	...

080076e4 <YT8512C_ReadReg>:
        }
        HAL_Delay(10); // 小延迟避免过快访问
    }
    CDC_Transmit_FS((uint8_t *)"=== Scan Complete ===\r\n", 24);
}
static int32_t YT8512C_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pData) {
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
    if (HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pData) == HAL_OK) {
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	68f9      	ldr	r1, [r7, #12]
 80076f6:	4809      	ldr	r0, [pc, #36]	@ (800771c <YT8512C_ReadReg+0x38>)
 80076f8:	f7fa ff06 	bl	8002508 <HAL_ETH_ReadPHYRegister>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <YT8512C_ReadReg+0x22>
        #ifdef DEBUG_PHY_REG
        char buffer[32];
        snprintf(buffer, sizeof(buffer), "Read Reg 0x%02X: 0x%04X\r\n", RegAddr, *pData & 0xFFFF);
        CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
        #endif
        return YT8512C_STATUS_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	e005      	b.n	8007712 <YT8512C_ReadReg+0x2e>
    }
    CDC_Transmit_FS((uint8_t *)"Read Error\r\n", 11);
 8007706:	210b      	movs	r1, #11
 8007708:	4805      	ldr	r0, [pc, #20]	@ (8007720 <YT8512C_ReadReg+0x3c>)
 800770a:	f011 fa4f 	bl	8018bac <CDC_Transmit_FS>
    return YT8512C_STATUS_READ_ERROR;
 800770e:	f06f 0304 	mvn.w	r3, #4
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	20005110 	.word	0x20005110
 8007720:	0801afcc 	.word	0x0801afcc

08007724 <YT8512C_WriteReg>:
static int32_t YT8512C_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t Data) {
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
  return (HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, Data) == HAL_OK) ? YT8512C_STATUS_OK : YT8512C_STATUS_WRITE_ERROR;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	68f9      	ldr	r1, [r7, #12]
 8007736:	4807      	ldr	r0, [pc, #28]	@ (8007754 <YT8512C_WriteReg+0x30>)
 8007738:	f7fa ff31 	bl	800259e <HAL_ETH_WritePHYRegister>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <YT8512C_WriteReg+0x22>
 8007742:	2300      	movs	r3, #0
 8007744:	e001      	b.n	800774a <YT8512C_WriteReg+0x26>
 8007746:	f06f 0303 	mvn.w	r3, #3
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	20005110 	.word	0x20005110

08007758 <YT8512C_GetTick>:
static int32_t YT8512C_GetTick(void) {  // 包装以解决类型警告
 8007758:	b580      	push	{r7, lr}
 800775a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800775c:	f7fa f9ee 	bl	8001b3c <HAL_GetTick>
 8007760:	4603      	mov	r3, r0
}
 8007762:	4618      	mov	r0, r3
 8007764:	bd80      	pop	{r7, pc}

08007766 <YT8512C_Init>:
static int32_t YT8512C_Init(void) { return YT8512C_STATUS_OK; }  // 可空实现，HAL已处理
 8007766:	b480      	push	{r7}
 8007768:	af00      	add	r7, sp, #0
 800776a:	2300      	movs	r3, #0
 800776c:	4618      	mov	r0, r3
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <YT8512C_DeInit>:
static int32_t YT8512C_DeInit(void) { return YT8512C_STATUS_OK; }  // 可空实现
 8007776:	b480      	push	{r7}
 8007778:	af00      	add	r7, sp, #0
 800777a:	2300      	movs	r3, #0
 800777c:	4618      	mov	r0, r3
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
	...

08007788 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007790:	4b04      	ldr	r3, [pc, #16]	@ (80077a4 <HAL_ETH_RxCpltCallback+0x1c>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4618      	mov	r0, r3
 8007796:	f002 fe19 	bl	800a3cc <osSemaphoreRelease>
}
 800779a:	bf00      	nop
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	20005108 	.word	0x20005108

080077a8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80077b0:	4b04      	ldr	r3, [pc, #16]	@ (80077c4 <HAL_ETH_TxCpltCallback+0x1c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f002 fe09 	bl	800a3cc <osSemaphoreRelease>
}
 80077ba:	bf00      	nop
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	2000510c 	.word	0x2000510c

080077c8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7fa ff3a 	bl	800264a <HAL_ETH_GetDMAError>
 80077d6:	4603      	mov	r3, r0
 80077d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077dc:	2b80      	cmp	r3, #128	@ 0x80
 80077de:	d104      	bne.n	80077ea <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80077e0:	4b04      	ldr	r3, [pc, #16]	@ (80077f4 <HAL_ETH_ErrorCallback+0x2c>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f002 fdf1 	bl	800a3cc <osSemaphoreRelease>
  }
}
 80077ea:	bf00      	nop
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	20005108 	.word	0x20005108

080077f8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80077f8:	b5b0      	push	{r4, r5, r7, lr}
 80077fa:	b0aa      	sub	sp, #168	@ 0xa8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007800:	2300      	movs	r3, #0
 8007802:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007806:	4bb9      	ldr	r3, [pc, #740]	@ (8007aec <low_level_init+0x2f4>)
 8007808:	4ab9      	ldr	r2, [pc, #740]	@ (8007af0 <low_level_init+0x2f8>)
 800780a:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800780c:	2300      	movs	r3, #0
 800780e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  MACAddr[1] = 0x80;
 8007812:	2380      	movs	r3, #128	@ 0x80
 8007814:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
  MACAddr[2] = 0xE1;
 8007818:	23e1      	movs	r3, #225	@ 0xe1
 800781a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  MACAddr[3] = 0x00;
 800781e:	2300      	movs	r3, #0
 8007820:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
  MACAddr[4] = 0x00;
 8007824:	2300      	movs	r3, #0
 8007826:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  MACAddr[5] = 0x00;
 800782a:	2300      	movs	r3, #0
 800782c:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  heth.Init.MACAddr = &MACAddr[0];
 8007830:	4aae      	ldr	r2, [pc, #696]	@ (8007aec <low_level_init+0x2f4>)
 8007832:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8007836:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007838:	4bac      	ldr	r3, [pc, #688]	@ (8007aec <low_level_init+0x2f4>)
 800783a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800783e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007840:	4baa      	ldr	r3, [pc, #680]	@ (8007aec <low_level_init+0x2f4>)
 8007842:	4aac      	ldr	r2, [pc, #688]	@ (8007af4 <low_level_init+0x2fc>)
 8007844:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007846:	4ba9      	ldr	r3, [pc, #676]	@ (8007aec <low_level_init+0x2f4>)
 8007848:	4aab      	ldr	r2, [pc, #684]	@ (8007af8 <low_level_init+0x300>)
 800784a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800784c:	4ba7      	ldr	r3, [pc, #668]	@ (8007aec <low_level_init+0x2f4>)
 800784e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007852:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
  
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007854:	48a5      	ldr	r0, [pc, #660]	@ (8007aec <low_level_init+0x2f4>)
 8007856:	f7fa fa83 	bl	8001d60 <HAL_ETH_Init>
 800785a:	4603      	mov	r3, r0
 800785c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007860:	2238      	movs	r2, #56	@ 0x38
 8007862:	2100      	movs	r1, #0
 8007864:	48a5      	ldr	r0, [pc, #660]	@ (8007afc <low_level_init+0x304>)
 8007866:	f012 f8cf 	bl	8019a08 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800786a:	4ba4      	ldr	r3, [pc, #656]	@ (8007afc <low_level_init+0x304>)
 800786c:	2221      	movs	r2, #33	@ 0x21
 800786e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007870:	4ba2      	ldr	r3, [pc, #648]	@ (8007afc <low_level_init+0x304>)
 8007872:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8007876:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007878:	4ba0      	ldr	r3, [pc, #640]	@ (8007afc <low_level_init+0x304>)
 800787a:	2200      	movs	r2, #0
 800787c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800787e:	48a0      	ldr	r0, [pc, #640]	@ (8007b00 <low_level_init+0x308>)
 8007880:	f006 fa8a 	bl	800dd98 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2206      	movs	r2, #6
 8007888:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800788c:	4b97      	ldr	r3, [pc, #604]	@ (8007aec <low_level_init+0x2f4>)
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	781a      	ldrb	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007898:	4b94      	ldr	r3, [pc, #592]	@ (8007aec <low_level_init+0x2f4>)
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	785a      	ldrb	r2, [r3, #1]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80078a4:	4b91      	ldr	r3, [pc, #580]	@ (8007aec <low_level_init+0x2f4>)
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	789a      	ldrb	r2, [r3, #2]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80078b0:	4b8e      	ldr	r3, [pc, #568]	@ (8007aec <low_level_init+0x2f4>)
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	78da      	ldrb	r2, [r3, #3]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80078bc:	4b8b      	ldr	r3, [pc, #556]	@ (8007aec <low_level_init+0x2f4>)
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	791a      	ldrb	r2, [r3, #4]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80078c8:	4b88      	ldr	r3, [pc, #544]	@ (8007aec <low_level_init+0x2f4>)
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	795a      	ldrb	r2, [r3, #5]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80078da:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_IGMP;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80078e2:	f043 032a 	orr.w	r3, r3, #42	@ 0x2a
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_IGMP;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 80078ee:	2300      	movs	r3, #0
 80078f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80078f4:	2300      	movs	r3, #0
 80078f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 80078fa:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80078fe:	2101      	movs	r1, #1
 8007900:	4618      	mov	r0, r3
 8007902:	f002 fce3 	bl	800a2cc <osSemaphoreCreate>
 8007906:	4603      	mov	r3, r0
 8007908:	4a7e      	ldr	r2, [pc, #504]	@ (8007b04 <low_level_init+0x30c>)
 800790a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 800790c:	2300      	movs	r3, #0
 800790e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007910:	2300      	movs	r3, #0
 8007912:	67fb      	str	r3, [r7, #124]	@ 0x7c
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8007914:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8007918:	2101      	movs	r1, #1
 800791a:	4618      	mov	r0, r3
 800791c:	f002 fcd6 	bl	800a2cc <osSemaphoreCreate>
 8007920:	4603      	mov	r3, r0
 8007922:	4a79      	ldr	r2, [pc, #484]	@ (8007b08 <low_level_init+0x310>)
 8007924:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8007926:	4b77      	ldr	r3, [pc, #476]	@ (8007b04 <low_level_init+0x30c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2100      	movs	r1, #0
 800792c:	4618      	mov	r0, r3
 800792e:	f002 fcff 	bl	800a330 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8007932:	4b75      	ldr	r3, [pc, #468]	@ (8007b08 <low_level_init+0x310>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2100      	movs	r1, #0
 8007938:	4618      	mov	r0, r3
 800793a:	f002 fcf9 	bl	800a330 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800793e:	4b73      	ldr	r3, [pc, #460]	@ (8007b0c <low_level_init+0x314>)
 8007940:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8007944:	461d      	mov	r5, r3
 8007946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800794a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800794e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8007952:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007956:	6879      	ldr	r1, [r7, #4]
 8007958:	4618      	mov	r0, r3
 800795a:	f002 fbbb 	bl	800a0d4 <osThreadCreate>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 800795e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8007962:	2b00      	cmp	r3, #0
 8007964:	f040 812b 	bne.w	8007bbe <low_level_init+0x3c6>
  {
/* USER CODE BEGIN low_level_init Code 2 for User BSP */
    // ❗️❗️❗️ 关键修复：初始化YT8512C PHY ❗️❗️❗️
    CDC_Transmit_FS((uint8_t*)"🔧 开始初始化YT8512C PHY...\r\n", 32);
 8007968:	2120      	movs	r1, #32
 800796a:	4869      	ldr	r0, [pc, #420]	@ (8007b10 <low_level_init+0x318>)
 800796c:	f011 f91e 	bl	8018bac <CDC_Transmit_FS>
    
    // 设置YT8512C对象的IO接口
    yt8512c.io.init = yt8512c_ioctx.init;
 8007970:	4b68      	ldr	r3, [pc, #416]	@ (8007b14 <low_level_init+0x31c>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a68      	ldr	r2, [pc, #416]	@ (8007b18 <low_level_init+0x320>)
 8007976:	6093      	str	r3, [r2, #8]
    yt8512c.io.deinit = yt8512c_ioctx.deinit;
 8007978:	4b66      	ldr	r3, [pc, #408]	@ (8007b14 <low_level_init+0x31c>)
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	4a66      	ldr	r2, [pc, #408]	@ (8007b18 <low_level_init+0x320>)
 800797e:	60d3      	str	r3, [r2, #12]
    yt8512c.io.readreg = yt8512c_ioctx.readreg;
 8007980:	4b64      	ldr	r3, [pc, #400]	@ (8007b14 <low_level_init+0x31c>)
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	4a64      	ldr	r2, [pc, #400]	@ (8007b18 <low_level_init+0x320>)
 8007986:	6153      	str	r3, [r2, #20]
    yt8512c.io.writereg = yt8512c_ioctx.writereg;
 8007988:	4b62      	ldr	r3, [pc, #392]	@ (8007b14 <low_level_init+0x31c>)
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	4a62      	ldr	r2, [pc, #392]	@ (8007b18 <low_level_init+0x320>)
 800798e:	6113      	str	r3, [r2, #16]
    yt8512c.io.gettick = yt8512c_ioctx.gettick;
 8007990:	4b60      	ldr	r3, [pc, #384]	@ (8007b14 <low_level_init+0x31c>)
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	4a60      	ldr	r2, [pc, #384]	@ (8007b18 <low_level_init+0x320>)
 8007996:	6193      	str	r3, [r2, #24]
    
    // 注册YT8512C对象到ETH句柄
    if (yt8512c_regster_bus_io(&yt8512c, &yt8512c_ioctx) != YT8512C_STATUS_OK) {
 8007998:	495e      	ldr	r1, [pc, #376]	@ (8007b14 <low_level_init+0x31c>)
 800799a:	485f      	ldr	r0, [pc, #380]	@ (8007b18 <low_level_init+0x320>)
 800799c:	f7f9 fecd 	bl	800173a <yt8512c_regster_bus_io>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d005      	beq.n	80079b2 <low_level_init+0x1ba>
        CDC_Transmit_FS((uint8_t*)"❌ YT8512C注册IO失败\r\n", 24);
 80079a6:	2118      	movs	r1, #24
 80079a8:	485c      	ldr	r0, [pc, #368]	@ (8007b1c <low_level_init+0x324>)
 80079aa:	f011 f8ff 	bl	8018bac <CDC_Transmit_FS>
        Error_Handler();
 80079ae:	f7f9 fa77 	bl	8000ea0 <Error_Handler>
    }
    
    // PHY地址通常是0或1，尝试自动检测
    uint32_t phyaddr = 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    for (uint32_t addr = 0; addr <= 31; addr++) {
 80079b8:	2300      	movs	r3, #0
 80079ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80079be:	e031      	b.n	8007a24 <low_level_init+0x22c>
        uint32_t id;
        if (HAL_ETH_ReadPHYRegister(&heth, addr, 0x02, &id) == HAL_OK && id != 0xFFFF && id != 0x0000) {
 80079c0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80079c4:	2202      	movs	r2, #2
 80079c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80079ca:	4848      	ldr	r0, [pc, #288]	@ (8007aec <low_level_init+0x2f4>)
 80079cc:	f7fa fd9c 	bl	8002508 <HAL_ETH_ReadPHYRegister>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d121      	bne.n	8007a1a <low_level_init+0x222>
 80079d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80079dc:	4293      	cmp	r3, r2
 80079de:	d01c      	beq.n	8007a1a <low_level_init+0x222>
 80079e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d019      	beq.n	8007a1a <low_level_init+0x222>
            phyaddr = addr;
 80079e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80079ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
            char msg[60];
            sprintf(msg, "✅ 检测到PHY地址: %lu, ID: 0x%04lX\r\n", addr, id);
 80079ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079f0:	f107 0008 	add.w	r0, r7, #8
 80079f4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80079f8:	4949      	ldr	r1, [pc, #292]	@ (8007b20 <low_level_init+0x328>)
 80079fa:	f011 fee1 	bl	80197c0 <siprintf>
            CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80079fe:	f107 0308 	add.w	r3, r7, #8
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7f8 fbe4 	bl	80001d0 <strlen>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	f107 0308 	add.w	r3, r7, #8
 8007a10:	4611      	mov	r1, r2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f011 f8ca 	bl	8018bac <CDC_Transmit_FS>
            break;
 8007a18:	e008      	b.n	8007a2c <low_level_init+0x234>
    for (uint32_t addr = 0; addr <= 31; addr++) {
 8007a1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a1e:	3301      	adds	r3, #1
 8007a20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a28:	2b1f      	cmp	r3, #31
 8007a2a:	d9c9      	bls.n	80079c0 <low_level_init+0x1c8>
    
    // 设置PHY地址到对象中(可能需要手动设置)
    // 这里简化处理，直接使用检测到的地址
    
    // 初始化YT8512C PHY (根据头文件只需要一个参数)
    int32_t init_result = yt8512c_init(&yt8512c);
 8007a2c:	483a      	ldr	r0, [pc, #232]	@ (8007b18 <low_level_init+0x320>)
 8007a2e:	f7f9 feb7 	bl	80017a0 <yt8512c_init>
 8007a32:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    if (init_result != YT8512C_STATUS_OK) {
 8007a36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d016      	beq.n	8007a6c <low_level_init+0x274>
        char msg[60];
        sprintf(msg, "❌ YT8512C初始化失败: %ld\r\n", init_result);
 8007a3e:	f107 0308 	add.w	r3, r7, #8
 8007a42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a46:	4937      	ldr	r1, [pc, #220]	@ (8007b24 <low_level_init+0x32c>)
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f011 feb9 	bl	80197c0 <siprintf>
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8007a4e:	f107 0308 	add.w	r3, r7, #8
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7f8 fbbc 	bl	80001d0 <strlen>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	f107 0308 	add.w	r3, r7, #8
 8007a60:	4611      	mov	r1, r2
 8007a62:	4618      	mov	r0, r3
 8007a64:	f011 f8a2 	bl	8018bac <CDC_Transmit_FS>
        Error_Handler();
 8007a68:	f7f9 fa1a 	bl	8000ea0 <Error_Handler>
    }
    
    CDC_Transmit_FS((uint8_t*)"✅ YT8512C PHY初始化成功\r\n", 29);
 8007a6c:	211d      	movs	r1, #29
 8007a6e:	482e      	ldr	r0, [pc, #184]	@ (8007b28 <low_level_init+0x330>)
 8007a70:	f011 f89c 	bl	8018bac <CDC_Transmit_FS>
    
    // 启动自动协商
    if (yt8512c_start_auto_nego(&yt8512c) == YT8512C_STATUS_OK) {
 8007a74:	4828      	ldr	r0, [pc, #160]	@ (8007b18 <low_level_init+0x320>)
 8007a76:	f7f9 ffbf 	bl	80019f8 <yt8512c_start_auto_nego>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d103      	bne.n	8007a88 <low_level_init+0x290>
        CDC_Transmit_FS((uint8_t*)"🔄 自动协商已启动\r\n", 22);
 8007a80:	2116      	movs	r1, #22
 8007a82:	482a      	ldr	r0, [pc, #168]	@ (8007b2c <low_level_init+0x334>)
 8007a84:	f011 f892 	bl	8018bac <CDC_Transmit_FS>
    }
    
    // 延时让PHY稳定
    HAL_Delay(100);
 8007a88:	2064      	movs	r0, #100	@ 0x64
 8007a8a:	f7fa f863 	bl	8001b54 <HAL_Delay>
    
    // 检查PHY链路状态
    int32_t link_status = yt8512c_get_link_state(&yt8512c);
 8007a8e:	4822      	ldr	r0, [pc, #136]	@ (8007b18 <low_level_init+0x320>)
 8007a90:	f7f9 ffe0 	bl	8001a54 <yt8512c_get_link_state>
 8007a94:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if (link_status >= 0) {
 8007a98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	db78      	blt.n	8007b92 <low_level_init+0x39a>
        char msg[80];
        if (link_status == YT8512C_STATUS_LINK_DOWN) {
 8007aa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d108      	bne.n	8007aba <low_level_init+0x2c2>
            sprintf(msg, "🔗 PHY链路状态: 断开 (状态=%ld)\r\n", link_status);
 8007aa8:	f107 0308 	add.w	r3, r7, #8
 8007aac:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007ab0:	491f      	ldr	r1, [pc, #124]	@ (8007b30 <low_level_init+0x338>)
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f011 fe84 	bl	80197c0 <siprintf>
 8007ab8:	e05d      	b.n	8007b76 <low_level_init+0x37e>
        } else {
            // 根据状态值判断连接状态和速度
            const char* speed_duplex = "未知";
 8007aba:	4b1e      	ldr	r3, [pc, #120]	@ (8007b34 <low_level_init+0x33c>)
 8007abc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            switch (link_status) {
 8007ac0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ac4:	3b02      	subs	r3, #2
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	d848      	bhi.n	8007b5c <low_level_init+0x364>
 8007aca:	a201      	add	r2, pc, #4	@ (adr r2, 8007ad0 <low_level_init+0x2d8>)
 8007acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad0:	08007ae5 	.word	0x08007ae5
 8007ad4:	08007b3d 	.word	0x08007b3d
 8007ad8:	08007b45 	.word	0x08007b45
 8007adc:	08007b4d 	.word	0x08007b4d
 8007ae0:	08007b55 	.word	0x08007b55
                case YT8512C_STATUS_100MBITS_FULLDUPLEX:
                    speed_duplex = "100Mbps 全双工";
 8007ae4:	4b14      	ldr	r3, [pc, #80]	@ (8007b38 <low_level_init+0x340>)
 8007ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    break;
 8007aea:	e03b      	b.n	8007b64 <low_level_init+0x36c>
 8007aec:	20005110 	.word	0x20005110
 8007af0:	40028000 	.word	0x40028000
 8007af4:	20005068 	.word	0x20005068
 8007af8:	20004fc8 	.word	0x20004fc8
 8007afc:	200051c0 	.word	0x200051c0
 8007b00:	0801f16c 	.word	0x0801f16c
 8007b04:	20005108 	.word	0x20005108
 8007b08:	2000510c 	.word	0x2000510c
 8007b0c:	0801b23c 	.word	0x0801b23c
 8007b10:	0801aff4 	.word	0x0801aff4
 8007b14:	2000000c 	.word	0x2000000c
 8007b18:	2000060c 	.word	0x2000060c
 8007b1c:	0801b01c 	.word	0x0801b01c
 8007b20:	0801b038 	.word	0x0801b038
 8007b24:	0801b064 	.word	0x0801b064
 8007b28:	0801b088 	.word	0x0801b088
 8007b2c:	0801b0ac 	.word	0x0801b0ac
 8007b30:	0801b0cc 	.word	0x0801b0cc
 8007b34:	0801b0f8 	.word	0x0801b0f8
 8007b38:	0801b100 	.word	0x0801b100
                case YT8512C_STATUS_100MBITS_HALFDUPLEX:
                    speed_duplex = "100Mbps 半双工";
 8007b3c:	4b3f      	ldr	r3, [pc, #252]	@ (8007c3c <low_level_init+0x444>)
 8007b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    break;
 8007b42:	e00f      	b.n	8007b64 <low_level_init+0x36c>
                case YT8512C_STATUS_10MBITS_FULLDUPLEX:
                    speed_duplex = "10Mbps 全双工";
 8007b44:	4b3e      	ldr	r3, [pc, #248]	@ (8007c40 <low_level_init+0x448>)
 8007b46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    break;
 8007b4a:	e00b      	b.n	8007b64 <low_level_init+0x36c>
                case YT8512C_STATUS_10MBITS_HALFDUPLEX:
                    speed_duplex = "10Mbps 半双工";
 8007b4c:	4b3d      	ldr	r3, [pc, #244]	@ (8007c44 <low_level_init+0x44c>)
 8007b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    break;
 8007b52:	e007      	b.n	8007b64 <low_level_init+0x36c>
                case YT8512C_STATUS_AUTONEGO_NOTDONE:
                    speed_duplex = "自动协商进行中";
 8007b54:	4b3c      	ldr	r3, [pc, #240]	@ (8007c48 <low_level_init+0x450>)
 8007b56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    break;
 8007b5a:	e003      	b.n	8007b64 <low_level_init+0x36c>
                default:
                    speed_duplex = "未知状态";
 8007b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8007c4c <low_level_init+0x454>)
 8007b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    break;
 8007b62:	bf00      	nop
            }
            sprintf(msg, "🔗 PHY链路状态: %s (状态=%ld)\r\n", speed_duplex, link_status);
 8007b64:	f107 0008 	add.w	r0, r7, #8
 8007b68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b6c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8007b70:	4937      	ldr	r1, [pc, #220]	@ (8007c50 <low_level_init+0x458>)
 8007b72:	f011 fe25 	bl	80197c0 <siprintf>
        }
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8007b76:	f107 0308 	add.w	r3, r7, #8
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7f8 fb28 	bl	80001d0 <strlen>
 8007b80:	4603      	mov	r3, r0
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	f107 0308 	add.w	r3, r7, #8
 8007b88:	4611      	mov	r1, r2
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f011 f80e 	bl	8018bac <CDC_Transmit_FS>
 8007b90:	e017      	b.n	8007bc2 <low_level_init+0x3ca>
    } else {
        char msg[60];
        sprintf(msg, "❌ 读取PHY链路状态失败: %ld\r\n", link_status);
 8007b92:	f107 0308 	add.w	r3, r7, #8
 8007b96:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007b9a:	492e      	ldr	r1, [pc, #184]	@ (8007c54 <low_level_init+0x45c>)
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f011 fe0f 	bl	80197c0 <siprintf>
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8007ba2:	f107 0308 	add.w	r3, r7, #8
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7f8 fb12 	bl	80001d0 <strlen>
 8007bac:	4603      	mov	r3, r0
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	f107 0308 	add.w	r3, r7, #8
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f010 fff8 	bl	8018bac <CDC_Transmit_FS>
 8007bbc:	e001      	b.n	8007bc2 <low_level_init+0x3ca>
/* USER CODE END low_level_init Code 2 for User BSP */

  }
  else
  {
    Error_Handler();
 8007bbe:	f7f9 f96f 	bl	8000ea0 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */
  
  /* ❗️❗️❗️ 关键修复 - 启动ETH接收中断 ❗️❗️❗️ */
  HAL_StatusTypeDef status = HAL_ETH_Start_IT(&heth);
 8007bc2:	4825      	ldr	r0, [pc, #148]	@ (8007c58 <low_level_init+0x460>)
 8007bc4:	f7fa f968 	bl	8001e98 <HAL_ETH_Start_IT>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (status != HAL_OK) {
 8007bce:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d017      	beq.n	8007c06 <low_level_init+0x40e>
    char msg[50];
    snprintf(msg, sizeof(msg), "❌ ETH_Start_IT失败: %d\r\n", status);
 8007bd6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8007bda:	f107 0008 	add.w	r0, r7, #8
 8007bde:	4a1f      	ldr	r2, [pc, #124]	@ (8007c5c <low_level_init+0x464>)
 8007be0:	2132      	movs	r1, #50	@ 0x32
 8007be2:	f011 fdb7 	bl	8019754 <sniprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8007be6:	f107 0308 	add.w	r3, r7, #8
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7f8 faf0 	bl	80001d0 <strlen>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	f107 0308 	add.w	r3, r7, #8
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f010 ffd6 	bl	8018bac <CDC_Transmit_FS>
    Error_Handler();
 8007c00:	f7f9 f94e 	bl	8000ea0 <Error_Handler>
 8007c04:	e003      	b.n	8007c0e <low_level_init+0x416>
  } else {
    CDC_Transmit_FS((uint8_t*)"✅ ETH接收中断已启动\r\n", 24);
 8007c06:	2118      	movs	r1, #24
 8007c08:	4815      	ldr	r0, [pc, #84]	@ (8007c60 <low_level_init+0x468>)
 8007c0a:	f010 ffcf 	bl	8018bac <CDC_Transmit_FS>
  }
  
  /* 启用必要的ETH DMA中断：接收、发送、正常中断摘要 */
  __HAL_ETH_DMA_ENABLE_IT(&heth, ETH_DMA_IT_NIS | ETH_DMA_IT_R | ETH_DMA_IT_T);
 8007c0e:	4b12      	ldr	r3, [pc, #72]	@ (8007c58 <low_level_init+0x460>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c16:	69db      	ldr	r3, [r3, #28]
 8007c18:	4a0f      	ldr	r2, [pc, #60]	@ (8007c58 <low_level_init+0x460>)
 8007c1a:	6812      	ldr	r2, [r2, #0]
 8007c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c20:	f043 0341 	orr.w	r3, r3, #65	@ 0x41
 8007c24:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007c28:	61d3      	str	r3, [r2, #28]
  
  CDC_Transmit_FS((uint8_t*)"✅ ETH DMA接收和发送中断已启用\r\n", 35);
 8007c2a:	2123      	movs	r1, #35	@ 0x23
 8007c2c:	480d      	ldr	r0, [pc, #52]	@ (8007c64 <low_level_init+0x46c>)
 8007c2e:	f010 ffbd 	bl	8018bac <CDC_Transmit_FS>

/* USER CODE END LOW_LEVEL_INIT */
}
 8007c32:	bf00      	nop
 8007c34:	37a8      	adds	r7, #168	@ 0xa8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bdb0      	pop	{r4, r5, r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	0801b114 	.word	0x0801b114
 8007c40:	0801b128 	.word	0x0801b128
 8007c44:	0801b13c 	.word	0x0801b13c
 8007c48:	0801b150 	.word	0x0801b150
 8007c4c:	0801b168 	.word	0x0801b168
 8007c50:	0801b178 	.word	0x0801b178
 8007c54:	0801b1a0 	.word	0x0801b1a0
 8007c58:	20005110 	.word	0x20005110
 8007c5c:	0801b1c8 	.word	0x0801b1c8
 8007c60:	0801b1e8 	.word	0x0801b1e8
 8007c64:	0801b208 	.word	0x0801b208

08007c68 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b092      	sub	sp, #72	@ 0x48
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007c72:	2300      	movs	r3, #0
 8007c74:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8007c76:	2300      	movs	r3, #0
 8007c78:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007c80:	f107 030c 	add.w	r3, r7, #12
 8007c84:	2230      	movs	r2, #48	@ 0x30
 8007c86:	2100      	movs	r1, #0
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f011 febd 	bl	8019a08 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007c8e:	f107 030c 	add.w	r3, r7, #12
 8007c92:	2230      	movs	r2, #48	@ 0x30
 8007c94:	2100      	movs	r1, #0
 8007c96:	4618      	mov	r0, r3
 8007c98:	f011 feb6 	bl	8019a08 <memset>

  for(q = p; q != NULL; q = q->next)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ca0:	e045      	b.n	8007d2e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007ca2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ca4:	2b03      	cmp	r3, #3
 8007ca6:	d902      	bls.n	8007cae <low_level_output+0x46>
      return ERR_IF;
 8007ca8:	f06f 030b 	mvn.w	r3, #11
 8007cac:	e07f      	b.n	8007dae <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8007cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cb0:	6859      	ldr	r1, [r3, #4]
 8007cb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	3348      	adds	r3, #72	@ 0x48
 8007cbe:	443b      	add	r3, r7
 8007cc0:	3b3c      	subs	r3, #60	@ 0x3c
 8007cc2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007cc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cc6:	895b      	ldrh	r3, [r3, #10]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ccc:	4613      	mov	r3, r2
 8007cce:	005b      	lsls	r3, r3, #1
 8007cd0:	4413      	add	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	3348      	adds	r3, #72	@ 0x48
 8007cd6:	443b      	add	r3, r7
 8007cd8:	3b38      	subs	r3, #56	@ 0x38
 8007cda:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d011      	beq.n	8007d06 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007ce2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ce4:	1e5a      	subs	r2, r3, #1
 8007ce6:	f107 000c 	add.w	r0, r7, #12
 8007cea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007cec:	460b      	mov	r3, r1
 8007cee:	005b      	lsls	r3, r3, #1
 8007cf0:	440b      	add	r3, r1
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	18c1      	adds	r1, r0, r3
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	005b      	lsls	r3, r3, #1
 8007cfa:	4413      	add	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	3348      	adds	r3, #72	@ 0x48
 8007d00:	443b      	add	r3, r7
 8007d02:	3b34      	subs	r3, #52	@ 0x34
 8007d04:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d109      	bne.n	8007d22 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8007d0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d10:	4613      	mov	r3, r2
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	4413      	add	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	3348      	adds	r3, #72	@ 0x48
 8007d1a:	443b      	add	r3, r7
 8007d1c:	3b34      	subs	r3, #52	@ 0x34
 8007d1e:	2200      	movs	r2, #0
 8007d20:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007d22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d24:	3301      	adds	r3, #1
 8007d26:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8007d28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1b6      	bne.n	8007ca2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	891b      	ldrh	r3, [r3, #8]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8007db8 <low_level_output+0x150>)
 8007d3c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8007db8 <low_level_output+0x150>)
 8007d40:	f107 030c 	add.w	r3, r7, #12
 8007d44:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007d46:	4a1c      	ldr	r2, [pc, #112]	@ (8007db8 <low_level_output+0x150>)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8007d4c:	6838      	ldr	r0, [r7, #0]
 8007d4e:	f007 f9cf 	bl	800f0f0 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8007d52:	4919      	ldr	r1, [pc, #100]	@ (8007db8 <low_level_output+0x150>)
 8007d54:	4819      	ldr	r0, [pc, #100]	@ (8007dbc <low_level_output+0x154>)
 8007d56:	f7fa f90f 	bl	8001f78 <HAL_ETH_Transmit_IT>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d103      	bne.n	8007d68 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007d66:	e01b      	b.n	8007da0 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8007d68:	4814      	ldr	r0, [pc, #80]	@ (8007dbc <low_level_output+0x154>)
 8007d6a:	f7fa fc61 	bl	8002630 <HAL_ETH_GetError>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	f003 0302 	and.w	r3, r3, #2
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00d      	beq.n	8007d94 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8007d78:	4b11      	ldr	r3, [pc, #68]	@ (8007dc0 <low_level_output+0x158>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8007d80:	4618      	mov	r0, r3
 8007d82:	f002 fad5 	bl	800a330 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 8007d86:	480d      	ldr	r0, [pc, #52]	@ (8007dbc <low_level_output+0x154>)
 8007d88:	f7fa fa95 	bl	80022b6 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8007d8c:	23fe      	movs	r3, #254	@ 0xfe
 8007d8e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007d92:	e005      	b.n	8007da0 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8007d94:	6838      	ldr	r0, [r7, #0]
 8007d96:	f007 f905 	bl	800efa4 <pbuf_free>
        errval =  ERR_IF;
 8007d9a:	23f4      	movs	r3, #244	@ 0xf4
 8007d9c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8007da0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007da4:	f113 0f02 	cmn.w	r3, #2
 8007da8:	d0d3      	beq.n	8007d52 <low_level_output+0xea>

  return errval;
 8007daa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3748      	adds	r7, #72	@ 0x48
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	200051c0 	.word	0x200051c0
 8007dbc:	20005110 	.word	0x20005110
 8007dc0:	2000510c 	.word	0x2000510c

08007dc4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8007dd0:	4b07      	ldr	r3, [pc, #28]	@ (8007df0 <low_level_input+0x2c>)
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d105      	bne.n	8007de4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007dd8:	f107 030c 	add.w	r3, r7, #12
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4805      	ldr	r0, [pc, #20]	@ (8007df4 <low_level_input+0x30>)
 8007de0:	f7fa f926 	bl	8002030 <HAL_ETH_ReadData>
  }

  return p;
 8007de4:	68fb      	ldr	r3, [r7, #12]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20004fc4 	.word	0x20004fc4
 8007df4:	20005110 	.word	0x20005110

08007df8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007e00:	2300      	movs	r3, #0
 8007e02:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007e08:	4b0f      	ldr	r3, [pc, #60]	@ (8007e48 <ethernetif_input+0x50>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8007e10:	4618      	mov	r0, r3
 8007e12:	f002 fa8d 	bl	800a330 <osSemaphoreWait>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1f5      	bne.n	8007e08 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8007e1c:	68b8      	ldr	r0, [r7, #8]
 8007e1e:	f7ff ffd1 	bl	8007dc4 <low_level_input>
 8007e22:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00a      	beq.n	8007e40 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	68b9      	ldr	r1, [r7, #8]
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	4798      	blx	r3
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d002      	beq.n	8007e40 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f007 f8b2 	bl	800efa4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1ea      	bne.n	8007e1c <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007e46:	e7df      	b.n	8007e08 <ethernetif_input+0x10>
 8007e48:	20005108 	.word	0x20005108

08007e4c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d106      	bne.n	8007e68 <ethernetif_init+0x1c>
 8007e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8007e94 <ethernetif_init+0x48>)
 8007e5c:	f44f 7219 	mov.w	r2, #612	@ 0x264
 8007e60:	490d      	ldr	r1, [pc, #52]	@ (8007e98 <ethernetif_init+0x4c>)
 8007e62:	480e      	ldr	r0, [pc, #56]	@ (8007e9c <ethernetif_init+0x50>)
 8007e64:	f011 fbfe 	bl	8019664 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2273      	movs	r2, #115	@ 0x73
 8007e6c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2274      	movs	r2, #116	@ 0x74
 8007e74:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a09      	ldr	r2, [pc, #36]	@ (8007ea0 <ethernetif_init+0x54>)
 8007e7c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a08      	ldr	r2, [pc, #32]	@ (8007ea4 <ethernetif_init+0x58>)
 8007e82:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7ff fcb7 	bl	80077f8 <low_level_init>

  return ERR_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	0801b258 	.word	0x0801b258
 8007e98:	0801b274 	.word	0x0801b274
 8007e9c:	0801b284 	.word	0x0801b284
 8007ea0:	08015d49 	.word	0x08015d49
 8007ea4:	08007c69 	.word	0x08007c69

08007ea8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007eb4:	68f9      	ldr	r1, [r7, #12]
 8007eb6:	4809      	ldr	r0, [pc, #36]	@ (8007edc <pbuf_free_custom+0x34>)
 8007eb8:	f006 f896 	bl	800dfe8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007ebc:	4b08      	ldr	r3, [pc, #32]	@ (8007ee0 <pbuf_free_custom+0x38>)
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d107      	bne.n	8007ed4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007ec4:	4b06      	ldr	r3, [pc, #24]	@ (8007ee0 <pbuf_free_custom+0x38>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8007eca:	4b06      	ldr	r3, [pc, #24]	@ (8007ee4 <pbuf_free_custom+0x3c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f002 fa7c 	bl	800a3cc <osSemaphoreRelease>
  }
}
 8007ed4:	bf00      	nop
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	0801f16c 	.word	0x0801f16c
 8007ee0:	20004fc4 	.word	0x20004fc4
 8007ee4:	20005108 	.word	0x20005108

08007ee8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007eec:	f7f9 fe26 	bl	8001b3c <HAL_GetTick>
 8007ef0:	4603      	mov	r3, r0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	bd80      	pop	{r7, pc}
	...

08007ef8 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]

  for(;;)
  {

/* USER CODE BEGIN ETH link Thread core code for User BSP */
    struct netif *netif = (struct netif *) argument;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	60fb      	str	r3, [r7, #12]
    
    /* 简化的PHY状态检测 - 使用标准HAL函数 */
    uint32_t regval = 0;
 8007f04:	2300      	movs	r3, #0
 8007f06:	60bb      	str	r3, [r7, #8]
    
    /* 读取PHY基本状态寄存器(BSR, Register 1) */
    if (HAL_ETH_ReadPHYRegister(&heth, 0x00, PHY_BSR, &regval) == HAL_OK) {
 8007f08:	f107 0308 	add.w	r3, r7, #8
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	2100      	movs	r1, #0
 8007f10:	4819      	ldr	r0, [pc, #100]	@ (8007f78 <ethernet_link_thread+0x80>)
 8007f12:	f7fa faf9 	bl	8002508 <HAL_ETH_ReadPHYRegister>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d11c      	bne.n	8007f56 <ethernet_link_thread+0x5e>
        /* 检查Link Status bit (bit 2) */
        if (regval & PHY_LINKED_STATUS) {
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	f003 0304 	and.w	r3, r3, #4
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00a      	beq.n	8007f3c <ethernet_link_thread+0x44>
            /* Link is up */
            if (!netif_is_link_up(netif)) {
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007f2c:	f003 0304 	and.w	r3, r3, #4
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d11c      	bne.n	8007f6e <ethernet_link_thread+0x76>
                netif_set_link_up(netif);
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f006 fc23 	bl	800e780 <netif_set_link_up>
 8007f3a:	e018      	b.n	8007f6e <ethernet_link_thread+0x76>
            }
        } else {
            /* Link is down */
            if (netif_is_link_up(netif)) {
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007f42:	089b      	lsrs	r3, r3, #2
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00f      	beq.n	8007f6e <ethernet_link_thread+0x76>
                netif_set_link_down(netif);
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f006 fc4a 	bl	800e7e8 <netif_set_link_down>
 8007f54:	e00b      	b.n	8007f6e <ethernet_link_thread+0x76>
            }
        }
    } else {
        /* PHY read failed - assume link down */
        if (netif_is_link_up(netif)) {
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007f5c:	089b      	lsrs	r3, r3, #2
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d002      	beq.n	8007f6e <ethernet_link_thread+0x76>
            netif_set_link_down(netif);
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f006 fc3d 	bl	800e7e8 <netif_set_link_down>
        }
    }
/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8007f6e:	2064      	movs	r0, #100	@ 0x64
 8007f70:	f002 f8fc 	bl	800a16c <osDelay>
  {
 8007f74:	e7c4      	b.n	8007f00 <ethernet_link_thread+0x8>
 8007f76:	bf00      	nop
 8007f78:	20005110 	.word	0x20005110

08007f7c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af02      	add	r7, sp, #8
 8007f82:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007f84:	4812      	ldr	r0, [pc, #72]	@ (8007fd0 <HAL_ETH_RxAllocateCallback+0x54>)
 8007f86:	f005 ffb5 	bl	800def4 <memp_malloc_pool>
 8007f8a:	60f8      	str	r0, [r7, #12]
  if (p)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d014      	beq.n	8007fbc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f103 0220 	add.w	r2, r3, #32
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4a0d      	ldr	r2, [pc, #52]	@ (8007fd4 <HAL_ETH_RxAllocateCallback+0x58>)
 8007fa0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007faa:	9201      	str	r2, [sp, #4]
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2241      	movs	r2, #65	@ 0x41
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	f006 fe3b 	bl	800ec30 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007fba:	e005      	b.n	8007fc8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007fbc:	4b06      	ldr	r3, [pc, #24]	@ (8007fd8 <HAL_ETH_RxAllocateCallback+0x5c>)
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	601a      	str	r2, [r3, #0]
}
 8007fc8:	bf00      	nop
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	0801f16c 	.word	0x0801f16c
 8007fd4:	08007ea9 	.word	0x08007ea9
 8007fd8:	20004fc4 	.word	0x20004fc4

08007fdc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b089      	sub	sp, #36	@ 0x24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
 8007fe8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	3b20      	subs	r3, #32
 8007ffa:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	2200      	movs	r2, #0
 8008000:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	2200      	movs	r2, #0
 8008006:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	887a      	ldrh	r2, [r7, #2]
 800800c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d103      	bne.n	800801e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	69fa      	ldr	r2, [r7, #28]
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	e003      	b.n	8008026 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	69fa      	ldr	r2, [r7, #28]
 8008024:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	69fa      	ldr	r2, [r7, #28]
 800802a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	61fb      	str	r3, [r7, #28]
 8008032:	e009      	b.n	8008048 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	891a      	ldrh	r2, [r3, #8]
 8008038:	887b      	ldrh	r3, [r7, #2]
 800803a:	4413      	add	r3, r2
 800803c:	b29a      	uxth	r2, r3
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	61fb      	str	r3, [r7, #28]
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1f2      	bne.n	8008034 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800804e:	bf00      	nop
 8008050:	bf00      	nop
 8008052:	3724      	adds	r7, #36	@ 0x24
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f006 ff9d 	bl	800efa4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800806a:	bf00      	nop
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
	...

08008074 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	460b      	mov	r3, r1
 800807e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008080:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008084:	f011 f9aa 	bl	80193dc <USBD_static_malloc>
 8008088:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d109      	bne.n	80080a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	32b0      	adds	r2, #176	@ 0xb0
 800809a:	2100      	movs	r1, #0
 800809c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80080a0:	2302      	movs	r3, #2
 80080a2:	e0d4      	b.n	800824e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80080a4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80080a8:	2100      	movs	r1, #0
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f011 fcac 	bl	8019a08 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	32b0      	adds	r2, #176	@ 0xb0
 80080ba:	68f9      	ldr	r1, [r7, #12]
 80080bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	32b0      	adds	r2, #176	@ 0xb0
 80080ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	7c1b      	ldrb	r3, [r3, #16]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d138      	bne.n	800814e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80080dc:	4b5e      	ldr	r3, [pc, #376]	@ (8008258 <USBD_CDC_Init+0x1e4>)
 80080de:	7819      	ldrb	r1, [r3, #0]
 80080e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080e4:	2202      	movs	r2, #2
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f011 f855 	bl	8019196 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80080ec:	4b5a      	ldr	r3, [pc, #360]	@ (8008258 <USBD_CDC_Init+0x1e4>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	f003 020f 	and.w	r2, r3, #15
 80080f4:	6879      	ldr	r1, [r7, #4]
 80080f6:	4613      	mov	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	440b      	add	r3, r1
 8008100:	3323      	adds	r3, #35	@ 0x23
 8008102:	2201      	movs	r2, #1
 8008104:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008106:	4b55      	ldr	r3, [pc, #340]	@ (800825c <USBD_CDC_Init+0x1e8>)
 8008108:	7819      	ldrb	r1, [r3, #0]
 800810a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800810e:	2202      	movs	r2, #2
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f011 f840 	bl	8019196 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008116:	4b51      	ldr	r3, [pc, #324]	@ (800825c <USBD_CDC_Init+0x1e8>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	f003 020f 	and.w	r2, r3, #15
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	4613      	mov	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	440b      	add	r3, r1
 800812a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800812e:	2201      	movs	r2, #1
 8008130:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008132:	4b4b      	ldr	r3, [pc, #300]	@ (8008260 <USBD_CDC_Init+0x1ec>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	f003 020f 	and.w	r2, r3, #15
 800813a:	6879      	ldr	r1, [r7, #4]
 800813c:	4613      	mov	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	440b      	add	r3, r1
 8008146:	331c      	adds	r3, #28
 8008148:	2210      	movs	r2, #16
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	e035      	b.n	80081ba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800814e:	4b42      	ldr	r3, [pc, #264]	@ (8008258 <USBD_CDC_Init+0x1e4>)
 8008150:	7819      	ldrb	r1, [r3, #0]
 8008152:	2340      	movs	r3, #64	@ 0x40
 8008154:	2202      	movs	r2, #2
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f011 f81d 	bl	8019196 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800815c:	4b3e      	ldr	r3, [pc, #248]	@ (8008258 <USBD_CDC_Init+0x1e4>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	f003 020f 	and.w	r2, r3, #15
 8008164:	6879      	ldr	r1, [r7, #4]
 8008166:	4613      	mov	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	440b      	add	r3, r1
 8008170:	3323      	adds	r3, #35	@ 0x23
 8008172:	2201      	movs	r2, #1
 8008174:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008176:	4b39      	ldr	r3, [pc, #228]	@ (800825c <USBD_CDC_Init+0x1e8>)
 8008178:	7819      	ldrb	r1, [r3, #0]
 800817a:	2340      	movs	r3, #64	@ 0x40
 800817c:	2202      	movs	r2, #2
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f011 f809 	bl	8019196 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008184:	4b35      	ldr	r3, [pc, #212]	@ (800825c <USBD_CDC_Init+0x1e8>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	f003 020f 	and.w	r2, r3, #15
 800818c:	6879      	ldr	r1, [r7, #4]
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	440b      	add	r3, r1
 8008198:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800819c:	2201      	movs	r2, #1
 800819e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80081a0:	4b2f      	ldr	r3, [pc, #188]	@ (8008260 <USBD_CDC_Init+0x1ec>)
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	f003 020f 	and.w	r2, r3, #15
 80081a8:	6879      	ldr	r1, [r7, #4]
 80081aa:	4613      	mov	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4413      	add	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	440b      	add	r3, r1
 80081b4:	331c      	adds	r3, #28
 80081b6:	2210      	movs	r2, #16
 80081b8:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80081ba:	4b29      	ldr	r3, [pc, #164]	@ (8008260 <USBD_CDC_Init+0x1ec>)
 80081bc:	7819      	ldrb	r1, [r3, #0]
 80081be:	2308      	movs	r3, #8
 80081c0:	2203      	movs	r2, #3
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f010 ffe7 	bl	8019196 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80081c8:	4b25      	ldr	r3, [pc, #148]	@ (8008260 <USBD_CDC_Init+0x1ec>)
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	f003 020f 	and.w	r2, r3, #15
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	4613      	mov	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	440b      	add	r3, r1
 80081dc:	3323      	adds	r3, #35	@ 0x23
 80081de:	2201      	movs	r2, #1
 80081e0:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	33b0      	adds	r3, #176	@ 0xb0
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008214:	2b00      	cmp	r3, #0
 8008216:	d101      	bne.n	800821c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008218:	2302      	movs	r3, #2
 800821a:	e018      	b.n	800824e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	7c1b      	ldrb	r3, [r3, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10a      	bne.n	800823a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008224:	4b0d      	ldr	r3, [pc, #52]	@ (800825c <USBD_CDC_Init+0x1e8>)
 8008226:	7819      	ldrb	r1, [r3, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800822e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f011 f89e 	bl	8019374 <USBD_LL_PrepareReceive>
 8008238:	e008      	b.n	800824c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800823a:	4b08      	ldr	r3, [pc, #32]	@ (800825c <USBD_CDC_Init+0x1e8>)
 800823c:	7819      	ldrb	r1, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008244:	2340      	movs	r3, #64	@ 0x40
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f011 f894 	bl	8019374 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	200000a7 	.word	0x200000a7
 800825c:	200000a8 	.word	0x200000a8
 8008260:	200000a9 	.word	0x200000a9

08008264 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	460b      	mov	r3, r1
 800826e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008270:	4b3a      	ldr	r3, [pc, #232]	@ (800835c <USBD_CDC_DeInit+0xf8>)
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f010 ffb3 	bl	80191e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800827c:	4b37      	ldr	r3, [pc, #220]	@ (800835c <USBD_CDC_DeInit+0xf8>)
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	f003 020f 	and.w	r2, r3, #15
 8008284:	6879      	ldr	r1, [r7, #4]
 8008286:	4613      	mov	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	440b      	add	r3, r1
 8008290:	3323      	adds	r3, #35	@ 0x23
 8008292:	2200      	movs	r2, #0
 8008294:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008296:	4b32      	ldr	r3, [pc, #200]	@ (8008360 <USBD_CDC_DeInit+0xfc>)
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f010 ffa0 	bl	80191e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80082a2:	4b2f      	ldr	r3, [pc, #188]	@ (8008360 <USBD_CDC_DeInit+0xfc>)
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	f003 020f 	and.w	r2, r3, #15
 80082aa:	6879      	ldr	r1, [r7, #4]
 80082ac:	4613      	mov	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	440b      	add	r3, r1
 80082b6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80082ba:	2200      	movs	r2, #0
 80082bc:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80082be:	4b29      	ldr	r3, [pc, #164]	@ (8008364 <USBD_CDC_DeInit+0x100>)
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	4619      	mov	r1, r3
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f010 ff8c 	bl	80191e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80082ca:	4b26      	ldr	r3, [pc, #152]	@ (8008364 <USBD_CDC_DeInit+0x100>)
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	f003 020f 	and.w	r2, r3, #15
 80082d2:	6879      	ldr	r1, [r7, #4]
 80082d4:	4613      	mov	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	440b      	add	r3, r1
 80082de:	3323      	adds	r3, #35	@ 0x23
 80082e0:	2200      	movs	r2, #0
 80082e2:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80082e4:	4b1f      	ldr	r3, [pc, #124]	@ (8008364 <USBD_CDC_DeInit+0x100>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	f003 020f 	and.w	r2, r3, #15
 80082ec:	6879      	ldr	r1, [r7, #4]
 80082ee:	4613      	mov	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	440b      	add	r3, r1
 80082f8:	331c      	adds	r3, #28
 80082fa:	2200      	movs	r2, #0
 80082fc:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	32b0      	adds	r2, #176	@ 0xb0
 8008308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d01f      	beq.n	8008350 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	33b0      	adds	r3, #176	@ 0xb0
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	32b0      	adds	r2, #176	@ 0xb0
 800832e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008332:	4618      	mov	r0, r3
 8008334:	f011 f860 	bl	80193f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	32b0      	adds	r2, #176	@ 0xb0
 8008342:	2100      	movs	r1, #0
 8008344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	200000a7 	.word	0x200000a7
 8008360:	200000a8 	.word	0x200000a8
 8008364:	200000a9 	.word	0x200000a9

08008368 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	32b0      	adds	r2, #176	@ 0xb0
 800837c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008380:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008382:	2300      	movs	r3, #0
 8008384:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d101      	bne.n	8008398 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008394:	2303      	movs	r3, #3
 8008396:	e0bf      	b.n	8008518 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d050      	beq.n	8008446 <USBD_CDC_Setup+0xde>
 80083a4:	2b20      	cmp	r3, #32
 80083a6:	f040 80af 	bne.w	8008508 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	88db      	ldrh	r3, [r3, #6]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d03a      	beq.n	8008428 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	b25b      	sxtb	r3, r3
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	da1b      	bge.n	80083f4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	33b0      	adds	r3, #176	@ 0xb0
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80083d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	88d2      	ldrh	r2, [r2, #6]
 80083d8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	88db      	ldrh	r3, [r3, #6]
 80083de:	2b07      	cmp	r3, #7
 80083e0:	bf28      	it	cs
 80083e2:	2307      	movcs	r3, #7
 80083e4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	89fa      	ldrh	r2, [r7, #14]
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 fda9 	bl	8009f44 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80083f2:	e090      	b.n	8008516 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	785a      	ldrb	r2, [r3, #1]
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	88db      	ldrh	r3, [r3, #6]
 8008402:	2b3f      	cmp	r3, #63	@ 0x3f
 8008404:	d803      	bhi.n	800840e <USBD_CDC_Setup+0xa6>
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	88db      	ldrh	r3, [r3, #6]
 800840a:	b2da      	uxtb	r2, r3
 800840c:	e000      	b.n	8008410 <USBD_CDC_Setup+0xa8>
 800840e:	2240      	movs	r2, #64	@ 0x40
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008416:	6939      	ldr	r1, [r7, #16]
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800841e:	461a      	mov	r2, r3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f001 fdbe 	bl	8009fa2 <USBD_CtlPrepareRx>
      break;
 8008426:	e076      	b.n	8008516 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	33b0      	adds	r3, #176	@ 0xb0
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	683a      	ldr	r2, [r7, #0]
 800843c:	7850      	ldrb	r0, [r2, #1]
 800843e:	2200      	movs	r2, #0
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	4798      	blx	r3
      break;
 8008444:	e067      	b.n	8008516 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	785b      	ldrb	r3, [r3, #1]
 800844a:	2b0b      	cmp	r3, #11
 800844c:	d851      	bhi.n	80084f2 <USBD_CDC_Setup+0x18a>
 800844e:	a201      	add	r2, pc, #4	@ (adr r2, 8008454 <USBD_CDC_Setup+0xec>)
 8008450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008454:	08008485 	.word	0x08008485
 8008458:	08008501 	.word	0x08008501
 800845c:	080084f3 	.word	0x080084f3
 8008460:	080084f3 	.word	0x080084f3
 8008464:	080084f3 	.word	0x080084f3
 8008468:	080084f3 	.word	0x080084f3
 800846c:	080084f3 	.word	0x080084f3
 8008470:	080084f3 	.word	0x080084f3
 8008474:	080084f3 	.word	0x080084f3
 8008478:	080084f3 	.word	0x080084f3
 800847c:	080084af 	.word	0x080084af
 8008480:	080084d9 	.word	0x080084d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800848a:	b2db      	uxtb	r3, r3
 800848c:	2b03      	cmp	r3, #3
 800848e:	d107      	bne.n	80084a0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008490:	f107 030a 	add.w	r3, r7, #10
 8008494:	2202      	movs	r2, #2
 8008496:	4619      	mov	r1, r3
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 fd53 	bl	8009f44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800849e:	e032      	b.n	8008506 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f001 fcd1 	bl	8009e4a <USBD_CtlError>
            ret = USBD_FAIL;
 80084a8:	2303      	movs	r3, #3
 80084aa:	75fb      	strb	r3, [r7, #23]
          break;
 80084ac:	e02b      	b.n	8008506 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d107      	bne.n	80084ca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80084ba:	f107 030d 	add.w	r3, r7, #13
 80084be:	2201      	movs	r2, #1
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f001 fd3e 	bl	8009f44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084c8:	e01d      	b.n	8008506 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f001 fcbc 	bl	8009e4a <USBD_CtlError>
            ret = USBD_FAIL;
 80084d2:	2303      	movs	r3, #3
 80084d4:	75fb      	strb	r3, [r7, #23]
          break;
 80084d6:	e016      	b.n	8008506 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d00f      	beq.n	8008504 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f001 fcaf 	bl	8009e4a <USBD_CtlError>
            ret = USBD_FAIL;
 80084ec:	2303      	movs	r3, #3
 80084ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80084f0:	e008      	b.n	8008504 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f001 fca8 	bl	8009e4a <USBD_CtlError>
          ret = USBD_FAIL;
 80084fa:	2303      	movs	r3, #3
 80084fc:	75fb      	strb	r3, [r7, #23]
          break;
 80084fe:	e002      	b.n	8008506 <USBD_CDC_Setup+0x19e>
          break;
 8008500:	bf00      	nop
 8008502:	e008      	b.n	8008516 <USBD_CDC_Setup+0x1ae>
          break;
 8008504:	bf00      	nop
      }
      break;
 8008506:	e006      	b.n	8008516 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f001 fc9d 	bl	8009e4a <USBD_CtlError>
      ret = USBD_FAIL;
 8008510:	2303      	movs	r3, #3
 8008512:	75fb      	strb	r3, [r7, #23]
      break;
 8008514:	bf00      	nop
  }

  return (uint8_t)ret;
 8008516:	7dfb      	ldrb	r3, [r7, #23]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3718      	adds	r7, #24
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	460b      	mov	r3, r1
 800852a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008532:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	32b0      	adds	r2, #176	@ 0xb0
 800853e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008546:	2303      	movs	r3, #3
 8008548:	e065      	b.n	8008616 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	32b0      	adds	r2, #176	@ 0xb0
 8008554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008558:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800855a:	78fb      	ldrb	r3, [r7, #3]
 800855c:	f003 020f 	and.w	r2, r3, #15
 8008560:	6879      	ldr	r1, [r7, #4]
 8008562:	4613      	mov	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	440b      	add	r3, r1
 800856c:	3314      	adds	r3, #20
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d02f      	beq.n	80085d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008574:	78fb      	ldrb	r3, [r7, #3]
 8008576:	f003 020f 	and.w	r2, r3, #15
 800857a:	6879      	ldr	r1, [r7, #4]
 800857c:	4613      	mov	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4413      	add	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	440b      	add	r3, r1
 8008586:	3314      	adds	r3, #20
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	78fb      	ldrb	r3, [r7, #3]
 800858c:	f003 010f 	and.w	r1, r3, #15
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	460b      	mov	r3, r1
 8008594:	00db      	lsls	r3, r3, #3
 8008596:	440b      	add	r3, r1
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4403      	add	r3, r0
 800859c:	331c      	adds	r3, #28
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80085a4:	fb01 f303 	mul.w	r3, r1, r3
 80085a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d112      	bne.n	80085d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80085ae:	78fb      	ldrb	r3, [r7, #3]
 80085b0:	f003 020f 	and.w	r2, r3, #15
 80085b4:	6879      	ldr	r1, [r7, #4]
 80085b6:	4613      	mov	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	440b      	add	r3, r1
 80085c0:	3314      	adds	r3, #20
 80085c2:	2200      	movs	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80085c6:	78f9      	ldrb	r1, [r7, #3]
 80085c8:	2300      	movs	r3, #0
 80085ca:	2200      	movs	r2, #0
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f010 feb0 	bl	8019332 <USBD_LL_Transmit>
 80085d2:	e01f      	b.n	8008614 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	33b0      	adds	r3, #176	@ 0xb0
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4413      	add	r3, r2
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d010      	beq.n	8008614 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	33b0      	adds	r3, #176	@ 0xb0
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800860a:	68ba      	ldr	r2, [r7, #8]
 800860c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008610:	78fa      	ldrb	r2, [r7, #3]
 8008612:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b084      	sub	sp, #16
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	460b      	mov	r3, r1
 8008628:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	32b0      	adds	r2, #176	@ 0xb0
 8008634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008638:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	32b0      	adds	r2, #176	@ 0xb0
 8008644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d101      	bne.n	8008650 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800864c:	2303      	movs	r3, #3
 800864e:	e01a      	b.n	8008686 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008650:	78fb      	ldrb	r3, [r7, #3]
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f010 feae 	bl	80193b6 <USBD_LL_GetRxDataSize>
 800865a:	4602      	mov	r2, r0
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	33b0      	adds	r3, #176	@ 0xb0
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008680:	4611      	mov	r1, r2
 8008682:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	32b0      	adds	r2, #176	@ 0xb0
 80086a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d101      	bne.n	80086b0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e024      	b.n	80086fa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	33b0      	adds	r3, #176	@ 0xb0
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4413      	add	r3, r2
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d019      	beq.n	80086f8 <USBD_CDC_EP0_RxReady+0x6a>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80086ca:	2bff      	cmp	r3, #255	@ 0xff
 80086cc:	d014      	beq.n	80086f8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	33b0      	adds	r3, #176	@ 0xb0
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80086e6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80086ee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	22ff      	movs	r2, #255	@ 0xff
 80086f4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800870c:	2182      	movs	r1, #130	@ 0x82
 800870e:	4818      	ldr	r0, [pc, #96]	@ (8008770 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008710:	f000 fd62 	bl	80091d8 <USBD_GetEpDesc>
 8008714:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008716:	2101      	movs	r1, #1
 8008718:	4815      	ldr	r0, [pc, #84]	@ (8008770 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800871a:	f000 fd5d 	bl	80091d8 <USBD_GetEpDesc>
 800871e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008720:	2181      	movs	r1, #129	@ 0x81
 8008722:	4813      	ldr	r0, [pc, #76]	@ (8008770 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008724:	f000 fd58 	bl	80091d8 <USBD_GetEpDesc>
 8008728:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	2210      	movs	r2, #16
 8008734:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d006      	beq.n	800874a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	2200      	movs	r2, #0
 8008740:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008744:	711a      	strb	r2, [r3, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d006      	beq.n	800875e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008758:	711a      	strb	r2, [r3, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2243      	movs	r2, #67	@ 0x43
 8008762:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008764:	4b02      	ldr	r3, [pc, #8]	@ (8008770 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008766:	4618      	mov	r0, r3
 8008768:	3718      	adds	r7, #24
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	20000064 	.word	0x20000064

08008774 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800877c:	2182      	movs	r1, #130	@ 0x82
 800877e:	4818      	ldr	r0, [pc, #96]	@ (80087e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008780:	f000 fd2a 	bl	80091d8 <USBD_GetEpDesc>
 8008784:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008786:	2101      	movs	r1, #1
 8008788:	4815      	ldr	r0, [pc, #84]	@ (80087e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800878a:	f000 fd25 	bl	80091d8 <USBD_GetEpDesc>
 800878e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008790:	2181      	movs	r1, #129	@ 0x81
 8008792:	4813      	ldr	r0, [pc, #76]	@ (80087e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008794:	f000 fd20 	bl	80091d8 <USBD_GetEpDesc>
 8008798:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d002      	beq.n	80087a6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	2210      	movs	r2, #16
 80087a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d006      	beq.n	80087ba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	2200      	movs	r2, #0
 80087b0:	711a      	strb	r2, [r3, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f042 0202 	orr.w	r2, r2, #2
 80087b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d006      	beq.n	80087ce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	711a      	strb	r2, [r3, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f042 0202 	orr.w	r2, r2, #2
 80087cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2243      	movs	r2, #67	@ 0x43
 80087d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80087d4:	4b02      	ldr	r3, [pc, #8]	@ (80087e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3718      	adds	r7, #24
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	20000064 	.word	0x20000064

080087e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80087ec:	2182      	movs	r1, #130	@ 0x82
 80087ee:	4818      	ldr	r0, [pc, #96]	@ (8008850 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087f0:	f000 fcf2 	bl	80091d8 <USBD_GetEpDesc>
 80087f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80087f6:	2101      	movs	r1, #1
 80087f8:	4815      	ldr	r0, [pc, #84]	@ (8008850 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087fa:	f000 fced 	bl	80091d8 <USBD_GetEpDesc>
 80087fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008800:	2181      	movs	r1, #129	@ 0x81
 8008802:	4813      	ldr	r0, [pc, #76]	@ (8008850 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008804:	f000 fce8 	bl	80091d8 <USBD_GetEpDesc>
 8008808:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d002      	beq.n	8008816 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	2210      	movs	r2, #16
 8008814:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d006      	beq.n	800882a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	2200      	movs	r2, #0
 8008820:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008824:	711a      	strb	r2, [r3, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d006      	beq.n	800883e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008838:	711a      	strb	r2, [r3, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2243      	movs	r2, #67	@ 0x43
 8008842:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008844:	4b02      	ldr	r3, [pc, #8]	@ (8008850 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008846:	4618      	mov	r0, r3
 8008848:	3718      	adds	r7, #24
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	20000064 	.word	0x20000064

08008854 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	220a      	movs	r2, #10
 8008860:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008862:	4b03      	ldr	r3, [pc, #12]	@ (8008870 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008864:	4618      	mov	r0, r3
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	20000020 	.word	0x20000020

08008874 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d101      	bne.n	8008888 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008884:	2303      	movs	r3, #3
 8008886:	e009      	b.n	800889c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	33b0      	adds	r3, #176	@ 0xb0
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b087      	sub	sp, #28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	32b0      	adds	r2, #176	@ 0xb0
 80088be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d101      	bne.n	80088ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e008      	b.n	80088e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	371c      	adds	r7, #28
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	32b0      	adds	r2, #176	@ 0xb0
 8008900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008904:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d101      	bne.n	8008910 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800890c:	2303      	movs	r3, #3
 800890e:	e004      	b.n	800891a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	683a      	ldr	r2, [r7, #0]
 8008914:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
	...

08008928 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	32b0      	adds	r2, #176	@ 0xb0
 800893a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800893e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008940:	2301      	movs	r3, #1
 8008942:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800894a:	2303      	movs	r3, #3
 800894c:	e025      	b.n	800899a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008954:	2b00      	cmp	r3, #0
 8008956:	d11f      	bne.n	8008998 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2201      	movs	r2, #1
 800895c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008960:	4b10      	ldr	r3, [pc, #64]	@ (80089a4 <USBD_CDC_TransmitPacket+0x7c>)
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	f003 020f 	and.w	r2, r3, #15
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	4613      	mov	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4413      	add	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4403      	add	r3, r0
 800897a:	3314      	adds	r3, #20
 800897c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800897e:	4b09      	ldr	r3, [pc, #36]	@ (80089a4 <USBD_CDC_TransmitPacket+0x7c>)
 8008980:	7819      	ldrb	r1, [r3, #0]
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f010 fccf 	bl	8019332 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008998:	7bfb      	ldrb	r3, [r7, #15]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	200000a7 	.word	0x200000a7

080089a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	32b0      	adds	r2, #176	@ 0xb0
 80089ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089be:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	32b0      	adds	r2, #176	@ 0xb0
 80089ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d101      	bne.n	80089d6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e018      	b.n	8008a08 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	7c1b      	ldrb	r3, [r3, #16]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10a      	bne.n	80089f4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089de:	4b0c      	ldr	r3, [pc, #48]	@ (8008a10 <USBD_CDC_ReceivePacket+0x68>)
 80089e0:	7819      	ldrb	r1, [r3, #0]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80089e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f010 fcc1 	bl	8019374 <USBD_LL_PrepareReceive>
 80089f2:	e008      	b.n	8008a06 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089f4:	4b06      	ldr	r3, [pc, #24]	@ (8008a10 <USBD_CDC_ReceivePacket+0x68>)
 80089f6:	7819      	ldrb	r1, [r3, #0]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80089fe:	2340      	movs	r3, #64	@ 0x40
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f010 fcb7 	bl	8019374 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	200000a8 	.word	0x200000a8

08008a14 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d101      	bne.n	8008a2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e01f      	b.n	8008a6c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d003      	beq.n	8008a52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	79fa      	ldrb	r2, [r7, #7]
 8008a5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f010 fb31 	bl	80190c8 <USBD_LL_Init>
 8008a66:	4603      	mov	r3, r0
 8008a68:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3718      	adds	r7, #24
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d101      	bne.n	8008a8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	e025      	b.n	8008ad8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	32ae      	adds	r2, #174	@ 0xae
 8008a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00f      	beq.n	8008ac8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	32ae      	adds	r2, #174	@ 0xae
 8008ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab8:	f107 020e 	add.w	r2, r7, #14
 8008abc:	4610      	mov	r0, r2
 8008abe:	4798      	blx	r3
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008ace:	1c5a      	adds	r2, r3, #1
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f010 fb39 	bl	8019160 <USBD_LL_Start>
 8008aee:	4603      	mov	r3, r0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b00:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	370c      	adds	r7, #12
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr

08008b0e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b084      	sub	sp, #16
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
 8008b16:	460b      	mov	r3, r1
 8008b18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d009      	beq.n	8008b3c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	78fa      	ldrb	r2, [r7, #3]
 8008b32:	4611      	mov	r1, r2
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	4798      	blx	r3
 8008b38:	4603      	mov	r3, r0
 8008b3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	460b      	mov	r3, r1
 8008b50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	78fa      	ldrb	r2, [r7, #3]
 8008b60:	4611      	mov	r1, r2
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	4798      	blx	r3
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d001      	beq.n	8008b70 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b084      	sub	sp, #16
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f001 f922 	bl	8009dd6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008bae:	f003 031f 	and.w	r3, r3, #31
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d01a      	beq.n	8008bec <USBD_LL_SetupStage+0x72>
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d822      	bhi.n	8008c00 <USBD_LL_SetupStage+0x86>
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d002      	beq.n	8008bc4 <USBD_LL_SetupStage+0x4a>
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d00a      	beq.n	8008bd8 <USBD_LL_SetupStage+0x5e>
 8008bc2:	e01d      	b.n	8008c00 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fb77 	bl	80092c0 <USBD_StdDevReq>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	73fb      	strb	r3, [r7, #15]
      break;
 8008bd6:	e020      	b.n	8008c1a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008bde:	4619      	mov	r1, r3
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 fbdf 	bl	80093a4 <USBD_StdItfReq>
 8008be6:	4603      	mov	r3, r0
 8008be8:	73fb      	strb	r3, [r7, #15]
      break;
 8008bea:	e016      	b.n	8008c1a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fc41 	bl	800947c <USBD_StdEPReq>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	73fb      	strb	r3, [r7, #15]
      break;
 8008bfe:	e00c      	b.n	8008c1a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008c06:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f010 fb06 	bl	8019220 <USBD_LL_StallEP>
 8008c14:	4603      	mov	r3, r0
 8008c16:	73fb      	strb	r3, [r7, #15]
      break;
 8008c18:	bf00      	nop
  }

  return ret;
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b086      	sub	sp, #24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	607a      	str	r2, [r7, #4]
 8008c30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008c36:	7afb      	ldrb	r3, [r7, #11]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d177      	bne.n	8008d2c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008c42:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008c4a:	2b03      	cmp	r3, #3
 8008c4c:	f040 80a1 	bne.w	8008d92 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	8992      	ldrh	r2, [r2, #12]
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d91c      	bls.n	8008c96 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	8992      	ldrh	r2, [r2, #12]
 8008c64:	1a9a      	subs	r2, r3, r2
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	8992      	ldrh	r2, [r2, #12]
 8008c72:	441a      	add	r2, r3
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	6919      	ldr	r1, [r3, #16]
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	899b      	ldrh	r3, [r3, #12]
 8008c80:	461a      	mov	r2, r3
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	4293      	cmp	r3, r2
 8008c88:	bf38      	it	cc
 8008c8a:	4613      	movcc	r3, r2
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f001 f9a8 	bl	8009fe4 <USBD_CtlContinueRx>
 8008c94:	e07d      	b.n	8008d92 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008c9c:	f003 031f 	and.w	r3, r3, #31
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d014      	beq.n	8008cce <USBD_LL_DataOutStage+0xaa>
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d81d      	bhi.n	8008ce4 <USBD_LL_DataOutStage+0xc0>
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <USBD_LL_DataOutStage+0x8e>
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d003      	beq.n	8008cb8 <USBD_LL_DataOutStage+0x94>
 8008cb0:	e018      	b.n	8008ce4 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	75bb      	strb	r3, [r7, #22]
            break;
 8008cb6:	e018      	b.n	8008cea <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f000 fa6e 	bl	80091a4 <USBD_CoreFindIF>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	75bb      	strb	r3, [r7, #22]
            break;
 8008ccc:	e00d      	b.n	8008cea <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f000 fa70 	bl	80091be <USBD_CoreFindEP>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	75bb      	strb	r3, [r7, #22]
            break;
 8008ce2:	e002      	b.n	8008cea <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	75bb      	strb	r3, [r7, #22]
            break;
 8008ce8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008cea:	7dbb      	ldrb	r3, [r7, #22]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d119      	bne.n	8008d24 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d113      	bne.n	8008d24 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008cfc:	7dba      	ldrb	r2, [r7, #22]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	32ae      	adds	r2, #174	@ 0xae
 8008d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00b      	beq.n	8008d24 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8008d0c:	7dba      	ldrb	r2, [r7, #22]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008d14:	7dba      	ldrb	r2, [r7, #22]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	32ae      	adds	r2, #174	@ 0xae
 8008d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f001 f96e 	bl	800a006 <USBD_CtlSendStatus>
 8008d2a:	e032      	b.n	8008d92 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008d2c:	7afb      	ldrb	r3, [r7, #11]
 8008d2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	4619      	mov	r1, r3
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 fa41 	bl	80091be <USBD_CoreFindEP>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d40:	7dbb      	ldrb	r3, [r7, #22]
 8008d42:	2bff      	cmp	r3, #255	@ 0xff
 8008d44:	d025      	beq.n	8008d92 <USBD_LL_DataOutStage+0x16e>
 8008d46:	7dbb      	ldrb	r3, [r7, #22]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d122      	bne.n	8008d92 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	d117      	bne.n	8008d88 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008d58:	7dba      	ldrb	r2, [r7, #22]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	32ae      	adds	r2, #174	@ 0xae
 8008d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00f      	beq.n	8008d88 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008d68:	7dba      	ldrb	r2, [r7, #22]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008d70:	7dba      	ldrb	r2, [r7, #22]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	32ae      	adds	r2, #174	@ 0xae
 8008d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	7afa      	ldrb	r2, [r7, #11]
 8008d7e:	4611      	mov	r1, r2
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	4798      	blx	r3
 8008d84:	4603      	mov	r3, r0
 8008d86:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d001      	beq.n	8008d92 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	e000      	b.n	8008d94 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3718      	adds	r7, #24
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	460b      	mov	r3, r1
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008daa:	7afb      	ldrb	r3, [r7, #11]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d178      	bne.n	8008ea2 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	3314      	adds	r3, #20
 8008db4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d163      	bne.n	8008e88 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	8992      	ldrh	r2, [r2, #12]
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d91c      	bls.n	8008e06 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	8992      	ldrh	r2, [r2, #12]
 8008dd4:	1a9a      	subs	r2, r3, r2
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	693a      	ldr	r2, [r7, #16]
 8008de0:	8992      	ldrh	r2, [r2, #12]
 8008de2:	441a      	add	r2, r3
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	6919      	ldr	r1, [r3, #16]
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	461a      	mov	r2, r3
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f001 f8c4 	bl	8009f80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008df8:	2300      	movs	r3, #0
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f010 fab8 	bl	8019374 <USBD_LL_PrepareReceive>
 8008e04:	e040      	b.n	8008e88 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	899b      	ldrh	r3, [r3, #12]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d11c      	bne.n	8008e4e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d316      	bcc.n	8008e4e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d20f      	bcs.n	8008e4e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e2e:	2200      	movs	r2, #0
 8008e30:	2100      	movs	r1, #0
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f001 f8a4 	bl	8009f80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e40:	2300      	movs	r3, #0
 8008e42:	2200      	movs	r2, #0
 8008e44:	2100      	movs	r1, #0
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f010 fa94 	bl	8019374 <USBD_LL_PrepareReceive>
 8008e4c:	e01c      	b.n	8008e88 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	d10f      	bne.n	8008e7a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d009      	beq.n	8008e7a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e7a:	2180      	movs	r1, #128	@ 0x80
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f010 f9cf 	bl	8019220 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f001 f8d2 	bl	800a02c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d03a      	beq.n	8008f08 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f7ff fe30 	bl	8008af8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008ea0:	e032      	b.n	8008f08 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008ea2:	7afb      	ldrb	r3, [r7, #11]
 8008ea4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	4619      	mov	r1, r3
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f000 f986 	bl	80091be <USBD_CoreFindEP>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
 8008eb8:	2bff      	cmp	r3, #255	@ 0xff
 8008eba:	d025      	beq.n	8008f08 <USBD_LL_DataInStage+0x16c>
 8008ebc:	7dfb      	ldrb	r3, [r7, #23]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d122      	bne.n	8008f08 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b03      	cmp	r3, #3
 8008ecc:	d11c      	bne.n	8008f08 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008ece:	7dfa      	ldrb	r2, [r7, #23]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	32ae      	adds	r2, #174	@ 0xae
 8008ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed8:	695b      	ldr	r3, [r3, #20]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d014      	beq.n	8008f08 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8008ede:	7dfa      	ldrb	r2, [r7, #23]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008ee6:	7dfa      	ldrb	r2, [r7, #23]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	32ae      	adds	r2, #174	@ 0xae
 8008eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef0:	695b      	ldr	r3, [r3, #20]
 8008ef2:	7afa      	ldrb	r2, [r7, #11]
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	4798      	blx	r3
 8008efa:	4603      	mov	r3, r0
 8008efc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008efe:	7dbb      	ldrb	r3, [r7, #22]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8008f04:	7dbb      	ldrb	r3, [r7, #22]
 8008f06:	e000      	b.n	8008f0a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b084      	sub	sp, #16
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d014      	beq.n	8008f78 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00e      	beq.n	8008f78 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	6852      	ldr	r2, [r2, #4]
 8008f66:	b2d2      	uxtb	r2, r2
 8008f68:	4611      	mov	r1, r2
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	4798      	blx	r3
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008f74:	2303      	movs	r3, #3
 8008f76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f78:	2340      	movs	r3, #64	@ 0x40
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f010 f909 	bl	8019196 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2240      	movs	r2, #64	@ 0x40
 8008f90:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f94:	2340      	movs	r3, #64	@ 0x40
 8008f96:	2200      	movs	r2, #0
 8008f98:	2180      	movs	r1, #128	@ 0x80
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f010 f8fb 	bl	8019196 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2240      	movs	r2, #64	@ 0x40
 8008fac:	841a      	strh	r2, [r3, #32]

  return ret;
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	78fa      	ldrb	r2, [r7, #3]
 8008fc8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b04      	cmp	r3, #4
 8008fea:	d006      	beq.n	8008ffa <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2204      	movs	r2, #4
 8008ffe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b04      	cmp	r3, #4
 8009022:	d106      	bne.n	8009032 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800902a:	b2da      	uxtb	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b03      	cmp	r3, #3
 8009052:	d110      	bne.n	8009076 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00b      	beq.n	8009076 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009064:	69db      	ldr	r3, [r3, #28]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d005      	beq.n	8009076 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009070:	69db      	ldr	r3, [r3, #28]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	32ae      	adds	r2, #174	@ 0xae
 8009096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800909e:	2303      	movs	r3, #3
 80090a0:	e01c      	b.n	80090dc <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d115      	bne.n	80090da <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	32ae      	adds	r2, #174	@ 0xae
 80090b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00b      	beq.n	80090da <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	32ae      	adds	r2, #174	@ 0xae
 80090cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	78fa      	ldrb	r2, [r7, #3]
 80090d4:	4611      	mov	r1, r2
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	460b      	mov	r3, r1
 80090ee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	32ae      	adds	r2, #174	@ 0xae
 80090fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009102:	2303      	movs	r3, #3
 8009104:	e01c      	b.n	8009140 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800910c:	b2db      	uxtb	r3, r3
 800910e:	2b03      	cmp	r3, #3
 8009110:	d115      	bne.n	800913e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	32ae      	adds	r2, #174	@ 0xae
 800911c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00b      	beq.n	800913e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	32ae      	adds	r2, #174	@ 0xae
 8009130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009136:	78fa      	ldrb	r2, [r7, #3]
 8009138:	4611      	mov	r1, r2
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b084      	sub	sp, #16
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2201      	movs	r2, #1
 800916e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00e      	beq.n	800919a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	6852      	ldr	r2, [r2, #4]
 8009188:	b2d2      	uxtb	r2, r2
 800918a:	4611      	mov	r1, r2
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	4798      	blx	r3
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d001      	beq.n	800919a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009196:	2303      	movs	r3, #3
 8009198:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800919a:	7bfb      	ldrb	r3, [r7, #15]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	460b      	mov	r3, r1
 80091ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80091b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80091be:	b480      	push	{r7}
 80091c0:	b083      	sub	sp, #12
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	460b      	mov	r3, r1
 80091c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80091ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	460b      	mov	r3, r1
 80091e2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80091ec:	2300      	movs	r3, #0
 80091ee:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	885b      	ldrh	r3, [r3, #2]
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	7812      	ldrb	r2, [r2, #0]
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d91f      	bls.n	800923e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009204:	e013      	b.n	800922e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009206:	f107 030a 	add.w	r3, r7, #10
 800920a:	4619      	mov	r1, r3
 800920c:	6978      	ldr	r0, [r7, #20]
 800920e:	f000 f81b 	bl	8009248 <USBD_GetNextDesc>
 8009212:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	785b      	ldrb	r3, [r3, #1]
 8009218:	2b05      	cmp	r3, #5
 800921a:	d108      	bne.n	800922e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	789b      	ldrb	r3, [r3, #2]
 8009224:	78fa      	ldrb	r2, [r7, #3]
 8009226:	429a      	cmp	r2, r3
 8009228:	d008      	beq.n	800923c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800922a:	2300      	movs	r3, #0
 800922c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	885b      	ldrh	r3, [r3, #2]
 8009232:	b29a      	uxth	r2, r3
 8009234:	897b      	ldrh	r3, [r7, #10]
 8009236:	429a      	cmp	r2, r3
 8009238:	d8e5      	bhi.n	8009206 <USBD_GetEpDesc+0x2e>
 800923a:	e000      	b.n	800923e <USBD_GetEpDesc+0x66>
          break;
 800923c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800923e:	693b      	ldr	r3, [r7, #16]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3718      	adds	r7, #24
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	881b      	ldrh	r3, [r3, #0]
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	7812      	ldrb	r2, [r2, #0]
 800925e:	4413      	add	r3, r2
 8009260:	b29a      	uxth	r2, r3
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	461a      	mov	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4413      	add	r3, r2
 8009270:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009272:	68fb      	ldr	r3, [r7, #12]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009280:	b480      	push	{r7}
 8009282:	b087      	sub	sp, #28
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	3301      	adds	r3, #1
 8009296:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800929e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80092a2:	021b      	lsls	r3, r3, #8
 80092a4:	b21a      	sxth	r2, r3
 80092a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	b21b      	sxth	r3, r3
 80092ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80092b0:	89fb      	ldrh	r3, [r7, #14]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	371c      	adds	r7, #28
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
	...

080092c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092d6:	2b40      	cmp	r3, #64	@ 0x40
 80092d8:	d005      	beq.n	80092e6 <USBD_StdDevReq+0x26>
 80092da:	2b40      	cmp	r3, #64	@ 0x40
 80092dc:	d857      	bhi.n	800938e <USBD_StdDevReq+0xce>
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00f      	beq.n	8009302 <USBD_StdDevReq+0x42>
 80092e2:	2b20      	cmp	r3, #32
 80092e4:	d153      	bne.n	800938e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	32ae      	adds	r2, #174	@ 0xae
 80092f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	6839      	ldr	r1, [r7, #0]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	4798      	blx	r3
 80092fc:	4603      	mov	r3, r0
 80092fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009300:	e04a      	b.n	8009398 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	785b      	ldrb	r3, [r3, #1]
 8009306:	2b09      	cmp	r3, #9
 8009308:	d83b      	bhi.n	8009382 <USBD_StdDevReq+0xc2>
 800930a:	a201      	add	r2, pc, #4	@ (adr r2, 8009310 <USBD_StdDevReq+0x50>)
 800930c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009310:	08009365 	.word	0x08009365
 8009314:	08009379 	.word	0x08009379
 8009318:	08009383 	.word	0x08009383
 800931c:	0800936f 	.word	0x0800936f
 8009320:	08009383 	.word	0x08009383
 8009324:	08009343 	.word	0x08009343
 8009328:	08009339 	.word	0x08009339
 800932c:	08009383 	.word	0x08009383
 8009330:	0800935b 	.word	0x0800935b
 8009334:	0800934d 	.word	0x0800934d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009338:	6839      	ldr	r1, [r7, #0]
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 fa3e 	bl	80097bc <USBD_GetDescriptor>
          break;
 8009340:	e024      	b.n	800938c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009342:	6839      	ldr	r1, [r7, #0]
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 fba3 	bl	8009a90 <USBD_SetAddress>
          break;
 800934a:	e01f      	b.n	800938c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800934c:	6839      	ldr	r1, [r7, #0]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fbe2 	bl	8009b18 <USBD_SetConfig>
 8009354:	4603      	mov	r3, r0
 8009356:	73fb      	strb	r3, [r7, #15]
          break;
 8009358:	e018      	b.n	800938c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fc85 	bl	8009c6c <USBD_GetConfig>
          break;
 8009362:	e013      	b.n	800938c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009364:	6839      	ldr	r1, [r7, #0]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fcb6 	bl	8009cd8 <USBD_GetStatus>
          break;
 800936c:	e00e      	b.n	800938c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fce5 	bl	8009d40 <USBD_SetFeature>
          break;
 8009376:	e009      	b.n	800938c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fd09 	bl	8009d92 <USBD_ClrFeature>
          break;
 8009380:	e004      	b.n	800938c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fd60 	bl	8009e4a <USBD_CtlError>
          break;
 800938a:	bf00      	nop
      }
      break;
 800938c:	e004      	b.n	8009398 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fd5a 	bl	8009e4a <USBD_CtlError>
      break;
 8009396:	bf00      	nop
  }

  return ret;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop

080093a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ae:	2300      	movs	r3, #0
 80093b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093ba:	2b40      	cmp	r3, #64	@ 0x40
 80093bc:	d005      	beq.n	80093ca <USBD_StdItfReq+0x26>
 80093be:	2b40      	cmp	r3, #64	@ 0x40
 80093c0:	d852      	bhi.n	8009468 <USBD_StdItfReq+0xc4>
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d001      	beq.n	80093ca <USBD_StdItfReq+0x26>
 80093c6:	2b20      	cmp	r3, #32
 80093c8:	d14e      	bne.n	8009468 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	3b01      	subs	r3, #1
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d840      	bhi.n	800945a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	889b      	ldrh	r3, [r3, #4]
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d836      	bhi.n	8009450 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	889b      	ldrh	r3, [r3, #4]
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	4619      	mov	r1, r3
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f7ff feda 	bl	80091a4 <USBD_CoreFindIF>
 80093f0:	4603      	mov	r3, r0
 80093f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093f4:	7bbb      	ldrb	r3, [r7, #14]
 80093f6:	2bff      	cmp	r3, #255	@ 0xff
 80093f8:	d01d      	beq.n	8009436 <USBD_StdItfReq+0x92>
 80093fa:	7bbb      	ldrb	r3, [r7, #14]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d11a      	bne.n	8009436 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009400:	7bba      	ldrb	r2, [r7, #14]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	32ae      	adds	r2, #174	@ 0xae
 8009406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00f      	beq.n	8009430 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009410:	7bba      	ldrb	r2, [r7, #14]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009418:	7bba      	ldrb	r2, [r7, #14]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	32ae      	adds	r2, #174	@ 0xae
 800941e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	6839      	ldr	r1, [r7, #0]
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	4798      	blx	r3
 800942a:	4603      	mov	r3, r0
 800942c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800942e:	e004      	b.n	800943a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009430:	2303      	movs	r3, #3
 8009432:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009434:	e001      	b.n	800943a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009436:	2303      	movs	r3, #3
 8009438:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	88db      	ldrh	r3, [r3, #6]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d110      	bne.n	8009464 <USBD_StdItfReq+0xc0>
 8009442:	7bfb      	ldrb	r3, [r7, #15]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10d      	bne.n	8009464 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fddc 	bl	800a006 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800944e:	e009      	b.n	8009464 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fcf9 	bl	8009e4a <USBD_CtlError>
          break;
 8009458:	e004      	b.n	8009464 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fcf4 	bl	8009e4a <USBD_CtlError>
          break;
 8009462:	e000      	b.n	8009466 <USBD_StdItfReq+0xc2>
          break;
 8009464:	bf00      	nop
      }
      break;
 8009466:	e004      	b.n	8009472 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fced 	bl	8009e4a <USBD_CtlError>
      break;
 8009470:	bf00      	nop
  }

  return ret;
 8009472:	7bfb      	ldrb	r3, [r7, #15]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	889b      	ldrh	r3, [r3, #4]
 800948e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009498:	2b40      	cmp	r3, #64	@ 0x40
 800949a:	d007      	beq.n	80094ac <USBD_StdEPReq+0x30>
 800949c:	2b40      	cmp	r3, #64	@ 0x40
 800949e:	f200 8181 	bhi.w	80097a4 <USBD_StdEPReq+0x328>
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d02a      	beq.n	80094fc <USBD_StdEPReq+0x80>
 80094a6:	2b20      	cmp	r3, #32
 80094a8:	f040 817c 	bne.w	80097a4 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80094ac:	7bbb      	ldrb	r3, [r7, #14]
 80094ae:	4619      	mov	r1, r3
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f7ff fe84 	bl	80091be <USBD_CoreFindEP>
 80094b6:	4603      	mov	r3, r0
 80094b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094ba:	7b7b      	ldrb	r3, [r7, #13]
 80094bc:	2bff      	cmp	r3, #255	@ 0xff
 80094be:	f000 8176 	beq.w	80097ae <USBD_StdEPReq+0x332>
 80094c2:	7b7b      	ldrb	r3, [r7, #13]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f040 8172 	bne.w	80097ae <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80094ca:	7b7a      	ldrb	r2, [r7, #13]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80094d2:	7b7a      	ldrb	r2, [r7, #13]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	32ae      	adds	r2, #174	@ 0xae
 80094d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f000 8165 	beq.w	80097ae <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80094e4:	7b7a      	ldrb	r2, [r7, #13]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	32ae      	adds	r2, #174	@ 0xae
 80094ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	4798      	blx	r3
 80094f6:	4603      	mov	r3, r0
 80094f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80094fa:	e158      	b.n	80097ae <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	785b      	ldrb	r3, [r3, #1]
 8009500:	2b03      	cmp	r3, #3
 8009502:	d008      	beq.n	8009516 <USBD_StdEPReq+0x9a>
 8009504:	2b03      	cmp	r3, #3
 8009506:	f300 8147 	bgt.w	8009798 <USBD_StdEPReq+0x31c>
 800950a:	2b00      	cmp	r3, #0
 800950c:	f000 809b 	beq.w	8009646 <USBD_StdEPReq+0x1ca>
 8009510:	2b01      	cmp	r3, #1
 8009512:	d03c      	beq.n	800958e <USBD_StdEPReq+0x112>
 8009514:	e140      	b.n	8009798 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b02      	cmp	r3, #2
 8009520:	d002      	beq.n	8009528 <USBD_StdEPReq+0xac>
 8009522:	2b03      	cmp	r3, #3
 8009524:	d016      	beq.n	8009554 <USBD_StdEPReq+0xd8>
 8009526:	e02c      	b.n	8009582 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009528:	7bbb      	ldrb	r3, [r7, #14]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00d      	beq.n	800954a <USBD_StdEPReq+0xce>
 800952e:	7bbb      	ldrb	r3, [r7, #14]
 8009530:	2b80      	cmp	r3, #128	@ 0x80
 8009532:	d00a      	beq.n	800954a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009534:	7bbb      	ldrb	r3, [r7, #14]
 8009536:	4619      	mov	r1, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f00f fe71 	bl	8019220 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800953e:	2180      	movs	r1, #128	@ 0x80
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f00f fe6d 	bl	8019220 <USBD_LL_StallEP>
 8009546:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009548:	e020      	b.n	800958c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fc7c 	bl	8009e4a <USBD_CtlError>
              break;
 8009552:	e01b      	b.n	800958c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	885b      	ldrh	r3, [r3, #2]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10e      	bne.n	800957a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800955c:	7bbb      	ldrb	r3, [r7, #14]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00b      	beq.n	800957a <USBD_StdEPReq+0xfe>
 8009562:	7bbb      	ldrb	r3, [r7, #14]
 8009564:	2b80      	cmp	r3, #128	@ 0x80
 8009566:	d008      	beq.n	800957a <USBD_StdEPReq+0xfe>
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	88db      	ldrh	r3, [r3, #6]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d104      	bne.n	800957a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009570:	7bbb      	ldrb	r3, [r7, #14]
 8009572:	4619      	mov	r1, r3
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f00f fe53 	bl	8019220 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fd43 	bl	800a006 <USBD_CtlSendStatus>

              break;
 8009580:	e004      	b.n	800958c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009582:	6839      	ldr	r1, [r7, #0]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 fc60 	bl	8009e4a <USBD_CtlError>
              break;
 800958a:	bf00      	nop
          }
          break;
 800958c:	e109      	b.n	80097a2 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b02      	cmp	r3, #2
 8009598:	d002      	beq.n	80095a0 <USBD_StdEPReq+0x124>
 800959a:	2b03      	cmp	r3, #3
 800959c:	d016      	beq.n	80095cc <USBD_StdEPReq+0x150>
 800959e:	e04b      	b.n	8009638 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095a0:	7bbb      	ldrb	r3, [r7, #14]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00d      	beq.n	80095c2 <USBD_StdEPReq+0x146>
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
 80095a8:	2b80      	cmp	r3, #128	@ 0x80
 80095aa:	d00a      	beq.n	80095c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80095ac:	7bbb      	ldrb	r3, [r7, #14]
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f00f fe35 	bl	8019220 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80095b6:	2180      	movs	r1, #128	@ 0x80
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f00f fe31 	bl	8019220 <USBD_LL_StallEP>
 80095be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095c0:	e040      	b.n	8009644 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80095c2:	6839      	ldr	r1, [r7, #0]
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fc40 	bl	8009e4a <USBD_CtlError>
              break;
 80095ca:	e03b      	b.n	8009644 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	885b      	ldrh	r3, [r3, #2]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d136      	bne.n	8009642 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80095d4:	7bbb      	ldrb	r3, [r7, #14]
 80095d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d004      	beq.n	80095e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80095de:	7bbb      	ldrb	r3, [r7, #14]
 80095e0:	4619      	mov	r1, r3
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f00f fe3b 	bl	801925e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 fd0c 	bl	800a006 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80095ee:	7bbb      	ldrb	r3, [r7, #14]
 80095f0:	4619      	mov	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f7ff fde3 	bl	80091be <USBD_CoreFindEP>
 80095f8:	4603      	mov	r3, r0
 80095fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095fc:	7b7b      	ldrb	r3, [r7, #13]
 80095fe:	2bff      	cmp	r3, #255	@ 0xff
 8009600:	d01f      	beq.n	8009642 <USBD_StdEPReq+0x1c6>
 8009602:	7b7b      	ldrb	r3, [r7, #13]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d11c      	bne.n	8009642 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009608:	7b7a      	ldrb	r2, [r7, #13]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009610:	7b7a      	ldrb	r2, [r7, #13]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	32ae      	adds	r2, #174	@ 0xae
 8009616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d010      	beq.n	8009642 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009620:	7b7a      	ldrb	r2, [r7, #13]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	32ae      	adds	r2, #174	@ 0xae
 8009626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	4798      	blx	r3
 8009632:	4603      	mov	r3, r0
 8009634:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009636:	e004      	b.n	8009642 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009638:	6839      	ldr	r1, [r7, #0]
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 fc05 	bl	8009e4a <USBD_CtlError>
              break;
 8009640:	e000      	b.n	8009644 <USBD_StdEPReq+0x1c8>
              break;
 8009642:	bf00      	nop
          }
          break;
 8009644:	e0ad      	b.n	80097a2 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2b02      	cmp	r3, #2
 8009650:	d002      	beq.n	8009658 <USBD_StdEPReq+0x1dc>
 8009652:	2b03      	cmp	r3, #3
 8009654:	d033      	beq.n	80096be <USBD_StdEPReq+0x242>
 8009656:	e099      	b.n	800978c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009658:	7bbb      	ldrb	r3, [r7, #14]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d007      	beq.n	800966e <USBD_StdEPReq+0x1f2>
 800965e:	7bbb      	ldrb	r3, [r7, #14]
 8009660:	2b80      	cmp	r3, #128	@ 0x80
 8009662:	d004      	beq.n	800966e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009664:	6839      	ldr	r1, [r7, #0]
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fbef 	bl	8009e4a <USBD_CtlError>
                break;
 800966c:	e093      	b.n	8009796 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800966e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009672:	2b00      	cmp	r3, #0
 8009674:	da0b      	bge.n	800968e <USBD_StdEPReq+0x212>
 8009676:	7bbb      	ldrb	r3, [r7, #14]
 8009678:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800967c:	4613      	mov	r3, r2
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4413      	add	r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	3310      	adds	r3, #16
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	4413      	add	r3, r2
 800968a:	3304      	adds	r3, #4
 800968c:	e00b      	b.n	80096a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800968e:	7bbb      	ldrb	r3, [r7, #14]
 8009690:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009694:	4613      	mov	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	4413      	add	r3, r2
 80096a4:	3304      	adds	r3, #4
 80096a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	2200      	movs	r2, #0
 80096ac:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	330e      	adds	r3, #14
 80096b2:	2202      	movs	r2, #2
 80096b4:	4619      	mov	r1, r3
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fc44 	bl	8009f44 <USBD_CtlSendData>
              break;
 80096bc:	e06b      	b.n	8009796 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80096be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	da11      	bge.n	80096ea <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80096c6:	7bbb      	ldrb	r3, [r7, #14]
 80096c8:	f003 020f 	and.w	r2, r3, #15
 80096cc:	6879      	ldr	r1, [r7, #4]
 80096ce:	4613      	mov	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	440b      	add	r3, r1
 80096d8:	3323      	adds	r3, #35	@ 0x23
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d117      	bne.n	8009710 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fbb1 	bl	8009e4a <USBD_CtlError>
                  break;
 80096e8:	e055      	b.n	8009796 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80096ea:	7bbb      	ldrb	r3, [r7, #14]
 80096ec:	f003 020f 	and.w	r2, r3, #15
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	4613      	mov	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	440b      	add	r3, r1
 80096fc:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d104      	bne.n	8009710 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fb9e 	bl	8009e4a <USBD_CtlError>
                  break;
 800970e:	e042      	b.n	8009796 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009710:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009714:	2b00      	cmp	r3, #0
 8009716:	da0b      	bge.n	8009730 <USBD_StdEPReq+0x2b4>
 8009718:	7bbb      	ldrb	r3, [r7, #14]
 800971a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800971e:	4613      	mov	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	3310      	adds	r3, #16
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	4413      	add	r3, r2
 800972c:	3304      	adds	r3, #4
 800972e:	e00b      	b.n	8009748 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009730:	7bbb      	ldrb	r3, [r7, #14]
 8009732:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009736:	4613      	mov	r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	4413      	add	r3, r2
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	4413      	add	r3, r2
 8009746:	3304      	adds	r3, #4
 8009748:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800974a:	7bbb      	ldrb	r3, [r7, #14]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d002      	beq.n	8009756 <USBD_StdEPReq+0x2da>
 8009750:	7bbb      	ldrb	r3, [r7, #14]
 8009752:	2b80      	cmp	r3, #128	@ 0x80
 8009754:	d103      	bne.n	800975e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	2200      	movs	r2, #0
 800975a:	739a      	strb	r2, [r3, #14]
 800975c:	e00e      	b.n	800977c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800975e:	7bbb      	ldrb	r3, [r7, #14]
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f00f fd9a 	bl	801929c <USBD_LL_IsStallEP>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d003      	beq.n	8009776 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	2201      	movs	r2, #1
 8009772:	739a      	strb	r2, [r3, #14]
 8009774:	e002      	b.n	800977c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	2200      	movs	r2, #0
 800977a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	330e      	adds	r3, #14
 8009780:	2202      	movs	r2, #2
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fbdd 	bl	8009f44 <USBD_CtlSendData>
              break;
 800978a:	e004      	b.n	8009796 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800978c:	6839      	ldr	r1, [r7, #0]
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fb5b 	bl	8009e4a <USBD_CtlError>
              break;
 8009794:	bf00      	nop
          }
          break;
 8009796:	e004      	b.n	80097a2 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fb55 	bl	8009e4a <USBD_CtlError>
          break;
 80097a0:	bf00      	nop
      }
      break;
 80097a2:	e005      	b.n	80097b0 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80097a4:	6839      	ldr	r1, [r7, #0]
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fb4f 	bl	8009e4a <USBD_CtlError>
      break;
 80097ac:	e000      	b.n	80097b0 <USBD_StdEPReq+0x334>
      break;
 80097ae:	bf00      	nop
  }

  return ret;
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
	...

080097bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80097c6:	2300      	movs	r3, #0
 80097c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80097ca:	2300      	movs	r3, #0
 80097cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80097ce:	2300      	movs	r3, #0
 80097d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	885b      	ldrh	r3, [r3, #2]
 80097d6:	0a1b      	lsrs	r3, r3, #8
 80097d8:	b29b      	uxth	r3, r3
 80097da:	3b01      	subs	r3, #1
 80097dc:	2b06      	cmp	r3, #6
 80097de:	f200 8128 	bhi.w	8009a32 <USBD_GetDescriptor+0x276>
 80097e2:	a201      	add	r2, pc, #4	@ (adr r2, 80097e8 <USBD_GetDescriptor+0x2c>)
 80097e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e8:	08009805 	.word	0x08009805
 80097ec:	0800981d 	.word	0x0800981d
 80097f0:	0800985d 	.word	0x0800985d
 80097f4:	08009a33 	.word	0x08009a33
 80097f8:	08009a33 	.word	0x08009a33
 80097fc:	080099d3 	.word	0x080099d3
 8009800:	080099ff 	.word	0x080099ff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	7c12      	ldrb	r2, [r2, #16]
 8009810:	f107 0108 	add.w	r1, r7, #8
 8009814:	4610      	mov	r0, r2
 8009816:	4798      	blx	r3
 8009818:	60f8      	str	r0, [r7, #12]
      break;
 800981a:	e112      	b.n	8009a42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	7c1b      	ldrb	r3, [r3, #16]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10d      	bne.n	8009840 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800982a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800982c:	f107 0208 	add.w	r2, r7, #8
 8009830:	4610      	mov	r0, r2
 8009832:	4798      	blx	r3
 8009834:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	3301      	adds	r3, #1
 800983a:	2202      	movs	r2, #2
 800983c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800983e:	e100      	b.n	8009a42 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009848:	f107 0208 	add.w	r2, r7, #8
 800984c:	4610      	mov	r0, r2
 800984e:	4798      	blx	r3
 8009850:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	3301      	adds	r3, #1
 8009856:	2202      	movs	r2, #2
 8009858:	701a      	strb	r2, [r3, #0]
      break;
 800985a:	e0f2      	b.n	8009a42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	885b      	ldrh	r3, [r3, #2]
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b05      	cmp	r3, #5
 8009864:	f200 80ac 	bhi.w	80099c0 <USBD_GetDescriptor+0x204>
 8009868:	a201      	add	r2, pc, #4	@ (adr r2, 8009870 <USBD_GetDescriptor+0xb4>)
 800986a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986e:	bf00      	nop
 8009870:	08009889 	.word	0x08009889
 8009874:	080098bd 	.word	0x080098bd
 8009878:	080098f1 	.word	0x080098f1
 800987c:	08009925 	.word	0x08009925
 8009880:	08009959 	.word	0x08009959
 8009884:	0800998d 	.word	0x0800998d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00b      	beq.n	80098ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	7c12      	ldrb	r2, [r2, #16]
 80098a0:	f107 0108 	add.w	r1, r7, #8
 80098a4:	4610      	mov	r0, r2
 80098a6:	4798      	blx	r3
 80098a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098aa:	e091      	b.n	80099d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098ac:	6839      	ldr	r1, [r7, #0]
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 facb 	bl	8009e4a <USBD_CtlError>
            err++;
 80098b4:	7afb      	ldrb	r3, [r7, #11]
 80098b6:	3301      	adds	r3, #1
 80098b8:	72fb      	strb	r3, [r7, #11]
          break;
 80098ba:	e089      	b.n	80099d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00b      	beq.n	80098e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	7c12      	ldrb	r2, [r2, #16]
 80098d4:	f107 0108 	add.w	r1, r7, #8
 80098d8:	4610      	mov	r0, r2
 80098da:	4798      	blx	r3
 80098dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098de:	e077      	b.n	80099d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fab1 	bl	8009e4a <USBD_CtlError>
            err++;
 80098e8:	7afb      	ldrb	r3, [r7, #11]
 80098ea:	3301      	adds	r3, #1
 80098ec:	72fb      	strb	r3, [r7, #11]
          break;
 80098ee:	e06f      	b.n	80099d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00b      	beq.n	8009914 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	7c12      	ldrb	r2, [r2, #16]
 8009908:	f107 0108 	add.w	r1, r7, #8
 800990c:	4610      	mov	r0, r2
 800990e:	4798      	blx	r3
 8009910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009912:	e05d      	b.n	80099d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fa97 	bl	8009e4a <USBD_CtlError>
            err++;
 800991c:	7afb      	ldrb	r3, [r7, #11]
 800991e:	3301      	adds	r3, #1
 8009920:	72fb      	strb	r3, [r7, #11]
          break;
 8009922:	e055      	b.n	80099d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00b      	beq.n	8009948 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	7c12      	ldrb	r2, [r2, #16]
 800993c:	f107 0108 	add.w	r1, r7, #8
 8009940:	4610      	mov	r0, r2
 8009942:	4798      	blx	r3
 8009944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009946:	e043      	b.n	80099d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009948:	6839      	ldr	r1, [r7, #0]
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fa7d 	bl	8009e4a <USBD_CtlError>
            err++;
 8009950:	7afb      	ldrb	r3, [r7, #11]
 8009952:	3301      	adds	r3, #1
 8009954:	72fb      	strb	r3, [r7, #11]
          break;
 8009956:	e03b      	b.n	80099d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800995e:	695b      	ldr	r3, [r3, #20]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00b      	beq.n	800997c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800996a:	695b      	ldr	r3, [r3, #20]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	7c12      	ldrb	r2, [r2, #16]
 8009970:	f107 0108 	add.w	r1, r7, #8
 8009974:	4610      	mov	r0, r2
 8009976:	4798      	blx	r3
 8009978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800997a:	e029      	b.n	80099d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800997c:	6839      	ldr	r1, [r7, #0]
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 fa63 	bl	8009e4a <USBD_CtlError>
            err++;
 8009984:	7afb      	ldrb	r3, [r7, #11]
 8009986:	3301      	adds	r3, #1
 8009988:	72fb      	strb	r3, [r7, #11]
          break;
 800998a:	e021      	b.n	80099d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00b      	beq.n	80099b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800999e:	699b      	ldr	r3, [r3, #24]
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	7c12      	ldrb	r2, [r2, #16]
 80099a4:	f107 0108 	add.w	r1, r7, #8
 80099a8:	4610      	mov	r0, r2
 80099aa:	4798      	blx	r3
 80099ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ae:	e00f      	b.n	80099d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099b0:	6839      	ldr	r1, [r7, #0]
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fa49 	bl	8009e4a <USBD_CtlError>
            err++;
 80099b8:	7afb      	ldrb	r3, [r7, #11]
 80099ba:	3301      	adds	r3, #1
 80099bc:	72fb      	strb	r3, [r7, #11]
          break;
 80099be:	e007      	b.n	80099d0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fa41 	bl	8009e4a <USBD_CtlError>
          err++;
 80099c8:	7afb      	ldrb	r3, [r7, #11]
 80099ca:	3301      	adds	r3, #1
 80099cc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80099ce:	bf00      	nop
      }
      break;
 80099d0:	e037      	b.n	8009a42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	7c1b      	ldrb	r3, [r3, #16]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d109      	bne.n	80099ee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099e2:	f107 0208 	add.w	r2, r7, #8
 80099e6:	4610      	mov	r0, r2
 80099e8:	4798      	blx	r3
 80099ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099ec:	e029      	b.n	8009a42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80099ee:	6839      	ldr	r1, [r7, #0]
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fa2a 	bl	8009e4a <USBD_CtlError>
        err++;
 80099f6:	7afb      	ldrb	r3, [r7, #11]
 80099f8:	3301      	adds	r3, #1
 80099fa:	72fb      	strb	r3, [r7, #11]
      break;
 80099fc:	e021      	b.n	8009a42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	7c1b      	ldrb	r3, [r3, #16]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d10d      	bne.n	8009a22 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a0e:	f107 0208 	add.w	r2, r7, #8
 8009a12:	4610      	mov	r0, r2
 8009a14:	4798      	blx	r3
 8009a16:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	2207      	movs	r2, #7
 8009a1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a20:	e00f      	b.n	8009a42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a22:	6839      	ldr	r1, [r7, #0]
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fa10 	bl	8009e4a <USBD_CtlError>
        err++;
 8009a2a:	7afb      	ldrb	r3, [r7, #11]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	72fb      	strb	r3, [r7, #11]
      break;
 8009a30:	e007      	b.n	8009a42 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009a32:	6839      	ldr	r1, [r7, #0]
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 fa08 	bl	8009e4a <USBD_CtlError>
      err++;
 8009a3a:	7afb      	ldrb	r3, [r7, #11]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	72fb      	strb	r3, [r7, #11]
      break;
 8009a40:	bf00      	nop
  }

  if (err != 0U)
 8009a42:	7afb      	ldrb	r3, [r7, #11]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d11e      	bne.n	8009a86 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	88db      	ldrh	r3, [r3, #6]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d016      	beq.n	8009a7e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009a50:	893b      	ldrh	r3, [r7, #8]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00e      	beq.n	8009a74 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	88da      	ldrh	r2, [r3, #6]
 8009a5a:	893b      	ldrh	r3, [r7, #8]
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	bf28      	it	cs
 8009a60:	4613      	movcs	r3, r2
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a66:	893b      	ldrh	r3, [r7, #8]
 8009a68:	461a      	mov	r2, r3
 8009a6a:	68f9      	ldr	r1, [r7, #12]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fa69 	bl	8009f44 <USBD_CtlSendData>
 8009a72:	e009      	b.n	8009a88 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009a74:	6839      	ldr	r1, [r7, #0]
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 f9e7 	bl	8009e4a <USBD_CtlError>
 8009a7c:	e004      	b.n	8009a88 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fac1 	bl	800a006 <USBD_CtlSendStatus>
 8009a84:	e000      	b.n	8009a88 <USBD_GetDescriptor+0x2cc>
    return;
 8009a86:	bf00      	nop
  }
}
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop

08009a90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	889b      	ldrh	r3, [r3, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d131      	bne.n	8009b06 <USBD_SetAddress+0x76>
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	88db      	ldrh	r3, [r3, #6]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d12d      	bne.n	8009b06 <USBD_SetAddress+0x76>
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	885b      	ldrh	r3, [r3, #2]
 8009aae:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ab0:	d829      	bhi.n	8009b06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	885b      	ldrh	r3, [r3, #2]
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009abc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	d104      	bne.n	8009ad4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 f9bc 	bl	8009e4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ad2:	e01d      	b.n	8009b10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	7bfa      	ldrb	r2, [r7, #15]
 8009ad8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f00f fc07 	bl	80192f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fa8d 	bl	800a006 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d004      	beq.n	8009afc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2202      	movs	r2, #2
 8009af6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009afa:	e009      	b.n	8009b10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b04:	e004      	b.n	8009b10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f99e 	bl	8009e4a <USBD_CtlError>
  }
}
 8009b0e:	bf00      	nop
 8009b10:	bf00      	nop
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	885b      	ldrh	r3, [r3, #2]
 8009b2a:	b2da      	uxtb	r2, r3
 8009b2c:	4b4e      	ldr	r3, [pc, #312]	@ (8009c68 <USBD_SetConfig+0x150>)
 8009b2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009b30:	4b4d      	ldr	r3, [pc, #308]	@ (8009c68 <USBD_SetConfig+0x150>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d905      	bls.n	8009b44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009b38:	6839      	ldr	r1, [r7, #0]
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f985 	bl	8009e4a <USBD_CtlError>
    return USBD_FAIL;
 8009b40:	2303      	movs	r3, #3
 8009b42:	e08c      	b.n	8009c5e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d002      	beq.n	8009b56 <USBD_SetConfig+0x3e>
 8009b50:	2b03      	cmp	r3, #3
 8009b52:	d029      	beq.n	8009ba8 <USBD_SetConfig+0x90>
 8009b54:	e075      	b.n	8009c42 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009b56:	4b44      	ldr	r3, [pc, #272]	@ (8009c68 <USBD_SetConfig+0x150>)
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d020      	beq.n	8009ba0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009b5e:	4b42      	ldr	r3, [pc, #264]	@ (8009c68 <USBD_SetConfig+0x150>)
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	461a      	mov	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b68:	4b3f      	ldr	r3, [pc, #252]	@ (8009c68 <USBD_SetConfig+0x150>)
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7fe ffcd 	bl	8008b0e <USBD_SetClassConfig>
 8009b74:	4603      	mov	r3, r0
 8009b76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d008      	beq.n	8009b90 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 f962 	bl	8009e4a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2202      	movs	r2, #2
 8009b8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b8e:	e065      	b.n	8009c5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 fa38 	bl	800a006 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2203      	movs	r2, #3
 8009b9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009b9e:	e05d      	b.n	8009c5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 fa30 	bl	800a006 <USBD_CtlSendStatus>
      break;
 8009ba6:	e059      	b.n	8009c5c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009ba8:	4b2f      	ldr	r3, [pc, #188]	@ (8009c68 <USBD_SetConfig+0x150>)
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d112      	bne.n	8009bd6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8009c68 <USBD_SetConfig+0x150>)
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009bc2:	4b29      	ldr	r3, [pc, #164]	@ (8009c68 <USBD_SetConfig+0x150>)
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f7fe ffbc 	bl	8008b46 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fa19 	bl	800a006 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009bd4:	e042      	b.n	8009c5c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009bd6:	4b24      	ldr	r3, [pc, #144]	@ (8009c68 <USBD_SetConfig+0x150>)
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d02a      	beq.n	8009c3a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	4619      	mov	r1, r3
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f7fe ffaa 	bl	8008b46 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8009c68 <USBD_SetConfig+0x150>)
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8009c68 <USBD_SetConfig+0x150>)
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	4619      	mov	r1, r3
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7fe ff83 	bl	8008b0e <USBD_SetClassConfig>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009c0c:	7bfb      	ldrb	r3, [r7, #15]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00f      	beq.n	8009c32 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009c12:	6839      	ldr	r1, [r7, #0]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f918 	bl	8009e4a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f7fe ff8f 	bl	8008b46 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2202      	movs	r2, #2
 8009c2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009c30:	e014      	b.n	8009c5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f9e7 	bl	800a006 <USBD_CtlSendStatus>
      break;
 8009c38:	e010      	b.n	8009c5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 f9e3 	bl	800a006 <USBD_CtlSendStatus>
      break;
 8009c40:	e00c      	b.n	8009c5c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009c42:	6839      	ldr	r1, [r7, #0]
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 f900 	bl	8009e4a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c4a:	4b07      	ldr	r3, [pc, #28]	@ (8009c68 <USBD_SetConfig+0x150>)
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f7fe ff78 	bl	8008b46 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009c56:	2303      	movs	r3, #3
 8009c58:	73fb      	strb	r3, [r7, #15]
      break;
 8009c5a:	bf00      	nop
  }

  return ret;
 8009c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	200051f8 	.word	0x200051f8

08009c6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	88db      	ldrh	r3, [r3, #6]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d004      	beq.n	8009c88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009c7e:	6839      	ldr	r1, [r7, #0]
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f8e2 	bl	8009e4a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009c86:	e023      	b.n	8009cd0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	dc02      	bgt.n	8009c9a <USBD_GetConfig+0x2e>
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	dc03      	bgt.n	8009ca0 <USBD_GetConfig+0x34>
 8009c98:	e015      	b.n	8009cc6 <USBD_GetConfig+0x5a>
 8009c9a:	2b03      	cmp	r3, #3
 8009c9c:	d00b      	beq.n	8009cb6 <USBD_GetConfig+0x4a>
 8009c9e:	e012      	b.n	8009cc6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	3308      	adds	r3, #8
 8009caa:	2201      	movs	r2, #1
 8009cac:	4619      	mov	r1, r3
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f948 	bl	8009f44 <USBD_CtlSendData>
        break;
 8009cb4:	e00c      	b.n	8009cd0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	3304      	adds	r3, #4
 8009cba:	2201      	movs	r2, #1
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 f940 	bl	8009f44 <USBD_CtlSendData>
        break;
 8009cc4:	e004      	b.n	8009cd0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 f8be 	bl	8009e4a <USBD_CtlError>
        break;
 8009cce:	bf00      	nop
}
 8009cd0:	bf00      	nop
 8009cd2:	3708      	adds	r7, #8
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	3b01      	subs	r3, #1
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d81e      	bhi.n	8009d2e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	88db      	ldrh	r3, [r3, #6]
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d004      	beq.n	8009d02 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009cf8:	6839      	ldr	r1, [r7, #0]
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 f8a5 	bl	8009e4a <USBD_CtlError>
        break;
 8009d00:	e01a      	b.n	8009d38 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2201      	movs	r2, #1
 8009d06:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d005      	beq.n	8009d1e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	f043 0202 	orr.w	r2, r3, #2
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	330c      	adds	r3, #12
 8009d22:	2202      	movs	r2, #2
 8009d24:	4619      	mov	r1, r3
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f90c 	bl	8009f44 <USBD_CtlSendData>
      break;
 8009d2c:	e004      	b.n	8009d38 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009d2e:	6839      	ldr	r1, [r7, #0]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 f88a 	bl	8009e4a <USBD_CtlError>
      break;
 8009d36:	bf00      	nop
  }
}
 8009d38:	bf00      	nop
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	885b      	ldrh	r3, [r3, #2]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d107      	bne.n	8009d62 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2201      	movs	r2, #1
 8009d56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 f953 	bl	800a006 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009d60:	e013      	b.n	8009d8a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	885b      	ldrh	r3, [r3, #2]
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	d10b      	bne.n	8009d82 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	889b      	ldrh	r3, [r3, #4]
 8009d6e:	0a1b      	lsrs	r3, r3, #8
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	b2da      	uxtb	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 f943 	bl	800a006 <USBD_CtlSendStatus>
}
 8009d80:	e003      	b.n	8009d8a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009d82:	6839      	ldr	r1, [r7, #0]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f860 	bl	8009e4a <USBD_CtlError>
}
 8009d8a:	bf00      	nop
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b082      	sub	sp, #8
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	3b01      	subs	r3, #1
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d80b      	bhi.n	8009dc2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	885b      	ldrh	r3, [r3, #2]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d10c      	bne.n	8009dcc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f923 	bl	800a006 <USBD_CtlSendStatus>
      }
      break;
 8009dc0:	e004      	b.n	8009dcc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009dc2:	6839      	ldr	r1, [r7, #0]
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 f840 	bl	8009e4a <USBD_CtlError>
      break;
 8009dca:	e000      	b.n	8009dce <USBD_ClrFeature+0x3c>
      break;
 8009dcc:	bf00      	nop
  }
}
 8009dce:	bf00      	nop
 8009dd0:	3708      	adds	r7, #8
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b084      	sub	sp, #16
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
 8009dde:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	781a      	ldrb	r2, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	3301      	adds	r3, #1
 8009df0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	781a      	ldrb	r2, [r3, #0]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009e00:	68f8      	ldr	r0, [r7, #12]
 8009e02:	f7ff fa3d 	bl	8009280 <SWAPBYTE>
 8009e06:	4603      	mov	r3, r0
 8009e08:	461a      	mov	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	3301      	adds	r3, #1
 8009e12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	3301      	adds	r3, #1
 8009e18:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009e1a:	68f8      	ldr	r0, [r7, #12]
 8009e1c:	f7ff fa30 	bl	8009280 <SWAPBYTE>
 8009e20:	4603      	mov	r3, r0
 8009e22:	461a      	mov	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	3301      	adds	r3, #1
 8009e32:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f7ff fa23 	bl	8009280 <SWAPBYTE>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	80da      	strh	r2, [r3, #6]
}
 8009e42:	bf00      	nop
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b082      	sub	sp, #8
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
 8009e52:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e54:	2180      	movs	r1, #128	@ 0x80
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f00f f9e2 	bl	8019220 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f00f f9de 	bl	8019220 <USBD_LL_StallEP>
}
 8009e64:	bf00      	nop
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d042      	beq.n	8009f08 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009e86:	6938      	ldr	r0, [r7, #16]
 8009e88:	f000 f842 	bl	8009f10 <USBD_GetLen>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	3301      	adds	r3, #1
 8009e90:	005b      	lsls	r3, r3, #1
 8009e92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e96:	d808      	bhi.n	8009eaa <USBD_GetString+0x3e>
 8009e98:	6938      	ldr	r0, [r7, #16]
 8009e9a:	f000 f839 	bl	8009f10 <USBD_GetLen>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	005b      	lsls	r3, r3, #1
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	e001      	b.n	8009eae <USBD_GetString+0x42>
 8009eaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009eb2:	7dfb      	ldrb	r3, [r7, #23]
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	7812      	ldrb	r2, [r2, #0]
 8009ebc:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ebe:	7dfb      	ldrb	r3, [r7, #23]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009ec4:	7dfb      	ldrb	r3, [r7, #23]
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	4413      	add	r3, r2
 8009eca:	2203      	movs	r2, #3
 8009ecc:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ece:	7dfb      	ldrb	r3, [r7, #23]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009ed4:	e013      	b.n	8009efe <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009ed6:	7dfb      	ldrb	r3, [r7, #23]
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	4413      	add	r3, r2
 8009edc:	693a      	ldr	r2, [r7, #16]
 8009ede:	7812      	ldrb	r2, [r2, #0]
 8009ee0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	613b      	str	r3, [r7, #16]
    idx++;
 8009ee8:	7dfb      	ldrb	r3, [r7, #23]
 8009eea:	3301      	adds	r3, #1
 8009eec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009eee:	7dfb      	ldrb	r3, [r7, #23]
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	701a      	strb	r2, [r3, #0]
    idx++;
 8009ef8:	7dfb      	ldrb	r3, [r7, #23]
 8009efa:	3301      	adds	r3, #1
 8009efc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1e7      	bne.n	8009ed6 <USBD_GetString+0x6a>
 8009f06:	e000      	b.n	8009f0a <USBD_GetString+0x9e>
    return;
 8009f08:	bf00      	nop
  }
}
 8009f0a:	3718      	adds	r7, #24
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009f20:	e005      	b.n	8009f2e <USBD_GetLen+0x1e>
  {
    len++;
 8009f22:	7bfb      	ldrb	r3, [r7, #15]
 8009f24:	3301      	adds	r3, #1
 8009f26:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1f5      	bne.n	8009f22 <USBD_GetLen+0x12>
  }

  return len;
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3714      	adds	r7, #20
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2202      	movs	r2, #2
 8009f54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	68ba      	ldr	r2, [r7, #8]
 8009f6e:	2100      	movs	r1, #0
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f00f f9de 	bl	8019332 <USBD_LL_Transmit>

  return USBD_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	2100      	movs	r1, #0
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f00f f9cd 	bl	8019332 <USBD_LL_Transmit>

  return USBD_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	60f8      	str	r0, [r7, #12]
 8009faa:	60b9      	str	r1, [r7, #8]
 8009fac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2203      	movs	r2, #3
 8009fb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	68ba      	ldr	r2, [r7, #8]
 8009fc2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f00f f9cd 	bl	8019374 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f00f f9bc 	bl	8019374 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}

0800a006 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b082      	sub	sp, #8
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2204      	movs	r2, #4
 800a012:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a016:	2300      	movs	r3, #0
 800a018:	2200      	movs	r2, #0
 800a01a:	2100      	movs	r1, #0
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f00f f988 	bl	8019332 <USBD_LL_Transmit>

  return USBD_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2205      	movs	r2, #5
 800a038:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a03c:	2300      	movs	r3, #0
 800a03e:	2200      	movs	r2, #0
 800a040:	2100      	movs	r1, #0
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f00f f996 	bl	8019374 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a052:	b480      	push	{r7}
 800a054:	b085      	sub	sp, #20
 800a056:	af00      	add	r7, sp, #0
 800a058:	4603      	mov	r3, r0
 800a05a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a05c:	2300      	movs	r3, #0
 800a05e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a060:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a064:	2b84      	cmp	r3, #132	@ 0x84
 800a066:	d005      	beq.n	800a074 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a068:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	4413      	add	r3, r2
 800a070:	3303      	adds	r3, #3
 800a072:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a074:	68fb      	ldr	r3, [r7, #12]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr

0800a082 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a082:	b480      	push	{r7}
 800a084:	b083      	sub	sp, #12
 800a086:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a088:	f3ef 8305 	mrs	r3, IPSR
 800a08c:	607b      	str	r3, [r7, #4]
  return(result);
 800a08e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a090:	2b00      	cmp	r3, #0
 800a092:	bf14      	ite	ne
 800a094:	2301      	movne	r3, #1
 800a096:	2300      	moveq	r3, #0
 800a098:	b2db      	uxtb	r3, r3
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a0aa:	f001 fc95 	bl	800b9d8 <vTaskStartScheduler>
  
  return osOK;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a0b8:	f7ff ffe3 	bl	800a082 <inHandlerMode>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d003      	beq.n	800a0ca <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a0c2:	f001 fdaf 	bl	800bc24 <xTaskGetTickCountFromISR>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	e002      	b.n	800a0d0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a0ca:	f001 fd9b 	bl	800bc04 <xTaskGetTickCount>
 800a0ce:	4603      	mov	r3, r0
  }
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0d6:	b089      	sub	sp, #36	@ 0x24
 800a0d8:	af04      	add	r7, sp, #16
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	695b      	ldr	r3, [r3, #20]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d020      	beq.n	800a128 <osThreadCreate+0x54>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	699b      	ldr	r3, [r3, #24]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d01c      	beq.n	800a128 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	685c      	ldr	r4, [r3, #4]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	691e      	ldr	r6, [r3, #16]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a100:	4618      	mov	r0, r3
 800a102:	f7ff ffa6 	bl	800a052 <makeFreeRtosPriority>
 800a106:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	695b      	ldr	r3, [r3, #20]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a110:	9202      	str	r2, [sp, #8]
 800a112:	9301      	str	r3, [sp, #4]
 800a114:	9100      	str	r1, [sp, #0]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	4632      	mov	r2, r6
 800a11a:	4629      	mov	r1, r5
 800a11c:	4620      	mov	r0, r4
 800a11e:	f001 fa75 	bl	800b60c <xTaskCreateStatic>
 800a122:	4603      	mov	r3, r0
 800a124:	60fb      	str	r3, [r7, #12]
 800a126:	e01c      	b.n	800a162 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685c      	ldr	r4, [r3, #4]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a134:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7ff ff88 	bl	800a052 <makeFreeRtosPriority>
 800a142:	4602      	mov	r2, r0
 800a144:	f107 030c 	add.w	r3, r7, #12
 800a148:	9301      	str	r3, [sp, #4]
 800a14a:	9200      	str	r2, [sp, #0]
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	4632      	mov	r2, r6
 800a150:	4629      	mov	r1, r5
 800a152:	4620      	mov	r0, r4
 800a154:	f001 faba 	bl	800b6cc <xTaskCreate>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d001      	beq.n	800a162 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a15e:	2300      	movs	r3, #0
 800a160:	e000      	b.n	800a164 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a162:	68fb      	ldr	r3, [r7, #12]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3714      	adds	r7, #20
 800a168:	46bd      	mov	sp, r7
 800a16a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a16c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <osDelay+0x16>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	e000      	b.n	800a184 <osDelay+0x18>
 800a182:	2301      	movs	r3, #1
 800a184:	4618      	mov	r0, r3
 800a186:	f001 fbf1 	bl	800b96c <vTaskDelay>
  
  return osOK;
 800a18a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d007      	beq.n	800a1b4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	2001      	movs	r0, #1
 800a1ac:	f000 fc47 	bl	800aa3e <xQueueCreateMutexStatic>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	e003      	b.n	800a1bc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a1b4:	2001      	movs	r0, #1
 800a1b6:	f000 fc2a 	bl	800aa0e <xQueueCreateMutex>
 800a1ba:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d101      	bne.n	800a1dc <osMutexWait+0x18>
    return osErrorParameter;
 800a1d8:	2380      	movs	r3, #128	@ 0x80
 800a1da:	e03a      	b.n	800a252 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e6:	d103      	bne.n	800a1f0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ec:	60fb      	str	r3, [r7, #12]
 800a1ee:	e009      	b.n	800a204 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d006      	beq.n	800a204 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d101      	bne.n	800a204 <osMutexWait+0x40>
      ticks = 1;
 800a200:	2301      	movs	r3, #1
 800a202:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a204:	f7ff ff3d 	bl	800a082 <inHandlerMode>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d017      	beq.n	800a23e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a20e:	f107 0308 	add.w	r3, r7, #8
 800a212:	461a      	mov	r2, r3
 800a214:	2100      	movs	r1, #0
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f001 f84e 	bl	800b2b8 <xQueueReceiveFromISR>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d001      	beq.n	800a226 <osMutexWait+0x62>
      return osErrorOS;
 800a222:	23ff      	movs	r3, #255	@ 0xff
 800a224:	e015      	b.n	800a252 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d011      	beq.n	800a250 <osMutexWait+0x8c>
 800a22c:	4b0b      	ldr	r3, [pc, #44]	@ (800a25c <osMutexWait+0x98>)
 800a22e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a232:	601a      	str	r2, [r3, #0]
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	e008      	b.n	800a250 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a23e:	68f9      	ldr	r1, [r7, #12]
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 ff29 	bl	800b098 <xQueueSemaphoreTake>
 800a246:	4603      	mov	r3, r0
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d001      	beq.n	800a250 <osMutexWait+0x8c>
    return osErrorOS;
 800a24c:	23ff      	movs	r3, #255	@ 0xff
 800a24e:	e000      	b.n	800a252 <osMutexWait+0x8e>
  }
  
  return osOK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	e000ed04 	.word	0xe000ed04

0800a260 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a268:	2300      	movs	r3, #0
 800a26a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a26c:	2300      	movs	r3, #0
 800a26e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a270:	f7ff ff07 	bl	800a082 <inHandlerMode>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d016      	beq.n	800a2a8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a27a:	f107 0308 	add.w	r3, r7, #8
 800a27e:	4619      	mov	r1, r3
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 fd97 	bl	800adb4 <xQueueGiveFromISR>
 800a286:	4603      	mov	r3, r0
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d001      	beq.n	800a290 <osMutexRelease+0x30>
      return osErrorOS;
 800a28c:	23ff      	movs	r3, #255	@ 0xff
 800a28e:	e017      	b.n	800a2c0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d013      	beq.n	800a2be <osMutexRelease+0x5e>
 800a296:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c8 <osMutexRelease+0x68>)
 800a298:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a29c:	601a      	str	r2, [r3, #0]
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	e00a      	b.n	800a2be <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 fbe0 	bl	800aa74 <xQueueGenericSend>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d001      	beq.n	800a2be <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a2ba:	23ff      	movs	r3, #255	@ 0xff
 800a2bc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a2be:	68fb      	ldr	r3, [r7, #12]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	e000ed04 	.word	0xe000ed04

0800a2cc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af02      	add	r7, sp, #8
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00f      	beq.n	800a2fe <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d10a      	bne.n	800a2fa <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	2203      	movs	r2, #3
 800a2ea:	9200      	str	r2, [sp, #0]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	2001      	movs	r0, #1
 800a2f2:	f000 fa9b 	bl	800a82c <xQueueGenericCreateStatic>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	e016      	b.n	800a328 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	e014      	b.n	800a328 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	2b01      	cmp	r3, #1
 800a302:	d110      	bne.n	800a326 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a304:	2203      	movs	r2, #3
 800a306:	2100      	movs	r1, #0
 800a308:	2001      	movs	r0, #1
 800a30a:	f000 fb0c 	bl	800a926 <xQueueGenericCreate>
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d005      	beq.n	800a322 <osSemaphoreCreate+0x56>
 800a316:	2300      	movs	r3, #0
 800a318:	2200      	movs	r2, #0
 800a31a:	2100      	movs	r1, #0
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f000 fba9 	bl	800aa74 <xQueueGenericSend>
      return sema;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	e000      	b.n	800a328 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a326:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a33a:	2300      	movs	r3, #0
 800a33c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d101      	bne.n	800a348 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a344:	2380      	movs	r3, #128	@ 0x80
 800a346:	e03a      	b.n	800a3be <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a348:	2300      	movs	r3, #0
 800a34a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a352:	d103      	bne.n	800a35c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a354:	f04f 33ff 	mov.w	r3, #4294967295
 800a358:	60fb      	str	r3, [r7, #12]
 800a35a:	e009      	b.n	800a370 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d006      	beq.n	800a370 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d101      	bne.n	800a370 <osSemaphoreWait+0x40>
      ticks = 1;
 800a36c:	2301      	movs	r3, #1
 800a36e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a370:	f7ff fe87 	bl	800a082 <inHandlerMode>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d017      	beq.n	800a3aa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a37a:	f107 0308 	add.w	r3, r7, #8
 800a37e:	461a      	mov	r2, r3
 800a380:	2100      	movs	r1, #0
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 ff98 	bl	800b2b8 <xQueueReceiveFromISR>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d001      	beq.n	800a392 <osSemaphoreWait+0x62>
      return osErrorOS;
 800a38e:	23ff      	movs	r3, #255	@ 0xff
 800a390:	e015      	b.n	800a3be <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d011      	beq.n	800a3bc <osSemaphoreWait+0x8c>
 800a398:	4b0b      	ldr	r3, [pc, #44]	@ (800a3c8 <osSemaphoreWait+0x98>)
 800a39a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a39e:	601a      	str	r2, [r3, #0]
 800a3a0:	f3bf 8f4f 	dsb	sy
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	e008      	b.n	800a3bc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a3aa:	68f9      	ldr	r1, [r7, #12]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fe73 	bl	800b098 <xQueueSemaphoreTake>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d001      	beq.n	800a3bc <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a3b8:	23ff      	movs	r3, #255	@ 0xff
 800a3ba:	e000      	b.n	800a3be <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	e000ed04 	.word	0xe000ed04

0800a3cc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a3dc:	f7ff fe51 	bl	800a082 <inHandlerMode>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d016      	beq.n	800a414 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a3e6:	f107 0308 	add.w	r3, r7, #8
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fce1 	bl	800adb4 <xQueueGiveFromISR>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d001      	beq.n	800a3fc <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a3f8:	23ff      	movs	r3, #255	@ 0xff
 800a3fa:	e017      	b.n	800a42c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d013      	beq.n	800a42a <osSemaphoreRelease+0x5e>
 800a402:	4b0c      	ldr	r3, [pc, #48]	@ (800a434 <osSemaphoreRelease+0x68>)
 800a404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a408:	601a      	str	r2, [r3, #0]
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	f3bf 8f6f 	isb	sy
 800a412:	e00a      	b.n	800a42a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a414:	2300      	movs	r3, #0
 800a416:	2200      	movs	r2, #0
 800a418:	2100      	movs	r1, #0
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 fb2a 	bl	800aa74 <xQueueGenericSend>
 800a420:	4603      	mov	r3, r0
 800a422:	2b01      	cmp	r3, #1
 800a424:	d001      	beq.n	800a42a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a426:	23ff      	movs	r3, #255	@ 0xff
 800a428:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a42a:	68fb      	ldr	r3, [r7, #12]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	e000ed04 	.word	0xe000ed04

0800a438 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a438:	b590      	push	{r4, r7, lr}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af02      	add	r7, sp, #8
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d011      	beq.n	800a46e <osMessageCreate+0x36>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00d      	beq.n	800a46e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6818      	ldr	r0, [r3, #0]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6859      	ldr	r1, [r3, #4]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	689a      	ldr	r2, [r3, #8]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	2400      	movs	r4, #0
 800a464:	9400      	str	r4, [sp, #0]
 800a466:	f000 f9e1 	bl	800a82c <xQueueGenericCreateStatic>
 800a46a:	4603      	mov	r3, r0
 800a46c:	e008      	b.n	800a480 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6818      	ldr	r0, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	4619      	mov	r1, r3
 800a47a:	f000 fa54 	bl	800a926 <xQueueGenericCreate>
 800a47e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a480:	4618      	mov	r0, r3
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	bd90      	pop	{r4, r7, pc}

0800a488 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a494:	2300      	movs	r3, #0
 800a496:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d101      	bne.n	800a4a6 <osMessagePut+0x1e>
    ticks = 1;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a4a6:	f7ff fdec 	bl	800a082 <inHandlerMode>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d018      	beq.n	800a4e2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a4b0:	f107 0210 	add.w	r2, r7, #16
 800a4b4:	f107 0108 	add.w	r1, r7, #8
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f000 fbdc 	bl	800ac78 <xQueueGenericSendFromISR>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d001      	beq.n	800a4ca <osMessagePut+0x42>
      return osErrorOS;
 800a4c6:	23ff      	movs	r3, #255	@ 0xff
 800a4c8:	e018      	b.n	800a4fc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d014      	beq.n	800a4fa <osMessagePut+0x72>
 800a4d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a504 <osMessagePut+0x7c>)
 800a4d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4d6:	601a      	str	r2, [r3, #0]
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	e00b      	b.n	800a4fa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a4e2:	f107 0108 	add.w	r1, r7, #8
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f000 fac2 	bl	800aa74 <xQueueGenericSend>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d001      	beq.n	800a4fa <osMessagePut+0x72>
      return osErrorOS;
 800a4f6:	23ff      	movs	r3, #255	@ 0xff
 800a4f8:	e000      	b.n	800a4fc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3718      	adds	r7, #24
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	e000ed04 	.word	0xe000ed04

0800a508 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a508:	b590      	push	{r4, r7, lr}
 800a50a:	b08b      	sub	sp, #44	@ 0x2c
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d10a      	bne.n	800a538 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a522:	2380      	movs	r3, #128	@ 0x80
 800a524:	617b      	str	r3, [r7, #20]
    return event;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	461c      	mov	r4, r3
 800a52a:	f107 0314 	add.w	r3, r7, #20
 800a52e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a532:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a536:	e054      	b.n	800a5e2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a538:	2300      	movs	r3, #0
 800a53a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a53c:	2300      	movs	r3, #0
 800a53e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a546:	d103      	bne.n	800a550 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a548:	f04f 33ff 	mov.w	r3, #4294967295
 800a54c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a54e:	e009      	b.n	800a564 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d006      	beq.n	800a564 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800a55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d101      	bne.n	800a564 <osMessageGet+0x5c>
      ticks = 1;
 800a560:	2301      	movs	r3, #1
 800a562:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a564:	f7ff fd8d 	bl	800a082 <inHandlerMode>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d01c      	beq.n	800a5a8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a56e:	f107 0220 	add.w	r2, r7, #32
 800a572:	f107 0314 	add.w	r3, r7, #20
 800a576:	3304      	adds	r3, #4
 800a578:	4619      	mov	r1, r3
 800a57a:	68b8      	ldr	r0, [r7, #8]
 800a57c:	f000 fe9c 	bl	800b2b8 <xQueueReceiveFromISR>
 800a580:	4603      	mov	r3, r0
 800a582:	2b01      	cmp	r3, #1
 800a584:	d102      	bne.n	800a58c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a586:	2310      	movs	r3, #16
 800a588:	617b      	str	r3, [r7, #20]
 800a58a:	e001      	b.n	800a590 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a58c:	2300      	movs	r3, #0
 800a58e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a590:	6a3b      	ldr	r3, [r7, #32]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d01d      	beq.n	800a5d2 <osMessageGet+0xca>
 800a596:	4b15      	ldr	r3, [pc, #84]	@ (800a5ec <osMessageGet+0xe4>)
 800a598:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a59c:	601a      	str	r2, [r3, #0]
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	e014      	b.n	800a5d2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a5a8:	f107 0314 	add.w	r3, r7, #20
 800a5ac:	3304      	adds	r3, #4
 800a5ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	68b8      	ldr	r0, [r7, #8]
 800a5b4:	f000 fc8e 	bl	800aed4 <xQueueReceive>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d102      	bne.n	800a5c4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a5be:	2310      	movs	r3, #16
 800a5c0:	617b      	str	r3, [r7, #20]
 800a5c2:	e006      	b.n	800a5d2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d101      	bne.n	800a5ce <osMessageGet+0xc6>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	e000      	b.n	800a5d0 <osMessageGet+0xc8>
 800a5ce:	2340      	movs	r3, #64	@ 0x40
 800a5d0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	461c      	mov	r4, r3
 800a5d6:	f107 0314 	add.w	r3, r7, #20
 800a5da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a5de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a5e2:	68f8      	ldr	r0, [r7, #12]
 800a5e4:	372c      	adds	r7, #44	@ 0x2c
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd90      	pop	{r4, r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	e000ed04 	.word	0xe000ed04

0800a5f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f103 0208 	add.w	r2, r3, #8
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f04f 32ff 	mov.w	r2, #4294967295
 800a608:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f103 0208 	add.w	r2, r3, #8
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f103 0208 	add.w	r2, r3, #8
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a63e:	bf00      	nop
 800a640:	370c      	adds	r7, #12
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr

0800a64a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a64a:	b480      	push	{r7}
 800a64c:	b085      	sub	sp, #20
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	689a      	ldr	r2, [r3, #8]
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	1c5a      	adds	r2, r3, #1
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	601a      	str	r2, [r3, #0]
}
 800a686:	bf00      	nop
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a692:	b480      	push	{r7}
 800a694:	b085      	sub	sp, #20
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a8:	d103      	bne.n	800a6b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	60fb      	str	r3, [r7, #12]
 800a6b0:	e00c      	b.n	800a6cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	3308      	adds	r3, #8
 800a6b6:	60fb      	str	r3, [r7, #12]
 800a6b8:	e002      	b.n	800a6c0 <vListInsert+0x2e>
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	60fb      	str	r3, [r7, #12]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d2f6      	bcs.n	800a6ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	683a      	ldr	r2, [r7, #0]
 800a6da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	1c5a      	adds	r2, r3, #1
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	601a      	str	r2, [r3, #0]
}
 800a6f8:	bf00      	nop
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	691b      	ldr	r3, [r3, #16]
 800a710:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	6892      	ldr	r2, [r2, #8]
 800a71a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	6852      	ldr	r2, [r2, #4]
 800a724:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d103      	bne.n	800a738 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	689a      	ldr	r2, [r3, #8]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	1e5a      	subs	r2, r3, #1
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d10b      	bne.n	800a784 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a76c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a77e:	bf00      	nop
 800a780:	bf00      	nop
 800a782:	e7fd      	b.n	800a780 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a784:	f002 f8c0 	bl	800c908 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a790:	68f9      	ldr	r1, [r7, #12]
 800a792:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a794:	fb01 f303 	mul.w	r3, r1, r3
 800a798:	441a      	add	r2, r3
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	68f9      	ldr	r1, [r7, #12]
 800a7b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a7ba:	fb01 f303 	mul.w	r3, r1, r3
 800a7be:	441a      	add	r2, r3
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	22ff      	movs	r2, #255	@ 0xff
 800a7c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	22ff      	movs	r2, #255	@ 0xff
 800a7d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d114      	bne.n	800a804 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d01a      	beq.n	800a818 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	3310      	adds	r3, #16
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f001 fb72 	bl	800bed0 <xTaskRemoveFromEventList>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d012      	beq.n	800a818 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a7f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a828 <xQueueGenericReset+0xd0>)
 800a7f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7f8:	601a      	str	r2, [r3, #0]
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	e009      	b.n	800a818 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	3310      	adds	r3, #16
 800a808:	4618      	mov	r0, r3
 800a80a:	f7ff fef1 	bl	800a5f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	3324      	adds	r3, #36	@ 0x24
 800a812:	4618      	mov	r0, r3
 800a814:	f7ff feec 	bl	800a5f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a818:	f002 f8a8 	bl	800c96c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a81c:	2301      	movs	r3, #1
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	e000ed04 	.word	0xe000ed04

0800a82c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b08e      	sub	sp, #56	@ 0x38
 800a830:	af02      	add	r7, sp, #8
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
 800a838:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d10b      	bne.n	800a858 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a844:	f383 8811 	msr	BASEPRI, r3
 800a848:	f3bf 8f6f 	isb	sy
 800a84c:	f3bf 8f4f 	dsb	sy
 800a850:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a852:	bf00      	nop
 800a854:	bf00      	nop
 800a856:	e7fd      	b.n	800a854 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d10b      	bne.n	800a876 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a862:	f383 8811 	msr	BASEPRI, r3
 800a866:	f3bf 8f6f 	isb	sy
 800a86a:	f3bf 8f4f 	dsb	sy
 800a86e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a870:	bf00      	nop
 800a872:	bf00      	nop
 800a874:	e7fd      	b.n	800a872 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d002      	beq.n	800a882 <xQueueGenericCreateStatic+0x56>
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <xQueueGenericCreateStatic+0x5a>
 800a882:	2301      	movs	r3, #1
 800a884:	e000      	b.n	800a888 <xQueueGenericCreateStatic+0x5c>
 800a886:	2300      	movs	r3, #0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10b      	bne.n	800a8a4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	623b      	str	r3, [r7, #32]
}
 800a89e:	bf00      	nop
 800a8a0:	bf00      	nop
 800a8a2:	e7fd      	b.n	800a8a0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d102      	bne.n	800a8b0 <xQueueGenericCreateStatic+0x84>
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d101      	bne.n	800a8b4 <xQueueGenericCreateStatic+0x88>
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e000      	b.n	800a8b6 <xQueueGenericCreateStatic+0x8a>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10b      	bne.n	800a8d2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	61fb      	str	r3, [r7, #28]
}
 800a8cc:	bf00      	nop
 800a8ce:	bf00      	nop
 800a8d0:	e7fd      	b.n	800a8ce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a8d2:	2348      	movs	r3, #72	@ 0x48
 800a8d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	2b48      	cmp	r3, #72	@ 0x48
 800a8da:	d00b      	beq.n	800a8f4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a8dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e0:	f383 8811 	msr	BASEPRI, r3
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	61bb      	str	r3, [r7, #24]
}
 800a8ee:	bf00      	nop
 800a8f0:	bf00      	nop
 800a8f2:	e7fd      	b.n	800a8f0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a8f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a8fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d00d      	beq.n	800a91c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a902:	2201      	movs	r2, #1
 800a904:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a908:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	4613      	mov	r3, r2
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	68b9      	ldr	r1, [r7, #8]
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f000 f840 	bl	800a99c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a91e:	4618      	mov	r0, r3
 800a920:	3730      	adds	r7, #48	@ 0x30
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a926:	b580      	push	{r7, lr}
 800a928:	b08a      	sub	sp, #40	@ 0x28
 800a92a:	af02      	add	r7, sp, #8
 800a92c:	60f8      	str	r0, [r7, #12]
 800a92e:	60b9      	str	r1, [r7, #8]
 800a930:	4613      	mov	r3, r2
 800a932:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d10b      	bne.n	800a952 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a93e:	f383 8811 	msr	BASEPRI, r3
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	613b      	str	r3, [r7, #16]
}
 800a94c:	bf00      	nop
 800a94e:	bf00      	nop
 800a950:	e7fd      	b.n	800a94e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	68ba      	ldr	r2, [r7, #8]
 800a956:	fb02 f303 	mul.w	r3, r2, r3
 800a95a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	3348      	adds	r3, #72	@ 0x48
 800a960:	4618      	mov	r0, r3
 800a962:	f002 f8f3 	bl	800cb4c <pvPortMalloc>
 800a966:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d011      	beq.n	800a992 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	3348      	adds	r3, #72	@ 0x48
 800a976:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a980:	79fa      	ldrb	r2, [r7, #7]
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	9300      	str	r3, [sp, #0]
 800a986:	4613      	mov	r3, r2
 800a988:	697a      	ldr	r2, [r7, #20]
 800a98a:	68b9      	ldr	r1, [r7, #8]
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f000 f805 	bl	800a99c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a992:	69bb      	ldr	r3, [r7, #24]
	}
 800a994:	4618      	mov	r0, r3
 800a996:	3720      	adds	r7, #32
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
 800a9a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d103      	bne.n	800a9b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	69ba      	ldr	r2, [r7, #24]
 800a9b4:	601a      	str	r2, [r3, #0]
 800a9b6:	e002      	b.n	800a9be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a9b8:	69bb      	ldr	r3, [r7, #24]
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a9ca:	2101      	movs	r1, #1
 800a9cc:	69b8      	ldr	r0, [r7, #24]
 800a9ce:	f7ff fec3 	bl	800a758 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a9d2:	bf00      	nop
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b082      	sub	sp, #8
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00e      	beq.n	800aa06 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	2100      	movs	r1, #0
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 f837 	bl	800aa74 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800aa06:	bf00      	nop
 800aa08:	3708      	adds	r7, #8
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b086      	sub	sp, #24
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	4603      	mov	r3, r0
 800aa16:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	617b      	str	r3, [r7, #20]
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800aa20:	79fb      	ldrb	r3, [r7, #7]
 800aa22:	461a      	mov	r2, r3
 800aa24:	6939      	ldr	r1, [r7, #16]
 800aa26:	6978      	ldr	r0, [r7, #20]
 800aa28:	f7ff ff7d 	bl	800a926 <xQueueGenericCreate>
 800aa2c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f7ff ffd3 	bl	800a9da <prvInitialiseMutex>

		return xNewQueue;
 800aa34:	68fb      	ldr	r3, [r7, #12]
	}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3718      	adds	r7, #24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b088      	sub	sp, #32
 800aa42:	af02      	add	r7, sp, #8
 800aa44:	4603      	mov	r3, r0
 800aa46:	6039      	str	r1, [r7, #0]
 800aa48:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	617b      	str	r3, [r7, #20]
 800aa4e:	2300      	movs	r3, #0
 800aa50:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800aa52:	79fb      	ldrb	r3, [r7, #7]
 800aa54:	9300      	str	r3, [sp, #0]
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	6939      	ldr	r1, [r7, #16]
 800aa5c:	6978      	ldr	r0, [r7, #20]
 800aa5e:	f7ff fee5 	bl	800a82c <xQueueGenericCreateStatic>
 800aa62:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800aa64:	68f8      	ldr	r0, [r7, #12]
 800aa66:	f7ff ffb8 	bl	800a9da <prvInitialiseMutex>

		return xNewQueue;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
	}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3718      	adds	r7, #24
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b08e      	sub	sp, #56	@ 0x38
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	607a      	str	r2, [r7, #4]
 800aa80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aa82:	2300      	movs	r3, #0
 800aa84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d10b      	bne.n	800aaa8 <xQueueGenericSend+0x34>
	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800aaa2:	bf00      	nop
 800aaa4:	bf00      	nop
 800aaa6:	e7fd      	b.n	800aaa4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d103      	bne.n	800aab6 <xQueueGenericSend+0x42>
 800aaae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d101      	bne.n	800aaba <xQueueGenericSend+0x46>
 800aab6:	2301      	movs	r3, #1
 800aab8:	e000      	b.n	800aabc <xQueueGenericSend+0x48>
 800aaba:	2300      	movs	r3, #0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d10b      	bne.n	800aad8 <xQueueGenericSend+0x64>
	__asm volatile
 800aac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac4:	f383 8811 	msr	BASEPRI, r3
 800aac8:	f3bf 8f6f 	isb	sy
 800aacc:	f3bf 8f4f 	dsb	sy
 800aad0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aad2:	bf00      	nop
 800aad4:	bf00      	nop
 800aad6:	e7fd      	b.n	800aad4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	2b02      	cmp	r3, #2
 800aadc:	d103      	bne.n	800aae6 <xQueueGenericSend+0x72>
 800aade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d101      	bne.n	800aaea <xQueueGenericSend+0x76>
 800aae6:	2301      	movs	r3, #1
 800aae8:	e000      	b.n	800aaec <xQueueGenericSend+0x78>
 800aaea:	2300      	movs	r3, #0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10b      	bne.n	800ab08 <xQueueGenericSend+0x94>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	623b      	str	r3, [r7, #32]
}
 800ab02:	bf00      	nop
 800ab04:	bf00      	nop
 800ab06:	e7fd      	b.n	800ab04 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab08:	f001 fba8 	bl	800c25c <xTaskGetSchedulerState>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d102      	bne.n	800ab18 <xQueueGenericSend+0xa4>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d101      	bne.n	800ab1c <xQueueGenericSend+0xa8>
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e000      	b.n	800ab1e <xQueueGenericSend+0xaa>
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10b      	bne.n	800ab3a <xQueueGenericSend+0xc6>
	__asm volatile
 800ab22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab26:	f383 8811 	msr	BASEPRI, r3
 800ab2a:	f3bf 8f6f 	isb	sy
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	61fb      	str	r3, [r7, #28]
}
 800ab34:	bf00      	nop
 800ab36:	bf00      	nop
 800ab38:	e7fd      	b.n	800ab36 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab3a:	f001 fee5 	bl	800c908 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d302      	bcc.n	800ab50 <xQueueGenericSend+0xdc>
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d129      	bne.n	800aba4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab50:	683a      	ldr	r2, [r7, #0]
 800ab52:	68b9      	ldr	r1, [r7, #8]
 800ab54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab56:	f000 fc49 	bl	800b3ec <prvCopyDataToQueue>
 800ab5a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d010      	beq.n	800ab86 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab66:	3324      	adds	r3, #36	@ 0x24
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f001 f9b1 	bl	800bed0 <xTaskRemoveFromEventList>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d013      	beq.n	800ab9c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ab74:	4b3f      	ldr	r3, [pc, #252]	@ (800ac74 <xQueueGenericSend+0x200>)
 800ab76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab7a:	601a      	str	r2, [r3, #0]
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	f3bf 8f6f 	isb	sy
 800ab84:	e00a      	b.n	800ab9c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ab86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d007      	beq.n	800ab9c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ab8c:	4b39      	ldr	r3, [pc, #228]	@ (800ac74 <xQueueGenericSend+0x200>)
 800ab8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab92:	601a      	str	r2, [r3, #0]
 800ab94:	f3bf 8f4f 	dsb	sy
 800ab98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ab9c:	f001 fee6 	bl	800c96c <vPortExitCritical>
				return pdPASS;
 800aba0:	2301      	movs	r3, #1
 800aba2:	e063      	b.n	800ac6c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d103      	bne.n	800abb2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800abaa:	f001 fedf 	bl	800c96c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800abae:	2300      	movs	r3, #0
 800abb0:	e05c      	b.n	800ac6c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d106      	bne.n	800abc6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abb8:	f107 0314 	add.w	r3, r7, #20
 800abbc:	4618      	mov	r0, r3
 800abbe:	f001 f9eb 	bl	800bf98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abc2:	2301      	movs	r3, #1
 800abc4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abc6:	f001 fed1 	bl	800c96c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abca:	f000 ff6f 	bl	800baac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abce:	f001 fe9b 	bl	800c908 <vPortEnterCritical>
 800abd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800abd8:	b25b      	sxtb	r3, r3
 800abda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abde:	d103      	bne.n	800abe8 <xQueueGenericSend+0x174>
 800abe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800abe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abee:	b25b      	sxtb	r3, r3
 800abf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf4:	d103      	bne.n	800abfe <xQueueGenericSend+0x18a>
 800abf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf8:	2200      	movs	r2, #0
 800abfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abfe:	f001 feb5 	bl	800c96c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac02:	1d3a      	adds	r2, r7, #4
 800ac04:	f107 0314 	add.w	r3, r7, #20
 800ac08:	4611      	mov	r1, r2
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f001 f9da 	bl	800bfc4 <xTaskCheckForTimeOut>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d124      	bne.n	800ac60 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ac16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac18:	f000 fce0 	bl	800b5dc <prvIsQueueFull>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d018      	beq.n	800ac54 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac24:	3310      	adds	r3, #16
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	4611      	mov	r1, r2
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f001 f92a 	bl	800be84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac32:	f000 fc6b 	bl	800b50c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac36:	f000 ff47 	bl	800bac8 <xTaskResumeAll>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f47f af7c 	bne.w	800ab3a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ac42:	4b0c      	ldr	r3, [pc, #48]	@ (800ac74 <xQueueGenericSend+0x200>)
 800ac44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac48:	601a      	str	r2, [r3, #0]
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	f3bf 8f6f 	isb	sy
 800ac52:	e772      	b.n	800ab3a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac56:	f000 fc59 	bl	800b50c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac5a:	f000 ff35 	bl	800bac8 <xTaskResumeAll>
 800ac5e:	e76c      	b.n	800ab3a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac62:	f000 fc53 	bl	800b50c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac66:	f000 ff2f 	bl	800bac8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3738      	adds	r7, #56	@ 0x38
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	e000ed04 	.word	0xe000ed04

0800ac78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b090      	sub	sp, #64	@ 0x40
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
 800ac84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ac8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10b      	bne.n	800aca8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800aca2:	bf00      	nop
 800aca4:	bf00      	nop
 800aca6:	e7fd      	b.n	800aca4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d103      	bne.n	800acb6 <xQueueGenericSendFromISR+0x3e>
 800acae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d101      	bne.n	800acba <xQueueGenericSendFromISR+0x42>
 800acb6:	2301      	movs	r3, #1
 800acb8:	e000      	b.n	800acbc <xQueueGenericSendFromISR+0x44>
 800acba:	2300      	movs	r3, #0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10b      	bne.n	800acd8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800acc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc4:	f383 8811 	msr	BASEPRI, r3
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800acd2:	bf00      	nop
 800acd4:	bf00      	nop
 800acd6:	e7fd      	b.n	800acd4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d103      	bne.n	800ace6 <xQueueGenericSendFromISR+0x6e>
 800acde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d101      	bne.n	800acea <xQueueGenericSendFromISR+0x72>
 800ace6:	2301      	movs	r3, #1
 800ace8:	e000      	b.n	800acec <xQueueGenericSendFromISR+0x74>
 800acea:	2300      	movs	r3, #0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d10b      	bne.n	800ad08 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800acf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acf4:	f383 8811 	msr	BASEPRI, r3
 800acf8:	f3bf 8f6f 	isb	sy
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	623b      	str	r3, [r7, #32]
}
 800ad02:	bf00      	nop
 800ad04:	bf00      	nop
 800ad06:	e7fd      	b.n	800ad04 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad08:	f001 fede 	bl	800cac8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ad0c:	f3ef 8211 	mrs	r2, BASEPRI
 800ad10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	61fa      	str	r2, [r7, #28]
 800ad22:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ad24:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad26:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d302      	bcc.n	800ad3a <xQueueGenericSendFromISR+0xc2>
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	d12f      	bne.n	800ad9a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ad3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad48:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad4a:	683a      	ldr	r2, [r7, #0]
 800ad4c:	68b9      	ldr	r1, [r7, #8]
 800ad4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ad50:	f000 fb4c 	bl	800b3ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ad54:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ad58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad5c:	d112      	bne.n	800ad84 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d016      	beq.n	800ad94 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad68:	3324      	adds	r3, #36	@ 0x24
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f001 f8b0 	bl	800bed0 <xTaskRemoveFromEventList>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00e      	beq.n	800ad94 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00b      	beq.n	800ad94 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	601a      	str	r2, [r3, #0]
 800ad82:	e007      	b.n	800ad94 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ad88:	3301      	adds	r3, #1
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	b25a      	sxtb	r2, r3
 800ad8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ad94:	2301      	movs	r3, #1
 800ad96:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ad98:	e001      	b.n	800ad9e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ada0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ada8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800adaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800adac:	4618      	mov	r0, r3
 800adae:	3740      	adds	r7, #64	@ 0x40
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b08e      	sub	sp, #56	@ 0x38
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800adc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d10b      	bne.n	800ade0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800adc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adcc:	f383 8811 	msr	BASEPRI, r3
 800add0:	f3bf 8f6f 	isb	sy
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	623b      	str	r3, [r7, #32]
}
 800adda:	bf00      	nop
 800addc:	bf00      	nop
 800adde:	e7fd      	b.n	800addc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ade0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d00b      	beq.n	800ae00 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800ade8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adec:	f383 8811 	msr	BASEPRI, r3
 800adf0:	f3bf 8f6f 	isb	sy
 800adf4:	f3bf 8f4f 	dsb	sy
 800adf8:	61fb      	str	r3, [r7, #28]
}
 800adfa:	bf00      	nop
 800adfc:	bf00      	nop
 800adfe:	e7fd      	b.n	800adfc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ae00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d103      	bne.n	800ae10 <xQueueGiveFromISR+0x5c>
 800ae08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d101      	bne.n	800ae14 <xQueueGiveFromISR+0x60>
 800ae10:	2301      	movs	r3, #1
 800ae12:	e000      	b.n	800ae16 <xQueueGiveFromISR+0x62>
 800ae14:	2300      	movs	r3, #0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d10b      	bne.n	800ae32 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800ae1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae1e:	f383 8811 	msr	BASEPRI, r3
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	f3bf 8f4f 	dsb	sy
 800ae2a:	61bb      	str	r3, [r7, #24]
}
 800ae2c:	bf00      	nop
 800ae2e:	bf00      	nop
 800ae30:	e7fd      	b.n	800ae2e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae32:	f001 fe49 	bl	800cac8 <vPortValidateInterruptPriority>
	__asm volatile
 800ae36:	f3ef 8211 	mrs	r2, BASEPRI
 800ae3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	617a      	str	r2, [r7, #20]
 800ae4c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ae4e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae50:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae56:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ae58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d22b      	bcs.n	800aeba <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ae62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae6e:	1c5a      	adds	r2, r3, #1
 800ae70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae72:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ae74:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ae78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7c:	d112      	bne.n	800aea4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d016      	beq.n	800aeb4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae88:	3324      	adds	r3, #36	@ 0x24
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f001 f820 	bl	800bed0 <xTaskRemoveFromEventList>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d00e      	beq.n	800aeb4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d00b      	beq.n	800aeb4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	601a      	str	r2, [r3, #0]
 800aea2:	e007      	b.n	800aeb4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aea4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aea8:	3301      	adds	r3, #1
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	b25a      	sxtb	r2, r3
 800aeae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aeb8:	e001      	b.n	800aebe <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aeba:	2300      	movs	r3, #0
 800aebc:	637b      	str	r3, [r7, #52]	@ 0x34
 800aebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aec0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f383 8811 	msr	BASEPRI, r3
}
 800aec8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aeca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3738      	adds	r7, #56	@ 0x38
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b08c      	sub	sp, #48	@ 0x30
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aee0:	2300      	movs	r3, #0
 800aee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d10b      	bne.n	800af06 <xQueueReceive+0x32>
	__asm volatile
 800aeee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	623b      	str	r3, [r7, #32]
}
 800af00:	bf00      	nop
 800af02:	bf00      	nop
 800af04:	e7fd      	b.n	800af02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d103      	bne.n	800af14 <xQueueReceive+0x40>
 800af0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af10:	2b00      	cmp	r3, #0
 800af12:	d101      	bne.n	800af18 <xQueueReceive+0x44>
 800af14:	2301      	movs	r3, #1
 800af16:	e000      	b.n	800af1a <xQueueReceive+0x46>
 800af18:	2300      	movs	r3, #0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10b      	bne.n	800af36 <xQueueReceive+0x62>
	__asm volatile
 800af1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af22:	f383 8811 	msr	BASEPRI, r3
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	f3bf 8f4f 	dsb	sy
 800af2e:	61fb      	str	r3, [r7, #28]
}
 800af30:	bf00      	nop
 800af32:	bf00      	nop
 800af34:	e7fd      	b.n	800af32 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af36:	f001 f991 	bl	800c25c <xTaskGetSchedulerState>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d102      	bne.n	800af46 <xQueueReceive+0x72>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d101      	bne.n	800af4a <xQueueReceive+0x76>
 800af46:	2301      	movs	r3, #1
 800af48:	e000      	b.n	800af4c <xQueueReceive+0x78>
 800af4a:	2300      	movs	r3, #0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d10b      	bne.n	800af68 <xQueueReceive+0x94>
	__asm volatile
 800af50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af54:	f383 8811 	msr	BASEPRI, r3
 800af58:	f3bf 8f6f 	isb	sy
 800af5c:	f3bf 8f4f 	dsb	sy
 800af60:	61bb      	str	r3, [r7, #24]
}
 800af62:	bf00      	nop
 800af64:	bf00      	nop
 800af66:	e7fd      	b.n	800af64 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af68:	f001 fcce 	bl	800c908 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af70:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af74:	2b00      	cmp	r3, #0
 800af76:	d01f      	beq.n	800afb8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af78:	68b9      	ldr	r1, [r7, #8]
 800af7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af7c:	f000 faa0 	bl	800b4c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af82:	1e5a      	subs	r2, r3, #1
 800af84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af86:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af8a:	691b      	ldr	r3, [r3, #16]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00f      	beq.n	800afb0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af92:	3310      	adds	r3, #16
 800af94:	4618      	mov	r0, r3
 800af96:	f000 ff9b 	bl	800bed0 <xTaskRemoveFromEventList>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d007      	beq.n	800afb0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800afa0:	4b3c      	ldr	r3, [pc, #240]	@ (800b094 <xQueueReceive+0x1c0>)
 800afa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afa6:	601a      	str	r2, [r3, #0]
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800afb0:	f001 fcdc 	bl	800c96c <vPortExitCritical>
				return pdPASS;
 800afb4:	2301      	movs	r3, #1
 800afb6:	e069      	b.n	800b08c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d103      	bne.n	800afc6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800afbe:	f001 fcd5 	bl	800c96c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800afc2:	2300      	movs	r3, #0
 800afc4:	e062      	b.n	800b08c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800afc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d106      	bne.n	800afda <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800afcc:	f107 0310 	add.w	r3, r7, #16
 800afd0:	4618      	mov	r0, r3
 800afd2:	f000 ffe1 	bl	800bf98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800afd6:	2301      	movs	r3, #1
 800afd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800afda:	f001 fcc7 	bl	800c96c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800afde:	f000 fd65 	bl	800baac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800afe2:	f001 fc91 	bl	800c908 <vPortEnterCritical>
 800afe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800afec:	b25b      	sxtb	r3, r3
 800afee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff2:	d103      	bne.n	800affc <xQueueReceive+0x128>
 800aff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aff6:	2200      	movs	r2, #0
 800aff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800affc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800affe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b002:	b25b      	sxtb	r3, r3
 800b004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b008:	d103      	bne.n	800b012 <xQueueReceive+0x13e>
 800b00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b00c:	2200      	movs	r2, #0
 800b00e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b012:	f001 fcab 	bl	800c96c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b016:	1d3a      	adds	r2, r7, #4
 800b018:	f107 0310 	add.w	r3, r7, #16
 800b01c:	4611      	mov	r1, r2
 800b01e:	4618      	mov	r0, r3
 800b020:	f000 ffd0 	bl	800bfc4 <xTaskCheckForTimeOut>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d123      	bne.n	800b072 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b02a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b02c:	f000 fac0 	bl	800b5b0 <prvIsQueueEmpty>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d017      	beq.n	800b066 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b038:	3324      	adds	r3, #36	@ 0x24
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	4611      	mov	r1, r2
 800b03e:	4618      	mov	r0, r3
 800b040:	f000 ff20 	bl	800be84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b044:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b046:	f000 fa61 	bl	800b50c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b04a:	f000 fd3d 	bl	800bac8 <xTaskResumeAll>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d189      	bne.n	800af68 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b054:	4b0f      	ldr	r3, [pc, #60]	@ (800b094 <xQueueReceive+0x1c0>)
 800b056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b05a:	601a      	str	r2, [r3, #0]
 800b05c:	f3bf 8f4f 	dsb	sy
 800b060:	f3bf 8f6f 	isb	sy
 800b064:	e780      	b.n	800af68 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b066:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b068:	f000 fa50 	bl	800b50c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b06c:	f000 fd2c 	bl	800bac8 <xTaskResumeAll>
 800b070:	e77a      	b.n	800af68 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b072:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b074:	f000 fa4a 	bl	800b50c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b078:	f000 fd26 	bl	800bac8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b07c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b07e:	f000 fa97 	bl	800b5b0 <prvIsQueueEmpty>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	f43f af6f 	beq.w	800af68 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b08a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3730      	adds	r7, #48	@ 0x30
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	e000ed04 	.word	0xe000ed04

0800b098 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b08e      	sub	sp, #56	@ 0x38
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b0ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10b      	bne.n	800b0cc <xQueueSemaphoreTake+0x34>
	__asm volatile
 800b0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	623b      	str	r3, [r7, #32]
}
 800b0c6:	bf00      	nop
 800b0c8:	bf00      	nop
 800b0ca:	e7fd      	b.n	800b0c8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00b      	beq.n	800b0ec <xQueueSemaphoreTake+0x54>
	__asm volatile
 800b0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d8:	f383 8811 	msr	BASEPRI, r3
 800b0dc:	f3bf 8f6f 	isb	sy
 800b0e0:	f3bf 8f4f 	dsb	sy
 800b0e4:	61fb      	str	r3, [r7, #28]
}
 800b0e6:	bf00      	nop
 800b0e8:	bf00      	nop
 800b0ea:	e7fd      	b.n	800b0e8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0ec:	f001 f8b6 	bl	800c25c <xTaskGetSchedulerState>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d102      	bne.n	800b0fc <xQueueSemaphoreTake+0x64>
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d101      	bne.n	800b100 <xQueueSemaphoreTake+0x68>
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e000      	b.n	800b102 <xQueueSemaphoreTake+0x6a>
 800b100:	2300      	movs	r3, #0
 800b102:	2b00      	cmp	r3, #0
 800b104:	d10b      	bne.n	800b11e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800b106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b10a:	f383 8811 	msr	BASEPRI, r3
 800b10e:	f3bf 8f6f 	isb	sy
 800b112:	f3bf 8f4f 	dsb	sy
 800b116:	61bb      	str	r3, [r7, #24]
}
 800b118:	bf00      	nop
 800b11a:	bf00      	nop
 800b11c:	e7fd      	b.n	800b11a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b11e:	f001 fbf3 	bl	800c908 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b126:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d024      	beq.n	800b178 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b130:	1e5a      	subs	r2, r3, #1
 800b132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b134:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d104      	bne.n	800b148 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b13e:	f001 fa39 	bl	800c5b4 <pvTaskIncrementMutexHeldCount>
 800b142:	4602      	mov	r2, r0
 800b144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b146:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00f      	beq.n	800b170 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b152:	3310      	adds	r3, #16
 800b154:	4618      	mov	r0, r3
 800b156:	f000 febb 	bl	800bed0 <xTaskRemoveFromEventList>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d007      	beq.n	800b170 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b160:	4b54      	ldr	r3, [pc, #336]	@ (800b2b4 <xQueueSemaphoreTake+0x21c>)
 800b162:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b166:	601a      	str	r2, [r3, #0]
 800b168:	f3bf 8f4f 	dsb	sy
 800b16c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b170:	f001 fbfc 	bl	800c96c <vPortExitCritical>
				return pdPASS;
 800b174:	2301      	movs	r3, #1
 800b176:	e098      	b.n	800b2aa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d112      	bne.n	800b1a4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b180:	2b00      	cmp	r3, #0
 800b182:	d00b      	beq.n	800b19c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800b184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b188:	f383 8811 	msr	BASEPRI, r3
 800b18c:	f3bf 8f6f 	isb	sy
 800b190:	f3bf 8f4f 	dsb	sy
 800b194:	617b      	str	r3, [r7, #20]
}
 800b196:	bf00      	nop
 800b198:	bf00      	nop
 800b19a:	e7fd      	b.n	800b198 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b19c:	f001 fbe6 	bl	800c96c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	e082      	b.n	800b2aa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d106      	bne.n	800b1b8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b1aa:	f107 030c 	add.w	r3, r7, #12
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f000 fef2 	bl	800bf98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b1b8:	f001 fbd8 	bl	800c96c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b1bc:	f000 fc76 	bl	800baac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b1c0:	f001 fba2 	bl	800c908 <vPortEnterCritical>
 800b1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b1ca:	b25b      	sxtb	r3, r3
 800b1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d0:	d103      	bne.n	800b1da <xQueueSemaphoreTake+0x142>
 800b1d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b1e0:	b25b      	sxtb	r3, r3
 800b1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e6:	d103      	bne.n	800b1f0 <xQueueSemaphoreTake+0x158>
 800b1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b1f0:	f001 fbbc 	bl	800c96c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1f4:	463a      	mov	r2, r7
 800b1f6:	f107 030c 	add.w	r3, r7, #12
 800b1fa:	4611      	mov	r1, r2
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f000 fee1 	bl	800bfc4 <xTaskCheckForTimeOut>
 800b202:	4603      	mov	r3, r0
 800b204:	2b00      	cmp	r3, #0
 800b206:	d132      	bne.n	800b26e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b208:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b20a:	f000 f9d1 	bl	800b5b0 <prvIsQueueEmpty>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d026      	beq.n	800b262 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d109      	bne.n	800b230 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800b21c:	f001 fb74 	bl	800c908 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	4618      	mov	r0, r3
 800b226:	f001 f837 	bl	800c298 <xTaskPriorityInherit>
 800b22a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800b22c:	f001 fb9e 	bl	800c96c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b232:	3324      	adds	r3, #36	@ 0x24
 800b234:	683a      	ldr	r2, [r7, #0]
 800b236:	4611      	mov	r1, r2
 800b238:	4618      	mov	r0, r3
 800b23a:	f000 fe23 	bl	800be84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b23e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b240:	f000 f964 	bl	800b50c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b244:	f000 fc40 	bl	800bac8 <xTaskResumeAll>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f47f af67 	bne.w	800b11e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800b250:	4b18      	ldr	r3, [pc, #96]	@ (800b2b4 <xQueueSemaphoreTake+0x21c>)
 800b252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b256:	601a      	str	r2, [r3, #0]
 800b258:	f3bf 8f4f 	dsb	sy
 800b25c:	f3bf 8f6f 	isb	sy
 800b260:	e75d      	b.n	800b11e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b262:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b264:	f000 f952 	bl	800b50c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b268:	f000 fc2e 	bl	800bac8 <xTaskResumeAll>
 800b26c:	e757      	b.n	800b11e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b26e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b270:	f000 f94c 	bl	800b50c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b274:	f000 fc28 	bl	800bac8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b278:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b27a:	f000 f999 	bl	800b5b0 <prvIsQueueEmpty>
 800b27e:	4603      	mov	r3, r0
 800b280:	2b00      	cmp	r3, #0
 800b282:	f43f af4c 	beq.w	800b11e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d00d      	beq.n	800b2a8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800b28c:	f001 fb3c 	bl	800c908 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b290:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b292:	f000 f893 	bl	800b3bc <prvGetDisinheritPriorityAfterTimeout>
 800b296:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b29a:	689b      	ldr	r3, [r3, #8]
 800b29c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f001 f8f8 	bl	800c494 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b2a4:	f001 fb62 	bl	800c96c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b2a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3738      	adds	r7, #56	@ 0x38
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	e000ed04 	.word	0xe000ed04

0800b2b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b08e      	sub	sp, #56	@ 0x38
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10b      	bne.n	800b2e6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	623b      	str	r3, [r7, #32]
}
 800b2e0:	bf00      	nop
 800b2e2:	bf00      	nop
 800b2e4:	e7fd      	b.n	800b2e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d103      	bne.n	800b2f4 <xQueueReceiveFromISR+0x3c>
 800b2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d101      	bne.n	800b2f8 <xQueueReceiveFromISR+0x40>
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e000      	b.n	800b2fa <xQueueReceiveFromISR+0x42>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d10b      	bne.n	800b316 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b302:	f383 8811 	msr	BASEPRI, r3
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	61fb      	str	r3, [r7, #28]
}
 800b310:	bf00      	nop
 800b312:	bf00      	nop
 800b314:	e7fd      	b.n	800b312 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b316:	f001 fbd7 	bl	800cac8 <vPortValidateInterruptPriority>
	__asm volatile
 800b31a:	f3ef 8211 	mrs	r2, BASEPRI
 800b31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	61ba      	str	r2, [r7, #24]
 800b330:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b332:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b334:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b33a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d02f      	beq.n	800b3a2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b344:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b34c:	68b9      	ldr	r1, [r7, #8]
 800b34e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b350:	f000 f8b6 	bl	800b4c0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b356:	1e5a      	subs	r2, r3, #1
 800b358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b35a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b35c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b360:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b364:	d112      	bne.n	800b38c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b368:	691b      	ldr	r3, [r3, #16]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d016      	beq.n	800b39c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b370:	3310      	adds	r3, #16
 800b372:	4618      	mov	r0, r3
 800b374:	f000 fdac 	bl	800bed0 <xTaskRemoveFromEventList>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00e      	beq.n	800b39c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00b      	beq.n	800b39c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	601a      	str	r2, [r3, #0]
 800b38a:	e007      	b.n	800b39c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b38c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b390:	3301      	adds	r3, #1
 800b392:	b2db      	uxtb	r3, r3
 800b394:	b25a      	sxtb	r2, r3
 800b396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b39c:	2301      	movs	r3, #1
 800b39e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3a0:	e001      	b.n	800b3a6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	f383 8811 	msr	BASEPRI, r3
}
 800b3b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b3b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3738      	adds	r7, #56	@ 0x38
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d006      	beq.n	800b3da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f1c3 0307 	rsb	r3, r3, #7
 800b3d6:	60fb      	str	r3, [r7, #12]
 800b3d8:	e001      	b.n	800b3de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b3de:	68fb      	ldr	r3, [r7, #12]
	}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3714      	adds	r7, #20
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b400:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b406:	2b00      	cmp	r3, #0
 800b408:	d10d      	bne.n	800b426 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d14d      	bne.n	800b4ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	4618      	mov	r0, r3
 800b418:	f000 ffb4 	bl	800c384 <xTaskPriorityDisinherit>
 800b41c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2200      	movs	r2, #0
 800b422:	609a      	str	r2, [r3, #8]
 800b424:	e043      	b.n	800b4ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d119      	bne.n	800b460 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	6858      	ldr	r0, [r3, #4]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b434:	461a      	mov	r2, r3
 800b436:	68b9      	ldr	r1, [r7, #8]
 800b438:	f00e fbb9 	bl	8019bae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	685a      	ldr	r2, [r3, #4]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b444:	441a      	add	r2, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	685a      	ldr	r2, [r3, #4]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	429a      	cmp	r2, r3
 800b454:	d32b      	bcc.n	800b4ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	605a      	str	r2, [r3, #4]
 800b45e:	e026      	b.n	800b4ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	68d8      	ldr	r0, [r3, #12]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b468:	461a      	mov	r2, r3
 800b46a:	68b9      	ldr	r1, [r7, #8]
 800b46c:	f00e fb9f 	bl	8019bae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	68da      	ldr	r2, [r3, #12]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b478:	425b      	negs	r3, r3
 800b47a:	441a      	add	r2, r3
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	68da      	ldr	r2, [r3, #12]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d207      	bcs.n	800b49c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	689a      	ldr	r2, [r3, #8]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b494:	425b      	negs	r3, r3
 800b496:	441a      	add	r2, r3
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d105      	bne.n	800b4ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d002      	beq.n	800b4ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	1c5a      	adds	r2, r3, #1
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b4b6:	697b      	ldr	r3, [r7, #20]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3718      	adds	r7, #24
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d018      	beq.n	800b504 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	68da      	ldr	r2, [r3, #12]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4da:	441a      	add	r2, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	68da      	ldr	r2, [r3, #12]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d303      	bcc.n	800b4f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	68d9      	ldr	r1, [r3, #12]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	6838      	ldr	r0, [r7, #0]
 800b500:	f00e fb55 	bl	8019bae <memcpy>
	}
}
 800b504:	bf00      	nop
 800b506:	3708      	adds	r7, #8
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b514:	f001 f9f8 	bl	800c908 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b51e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b520:	e011      	b.n	800b546 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b526:	2b00      	cmp	r3, #0
 800b528:	d012      	beq.n	800b550 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	3324      	adds	r3, #36	@ 0x24
 800b52e:	4618      	mov	r0, r3
 800b530:	f000 fcce 	bl	800bed0 <xTaskRemoveFromEventList>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d001      	beq.n	800b53e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b53a:	f000 fda7 	bl	800c08c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b53e:	7bfb      	ldrb	r3, [r7, #15]
 800b540:	3b01      	subs	r3, #1
 800b542:	b2db      	uxtb	r3, r3
 800b544:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	dce9      	bgt.n	800b522 <prvUnlockQueue+0x16>
 800b54e:	e000      	b.n	800b552 <prvUnlockQueue+0x46>
					break;
 800b550:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	22ff      	movs	r2, #255	@ 0xff
 800b556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b55a:	f001 fa07 	bl	800c96c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b55e:	f001 f9d3 	bl	800c908 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b568:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b56a:	e011      	b.n	800b590 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	691b      	ldr	r3, [r3, #16]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d012      	beq.n	800b59a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	3310      	adds	r3, #16
 800b578:	4618      	mov	r0, r3
 800b57a:	f000 fca9 	bl	800bed0 <xTaskRemoveFromEventList>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d001      	beq.n	800b588 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b584:	f000 fd82 	bl	800c08c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b588:	7bbb      	ldrb	r3, [r7, #14]
 800b58a:	3b01      	subs	r3, #1
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b594:	2b00      	cmp	r3, #0
 800b596:	dce9      	bgt.n	800b56c <prvUnlockQueue+0x60>
 800b598:	e000      	b.n	800b59c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b59a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	22ff      	movs	r2, #255	@ 0xff
 800b5a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b5a4:	f001 f9e2 	bl	800c96c <vPortExitCritical>
}
 800b5a8:	bf00      	nop
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b5b8:	f001 f9a6 	bl	800c908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d102      	bne.n	800b5ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	60fb      	str	r3, [r7, #12]
 800b5c8:	e001      	b.n	800b5ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b5ce:	f001 f9cd 	bl	800c96c <vPortExitCritical>

	return xReturn;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b5e4:	f001 f990 	bl	800c908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d102      	bne.n	800b5fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	60fb      	str	r3, [r7, #12]
 800b5f8:	e001      	b.n	800b5fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b5fe:	f001 f9b5 	bl	800c96c <vPortExitCritical>

	return xReturn;
 800b602:	68fb      	ldr	r3, [r7, #12]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b08e      	sub	sp, #56	@ 0x38
 800b610:	af04      	add	r7, sp, #16
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	607a      	str	r2, [r7, #4]
 800b618:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b61a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d10b      	bne.n	800b638 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b624:	f383 8811 	msr	BASEPRI, r3
 800b628:	f3bf 8f6f 	isb	sy
 800b62c:	f3bf 8f4f 	dsb	sy
 800b630:	623b      	str	r3, [r7, #32]
}
 800b632:	bf00      	nop
 800b634:	bf00      	nop
 800b636:	e7fd      	b.n	800b634 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d10b      	bne.n	800b656 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b642:	f383 8811 	msr	BASEPRI, r3
 800b646:	f3bf 8f6f 	isb	sy
 800b64a:	f3bf 8f4f 	dsb	sy
 800b64e:	61fb      	str	r3, [r7, #28]
}
 800b650:	bf00      	nop
 800b652:	bf00      	nop
 800b654:	e7fd      	b.n	800b652 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b656:	23a0      	movs	r3, #160	@ 0xa0
 800b658:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	2ba0      	cmp	r3, #160	@ 0xa0
 800b65e:	d00b      	beq.n	800b678 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b664:	f383 8811 	msr	BASEPRI, r3
 800b668:	f3bf 8f6f 	isb	sy
 800b66c:	f3bf 8f4f 	dsb	sy
 800b670:	61bb      	str	r3, [r7, #24]
}
 800b672:	bf00      	nop
 800b674:	bf00      	nop
 800b676:	e7fd      	b.n	800b674 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b678:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d01e      	beq.n	800b6be <xTaskCreateStatic+0xb2>
 800b680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b682:	2b00      	cmp	r3, #0
 800b684:	d01b      	beq.n	800b6be <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b688:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b68c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b68e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b692:	2202      	movs	r2, #2
 800b694:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b698:	2300      	movs	r3, #0
 800b69a:	9303      	str	r3, [sp, #12]
 800b69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b69e:	9302      	str	r3, [sp, #8]
 800b6a0:	f107 0314 	add.w	r3, r7, #20
 800b6a4:	9301      	str	r3, [sp, #4]
 800b6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	68b9      	ldr	r1, [r7, #8]
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f000 f851 	bl	800b758 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b6b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b6b8:	f000 f8ee 	bl	800b898 <prvAddNewTaskToReadyList>
 800b6bc:	e001      	b.n	800b6c2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b6c2:	697b      	ldr	r3, [r7, #20]
	}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3728      	adds	r7, #40	@ 0x28
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b08c      	sub	sp, #48	@ 0x30
 800b6d0:	af04      	add	r7, sp, #16
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	603b      	str	r3, [r7, #0]
 800b6d8:	4613      	mov	r3, r2
 800b6da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b6dc:	88fb      	ldrh	r3, [r7, #6]
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f001 fa33 	bl	800cb4c <pvPortMalloc>
 800b6e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00e      	beq.n	800b70c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b6ee:	20a0      	movs	r0, #160	@ 0xa0
 800b6f0:	f001 fa2c 	bl	800cb4c <pvPortMalloc>
 800b6f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d003      	beq.n	800b704 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	697a      	ldr	r2, [r7, #20]
 800b700:	631a      	str	r2, [r3, #48]	@ 0x30
 800b702:	e005      	b.n	800b710 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b704:	6978      	ldr	r0, [r7, #20]
 800b706:	f001 faef 	bl	800cce8 <vPortFree>
 800b70a:	e001      	b.n	800b710 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b70c:	2300      	movs	r3, #0
 800b70e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d017      	beq.n	800b746 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	2200      	movs	r2, #0
 800b71a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b71e:	88fa      	ldrh	r2, [r7, #6]
 800b720:	2300      	movs	r3, #0
 800b722:	9303      	str	r3, [sp, #12]
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	9302      	str	r3, [sp, #8]
 800b728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b72a:	9301      	str	r3, [sp, #4]
 800b72c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b72e:	9300      	str	r3, [sp, #0]
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	68b9      	ldr	r1, [r7, #8]
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	f000 f80f 	bl	800b758 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b73a:	69f8      	ldr	r0, [r7, #28]
 800b73c:	f000 f8ac 	bl	800b898 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b740:	2301      	movs	r3, #1
 800b742:	61bb      	str	r3, [r7, #24]
 800b744:	e002      	b.n	800b74c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b746:	f04f 33ff 	mov.w	r3, #4294967295
 800b74a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b74c:	69bb      	ldr	r3, [r7, #24]
	}
 800b74e:	4618      	mov	r0, r3
 800b750:	3720      	adds	r7, #32
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
	...

0800b758 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b088      	sub	sp, #32
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	607a      	str	r2, [r7, #4]
 800b764:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b768:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b770:	3b01      	subs	r3, #1
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	4413      	add	r3, r2
 800b776:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	f023 0307 	bic.w	r3, r3, #7
 800b77e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	f003 0307 	and.w	r3, r3, #7
 800b786:	2b00      	cmp	r3, #0
 800b788:	d00b      	beq.n	800b7a2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800b78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b78e:	f383 8811 	msr	BASEPRI, r3
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	f3bf 8f4f 	dsb	sy
 800b79a:	617b      	str	r3, [r7, #20]
}
 800b79c:	bf00      	nop
 800b79e:	bf00      	nop
 800b7a0:	e7fd      	b.n	800b79e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d01f      	beq.n	800b7e8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	61fb      	str	r3, [r7, #28]
 800b7ac:	e012      	b.n	800b7d4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	4413      	add	r3, r2
 800b7b4:	7819      	ldrb	r1, [r3, #0]
 800b7b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	3334      	adds	r3, #52	@ 0x34
 800b7be:	460a      	mov	r2, r1
 800b7c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b7c2:	68ba      	ldr	r2, [r7, #8]
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	4413      	add	r3, r2
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d006      	beq.n	800b7dc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	61fb      	str	r3, [r7, #28]
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	2b0f      	cmp	r3, #15
 800b7d8:	d9e9      	bls.n	800b7ae <prvInitialiseNewTask+0x56>
 800b7da:	e000      	b.n	800b7de <prvInitialiseNewTask+0x86>
			{
				break;
 800b7dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b7e6:	e003      	b.n	800b7f0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f2:	2b06      	cmp	r3, #6
 800b7f4:	d901      	bls.n	800b7fa <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b7f6:	2306      	movs	r3, #6
 800b7f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b7fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b804:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b808:	2200      	movs	r2, #0
 800b80a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b80e:	3304      	adds	r3, #4
 800b810:	4618      	mov	r0, r3
 800b812:	f7fe ff0d 	bl	800a630 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b818:	3318      	adds	r3, #24
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7fe ff08 	bl	800a630 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b824:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b828:	f1c3 0207 	rsb	r2, r3, #7
 800b82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b82e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b834:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b838:	2200      	movs	r2, #0
 800b83a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b840:	2200      	movs	r2, #0
 800b842:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b848:	334c      	adds	r3, #76	@ 0x4c
 800b84a:	224c      	movs	r2, #76	@ 0x4c
 800b84c:	2100      	movs	r1, #0
 800b84e:	4618      	mov	r0, r3
 800b850:	f00e f8da 	bl	8019a08 <memset>
 800b854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b856:	4a0d      	ldr	r2, [pc, #52]	@ (800b88c <prvInitialiseNewTask+0x134>)
 800b858:	651a      	str	r2, [r3, #80]	@ 0x50
 800b85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b85c:	4a0c      	ldr	r2, [pc, #48]	@ (800b890 <prvInitialiseNewTask+0x138>)
 800b85e:	655a      	str	r2, [r3, #84]	@ 0x54
 800b860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b862:	4a0c      	ldr	r2, [pc, #48]	@ (800b894 <prvInitialiseNewTask+0x13c>)
 800b864:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b866:	683a      	ldr	r2, [r7, #0]
 800b868:	68f9      	ldr	r1, [r7, #12]
 800b86a:	69b8      	ldr	r0, [r7, #24]
 800b86c:	f000 ff1c 	bl	800c6a8 <pxPortInitialiseStack>
 800b870:	4602      	mov	r2, r0
 800b872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b874:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d002      	beq.n	800b882 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b87e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b880:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b882:	bf00      	nop
 800b884:	3720      	adds	r7, #32
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	200108c0 	.word	0x200108c0
 800b890:	20010928 	.word	0x20010928
 800b894:	20010990 	.word	0x20010990

0800b898 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b8a0:	f001 f832 	bl	800c908 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b8a4:	4b2a      	ldr	r3, [pc, #168]	@ (800b950 <prvAddNewTaskToReadyList+0xb8>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	4a29      	ldr	r2, [pc, #164]	@ (800b950 <prvAddNewTaskToReadyList+0xb8>)
 800b8ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b8ae:	4b29      	ldr	r3, [pc, #164]	@ (800b954 <prvAddNewTaskToReadyList+0xbc>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d109      	bne.n	800b8ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b8b6:	4a27      	ldr	r2, [pc, #156]	@ (800b954 <prvAddNewTaskToReadyList+0xbc>)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b8bc:	4b24      	ldr	r3, [pc, #144]	@ (800b950 <prvAddNewTaskToReadyList+0xb8>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d110      	bne.n	800b8e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b8c4:	f000 fc06 	bl	800c0d4 <prvInitialiseTaskLists>
 800b8c8:	e00d      	b.n	800b8e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b8ca:	4b23      	ldr	r3, [pc, #140]	@ (800b958 <prvAddNewTaskToReadyList+0xc0>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d109      	bne.n	800b8e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b8d2:	4b20      	ldr	r3, [pc, #128]	@ (800b954 <prvAddNewTaskToReadyList+0xbc>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d802      	bhi.n	800b8e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b8e0:	4a1c      	ldr	r2, [pc, #112]	@ (800b954 <prvAddNewTaskToReadyList+0xbc>)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b8e6:	4b1d      	ldr	r3, [pc, #116]	@ (800b95c <prvAddNewTaskToReadyList+0xc4>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	4a1b      	ldr	r2, [pc, #108]	@ (800b95c <prvAddNewTaskToReadyList+0xc4>)
 800b8ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	409a      	lsls	r2, r3
 800b8f8:	4b19      	ldr	r3, [pc, #100]	@ (800b960 <prvAddNewTaskToReadyList+0xc8>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	4a18      	ldr	r2, [pc, #96]	@ (800b960 <prvAddNewTaskToReadyList+0xc8>)
 800b900:	6013      	str	r3, [r2, #0]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b906:	4613      	mov	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	4413      	add	r3, r2
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	4a15      	ldr	r2, [pc, #84]	@ (800b964 <prvAddNewTaskToReadyList+0xcc>)
 800b910:	441a      	add	r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	3304      	adds	r3, #4
 800b916:	4619      	mov	r1, r3
 800b918:	4610      	mov	r0, r2
 800b91a:	f7fe fe96 	bl	800a64a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b91e:	f001 f825 	bl	800c96c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b922:	4b0d      	ldr	r3, [pc, #52]	@ (800b958 <prvAddNewTaskToReadyList+0xc0>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00e      	beq.n	800b948 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b92a:	4b0a      	ldr	r3, [pc, #40]	@ (800b954 <prvAddNewTaskToReadyList+0xbc>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b934:	429a      	cmp	r2, r3
 800b936:	d207      	bcs.n	800b948 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b938:	4b0b      	ldr	r3, [pc, #44]	@ (800b968 <prvAddNewTaskToReadyList+0xd0>)
 800b93a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b93e:	601a      	str	r2, [r3, #0]
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b948:	bf00      	nop
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	200052fc 	.word	0x200052fc
 800b954:	200051fc 	.word	0x200051fc
 800b958:	20005308 	.word	0x20005308
 800b95c:	20005318 	.word	0x20005318
 800b960:	20005304 	.word	0x20005304
 800b964:	20005200 	.word	0x20005200
 800b968:	e000ed04 	.word	0xe000ed04

0800b96c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b974:	2300      	movs	r3, #0
 800b976:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d018      	beq.n	800b9b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b97e:	4b14      	ldr	r3, [pc, #80]	@ (800b9d0 <vTaskDelay+0x64>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00b      	beq.n	800b99e <vTaskDelay+0x32>
	__asm volatile
 800b986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b98a:	f383 8811 	msr	BASEPRI, r3
 800b98e:	f3bf 8f6f 	isb	sy
 800b992:	f3bf 8f4f 	dsb	sy
 800b996:	60bb      	str	r3, [r7, #8]
}
 800b998:	bf00      	nop
 800b99a:	bf00      	nop
 800b99c:	e7fd      	b.n	800b99a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b99e:	f000 f885 	bl	800baac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b9a2:	2100      	movs	r1, #0
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 fe19 	bl	800c5dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b9aa:	f000 f88d 	bl	800bac8 <xTaskResumeAll>
 800b9ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d107      	bne.n	800b9c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b9b6:	4b07      	ldr	r3, [pc, #28]	@ (800b9d4 <vTaskDelay+0x68>)
 800b9b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9bc:	601a      	str	r2, [r3, #0]
 800b9be:	f3bf 8f4f 	dsb	sy
 800b9c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9c6:	bf00      	nop
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	20005324 	.word	0x20005324
 800b9d4:	e000ed04 	.word	0xe000ed04

0800b9d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b08a      	sub	sp, #40	@ 0x28
 800b9dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b9e6:	463a      	mov	r2, r7
 800b9e8:	1d39      	adds	r1, r7, #4
 800b9ea:	f107 0308 	add.w	r3, r7, #8
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7f4 fddc 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b9f4:	6839      	ldr	r1, [r7, #0]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	68ba      	ldr	r2, [r7, #8]
 800b9fa:	9202      	str	r2, [sp, #8]
 800b9fc:	9301      	str	r3, [sp, #4]
 800b9fe:	2300      	movs	r3, #0
 800ba00:	9300      	str	r3, [sp, #0]
 800ba02:	2300      	movs	r3, #0
 800ba04:	460a      	mov	r2, r1
 800ba06:	4921      	ldr	r1, [pc, #132]	@ (800ba8c <vTaskStartScheduler+0xb4>)
 800ba08:	4821      	ldr	r0, [pc, #132]	@ (800ba90 <vTaskStartScheduler+0xb8>)
 800ba0a:	f7ff fdff 	bl	800b60c <xTaskCreateStatic>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	4a20      	ldr	r2, [pc, #128]	@ (800ba94 <vTaskStartScheduler+0xbc>)
 800ba12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ba14:	4b1f      	ldr	r3, [pc, #124]	@ (800ba94 <vTaskStartScheduler+0xbc>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d002      	beq.n	800ba22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	617b      	str	r3, [r7, #20]
 800ba20:	e001      	b.n	800ba26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ba22:	2300      	movs	r3, #0
 800ba24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d11b      	bne.n	800ba64 <vTaskStartScheduler+0x8c>
	__asm volatile
 800ba2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba30:	f383 8811 	msr	BASEPRI, r3
 800ba34:	f3bf 8f6f 	isb	sy
 800ba38:	f3bf 8f4f 	dsb	sy
 800ba3c:	613b      	str	r3, [r7, #16]
}
 800ba3e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ba40:	4b15      	ldr	r3, [pc, #84]	@ (800ba98 <vTaskStartScheduler+0xc0>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	334c      	adds	r3, #76	@ 0x4c
 800ba46:	4a15      	ldr	r2, [pc, #84]	@ (800ba9c <vTaskStartScheduler+0xc4>)
 800ba48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ba4a:	4b15      	ldr	r3, [pc, #84]	@ (800baa0 <vTaskStartScheduler+0xc8>)
 800ba4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ba52:	4b14      	ldr	r3, [pc, #80]	@ (800baa4 <vTaskStartScheduler+0xcc>)
 800ba54:	2201      	movs	r2, #1
 800ba56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ba58:	4b13      	ldr	r3, [pc, #76]	@ (800baa8 <vTaskStartScheduler+0xd0>)
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ba5e:	f000 feaf 	bl	800c7c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ba62:	e00f      	b.n	800ba84 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6a:	d10b      	bne.n	800ba84 <vTaskStartScheduler+0xac>
	__asm volatile
 800ba6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba70:	f383 8811 	msr	BASEPRI, r3
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	60fb      	str	r3, [r7, #12]
}
 800ba7e:	bf00      	nop
 800ba80:	bf00      	nop
 800ba82:	e7fd      	b.n	800ba80 <vTaskStartScheduler+0xa8>
}
 800ba84:	bf00      	nop
 800ba86:	3718      	adds	r7, #24
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	0801b2ac 	.word	0x0801b2ac
 800ba90:	0800c0a5 	.word	0x0800c0a5
 800ba94:	20005320 	.word	0x20005320
 800ba98:	200051fc 	.word	0x200051fc
 800ba9c:	2000012c 	.word	0x2000012c
 800baa0:	2000531c 	.word	0x2000531c
 800baa4:	20005308 	.word	0x20005308
 800baa8:	20005300 	.word	0x20005300

0800baac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800baac:	b480      	push	{r7}
 800baae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bab0:	4b04      	ldr	r3, [pc, #16]	@ (800bac4 <vTaskSuspendAll+0x18>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	3301      	adds	r3, #1
 800bab6:	4a03      	ldr	r2, [pc, #12]	@ (800bac4 <vTaskSuspendAll+0x18>)
 800bab8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800baba:	bf00      	nop
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr
 800bac4:	20005324 	.word	0x20005324

0800bac8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bace:	2300      	movs	r3, #0
 800bad0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bad2:	2300      	movs	r3, #0
 800bad4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bad6:	4b42      	ldr	r3, [pc, #264]	@ (800bbe0 <xTaskResumeAll+0x118>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d10b      	bne.n	800baf6 <xTaskResumeAll+0x2e>
	__asm volatile
 800bade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae2:	f383 8811 	msr	BASEPRI, r3
 800bae6:	f3bf 8f6f 	isb	sy
 800baea:	f3bf 8f4f 	dsb	sy
 800baee:	603b      	str	r3, [r7, #0]
}
 800baf0:	bf00      	nop
 800baf2:	bf00      	nop
 800baf4:	e7fd      	b.n	800baf2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800baf6:	f000 ff07 	bl	800c908 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bafa:	4b39      	ldr	r3, [pc, #228]	@ (800bbe0 <xTaskResumeAll+0x118>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	3b01      	subs	r3, #1
 800bb00:	4a37      	ldr	r2, [pc, #220]	@ (800bbe0 <xTaskResumeAll+0x118>)
 800bb02:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb04:	4b36      	ldr	r3, [pc, #216]	@ (800bbe0 <xTaskResumeAll+0x118>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d161      	bne.n	800bbd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bb0c:	4b35      	ldr	r3, [pc, #212]	@ (800bbe4 <xTaskResumeAll+0x11c>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d05d      	beq.n	800bbd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb14:	e02e      	b.n	800bb74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb16:	4b34      	ldr	r3, [pc, #208]	@ (800bbe8 <xTaskResumeAll+0x120>)
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	3318      	adds	r3, #24
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7fe fdee 	bl	800a704 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	3304      	adds	r3, #4
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7fe fde9 	bl	800a704 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb36:	2201      	movs	r2, #1
 800bb38:	409a      	lsls	r2, r3
 800bb3a:	4b2c      	ldr	r3, [pc, #176]	@ (800bbec <xTaskResumeAll+0x124>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	4a2a      	ldr	r2, [pc, #168]	@ (800bbec <xTaskResumeAll+0x124>)
 800bb42:	6013      	str	r3, [r2, #0]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb48:	4613      	mov	r3, r2
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	4413      	add	r3, r2
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	4a27      	ldr	r2, [pc, #156]	@ (800bbf0 <xTaskResumeAll+0x128>)
 800bb52:	441a      	add	r2, r3
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	3304      	adds	r3, #4
 800bb58:	4619      	mov	r1, r3
 800bb5a:	4610      	mov	r0, r2
 800bb5c:	f7fe fd75 	bl	800a64a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb64:	4b23      	ldr	r3, [pc, #140]	@ (800bbf4 <xTaskResumeAll+0x12c>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d302      	bcc.n	800bb74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bb6e:	4b22      	ldr	r3, [pc, #136]	@ (800bbf8 <xTaskResumeAll+0x130>)
 800bb70:	2201      	movs	r2, #1
 800bb72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb74:	4b1c      	ldr	r3, [pc, #112]	@ (800bbe8 <xTaskResumeAll+0x120>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d1cc      	bne.n	800bb16 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d001      	beq.n	800bb86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bb82:	f000 fb4b 	bl	800c21c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bb86:	4b1d      	ldr	r3, [pc, #116]	@ (800bbfc <xTaskResumeAll+0x134>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d010      	beq.n	800bbb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bb92:	f000 f859 	bl	800bc48 <xTaskIncrementTick>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d002      	beq.n	800bba2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bb9c:	4b16      	ldr	r3, [pc, #88]	@ (800bbf8 <xTaskResumeAll+0x130>)
 800bb9e:	2201      	movs	r2, #1
 800bba0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	3b01      	subs	r3, #1
 800bba6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d1f1      	bne.n	800bb92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bbae:	4b13      	ldr	r3, [pc, #76]	@ (800bbfc <xTaskResumeAll+0x134>)
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bbb4:	4b10      	ldr	r3, [pc, #64]	@ (800bbf8 <xTaskResumeAll+0x130>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d009      	beq.n	800bbd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bbc0:	4b0f      	ldr	r3, [pc, #60]	@ (800bc00 <xTaskResumeAll+0x138>)
 800bbc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbc6:	601a      	str	r2, [r3, #0]
 800bbc8:	f3bf 8f4f 	dsb	sy
 800bbcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bbd0:	f000 fecc 	bl	800c96c <vPortExitCritical>

	return xAlreadyYielded;
 800bbd4:	68bb      	ldr	r3, [r7, #8]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	20005324 	.word	0x20005324
 800bbe4:	200052fc 	.word	0x200052fc
 800bbe8:	200052bc 	.word	0x200052bc
 800bbec:	20005304 	.word	0x20005304
 800bbf0:	20005200 	.word	0x20005200
 800bbf4:	200051fc 	.word	0x200051fc
 800bbf8:	20005310 	.word	0x20005310
 800bbfc:	2000530c 	.word	0x2000530c
 800bc00:	e000ed04 	.word	0xe000ed04

0800bc04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bc0a:	4b05      	ldr	r3, [pc, #20]	@ (800bc20 <xTaskGetTickCount+0x1c>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bc10:	687b      	ldr	r3, [r7, #4]
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	370c      	adds	r7, #12
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	20005300 	.word	0x20005300

0800bc24 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc2a:	f000 ff4d 	bl	800cac8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bc2e:	2300      	movs	r3, #0
 800bc30:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bc32:	4b04      	ldr	r3, [pc, #16]	@ (800bc44 <xTaskGetTickCountFromISR+0x20>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc38:	683b      	ldr	r3, [r7, #0]
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	20005300 	.word	0x20005300

0800bc48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b086      	sub	sp, #24
 800bc4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc52:	4b4f      	ldr	r3, [pc, #316]	@ (800bd90 <xTaskIncrementTick+0x148>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	f040 808f 	bne.w	800bd7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bc5c:	4b4d      	ldr	r3, [pc, #308]	@ (800bd94 <xTaskIncrementTick+0x14c>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	3301      	adds	r3, #1
 800bc62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bc64:	4a4b      	ldr	r2, [pc, #300]	@ (800bd94 <xTaskIncrementTick+0x14c>)
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d121      	bne.n	800bcb4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bc70:	4b49      	ldr	r3, [pc, #292]	@ (800bd98 <xTaskIncrementTick+0x150>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d00b      	beq.n	800bc92 <xTaskIncrementTick+0x4a>
	__asm volatile
 800bc7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc7e:	f383 8811 	msr	BASEPRI, r3
 800bc82:	f3bf 8f6f 	isb	sy
 800bc86:	f3bf 8f4f 	dsb	sy
 800bc8a:	603b      	str	r3, [r7, #0]
}
 800bc8c:	bf00      	nop
 800bc8e:	bf00      	nop
 800bc90:	e7fd      	b.n	800bc8e <xTaskIncrementTick+0x46>
 800bc92:	4b41      	ldr	r3, [pc, #260]	@ (800bd98 <xTaskIncrementTick+0x150>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	60fb      	str	r3, [r7, #12]
 800bc98:	4b40      	ldr	r3, [pc, #256]	@ (800bd9c <xTaskIncrementTick+0x154>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a3e      	ldr	r2, [pc, #248]	@ (800bd98 <xTaskIncrementTick+0x150>)
 800bc9e:	6013      	str	r3, [r2, #0]
 800bca0:	4a3e      	ldr	r2, [pc, #248]	@ (800bd9c <xTaskIncrementTick+0x154>)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	6013      	str	r3, [r2, #0]
 800bca6:	4b3e      	ldr	r3, [pc, #248]	@ (800bda0 <xTaskIncrementTick+0x158>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	4a3c      	ldr	r2, [pc, #240]	@ (800bda0 <xTaskIncrementTick+0x158>)
 800bcae:	6013      	str	r3, [r2, #0]
 800bcb0:	f000 fab4 	bl	800c21c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bcb4:	4b3b      	ldr	r3, [pc, #236]	@ (800bda4 <xTaskIncrementTick+0x15c>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	693a      	ldr	r2, [r7, #16]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d348      	bcc.n	800bd50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcbe:	4b36      	ldr	r3, [pc, #216]	@ (800bd98 <xTaskIncrementTick+0x150>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d104      	bne.n	800bcd2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcc8:	4b36      	ldr	r3, [pc, #216]	@ (800bda4 <xTaskIncrementTick+0x15c>)
 800bcca:	f04f 32ff 	mov.w	r2, #4294967295
 800bcce:	601a      	str	r2, [r3, #0]
					break;
 800bcd0:	e03e      	b.n	800bd50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcd2:	4b31      	ldr	r3, [pc, #196]	@ (800bd98 <xTaskIncrementTick+0x150>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bce2:	693a      	ldr	r2, [r7, #16]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d203      	bcs.n	800bcf2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bcea:	4a2e      	ldr	r2, [pc, #184]	@ (800bda4 <xTaskIncrementTick+0x15c>)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bcf0:	e02e      	b.n	800bd50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	3304      	adds	r3, #4
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fe fd04 	bl	800a704 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d004      	beq.n	800bd0e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	3318      	adds	r3, #24
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7fe fcfb 	bl	800a704 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd12:	2201      	movs	r2, #1
 800bd14:	409a      	lsls	r2, r3
 800bd16:	4b24      	ldr	r3, [pc, #144]	@ (800bda8 <xTaskIncrementTick+0x160>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	4a22      	ldr	r2, [pc, #136]	@ (800bda8 <xTaskIncrementTick+0x160>)
 800bd1e:	6013      	str	r3, [r2, #0]
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd24:	4613      	mov	r3, r2
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	4413      	add	r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	4a1f      	ldr	r2, [pc, #124]	@ (800bdac <xTaskIncrementTick+0x164>)
 800bd2e:	441a      	add	r2, r3
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	3304      	adds	r3, #4
 800bd34:	4619      	mov	r1, r3
 800bd36:	4610      	mov	r0, r2
 800bd38:	f7fe fc87 	bl	800a64a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd40:	4b1b      	ldr	r3, [pc, #108]	@ (800bdb0 <xTaskIncrementTick+0x168>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d3b9      	bcc.n	800bcbe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd4e:	e7b6      	b.n	800bcbe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bd50:	4b17      	ldr	r3, [pc, #92]	@ (800bdb0 <xTaskIncrementTick+0x168>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd56:	4915      	ldr	r1, [pc, #84]	@ (800bdac <xTaskIncrementTick+0x164>)
 800bd58:	4613      	mov	r3, r2
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	4413      	add	r3, r2
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	440b      	add	r3, r1
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d901      	bls.n	800bd6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bd6c:	4b11      	ldr	r3, [pc, #68]	@ (800bdb4 <xTaskIncrementTick+0x16c>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d007      	beq.n	800bd84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bd74:	2301      	movs	r3, #1
 800bd76:	617b      	str	r3, [r7, #20]
 800bd78:	e004      	b.n	800bd84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bd7a:	4b0f      	ldr	r3, [pc, #60]	@ (800bdb8 <xTaskIncrementTick+0x170>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	4a0d      	ldr	r2, [pc, #52]	@ (800bdb8 <xTaskIncrementTick+0x170>)
 800bd82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bd84:	697b      	ldr	r3, [r7, #20]
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3718      	adds	r7, #24
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	20005324 	.word	0x20005324
 800bd94:	20005300 	.word	0x20005300
 800bd98:	200052b4 	.word	0x200052b4
 800bd9c:	200052b8 	.word	0x200052b8
 800bda0:	20005314 	.word	0x20005314
 800bda4:	2000531c 	.word	0x2000531c
 800bda8:	20005304 	.word	0x20005304
 800bdac:	20005200 	.word	0x20005200
 800bdb0:	200051fc 	.word	0x200051fc
 800bdb4:	20005310 	.word	0x20005310
 800bdb8:	2000530c 	.word	0x2000530c

0800bdbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b087      	sub	sp, #28
 800bdc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bdc2:	4b2a      	ldr	r3, [pc, #168]	@ (800be6c <vTaskSwitchContext+0xb0>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d003      	beq.n	800bdd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bdca:	4b29      	ldr	r3, [pc, #164]	@ (800be70 <vTaskSwitchContext+0xb4>)
 800bdcc:	2201      	movs	r2, #1
 800bdce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bdd0:	e045      	b.n	800be5e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800bdd2:	4b27      	ldr	r3, [pc, #156]	@ (800be70 <vTaskSwitchContext+0xb4>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdd8:	4b26      	ldr	r3, [pc, #152]	@ (800be74 <vTaskSwitchContext+0xb8>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	fab3 f383 	clz	r3, r3
 800bde4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bde6:	7afb      	ldrb	r3, [r7, #11]
 800bde8:	f1c3 031f 	rsb	r3, r3, #31
 800bdec:	617b      	str	r3, [r7, #20]
 800bdee:	4922      	ldr	r1, [pc, #136]	@ (800be78 <vTaskSwitchContext+0xbc>)
 800bdf0:	697a      	ldr	r2, [r7, #20]
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	4413      	add	r3, r2
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	440b      	add	r3, r1
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d10b      	bne.n	800be1a <vTaskSwitchContext+0x5e>
	__asm volatile
 800be02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be06:	f383 8811 	msr	BASEPRI, r3
 800be0a:	f3bf 8f6f 	isb	sy
 800be0e:	f3bf 8f4f 	dsb	sy
 800be12:	607b      	str	r3, [r7, #4]
}
 800be14:	bf00      	nop
 800be16:	bf00      	nop
 800be18:	e7fd      	b.n	800be16 <vTaskSwitchContext+0x5a>
 800be1a:	697a      	ldr	r2, [r7, #20]
 800be1c:	4613      	mov	r3, r2
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	4413      	add	r3, r2
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	4a14      	ldr	r2, [pc, #80]	@ (800be78 <vTaskSwitchContext+0xbc>)
 800be26:	4413      	add	r3, r2
 800be28:	613b      	str	r3, [r7, #16]
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	685a      	ldr	r2, [r3, #4]
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	605a      	str	r2, [r3, #4]
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	685a      	ldr	r2, [r3, #4]
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	3308      	adds	r3, #8
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d104      	bne.n	800be4a <vTaskSwitchContext+0x8e>
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	685a      	ldr	r2, [r3, #4]
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	605a      	str	r2, [r3, #4]
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	4a0a      	ldr	r2, [pc, #40]	@ (800be7c <vTaskSwitchContext+0xc0>)
 800be52:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800be54:	4b09      	ldr	r3, [pc, #36]	@ (800be7c <vTaskSwitchContext+0xc0>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	334c      	adds	r3, #76	@ 0x4c
 800be5a:	4a09      	ldr	r2, [pc, #36]	@ (800be80 <vTaskSwitchContext+0xc4>)
 800be5c:	6013      	str	r3, [r2, #0]
}
 800be5e:	bf00      	nop
 800be60:	371c      	adds	r7, #28
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	20005324 	.word	0x20005324
 800be70:	20005310 	.word	0x20005310
 800be74:	20005304 	.word	0x20005304
 800be78:	20005200 	.word	0x20005200
 800be7c:	200051fc 	.word	0x200051fc
 800be80:	2000012c 	.word	0x2000012c

0800be84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d10b      	bne.n	800beac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800be94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be98:	f383 8811 	msr	BASEPRI, r3
 800be9c:	f3bf 8f6f 	isb	sy
 800bea0:	f3bf 8f4f 	dsb	sy
 800bea4:	60fb      	str	r3, [r7, #12]
}
 800bea6:	bf00      	nop
 800bea8:	bf00      	nop
 800beaa:	e7fd      	b.n	800bea8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800beac:	4b07      	ldr	r3, [pc, #28]	@ (800becc <vTaskPlaceOnEventList+0x48>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	3318      	adds	r3, #24
 800beb2:	4619      	mov	r1, r3
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f7fe fbec 	bl	800a692 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800beba:	2101      	movs	r1, #1
 800bebc:	6838      	ldr	r0, [r7, #0]
 800bebe:	f000 fb8d 	bl	800c5dc <prvAddCurrentTaskToDelayedList>
}
 800bec2:	bf00      	nop
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	200051fc 	.word	0x200051fc

0800bed0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b086      	sub	sp, #24
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10b      	bne.n	800befe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beea:	f383 8811 	msr	BASEPRI, r3
 800beee:	f3bf 8f6f 	isb	sy
 800bef2:	f3bf 8f4f 	dsb	sy
 800bef6:	60fb      	str	r3, [r7, #12]
}
 800bef8:	bf00      	nop
 800befa:	bf00      	nop
 800befc:	e7fd      	b.n	800befa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	3318      	adds	r3, #24
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7fe fbfe 	bl	800a704 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf08:	4b1d      	ldr	r3, [pc, #116]	@ (800bf80 <xTaskRemoveFromEventList+0xb0>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d11c      	bne.n	800bf4a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	3304      	adds	r3, #4
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7fe fbf5 	bl	800a704 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf1e:	2201      	movs	r2, #1
 800bf20:	409a      	lsls	r2, r3
 800bf22:	4b18      	ldr	r3, [pc, #96]	@ (800bf84 <xTaskRemoveFromEventList+0xb4>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4313      	orrs	r3, r2
 800bf28:	4a16      	ldr	r2, [pc, #88]	@ (800bf84 <xTaskRemoveFromEventList+0xb4>)
 800bf2a:	6013      	str	r3, [r2, #0]
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf30:	4613      	mov	r3, r2
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	4413      	add	r3, r2
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	4a13      	ldr	r2, [pc, #76]	@ (800bf88 <xTaskRemoveFromEventList+0xb8>)
 800bf3a:	441a      	add	r2, r3
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	3304      	adds	r3, #4
 800bf40:	4619      	mov	r1, r3
 800bf42:	4610      	mov	r0, r2
 800bf44:	f7fe fb81 	bl	800a64a <vListInsertEnd>
 800bf48:	e005      	b.n	800bf56 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	3318      	adds	r3, #24
 800bf4e:	4619      	mov	r1, r3
 800bf50:	480e      	ldr	r0, [pc, #56]	@ (800bf8c <xTaskRemoveFromEventList+0xbc>)
 800bf52:	f7fe fb7a 	bl	800a64a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf5a:	4b0d      	ldr	r3, [pc, #52]	@ (800bf90 <xTaskRemoveFromEventList+0xc0>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d905      	bls.n	800bf70 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bf64:	2301      	movs	r3, #1
 800bf66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bf68:	4b0a      	ldr	r3, [pc, #40]	@ (800bf94 <xTaskRemoveFromEventList+0xc4>)
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	601a      	str	r2, [r3, #0]
 800bf6e:	e001      	b.n	800bf74 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bf70:	2300      	movs	r3, #0
 800bf72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bf74:	697b      	ldr	r3, [r7, #20]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3718      	adds	r7, #24
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	20005324 	.word	0x20005324
 800bf84:	20005304 	.word	0x20005304
 800bf88:	20005200 	.word	0x20005200
 800bf8c:	200052bc 	.word	0x200052bc
 800bf90:	200051fc 	.word	0x200051fc
 800bf94:	20005310 	.word	0x20005310

0800bf98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b083      	sub	sp, #12
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bfa0:	4b06      	ldr	r3, [pc, #24]	@ (800bfbc <vTaskInternalSetTimeOutState+0x24>)
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bfa8:	4b05      	ldr	r3, [pc, #20]	@ (800bfc0 <vTaskInternalSetTimeOutState+0x28>)
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	605a      	str	r2, [r3, #4]
}
 800bfb0:	bf00      	nop
 800bfb2:	370c      	adds	r7, #12
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr
 800bfbc:	20005314 	.word	0x20005314
 800bfc0:	20005300 	.word	0x20005300

0800bfc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b088      	sub	sp, #32
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d10b      	bne.n	800bfec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bfd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfd8:	f383 8811 	msr	BASEPRI, r3
 800bfdc:	f3bf 8f6f 	isb	sy
 800bfe0:	f3bf 8f4f 	dsb	sy
 800bfe4:	613b      	str	r3, [r7, #16]
}
 800bfe6:	bf00      	nop
 800bfe8:	bf00      	nop
 800bfea:	e7fd      	b.n	800bfe8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d10b      	bne.n	800c00a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff6:	f383 8811 	msr	BASEPRI, r3
 800bffa:	f3bf 8f6f 	isb	sy
 800bffe:	f3bf 8f4f 	dsb	sy
 800c002:	60fb      	str	r3, [r7, #12]
}
 800c004:	bf00      	nop
 800c006:	bf00      	nop
 800c008:	e7fd      	b.n	800c006 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c00a:	f000 fc7d 	bl	800c908 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c00e:	4b1d      	ldr	r3, [pc, #116]	@ (800c084 <xTaskCheckForTimeOut+0xc0>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	69ba      	ldr	r2, [r7, #24]
 800c01a:	1ad3      	subs	r3, r2, r3
 800c01c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c026:	d102      	bne.n	800c02e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c028:	2300      	movs	r3, #0
 800c02a:	61fb      	str	r3, [r7, #28]
 800c02c:	e023      	b.n	800c076 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681a      	ldr	r2, [r3, #0]
 800c032:	4b15      	ldr	r3, [pc, #84]	@ (800c088 <xTaskCheckForTimeOut+0xc4>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	429a      	cmp	r2, r3
 800c038:	d007      	beq.n	800c04a <xTaskCheckForTimeOut+0x86>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	69ba      	ldr	r2, [r7, #24]
 800c040:	429a      	cmp	r2, r3
 800c042:	d302      	bcc.n	800c04a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c044:	2301      	movs	r3, #1
 800c046:	61fb      	str	r3, [r7, #28]
 800c048:	e015      	b.n	800c076 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	697a      	ldr	r2, [r7, #20]
 800c050:	429a      	cmp	r2, r3
 800c052:	d20b      	bcs.n	800c06c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	681a      	ldr	r2, [r3, #0]
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	1ad2      	subs	r2, r2, r3
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f7ff ff99 	bl	800bf98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c066:	2300      	movs	r3, #0
 800c068:	61fb      	str	r3, [r7, #28]
 800c06a:	e004      	b.n	800c076 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	2200      	movs	r2, #0
 800c070:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c072:	2301      	movs	r3, #1
 800c074:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c076:	f000 fc79 	bl	800c96c <vPortExitCritical>

	return xReturn;
 800c07a:	69fb      	ldr	r3, [r7, #28]
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3720      	adds	r7, #32
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}
 800c084:	20005300 	.word	0x20005300
 800c088:	20005314 	.word	0x20005314

0800c08c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c08c:	b480      	push	{r7}
 800c08e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c090:	4b03      	ldr	r3, [pc, #12]	@ (800c0a0 <vTaskMissedYield+0x14>)
 800c092:	2201      	movs	r2, #1
 800c094:	601a      	str	r2, [r3, #0]
}
 800c096:	bf00      	nop
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr
 800c0a0:	20005310 	.word	0x20005310

0800c0a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c0ac:	f000 f852 	bl	800c154 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c0b0:	4b06      	ldr	r3, [pc, #24]	@ (800c0cc <prvIdleTask+0x28>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d9f9      	bls.n	800c0ac <prvIdleTask+0x8>
			{
				taskYIELD();
 800c0b8:	4b05      	ldr	r3, [pc, #20]	@ (800c0d0 <prvIdleTask+0x2c>)
 800c0ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0be:	601a      	str	r2, [r3, #0]
 800c0c0:	f3bf 8f4f 	dsb	sy
 800c0c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c0c8:	e7f0      	b.n	800c0ac <prvIdleTask+0x8>
 800c0ca:	bf00      	nop
 800c0cc:	20005200 	.word	0x20005200
 800c0d0:	e000ed04 	.word	0xe000ed04

0800c0d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c0da:	2300      	movs	r3, #0
 800c0dc:	607b      	str	r3, [r7, #4]
 800c0de:	e00c      	b.n	800c0fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	4613      	mov	r3, r2
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	4413      	add	r3, r2
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	4a12      	ldr	r2, [pc, #72]	@ (800c134 <prvInitialiseTaskLists+0x60>)
 800c0ec:	4413      	add	r3, r2
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7fe fa7e 	bl	800a5f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	607b      	str	r3, [r7, #4]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2b06      	cmp	r3, #6
 800c0fe:	d9ef      	bls.n	800c0e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c100:	480d      	ldr	r0, [pc, #52]	@ (800c138 <prvInitialiseTaskLists+0x64>)
 800c102:	f7fe fa75 	bl	800a5f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c106:	480d      	ldr	r0, [pc, #52]	@ (800c13c <prvInitialiseTaskLists+0x68>)
 800c108:	f7fe fa72 	bl	800a5f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c10c:	480c      	ldr	r0, [pc, #48]	@ (800c140 <prvInitialiseTaskLists+0x6c>)
 800c10e:	f7fe fa6f 	bl	800a5f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c112:	480c      	ldr	r0, [pc, #48]	@ (800c144 <prvInitialiseTaskLists+0x70>)
 800c114:	f7fe fa6c 	bl	800a5f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c118:	480b      	ldr	r0, [pc, #44]	@ (800c148 <prvInitialiseTaskLists+0x74>)
 800c11a:	f7fe fa69 	bl	800a5f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c11e:	4b0b      	ldr	r3, [pc, #44]	@ (800c14c <prvInitialiseTaskLists+0x78>)
 800c120:	4a05      	ldr	r2, [pc, #20]	@ (800c138 <prvInitialiseTaskLists+0x64>)
 800c122:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c124:	4b0a      	ldr	r3, [pc, #40]	@ (800c150 <prvInitialiseTaskLists+0x7c>)
 800c126:	4a05      	ldr	r2, [pc, #20]	@ (800c13c <prvInitialiseTaskLists+0x68>)
 800c128:	601a      	str	r2, [r3, #0]
}
 800c12a:	bf00      	nop
 800c12c:	3708      	adds	r7, #8
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	20005200 	.word	0x20005200
 800c138:	2000528c 	.word	0x2000528c
 800c13c:	200052a0 	.word	0x200052a0
 800c140:	200052bc 	.word	0x200052bc
 800c144:	200052d0 	.word	0x200052d0
 800c148:	200052e8 	.word	0x200052e8
 800c14c:	200052b4 	.word	0x200052b4
 800c150:	200052b8 	.word	0x200052b8

0800c154 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c15a:	e019      	b.n	800c190 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c15c:	f000 fbd4 	bl	800c908 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c160:	4b10      	ldr	r3, [pc, #64]	@ (800c1a4 <prvCheckTasksWaitingTermination+0x50>)
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	3304      	adds	r3, #4
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fe fac9 	bl	800a704 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c172:	4b0d      	ldr	r3, [pc, #52]	@ (800c1a8 <prvCheckTasksWaitingTermination+0x54>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	3b01      	subs	r3, #1
 800c178:	4a0b      	ldr	r2, [pc, #44]	@ (800c1a8 <prvCheckTasksWaitingTermination+0x54>)
 800c17a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c17c:	4b0b      	ldr	r3, [pc, #44]	@ (800c1ac <prvCheckTasksWaitingTermination+0x58>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	3b01      	subs	r3, #1
 800c182:	4a0a      	ldr	r2, [pc, #40]	@ (800c1ac <prvCheckTasksWaitingTermination+0x58>)
 800c184:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c186:	f000 fbf1 	bl	800c96c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 f810 	bl	800c1b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c190:	4b06      	ldr	r3, [pc, #24]	@ (800c1ac <prvCheckTasksWaitingTermination+0x58>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d1e1      	bne.n	800c15c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c198:	bf00      	nop
 800c19a:	bf00      	nop
 800c19c:	3708      	adds	r7, #8
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	200052d0 	.word	0x200052d0
 800c1a8:	200052fc 	.word	0x200052fc
 800c1ac:	200052e4 	.word	0x200052e4

0800c1b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	334c      	adds	r3, #76	@ 0x4c
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f00d fc3b 	bl	8019a38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d108      	bne.n	800c1de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f000 fd89 	bl	800cce8 <vPortFree>
				vPortFree( pxTCB );
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f000 fd86 	bl	800cce8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c1dc:	e019      	b.n	800c212 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d103      	bne.n	800c1f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 fd7d 	bl	800cce8 <vPortFree>
	}
 800c1ee:	e010      	b.n	800c212 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800c1f6:	2b02      	cmp	r3, #2
 800c1f8:	d00b      	beq.n	800c212 <prvDeleteTCB+0x62>
	__asm volatile
 800c1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1fe:	f383 8811 	msr	BASEPRI, r3
 800c202:	f3bf 8f6f 	isb	sy
 800c206:	f3bf 8f4f 	dsb	sy
 800c20a:	60fb      	str	r3, [r7, #12]
}
 800c20c:	bf00      	nop
 800c20e:	bf00      	nop
 800c210:	e7fd      	b.n	800c20e <prvDeleteTCB+0x5e>
	}
 800c212:	bf00      	nop
 800c214:	3710      	adds	r7, #16
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
	...

0800c21c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c222:	4b0c      	ldr	r3, [pc, #48]	@ (800c254 <prvResetNextTaskUnblockTime+0x38>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d104      	bne.n	800c236 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c22c:	4b0a      	ldr	r3, [pc, #40]	@ (800c258 <prvResetNextTaskUnblockTime+0x3c>)
 800c22e:	f04f 32ff 	mov.w	r2, #4294967295
 800c232:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c234:	e008      	b.n	800c248 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c236:	4b07      	ldr	r3, [pc, #28]	@ (800c254 <prvResetNextTaskUnblockTime+0x38>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	4a04      	ldr	r2, [pc, #16]	@ (800c258 <prvResetNextTaskUnblockTime+0x3c>)
 800c246:	6013      	str	r3, [r2, #0]
}
 800c248:	bf00      	nop
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr
 800c254:	200052b4 	.word	0x200052b4
 800c258:	2000531c 	.word	0x2000531c

0800c25c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c25c:	b480      	push	{r7}
 800c25e:	b083      	sub	sp, #12
 800c260:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c262:	4b0b      	ldr	r3, [pc, #44]	@ (800c290 <xTaskGetSchedulerState+0x34>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d102      	bne.n	800c270 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c26a:	2301      	movs	r3, #1
 800c26c:	607b      	str	r3, [r7, #4]
 800c26e:	e008      	b.n	800c282 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c270:	4b08      	ldr	r3, [pc, #32]	@ (800c294 <xTaskGetSchedulerState+0x38>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d102      	bne.n	800c27e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c278:	2302      	movs	r3, #2
 800c27a:	607b      	str	r3, [r7, #4]
 800c27c:	e001      	b.n	800c282 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c27e:	2300      	movs	r3, #0
 800c280:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c282:	687b      	ldr	r3, [r7, #4]
	}
 800c284:	4618      	mov	r0, r3
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr
 800c290:	20005308 	.word	0x20005308
 800c294:	20005324 	.word	0x20005324

0800c298 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d05e      	beq.n	800c36c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2b2:	4b31      	ldr	r3, [pc, #196]	@ (800c378 <xTaskPriorityInherit+0xe0>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d24e      	bcs.n	800c35a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	699b      	ldr	r3, [r3, #24]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	db06      	blt.n	800c2d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2c4:	4b2c      	ldr	r3, [pc, #176]	@ (800c378 <xTaskPriorityInherit+0xe0>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ca:	f1c3 0207 	rsb	r2, r3, #7
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	6959      	ldr	r1, [r3, #20]
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2da:	4613      	mov	r3, r2
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	4413      	add	r3, r2
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	4a26      	ldr	r2, [pc, #152]	@ (800c37c <xTaskPriorityInherit+0xe4>)
 800c2e4:	4413      	add	r3, r2
 800c2e6:	4299      	cmp	r1, r3
 800c2e8:	d12f      	bne.n	800c34a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fe fa08 	bl	800a704 <uxListRemove>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d10a      	bne.n	800c310 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2fe:	2201      	movs	r2, #1
 800c300:	fa02 f303 	lsl.w	r3, r2, r3
 800c304:	43da      	mvns	r2, r3
 800c306:	4b1e      	ldr	r3, [pc, #120]	@ (800c380 <xTaskPriorityInherit+0xe8>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4013      	ands	r3, r2
 800c30c:	4a1c      	ldr	r2, [pc, #112]	@ (800c380 <xTaskPriorityInherit+0xe8>)
 800c30e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c310:	4b19      	ldr	r3, [pc, #100]	@ (800c378 <xTaskPriorityInherit+0xe0>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c31e:	2201      	movs	r2, #1
 800c320:	409a      	lsls	r2, r3
 800c322:	4b17      	ldr	r3, [pc, #92]	@ (800c380 <xTaskPriorityInherit+0xe8>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4313      	orrs	r3, r2
 800c328:	4a15      	ldr	r2, [pc, #84]	@ (800c380 <xTaskPriorityInherit+0xe8>)
 800c32a:	6013      	str	r3, [r2, #0]
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c330:	4613      	mov	r3, r2
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	4413      	add	r3, r2
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	4a10      	ldr	r2, [pc, #64]	@ (800c37c <xTaskPriorityInherit+0xe4>)
 800c33a:	441a      	add	r2, r3
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	3304      	adds	r3, #4
 800c340:	4619      	mov	r1, r3
 800c342:	4610      	mov	r0, r2
 800c344:	f7fe f981 	bl	800a64a <vListInsertEnd>
 800c348:	e004      	b.n	800c354 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c34a:	4b0b      	ldr	r3, [pc, #44]	@ (800c378 <xTaskPriorityInherit+0xe0>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c354:	2301      	movs	r3, #1
 800c356:	60fb      	str	r3, [r7, #12]
 800c358:	e008      	b.n	800c36c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c35e:	4b06      	ldr	r3, [pc, #24]	@ (800c378 <xTaskPriorityInherit+0xe0>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c364:	429a      	cmp	r2, r3
 800c366:	d201      	bcs.n	800c36c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c368:	2301      	movs	r3, #1
 800c36a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c36c:	68fb      	ldr	r3, [r7, #12]
	}
 800c36e:	4618      	mov	r0, r3
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	200051fc 	.word	0x200051fc
 800c37c:	20005200 	.word	0x20005200
 800c380:	20005304 	.word	0x20005304

0800c384 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c384:	b580      	push	{r7, lr}
 800c386:	b086      	sub	sp, #24
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c390:	2300      	movs	r3, #0
 800c392:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d070      	beq.n	800c47c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c39a:	4b3b      	ldr	r3, [pc, #236]	@ (800c488 <xTaskPriorityDisinherit+0x104>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	693a      	ldr	r2, [r7, #16]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d00b      	beq.n	800c3bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	60fb      	str	r3, [r7, #12]
}
 800c3b6:	bf00      	nop
 800c3b8:	bf00      	nop
 800c3ba:	e7fd      	b.n	800c3b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d10b      	bne.n	800c3dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c8:	f383 8811 	msr	BASEPRI, r3
 800c3cc:	f3bf 8f6f 	isb	sy
 800c3d0:	f3bf 8f4f 	dsb	sy
 800c3d4:	60bb      	str	r3, [r7, #8]
}
 800c3d6:	bf00      	nop
 800c3d8:	bf00      	nop
 800c3da:	e7fd      	b.n	800c3d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c3e0:	1e5a      	subs	r2, r3, #1
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d044      	beq.n	800c47c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d140      	bne.n	800c47c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	3304      	adds	r3, #4
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7fe f980 	bl	800a704 <uxListRemove>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d115      	bne.n	800c436 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c40e:	491f      	ldr	r1, [pc, #124]	@ (800c48c <xTaskPriorityDisinherit+0x108>)
 800c410:	4613      	mov	r3, r2
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	4413      	add	r3, r2
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	440b      	add	r3, r1
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d10a      	bne.n	800c436 <xTaskPriorityDisinherit+0xb2>
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c424:	2201      	movs	r2, #1
 800c426:	fa02 f303 	lsl.w	r3, r2, r3
 800c42a:	43da      	mvns	r2, r3
 800c42c:	4b18      	ldr	r3, [pc, #96]	@ (800c490 <xTaskPriorityDisinherit+0x10c>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4013      	ands	r3, r2
 800c432:	4a17      	ldr	r2, [pc, #92]	@ (800c490 <xTaskPriorityDisinherit+0x10c>)
 800c434:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c442:	f1c3 0207 	rsb	r2, r3, #7
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c44e:	2201      	movs	r2, #1
 800c450:	409a      	lsls	r2, r3
 800c452:	4b0f      	ldr	r3, [pc, #60]	@ (800c490 <xTaskPriorityDisinherit+0x10c>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4313      	orrs	r3, r2
 800c458:	4a0d      	ldr	r2, [pc, #52]	@ (800c490 <xTaskPriorityDisinherit+0x10c>)
 800c45a:	6013      	str	r3, [r2, #0]
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c460:	4613      	mov	r3, r2
 800c462:	009b      	lsls	r3, r3, #2
 800c464:	4413      	add	r3, r2
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	4a08      	ldr	r2, [pc, #32]	@ (800c48c <xTaskPriorityDisinherit+0x108>)
 800c46a:	441a      	add	r2, r3
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	3304      	adds	r3, #4
 800c470:	4619      	mov	r1, r3
 800c472:	4610      	mov	r0, r2
 800c474:	f7fe f8e9 	bl	800a64a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c478:	2301      	movs	r3, #1
 800c47a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c47c:	697b      	ldr	r3, [r7, #20]
	}
 800c47e:	4618      	mov	r0, r3
 800c480:	3718      	adds	r7, #24
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	200051fc 	.word	0x200051fc
 800c48c:	20005200 	.word	0x20005200
 800c490:	20005304 	.word	0x20005304

0800c494 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c494:	b580      	push	{r7, lr}
 800c496:	b088      	sub	sp, #32
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d079      	beq.n	800c5a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c4ac:	69bb      	ldr	r3, [r7, #24]
 800c4ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d10b      	bne.n	800c4cc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b8:	f383 8811 	msr	BASEPRI, r3
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f3bf 8f4f 	dsb	sy
 800c4c4:	60fb      	str	r3, [r7, #12]
}
 800c4c6:	bf00      	nop
 800c4c8:	bf00      	nop
 800c4ca:	e7fd      	b.n	800c4c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c4cc:	69bb      	ldr	r3, [r7, #24]
 800c4ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4d0:	683a      	ldr	r2, [r7, #0]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d902      	bls.n	800c4dc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	61fb      	str	r3, [r7, #28]
 800c4da:	e002      	b.n	800c4e2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c4dc:	69bb      	ldr	r3, [r7, #24]
 800c4de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c4e2:	69bb      	ldr	r3, [r7, #24]
 800c4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4e6:	69fa      	ldr	r2, [r7, #28]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d059      	beq.n	800c5a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4f0:	697a      	ldr	r2, [r7, #20]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d154      	bne.n	800c5a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c4f6:	4b2c      	ldr	r3, [pc, #176]	@ (800c5a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	69ba      	ldr	r2, [r7, #24]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d10b      	bne.n	800c518 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800c500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c504:	f383 8811 	msr	BASEPRI, r3
 800c508:	f3bf 8f6f 	isb	sy
 800c50c:	f3bf 8f4f 	dsb	sy
 800c510:	60bb      	str	r3, [r7, #8]
}
 800c512:	bf00      	nop
 800c514:	bf00      	nop
 800c516:	e7fd      	b.n	800c514 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c51c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	69fa      	ldr	r2, [r7, #28]
 800c522:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c524:	69bb      	ldr	r3, [r7, #24]
 800c526:	699b      	ldr	r3, [r3, #24]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	db04      	blt.n	800c536 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	f1c3 0207 	rsb	r2, r3, #7
 800c532:	69bb      	ldr	r3, [r7, #24]
 800c534:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	6959      	ldr	r1, [r3, #20]
 800c53a:	693a      	ldr	r2, [r7, #16]
 800c53c:	4613      	mov	r3, r2
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	4413      	add	r3, r2
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	4a19      	ldr	r2, [pc, #100]	@ (800c5ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c546:	4413      	add	r3, r2
 800c548:	4299      	cmp	r1, r3
 800c54a:	d129      	bne.n	800c5a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	3304      	adds	r3, #4
 800c550:	4618      	mov	r0, r3
 800c552:	f7fe f8d7 	bl	800a704 <uxListRemove>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d10a      	bne.n	800c572 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c55c:	69bb      	ldr	r3, [r7, #24]
 800c55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c560:	2201      	movs	r2, #1
 800c562:	fa02 f303 	lsl.w	r3, r2, r3
 800c566:	43da      	mvns	r2, r3
 800c568:	4b11      	ldr	r3, [pc, #68]	@ (800c5b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4013      	ands	r3, r2
 800c56e:	4a10      	ldr	r2, [pc, #64]	@ (800c5b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c570:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c576:	2201      	movs	r2, #1
 800c578:	409a      	lsls	r2, r3
 800c57a:	4b0d      	ldr	r3, [pc, #52]	@ (800c5b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4313      	orrs	r3, r2
 800c580:	4a0b      	ldr	r2, [pc, #44]	@ (800c5b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c582:	6013      	str	r3, [r2, #0]
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c588:	4613      	mov	r3, r2
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	4413      	add	r3, r2
 800c58e:	009b      	lsls	r3, r3, #2
 800c590:	4a06      	ldr	r2, [pc, #24]	@ (800c5ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c592:	441a      	add	r2, r3
 800c594:	69bb      	ldr	r3, [r7, #24]
 800c596:	3304      	adds	r3, #4
 800c598:	4619      	mov	r1, r3
 800c59a:	4610      	mov	r0, r2
 800c59c:	f7fe f855 	bl	800a64a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c5a0:	bf00      	nop
 800c5a2:	3720      	adds	r7, #32
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	200051fc 	.word	0x200051fc
 800c5ac:	20005200 	.word	0x20005200
 800c5b0:	20005304 	.word	0x20005304

0800c5b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c5b4:	b480      	push	{r7}
 800c5b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c5b8:	4b07      	ldr	r3, [pc, #28]	@ (800c5d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d004      	beq.n	800c5ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c5c0:	4b05      	ldr	r3, [pc, #20]	@ (800c5d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c5c6:	3201      	adds	r2, #1
 800c5c8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800c5ca:	4b03      	ldr	r3, [pc, #12]	@ (800c5d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
	}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr
 800c5d8:	200051fc 	.word	0x200051fc

0800c5dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c5e6:	4b29      	ldr	r3, [pc, #164]	@ (800c68c <prvAddCurrentTaskToDelayedList+0xb0>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5ec:	4b28      	ldr	r3, [pc, #160]	@ (800c690 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	3304      	adds	r3, #4
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7fe f886 	bl	800a704 <uxListRemove>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d10b      	bne.n	800c616 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c5fe:	4b24      	ldr	r3, [pc, #144]	@ (800c690 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c604:	2201      	movs	r2, #1
 800c606:	fa02 f303 	lsl.w	r3, r2, r3
 800c60a:	43da      	mvns	r2, r3
 800c60c:	4b21      	ldr	r3, [pc, #132]	@ (800c694 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4013      	ands	r3, r2
 800c612:	4a20      	ldr	r2, [pc, #128]	@ (800c694 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c614:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c61c:	d10a      	bne.n	800c634 <prvAddCurrentTaskToDelayedList+0x58>
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d007      	beq.n	800c634 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c624:	4b1a      	ldr	r3, [pc, #104]	@ (800c690 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	3304      	adds	r3, #4
 800c62a:	4619      	mov	r1, r3
 800c62c:	481a      	ldr	r0, [pc, #104]	@ (800c698 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c62e:	f7fe f80c 	bl	800a64a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c632:	e026      	b.n	800c682 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	4413      	add	r3, r2
 800c63a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c63c:	4b14      	ldr	r3, [pc, #80]	@ (800c690 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	68ba      	ldr	r2, [r7, #8]
 800c642:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c644:	68ba      	ldr	r2, [r7, #8]
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d209      	bcs.n	800c660 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c64c:	4b13      	ldr	r3, [pc, #76]	@ (800c69c <prvAddCurrentTaskToDelayedList+0xc0>)
 800c64e:	681a      	ldr	r2, [r3, #0]
 800c650:	4b0f      	ldr	r3, [pc, #60]	@ (800c690 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	3304      	adds	r3, #4
 800c656:	4619      	mov	r1, r3
 800c658:	4610      	mov	r0, r2
 800c65a:	f7fe f81a 	bl	800a692 <vListInsert>
}
 800c65e:	e010      	b.n	800c682 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c660:	4b0f      	ldr	r3, [pc, #60]	@ (800c6a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	4b0a      	ldr	r3, [pc, #40]	@ (800c690 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	3304      	adds	r3, #4
 800c66a:	4619      	mov	r1, r3
 800c66c:	4610      	mov	r0, r2
 800c66e:	f7fe f810 	bl	800a692 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c672:	4b0c      	ldr	r3, [pc, #48]	@ (800c6a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	68ba      	ldr	r2, [r7, #8]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d202      	bcs.n	800c682 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c67c:	4a09      	ldr	r2, [pc, #36]	@ (800c6a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	6013      	str	r3, [r2, #0]
}
 800c682:	bf00      	nop
 800c684:	3710      	adds	r7, #16
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	20005300 	.word	0x20005300
 800c690:	200051fc 	.word	0x200051fc
 800c694:	20005304 	.word	0x20005304
 800c698:	200052e8 	.word	0x200052e8
 800c69c:	200052b8 	.word	0x200052b8
 800c6a0:	200052b4 	.word	0x200052b4
 800c6a4:	2000531c 	.word	0x2000531c

0800c6a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	3b04      	subs	r3, #4
 800c6b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c6c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	3b04      	subs	r3, #4
 800c6c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	f023 0201 	bic.w	r2, r3, #1
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	3b04      	subs	r3, #4
 800c6d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c6d8:	4a0c      	ldr	r2, [pc, #48]	@ (800c70c <pxPortInitialiseStack+0x64>)
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	3b14      	subs	r3, #20
 800c6e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	3b04      	subs	r3, #4
 800c6ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f06f 0202 	mvn.w	r2, #2
 800c6f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	3b20      	subs	r3, #32
 800c6fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
}
 800c700:	4618      	mov	r0, r3
 800c702:	3714      	adds	r7, #20
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr
 800c70c:	0800c711 	.word	0x0800c711

0800c710 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c710:	b480      	push	{r7}
 800c712:	b085      	sub	sp, #20
 800c714:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c716:	2300      	movs	r3, #0
 800c718:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c71a:	4b13      	ldr	r3, [pc, #76]	@ (800c768 <prvTaskExitError+0x58>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c722:	d00b      	beq.n	800c73c <prvTaskExitError+0x2c>
	__asm volatile
 800c724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c728:	f383 8811 	msr	BASEPRI, r3
 800c72c:	f3bf 8f6f 	isb	sy
 800c730:	f3bf 8f4f 	dsb	sy
 800c734:	60fb      	str	r3, [r7, #12]
}
 800c736:	bf00      	nop
 800c738:	bf00      	nop
 800c73a:	e7fd      	b.n	800c738 <prvTaskExitError+0x28>
	__asm volatile
 800c73c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c740:	f383 8811 	msr	BASEPRI, r3
 800c744:	f3bf 8f6f 	isb	sy
 800c748:	f3bf 8f4f 	dsb	sy
 800c74c:	60bb      	str	r3, [r7, #8]
}
 800c74e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c750:	bf00      	nop
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d0fc      	beq.n	800c752 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c758:	bf00      	nop
 800c75a:	bf00      	nop
 800c75c:	3714      	adds	r7, #20
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr
 800c766:	bf00      	nop
 800c768:	200000ac 	.word	0x200000ac
 800c76c:	00000000 	.word	0x00000000

0800c770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c770:	4b07      	ldr	r3, [pc, #28]	@ (800c790 <pxCurrentTCBConst2>)
 800c772:	6819      	ldr	r1, [r3, #0]
 800c774:	6808      	ldr	r0, [r1, #0]
 800c776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77a:	f380 8809 	msr	PSP, r0
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	f04f 0000 	mov.w	r0, #0
 800c786:	f380 8811 	msr	BASEPRI, r0
 800c78a:	4770      	bx	lr
 800c78c:	f3af 8000 	nop.w

0800c790 <pxCurrentTCBConst2>:
 800c790:	200051fc 	.word	0x200051fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c794:	bf00      	nop
 800c796:	bf00      	nop

0800c798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c798:	4808      	ldr	r0, [pc, #32]	@ (800c7bc <prvPortStartFirstTask+0x24>)
 800c79a:	6800      	ldr	r0, [r0, #0]
 800c79c:	6800      	ldr	r0, [r0, #0]
 800c79e:	f380 8808 	msr	MSP, r0
 800c7a2:	f04f 0000 	mov.w	r0, #0
 800c7a6:	f380 8814 	msr	CONTROL, r0
 800c7aa:	b662      	cpsie	i
 800c7ac:	b661      	cpsie	f
 800c7ae:	f3bf 8f4f 	dsb	sy
 800c7b2:	f3bf 8f6f 	isb	sy
 800c7b6:	df00      	svc	0
 800c7b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c7ba:	bf00      	nop
 800c7bc:	e000ed08 	.word	0xe000ed08

0800c7c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b086      	sub	sp, #24
 800c7c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c7c6:	4b47      	ldr	r3, [pc, #284]	@ (800c8e4 <xPortStartScheduler+0x124>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a47      	ldr	r2, [pc, #284]	@ (800c8e8 <xPortStartScheduler+0x128>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d10b      	bne.n	800c7e8 <xPortStartScheduler+0x28>
	__asm volatile
 800c7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7d4:	f383 8811 	msr	BASEPRI, r3
 800c7d8:	f3bf 8f6f 	isb	sy
 800c7dc:	f3bf 8f4f 	dsb	sy
 800c7e0:	60fb      	str	r3, [r7, #12]
}
 800c7e2:	bf00      	nop
 800c7e4:	bf00      	nop
 800c7e6:	e7fd      	b.n	800c7e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c7e8:	4b3e      	ldr	r3, [pc, #248]	@ (800c8e4 <xPortStartScheduler+0x124>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a3f      	ldr	r2, [pc, #252]	@ (800c8ec <xPortStartScheduler+0x12c>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d10b      	bne.n	800c80a <xPortStartScheduler+0x4a>
	__asm volatile
 800c7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f6:	f383 8811 	msr	BASEPRI, r3
 800c7fa:	f3bf 8f6f 	isb	sy
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	613b      	str	r3, [r7, #16]
}
 800c804:	bf00      	nop
 800c806:	bf00      	nop
 800c808:	e7fd      	b.n	800c806 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c80a:	4b39      	ldr	r3, [pc, #228]	@ (800c8f0 <xPortStartScheduler+0x130>)
 800c80c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	b2db      	uxtb	r3, r3
 800c814:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	22ff      	movs	r2, #255	@ 0xff
 800c81a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	b2db      	uxtb	r3, r3
 800c822:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c824:	78fb      	ldrb	r3, [r7, #3]
 800c826:	b2db      	uxtb	r3, r3
 800c828:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c82c:	b2da      	uxtb	r2, r3
 800c82e:	4b31      	ldr	r3, [pc, #196]	@ (800c8f4 <xPortStartScheduler+0x134>)
 800c830:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c832:	4b31      	ldr	r3, [pc, #196]	@ (800c8f8 <xPortStartScheduler+0x138>)
 800c834:	2207      	movs	r2, #7
 800c836:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c838:	e009      	b.n	800c84e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c83a:	4b2f      	ldr	r3, [pc, #188]	@ (800c8f8 <xPortStartScheduler+0x138>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	3b01      	subs	r3, #1
 800c840:	4a2d      	ldr	r2, [pc, #180]	@ (800c8f8 <xPortStartScheduler+0x138>)
 800c842:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c844:	78fb      	ldrb	r3, [r7, #3]
 800c846:	b2db      	uxtb	r3, r3
 800c848:	005b      	lsls	r3, r3, #1
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c84e:	78fb      	ldrb	r3, [r7, #3]
 800c850:	b2db      	uxtb	r3, r3
 800c852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c856:	2b80      	cmp	r3, #128	@ 0x80
 800c858:	d0ef      	beq.n	800c83a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c85a:	4b27      	ldr	r3, [pc, #156]	@ (800c8f8 <xPortStartScheduler+0x138>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f1c3 0307 	rsb	r3, r3, #7
 800c862:	2b04      	cmp	r3, #4
 800c864:	d00b      	beq.n	800c87e <xPortStartScheduler+0xbe>
	__asm volatile
 800c866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c86a:	f383 8811 	msr	BASEPRI, r3
 800c86e:	f3bf 8f6f 	isb	sy
 800c872:	f3bf 8f4f 	dsb	sy
 800c876:	60bb      	str	r3, [r7, #8]
}
 800c878:	bf00      	nop
 800c87a:	bf00      	nop
 800c87c:	e7fd      	b.n	800c87a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c87e:	4b1e      	ldr	r3, [pc, #120]	@ (800c8f8 <xPortStartScheduler+0x138>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	021b      	lsls	r3, r3, #8
 800c884:	4a1c      	ldr	r2, [pc, #112]	@ (800c8f8 <xPortStartScheduler+0x138>)
 800c886:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c888:	4b1b      	ldr	r3, [pc, #108]	@ (800c8f8 <xPortStartScheduler+0x138>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c890:	4a19      	ldr	r2, [pc, #100]	@ (800c8f8 <xPortStartScheduler+0x138>)
 800c892:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	b2da      	uxtb	r2, r3
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c89c:	4b17      	ldr	r3, [pc, #92]	@ (800c8fc <xPortStartScheduler+0x13c>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a16      	ldr	r2, [pc, #88]	@ (800c8fc <xPortStartScheduler+0x13c>)
 800c8a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c8a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c8a8:	4b14      	ldr	r3, [pc, #80]	@ (800c8fc <xPortStartScheduler+0x13c>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a13      	ldr	r2, [pc, #76]	@ (800c8fc <xPortStartScheduler+0x13c>)
 800c8ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c8b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c8b4:	f000 f8da 	bl	800ca6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c8b8:	4b11      	ldr	r3, [pc, #68]	@ (800c900 <xPortStartScheduler+0x140>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c8be:	f000 f8f9 	bl	800cab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c8c2:	4b10      	ldr	r3, [pc, #64]	@ (800c904 <xPortStartScheduler+0x144>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4a0f      	ldr	r2, [pc, #60]	@ (800c904 <xPortStartScheduler+0x144>)
 800c8c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c8cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c8ce:	f7ff ff63 	bl	800c798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c8d2:	f7ff fa73 	bl	800bdbc <vTaskSwitchContext>
	prvTaskExitError();
 800c8d6:	f7ff ff1b 	bl	800c710 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3718      	adds	r7, #24
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	e000ed00 	.word	0xe000ed00
 800c8e8:	410fc271 	.word	0x410fc271
 800c8ec:	410fc270 	.word	0x410fc270
 800c8f0:	e000e400 	.word	0xe000e400
 800c8f4:	20005328 	.word	0x20005328
 800c8f8:	2000532c 	.word	0x2000532c
 800c8fc:	e000ed20 	.word	0xe000ed20
 800c900:	200000ac 	.word	0x200000ac
 800c904:	e000ef34 	.word	0xe000ef34

0800c908 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c908:	b480      	push	{r7}
 800c90a:	b083      	sub	sp, #12
 800c90c:	af00      	add	r7, sp, #0
	__asm volatile
 800c90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c912:	f383 8811 	msr	BASEPRI, r3
 800c916:	f3bf 8f6f 	isb	sy
 800c91a:	f3bf 8f4f 	dsb	sy
 800c91e:	607b      	str	r3, [r7, #4]
}
 800c920:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c922:	4b10      	ldr	r3, [pc, #64]	@ (800c964 <vPortEnterCritical+0x5c>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	3301      	adds	r3, #1
 800c928:	4a0e      	ldr	r2, [pc, #56]	@ (800c964 <vPortEnterCritical+0x5c>)
 800c92a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c92c:	4b0d      	ldr	r3, [pc, #52]	@ (800c964 <vPortEnterCritical+0x5c>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2b01      	cmp	r3, #1
 800c932:	d110      	bne.n	800c956 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c934:	4b0c      	ldr	r3, [pc, #48]	@ (800c968 <vPortEnterCritical+0x60>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d00b      	beq.n	800c956 <vPortEnterCritical+0x4e>
	__asm volatile
 800c93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c942:	f383 8811 	msr	BASEPRI, r3
 800c946:	f3bf 8f6f 	isb	sy
 800c94a:	f3bf 8f4f 	dsb	sy
 800c94e:	603b      	str	r3, [r7, #0]
}
 800c950:	bf00      	nop
 800c952:	bf00      	nop
 800c954:	e7fd      	b.n	800c952 <vPortEnterCritical+0x4a>
	}
}
 800c956:	bf00      	nop
 800c958:	370c      	adds	r7, #12
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr
 800c962:	bf00      	nop
 800c964:	200000ac 	.word	0x200000ac
 800c968:	e000ed04 	.word	0xe000ed04

0800c96c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c96c:	b480      	push	{r7}
 800c96e:	b083      	sub	sp, #12
 800c970:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c972:	4b12      	ldr	r3, [pc, #72]	@ (800c9bc <vPortExitCritical+0x50>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d10b      	bne.n	800c992 <vPortExitCritical+0x26>
	__asm volatile
 800c97a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c97e:	f383 8811 	msr	BASEPRI, r3
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	f3bf 8f4f 	dsb	sy
 800c98a:	607b      	str	r3, [r7, #4]
}
 800c98c:	bf00      	nop
 800c98e:	bf00      	nop
 800c990:	e7fd      	b.n	800c98e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c992:	4b0a      	ldr	r3, [pc, #40]	@ (800c9bc <vPortExitCritical+0x50>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	3b01      	subs	r3, #1
 800c998:	4a08      	ldr	r2, [pc, #32]	@ (800c9bc <vPortExitCritical+0x50>)
 800c99a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c99c:	4b07      	ldr	r3, [pc, #28]	@ (800c9bc <vPortExitCritical+0x50>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d105      	bne.n	800c9b0 <vPortExitCritical+0x44>
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	f383 8811 	msr	BASEPRI, r3
}
 800c9ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c9b0:	bf00      	nop
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr
 800c9bc:	200000ac 	.word	0x200000ac

0800c9c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c9c0:	f3ef 8009 	mrs	r0, PSP
 800c9c4:	f3bf 8f6f 	isb	sy
 800c9c8:	4b15      	ldr	r3, [pc, #84]	@ (800ca20 <pxCurrentTCBConst>)
 800c9ca:	681a      	ldr	r2, [r3, #0]
 800c9cc:	f01e 0f10 	tst.w	lr, #16
 800c9d0:	bf08      	it	eq
 800c9d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c9d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9da:	6010      	str	r0, [r2, #0]
 800c9dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c9e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c9e4:	f380 8811 	msr	BASEPRI, r0
 800c9e8:	f3bf 8f4f 	dsb	sy
 800c9ec:	f3bf 8f6f 	isb	sy
 800c9f0:	f7ff f9e4 	bl	800bdbc <vTaskSwitchContext>
 800c9f4:	f04f 0000 	mov.w	r0, #0
 800c9f8:	f380 8811 	msr	BASEPRI, r0
 800c9fc:	bc09      	pop	{r0, r3}
 800c9fe:	6819      	ldr	r1, [r3, #0]
 800ca00:	6808      	ldr	r0, [r1, #0]
 800ca02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca06:	f01e 0f10 	tst.w	lr, #16
 800ca0a:	bf08      	it	eq
 800ca0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ca10:	f380 8809 	msr	PSP, r0
 800ca14:	f3bf 8f6f 	isb	sy
 800ca18:	4770      	bx	lr
 800ca1a:	bf00      	nop
 800ca1c:	f3af 8000 	nop.w

0800ca20 <pxCurrentTCBConst>:
 800ca20:	200051fc 	.word	0x200051fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ca24:	bf00      	nop
 800ca26:	bf00      	nop

0800ca28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca32:	f383 8811 	msr	BASEPRI, r3
 800ca36:	f3bf 8f6f 	isb	sy
 800ca3a:	f3bf 8f4f 	dsb	sy
 800ca3e:	607b      	str	r3, [r7, #4]
}
 800ca40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca42:	f7ff f901 	bl	800bc48 <xTaskIncrementTick>
 800ca46:	4603      	mov	r3, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d003      	beq.n	800ca54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca4c:	4b06      	ldr	r3, [pc, #24]	@ (800ca68 <SysTick_Handler+0x40>)
 800ca4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca52:	601a      	str	r2, [r3, #0]
 800ca54:	2300      	movs	r3, #0
 800ca56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	f383 8811 	msr	BASEPRI, r3
}
 800ca5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca60:	bf00      	nop
 800ca62:	3708      	adds	r7, #8
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	e000ed04 	.word	0xe000ed04

0800ca6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ca70:	4b0b      	ldr	r3, [pc, #44]	@ (800caa0 <vPortSetupTimerInterrupt+0x34>)
 800ca72:	2200      	movs	r2, #0
 800ca74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ca76:	4b0b      	ldr	r3, [pc, #44]	@ (800caa4 <vPortSetupTimerInterrupt+0x38>)
 800ca78:	2200      	movs	r2, #0
 800ca7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ca7c:	4b0a      	ldr	r3, [pc, #40]	@ (800caa8 <vPortSetupTimerInterrupt+0x3c>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a0a      	ldr	r2, [pc, #40]	@ (800caac <vPortSetupTimerInterrupt+0x40>)
 800ca82:	fba2 2303 	umull	r2, r3, r2, r3
 800ca86:	099b      	lsrs	r3, r3, #6
 800ca88:	4a09      	ldr	r2, [pc, #36]	@ (800cab0 <vPortSetupTimerInterrupt+0x44>)
 800ca8a:	3b01      	subs	r3, #1
 800ca8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ca8e:	4b04      	ldr	r3, [pc, #16]	@ (800caa0 <vPortSetupTimerInterrupt+0x34>)
 800ca90:	2207      	movs	r2, #7
 800ca92:	601a      	str	r2, [r3, #0]
}
 800ca94:	bf00      	nop
 800ca96:	46bd      	mov	sp, r7
 800ca98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop
 800caa0:	e000e010 	.word	0xe000e010
 800caa4:	e000e018 	.word	0xe000e018
 800caa8:	20000000 	.word	0x20000000
 800caac:	10624dd3 	.word	0x10624dd3
 800cab0:	e000e014 	.word	0xe000e014

0800cab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cab4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cac4 <vPortEnableVFP+0x10>
 800cab8:	6801      	ldr	r1, [r0, #0]
 800caba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cabe:	6001      	str	r1, [r0, #0]
 800cac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cac2:	bf00      	nop
 800cac4:	e000ed88 	.word	0xe000ed88

0800cac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cac8:	b480      	push	{r7}
 800caca:	b085      	sub	sp, #20
 800cacc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cace:	f3ef 8305 	mrs	r3, IPSR
 800cad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2b0f      	cmp	r3, #15
 800cad8:	d915      	bls.n	800cb06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cada:	4a18      	ldr	r2, [pc, #96]	@ (800cb3c <vPortValidateInterruptPriority+0x74>)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	4413      	add	r3, r2
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cae4:	4b16      	ldr	r3, [pc, #88]	@ (800cb40 <vPortValidateInterruptPriority+0x78>)
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	7afa      	ldrb	r2, [r7, #11]
 800caea:	429a      	cmp	r2, r3
 800caec:	d20b      	bcs.n	800cb06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800caee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf2:	f383 8811 	msr	BASEPRI, r3
 800caf6:	f3bf 8f6f 	isb	sy
 800cafa:	f3bf 8f4f 	dsb	sy
 800cafe:	607b      	str	r3, [r7, #4]
}
 800cb00:	bf00      	nop
 800cb02:	bf00      	nop
 800cb04:	e7fd      	b.n	800cb02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb06:	4b0f      	ldr	r3, [pc, #60]	@ (800cb44 <vPortValidateInterruptPriority+0x7c>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cb0e:	4b0e      	ldr	r3, [pc, #56]	@ (800cb48 <vPortValidateInterruptPriority+0x80>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d90b      	bls.n	800cb2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cb16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb1a:	f383 8811 	msr	BASEPRI, r3
 800cb1e:	f3bf 8f6f 	isb	sy
 800cb22:	f3bf 8f4f 	dsb	sy
 800cb26:	603b      	str	r3, [r7, #0]
}
 800cb28:	bf00      	nop
 800cb2a:	bf00      	nop
 800cb2c:	e7fd      	b.n	800cb2a <vPortValidateInterruptPriority+0x62>
	}
 800cb2e:	bf00      	nop
 800cb30:	3714      	adds	r7, #20
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr
 800cb3a:	bf00      	nop
 800cb3c:	e000e3f0 	.word	0xe000e3f0
 800cb40:	20005328 	.word	0x20005328
 800cb44:	e000ed0c 	.word	0xe000ed0c
 800cb48:	2000532c 	.word	0x2000532c

0800cb4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b08a      	sub	sp, #40	@ 0x28
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cb54:	2300      	movs	r3, #0
 800cb56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cb58:	f7fe ffa8 	bl	800baac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cb5c:	4b5c      	ldr	r3, [pc, #368]	@ (800ccd0 <pvPortMalloc+0x184>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d101      	bne.n	800cb68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cb64:	f000 f924 	bl	800cdb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cb68:	4b5a      	ldr	r3, [pc, #360]	@ (800ccd4 <pvPortMalloc+0x188>)
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	4013      	ands	r3, r2
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	f040 8095 	bne.w	800cca0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d01e      	beq.n	800cbba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cb7c:	2208      	movs	r2, #8
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4413      	add	r3, r2
 800cb82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f003 0307 	and.w	r3, r3, #7
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d015      	beq.n	800cbba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f023 0307 	bic.w	r3, r3, #7
 800cb94:	3308      	adds	r3, #8
 800cb96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f003 0307 	and.w	r3, r3, #7
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d00b      	beq.n	800cbba <pvPortMalloc+0x6e>
	__asm volatile
 800cba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cba6:	f383 8811 	msr	BASEPRI, r3
 800cbaa:	f3bf 8f6f 	isb	sy
 800cbae:	f3bf 8f4f 	dsb	sy
 800cbb2:	617b      	str	r3, [r7, #20]
}
 800cbb4:	bf00      	nop
 800cbb6:	bf00      	nop
 800cbb8:	e7fd      	b.n	800cbb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d06f      	beq.n	800cca0 <pvPortMalloc+0x154>
 800cbc0:	4b45      	ldr	r3, [pc, #276]	@ (800ccd8 <pvPortMalloc+0x18c>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d86a      	bhi.n	800cca0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cbca:	4b44      	ldr	r3, [pc, #272]	@ (800ccdc <pvPortMalloc+0x190>)
 800cbcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cbce:	4b43      	ldr	r3, [pc, #268]	@ (800ccdc <pvPortMalloc+0x190>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cbd4:	e004      	b.n	800cbe0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	687a      	ldr	r2, [r7, #4]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d903      	bls.n	800cbf2 <pvPortMalloc+0xa6>
 800cbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d1f1      	bne.n	800cbd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cbf2:	4b37      	ldr	r3, [pc, #220]	@ (800ccd0 <pvPortMalloc+0x184>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d051      	beq.n	800cca0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cbfc:	6a3b      	ldr	r3, [r7, #32]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2208      	movs	r2, #8
 800cc02:	4413      	add	r3, r2
 800cc04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	6a3b      	ldr	r3, [r7, #32]
 800cc0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cc0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc10:	685a      	ldr	r2, [r3, #4]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	1ad2      	subs	r2, r2, r3
 800cc16:	2308      	movs	r3, #8
 800cc18:	005b      	lsls	r3, r3, #1
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d920      	bls.n	800cc60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cc1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	4413      	add	r3, r2
 800cc24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	f003 0307 	and.w	r3, r3, #7
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d00b      	beq.n	800cc48 <pvPortMalloc+0xfc>
	__asm volatile
 800cc30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	613b      	str	r3, [r7, #16]
}
 800cc42:	bf00      	nop
 800cc44:	bf00      	nop
 800cc46:	e7fd      	b.n	800cc44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cc48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4a:	685a      	ldr	r2, [r3, #4]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	1ad2      	subs	r2, r2, r3
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cc5a:	69b8      	ldr	r0, [r7, #24]
 800cc5c:	f000 f90a 	bl	800ce74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc60:	4b1d      	ldr	r3, [pc, #116]	@ (800ccd8 <pvPortMalloc+0x18c>)
 800cc62:	681a      	ldr	r2, [r3, #0]
 800cc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	1ad3      	subs	r3, r2, r3
 800cc6a:	4a1b      	ldr	r2, [pc, #108]	@ (800ccd8 <pvPortMalloc+0x18c>)
 800cc6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc6e:	4b1a      	ldr	r3, [pc, #104]	@ (800ccd8 <pvPortMalloc+0x18c>)
 800cc70:	681a      	ldr	r2, [r3, #0]
 800cc72:	4b1b      	ldr	r3, [pc, #108]	@ (800cce0 <pvPortMalloc+0x194>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d203      	bcs.n	800cc82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cc7a:	4b17      	ldr	r3, [pc, #92]	@ (800ccd8 <pvPortMalloc+0x18c>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a18      	ldr	r2, [pc, #96]	@ (800cce0 <pvPortMalloc+0x194>)
 800cc80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cc82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc84:	685a      	ldr	r2, [r3, #4]
 800cc86:	4b13      	ldr	r3, [pc, #76]	@ (800ccd4 <pvPortMalloc+0x188>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	431a      	orrs	r2, r3
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cc90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc92:	2200      	movs	r2, #0
 800cc94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cc96:	4b13      	ldr	r3, [pc, #76]	@ (800cce4 <pvPortMalloc+0x198>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	4a11      	ldr	r2, [pc, #68]	@ (800cce4 <pvPortMalloc+0x198>)
 800cc9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cca0:	f7fe ff12 	bl	800bac8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	f003 0307 	and.w	r3, r3, #7
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d00b      	beq.n	800ccc6 <pvPortMalloc+0x17a>
	__asm volatile
 800ccae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccb2:	f383 8811 	msr	BASEPRI, r3
 800ccb6:	f3bf 8f6f 	isb	sy
 800ccba:	f3bf 8f4f 	dsb	sy
 800ccbe:	60fb      	str	r3, [r7, #12]
}
 800ccc0:	bf00      	nop
 800ccc2:	bf00      	nop
 800ccc4:	e7fd      	b.n	800ccc2 <pvPortMalloc+0x176>
	return pvReturn;
 800ccc6:	69fb      	ldr	r3, [r7, #28]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3728      	adds	r7, #40	@ 0x28
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	20008f38 	.word	0x20008f38
 800ccd4:	20008f4c 	.word	0x20008f4c
 800ccd8:	20008f3c 	.word	0x20008f3c
 800ccdc:	20008f30 	.word	0x20008f30
 800cce0:	20008f40 	.word	0x20008f40
 800cce4:	20008f44 	.word	0x20008f44

0800cce8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b086      	sub	sp, #24
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d04f      	beq.n	800cd9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ccfa:	2308      	movs	r3, #8
 800ccfc:	425b      	negs	r3, r3
 800ccfe:	697a      	ldr	r2, [r7, #20]
 800cd00:	4413      	add	r3, r2
 800cd02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	685a      	ldr	r2, [r3, #4]
 800cd0c:	4b25      	ldr	r3, [pc, #148]	@ (800cda4 <vPortFree+0xbc>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4013      	ands	r3, r2
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d10b      	bne.n	800cd2e <vPortFree+0x46>
	__asm volatile
 800cd16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd1a:	f383 8811 	msr	BASEPRI, r3
 800cd1e:	f3bf 8f6f 	isb	sy
 800cd22:	f3bf 8f4f 	dsb	sy
 800cd26:	60fb      	str	r3, [r7, #12]
}
 800cd28:	bf00      	nop
 800cd2a:	bf00      	nop
 800cd2c:	e7fd      	b.n	800cd2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d00b      	beq.n	800cd4e <vPortFree+0x66>
	__asm volatile
 800cd36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd3a:	f383 8811 	msr	BASEPRI, r3
 800cd3e:	f3bf 8f6f 	isb	sy
 800cd42:	f3bf 8f4f 	dsb	sy
 800cd46:	60bb      	str	r3, [r7, #8]
}
 800cd48:	bf00      	nop
 800cd4a:	bf00      	nop
 800cd4c:	e7fd      	b.n	800cd4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	685a      	ldr	r2, [r3, #4]
 800cd52:	4b14      	ldr	r3, [pc, #80]	@ (800cda4 <vPortFree+0xbc>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4013      	ands	r3, r2
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d01e      	beq.n	800cd9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d11a      	bne.n	800cd9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	685a      	ldr	r2, [r3, #4]
 800cd68:	4b0e      	ldr	r3, [pc, #56]	@ (800cda4 <vPortFree+0xbc>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	43db      	mvns	r3, r3
 800cd6e:	401a      	ands	r2, r3
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cd74:	f7fe fe9a 	bl	800baac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	685a      	ldr	r2, [r3, #4]
 800cd7c:	4b0a      	ldr	r3, [pc, #40]	@ (800cda8 <vPortFree+0xc0>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4413      	add	r3, r2
 800cd82:	4a09      	ldr	r2, [pc, #36]	@ (800cda8 <vPortFree+0xc0>)
 800cd84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cd86:	6938      	ldr	r0, [r7, #16]
 800cd88:	f000 f874 	bl	800ce74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cd8c:	4b07      	ldr	r3, [pc, #28]	@ (800cdac <vPortFree+0xc4>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	3301      	adds	r3, #1
 800cd92:	4a06      	ldr	r2, [pc, #24]	@ (800cdac <vPortFree+0xc4>)
 800cd94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cd96:	f7fe fe97 	bl	800bac8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cd9a:	bf00      	nop
 800cd9c:	3718      	adds	r7, #24
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	20008f4c 	.word	0x20008f4c
 800cda8:	20008f3c 	.word	0x20008f3c
 800cdac:	20008f48 	.word	0x20008f48

0800cdb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b085      	sub	sp, #20
 800cdb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cdb6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cdba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cdbc:	4b27      	ldr	r3, [pc, #156]	@ (800ce5c <prvHeapInit+0xac>)
 800cdbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f003 0307 	and.w	r3, r3, #7
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00c      	beq.n	800cde4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	3307      	adds	r3, #7
 800cdce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f023 0307 	bic.w	r3, r3, #7
 800cdd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cdd8:	68ba      	ldr	r2, [r7, #8]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	1ad3      	subs	r3, r2, r3
 800cdde:	4a1f      	ldr	r2, [pc, #124]	@ (800ce5c <prvHeapInit+0xac>)
 800cde0:	4413      	add	r3, r2
 800cde2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cde8:	4a1d      	ldr	r2, [pc, #116]	@ (800ce60 <prvHeapInit+0xb0>)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cdee:	4b1c      	ldr	r3, [pc, #112]	@ (800ce60 <prvHeapInit+0xb0>)
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	68ba      	ldr	r2, [r7, #8]
 800cdf8:	4413      	add	r3, r2
 800cdfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cdfc:	2208      	movs	r2, #8
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	1a9b      	subs	r3, r3, r2
 800ce02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f023 0307 	bic.w	r3, r3, #7
 800ce0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	4a15      	ldr	r2, [pc, #84]	@ (800ce64 <prvHeapInit+0xb4>)
 800ce10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ce12:	4b14      	ldr	r3, [pc, #80]	@ (800ce64 <prvHeapInit+0xb4>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	2200      	movs	r2, #0
 800ce18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ce1a:	4b12      	ldr	r3, [pc, #72]	@ (800ce64 <prvHeapInit+0xb4>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	1ad2      	subs	r2, r2, r3
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ce30:	4b0c      	ldr	r3, [pc, #48]	@ (800ce64 <prvHeapInit+0xb4>)
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	4a0a      	ldr	r2, [pc, #40]	@ (800ce68 <prvHeapInit+0xb8>)
 800ce3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	4a09      	ldr	r2, [pc, #36]	@ (800ce6c <prvHeapInit+0xbc>)
 800ce46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ce48:	4b09      	ldr	r3, [pc, #36]	@ (800ce70 <prvHeapInit+0xc0>)
 800ce4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ce4e:	601a      	str	r2, [r3, #0]
}
 800ce50:	bf00      	nop
 800ce52:	3714      	adds	r7, #20
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr
 800ce5c:	20005330 	.word	0x20005330
 800ce60:	20008f30 	.word	0x20008f30
 800ce64:	20008f38 	.word	0x20008f38
 800ce68:	20008f40 	.word	0x20008f40
 800ce6c:	20008f3c 	.word	0x20008f3c
 800ce70:	20008f4c 	.word	0x20008f4c

0800ce74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ce74:	b480      	push	{r7}
 800ce76:	b085      	sub	sp, #20
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ce7c:	4b28      	ldr	r3, [pc, #160]	@ (800cf20 <prvInsertBlockIntoFreeList+0xac>)
 800ce7e:	60fb      	str	r3, [r7, #12]
 800ce80:	e002      	b.n	800ce88 <prvInsertBlockIntoFreeList+0x14>
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	60fb      	str	r3, [r7, #12]
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	687a      	ldr	r2, [r7, #4]
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d8f7      	bhi.n	800ce82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	68ba      	ldr	r2, [r7, #8]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d108      	bne.n	800ceb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	685a      	ldr	r2, [r3, #4]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	441a      	add	r2, r3
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	68ba      	ldr	r2, [r7, #8]
 800cec0:	441a      	add	r2, r3
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d118      	bne.n	800cefc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	4b15      	ldr	r3, [pc, #84]	@ (800cf24 <prvInsertBlockIntoFreeList+0xb0>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d00d      	beq.n	800cef2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	685a      	ldr	r2, [r3, #4]
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	441a      	add	r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	681a      	ldr	r2, [r3, #0]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	601a      	str	r2, [r3, #0]
 800cef0:	e008      	b.n	800cf04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cef2:	4b0c      	ldr	r3, [pc, #48]	@ (800cf24 <prvInsertBlockIntoFreeList+0xb0>)
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	601a      	str	r2, [r3, #0]
 800cefa:	e003      	b.n	800cf04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681a      	ldr	r2, [r3, #0]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cf04:	68fa      	ldr	r2, [r7, #12]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d002      	beq.n	800cf12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	687a      	ldr	r2, [r7, #4]
 800cf10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf12:	bf00      	nop
 800cf14:	3714      	adds	r7, #20
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr
 800cf1e:	bf00      	nop
 800cf20:	20008f30 	.word	0x20008f30
 800cf24:	20008f38 	.word	0x20008f38

0800cf28 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800cf32:	f007 fe5f 	bl	8014bf4 <sys_timeouts_sleeptime>
 800cf36:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf3e:	d10b      	bne.n	800cf58 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800cf40:	4813      	ldr	r0, [pc, #76]	@ (800cf90 <tcpip_timeouts_mbox_fetch+0x68>)
 800cf42:	f00b fd24 	bl	801898e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800cf46:	2200      	movs	r2, #0
 800cf48:	6839      	ldr	r1, [r7, #0]
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f00b fc76 	bl	801883c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800cf50:	480f      	ldr	r0, [pc, #60]	@ (800cf90 <tcpip_timeouts_mbox_fetch+0x68>)
 800cf52:	f00b fd0d 	bl	8018970 <sys_mutex_lock>
    return;
 800cf56:	e018      	b.n	800cf8a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d102      	bne.n	800cf64 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800cf5e:	f007 fe0f 	bl	8014b80 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cf62:	e7e6      	b.n	800cf32 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800cf64:	480a      	ldr	r0, [pc, #40]	@ (800cf90 <tcpip_timeouts_mbox_fetch+0x68>)
 800cf66:	f00b fd12 	bl	801898e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800cf6a:	68fa      	ldr	r2, [r7, #12]
 800cf6c:	6839      	ldr	r1, [r7, #0]
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f00b fc64 	bl	801883c <sys_arch_mbox_fetch>
 800cf74:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800cf76:	4806      	ldr	r0, [pc, #24]	@ (800cf90 <tcpip_timeouts_mbox_fetch+0x68>)
 800cf78:	f00b fcfa 	bl	8018970 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf82:	d102      	bne.n	800cf8a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800cf84:	f007 fdfc 	bl	8014b80 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cf88:	e7d3      	b.n	800cf32 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	20008f5c 	.word	0x20008f5c

0800cf94 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800cf9c:	4810      	ldr	r0, [pc, #64]	@ (800cfe0 <tcpip_thread+0x4c>)
 800cf9e:	f00b fce7 	bl	8018970 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800cfa2:	4b10      	ldr	r3, [pc, #64]	@ (800cfe4 <tcpip_thread+0x50>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d005      	beq.n	800cfb6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800cfaa:	4b0e      	ldr	r3, [pc, #56]	@ (800cfe4 <tcpip_thread+0x50>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4a0e      	ldr	r2, [pc, #56]	@ (800cfe8 <tcpip_thread+0x54>)
 800cfb0:	6812      	ldr	r2, [r2, #0]
 800cfb2:	4610      	mov	r0, r2
 800cfb4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cfb6:	f107 030c 	add.w	r3, r7, #12
 800cfba:	4619      	mov	r1, r3
 800cfbc:	480b      	ldr	r0, [pc, #44]	@ (800cfec <tcpip_thread+0x58>)
 800cfbe:	f7ff ffb3 	bl	800cf28 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d106      	bne.n	800cfd6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cfc8:	4b09      	ldr	r3, [pc, #36]	@ (800cff0 <tcpip_thread+0x5c>)
 800cfca:	2291      	movs	r2, #145	@ 0x91
 800cfcc:	4909      	ldr	r1, [pc, #36]	@ (800cff4 <tcpip_thread+0x60>)
 800cfce:	480a      	ldr	r0, [pc, #40]	@ (800cff8 <tcpip_thread+0x64>)
 800cfd0:	f00c fb48 	bl	8019664 <iprintf>
      continue;
 800cfd4:	e003      	b.n	800cfde <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f000 f80f 	bl	800cffc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cfde:	e7ea      	b.n	800cfb6 <tcpip_thread+0x22>
 800cfe0:	20008f5c 	.word	0x20008f5c
 800cfe4:	20008f50 	.word	0x20008f50
 800cfe8:	20008f54 	.word	0x20008f54
 800cfec:	20008f58 	.word	0x20008f58
 800cff0:	0801b2b4 	.word	0x0801b2b4
 800cff4:	0801b2e4 	.word	0x0801b2e4
 800cff8:	0801b304 	.word	0x0801b304

0800cffc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	2b02      	cmp	r3, #2
 800d00a:	d026      	beq.n	800d05a <tcpip_thread_handle_msg+0x5e>
 800d00c:	2b02      	cmp	r3, #2
 800d00e:	dc2b      	bgt.n	800d068 <tcpip_thread_handle_msg+0x6c>
 800d010:	2b00      	cmp	r3, #0
 800d012:	d002      	beq.n	800d01a <tcpip_thread_handle_msg+0x1e>
 800d014:	2b01      	cmp	r3, #1
 800d016:	d015      	beq.n	800d044 <tcpip_thread_handle_msg+0x48>
 800d018:	e026      	b.n	800d068 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	6850      	ldr	r0, [r2, #4]
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	6892      	ldr	r2, [r2, #8]
 800d026:	4611      	mov	r1, r2
 800d028:	4798      	blx	r3
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d004      	beq.n	800d03a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	4618      	mov	r0, r3
 800d036:	f001 ffb5 	bl	800efa4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d03a:	6879      	ldr	r1, [r7, #4]
 800d03c:	2009      	movs	r0, #9
 800d03e:	f000 fff7 	bl	800e030 <memp_free>
      break;
 800d042:	e018      	b.n	800d076 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	6892      	ldr	r2, [r2, #8]
 800d04c:	4610      	mov	r0, r2
 800d04e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d050:	6879      	ldr	r1, [r7, #4]
 800d052:	2008      	movs	r0, #8
 800d054:	f000 ffec 	bl	800e030 <memp_free>
      break;
 800d058:	e00d      	b.n	800d076 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	6892      	ldr	r2, [r2, #8]
 800d062:	4610      	mov	r0, r2
 800d064:	4798      	blx	r3
      break;
 800d066:	e006      	b.n	800d076 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d068:	4b05      	ldr	r3, [pc, #20]	@ (800d080 <tcpip_thread_handle_msg+0x84>)
 800d06a:	22cf      	movs	r2, #207	@ 0xcf
 800d06c:	4905      	ldr	r1, [pc, #20]	@ (800d084 <tcpip_thread_handle_msg+0x88>)
 800d06e:	4806      	ldr	r0, [pc, #24]	@ (800d088 <tcpip_thread_handle_msg+0x8c>)
 800d070:	f00c faf8 	bl	8019664 <iprintf>
      break;
 800d074:	bf00      	nop
  }
}
 800d076:	bf00      	nop
 800d078:	3708      	adds	r7, #8
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	0801b2b4 	.word	0x0801b2b4
 800d084:	0801b2e4 	.word	0x0801b2e4
 800d088:	0801b304 	.word	0x0801b304

0800d08c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b086      	sub	sp, #24
 800d090:	af00      	add	r7, sp, #0
 800d092:	60f8      	str	r0, [r7, #12]
 800d094:	60b9      	str	r1, [r7, #8]
 800d096:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d098:	481a      	ldr	r0, [pc, #104]	@ (800d104 <tcpip_inpkt+0x78>)
 800d09a:	f00b fc0e 	bl	80188ba <sys_mbox_valid>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d105      	bne.n	800d0b0 <tcpip_inpkt+0x24>
 800d0a4:	4b18      	ldr	r3, [pc, #96]	@ (800d108 <tcpip_inpkt+0x7c>)
 800d0a6:	22fc      	movs	r2, #252	@ 0xfc
 800d0a8:	4918      	ldr	r1, [pc, #96]	@ (800d10c <tcpip_inpkt+0x80>)
 800d0aa:	4819      	ldr	r0, [pc, #100]	@ (800d110 <tcpip_inpkt+0x84>)
 800d0ac:	f00c fada 	bl	8019664 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d0b0:	2009      	movs	r0, #9
 800d0b2:	f000 ff41 	bl	800df38 <memp_malloc>
 800d0b6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d102      	bne.n	800d0c4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d0be:	f04f 33ff 	mov.w	r3, #4294967295
 800d0c2:	e01a      	b.n	800d0fa <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	68fa      	ldr	r2, [r7, #12]
 800d0ce:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	68ba      	ldr	r2, [r7, #8]
 800d0d4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d0dc:	6979      	ldr	r1, [r7, #20]
 800d0de:	4809      	ldr	r0, [pc, #36]	@ (800d104 <tcpip_inpkt+0x78>)
 800d0e0:	f00b fb88 	bl	80187f4 <sys_mbox_trypost>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d006      	beq.n	800d0f8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d0ea:	6979      	ldr	r1, [r7, #20]
 800d0ec:	2009      	movs	r0, #9
 800d0ee:	f000 ff9f 	bl	800e030 <memp_free>
    return ERR_MEM;
 800d0f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d0f6:	e000      	b.n	800d0fa <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d0f8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3718      	adds	r7, #24
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	20008f58 	.word	0x20008f58
 800d108:	0801b2b4 	.word	0x0801b2b4
 800d10c:	0801b32c 	.word	0x0801b32c
 800d110:	0801b304 	.word	0x0801b304

0800d114 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d124:	f003 0318 	and.w	r3, r3, #24
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d006      	beq.n	800d13a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d12c:	4a08      	ldr	r2, [pc, #32]	@ (800d150 <tcpip_input+0x3c>)
 800d12e:	6839      	ldr	r1, [r7, #0]
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f7ff ffab 	bl	800d08c <tcpip_inpkt>
 800d136:	4603      	mov	r3, r0
 800d138:	e005      	b.n	800d146 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d13a:	4a06      	ldr	r2, [pc, #24]	@ (800d154 <tcpip_input+0x40>)
 800d13c:	6839      	ldr	r1, [r7, #0]
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f7ff ffa4 	bl	800d08c <tcpip_inpkt>
 800d144:	4603      	mov	r3, r0
}
 800d146:	4618      	mov	r0, r3
 800d148:	3708      	adds	r7, #8
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	080184a1 	.word	0x080184a1
 800d154:	08016fc1 	.word	0x08016fc1

0800d158 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d162:	4819      	ldr	r0, [pc, #100]	@ (800d1c8 <tcpip_try_callback+0x70>)
 800d164:	f00b fba9 	bl	80188ba <sys_mbox_valid>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d106      	bne.n	800d17c <tcpip_try_callback+0x24>
 800d16e:	4b17      	ldr	r3, [pc, #92]	@ (800d1cc <tcpip_try_callback+0x74>)
 800d170:	f240 125d 	movw	r2, #349	@ 0x15d
 800d174:	4916      	ldr	r1, [pc, #88]	@ (800d1d0 <tcpip_try_callback+0x78>)
 800d176:	4817      	ldr	r0, [pc, #92]	@ (800d1d4 <tcpip_try_callback+0x7c>)
 800d178:	f00c fa74 	bl	8019664 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d17c:	2008      	movs	r0, #8
 800d17e:	f000 fedb 	bl	800df38 <memp_malloc>
 800d182:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d102      	bne.n	800d190 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d18a:	f04f 33ff 	mov.w	r3, #4294967295
 800d18e:	e017      	b.n	800d1c0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2201      	movs	r2, #1
 800d194:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	687a      	ldr	r2, [r7, #4]
 800d19a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	683a      	ldr	r2, [r7, #0]
 800d1a0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d1a2:	68f9      	ldr	r1, [r7, #12]
 800d1a4:	4808      	ldr	r0, [pc, #32]	@ (800d1c8 <tcpip_try_callback+0x70>)
 800d1a6:	f00b fb25 	bl	80187f4 <sys_mbox_trypost>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d006      	beq.n	800d1be <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d1b0:	68f9      	ldr	r1, [r7, #12]
 800d1b2:	2008      	movs	r0, #8
 800d1b4:	f000 ff3c 	bl	800e030 <memp_free>
    return ERR_MEM;
 800d1b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d1bc:	e000      	b.n	800d1c0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d1be:	2300      	movs	r3, #0
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3710      	adds	r7, #16
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}
 800d1c8:	20008f58 	.word	0x20008f58
 800d1cc:	0801b2b4 	.word	0x0801b2b4
 800d1d0:	0801b32c 	.word	0x0801b32c
 800d1d4:	0801b304 	.word	0x0801b304

0800d1d8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af02      	add	r7, sp, #8
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d1e2:	f000 f92e 	bl	800d442 <lwip_init>

  tcpip_init_done = initfunc;
 800d1e6:	4a17      	ldr	r2, [pc, #92]	@ (800d244 <tcpip_init+0x6c>)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d1ec:	4a16      	ldr	r2, [pc, #88]	@ (800d248 <tcpip_init+0x70>)
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d1f2:	2106      	movs	r1, #6
 800d1f4:	4815      	ldr	r0, [pc, #84]	@ (800d24c <tcpip_init+0x74>)
 800d1f6:	f00b fac3 	bl	8018780 <sys_mbox_new>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d006      	beq.n	800d20e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d200:	4b13      	ldr	r3, [pc, #76]	@ (800d250 <tcpip_init+0x78>)
 800d202:	f240 2261 	movw	r2, #609	@ 0x261
 800d206:	4913      	ldr	r1, [pc, #76]	@ (800d254 <tcpip_init+0x7c>)
 800d208:	4813      	ldr	r0, [pc, #76]	@ (800d258 <tcpip_init+0x80>)
 800d20a:	f00c fa2b 	bl	8019664 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d20e:	4813      	ldr	r0, [pc, #76]	@ (800d25c <tcpip_init+0x84>)
 800d210:	f00b fb72 	bl	80188f8 <sys_mutex_new>
 800d214:	4603      	mov	r3, r0
 800d216:	2b00      	cmp	r3, #0
 800d218:	d006      	beq.n	800d228 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d21a:	4b0d      	ldr	r3, [pc, #52]	@ (800d250 <tcpip_init+0x78>)
 800d21c:	f240 2265 	movw	r2, #613	@ 0x265
 800d220:	490f      	ldr	r1, [pc, #60]	@ (800d260 <tcpip_init+0x88>)
 800d222:	480d      	ldr	r0, [pc, #52]	@ (800d258 <tcpip_init+0x80>)
 800d224:	f00c fa1e 	bl	8019664 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d228:	2300      	movs	r3, #0
 800d22a:	9300      	str	r3, [sp, #0]
 800d22c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d230:	2200      	movs	r2, #0
 800d232:	490c      	ldr	r1, [pc, #48]	@ (800d264 <tcpip_init+0x8c>)
 800d234:	480c      	ldr	r0, [pc, #48]	@ (800d268 <tcpip_init+0x90>)
 800d236:	f00b fbb7 	bl	80189a8 <sys_thread_new>
}
 800d23a:	bf00      	nop
 800d23c:	3708      	adds	r7, #8
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	20008f50 	.word	0x20008f50
 800d248:	20008f54 	.word	0x20008f54
 800d24c:	20008f58 	.word	0x20008f58
 800d250:	0801b2b4 	.word	0x0801b2b4
 800d254:	0801b33c 	.word	0x0801b33c
 800d258:	0801b304 	.word	0x0801b304
 800d25c:	20008f5c 	.word	0x20008f5c
 800d260:	0801b360 	.word	0x0801b360
 800d264:	0800cf95 	.word	0x0800cf95
 800d268:	0801b384 	.word	0x0801b384

0800d26c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b083      	sub	sp, #12
 800d270:	af00      	add	r7, sp, #0
 800d272:	4603      	mov	r3, r0
 800d274:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d27a:	021b      	lsls	r3, r3, #8
 800d27c:	b21a      	sxth	r2, r3
 800d27e:	88fb      	ldrh	r3, [r7, #6]
 800d280:	0a1b      	lsrs	r3, r3, #8
 800d282:	b29b      	uxth	r3, r3
 800d284:	b21b      	sxth	r3, r3
 800d286:	4313      	orrs	r3, r2
 800d288:	b21b      	sxth	r3, r3
 800d28a:	b29b      	uxth	r3, r3
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	370c      	adds	r7, #12
 800d290:	46bd      	mov	sp, r7
 800d292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d296:	4770      	bx	lr

0800d298 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d298:	b480      	push	{r7}
 800d29a:	b083      	sub	sp, #12
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	061a      	lsls	r2, r3, #24
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	021b      	lsls	r3, r3, #8
 800d2a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d2ac:	431a      	orrs	r2, r3
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	0a1b      	lsrs	r3, r3, #8
 800d2b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d2b6:	431a      	orrs	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	0e1b      	lsrs	r3, r3, #24
 800d2bc:	4313      	orrs	r3, r2
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	370c      	adds	r7, #12
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr

0800d2ca <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800d2ca:	b480      	push	{r7}
 800d2cc:	b089      	sub	sp, #36	@ 0x24
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
 800d2d2:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800d2e0:	69fb      	ldr	r3, [r7, #28]
 800d2e2:	f003 0301 	and.w	r3, r3, #1
 800d2e6:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d00d      	beq.n	800d30a <lwip_standard_chksum+0x40>
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	dd0a      	ble.n	800d30a <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800d2f4:	69fa      	ldr	r2, [r7, #28]
 800d2f6:	1c53      	adds	r3, r2, #1
 800d2f8:	61fb      	str	r3, [r7, #28]
 800d2fa:	f107 030e 	add.w	r3, r7, #14
 800d2fe:	3301      	adds	r3, #1
 800d300:	7812      	ldrb	r2, [r2, #0]
 800d302:	701a      	strb	r2, [r3, #0]
    len--;
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	3b01      	subs	r3, #1
 800d308:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800d30a:	69fb      	ldr	r3, [r7, #28]
 800d30c:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800d30e:	e00a      	b.n	800d326 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	1c9a      	adds	r2, r3, #2
 800d314:	61ba      	str	r2, [r7, #24]
 800d316:	881b      	ldrh	r3, [r3, #0]
 800d318:	461a      	mov	r2, r3
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	4413      	add	r3, r2
 800d31e:	617b      	str	r3, [r7, #20]
    len -= 2;
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	3b02      	subs	r3, #2
 800d324:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	2b01      	cmp	r3, #1
 800d32a:	dcf1      	bgt.n	800d310 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	dd04      	ble.n	800d33c <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800d332:	f107 030e 	add.w	r3, r7, #14
 800d336:	69ba      	ldr	r2, [r7, #24]
 800d338:	7812      	ldrb	r2, [r2, #0]
 800d33a:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800d33c:	89fb      	ldrh	r3, [r7, #14]
 800d33e:	461a      	mov	r2, r3
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	4413      	add	r3, r2
 800d344:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	0c1a      	lsrs	r2, r3, #16
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	4413      	add	r3, r2
 800d350:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	0c1a      	lsrs	r2, r3, #16
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	b29b      	uxth	r3, r3
 800d35a:	4413      	add	r3, r2
 800d35c:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d007      	beq.n	800d374 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	021b      	lsls	r3, r3, #8
 800d368:	b29a      	uxth	r2, r3
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	0a1b      	lsrs	r3, r3, #8
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	4313      	orrs	r3, r2
 800d372:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	b29b      	uxth	r3, r3
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3724      	adds	r7, #36	@ 0x24
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	460b      	mov	r3, r1
 800d38e:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800d390:	887b      	ldrh	r3, [r7, #2]
 800d392:	4619      	mov	r1, r3
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f7ff ff98 	bl	800d2ca <lwip_standard_chksum>
 800d39a:	4603      	mov	r3, r0
 800d39c:	43db      	mvns	r3, r3
 800d39e:	b29b      	uxth	r3, r3
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b086      	sub	sp, #24
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	613b      	str	r3, [r7, #16]
 800d3bc:	e02b      	b.n	800d416 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	685a      	ldr	r2, [r3, #4]
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	895b      	ldrh	r3, [r3, #10]
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	4610      	mov	r0, r2
 800d3ca:	f7ff ff7e 	bl	800d2ca <lwip_standard_chksum>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	4413      	add	r3, r2
 800d3d6:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	0c1a      	lsrs	r2, r3, #16
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	b29b      	uxth	r3, r3
 800d3e0:	4413      	add	r3, r2
 800d3e2:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	895b      	ldrh	r3, [r3, #10]
 800d3e8:	f003 0301 	and.w	r3, r3, #1
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d00e      	beq.n	800d410 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	bf0c      	ite	eq
 800d3f8:	2301      	moveq	r3, #1
 800d3fa:	2300      	movne	r3, #0
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	021b      	lsls	r3, r3, #8
 800d404:	b29a      	uxth	r2, r3
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	0a1b      	lsrs	r3, r3, #8
 800d40a:	b2db      	uxtb	r3, r3
 800d40c:	4313      	orrs	r3, r2
 800d40e:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	613b      	str	r3, [r7, #16]
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d1d0      	bne.n	800d3be <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d007      	beq.n	800d432 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	021b      	lsls	r3, r3, #8
 800d426:	b29a      	uxth	r2, r3
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	0a1b      	lsrs	r3, r3, #8
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	4313      	orrs	r3, r2
 800d430:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	b29b      	uxth	r3, r3
 800d436:	43db      	mvns	r3, r3
 800d438:	b29b      	uxth	r3, r3
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3718      	adds	r7, #24
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}

0800d442 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b082      	sub	sp, #8
 800d446:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d448:	2300      	movs	r3, #0
 800d44a:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 800d44c:	f002 f844 	bl	800f4d8 <stats_init>
#if !NO_SYS
  sys_init();
 800d450:	f00b fa44 	bl	80188dc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d454:	f000 f8d6 	bl	800d604 <mem_init>
  memp_init();
 800d458:	f000 fcd8 	bl	800de0c <memp_init>
  pbuf_init();
  netif_init();
 800d45c:	f000 fe12 	bl	800e084 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d460:	f007 fc00 	bl	8014c64 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d464:	f002 f848 	bl	800f4f8 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 800d468:	f009 f9ce 	bl	8016808 <igmp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d46c:	f007 fb40 	bl	8014af0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d470:	bf00      	nop
 800d472:	3708      	adds	r7, #8
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d478:	b480      	push	{r7}
 800d47a:	b083      	sub	sp, #12
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	4603      	mov	r3, r0
 800d480:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d482:	4b05      	ldr	r3, [pc, #20]	@ (800d498 <ptr_to_mem+0x20>)
 800d484:	681a      	ldr	r2, [r3, #0]
 800d486:	88fb      	ldrh	r3, [r7, #6]
 800d488:	4413      	add	r3, r2
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	370c      	adds	r7, #12
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr
 800d496:	bf00      	nop
 800d498:	2000b78c 	.word	0x2000b78c

0800d49c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d4a4:	4b05      	ldr	r3, [pc, #20]	@ (800d4bc <mem_to_ptr+0x20>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	1ad3      	subs	r3, r2, r3
 800d4ac:	b29b      	uxth	r3, r3
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	370c      	adds	r7, #12
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b8:	4770      	bx	lr
 800d4ba:	bf00      	nop
 800d4bc:	2000b78c 	.word	0x2000b78c

0800d4c0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d4c0:	b590      	push	{r4, r7, lr}
 800d4c2:	b085      	sub	sp, #20
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d4c8:	4b45      	ldr	r3, [pc, #276]	@ (800d5e0 <plug_holes+0x120>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d206      	bcs.n	800d4e0 <plug_holes+0x20>
 800d4d2:	4b44      	ldr	r3, [pc, #272]	@ (800d5e4 <plug_holes+0x124>)
 800d4d4:	f240 12df 	movw	r2, #479	@ 0x1df
 800d4d8:	4943      	ldr	r1, [pc, #268]	@ (800d5e8 <plug_holes+0x128>)
 800d4da:	4844      	ldr	r0, [pc, #272]	@ (800d5ec <plug_holes+0x12c>)
 800d4dc:	f00c f8c2 	bl	8019664 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d4e0:	4b43      	ldr	r3, [pc, #268]	@ (800d5f0 <plug_holes+0x130>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d306      	bcc.n	800d4f8 <plug_holes+0x38>
 800d4ea:	4b3e      	ldr	r3, [pc, #248]	@ (800d5e4 <plug_holes+0x124>)
 800d4ec:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d4f0:	4940      	ldr	r1, [pc, #256]	@ (800d5f4 <plug_holes+0x134>)
 800d4f2:	483e      	ldr	r0, [pc, #248]	@ (800d5ec <plug_holes+0x12c>)
 800d4f4:	f00c f8b6 	bl	8019664 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	791b      	ldrb	r3, [r3, #4]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d006      	beq.n	800d50e <plug_holes+0x4e>
 800d500:	4b38      	ldr	r3, [pc, #224]	@ (800d5e4 <plug_holes+0x124>)
 800d502:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800d506:	493c      	ldr	r1, [pc, #240]	@ (800d5f8 <plug_holes+0x138>)
 800d508:	4838      	ldr	r0, [pc, #224]	@ (800d5ec <plug_holes+0x12c>)
 800d50a:	f00c f8ab 	bl	8019664 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	881b      	ldrh	r3, [r3, #0]
 800d512:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d516:	d906      	bls.n	800d526 <plug_holes+0x66>
 800d518:	4b32      	ldr	r3, [pc, #200]	@ (800d5e4 <plug_holes+0x124>)
 800d51a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800d51e:	4937      	ldr	r1, [pc, #220]	@ (800d5fc <plug_holes+0x13c>)
 800d520:	4832      	ldr	r0, [pc, #200]	@ (800d5ec <plug_holes+0x12c>)
 800d522:	f00c f89f 	bl	8019664 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	881b      	ldrh	r3, [r3, #0]
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7ff ffa4 	bl	800d478 <ptr_to_mem>
 800d530:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	429a      	cmp	r2, r3
 800d538:	d024      	beq.n	800d584 <plug_holes+0xc4>
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	791b      	ldrb	r3, [r3, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d120      	bne.n	800d584 <plug_holes+0xc4>
 800d542:	4b2b      	ldr	r3, [pc, #172]	@ (800d5f0 <plug_holes+0x130>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	68fa      	ldr	r2, [r7, #12]
 800d548:	429a      	cmp	r2, r3
 800d54a:	d01b      	beq.n	800d584 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d54c:	4b2c      	ldr	r3, [pc, #176]	@ (800d600 <plug_holes+0x140>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	68fa      	ldr	r2, [r7, #12]
 800d552:	429a      	cmp	r2, r3
 800d554:	d102      	bne.n	800d55c <plug_holes+0x9c>
      lfree = mem;
 800d556:	4a2a      	ldr	r2, [pc, #168]	@ (800d600 <plug_holes+0x140>)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	881a      	ldrh	r2, [r3, #0]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	881b      	ldrh	r3, [r3, #0]
 800d568:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d56c:	d00a      	beq.n	800d584 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	881b      	ldrh	r3, [r3, #0]
 800d572:	4618      	mov	r0, r3
 800d574:	f7ff ff80 	bl	800d478 <ptr_to_mem>
 800d578:	4604      	mov	r4, r0
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f7ff ff8e 	bl	800d49c <mem_to_ptr>
 800d580:	4603      	mov	r3, r0
 800d582:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	885b      	ldrh	r3, [r3, #2]
 800d588:	4618      	mov	r0, r3
 800d58a:	f7ff ff75 	bl	800d478 <ptr_to_mem>
 800d58e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d590:	68ba      	ldr	r2, [r7, #8]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	429a      	cmp	r2, r3
 800d596:	d01f      	beq.n	800d5d8 <plug_holes+0x118>
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	791b      	ldrb	r3, [r3, #4]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d11b      	bne.n	800d5d8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d5a0:	4b17      	ldr	r3, [pc, #92]	@ (800d600 <plug_holes+0x140>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d102      	bne.n	800d5b0 <plug_holes+0xf0>
      lfree = pmem;
 800d5aa:	4a15      	ldr	r2, [pc, #84]	@ (800d600 <plug_holes+0x140>)
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	881a      	ldrh	r2, [r3, #0]
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	881b      	ldrh	r3, [r3, #0]
 800d5bc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d5c0:	d00a      	beq.n	800d5d8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	881b      	ldrh	r3, [r3, #0]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7ff ff56 	bl	800d478 <ptr_to_mem>
 800d5cc:	4604      	mov	r4, r0
 800d5ce:	68b8      	ldr	r0, [r7, #8]
 800d5d0:	f7ff ff64 	bl	800d49c <mem_to_ptr>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d5d8:	bf00      	nop
 800d5da:	3714      	adds	r7, #20
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd90      	pop	{r4, r7, pc}
 800d5e0:	2000b78c 	.word	0x2000b78c
 800d5e4:	0801b394 	.word	0x0801b394
 800d5e8:	0801b3c4 	.word	0x0801b3c4
 800d5ec:	0801b3dc 	.word	0x0801b3dc
 800d5f0:	2000b790 	.word	0x2000b790
 800d5f4:	0801b404 	.word	0x0801b404
 800d5f8:	0801b420 	.word	0x0801b420
 800d5fc:	0801b43c 	.word	0x0801b43c
 800d600:	2000b798 	.word	0x2000b798

0800d604 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d60a:	4b21      	ldr	r3, [pc, #132]	@ (800d690 <mem_init+0x8c>)
 800d60c:	3303      	adds	r3, #3
 800d60e:	f023 0303 	bic.w	r3, r3, #3
 800d612:	461a      	mov	r2, r3
 800d614:	4b1f      	ldr	r3, [pc, #124]	@ (800d694 <mem_init+0x90>)
 800d616:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d618:	4b1e      	ldr	r3, [pc, #120]	@ (800d694 <mem_init+0x90>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800d624:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2200      	movs	r2, #0
 800d62a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d632:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800d636:	f7ff ff1f 	bl	800d478 <ptr_to_mem>
 800d63a:	4603      	mov	r3, r0
 800d63c:	4a16      	ldr	r2, [pc, #88]	@ (800d698 <mem_init+0x94>)
 800d63e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d640:	4b15      	ldr	r3, [pc, #84]	@ (800d698 <mem_init+0x94>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	2201      	movs	r2, #1
 800d646:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d648:	4b13      	ldr	r3, [pc, #76]	@ (800d698 <mem_init+0x94>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800d650:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d652:	4b11      	ldr	r3, [pc, #68]	@ (800d698 <mem_init+0x94>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800d65a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d65c:	4b0d      	ldr	r3, [pc, #52]	@ (800d694 <mem_init+0x90>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4a0e      	ldr	r2, [pc, #56]	@ (800d69c <mem_init+0x98>)
 800d662:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 800d664:	4b0e      	ldr	r3, [pc, #56]	@ (800d6a0 <mem_init+0x9c>)
 800d666:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800d66a:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d66e:	480d      	ldr	r0, [pc, #52]	@ (800d6a4 <mem_init+0xa0>)
 800d670:	f00b f942 	bl	80188f8 <sys_mutex_new>
 800d674:	4603      	mov	r3, r0
 800d676:	2b00      	cmp	r3, #0
 800d678:	d006      	beq.n	800d688 <mem_init+0x84>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d67a:	4b0b      	ldr	r3, [pc, #44]	@ (800d6a8 <mem_init+0xa4>)
 800d67c:	f240 221f 	movw	r2, #543	@ 0x21f
 800d680:	490a      	ldr	r1, [pc, #40]	@ (800d6ac <mem_init+0xa8>)
 800d682:	480b      	ldr	r0, [pc, #44]	@ (800d6b0 <mem_init+0xac>)
 800d684:	f00b ffee 	bl	8019664 <iprintf>
  }
}
 800d688:	bf00      	nop
 800d68a:	3708      	adds	r7, #8
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}
 800d690:	20008f78 	.word	0x20008f78
 800d694:	2000b78c 	.word	0x2000b78c
 800d698:	2000b790 	.word	0x2000b790
 800d69c:	2000b798 	.word	0x2000b798
 800d6a0:	2000ea4c 	.word	0x2000ea4c
 800d6a4:	2000b794 	.word	0x2000b794
 800d6a8:	0801b394 	.word	0x0801b394
 800d6ac:	0801b468 	.word	0x0801b468
 800d6b0:	0801b3dc 	.word	0x0801b3dc

0800d6b4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b086      	sub	sp, #24
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f7ff feed 	bl	800d49c <mem_to_ptr>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	881b      	ldrh	r3, [r3, #0]
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7ff fed4 	bl	800d478 <ptr_to_mem>
 800d6d0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	885b      	ldrh	r3, [r3, #2]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7ff fece 	bl	800d478 <ptr_to_mem>
 800d6dc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	881b      	ldrh	r3, [r3, #0]
 800d6e2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d6e6:	d818      	bhi.n	800d71a <mem_link_valid+0x66>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	885b      	ldrh	r3, [r3, #2]
 800d6ec:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d6f0:	d813      	bhi.n	800d71a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d6f6:	8afa      	ldrh	r2, [r7, #22]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d004      	beq.n	800d706 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	881b      	ldrh	r3, [r3, #0]
 800d700:	8afa      	ldrh	r2, [r7, #22]
 800d702:	429a      	cmp	r2, r3
 800d704:	d109      	bne.n	800d71a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d706:	4b08      	ldr	r3, [pc, #32]	@ (800d728 <mem_link_valid+0x74>)
 800d708:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d70a:	693a      	ldr	r2, [r7, #16]
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d006      	beq.n	800d71e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	885b      	ldrh	r3, [r3, #2]
 800d714:	8afa      	ldrh	r2, [r7, #22]
 800d716:	429a      	cmp	r2, r3
 800d718:	d001      	beq.n	800d71e <mem_link_valid+0x6a>
    return 0;
 800d71a:	2300      	movs	r3, #0
 800d71c:	e000      	b.n	800d720 <mem_link_valid+0x6c>
  }
  return 1;
 800d71e:	2301      	movs	r3, #1
}
 800d720:	4618      	mov	r0, r3
 800d722:	3718      	adds	r7, #24
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}
 800d728:	2000b790 	.word	0x2000b790

0800d72c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b088      	sub	sp, #32
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2b00      	cmp	r3, #0
 800d738:	f000 80a2 	beq.w	800d880 <mem_free+0x154>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f003 0303 	and.w	r3, r3, #3
 800d742:	2b00      	cmp	r3, #0
 800d744:	d015      	beq.n	800d772 <mem_free+0x46>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d746:	4b50      	ldr	r3, [pc, #320]	@ (800d888 <mem_free+0x15c>)
 800d748:	f240 2273 	movw	r2, #627	@ 0x273
 800d74c:	494f      	ldr	r1, [pc, #316]	@ (800d88c <mem_free+0x160>)
 800d74e:	4850      	ldr	r0, [pc, #320]	@ (800d890 <mem_free+0x164>)
 800d750:	f00b ff88 	bl	8019664 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d754:	f00b f94e 	bl	80189f4 <sys_arch_protect>
 800d758:	60f8      	str	r0, [r7, #12]
 800d75a:	4b4e      	ldr	r3, [pc, #312]	@ (800d894 <mem_free+0x168>)
 800d75c:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 800d760:	3301      	adds	r3, #1
 800d762:	b29a      	uxth	r2, r3
 800d764:	4b4b      	ldr	r3, [pc, #300]	@ (800d894 <mem_free+0x168>)
 800d766:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
 800d76a:	68f8      	ldr	r0, [r7, #12]
 800d76c:	f00b f950 	bl	8018a10 <sys_arch_unprotect>
    return;
 800d770:	e087      	b.n	800d882 <mem_free+0x156>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	3b08      	subs	r3, #8
 800d776:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d778:	4b47      	ldr	r3, [pc, #284]	@ (800d898 <mem_free+0x16c>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	69fa      	ldr	r2, [r7, #28]
 800d77e:	429a      	cmp	r2, r3
 800d780:	d306      	bcc.n	800d790 <mem_free+0x64>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f103 020c 	add.w	r2, r3, #12
 800d788:	4b44      	ldr	r3, [pc, #272]	@ (800d89c <mem_free+0x170>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d915      	bls.n	800d7bc <mem_free+0x90>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d790:	4b3d      	ldr	r3, [pc, #244]	@ (800d888 <mem_free+0x15c>)
 800d792:	f240 227f 	movw	r2, #639	@ 0x27f
 800d796:	4942      	ldr	r1, [pc, #264]	@ (800d8a0 <mem_free+0x174>)
 800d798:	483d      	ldr	r0, [pc, #244]	@ (800d890 <mem_free+0x164>)
 800d79a:	f00b ff63 	bl	8019664 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d79e:	f00b f929 	bl	80189f4 <sys_arch_protect>
 800d7a2:	6138      	str	r0, [r7, #16]
 800d7a4:	4b3b      	ldr	r3, [pc, #236]	@ (800d894 <mem_free+0x168>)
 800d7a6:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	b29a      	uxth	r2, r3
 800d7ae:	4b39      	ldr	r3, [pc, #228]	@ (800d894 <mem_free+0x168>)
 800d7b0:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
 800d7b4:	6938      	ldr	r0, [r7, #16]
 800d7b6:	f00b f92b 	bl	8018a10 <sys_arch_unprotect>
    return;
 800d7ba:	e062      	b.n	800d882 <mem_free+0x156>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d7bc:	4839      	ldr	r0, [pc, #228]	@ (800d8a4 <mem_free+0x178>)
 800d7be:	f00b f8d7 	bl	8018970 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d7c2:	69fb      	ldr	r3, [r7, #28]
 800d7c4:	791b      	ldrb	r3, [r3, #4]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d118      	bne.n	800d7fc <mem_free+0xd0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d7ca:	4b2f      	ldr	r3, [pc, #188]	@ (800d888 <mem_free+0x15c>)
 800d7cc:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800d7d0:	4935      	ldr	r1, [pc, #212]	@ (800d8a8 <mem_free+0x17c>)
 800d7d2:	482f      	ldr	r0, [pc, #188]	@ (800d890 <mem_free+0x164>)
 800d7d4:	f00b ff46 	bl	8019664 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d7d8:	4832      	ldr	r0, [pc, #200]	@ (800d8a4 <mem_free+0x178>)
 800d7da:	f00b f8d8 	bl	801898e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d7de:	f00b f909 	bl	80189f4 <sys_arch_protect>
 800d7e2:	6178      	str	r0, [r7, #20]
 800d7e4:	4b2b      	ldr	r3, [pc, #172]	@ (800d894 <mem_free+0x168>)
 800d7e6:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	b29a      	uxth	r2, r3
 800d7ee:	4b29      	ldr	r3, [pc, #164]	@ (800d894 <mem_free+0x168>)
 800d7f0:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
 800d7f4:	6978      	ldr	r0, [r7, #20]
 800d7f6:	f00b f90b 	bl	8018a10 <sys_arch_unprotect>
    return;
 800d7fa:	e042      	b.n	800d882 <mem_free+0x156>
  }

  if (!mem_link_valid(mem)) {
 800d7fc:	69f8      	ldr	r0, [r7, #28]
 800d7fe:	f7ff ff59 	bl	800d6b4 <mem_link_valid>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d118      	bne.n	800d83a <mem_free+0x10e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d808:	4b1f      	ldr	r3, [pc, #124]	@ (800d888 <mem_free+0x15c>)
 800d80a:	f240 2295 	movw	r2, #661	@ 0x295
 800d80e:	4927      	ldr	r1, [pc, #156]	@ (800d8ac <mem_free+0x180>)
 800d810:	481f      	ldr	r0, [pc, #124]	@ (800d890 <mem_free+0x164>)
 800d812:	f00b ff27 	bl	8019664 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d816:	4823      	ldr	r0, [pc, #140]	@ (800d8a4 <mem_free+0x178>)
 800d818:	f00b f8b9 	bl	801898e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d81c:	f00b f8ea 	bl	80189f4 <sys_arch_protect>
 800d820:	61b8      	str	r0, [r7, #24]
 800d822:	4b1c      	ldr	r3, [pc, #112]	@ (800d894 <mem_free+0x168>)
 800d824:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 800d828:	3301      	adds	r3, #1
 800d82a:	b29a      	uxth	r2, r3
 800d82c:	4b19      	ldr	r3, [pc, #100]	@ (800d894 <mem_free+0x168>)
 800d82e:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
 800d832:	69b8      	ldr	r0, [r7, #24]
 800d834:	f00b f8ec 	bl	8018a10 <sys_arch_unprotect>
    return;
 800d838:	e023      	b.n	800d882 <mem_free+0x156>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d83a:	69fb      	ldr	r3, [r7, #28]
 800d83c:	2200      	movs	r2, #0
 800d83e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d840:	4b1b      	ldr	r3, [pc, #108]	@ (800d8b0 <mem_free+0x184>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	69fa      	ldr	r2, [r7, #28]
 800d846:	429a      	cmp	r2, r3
 800d848:	d202      	bcs.n	800d850 <mem_free+0x124>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d84a:	4a19      	ldr	r2, [pc, #100]	@ (800d8b0 <mem_free+0x184>)
 800d84c:	69fb      	ldr	r3, [r7, #28]
 800d84e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 800d850:	4b10      	ldr	r3, [pc, #64]	@ (800d894 <mem_free+0x168>)
 800d852:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
 800d856:	4b10      	ldr	r3, [pc, #64]	@ (800d898 <mem_free+0x16c>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	69f9      	ldr	r1, [r7, #28]
 800d85c:	1acb      	subs	r3, r1, r3
 800d85e:	b299      	uxth	r1, r3
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	881b      	ldrh	r3, [r3, #0]
 800d864:	1acb      	subs	r3, r1, r3
 800d866:	b29b      	uxth	r3, r3
 800d868:	4413      	add	r3, r2
 800d86a:	b29a      	uxth	r2, r3
 800d86c:	4b09      	ldr	r3, [pc, #36]	@ (800d894 <mem_free+0x168>)
 800d86e:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d872:	69f8      	ldr	r0, [r7, #28]
 800d874:	f7ff fe24 	bl	800d4c0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d878:	480a      	ldr	r0, [pc, #40]	@ (800d8a4 <mem_free+0x178>)
 800d87a:	f00b f888 	bl	801898e <sys_mutex_unlock>
 800d87e:	e000      	b.n	800d882 <mem_free+0x156>
    return;
 800d880:	bf00      	nop
}
 800d882:	3720      	adds	r7, #32
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}
 800d888:	0801b394 	.word	0x0801b394
 800d88c:	0801b484 	.word	0x0801b484
 800d890:	0801b3dc 	.word	0x0801b3dc
 800d894:	2000ea4c 	.word	0x2000ea4c
 800d898:	2000b78c 	.word	0x2000b78c
 800d89c:	2000b790 	.word	0x2000b790
 800d8a0:	0801b4a8 	.word	0x0801b4a8
 800d8a4:	2000b794 	.word	0x2000b794
 800d8a8:	0801b4c4 	.word	0x0801b4c4
 800d8ac:	0801b4ec 	.word	0x0801b4ec
 800d8b0:	2000b798 	.word	0x2000b798

0800d8b4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b088      	sub	sp, #32
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d8c0:	887b      	ldrh	r3, [r7, #2]
 800d8c2:	3303      	adds	r3, #3
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	f023 0303 	bic.w	r3, r3, #3
 800d8ca:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d8cc:	8bfb      	ldrh	r3, [r7, #30]
 800d8ce:	2b0b      	cmp	r3, #11
 800d8d0:	d801      	bhi.n	800d8d6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d8d2:	230c      	movs	r3, #12
 800d8d4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d8d6:	8bfb      	ldrh	r3, [r7, #30]
 800d8d8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d8dc:	d803      	bhi.n	800d8e6 <mem_trim+0x32>
 800d8de:	8bfa      	ldrh	r2, [r7, #30]
 800d8e0:	887b      	ldrh	r3, [r7, #2]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d201      	bcs.n	800d8ea <mem_trim+0x36>
    return NULL;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	e0f8      	b.n	800dadc <mem_trim+0x228>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d8ea:	4b7e      	ldr	r3, [pc, #504]	@ (800dae4 <mem_trim+0x230>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	687a      	ldr	r2, [r7, #4]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d304      	bcc.n	800d8fe <mem_trim+0x4a>
 800d8f4:	4b7c      	ldr	r3, [pc, #496]	@ (800dae8 <mem_trim+0x234>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	687a      	ldr	r2, [r7, #4]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d306      	bcc.n	800d90c <mem_trim+0x58>
 800d8fe:	4b7b      	ldr	r3, [pc, #492]	@ (800daec <mem_trim+0x238>)
 800d900:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800d904:	497a      	ldr	r1, [pc, #488]	@ (800daf0 <mem_trim+0x23c>)
 800d906:	487b      	ldr	r0, [pc, #492]	@ (800daf4 <mem_trim+0x240>)
 800d908:	f00b feac 	bl	8019664 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d90c:	4b75      	ldr	r3, [pc, #468]	@ (800dae4 <mem_trim+0x230>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	429a      	cmp	r2, r3
 800d914:	d304      	bcc.n	800d920 <mem_trim+0x6c>
 800d916:	4b74      	ldr	r3, [pc, #464]	@ (800dae8 <mem_trim+0x234>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d30f      	bcc.n	800d940 <mem_trim+0x8c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d920:	f00b f868 	bl	80189f4 <sys_arch_protect>
 800d924:	60b8      	str	r0, [r7, #8]
 800d926:	4b74      	ldr	r3, [pc, #464]	@ (800daf8 <mem_trim+0x244>)
 800d928:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 800d92c:	3301      	adds	r3, #1
 800d92e:	b29a      	uxth	r2, r3
 800d930:	4b71      	ldr	r3, [pc, #452]	@ (800daf8 <mem_trim+0x244>)
 800d932:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
 800d936:	68b8      	ldr	r0, [r7, #8]
 800d938:	f00b f86a 	bl	8018a10 <sys_arch_unprotect>
    return rmem;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	e0cd      	b.n	800dadc <mem_trim+0x228>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	3b08      	subs	r3, #8
 800d944:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d946:	69b8      	ldr	r0, [r7, #24]
 800d948:	f7ff fda8 	bl	800d49c <mem_to_ptr>
 800d94c:	4603      	mov	r3, r0
 800d94e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d950:	69bb      	ldr	r3, [r7, #24]
 800d952:	881a      	ldrh	r2, [r3, #0]
 800d954:	8afb      	ldrh	r3, [r7, #22]
 800d956:	1ad3      	subs	r3, r2, r3
 800d958:	b29b      	uxth	r3, r3
 800d95a:	3b08      	subs	r3, #8
 800d95c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d95e:	8bfa      	ldrh	r2, [r7, #30]
 800d960:	8abb      	ldrh	r3, [r7, #20]
 800d962:	429a      	cmp	r2, r3
 800d964:	d906      	bls.n	800d974 <mem_trim+0xc0>
 800d966:	4b61      	ldr	r3, [pc, #388]	@ (800daec <mem_trim+0x238>)
 800d968:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800d96c:	4963      	ldr	r1, [pc, #396]	@ (800dafc <mem_trim+0x248>)
 800d96e:	4861      	ldr	r0, [pc, #388]	@ (800daf4 <mem_trim+0x240>)
 800d970:	f00b fe78 	bl	8019664 <iprintf>
  if (newsize > size) {
 800d974:	8bfa      	ldrh	r2, [r7, #30]
 800d976:	8abb      	ldrh	r3, [r7, #20]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d901      	bls.n	800d980 <mem_trim+0xcc>
    /* not supported */
    return NULL;
 800d97c:	2300      	movs	r3, #0
 800d97e:	e0ad      	b.n	800dadc <mem_trim+0x228>
  }
  if (newsize == size) {
 800d980:	8bfa      	ldrh	r2, [r7, #30]
 800d982:	8abb      	ldrh	r3, [r7, #20]
 800d984:	429a      	cmp	r2, r3
 800d986:	d101      	bne.n	800d98c <mem_trim+0xd8>
    /* No change in size, simply return */
    return rmem;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	e0a7      	b.n	800dadc <mem_trim+0x228>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d98c:	485c      	ldr	r0, [pc, #368]	@ (800db00 <mem_trim+0x24c>)
 800d98e:	f00a ffef 	bl	8018970 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d992:	69bb      	ldr	r3, [r7, #24]
 800d994:	881b      	ldrh	r3, [r3, #0]
 800d996:	4618      	mov	r0, r3
 800d998:	f7ff fd6e 	bl	800d478 <ptr_to_mem>
 800d99c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	791b      	ldrb	r3, [r3, #4]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d14b      	bne.n	800da3e <mem_trim+0x18a>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d9a6:	69bb      	ldr	r3, [r7, #24]
 800d9a8:	881b      	ldrh	r3, [r3, #0]
 800d9aa:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800d9ae:	d106      	bne.n	800d9be <mem_trim+0x10a>
 800d9b0:	4b4e      	ldr	r3, [pc, #312]	@ (800daec <mem_trim+0x238>)
 800d9b2:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800d9b6:	4953      	ldr	r1, [pc, #332]	@ (800db04 <mem_trim+0x250>)
 800d9b8:	484e      	ldr	r0, [pc, #312]	@ (800daf4 <mem_trim+0x240>)
 800d9ba:	f00b fe53 	bl	8019664 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	881b      	ldrh	r3, [r3, #0]
 800d9c2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d9c4:	8afa      	ldrh	r2, [r7, #22]
 800d9c6:	8bfb      	ldrh	r3, [r7, #30]
 800d9c8:	4413      	add	r3, r2
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	3308      	adds	r3, #8
 800d9ce:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d9d0:	4b4d      	ldr	r3, [pc, #308]	@ (800db08 <mem_trim+0x254>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	693a      	ldr	r2, [r7, #16]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d106      	bne.n	800d9e8 <mem_trim+0x134>
      lfree = ptr_to_mem(ptr2);
 800d9da:	89fb      	ldrh	r3, [r7, #14]
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7ff fd4b 	bl	800d478 <ptr_to_mem>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	4a48      	ldr	r2, [pc, #288]	@ (800db08 <mem_trim+0x254>)
 800d9e6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d9e8:	89fb      	ldrh	r3, [r7, #14]
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7ff fd44 	bl	800d478 <ptr_to_mem>
 800d9f0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	89ba      	ldrh	r2, [r7, #12]
 800d9fc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	8afa      	ldrh	r2, [r7, #22]
 800da02:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	89fa      	ldrh	r2, [r7, #14]
 800da08:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	881b      	ldrh	r3, [r3, #0]
 800da0e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800da12:	d007      	beq.n	800da24 <mem_trim+0x170>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	881b      	ldrh	r3, [r3, #0]
 800da18:	4618      	mov	r0, r3
 800da1a:	f7ff fd2d 	bl	800d478 <ptr_to_mem>
 800da1e:	4602      	mov	r2, r0
 800da20:	89fb      	ldrh	r3, [r7, #14]
 800da22:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 800da24:	4b34      	ldr	r3, [pc, #208]	@ (800daf8 <mem_trim+0x244>)
 800da26:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
 800da2a:	8bf9      	ldrh	r1, [r7, #30]
 800da2c:	8abb      	ldrh	r3, [r7, #20]
 800da2e:	1acb      	subs	r3, r1, r3
 800da30:	b29b      	uxth	r3, r3
 800da32:	4413      	add	r3, r2
 800da34:	b29a      	uxth	r2, r3
 800da36:	4b30      	ldr	r3, [pc, #192]	@ (800daf8 <mem_trim+0x244>)
 800da38:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
 800da3c:	e04a      	b.n	800dad4 <mem_trim+0x220>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800da3e:	8bfb      	ldrh	r3, [r7, #30]
 800da40:	f103 0214 	add.w	r2, r3, #20
 800da44:	8abb      	ldrh	r3, [r7, #20]
 800da46:	429a      	cmp	r2, r3
 800da48:	d844      	bhi.n	800dad4 <mem_trim+0x220>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800da4a:	8afa      	ldrh	r2, [r7, #22]
 800da4c:	8bfb      	ldrh	r3, [r7, #30]
 800da4e:	4413      	add	r3, r2
 800da50:	b29b      	uxth	r3, r3
 800da52:	3308      	adds	r3, #8
 800da54:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800da56:	69bb      	ldr	r3, [r7, #24]
 800da58:	881b      	ldrh	r3, [r3, #0]
 800da5a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800da5e:	d106      	bne.n	800da6e <mem_trim+0x1ba>
 800da60:	4b22      	ldr	r3, [pc, #136]	@ (800daec <mem_trim+0x238>)
 800da62:	f240 3216 	movw	r2, #790	@ 0x316
 800da66:	4927      	ldr	r1, [pc, #156]	@ (800db04 <mem_trim+0x250>)
 800da68:	4822      	ldr	r0, [pc, #136]	@ (800daf4 <mem_trim+0x240>)
 800da6a:	f00b fdfb 	bl	8019664 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800da6e:	89fb      	ldrh	r3, [r7, #14]
 800da70:	4618      	mov	r0, r3
 800da72:	f7ff fd01 	bl	800d478 <ptr_to_mem>
 800da76:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800da78:	4b23      	ldr	r3, [pc, #140]	@ (800db08 <mem_trim+0x254>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	693a      	ldr	r2, [r7, #16]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d202      	bcs.n	800da88 <mem_trim+0x1d4>
      lfree = mem2;
 800da82:	4a21      	ldr	r2, [pc, #132]	@ (800db08 <mem_trim+0x254>)
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	2200      	movs	r2, #0
 800da8c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800da8e:	69bb      	ldr	r3, [r7, #24]
 800da90:	881a      	ldrh	r2, [r3, #0]
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	8afa      	ldrh	r2, [r7, #22]
 800da9a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800da9c:	69bb      	ldr	r3, [r7, #24]
 800da9e:	89fa      	ldrh	r2, [r7, #14]
 800daa0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	881b      	ldrh	r3, [r3, #0]
 800daa6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800daaa:	d007      	beq.n	800dabc <mem_trim+0x208>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	881b      	ldrh	r3, [r3, #0]
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7ff fce1 	bl	800d478 <ptr_to_mem>
 800dab6:	4602      	mov	r2, r0
 800dab8:	89fb      	ldrh	r3, [r7, #14]
 800daba:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 800dabc:	4b0e      	ldr	r3, [pc, #56]	@ (800daf8 <mem_trim+0x244>)
 800dabe:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
 800dac2:	8bf9      	ldrh	r1, [r7, #30]
 800dac4:	8abb      	ldrh	r3, [r7, #20]
 800dac6:	1acb      	subs	r3, r1, r3
 800dac8:	b29b      	uxth	r3, r3
 800daca:	4413      	add	r3, r2
 800dacc:	b29a      	uxth	r2, r3
 800dace:	4b0a      	ldr	r3, [pc, #40]	@ (800daf8 <mem_trim+0x244>)
 800dad0:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800dad4:	480a      	ldr	r0, [pc, #40]	@ (800db00 <mem_trim+0x24c>)
 800dad6:	f00a ff5a 	bl	801898e <sys_mutex_unlock>
  return rmem;
 800dada:	687b      	ldr	r3, [r7, #4]
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3720      	adds	r7, #32
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	2000b78c 	.word	0x2000b78c
 800dae8:	2000b790 	.word	0x2000b790
 800daec:	0801b394 	.word	0x0801b394
 800daf0:	0801b520 	.word	0x0801b520
 800daf4:	0801b3dc 	.word	0x0801b3dc
 800daf8:	2000ea4c 	.word	0x2000ea4c
 800dafc:	0801b538 	.word	0x0801b538
 800db00:	2000b794 	.word	0x2000b794
 800db04:	0801b558 	.word	0x0801b558
 800db08:	2000b798 	.word	0x2000b798

0800db0c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800db0c:	b590      	push	{r4, r7, lr}
 800db0e:	b089      	sub	sp, #36	@ 0x24
 800db10:	af00      	add	r7, sp, #0
 800db12:	4603      	mov	r3, r0
 800db14:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800db16:	88fb      	ldrh	r3, [r7, #6]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d101      	bne.n	800db20 <mem_malloc+0x14>
    return NULL;
 800db1c:	2300      	movs	r3, #0
 800db1e:	e121      	b.n	800dd64 <mem_malloc+0x258>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800db20:	88fb      	ldrh	r3, [r7, #6]
 800db22:	3303      	adds	r3, #3
 800db24:	b29b      	uxth	r3, r3
 800db26:	f023 0303 	bic.w	r3, r3, #3
 800db2a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800db2c:	8bbb      	ldrh	r3, [r7, #28]
 800db2e:	2b0b      	cmp	r3, #11
 800db30:	d801      	bhi.n	800db36 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800db32:	230c      	movs	r3, #12
 800db34:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800db36:	8bbb      	ldrh	r3, [r7, #28]
 800db38:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800db3c:	d803      	bhi.n	800db46 <mem_malloc+0x3a>
 800db3e:	8bba      	ldrh	r2, [r7, #28]
 800db40:	88fb      	ldrh	r3, [r7, #6]
 800db42:	429a      	cmp	r2, r3
 800db44:	d201      	bcs.n	800db4a <mem_malloc+0x3e>
    return NULL;
 800db46:	2300      	movs	r3, #0
 800db48:	e10c      	b.n	800dd64 <mem_malloc+0x258>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800db4a:	4888      	ldr	r0, [pc, #544]	@ (800dd6c <mem_malloc+0x260>)
 800db4c:	f00a ff10 	bl	8018970 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800db50:	4b87      	ldr	r3, [pc, #540]	@ (800dd70 <mem_malloc+0x264>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4618      	mov	r0, r3
 800db56:	f7ff fca1 	bl	800d49c <mem_to_ptr>
 800db5a:	4603      	mov	r3, r0
 800db5c:	83fb      	strh	r3, [r7, #30]
 800db5e:	e0ee      	b.n	800dd3e <mem_malloc+0x232>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800db60:	8bfb      	ldrh	r3, [r7, #30]
 800db62:	4618      	mov	r0, r3
 800db64:	f7ff fc88 	bl	800d478 <ptr_to_mem>
 800db68:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	791b      	ldrb	r3, [r3, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	f040 80de 	bne.w	800dd30 <mem_malloc+0x224>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	881b      	ldrh	r3, [r3, #0]
 800db78:	461a      	mov	r2, r3
 800db7a:	8bfb      	ldrh	r3, [r7, #30]
 800db7c:	1ad3      	subs	r3, r2, r3
 800db7e:	f1a3 0208 	sub.w	r2, r3, #8
 800db82:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800db84:	429a      	cmp	r2, r3
 800db86:	f0c0 80d3 	bcc.w	800dd30 <mem_malloc+0x224>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	881b      	ldrh	r3, [r3, #0]
 800db8e:	461a      	mov	r2, r3
 800db90:	8bfb      	ldrh	r3, [r7, #30]
 800db92:	1ad3      	subs	r3, r2, r3
 800db94:	f1a3 0208 	sub.w	r2, r3, #8
 800db98:	8bbb      	ldrh	r3, [r7, #28]
 800db9a:	3314      	adds	r3, #20
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d34c      	bcc.n	800dc3a <mem_malloc+0x12e>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800dba0:	8bfa      	ldrh	r2, [r7, #30]
 800dba2:	8bbb      	ldrh	r3, [r7, #28]
 800dba4:	4413      	add	r3, r2
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	3308      	adds	r3, #8
 800dbaa:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800dbac:	8a7b      	ldrh	r3, [r7, #18]
 800dbae:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800dbb2:	d106      	bne.n	800dbc2 <mem_malloc+0xb6>
 800dbb4:	4b6f      	ldr	r3, [pc, #444]	@ (800dd74 <mem_malloc+0x268>)
 800dbb6:	f240 3287 	movw	r2, #903	@ 0x387
 800dbba:	496f      	ldr	r1, [pc, #444]	@ (800dd78 <mem_malloc+0x26c>)
 800dbbc:	486f      	ldr	r0, [pc, #444]	@ (800dd7c <mem_malloc+0x270>)
 800dbbe:	f00b fd51 	bl	8019664 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800dbc2:	8a7b      	ldrh	r3, [r7, #18]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7ff fc57 	bl	800d478 <ptr_to_mem>
 800dbca:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	881a      	ldrh	r2, [r3, #0]
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	8bfa      	ldrh	r2, [r7, #30]
 800dbde:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	8a7a      	ldrh	r2, [r7, #18]
 800dbe4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	2201      	movs	r2, #1
 800dbea:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	881b      	ldrh	r3, [r3, #0]
 800dbf0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800dbf4:	d007      	beq.n	800dc06 <mem_malloc+0xfa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	881b      	ldrh	r3, [r3, #0]
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7ff fc3c 	bl	800d478 <ptr_to_mem>
 800dc00:	4602      	mov	r2, r0
 800dc02:	8a7b      	ldrh	r3, [r7, #18]
 800dc04:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 800dc06:	4b5e      	ldr	r3, [pc, #376]	@ (800dd80 <mem_malloc+0x274>)
 800dc08:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
 800dc0c:	8bbb      	ldrh	r3, [r7, #28]
 800dc0e:	4413      	add	r3, r2
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	3308      	adds	r3, #8
 800dc14:	b29a      	uxth	r2, r3
 800dc16:	4b5a      	ldr	r3, [pc, #360]	@ (800dd80 <mem_malloc+0x274>)
 800dc18:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
 800dc1c:	4b58      	ldr	r3, [pc, #352]	@ (800dd80 <mem_malloc+0x274>)
 800dc1e:	f8b3 20ce 	ldrh.w	r2, [r3, #206]	@ 0xce
 800dc22:	4b57      	ldr	r3, [pc, #348]	@ (800dd80 <mem_malloc+0x274>)
 800dc24:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d227      	bcs.n	800dc7c <mem_malloc+0x170>
 800dc2c:	4b54      	ldr	r3, [pc, #336]	@ (800dd80 <mem_malloc+0x274>)
 800dc2e:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
 800dc32:	4b53      	ldr	r3, [pc, #332]	@ (800dd80 <mem_malloc+0x274>)
 800dc34:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
 800dc38:	e020      	b.n	800dc7c <mem_malloc+0x170>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	2201      	movs	r2, #1
 800dc3e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 800dc40:	4b4f      	ldr	r3, [pc, #316]	@ (800dd80 <mem_malloc+0x274>)
 800dc42:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	881b      	ldrh	r3, [r3, #0]
 800dc4a:	4413      	add	r3, r2
 800dc4c:	b29c      	uxth	r4, r3
 800dc4e:	6978      	ldr	r0, [r7, #20]
 800dc50:	f7ff fc24 	bl	800d49c <mem_to_ptr>
 800dc54:	4603      	mov	r3, r0
 800dc56:	1ae3      	subs	r3, r4, r3
 800dc58:	b29a      	uxth	r2, r3
 800dc5a:	4b49      	ldr	r3, [pc, #292]	@ (800dd80 <mem_malloc+0x274>)
 800dc5c:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
 800dc60:	4b47      	ldr	r3, [pc, #284]	@ (800dd80 <mem_malloc+0x274>)
 800dc62:	f8b3 20ce 	ldrh.w	r2, [r3, #206]	@ 0xce
 800dc66:	4b46      	ldr	r3, [pc, #280]	@ (800dd80 <mem_malloc+0x274>)
 800dc68:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d205      	bcs.n	800dc7c <mem_malloc+0x170>
 800dc70:	4b43      	ldr	r3, [pc, #268]	@ (800dd80 <mem_malloc+0x274>)
 800dc72:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
 800dc76:	4b42      	ldr	r3, [pc, #264]	@ (800dd80 <mem_malloc+0x274>)
 800dc78:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800dc7c:	4b3c      	ldr	r3, [pc, #240]	@ (800dd70 <mem_malloc+0x264>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	697a      	ldr	r2, [r7, #20]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d127      	bne.n	800dcd6 <mem_malloc+0x1ca>
          struct mem *cur = lfree;
 800dc86:	4b3a      	ldr	r3, [pc, #232]	@ (800dd70 <mem_malloc+0x264>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800dc8c:	e005      	b.n	800dc9a <mem_malloc+0x18e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800dc8e:	69bb      	ldr	r3, [r7, #24]
 800dc90:	881b      	ldrh	r3, [r3, #0]
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7ff fbf0 	bl	800d478 <ptr_to_mem>
 800dc98:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800dc9a:	69bb      	ldr	r3, [r7, #24]
 800dc9c:	791b      	ldrb	r3, [r3, #4]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d004      	beq.n	800dcac <mem_malloc+0x1a0>
 800dca2:	4b38      	ldr	r3, [pc, #224]	@ (800dd84 <mem_malloc+0x278>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	69ba      	ldr	r2, [r7, #24]
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d1f0      	bne.n	800dc8e <mem_malloc+0x182>
          }
          lfree = cur;
 800dcac:	4a30      	ldr	r2, [pc, #192]	@ (800dd70 <mem_malloc+0x264>)
 800dcae:	69bb      	ldr	r3, [r7, #24]
 800dcb0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800dcb2:	4b2f      	ldr	r3, [pc, #188]	@ (800dd70 <mem_malloc+0x264>)
 800dcb4:	681a      	ldr	r2, [r3, #0]
 800dcb6:	4b33      	ldr	r3, [pc, #204]	@ (800dd84 <mem_malloc+0x278>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d00b      	beq.n	800dcd6 <mem_malloc+0x1ca>
 800dcbe:	4b2c      	ldr	r3, [pc, #176]	@ (800dd70 <mem_malloc+0x264>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	791b      	ldrb	r3, [r3, #4]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d006      	beq.n	800dcd6 <mem_malloc+0x1ca>
 800dcc8:	4b2a      	ldr	r3, [pc, #168]	@ (800dd74 <mem_malloc+0x268>)
 800dcca:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800dcce:	492e      	ldr	r1, [pc, #184]	@ (800dd88 <mem_malloc+0x27c>)
 800dcd0:	482a      	ldr	r0, [pc, #168]	@ (800dd7c <mem_malloc+0x270>)
 800dcd2:	f00b fcc7 	bl	8019664 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800dcd6:	4825      	ldr	r0, [pc, #148]	@ (800dd6c <mem_malloc+0x260>)
 800dcd8:	f00a fe59 	bl	801898e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800dcdc:	8bba      	ldrh	r2, [r7, #28]
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	4413      	add	r3, r2
 800dce2:	3308      	adds	r3, #8
 800dce4:	4a27      	ldr	r2, [pc, #156]	@ (800dd84 <mem_malloc+0x278>)
 800dce6:	6812      	ldr	r2, [r2, #0]
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d906      	bls.n	800dcfa <mem_malloc+0x1ee>
 800dcec:	4b21      	ldr	r3, [pc, #132]	@ (800dd74 <mem_malloc+0x268>)
 800dcee:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800dcf2:	4926      	ldr	r1, [pc, #152]	@ (800dd8c <mem_malloc+0x280>)
 800dcf4:	4821      	ldr	r0, [pc, #132]	@ (800dd7c <mem_malloc+0x270>)
 800dcf6:	f00b fcb5 	bl	8019664 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	f003 0303 	and.w	r3, r3, #3
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d006      	beq.n	800dd12 <mem_malloc+0x206>
 800dd04:	4b1b      	ldr	r3, [pc, #108]	@ (800dd74 <mem_malloc+0x268>)
 800dd06:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800dd0a:	4921      	ldr	r1, [pc, #132]	@ (800dd90 <mem_malloc+0x284>)
 800dd0c:	481b      	ldr	r0, [pc, #108]	@ (800dd7c <mem_malloc+0x270>)
 800dd0e:	f00b fca9 	bl	8019664 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	f003 0303 	and.w	r3, r3, #3
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d006      	beq.n	800dd2a <mem_malloc+0x21e>
 800dd1c:	4b15      	ldr	r3, [pc, #84]	@ (800dd74 <mem_malloc+0x268>)
 800dd1e:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800dd22:	491c      	ldr	r1, [pc, #112]	@ (800dd94 <mem_malloc+0x288>)
 800dd24:	4815      	ldr	r0, [pc, #84]	@ (800dd7c <mem_malloc+0x270>)
 800dd26:	f00b fc9d 	bl	8019664 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	3308      	adds	r3, #8
 800dd2e:	e019      	b.n	800dd64 <mem_malloc+0x258>
         ptr = ptr_to_mem(ptr)->next) {
 800dd30:	8bfb      	ldrh	r3, [r7, #30]
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7ff fba0 	bl	800d478 <ptr_to_mem>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	881b      	ldrh	r3, [r3, #0]
 800dd3c:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800dd3e:	8bfa      	ldrh	r2, [r7, #30]
 800dd40:	8bbb      	ldrh	r3, [r7, #28]
 800dd42:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800dd46:	429a      	cmp	r2, r3
 800dd48:	f4ff af0a 	bcc.w	800db60 <mem_malloc+0x54>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 800dd4c:	4b0c      	ldr	r3, [pc, #48]	@ (800dd80 <mem_malloc+0x274>)
 800dd4e:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	@ 0xc8
 800dd52:	3301      	adds	r3, #1
 800dd54:	b29a      	uxth	r2, r3
 800dd56:	4b0a      	ldr	r3, [pc, #40]	@ (800dd80 <mem_malloc+0x274>)
 800dd58:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800dd5c:	4803      	ldr	r0, [pc, #12]	@ (800dd6c <mem_malloc+0x260>)
 800dd5e:	f00a fe16 	bl	801898e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800dd62:	2300      	movs	r3, #0
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3724      	adds	r7, #36	@ 0x24
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd90      	pop	{r4, r7, pc}
 800dd6c:	2000b794 	.word	0x2000b794
 800dd70:	2000b798 	.word	0x2000b798
 800dd74:	0801b394 	.word	0x0801b394
 800dd78:	0801b558 	.word	0x0801b558
 800dd7c:	0801b3dc 	.word	0x0801b3dc
 800dd80:	2000ea4c 	.word	0x2000ea4c
 800dd84:	2000b790 	.word	0x2000b790
 800dd88:	0801b56c 	.word	0x0801b56c
 800dd8c:	0801b588 	.word	0x0801b588
 800dd90:	0801b5b8 	.word	0x0801b5b8
 800dd94:	0801b5e8 	.word	0x0801b5e8

0800dd98 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b085      	sub	sp, #20
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	691b      	ldr	r3, [r3, #16]
 800dda4:	2200      	movs	r2, #0
 800dda6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	3303      	adds	r3, #3
 800ddae:	f023 0303 	bic.w	r3, r3, #3
 800ddb2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	60fb      	str	r3, [r7, #12]
 800ddb8:	e011      	b.n	800ddde <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	691b      	ldr	r3, [r3, #16]
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	691b      	ldr	r3, [r3, #16]
 800ddc8:	68ba      	ldr	r2, [r7, #8]
 800ddca:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	891b      	ldrh	r3, [r3, #8]
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	4413      	add	r3, r2
 800ddd6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	3301      	adds	r3, #1
 800dddc:	60fb      	str	r3, [r7, #12]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	895b      	ldrh	r3, [r3, #10]
 800dde2:	461a      	mov	r2, r3
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	4293      	cmp	r3, r2
 800dde8:	dbe7      	blt.n	800ddba <memp_init_pool+0x22>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	685b      	ldr	r3, [r3, #4]
 800ddee:	687a      	ldr	r2, [r7, #4]
 800ddf0:	8952      	ldrh	r2, [r2, #10]
 800ddf2:	80da      	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	685b      	ldr	r3, [r3, #4]
 800ddf8:	687a      	ldr	r2, [r7, #4]
 800ddfa:	6812      	ldr	r2, [r2, #0]
 800ddfc:	601a      	str	r2, [r3, #0]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ddfe:	bf00      	nop
 800de00:	3714      	adds	r7, #20
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr
	...

0800de0c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b082      	sub	sp, #8
 800de10:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800de12:	2300      	movs	r3, #0
 800de14:	80fb      	strh	r3, [r7, #6]
 800de16:	e014      	b.n	800de42 <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 800de18:	88fb      	ldrh	r3, [r7, #6]
 800de1a:	4a0e      	ldr	r2, [pc, #56]	@ (800de54 <memp_init+0x48>)
 800de1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de20:	4618      	mov	r0, r3
 800de22:	f7ff ffb9 	bl	800dd98 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 800de26:	88fb      	ldrh	r3, [r7, #6]
 800de28:	4a0a      	ldr	r2, [pc, #40]	@ (800de54 <memp_init+0x48>)
 800de2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800de2e:	88fb      	ldrh	r3, [r7, #6]
 800de30:	6852      	ldr	r2, [r2, #4]
 800de32:	4909      	ldr	r1, [pc, #36]	@ (800de58 <memp_init+0x4c>)
 800de34:	3334      	adds	r3, #52	@ 0x34
 800de36:	009b      	lsls	r3, r3, #2
 800de38:	440b      	add	r3, r1
 800de3a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800de3c:	88fb      	ldrh	r3, [r7, #6]
 800de3e:	3301      	adds	r3, #1
 800de40:	80fb      	strh	r3, [r7, #6]
 800de42:	88fb      	ldrh	r3, [r7, #6]
 800de44:	2b0d      	cmp	r3, #13
 800de46:	d9e7      	bls.n	800de18 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800de48:	bf00      	nop
 800de4a:	bf00      	nop
 800de4c:	3708      	adds	r7, #8
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	0801f298 	.word	0x0801f298
 800de58:	2000ea4c 	.word	0x2000ea4c

0800de5c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800de64:	f00a fdc6 	bl	80189f4 <sys_arch_protect>
 800de68:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	691b      	ldr	r3, [r3, #16]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d029      	beq.n	800decc <do_memp_malloc_pool+0x70>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	691b      	ldr	r3, [r3, #16]
 800de7c:	68ba      	ldr	r2, [r7, #8]
 800de7e:	6812      	ldr	r2, [r2, #0]
 800de80:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	f003 0303 	and.w	r3, r3, #3
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d006      	beq.n	800de9a <do_memp_malloc_pool+0x3e>
 800de8c:	4b16      	ldr	r3, [pc, #88]	@ (800dee8 <do_memp_malloc_pool+0x8c>)
 800de8e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800de92:	4916      	ldr	r1, [pc, #88]	@ (800deec <do_memp_malloc_pool+0x90>)
 800de94:	4816      	ldr	r0, [pc, #88]	@ (800def0 <do_memp_malloc_pool+0x94>)
 800de96:	f00b fbe5 	bl	8019664 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	891a      	ldrh	r2, [r3, #8]
 800dea0:	3201      	adds	r2, #1
 800dea2:	b292      	uxth	r2, r2
 800dea4:	811a      	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	685b      	ldr	r3, [r3, #4]
 800deaa:	891a      	ldrh	r2, [r3, #8]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	895b      	ldrh	r3, [r3, #10]
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d905      	bls.n	800dec2 <do_memp_malloc_pool+0x66>
      desc->stats->max = desc->stats->used;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	685a      	ldr	r2, [r3, #4]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	8912      	ldrh	r2, [r2, #8]
 800dec0:	815a      	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800dec2:	68f8      	ldr	r0, [r7, #12]
 800dec4:	f00a fda4 	bl	8018a10 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	e009      	b.n	800dee0 <do_memp_malloc_pool+0x84>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	889a      	ldrh	r2, [r3, #4]
 800ded2:	3201      	adds	r2, #1
 800ded4:	b292      	uxth	r2, r2
 800ded6:	809a      	strh	r2, [r3, #4]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ded8:	68f8      	ldr	r0, [r7, #12]
 800deda:	f00a fd99 	bl	8018a10 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800dede:	2300      	movs	r3, #0
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3710      	adds	r7, #16
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	0801b6b0 	.word	0x0801b6b0
 800deec:	0801b6e0 	.word	0x0801b6e0
 800def0:	0801b704 	.word	0x0801b704

0800def4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b082      	sub	sp, #8
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d106      	bne.n	800df10 <memp_malloc_pool+0x1c>
 800df02:	4b0a      	ldr	r3, [pc, #40]	@ (800df2c <memp_malloc_pool+0x38>)
 800df04:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800df08:	4909      	ldr	r1, [pc, #36]	@ (800df30 <memp_malloc_pool+0x3c>)
 800df0a:	480a      	ldr	r0, [pc, #40]	@ (800df34 <memp_malloc_pool+0x40>)
 800df0c:	f00b fbaa 	bl	8019664 <iprintf>
  if (desc == NULL) {
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d101      	bne.n	800df1a <memp_malloc_pool+0x26>
    return NULL;
 800df16:	2300      	movs	r3, #0
 800df18:	e003      	b.n	800df22 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f7ff ff9e 	bl	800de5c <do_memp_malloc_pool>
 800df20:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800df22:	4618      	mov	r0, r3
 800df24:	3708      	adds	r7, #8
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	0801b6b0 	.word	0x0801b6b0
 800df30:	0801b72c 	.word	0x0801b72c
 800df34:	0801b704 	.word	0x0801b704

0800df38 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	4603      	mov	r3, r0
 800df40:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800df42:	79fb      	ldrb	r3, [r7, #7]
 800df44:	2b0d      	cmp	r3, #13
 800df46:	d908      	bls.n	800df5a <memp_malloc+0x22>
 800df48:	4b0a      	ldr	r3, [pc, #40]	@ (800df74 <memp_malloc+0x3c>)
 800df4a:	f240 1257 	movw	r2, #343	@ 0x157
 800df4e:	490a      	ldr	r1, [pc, #40]	@ (800df78 <memp_malloc+0x40>)
 800df50:	480a      	ldr	r0, [pc, #40]	@ (800df7c <memp_malloc+0x44>)
 800df52:	f00b fb87 	bl	8019664 <iprintf>
 800df56:	2300      	movs	r3, #0
 800df58:	e008      	b.n	800df6c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800df5a:	79fb      	ldrb	r3, [r7, #7]
 800df5c:	4a08      	ldr	r2, [pc, #32]	@ (800df80 <memp_malloc+0x48>)
 800df5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df62:	4618      	mov	r0, r3
 800df64:	f7ff ff7a 	bl	800de5c <do_memp_malloc_pool>
 800df68:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800df6a:	68fb      	ldr	r3, [r7, #12]
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3710      	adds	r7, #16
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}
 800df74:	0801b6b0 	.word	0x0801b6b0
 800df78:	0801b740 	.word	0x0801b740
 800df7c:	0801b704 	.word	0x0801b704
 800df80:	0801f298 	.word	0x0801f298

0800df84 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	f003 0303 	and.w	r3, r3, #3
 800df94:	2b00      	cmp	r3, #0
 800df96:	d006      	beq.n	800dfa6 <do_memp_free_pool+0x22>
 800df98:	4b10      	ldr	r3, [pc, #64]	@ (800dfdc <do_memp_free_pool+0x58>)
 800df9a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800df9e:	4910      	ldr	r1, [pc, #64]	@ (800dfe0 <do_memp_free_pool+0x5c>)
 800dfa0:	4810      	ldr	r0, [pc, #64]	@ (800dfe4 <do_memp_free_pool+0x60>)
 800dfa2:	f00b fb5f 	bl	8019664 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800dfaa:	f00a fd23 	bl	80189f4 <sys_arch_protect>
 800dfae:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	891a      	ldrh	r2, [r3, #8]
 800dfb6:	3a01      	subs	r2, #1
 800dfb8:	b292      	uxth	r2, r2
 800dfba:	811a      	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	691b      	ldr	r3, [r3, #16]
 800dfc0:	681a      	ldr	r2, [r3, #0]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	691b      	ldr	r3, [r3, #16]
 800dfca:	68fa      	ldr	r2, [r7, #12]
 800dfcc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800dfce:	68b8      	ldr	r0, [r7, #8]
 800dfd0:	f00a fd1e 	bl	8018a10 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800dfd4:	bf00      	nop
 800dfd6:	3710      	adds	r7, #16
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	0801b6b0 	.word	0x0801b6b0
 800dfe0:	0801b760 	.word	0x0801b760
 800dfe4:	0801b704 	.word	0x0801b704

0800dfe8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b082      	sub	sp, #8
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d106      	bne.n	800e006 <memp_free_pool+0x1e>
 800dff8:	4b0a      	ldr	r3, [pc, #40]	@ (800e024 <memp_free_pool+0x3c>)
 800dffa:	f240 1295 	movw	r2, #405	@ 0x195
 800dffe:	490a      	ldr	r1, [pc, #40]	@ (800e028 <memp_free_pool+0x40>)
 800e000:	480a      	ldr	r0, [pc, #40]	@ (800e02c <memp_free_pool+0x44>)
 800e002:	f00b fb2f 	bl	8019664 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d007      	beq.n	800e01c <memp_free_pool+0x34>
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d004      	beq.n	800e01c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800e012:	6839      	ldr	r1, [r7, #0]
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f7ff ffb5 	bl	800df84 <do_memp_free_pool>
 800e01a:	e000      	b.n	800e01e <memp_free_pool+0x36>
    return;
 800e01c:	bf00      	nop
}
 800e01e:	3708      	adds	r7, #8
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}
 800e024:	0801b6b0 	.word	0x0801b6b0
 800e028:	0801b72c 	.word	0x0801b72c
 800e02c:	0801b704 	.word	0x0801b704

0800e030 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af00      	add	r7, sp, #0
 800e036:	4603      	mov	r3, r0
 800e038:	6039      	str	r1, [r7, #0]
 800e03a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e03c:	79fb      	ldrb	r3, [r7, #7]
 800e03e:	2b0d      	cmp	r3, #13
 800e040:	d907      	bls.n	800e052 <memp_free+0x22>
 800e042:	4b0c      	ldr	r3, [pc, #48]	@ (800e074 <memp_free+0x44>)
 800e044:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800e048:	490b      	ldr	r1, [pc, #44]	@ (800e078 <memp_free+0x48>)
 800e04a:	480c      	ldr	r0, [pc, #48]	@ (800e07c <memp_free+0x4c>)
 800e04c:	f00b fb0a 	bl	8019664 <iprintf>
 800e050:	e00c      	b.n	800e06c <memp_free+0x3c>

  if (mem == NULL) {
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d008      	beq.n	800e06a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e058:	79fb      	ldrb	r3, [r7, #7]
 800e05a:	4a09      	ldr	r2, [pc, #36]	@ (800e080 <memp_free+0x50>)
 800e05c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e060:	6839      	ldr	r1, [r7, #0]
 800e062:	4618      	mov	r0, r3
 800e064:	f7ff ff8e 	bl	800df84 <do_memp_free_pool>
 800e068:	e000      	b.n	800e06c <memp_free+0x3c>
    return;
 800e06a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	0801b6b0 	.word	0x0801b6b0
 800e078:	0801b780 	.word	0x0801b780
 800e07c:	0801b704 	.word	0x0801b704
 800e080:	0801f298 	.word	0x0801f298

0800e084 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e084:	b480      	push	{r7}
 800e086:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e088:	bf00      	nop
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr
	...

0800e094 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b088      	sub	sp, #32
 800e098:	af02      	add	r7, sp, #8
 800e09a:	60f8      	str	r0, [r7, #12]
 800e09c:	60b9      	str	r1, [r7, #8]
 800e09e:	607a      	str	r2, [r7, #4]
 800e0a0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d108      	bne.n	800e0ba <netif_add+0x26>
 800e0a8:	4b98      	ldr	r3, [pc, #608]	@ (800e30c <netif_add+0x278>)
 800e0aa:	f240 1227 	movw	r2, #295	@ 0x127
 800e0ae:	4998      	ldr	r1, [pc, #608]	@ (800e310 <netif_add+0x27c>)
 800e0b0:	4898      	ldr	r0, [pc, #608]	@ (800e314 <netif_add+0x280>)
 800e0b2:	f00b fad7 	bl	8019664 <iprintf>
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	e161      	b.n	800e37e <netif_add+0x2ea>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d108      	bne.n	800e0d2 <netif_add+0x3e>
 800e0c0:	4b92      	ldr	r3, [pc, #584]	@ (800e30c <netif_add+0x278>)
 800e0c2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800e0c6:	4994      	ldr	r1, [pc, #592]	@ (800e318 <netif_add+0x284>)
 800e0c8:	4892      	ldr	r0, [pc, #584]	@ (800e314 <netif_add+0x280>)
 800e0ca:	f00b facb 	bl	8019664 <iprintf>
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	e155      	b.n	800e37e <netif_add+0x2ea>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d101      	bne.n	800e0dc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e0d8:	4b90      	ldr	r3, [pc, #576]	@ (800e31c <netif_add+0x288>)
 800e0da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d101      	bne.n	800e0e6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e0e2:	4b8e      	ldr	r3, [pc, #568]	@ (800e31c <netif_add+0x288>)
 800e0e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d101      	bne.n	800e0f0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e0ec:	4b8b      	ldr	r3, [pc, #556]	@ (800e31c <netif_add+0x288>)
 800e0ee:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2200      	movs	r2, #0
 800e100:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	4a86      	ldr	r2, [pc, #536]	@ (800e320 <netif_add+0x28c>)
 800e106:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	2200      	movs	r2, #0
 800e10c:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2200      	movs	r2, #0
 800e112:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	3324      	adds	r3, #36	@ 0x24
 800e11a:	2204      	movs	r2, #4
 800e11c:	2100      	movs	r1, #0
 800e11e:	4618      	mov	r0, r3
 800e120:	f00b fc72 	bl	8019a08 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2200      	movs	r2, #0
 800e128:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2200      	movs	r2, #0
 800e12e:	639a      	str	r2, [r3, #56]	@ 0x38
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	6a3a      	ldr	r2, [r7, #32]
 800e134:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e136:	4b7b      	ldr	r3, [pc, #492]	@ (800e324 <netif_add+0x290>)
 800e138:	781a      	ldrb	r2, [r3, #0]
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e144:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	68b9      	ldr	r1, [r7, #8]
 800e14c:	68f8      	ldr	r0, [r7, #12]
 800e14e:	f000 fa01 	bl	800e554 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e154:	68f8      	ldr	r0, [r7, #12]
 800e156:	4798      	blx	r3
 800e158:	4603      	mov	r3, r0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d001      	beq.n	800e162 <netif_add+0xce>
    return NULL;
 800e15e:	2300      	movs	r3, #0
 800e160:	e10d      	b.n	800e37e <netif_add+0x2ea>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e168:	2bff      	cmp	r3, #255	@ 0xff
 800e16a:	d103      	bne.n	800e174 <netif_add+0xe0>
        netif->num = 0;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2200      	movs	r2, #0
 800e170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800e174:	2300      	movs	r3, #0
 800e176:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e178:	4b6b      	ldr	r3, [pc, #428]	@ (800e328 <netif_add+0x294>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	617b      	str	r3, [r7, #20]
 800e17e:	e02b      	b.n	800e1d8 <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e180:	697a      	ldr	r2, [r7, #20]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	429a      	cmp	r2, r3
 800e186:	d106      	bne.n	800e196 <netif_add+0x102>
 800e188:	4b60      	ldr	r3, [pc, #384]	@ (800e30c <netif_add+0x278>)
 800e18a:	f240 128b 	movw	r2, #395	@ 0x18b
 800e18e:	4967      	ldr	r1, [pc, #412]	@ (800e32c <netif_add+0x298>)
 800e190:	4860      	ldr	r0, [pc, #384]	@ (800e314 <netif_add+0x280>)
 800e192:	f00b fa67 	bl	8019664 <iprintf>
        num_netifs++;
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	3301      	adds	r3, #1
 800e19a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e19c:	693b      	ldr	r3, [r7, #16]
 800e19e:	2bff      	cmp	r3, #255	@ 0xff
 800e1a0:	dd06      	ble.n	800e1b0 <netif_add+0x11c>
 800e1a2:	4b5a      	ldr	r3, [pc, #360]	@ (800e30c <netif_add+0x278>)
 800e1a4:	f240 128d 	movw	r2, #397	@ 0x18d
 800e1a8:	4961      	ldr	r1, [pc, #388]	@ (800e330 <netif_add+0x29c>)
 800e1aa:	485a      	ldr	r0, [pc, #360]	@ (800e314 <netif_add+0x280>)
 800e1ac:	f00b fa5a 	bl	8019664 <iprintf>
        if (netif2->num == netif->num) {
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d108      	bne.n	800e1d2 <netif_add+0x13e>
          netif->num++;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	b2da      	uxtb	r2, r3
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800e1d0:	e005      	b.n	800e1de <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	617b      	str	r3, [r7, #20]
 800e1d8:	697b      	ldr	r3, [r7, #20]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d1d0      	bne.n	800e180 <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d1be      	bne.n	800e162 <netif_add+0xce>
  }
  if (netif->num == 254) {
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e1ea:	2bfe      	cmp	r3, #254	@ 0xfe
 800e1ec:	d103      	bne.n	800e1f6 <netif_add+0x162>
    netif_num = 0;
 800e1ee:	4b4d      	ldr	r3, [pc, #308]	@ (800e324 <netif_add+0x290>)
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	701a      	strb	r2, [r3, #0]
 800e1f4:	e006      	b.n	800e204 <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	b2da      	uxtb	r2, r3
 800e200:	4b48      	ldr	r3, [pc, #288]	@ (800e324 <netif_add+0x290>)
 800e202:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e204:	4b48      	ldr	r3, [pc, #288]	@ (800e328 <netif_add+0x294>)
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e20c:	4a46      	ldr	r2, [pc, #280]	@ (800e328 <netif_add+0x294>)
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	6013      	str	r3, [r2, #0]
#endif /* "LWIP_SINGLE_NETIF */
  mib2_netif_added(netif);

#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e218:	f003 0320 	and.w	r3, r3, #32
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d002      	beq.n	800e226 <netif_add+0x192>
    igmp_start(netif);
 800e220:	68f8      	ldr	r0, [r7, #12]
 800e222:	f008 fb07 	bl	8016834 <igmp_start>
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e22c:	4619      	mov	r1, r3
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800e234:	461a      	mov	r2, r3
 800e236:	483f      	ldr	r0, [pc, #252]	@ (800e334 <netif_add+0x2a0>)
 800e238:	f00b fa14 	bl	8019664 <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 800e23c:	483e      	ldr	r0, [pc, #248]	@ (800e338 <netif_add+0x2a4>)
 800e23e:	f00b fa11 	bl	8019664 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d003      	beq.n	800e250 <netif_add+0x1bc>
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	4619      	mov	r1, r3
 800e24e:	e000      	b.n	800e252 <netif_add+0x1be>
 800e250:	2100      	movs	r1, #0
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d004      	beq.n	800e262 <netif_add+0x1ce>
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	3301      	adds	r3, #1
 800e25c:	781b      	ldrb	r3, [r3, #0]
 800e25e:	461a      	mov	r2, r3
 800e260:	e000      	b.n	800e264 <netif_add+0x1d0>
 800e262:	2200      	movs	r2, #0
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d004      	beq.n	800e274 <netif_add+0x1e0>
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	3302      	adds	r3, #2
 800e26e:	781b      	ldrb	r3, [r3, #0]
 800e270:	4618      	mov	r0, r3
 800e272:	e000      	b.n	800e276 <netif_add+0x1e2>
 800e274:	2000      	movs	r0, #0
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d003      	beq.n	800e284 <netif_add+0x1f0>
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	3303      	adds	r3, #3
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	e000      	b.n	800e286 <netif_add+0x1f2>
 800e284:	2300      	movs	r3, #0
 800e286:	9300      	str	r3, [sp, #0]
 800e288:	4603      	mov	r3, r0
 800e28a:	482c      	ldr	r0, [pc, #176]	@ (800e33c <netif_add+0x2a8>)
 800e28c:	f00b f9ea 	bl	8019664 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 800e290:	482b      	ldr	r0, [pc, #172]	@ (800e340 <netif_add+0x2ac>)
 800e292:	f00b f9e7 	bl	8019664 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d003      	beq.n	800e2a4 <netif_add+0x210>
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	781b      	ldrb	r3, [r3, #0]
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	e000      	b.n	800e2a6 <netif_add+0x212>
 800e2a4:	2100      	movs	r1, #0
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d004      	beq.n	800e2b6 <netif_add+0x222>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	e000      	b.n	800e2b8 <netif_add+0x224>
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d004      	beq.n	800e2c8 <netif_add+0x234>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	3302      	adds	r3, #2
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	e000      	b.n	800e2ca <netif_add+0x236>
 800e2c8:	2000      	movs	r0, #0
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d003      	beq.n	800e2d8 <netif_add+0x244>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	3303      	adds	r3, #3
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	e000      	b.n	800e2da <netif_add+0x246>
 800e2d8:	2300      	movs	r3, #0
 800e2da:	9300      	str	r3, [sp, #0]
 800e2dc:	4603      	mov	r3, r0
 800e2de:	4817      	ldr	r0, [pc, #92]	@ (800e33c <netif_add+0x2a8>)
 800e2e0:	f00b f9c0 	bl	8019664 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 800e2e4:	4817      	ldr	r0, [pc, #92]	@ (800e344 <netif_add+0x2b0>)
 800e2e6:	f00b f9bd 	bl	8019664 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d003      	beq.n	800e2f8 <netif_add+0x264>
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	e000      	b.n	800e2fa <netif_add+0x266>
 800e2f8:	2100      	movs	r1, #0
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d023      	beq.n	800e348 <netif_add+0x2b4>
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	3301      	adds	r3, #1
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	461a      	mov	r2, r3
 800e308:	e01f      	b.n	800e34a <netif_add+0x2b6>
 800e30a:	bf00      	nop
 800e30c:	0801b79c 	.word	0x0801b79c
 800e310:	0801b830 	.word	0x0801b830
 800e314:	0801b7ec 	.word	0x0801b7ec
 800e318:	0801b84c 	.word	0x0801b84c
 800e31c:	0801f318 	.word	0x0801f318
 800e320:	0800e86b 	.word	0x0800e86b
 800e324:	2000ea48 	.word	0x2000ea48
 800e328:	2000ea40 	.word	0x2000ea40
 800e32c:	0801b870 	.word	0x0801b870
 800e330:	0801b884 	.word	0x0801b884
 800e334:	0801b8b4 	.word	0x0801b8b4
 800e338:	0801b8d4 	.word	0x0801b8d4
 800e33c:	0801b8dc 	.word	0x0801b8dc
 800e340:	0801b8ec 	.word	0x0801b8ec
 800e344:	0801b8f8 	.word	0x0801b8f8
 800e348:	2200      	movs	r2, #0
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d004      	beq.n	800e35a <netif_add+0x2c6>
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	3302      	adds	r3, #2
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	4618      	mov	r0, r3
 800e358:	e000      	b.n	800e35c <netif_add+0x2c8>
 800e35a:	2000      	movs	r0, #0
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d003      	beq.n	800e36a <netif_add+0x2d6>
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	3303      	adds	r3, #3
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	e000      	b.n	800e36c <netif_add+0x2d8>
 800e36a:	2300      	movs	r3, #0
 800e36c:	9300      	str	r3, [sp, #0]
 800e36e:	4603      	mov	r3, r0
 800e370:	4805      	ldr	r0, [pc, #20]	@ (800e388 <netif_add+0x2f4>)
 800e372:	f00b f977 	bl	8019664 <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 800e376:	200a      	movs	r0, #10
 800e378:	f00b f986 	bl	8019688 <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e37c:	68fb      	ldr	r3, [r7, #12]
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3718      	adds	r7, #24
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	0801b8dc 	.word	0x0801b8dc

0800e38c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b082      	sub	sp, #8
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e396:	6839      	ldr	r1, [r7, #0]
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f002 fc27 	bl	8010bec <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e39e:	6839      	ldr	r1, [r7, #0]
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f006 fed7 	bl	8015154 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e3a6:	bf00      	nop
 800e3a8:	3708      	adds	r7, #8
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
	...

0800e3b0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b086      	sub	sp, #24
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d106      	bne.n	800e3d0 <netif_do_set_ipaddr+0x20>
 800e3c2:	4b1e      	ldr	r3, [pc, #120]	@ (800e43c <netif_do_set_ipaddr+0x8c>)
 800e3c4:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800e3c8:	491d      	ldr	r1, [pc, #116]	@ (800e440 <netif_do_set_ipaddr+0x90>)
 800e3ca:	481e      	ldr	r0, [pc, #120]	@ (800e444 <netif_do_set_ipaddr+0x94>)
 800e3cc:	f00b f94a 	bl	8019664 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d106      	bne.n	800e3e4 <netif_do_set_ipaddr+0x34>
 800e3d6:	4b19      	ldr	r3, [pc, #100]	@ (800e43c <netif_do_set_ipaddr+0x8c>)
 800e3d8:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800e3dc:	4918      	ldr	r1, [pc, #96]	@ (800e440 <netif_do_set_ipaddr+0x90>)
 800e3de:	4819      	ldr	r0, [pc, #100]	@ (800e444 <netif_do_set_ipaddr+0x94>)
 800e3e0:	f00b f940 	bl	8019664 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	681a      	ldr	r2, [r3, #0]
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	3304      	adds	r3, #4
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d01f      	beq.n	800e432 <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	3304      	adds	r3, #4
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 800e402:	4811      	ldr	r0, [pc, #68]	@ (800e448 <netif_do_set_ipaddr+0x98>)
 800e404:	f00b f99e 	bl	8019744 <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e408:	f107 0314 	add.w	r3, r7, #20
 800e40c:	4619      	mov	r1, r3
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f7ff ffbc 	bl	800e38c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d002      	beq.n	800e420 <netif_do_set_ipaddr+0x70>
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	e000      	b.n	800e422 <netif_do_set_ipaddr+0x72>
 800e420:	2300      	movs	r3, #0
 800e422:	68fa      	ldr	r2, [r7, #12]
 800e424:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e426:	2101      	movs	r1, #1
 800e428:	68f8      	ldr	r0, [r7, #12]
 800e42a:	f000 f92d 	bl	800e688 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e42e:	2301      	movs	r3, #1
 800e430:	e000      	b.n	800e434 <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 800e432:	2300      	movs	r3, #0
}
 800e434:	4618      	mov	r0, r3
 800e436:	3718      	adds	r7, #24
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}
 800e43c:	0801b79c 	.word	0x0801b79c
 800e440:	0801b900 	.word	0x0801b900
 800e444:	0801b7ec 	.word	0x0801b7ec
 800e448:	0801b910 	.word	0x0801b910

0800e44c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e44c:	b5b0      	push	{r4, r5, r7, lr}
 800e44e:	b088      	sub	sp, #32
 800e450:	af04      	add	r7, sp, #16
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	681a      	ldr	r2, [r3, #0]
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	3308      	adds	r3, #8
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	429a      	cmp	r2, r3
 800e464:	d02d      	beq.n	800e4c2 <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d002      	beq.n	800e472 <netif_do_set_netmask+0x26>
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	e000      	b.n	800e474 <netif_do_set_netmask+0x28>
 800e472:	2300      	movs	r3, #0
 800e474:	68fa      	ldr	r2, [r7, #12]
 800e476:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e47e:	4618      	mov	r0, r3
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800e486:	461c      	mov	r4, r3
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	3308      	adds	r3, #8
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	461d      	mov	r5, r3
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	3308      	adds	r3, #8
 800e494:	3301      	adds	r3, #1
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	461a      	mov	r2, r3
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	3308      	adds	r3, #8
 800e49e:	3302      	adds	r3, #2
 800e4a0:	781b      	ldrb	r3, [r3, #0]
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	3308      	adds	r3, #8
 800e4a8:	3303      	adds	r3, #3
 800e4aa:	781b      	ldrb	r3, [r3, #0]
 800e4ac:	9302      	str	r3, [sp, #8]
 800e4ae:	9101      	str	r1, [sp, #4]
 800e4b0:	9200      	str	r2, [sp, #0]
 800e4b2:	462b      	mov	r3, r5
 800e4b4:	4622      	mov	r2, r4
 800e4b6:	4601      	mov	r1, r0
 800e4b8:	4804      	ldr	r0, [pc, #16]	@ (800e4cc <netif_do_set_netmask+0x80>)
 800e4ba:	f00b f8d3 	bl	8019664 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e4be:	2301      	movs	r3, #1
 800e4c0:	e000      	b.n	800e4c4 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 800e4c2:	2300      	movs	r3, #0
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3710      	adds	r7, #16
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bdb0      	pop	{r4, r5, r7, pc}
 800e4cc:	0801b960 	.word	0x0801b960

0800e4d0 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e4d0:	b5b0      	push	{r4, r5, r7, lr}
 800e4d2:	b088      	sub	sp, #32
 800e4d4:	af04      	add	r7, sp, #16
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	681a      	ldr	r2, [r3, #0]
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	330c      	adds	r3, #12
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d02d      	beq.n	800e546 <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d002      	beq.n	800e4f6 <netif_do_set_gw+0x26>
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	e000      	b.n	800e4f8 <netif_do_set_gw+0x28>
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	68fa      	ldr	r2, [r7, #12]
 800e4fa:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e502:	4618      	mov	r0, r3
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800e50a:	461c      	mov	r4, r3
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	330c      	adds	r3, #12
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	461d      	mov	r5, r3
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	330c      	adds	r3, #12
 800e518:	3301      	adds	r3, #1
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	461a      	mov	r2, r3
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	330c      	adds	r3, #12
 800e522:	3302      	adds	r3, #2
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	4619      	mov	r1, r3
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	330c      	adds	r3, #12
 800e52c:	3303      	adds	r3, #3
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	9302      	str	r3, [sp, #8]
 800e532:	9101      	str	r1, [sp, #4]
 800e534:	9200      	str	r2, [sp, #0]
 800e536:	462b      	mov	r3, r5
 800e538:	4622      	mov	r2, r4
 800e53a:	4601      	mov	r1, r0
 800e53c:	4804      	ldr	r0, [pc, #16]	@ (800e550 <netif_do_set_gw+0x80>)
 800e53e:	f00b f891 	bl	8019664 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e542:	2301      	movs	r3, #1
 800e544:	e000      	b.n	800e548 <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 800e546:	2300      	movs	r3, #0
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3710      	adds	r7, #16
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bdb0      	pop	{r4, r5, r7, pc}
 800e550:	0801b9c0 	.word	0x0801b9c0

0800e554 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b088      	sub	sp, #32
 800e558:	af00      	add	r7, sp, #0
 800e55a:	60f8      	str	r0, [r7, #12]
 800e55c:	60b9      	str	r1, [r7, #8]
 800e55e:	607a      	str	r2, [r7, #4]
 800e560:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e562:	2300      	movs	r3, #0
 800e564:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e566:	2300      	movs	r3, #0
 800e568:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d101      	bne.n	800e574 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e570:	4b1c      	ldr	r3, [pc, #112]	@ (800e5e4 <netif_set_addr+0x90>)
 800e572:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d101      	bne.n	800e57e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e57a:	4b1a      	ldr	r3, [pc, #104]	@ (800e5e4 <netif_set_addr+0x90>)
 800e57c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d101      	bne.n	800e588 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e584:	4b17      	ldr	r3, [pc, #92]	@ (800e5e4 <netif_set_addr+0x90>)
 800e586:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d003      	beq.n	800e596 <netif_set_addr+0x42>
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d101      	bne.n	800e59a <netif_set_addr+0x46>
 800e596:	2301      	movs	r3, #1
 800e598:	e000      	b.n	800e59c <netif_set_addr+0x48>
 800e59a:	2300      	movs	r3, #0
 800e59c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d006      	beq.n	800e5b2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e5a4:	f107 0310 	add.w	r3, r7, #16
 800e5a8:	461a      	mov	r2, r3
 800e5aa:	68b9      	ldr	r1, [r7, #8]
 800e5ac:	68f8      	ldr	r0, [r7, #12]
 800e5ae:	f7ff feff 	bl	800e3b0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e5b2:	69fa      	ldr	r2, [r7, #28]
 800e5b4:	6879      	ldr	r1, [r7, #4]
 800e5b6:	68f8      	ldr	r0, [r7, #12]
 800e5b8:	f7ff ff48 	bl	800e44c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e5bc:	69ba      	ldr	r2, [r7, #24]
 800e5be:	6839      	ldr	r1, [r7, #0]
 800e5c0:	68f8      	ldr	r0, [r7, #12]
 800e5c2:	f7ff ff85 	bl	800e4d0 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d106      	bne.n	800e5da <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e5cc:	f107 0310 	add.w	r3, r7, #16
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	68b9      	ldr	r1, [r7, #8]
 800e5d4:	68f8      	ldr	r0, [r7, #12]
 800e5d6:	f7ff feeb 	bl	800e3b0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e5da:	bf00      	nop
 800e5dc:	3720      	adds	r7, #32
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	0801f318 	.word	0x0801f318

0800e5e8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b082      	sub	sp, #8
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e5f0:	4a0d      	ldr	r2, [pc, #52]	@ (800e628 <netif_set_default+0x40>)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d004      	beq.n	800e606 <netif_set_default+0x1e>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e602:	4619      	mov	r1, r3
 800e604:	e000      	b.n	800e608 <netif_set_default+0x20>
 800e606:	2127      	movs	r1, #39	@ 0x27
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d003      	beq.n	800e616 <netif_set_default+0x2e>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800e614:	e000      	b.n	800e618 <netif_set_default+0x30>
 800e616:	2327      	movs	r3, #39	@ 0x27
 800e618:	461a      	mov	r2, r3
 800e61a:	4804      	ldr	r0, [pc, #16]	@ (800e62c <netif_set_default+0x44>)
 800e61c:	f00b f822 	bl	8019664 <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e620:	bf00      	nop
 800e622:	3708      	adds	r7, #8
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}
 800e628:	2000ea44 	.word	0x2000ea44
 800e62c:	0801ba34 	.word	0x0801ba34

0800e630 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b082      	sub	sp, #8
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d107      	bne.n	800e64e <netif_set_up+0x1e>
 800e63e:	4b0f      	ldr	r3, [pc, #60]	@ (800e67c <netif_set_up+0x4c>)
 800e640:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800e644:	490e      	ldr	r1, [pc, #56]	@ (800e680 <netif_set_up+0x50>)
 800e646:	480f      	ldr	r0, [pc, #60]	@ (800e684 <netif_set_up+0x54>)
 800e648:	f00b f80c 	bl	8019664 <iprintf>
 800e64c:	e013      	b.n	800e676 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e654:	f003 0301 	and.w	r3, r3, #1
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d10c      	bne.n	800e676 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e662:	f043 0301 	orr.w	r3, r3, #1
 800e666:	b2da      	uxtb	r2, r3
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e66e:	2103      	movs	r1, #3
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f000 f809 	bl	800e688 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e676:	3708      	adds	r7, #8
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}
 800e67c:	0801b79c 	.word	0x0801b79c
 800e680:	0801ba5c 	.word	0x0801ba5c
 800e684:	0801b7ec 	.word	0x0801b7ec

0800e688 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	460b      	mov	r3, r1
 800e692:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d106      	bne.n	800e6a8 <netif_issue_reports+0x20>
 800e69a:	4b1d      	ldr	r3, [pc, #116]	@ (800e710 <netif_issue_reports+0x88>)
 800e69c:	f240 326d 	movw	r2, #877	@ 0x36d
 800e6a0:	491c      	ldr	r1, [pc, #112]	@ (800e714 <netif_issue_reports+0x8c>)
 800e6a2:	481d      	ldr	r0, [pc, #116]	@ (800e718 <netif_issue_reports+0x90>)
 800e6a4:	f00a ffde 	bl	8019664 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e6ae:	f003 0304 	and.w	r3, r3, #4
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d028      	beq.n	800e708 <netif_issue_reports+0x80>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e6bc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d021      	beq.n	800e708 <netif_issue_reports+0x80>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e6c4:	78fb      	ldrb	r3, [r7, #3]
 800e6c6:	f003 0301 	and.w	r3, r3, #1
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d01d      	beq.n	800e70a <netif_issue_reports+0x82>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	3304      	adds	r3, #4
 800e6d2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d018      	beq.n	800e70a <netif_issue_reports+0x82>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e6de:	f003 0308 	and.w	r3, r3, #8
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d005      	beq.n	800e6f2 <netif_issue_reports+0x6a>
      etharp_gratuitous(netif);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	3304      	adds	r3, #4
 800e6ea:	4619      	mov	r1, r3
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f007 fe6f 	bl	80163d0 <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e6f8:	f003 0320 	and.w	r3, r3, #32
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d004      	beq.n	800e70a <netif_issue_reports+0x82>
      igmp_report_groups(netif);
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f008 f8c1 	bl	8016888 <igmp_report_groups>
 800e706:	e000      	b.n	800e70a <netif_issue_reports+0x82>
    return;
 800e708:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e70a:	3708      	adds	r7, #8
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	0801b79c 	.word	0x0801b79c
 800e714:	0801ba78 	.word	0x0801ba78
 800e718:	0801b7ec 	.word	0x0801b7ec

0800e71c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d107      	bne.n	800e73a <netif_set_down+0x1e>
 800e72a:	4b12      	ldr	r3, [pc, #72]	@ (800e774 <netif_set_down+0x58>)
 800e72c:	f240 329b 	movw	r2, #923	@ 0x39b
 800e730:	4911      	ldr	r1, [pc, #68]	@ (800e778 <netif_set_down+0x5c>)
 800e732:	4812      	ldr	r0, [pc, #72]	@ (800e77c <netif_set_down+0x60>)
 800e734:	f00a ff96 	bl	8019664 <iprintf>
 800e738:	e019      	b.n	800e76e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e740:	f003 0301 	and.w	r3, r3, #1
 800e744:	2b00      	cmp	r3, #0
 800e746:	d012      	beq.n	800e76e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e74e:	f023 0301 	bic.w	r3, r3, #1
 800e752:	b2da      	uxtb	r2, r3
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e760:	f003 0308 	and.w	r3, r3, #8
 800e764:	2b00      	cmp	r3, #0
 800e766:	d002      	beq.n	800e76e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f007 f945 	bl	80159f8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e76e:	3708      	adds	r7, #8
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}
 800e774:	0801b79c 	.word	0x0801b79c
 800e778:	0801ba9c 	.word	0x0801ba9c
 800e77c:	0801b7ec 	.word	0x0801b7ec

0800e780 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d107      	bne.n	800e79e <netif_set_link_up+0x1e>
 800e78e:	4b13      	ldr	r3, [pc, #76]	@ (800e7dc <netif_set_link_up+0x5c>)
 800e790:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800e794:	4912      	ldr	r1, [pc, #72]	@ (800e7e0 <netif_set_link_up+0x60>)
 800e796:	4813      	ldr	r0, [pc, #76]	@ (800e7e4 <netif_set_link_up+0x64>)
 800e798:	f00a ff64 	bl	8019664 <iprintf>
 800e79c:	e01b      	b.n	800e7d6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e7a4:	f003 0304 	and.w	r3, r3, #4
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d114      	bne.n	800e7d6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e7b2:	f043 0304 	orr.w	r3, r3, #4
 800e7b6:	b2da      	uxtb	r2, r3
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e7be:	2103      	movs	r1, #3
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f7ff ff61 	bl	800e688 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	69db      	ldr	r3, [r3, #28]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d003      	beq.n	800e7d6 <netif_set_link_up+0x56>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	69db      	ldr	r3, [r3, #28]
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e7d6:	3708      	adds	r7, #8
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	0801b79c 	.word	0x0801b79c
 800e7e0:	0801babc 	.word	0x0801babc
 800e7e4:	0801b7ec 	.word	0x0801b7ec

0800e7e8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b082      	sub	sp, #8
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d107      	bne.n	800e806 <netif_set_link_down+0x1e>
 800e7f6:	4b11      	ldr	r3, [pc, #68]	@ (800e83c <netif_set_link_down+0x54>)
 800e7f8:	f240 4206 	movw	r2, #1030	@ 0x406
 800e7fc:	4910      	ldr	r1, [pc, #64]	@ (800e840 <netif_set_link_down+0x58>)
 800e7fe:	4811      	ldr	r0, [pc, #68]	@ (800e844 <netif_set_link_down+0x5c>)
 800e800:	f00a ff30 	bl	8019664 <iprintf>
 800e804:	e017      	b.n	800e836 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e80c:	f003 0304 	and.w	r3, r3, #4
 800e810:	2b00      	cmp	r3, #0
 800e812:	d010      	beq.n	800e836 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e81a:	f023 0304 	bic.w	r3, r3, #4
 800e81e:	b2da      	uxtb	r2, r3
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	69db      	ldr	r3, [r3, #28]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d003      	beq.n	800e836 <netif_set_link_down+0x4e>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	69db      	ldr	r3, [r3, #28]
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e836:	3708      	adds	r7, #8
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}
 800e83c:	0801b79c 	.word	0x0801b79c
 800e840:	0801bae0 	.word	0x0801bae0
 800e844:	0801b7ec 	.word	0x0801b7ec

0800e848 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e848:	b480      	push	{r7}
 800e84a:	b083      	sub	sp, #12
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d002      	beq.n	800e85e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	683a      	ldr	r2, [r7, #0]
 800e85c:	61da      	str	r2, [r3, #28]
  }
}
 800e85e:	bf00      	nop
 800e860:	370c      	adds	r7, #12
 800e862:	46bd      	mov	sp, r7
 800e864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e868:	4770      	bx	lr

0800e86a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e86a:	b480      	push	{r7}
 800e86c:	b085      	sub	sp, #20
 800e86e:	af00      	add	r7, sp, #0
 800e870:	60f8      	str	r0, [r7, #12]
 800e872:	60b9      	str	r1, [r7, #8]
 800e874:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e876:	f06f 030b 	mvn.w	r3, #11
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3714      	adds	r7, #20
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr
	...

0800e888 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e888:	b480      	push	{r7}
 800e88a:	b085      	sub	sp, #20
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	4603      	mov	r3, r0
 800e890:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e892:	79fb      	ldrb	r3, [r7, #7]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d013      	beq.n	800e8c0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e898:	4b0d      	ldr	r3, [pc, #52]	@ (800e8d0 <netif_get_by_index+0x48>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	60fb      	str	r3, [r7, #12]
 800e89e:	e00c      	b.n	800e8ba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	79fa      	ldrb	r2, [r7, #7]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d101      	bne.n	800e8b4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	e006      	b.n	800e8c2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	60fb      	str	r3, [r7, #12]
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d1ef      	bne.n	800e8a0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e8c0:	2300      	movs	r3, #0
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3714      	adds	r7, #20
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8cc:	4770      	bx	lr
 800e8ce:	bf00      	nop
 800e8d0:	2000ea40 	.word	0x2000ea40

0800e8d4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b082      	sub	sp, #8
 800e8d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e8da:	f00a f88b 	bl	80189f4 <sys_arch_protect>
 800e8de:	6038      	str	r0, [r7, #0]
 800e8e0:	4b0d      	ldr	r3, [pc, #52]	@ (800e918 <pbuf_free_ooseq+0x44>)
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	701a      	strb	r2, [r3, #0]
 800e8e6:	6838      	ldr	r0, [r7, #0]
 800e8e8:	f00a f892 	bl	8018a10 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e8ec:	4b0b      	ldr	r3, [pc, #44]	@ (800e91c <pbuf_free_ooseq+0x48>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	607b      	str	r3, [r7, #4]
 800e8f2:	e00a      	b.n	800e90a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d003      	beq.n	800e904 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f002 f9b3 	bl	8010c68 <tcp_free_ooseq>
      return;
 800e902:	e005      	b.n	800e910 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	68db      	ldr	r3, [r3, #12]
 800e908:	607b      	str	r3, [r7, #4]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d1f1      	bne.n	800e8f4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e910:	3708      	adds	r7, #8
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
 800e916:	bf00      	nop
 800e918:	2000ea49 	.word	0x2000ea49
 800e91c:	2000eb78 	.word	0x2000eb78

0800e920 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b082      	sub	sp, #8
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e928:	f7ff ffd4 	bl	800e8d4 <pbuf_free_ooseq>
}
 800e92c:	bf00      	nop
 800e92e:	3708      	adds	r7, #8
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e93a:	f00a f85b 	bl	80189f4 <sys_arch_protect>
 800e93e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e940:	4b0f      	ldr	r3, [pc, #60]	@ (800e980 <pbuf_pool_is_empty+0x4c>)
 800e942:	781b      	ldrb	r3, [r3, #0]
 800e944:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e946:	4b0e      	ldr	r3, [pc, #56]	@ (800e980 <pbuf_pool_is_empty+0x4c>)
 800e948:	2201      	movs	r2, #1
 800e94a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f00a f85f 	bl	8018a10 <sys_arch_unprotect>

  if (!queued) {
 800e952:	78fb      	ldrb	r3, [r7, #3]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d10f      	bne.n	800e978 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e958:	2100      	movs	r1, #0
 800e95a:	480a      	ldr	r0, [pc, #40]	@ (800e984 <pbuf_pool_is_empty+0x50>)
 800e95c:	f7fe fbfc 	bl	800d158 <tcpip_try_callback>
 800e960:	4603      	mov	r3, r0
 800e962:	2b00      	cmp	r3, #0
 800e964:	d008      	beq.n	800e978 <pbuf_pool_is_empty+0x44>
 800e966:	f00a f845 	bl	80189f4 <sys_arch_protect>
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	4b04      	ldr	r3, [pc, #16]	@ (800e980 <pbuf_pool_is_empty+0x4c>)
 800e96e:	2200      	movs	r2, #0
 800e970:	701a      	strb	r2, [r3, #0]
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f00a f84c 	bl	8018a10 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e978:	bf00      	nop
 800e97a:	3708      	adds	r7, #8
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}
 800e980:	2000ea49 	.word	0x2000ea49
 800e984:	0800e921 	.word	0x0800e921

0800e988 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e988:	b480      	push	{r7}
 800e98a:	b085      	sub	sp, #20
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	60b9      	str	r1, [r7, #8]
 800e992:	4611      	mov	r1, r2
 800e994:	461a      	mov	r2, r3
 800e996:	460b      	mov	r3, r1
 800e998:	80fb      	strh	r3, [r7, #6]
 800e99a:	4613      	mov	r3, r2
 800e99c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	68ba      	ldr	r2, [r7, #8]
 800e9a8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	88fa      	ldrh	r2, [r7, #6]
 800e9ae:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	88ba      	ldrh	r2, [r7, #4]
 800e9b4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e9b6:	8b3b      	ldrh	r3, [r7, #24]
 800e9b8:	b2da      	uxtb	r2, r3
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	7f3a      	ldrb	r2, [r7, #28]
 800e9c2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	73da      	strb	r2, [r3, #15]
}
 800e9d0:	bf00      	nop
 800e9d2:	3714      	adds	r7, #20
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr

0800e9dc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b08c      	sub	sp, #48	@ 0x30
 800e9e0:	af02      	add	r7, sp, #8
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	71fb      	strb	r3, [r7, #7]
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	80bb      	strh	r3, [r7, #4]
 800e9ea:	4613      	mov	r3, r2
 800e9ec:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e9ee:	79fb      	ldrb	r3, [r7, #7]
 800e9f0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e9f2:	887b      	ldrh	r3, [r7, #2]
 800e9f4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800e9f8:	d07f      	beq.n	800eafa <pbuf_alloc+0x11e>
 800e9fa:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800e9fe:	f300 80c8 	bgt.w	800eb92 <pbuf_alloc+0x1b6>
 800ea02:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ea06:	d010      	beq.n	800ea2a <pbuf_alloc+0x4e>
 800ea08:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ea0c:	f300 80c1 	bgt.w	800eb92 <pbuf_alloc+0x1b6>
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	d002      	beq.n	800ea1a <pbuf_alloc+0x3e>
 800ea14:	2b41      	cmp	r3, #65	@ 0x41
 800ea16:	f040 80bc 	bne.w	800eb92 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ea1a:	887a      	ldrh	r2, [r7, #2]
 800ea1c:	88bb      	ldrh	r3, [r7, #4]
 800ea1e:	4619      	mov	r1, r3
 800ea20:	2000      	movs	r0, #0
 800ea22:	f000 f8d1 	bl	800ebc8 <pbuf_alloc_reference>
 800ea26:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800ea28:	e0bd      	b.n	800eba6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ea32:	88bb      	ldrh	r3, [r7, #4]
 800ea34:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ea36:	200d      	movs	r0, #13
 800ea38:	f7ff fa7e 	bl	800df38 <memp_malloc>
 800ea3c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d109      	bne.n	800ea58 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ea44:	f7ff ff76 	bl	800e934 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ea48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d002      	beq.n	800ea54 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ea4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ea50:	f000 faa8 	bl	800efa4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ea54:	2300      	movs	r3, #0
 800ea56:	e0a7      	b.n	800eba8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ea58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ea5a:	3303      	adds	r3, #3
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	f023 0303 	bic.w	r3, r3, #3
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	8b7a      	ldrh	r2, [r7, #26]
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	bf28      	it	cs
 800ea70:	4613      	movcs	r3, r2
 800ea72:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ea74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ea76:	3310      	adds	r3, #16
 800ea78:	693a      	ldr	r2, [r7, #16]
 800ea7a:	4413      	add	r3, r2
 800ea7c:	3303      	adds	r3, #3
 800ea7e:	f023 0303 	bic.w	r3, r3, #3
 800ea82:	4618      	mov	r0, r3
 800ea84:	89f9      	ldrh	r1, [r7, #14]
 800ea86:	8b7a      	ldrh	r2, [r7, #26]
 800ea88:	2300      	movs	r3, #0
 800ea8a:	9301      	str	r3, [sp, #4]
 800ea8c:	887b      	ldrh	r3, [r7, #2]
 800ea8e:	9300      	str	r3, [sp, #0]
 800ea90:	460b      	mov	r3, r1
 800ea92:	4601      	mov	r1, r0
 800ea94:	6938      	ldr	r0, [r7, #16]
 800ea96:	f7ff ff77 	bl	800e988 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	f003 0303 	and.w	r3, r3, #3
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d006      	beq.n	800eab4 <pbuf_alloc+0xd8>
 800eaa6:	4b42      	ldr	r3, [pc, #264]	@ (800ebb0 <pbuf_alloc+0x1d4>)
 800eaa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800eaac:	4941      	ldr	r1, [pc, #260]	@ (800ebb4 <pbuf_alloc+0x1d8>)
 800eaae:	4842      	ldr	r0, [pc, #264]	@ (800ebb8 <pbuf_alloc+0x1dc>)
 800eab0:	f00a fdd8 	bl	8019664 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800eab4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eab6:	3303      	adds	r3, #3
 800eab8:	f023 0303 	bic.w	r3, r3, #3
 800eabc:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800eac0:	d106      	bne.n	800ead0 <pbuf_alloc+0xf4>
 800eac2:	4b3b      	ldr	r3, [pc, #236]	@ (800ebb0 <pbuf_alloc+0x1d4>)
 800eac4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800eac8:	493c      	ldr	r1, [pc, #240]	@ (800ebbc <pbuf_alloc+0x1e0>)
 800eaca:	483b      	ldr	r0, [pc, #236]	@ (800ebb8 <pbuf_alloc+0x1dc>)
 800eacc:	f00a fdca 	bl	8019664 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ead0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d102      	bne.n	800eadc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	627b      	str	r3, [r7, #36]	@ 0x24
 800eada:	e002      	b.n	800eae2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800eadc:	69fb      	ldr	r3, [r7, #28]
 800eade:	693a      	ldr	r2, [r7, #16]
 800eae0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800eae6:	8b7a      	ldrh	r2, [r7, #26]
 800eae8:	89fb      	ldrh	r3, [r7, #14]
 800eaea:	1ad3      	subs	r3, r2, r3
 800eaec:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800eaf2:	8b7b      	ldrh	r3, [r7, #26]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d19e      	bne.n	800ea36 <pbuf_alloc+0x5a>
      break;
 800eaf8:	e055      	b.n	800eba6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800eafa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eafc:	3303      	adds	r3, #3
 800eafe:	b29b      	uxth	r3, r3
 800eb00:	f023 0303 	bic.w	r3, r3, #3
 800eb04:	b29a      	uxth	r2, r3
 800eb06:	88bb      	ldrh	r3, [r7, #4]
 800eb08:	3303      	adds	r3, #3
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	f023 0303 	bic.w	r3, r3, #3
 800eb10:	b29b      	uxth	r3, r3
 800eb12:	4413      	add	r3, r2
 800eb14:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800eb16:	8b3b      	ldrh	r3, [r7, #24]
 800eb18:	3310      	adds	r3, #16
 800eb1a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800eb1c:	8b3a      	ldrh	r2, [r7, #24]
 800eb1e:	88bb      	ldrh	r3, [r7, #4]
 800eb20:	3303      	adds	r3, #3
 800eb22:	f023 0303 	bic.w	r3, r3, #3
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d306      	bcc.n	800eb38 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800eb2a:	8afa      	ldrh	r2, [r7, #22]
 800eb2c:	88bb      	ldrh	r3, [r7, #4]
 800eb2e:	3303      	adds	r3, #3
 800eb30:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d201      	bcs.n	800eb3c <pbuf_alloc+0x160>
        return NULL;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	e035      	b.n	800eba8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800eb3c:	8afb      	ldrh	r3, [r7, #22]
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7fe ffe4 	bl	800db0c <mem_malloc>
 800eb44:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800eb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d101      	bne.n	800eb50 <pbuf_alloc+0x174>
        return NULL;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	e02b      	b.n	800eba8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800eb50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eb52:	3310      	adds	r3, #16
 800eb54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb56:	4413      	add	r3, r2
 800eb58:	3303      	adds	r3, #3
 800eb5a:	f023 0303 	bic.w	r3, r3, #3
 800eb5e:	4618      	mov	r0, r3
 800eb60:	88b9      	ldrh	r1, [r7, #4]
 800eb62:	88ba      	ldrh	r2, [r7, #4]
 800eb64:	2300      	movs	r3, #0
 800eb66:	9301      	str	r3, [sp, #4]
 800eb68:	887b      	ldrh	r3, [r7, #2]
 800eb6a:	9300      	str	r3, [sp, #0]
 800eb6c:	460b      	mov	r3, r1
 800eb6e:	4601      	mov	r1, r0
 800eb70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eb72:	f7ff ff09 	bl	800e988 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800eb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb78:	685b      	ldr	r3, [r3, #4]
 800eb7a:	f003 0303 	and.w	r3, r3, #3
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d010      	beq.n	800eba4 <pbuf_alloc+0x1c8>
 800eb82:	4b0b      	ldr	r3, [pc, #44]	@ (800ebb0 <pbuf_alloc+0x1d4>)
 800eb84:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800eb88:	490d      	ldr	r1, [pc, #52]	@ (800ebc0 <pbuf_alloc+0x1e4>)
 800eb8a:	480b      	ldr	r0, [pc, #44]	@ (800ebb8 <pbuf_alloc+0x1dc>)
 800eb8c:	f00a fd6a 	bl	8019664 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800eb90:	e008      	b.n	800eba4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800eb92:	4b07      	ldr	r3, [pc, #28]	@ (800ebb0 <pbuf_alloc+0x1d4>)
 800eb94:	f240 1227 	movw	r2, #295	@ 0x127
 800eb98:	490a      	ldr	r1, [pc, #40]	@ (800ebc4 <pbuf_alloc+0x1e8>)
 800eb9a:	4807      	ldr	r0, [pc, #28]	@ (800ebb8 <pbuf_alloc+0x1dc>)
 800eb9c:	f00a fd62 	bl	8019664 <iprintf>
      return NULL;
 800eba0:	2300      	movs	r3, #0
 800eba2:	e001      	b.n	800eba8 <pbuf_alloc+0x1cc>
      break;
 800eba4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800eba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3728      	adds	r7, #40	@ 0x28
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	0801bb3c 	.word	0x0801bb3c
 800ebb4:	0801bb6c 	.word	0x0801bb6c
 800ebb8:	0801bb9c 	.word	0x0801bb9c
 800ebbc:	0801bbc4 	.word	0x0801bbc4
 800ebc0:	0801bbf8 	.word	0x0801bbf8
 800ebc4:	0801bc24 	.word	0x0801bc24

0800ebc8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b086      	sub	sp, #24
 800ebcc:	af02      	add	r7, sp, #8
 800ebce:	6078      	str	r0, [r7, #4]
 800ebd0:	460b      	mov	r3, r1
 800ebd2:	807b      	strh	r3, [r7, #2]
 800ebd4:	4613      	mov	r3, r2
 800ebd6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ebd8:	883b      	ldrh	r3, [r7, #0]
 800ebda:	2b41      	cmp	r3, #65	@ 0x41
 800ebdc:	d009      	beq.n	800ebf2 <pbuf_alloc_reference+0x2a>
 800ebde:	883b      	ldrh	r3, [r7, #0]
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d006      	beq.n	800ebf2 <pbuf_alloc_reference+0x2a>
 800ebe4:	4b0f      	ldr	r3, [pc, #60]	@ (800ec24 <pbuf_alloc_reference+0x5c>)
 800ebe6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800ebea:	490f      	ldr	r1, [pc, #60]	@ (800ec28 <pbuf_alloc_reference+0x60>)
 800ebec:	480f      	ldr	r0, [pc, #60]	@ (800ec2c <pbuf_alloc_reference+0x64>)
 800ebee:	f00a fd39 	bl	8019664 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ebf2:	200c      	movs	r0, #12
 800ebf4:	f7ff f9a0 	bl	800df38 <memp_malloc>
 800ebf8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d101      	bne.n	800ec04 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ec00:	2300      	movs	r3, #0
 800ec02:	e00b      	b.n	800ec1c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ec04:	8879      	ldrh	r1, [r7, #2]
 800ec06:	887a      	ldrh	r2, [r7, #2]
 800ec08:	2300      	movs	r3, #0
 800ec0a:	9301      	str	r3, [sp, #4]
 800ec0c:	883b      	ldrh	r3, [r7, #0]
 800ec0e:	9300      	str	r3, [sp, #0]
 800ec10:	460b      	mov	r3, r1
 800ec12:	6879      	ldr	r1, [r7, #4]
 800ec14:	68f8      	ldr	r0, [r7, #12]
 800ec16:	f7ff feb7 	bl	800e988 <pbuf_init_alloced_pbuf>
  return p;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3710      	adds	r7, #16
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}
 800ec24:	0801bb3c 	.word	0x0801bb3c
 800ec28:	0801bc40 	.word	0x0801bc40
 800ec2c:	0801bb9c 	.word	0x0801bb9c

0800ec30 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b088      	sub	sp, #32
 800ec34:	af02      	add	r7, sp, #8
 800ec36:	607b      	str	r3, [r7, #4]
 800ec38:	4603      	mov	r3, r0
 800ec3a:	73fb      	strb	r3, [r7, #15]
 800ec3c:	460b      	mov	r3, r1
 800ec3e:	81bb      	strh	r3, [r7, #12]
 800ec40:	4613      	mov	r3, r2
 800ec42:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ec44:	7bfb      	ldrb	r3, [r7, #15]
 800ec46:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ec48:	8a7b      	ldrh	r3, [r7, #18]
 800ec4a:	3303      	adds	r3, #3
 800ec4c:	f023 0203 	bic.w	r2, r3, #3
 800ec50:	89bb      	ldrh	r3, [r7, #12]
 800ec52:	441a      	add	r2, r3
 800ec54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d901      	bls.n	800ec5e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	e018      	b.n	800ec90 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ec5e:	6a3b      	ldr	r3, [r7, #32]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d007      	beq.n	800ec74 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ec64:	8a7b      	ldrh	r3, [r7, #18]
 800ec66:	3303      	adds	r3, #3
 800ec68:	f023 0303 	bic.w	r3, r3, #3
 800ec6c:	6a3a      	ldr	r2, [r7, #32]
 800ec6e:	4413      	add	r3, r2
 800ec70:	617b      	str	r3, [r7, #20]
 800ec72:	e001      	b.n	800ec78 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ec74:	2300      	movs	r3, #0
 800ec76:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	89b9      	ldrh	r1, [r7, #12]
 800ec7c:	89ba      	ldrh	r2, [r7, #12]
 800ec7e:	2302      	movs	r3, #2
 800ec80:	9301      	str	r3, [sp, #4]
 800ec82:	897b      	ldrh	r3, [r7, #10]
 800ec84:	9300      	str	r3, [sp, #0]
 800ec86:	460b      	mov	r3, r1
 800ec88:	6979      	ldr	r1, [r7, #20]
 800ec8a:	f7ff fe7d 	bl	800e988 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ec8e:	687b      	ldr	r3, [r7, #4]
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3718      	adds	r7, #24
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	460b      	mov	r3, r1
 800eca2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d106      	bne.n	800ecb8 <pbuf_realloc+0x20>
 800ecaa:	4b3a      	ldr	r3, [pc, #232]	@ (800ed94 <pbuf_realloc+0xfc>)
 800ecac:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800ecb0:	4939      	ldr	r1, [pc, #228]	@ (800ed98 <pbuf_realloc+0x100>)
 800ecb2:	483a      	ldr	r0, [pc, #232]	@ (800ed9c <pbuf_realloc+0x104>)
 800ecb4:	f00a fcd6 	bl	8019664 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	891b      	ldrh	r3, [r3, #8]
 800ecbc:	887a      	ldrh	r2, [r7, #2]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d263      	bcs.n	800ed8a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	891a      	ldrh	r2, [r3, #8]
 800ecc6:	887b      	ldrh	r3, [r7, #2]
 800ecc8:	1ad3      	subs	r3, r2, r3
 800ecca:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800eccc:	887b      	ldrh	r3, [r7, #2]
 800ecce:	817b      	strh	r3, [r7, #10]
  q = p;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ecd4:	e018      	b.n	800ed08 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	895b      	ldrh	r3, [r3, #10]
 800ecda:	897a      	ldrh	r2, [r7, #10]
 800ecdc:	1ad3      	subs	r3, r2, r3
 800ecde:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	891a      	ldrh	r2, [r3, #8]
 800ece4:	893b      	ldrh	r3, [r7, #8]
 800ece6:	1ad3      	subs	r3, r2, r3
 800ece8:	b29a      	uxth	r2, r3
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d106      	bne.n	800ed08 <pbuf_realloc+0x70>
 800ecfa:	4b26      	ldr	r3, [pc, #152]	@ (800ed94 <pbuf_realloc+0xfc>)
 800ecfc:	f240 12af 	movw	r2, #431	@ 0x1af
 800ed00:	4927      	ldr	r1, [pc, #156]	@ (800eda0 <pbuf_realloc+0x108>)
 800ed02:	4826      	ldr	r0, [pc, #152]	@ (800ed9c <pbuf_realloc+0x104>)
 800ed04:	f00a fcae 	bl	8019664 <iprintf>
  while (rem_len > q->len) {
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	895b      	ldrh	r3, [r3, #10]
 800ed0c:	897a      	ldrh	r2, [r7, #10]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d8e1      	bhi.n	800ecd6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	7b1b      	ldrb	r3, [r3, #12]
 800ed16:	f003 030f 	and.w	r3, r3, #15
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d121      	bne.n	800ed62 <pbuf_realloc+0xca>
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	895b      	ldrh	r3, [r3, #10]
 800ed22:	897a      	ldrh	r2, [r7, #10]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d01c      	beq.n	800ed62 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	7b5b      	ldrb	r3, [r3, #13]
 800ed2c:	f003 0302 	and.w	r3, r3, #2
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d116      	bne.n	800ed62 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	685a      	ldr	r2, [r3, #4]
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	1ad3      	subs	r3, r2, r3
 800ed3c:	b29a      	uxth	r2, r3
 800ed3e:	897b      	ldrh	r3, [r7, #10]
 800ed40:	4413      	add	r3, r2
 800ed42:	b29b      	uxth	r3, r3
 800ed44:	4619      	mov	r1, r3
 800ed46:	68f8      	ldr	r0, [r7, #12]
 800ed48:	f7fe fdb4 	bl	800d8b4 <mem_trim>
 800ed4c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d106      	bne.n	800ed62 <pbuf_realloc+0xca>
 800ed54:	4b0f      	ldr	r3, [pc, #60]	@ (800ed94 <pbuf_realloc+0xfc>)
 800ed56:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800ed5a:	4912      	ldr	r1, [pc, #72]	@ (800eda4 <pbuf_realloc+0x10c>)
 800ed5c:	480f      	ldr	r0, [pc, #60]	@ (800ed9c <pbuf_realloc+0x104>)
 800ed5e:	f00a fc81 	bl	8019664 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	897a      	ldrh	r2, [r7, #10]
 800ed66:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	895a      	ldrh	r2, [r3, #10]
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d004      	beq.n	800ed82 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f000 f911 	bl	800efa4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	2200      	movs	r2, #0
 800ed86:	601a      	str	r2, [r3, #0]
 800ed88:	e000      	b.n	800ed8c <pbuf_realloc+0xf4>
    return;
 800ed8a:	bf00      	nop

}
 800ed8c:	3710      	adds	r7, #16
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	bf00      	nop
 800ed94:	0801bb3c 	.word	0x0801bb3c
 800ed98:	0801bc54 	.word	0x0801bc54
 800ed9c:	0801bb9c 	.word	0x0801bb9c
 800eda0:	0801bc6c 	.word	0x0801bc6c
 800eda4:	0801bc84 	.word	0x0801bc84

0800eda8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b086      	sub	sp, #24
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	4613      	mov	r3, r2
 800edb4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d106      	bne.n	800edca <pbuf_add_header_impl+0x22>
 800edbc:	4b2b      	ldr	r3, [pc, #172]	@ (800ee6c <pbuf_add_header_impl+0xc4>)
 800edbe:	f240 12df 	movw	r2, #479	@ 0x1df
 800edc2:	492b      	ldr	r1, [pc, #172]	@ (800ee70 <pbuf_add_header_impl+0xc8>)
 800edc4:	482b      	ldr	r0, [pc, #172]	@ (800ee74 <pbuf_add_header_impl+0xcc>)
 800edc6:	f00a fc4d 	bl	8019664 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d003      	beq.n	800edd8 <pbuf_add_header_impl+0x30>
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800edd6:	d301      	bcc.n	800eddc <pbuf_add_header_impl+0x34>
    return 1;
 800edd8:	2301      	movs	r3, #1
 800edda:	e043      	b.n	800ee64 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d101      	bne.n	800ede6 <pbuf_add_header_impl+0x3e>
    return 0;
 800ede2:	2300      	movs	r3, #0
 800ede4:	e03e      	b.n	800ee64 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	891a      	ldrh	r2, [r3, #8]
 800edee:	8a7b      	ldrh	r3, [r7, #18]
 800edf0:	4413      	add	r3, r2
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	8a7a      	ldrh	r2, [r7, #18]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d901      	bls.n	800edfe <pbuf_add_header_impl+0x56>
    return 1;
 800edfa:	2301      	movs	r3, #1
 800edfc:	e032      	b.n	800ee64 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	7b1b      	ldrb	r3, [r3, #12]
 800ee02:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ee04:	8a3b      	ldrh	r3, [r7, #16]
 800ee06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d00c      	beq.n	800ee28 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	685a      	ldr	r2, [r3, #4]
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	425b      	negs	r3, r3
 800ee16:	4413      	add	r3, r2
 800ee18:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	3310      	adds	r3, #16
 800ee1e:	697a      	ldr	r2, [r7, #20]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d20d      	bcs.n	800ee40 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ee24:	2301      	movs	r3, #1
 800ee26:	e01d      	b.n	800ee64 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ee28:	79fb      	ldrb	r3, [r7, #7]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d006      	beq.n	800ee3c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	685a      	ldr	r2, [r3, #4]
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	425b      	negs	r3, r3
 800ee36:	4413      	add	r3, r2
 800ee38:	617b      	str	r3, [r7, #20]
 800ee3a:	e001      	b.n	800ee40 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	e011      	b.n	800ee64 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	697a      	ldr	r2, [r7, #20]
 800ee44:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	895a      	ldrh	r2, [r3, #10]
 800ee4a:	8a7b      	ldrh	r3, [r7, #18]
 800ee4c:	4413      	add	r3, r2
 800ee4e:	b29a      	uxth	r2, r3
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	891a      	ldrh	r2, [r3, #8]
 800ee58:	8a7b      	ldrh	r3, [r7, #18]
 800ee5a:	4413      	add	r3, r2
 800ee5c:	b29a      	uxth	r2, r3
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	811a      	strh	r2, [r3, #8]


  return 0;
 800ee62:	2300      	movs	r3, #0
}
 800ee64:	4618      	mov	r0, r3
 800ee66:	3718      	adds	r7, #24
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}
 800ee6c:	0801bb3c 	.word	0x0801bb3c
 800ee70:	0801bca0 	.word	0x0801bca0
 800ee74:	0801bb9c 	.word	0x0801bb9c

0800ee78 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b082      	sub	sp, #8
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
 800ee80:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ee82:	2200      	movs	r2, #0
 800ee84:	6839      	ldr	r1, [r7, #0]
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f7ff ff8e 	bl	800eda8 <pbuf_add_header_impl>
 800ee8c:	4603      	mov	r3, r0
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3708      	adds	r7, #8
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}
	...

0800ee98 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b084      	sub	sp, #16
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d106      	bne.n	800eeb6 <pbuf_remove_header+0x1e>
 800eea8:	4b20      	ldr	r3, [pc, #128]	@ (800ef2c <pbuf_remove_header+0x94>)
 800eeaa:	f240 224b 	movw	r2, #587	@ 0x24b
 800eeae:	4920      	ldr	r1, [pc, #128]	@ (800ef30 <pbuf_remove_header+0x98>)
 800eeb0:	4820      	ldr	r0, [pc, #128]	@ (800ef34 <pbuf_remove_header+0x9c>)
 800eeb2:	f00a fbd7 	bl	8019664 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d003      	beq.n	800eec4 <pbuf_remove_header+0x2c>
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eec2:	d301      	bcc.n	800eec8 <pbuf_remove_header+0x30>
    return 1;
 800eec4:	2301      	movs	r3, #1
 800eec6:	e02c      	b.n	800ef22 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d101      	bne.n	800eed2 <pbuf_remove_header+0x3a>
    return 0;
 800eece:	2300      	movs	r3, #0
 800eed0:	e027      	b.n	800ef22 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	895b      	ldrh	r3, [r3, #10]
 800eeda:	89fa      	ldrh	r2, [r7, #14]
 800eedc:	429a      	cmp	r2, r3
 800eede:	d908      	bls.n	800eef2 <pbuf_remove_header+0x5a>
 800eee0:	4b12      	ldr	r3, [pc, #72]	@ (800ef2c <pbuf_remove_header+0x94>)
 800eee2:	f240 2255 	movw	r2, #597	@ 0x255
 800eee6:	4914      	ldr	r1, [pc, #80]	@ (800ef38 <pbuf_remove_header+0xa0>)
 800eee8:	4812      	ldr	r0, [pc, #72]	@ (800ef34 <pbuf_remove_header+0x9c>)
 800eeea:	f00a fbbb 	bl	8019664 <iprintf>
 800eeee:	2301      	movs	r3, #1
 800eef0:	e017      	b.n	800ef22 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	685a      	ldr	r2, [r3, #4]
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	441a      	add	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	895a      	ldrh	r2, [r3, #10]
 800ef08:	89fb      	ldrh	r3, [r7, #14]
 800ef0a:	1ad3      	subs	r3, r2, r3
 800ef0c:	b29a      	uxth	r2, r3
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	891a      	ldrh	r2, [r3, #8]
 800ef16:	89fb      	ldrh	r3, [r7, #14]
 800ef18:	1ad3      	subs	r3, r2, r3
 800ef1a:	b29a      	uxth	r2, r3
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ef20:	2300      	movs	r3, #0
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3710      	adds	r7, #16
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	0801bb3c 	.word	0x0801bb3c
 800ef30:	0801bca0 	.word	0x0801bca0
 800ef34:	0801bb9c 	.word	0x0801bb9c
 800ef38:	0801bcac 	.word	0x0801bcac

0800ef3c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b082      	sub	sp, #8
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	460b      	mov	r3, r1
 800ef46:	807b      	strh	r3, [r7, #2]
 800ef48:	4613      	mov	r3, r2
 800ef4a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ef4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	da08      	bge.n	800ef66 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ef54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ef58:	425b      	negs	r3, r3
 800ef5a:	4619      	mov	r1, r3
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f7ff ff9b 	bl	800ee98 <pbuf_remove_header>
 800ef62:	4603      	mov	r3, r0
 800ef64:	e007      	b.n	800ef76 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ef66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ef6a:	787a      	ldrb	r2, [r7, #1]
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f7ff ff1a 	bl	800eda8 <pbuf_add_header_impl>
 800ef74:	4603      	mov	r3, r0
  }
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	3708      	adds	r7, #8
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}

0800ef7e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ef7e:	b580      	push	{r7, lr}
 800ef80:	b082      	sub	sp, #8
 800ef82:	af00      	add	r7, sp, #0
 800ef84:	6078      	str	r0, [r7, #4]
 800ef86:	460b      	mov	r3, r1
 800ef88:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ef8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ef8e:	2201      	movs	r2, #1
 800ef90:	4619      	mov	r1, r3
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f7ff ffd2 	bl	800ef3c <pbuf_header_impl>
 800ef98:	4603      	mov	r3, r0
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3708      	adds	r7, #8
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
	...

0800efa4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b088      	sub	sp, #32
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d10b      	bne.n	800efca <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d106      	bne.n	800efc6 <pbuf_free+0x22>
 800efb8:	4b3b      	ldr	r3, [pc, #236]	@ (800f0a8 <pbuf_free+0x104>)
 800efba:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800efbe:	493b      	ldr	r1, [pc, #236]	@ (800f0ac <pbuf_free+0x108>)
 800efc0:	483b      	ldr	r0, [pc, #236]	@ (800f0b0 <pbuf_free+0x10c>)
 800efc2:	f00a fb4f 	bl	8019664 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800efc6:	2300      	movs	r3, #0
 800efc8:	e069      	b.n	800f09e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800efca:	2300      	movs	r3, #0
 800efcc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800efce:	e062      	b.n	800f096 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800efd0:	f009 fd10 	bl	80189f4 <sys_arch_protect>
 800efd4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	7b9b      	ldrb	r3, [r3, #14]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d106      	bne.n	800efec <pbuf_free+0x48>
 800efde:	4b32      	ldr	r3, [pc, #200]	@ (800f0a8 <pbuf_free+0x104>)
 800efe0:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800efe4:	4933      	ldr	r1, [pc, #204]	@ (800f0b4 <pbuf_free+0x110>)
 800efe6:	4832      	ldr	r0, [pc, #200]	@ (800f0b0 <pbuf_free+0x10c>)
 800efe8:	f00a fb3c 	bl	8019664 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	7b9b      	ldrb	r3, [r3, #14]
 800eff0:	3b01      	subs	r3, #1
 800eff2:	b2da      	uxtb	r2, r3
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	739a      	strb	r2, [r3, #14]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	7b9b      	ldrb	r3, [r3, #14]
 800effc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800effe:	69b8      	ldr	r0, [r7, #24]
 800f000:	f009 fd06 	bl	8018a10 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f004:	7dfb      	ldrb	r3, [r7, #23]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d143      	bne.n	800f092 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	7b1b      	ldrb	r3, [r3, #12]
 800f014:	f003 030f 	and.w	r3, r3, #15
 800f018:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	7b5b      	ldrb	r3, [r3, #13]
 800f01e:	f003 0302 	and.w	r3, r3, #2
 800f022:	2b00      	cmp	r3, #0
 800f024:	d011      	beq.n	800f04a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	691b      	ldr	r3, [r3, #16]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d106      	bne.n	800f040 <pbuf_free+0x9c>
 800f032:	4b1d      	ldr	r3, [pc, #116]	@ (800f0a8 <pbuf_free+0x104>)
 800f034:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f038:	491f      	ldr	r1, [pc, #124]	@ (800f0b8 <pbuf_free+0x114>)
 800f03a:	481d      	ldr	r0, [pc, #116]	@ (800f0b0 <pbuf_free+0x10c>)
 800f03c:	f00a fb12 	bl	8019664 <iprintf>
        pc->custom_free_function(p);
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	691b      	ldr	r3, [r3, #16]
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	4798      	blx	r3
 800f048:	e01d      	b.n	800f086 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f04a:	7bfb      	ldrb	r3, [r7, #15]
 800f04c:	2b02      	cmp	r3, #2
 800f04e:	d104      	bne.n	800f05a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f050:	6879      	ldr	r1, [r7, #4]
 800f052:	200d      	movs	r0, #13
 800f054:	f7fe ffec 	bl	800e030 <memp_free>
 800f058:	e015      	b.n	800f086 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f05a:	7bfb      	ldrb	r3, [r7, #15]
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d104      	bne.n	800f06a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f060:	6879      	ldr	r1, [r7, #4]
 800f062:	200c      	movs	r0, #12
 800f064:	f7fe ffe4 	bl	800e030 <memp_free>
 800f068:	e00d      	b.n	800f086 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f06a:	7bfb      	ldrb	r3, [r7, #15]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d103      	bne.n	800f078 <pbuf_free+0xd4>
          mem_free(p);
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f7fe fb5b 	bl	800d72c <mem_free>
 800f076:	e006      	b.n	800f086 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f078:	4b0b      	ldr	r3, [pc, #44]	@ (800f0a8 <pbuf_free+0x104>)
 800f07a:	f240 320f 	movw	r2, #783	@ 0x30f
 800f07e:	490f      	ldr	r1, [pc, #60]	@ (800f0bc <pbuf_free+0x118>)
 800f080:	480b      	ldr	r0, [pc, #44]	@ (800f0b0 <pbuf_free+0x10c>)
 800f082:	f00a faef 	bl	8019664 <iprintf>
        }
      }
      count++;
 800f086:	7ffb      	ldrb	r3, [r7, #31]
 800f088:	3301      	adds	r3, #1
 800f08a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	607b      	str	r3, [r7, #4]
 800f090:	e001      	b.n	800f096 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f092:	2300      	movs	r3, #0
 800f094:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d199      	bne.n	800efd0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f09c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3720      	adds	r7, #32
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	0801bb3c 	.word	0x0801bb3c
 800f0ac:	0801bca0 	.word	0x0801bca0
 800f0b0:	0801bb9c 	.word	0x0801bb9c
 800f0b4:	0801bccc 	.word	0x0801bccc
 800f0b8:	0801bce4 	.word	0x0801bce4
 800f0bc:	0801bd08 	.word	0x0801bd08

0800f0c0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b085      	sub	sp, #20
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f0cc:	e005      	b.n	800f0da <pbuf_clen+0x1a>
    ++len;
 800f0ce:	89fb      	ldrh	r3, [r7, #14]
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d1f6      	bne.n	800f0ce <pbuf_clen+0xe>
  }
  return len;
 800f0e0:	89fb      	ldrh	r3, [r7, #14]
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3714      	adds	r7, #20
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ec:	4770      	bx	lr
	...

0800f0f0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b084      	sub	sp, #16
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d016      	beq.n	800f12c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f0fe:	f009 fc79 	bl	80189f4 <sys_arch_protect>
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	7b9b      	ldrb	r3, [r3, #14]
 800f108:	3301      	adds	r3, #1
 800f10a:	b2da      	uxtb	r2, r3
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	739a      	strb	r2, [r3, #14]
 800f110:	68f8      	ldr	r0, [r7, #12]
 800f112:	f009 fc7d 	bl	8018a10 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	7b9b      	ldrb	r3, [r3, #14]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d106      	bne.n	800f12c <pbuf_ref+0x3c>
 800f11e:	4b05      	ldr	r3, [pc, #20]	@ (800f134 <pbuf_ref+0x44>)
 800f120:	f240 3242 	movw	r2, #834	@ 0x342
 800f124:	4904      	ldr	r1, [pc, #16]	@ (800f138 <pbuf_ref+0x48>)
 800f126:	4805      	ldr	r0, [pc, #20]	@ (800f13c <pbuf_ref+0x4c>)
 800f128:	f00a fa9c 	bl	8019664 <iprintf>
  }
}
 800f12c:	bf00      	nop
 800f12e:	3710      	adds	r7, #16
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}
 800f134:	0801bb3c 	.word	0x0801bb3c
 800f138:	0801bd1c 	.word	0x0801bd1c
 800f13c:	0801bb9c 	.word	0x0801bb9c

0800f140 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b084      	sub	sp, #16
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d002      	beq.n	800f156 <pbuf_cat+0x16>
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d107      	bne.n	800f166 <pbuf_cat+0x26>
 800f156:	4b20      	ldr	r3, [pc, #128]	@ (800f1d8 <pbuf_cat+0x98>)
 800f158:	f240 3259 	movw	r2, #857	@ 0x359
 800f15c:	491f      	ldr	r1, [pc, #124]	@ (800f1dc <pbuf_cat+0x9c>)
 800f15e:	4820      	ldr	r0, [pc, #128]	@ (800f1e0 <pbuf_cat+0xa0>)
 800f160:	f00a fa80 	bl	8019664 <iprintf>
 800f164:	e034      	b.n	800f1d0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	60fb      	str	r3, [r7, #12]
 800f16a:	e00a      	b.n	800f182 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	891a      	ldrh	r2, [r3, #8]
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	891b      	ldrh	r3, [r3, #8]
 800f174:	4413      	add	r3, r2
 800f176:	b29a      	uxth	r2, r3
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	60fb      	str	r3, [r7, #12]
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d1f0      	bne.n	800f16c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	891a      	ldrh	r2, [r3, #8]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	895b      	ldrh	r3, [r3, #10]
 800f192:	429a      	cmp	r2, r3
 800f194:	d006      	beq.n	800f1a4 <pbuf_cat+0x64>
 800f196:	4b10      	ldr	r3, [pc, #64]	@ (800f1d8 <pbuf_cat+0x98>)
 800f198:	f240 3262 	movw	r2, #866	@ 0x362
 800f19c:	4911      	ldr	r1, [pc, #68]	@ (800f1e4 <pbuf_cat+0xa4>)
 800f19e:	4810      	ldr	r0, [pc, #64]	@ (800f1e0 <pbuf_cat+0xa0>)
 800f1a0:	f00a fa60 	bl	8019664 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d006      	beq.n	800f1ba <pbuf_cat+0x7a>
 800f1ac:	4b0a      	ldr	r3, [pc, #40]	@ (800f1d8 <pbuf_cat+0x98>)
 800f1ae:	f240 3263 	movw	r2, #867	@ 0x363
 800f1b2:	490d      	ldr	r1, [pc, #52]	@ (800f1e8 <pbuf_cat+0xa8>)
 800f1b4:	480a      	ldr	r0, [pc, #40]	@ (800f1e0 <pbuf_cat+0xa0>)
 800f1b6:	f00a fa55 	bl	8019664 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	891a      	ldrh	r2, [r3, #8]
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	891b      	ldrh	r3, [r3, #8]
 800f1c2:	4413      	add	r3, r2
 800f1c4:	b29a      	uxth	r2, r3
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	683a      	ldr	r2, [r7, #0]
 800f1ce:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f1d0:	3710      	adds	r7, #16
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	bf00      	nop
 800f1d8:	0801bb3c 	.word	0x0801bb3c
 800f1dc:	0801bd30 	.word	0x0801bd30
 800f1e0:	0801bb9c 	.word	0x0801bb9c
 800f1e4:	0801bd68 	.word	0x0801bd68
 800f1e8:	0801bd98 	.word	0x0801bd98

0800f1ec <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b086      	sub	sp, #24
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	617b      	str	r3, [r7, #20]
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d008      	beq.n	800f216 <pbuf_copy+0x2a>
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d005      	beq.n	800f216 <pbuf_copy+0x2a>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	891a      	ldrh	r2, [r3, #8]
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	891b      	ldrh	r3, [r3, #8]
 800f212:	429a      	cmp	r2, r3
 800f214:	d209      	bcs.n	800f22a <pbuf_copy+0x3e>
 800f216:	4b57      	ldr	r3, [pc, #348]	@ (800f374 <pbuf_copy+0x188>)
 800f218:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800f21c:	4956      	ldr	r1, [pc, #344]	@ (800f378 <pbuf_copy+0x18c>)
 800f21e:	4857      	ldr	r0, [pc, #348]	@ (800f37c <pbuf_copy+0x190>)
 800f220:	f00a fa20 	bl	8019664 <iprintf>
 800f224:	f06f 030f 	mvn.w	r3, #15
 800f228:	e09f      	b.n	800f36a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	895b      	ldrh	r3, [r3, #10]
 800f22e:	461a      	mov	r2, r3
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	1ad2      	subs	r2, r2, r3
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	895b      	ldrh	r3, [r3, #10]
 800f238:	4619      	mov	r1, r3
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	1acb      	subs	r3, r1, r3
 800f23e:	429a      	cmp	r2, r3
 800f240:	d306      	bcc.n	800f250 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	895b      	ldrh	r3, [r3, #10]
 800f246:	461a      	mov	r2, r3
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	1ad3      	subs	r3, r2, r3
 800f24c:	60fb      	str	r3, [r7, #12]
 800f24e:	e005      	b.n	800f25c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	895b      	ldrh	r3, [r3, #10]
 800f254:	461a      	mov	r2, r3
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	1ad3      	subs	r3, r2, r3
 800f25a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	685a      	ldr	r2, [r3, #4]
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	18d0      	adds	r0, r2, r3
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	685a      	ldr	r2, [r3, #4]
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	4413      	add	r3, r2
 800f26c:	68fa      	ldr	r2, [r7, #12]
 800f26e:	4619      	mov	r1, r3
 800f270:	f00a fc9d 	bl	8019bae <memcpy>
    offset_to += len;
 800f274:	697a      	ldr	r2, [r7, #20]
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	4413      	add	r3, r2
 800f27a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f27c:	693a      	ldr	r2, [r7, #16]
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	4413      	add	r3, r2
 800f282:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	895b      	ldrh	r3, [r3, #10]
 800f288:	461a      	mov	r2, r3
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d906      	bls.n	800f29e <pbuf_copy+0xb2>
 800f290:	4b38      	ldr	r3, [pc, #224]	@ (800f374 <pbuf_copy+0x188>)
 800f292:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800f296:	493a      	ldr	r1, [pc, #232]	@ (800f380 <pbuf_copy+0x194>)
 800f298:	4838      	ldr	r0, [pc, #224]	@ (800f37c <pbuf_copy+0x190>)
 800f29a:	f00a f9e3 	bl	8019664 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	895b      	ldrh	r3, [r3, #10]
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	693b      	ldr	r3, [r7, #16]
 800f2a6:	4293      	cmp	r3, r2
 800f2a8:	d906      	bls.n	800f2b8 <pbuf_copy+0xcc>
 800f2aa:	4b32      	ldr	r3, [pc, #200]	@ (800f374 <pbuf_copy+0x188>)
 800f2ac:	f240 32da 	movw	r2, #986	@ 0x3da
 800f2b0:	4934      	ldr	r1, [pc, #208]	@ (800f384 <pbuf_copy+0x198>)
 800f2b2:	4832      	ldr	r0, [pc, #200]	@ (800f37c <pbuf_copy+0x190>)
 800f2b4:	f00a f9d6 	bl	8019664 <iprintf>
    if (offset_from >= p_from->len) {
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	895b      	ldrh	r3, [r3, #10]
 800f2bc:	461a      	mov	r2, r3
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	4293      	cmp	r3, r2
 800f2c2:	d304      	bcc.n	800f2ce <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	895b      	ldrh	r3, [r3, #10]
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	4293      	cmp	r3, r2
 800f2d8:	d114      	bne.n	800f304 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d10c      	bne.n	800f304 <pbuf_copy+0x118>
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d009      	beq.n	800f304 <pbuf_copy+0x118>
 800f2f0:	4b20      	ldr	r3, [pc, #128]	@ (800f374 <pbuf_copy+0x188>)
 800f2f2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800f2f6:	4924      	ldr	r1, [pc, #144]	@ (800f388 <pbuf_copy+0x19c>)
 800f2f8:	4820      	ldr	r0, [pc, #128]	@ (800f37c <pbuf_copy+0x190>)
 800f2fa:	f00a f9b3 	bl	8019664 <iprintf>
 800f2fe:	f06f 030f 	mvn.w	r3, #15
 800f302:	e032      	b.n	800f36a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d013      	beq.n	800f332 <pbuf_copy+0x146>
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	895a      	ldrh	r2, [r3, #10]
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	891b      	ldrh	r3, [r3, #8]
 800f312:	429a      	cmp	r2, r3
 800f314:	d10d      	bne.n	800f332 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d009      	beq.n	800f332 <pbuf_copy+0x146>
 800f31e:	4b15      	ldr	r3, [pc, #84]	@ (800f374 <pbuf_copy+0x188>)
 800f320:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800f324:	4919      	ldr	r1, [pc, #100]	@ (800f38c <pbuf_copy+0x1a0>)
 800f326:	4815      	ldr	r0, [pc, #84]	@ (800f37c <pbuf_copy+0x190>)
 800f328:	f00a f99c 	bl	8019664 <iprintf>
 800f32c:	f06f 0305 	mvn.w	r3, #5
 800f330:	e01b      	b.n	800f36a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d013      	beq.n	800f360 <pbuf_copy+0x174>
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	895a      	ldrh	r2, [r3, #10]
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	891b      	ldrh	r3, [r3, #8]
 800f340:	429a      	cmp	r2, r3
 800f342:	d10d      	bne.n	800f360 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d009      	beq.n	800f360 <pbuf_copy+0x174>
 800f34c:	4b09      	ldr	r3, [pc, #36]	@ (800f374 <pbuf_copy+0x188>)
 800f34e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800f352:	490e      	ldr	r1, [pc, #56]	@ (800f38c <pbuf_copy+0x1a0>)
 800f354:	4809      	ldr	r0, [pc, #36]	@ (800f37c <pbuf_copy+0x190>)
 800f356:	f00a f985 	bl	8019664 <iprintf>
 800f35a:	f06f 0305 	mvn.w	r3, #5
 800f35e:	e004      	b.n	800f36a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	2b00      	cmp	r3, #0
 800f364:	f47f af61 	bne.w	800f22a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f368:	2300      	movs	r3, #0
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	3718      	adds	r7, #24
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}
 800f372:	bf00      	nop
 800f374:	0801bb3c 	.word	0x0801bb3c
 800f378:	0801bde4 	.word	0x0801bde4
 800f37c:	0801bb9c 	.word	0x0801bb9c
 800f380:	0801be14 	.word	0x0801be14
 800f384:	0801be2c 	.word	0x0801be2c
 800f388:	0801be48 	.word	0x0801be48
 800f38c:	0801be58 	.word	0x0801be58

0800f390 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b088      	sub	sp, #32
 800f394:	af00      	add	r7, sp, #0
 800f396:	60f8      	str	r0, [r7, #12]
 800f398:	60b9      	str	r1, [r7, #8]
 800f39a:	4611      	mov	r1, r2
 800f39c:	461a      	mov	r2, r3
 800f39e:	460b      	mov	r3, r1
 800f3a0:	80fb      	strh	r3, [r7, #6]
 800f3a2:	4613      	mov	r3, r2
 800f3a4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d108      	bne.n	800f3c6 <pbuf_copy_partial+0x36>
 800f3b4:	4b2b      	ldr	r3, [pc, #172]	@ (800f464 <pbuf_copy_partial+0xd4>)
 800f3b6:	f240 420a 	movw	r2, #1034	@ 0x40a
 800f3ba:	492b      	ldr	r1, [pc, #172]	@ (800f468 <pbuf_copy_partial+0xd8>)
 800f3bc:	482b      	ldr	r0, [pc, #172]	@ (800f46c <pbuf_copy_partial+0xdc>)
 800f3be:	f00a f951 	bl	8019664 <iprintf>
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	e04a      	b.n	800f45c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d108      	bne.n	800f3de <pbuf_copy_partial+0x4e>
 800f3cc:	4b25      	ldr	r3, [pc, #148]	@ (800f464 <pbuf_copy_partial+0xd4>)
 800f3ce:	f240 420b 	movw	r2, #1035	@ 0x40b
 800f3d2:	4927      	ldr	r1, [pc, #156]	@ (800f470 <pbuf_copy_partial+0xe0>)
 800f3d4:	4825      	ldr	r0, [pc, #148]	@ (800f46c <pbuf_copy_partial+0xdc>)
 800f3d6:	f00a f945 	bl	8019664 <iprintf>
 800f3da:	2300      	movs	r3, #0
 800f3dc:	e03e      	b.n	800f45c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	61fb      	str	r3, [r7, #28]
 800f3e2:	e034      	b.n	800f44e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f3e4:	88bb      	ldrh	r3, [r7, #4]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d00a      	beq.n	800f400 <pbuf_copy_partial+0x70>
 800f3ea:	69fb      	ldr	r3, [r7, #28]
 800f3ec:	895b      	ldrh	r3, [r3, #10]
 800f3ee:	88ba      	ldrh	r2, [r7, #4]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d305      	bcc.n	800f400 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f3f4:	69fb      	ldr	r3, [r7, #28]
 800f3f6:	895b      	ldrh	r3, [r3, #10]
 800f3f8:	88ba      	ldrh	r2, [r7, #4]
 800f3fa:	1ad3      	subs	r3, r2, r3
 800f3fc:	80bb      	strh	r3, [r7, #4]
 800f3fe:	e023      	b.n	800f448 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	895a      	ldrh	r2, [r3, #10]
 800f404:	88bb      	ldrh	r3, [r7, #4]
 800f406:	1ad3      	subs	r3, r2, r3
 800f408:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f40a:	8b3a      	ldrh	r2, [r7, #24]
 800f40c:	88fb      	ldrh	r3, [r7, #6]
 800f40e:	429a      	cmp	r2, r3
 800f410:	d901      	bls.n	800f416 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f412:	88fb      	ldrh	r3, [r7, #6]
 800f414:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f416:	8b7b      	ldrh	r3, [r7, #26]
 800f418:	68ba      	ldr	r2, [r7, #8]
 800f41a:	18d0      	adds	r0, r2, r3
 800f41c:	69fb      	ldr	r3, [r7, #28]
 800f41e:	685a      	ldr	r2, [r3, #4]
 800f420:	88bb      	ldrh	r3, [r7, #4]
 800f422:	4413      	add	r3, r2
 800f424:	8b3a      	ldrh	r2, [r7, #24]
 800f426:	4619      	mov	r1, r3
 800f428:	f00a fbc1 	bl	8019bae <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f42c:	8afa      	ldrh	r2, [r7, #22]
 800f42e:	8b3b      	ldrh	r3, [r7, #24]
 800f430:	4413      	add	r3, r2
 800f432:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f434:	8b7a      	ldrh	r2, [r7, #26]
 800f436:	8b3b      	ldrh	r3, [r7, #24]
 800f438:	4413      	add	r3, r2
 800f43a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f43c:	88fa      	ldrh	r2, [r7, #6]
 800f43e:	8b3b      	ldrh	r3, [r7, #24]
 800f440:	1ad3      	subs	r3, r2, r3
 800f442:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f444:	2300      	movs	r3, #0
 800f446:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	61fb      	str	r3, [r7, #28]
 800f44e:	88fb      	ldrh	r3, [r7, #6]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d002      	beq.n	800f45a <pbuf_copy_partial+0xca>
 800f454:	69fb      	ldr	r3, [r7, #28]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d1c4      	bne.n	800f3e4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f45a:	8afb      	ldrh	r3, [r7, #22]
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3720      	adds	r7, #32
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}
 800f464:	0801bb3c 	.word	0x0801bb3c
 800f468:	0801be84 	.word	0x0801be84
 800f46c:	0801bb9c 	.word	0x0801bb9c
 800f470:	0801bea4 	.word	0x0801bea4

0800f474 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b084      	sub	sp, #16
 800f478:	af00      	add	r7, sp, #0
 800f47a:	4603      	mov	r3, r0
 800f47c:	603a      	str	r2, [r7, #0]
 800f47e:	71fb      	strb	r3, [r7, #7]
 800f480:	460b      	mov	r3, r1
 800f482:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	8919      	ldrh	r1, [r3, #8]
 800f488:	88ba      	ldrh	r2, [r7, #4]
 800f48a:	79fb      	ldrb	r3, [r7, #7]
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7ff faa5 	bl	800e9dc <pbuf_alloc>
 800f492:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d101      	bne.n	800f49e <pbuf_clone+0x2a>
    return NULL;
 800f49a:	2300      	movs	r3, #0
 800f49c:	e011      	b.n	800f4c2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f49e:	6839      	ldr	r1, [r7, #0]
 800f4a0:	68f8      	ldr	r0, [r7, #12]
 800f4a2:	f7ff fea3 	bl	800f1ec <pbuf_copy>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f4aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d006      	beq.n	800f4c0 <pbuf_clone+0x4c>
 800f4b2:	4b06      	ldr	r3, [pc, #24]	@ (800f4cc <pbuf_clone+0x58>)
 800f4b4:	f240 5224 	movw	r2, #1316	@ 0x524
 800f4b8:	4905      	ldr	r1, [pc, #20]	@ (800f4d0 <pbuf_clone+0x5c>)
 800f4ba:	4806      	ldr	r0, [pc, #24]	@ (800f4d4 <pbuf_clone+0x60>)
 800f4bc:	f00a f8d2 	bl	8019664 <iprintf>
  return q;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	3710      	adds	r7, #16
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}
 800f4ca:	bf00      	nop
 800f4cc:	0801bb3c 	.word	0x0801bb3c
 800f4d0:	0801bfb0 	.word	0x0801bfb0
 800f4d4:	0801bb9c 	.word	0x0801bb9c

0800f4d8 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 800f4d8:	b480      	push	{r7}
 800f4da:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
 800f4dc:	4b04      	ldr	r3, [pc, #16]	@ (800f4f0 <stats_init+0x18>)
 800f4de:	4a05      	ldr	r2, [pc, #20]	@ (800f4f4 <stats_init+0x1c>)
 800f4e0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 800f4e4:	bf00      	nop
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ec:	4770      	bx	lr
 800f4ee:	bf00      	nop
 800f4f0:	2000ea4c 	.word	0x2000ea4c
 800f4f4:	0801bfc4 	.word	0x0801bfc4

0800f4f8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f4fc:	f009 ffb2 	bl	8019464 <rand>
 800f500:	4603      	mov	r3, r0
 800f502:	b29b      	uxth	r3, r3
 800f504:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f508:	b29b      	uxth	r3, r3
 800f50a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800f50e:	b29a      	uxth	r2, r3
 800f510:	4b01      	ldr	r3, [pc, #4]	@ (800f518 <tcp_init+0x20>)
 800f512:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f514:	bf00      	nop
 800f516:	bd80      	pop	{r7, pc}
 800f518:	200000b0 	.word	0x200000b0

0800f51c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b082      	sub	sp, #8
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	7d1b      	ldrb	r3, [r3, #20]
 800f528:	2b01      	cmp	r3, #1
 800f52a:	d105      	bne.n	800f538 <tcp_free+0x1c>
 800f52c:	4b06      	ldr	r3, [pc, #24]	@ (800f548 <tcp_free+0x2c>)
 800f52e:	22d4      	movs	r2, #212	@ 0xd4
 800f530:	4906      	ldr	r1, [pc, #24]	@ (800f54c <tcp_free+0x30>)
 800f532:	4807      	ldr	r0, [pc, #28]	@ (800f550 <tcp_free+0x34>)
 800f534:	f00a f896 	bl	8019664 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f538:	6879      	ldr	r1, [r7, #4]
 800f53a:	2001      	movs	r0, #1
 800f53c:	f7fe fd78 	bl	800e030 <memp_free>
}
 800f540:	bf00      	nop
 800f542:	3708      	adds	r7, #8
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}
 800f548:	0801c2a4 	.word	0x0801c2a4
 800f54c:	0801c2d4 	.word	0x0801c2d4
 800f550:	0801c2e8 	.word	0x0801c2e8

0800f554 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b082      	sub	sp, #8
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	7d1b      	ldrb	r3, [r3, #20]
 800f560:	2b01      	cmp	r3, #1
 800f562:	d105      	bne.n	800f570 <tcp_free_listen+0x1c>
 800f564:	4b06      	ldr	r3, [pc, #24]	@ (800f580 <tcp_free_listen+0x2c>)
 800f566:	22df      	movs	r2, #223	@ 0xdf
 800f568:	4906      	ldr	r1, [pc, #24]	@ (800f584 <tcp_free_listen+0x30>)
 800f56a:	4807      	ldr	r0, [pc, #28]	@ (800f588 <tcp_free_listen+0x34>)
 800f56c:	f00a f87a 	bl	8019664 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f570:	6879      	ldr	r1, [r7, #4]
 800f572:	2002      	movs	r0, #2
 800f574:	f7fe fd5c 	bl	800e030 <memp_free>
}
 800f578:	bf00      	nop
 800f57a:	3708      	adds	r7, #8
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}
 800f580:	0801c2a4 	.word	0x0801c2a4
 800f584:	0801c310 	.word	0x0801c310
 800f588:	0801c2e8 	.word	0x0801c2e8

0800f58c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f590:	f000 fea4 	bl	80102dc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f594:	4b07      	ldr	r3, [pc, #28]	@ (800f5b4 <tcp_tmr+0x28>)
 800f596:	781b      	ldrb	r3, [r3, #0]
 800f598:	3301      	adds	r3, #1
 800f59a:	b2da      	uxtb	r2, r3
 800f59c:	4b05      	ldr	r3, [pc, #20]	@ (800f5b4 <tcp_tmr+0x28>)
 800f59e:	701a      	strb	r2, [r3, #0]
 800f5a0:	4b04      	ldr	r3, [pc, #16]	@ (800f5b4 <tcp_tmr+0x28>)
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	f003 0301 	and.w	r3, r3, #1
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d001      	beq.n	800f5b0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f5ac:	f000 fb54 	bl	800fc58 <tcp_slowtmr>
  }
}
 800f5b0:	bf00      	nop
 800f5b2:	bd80      	pop	{r7, pc}
 800f5b4:	2000eb81 	.word	0x2000eb81

0800f5b8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b084      	sub	sp, #16
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d105      	bne.n	800f5d4 <tcp_remove_listener+0x1c>
 800f5c8:	4b0d      	ldr	r3, [pc, #52]	@ (800f600 <tcp_remove_listener+0x48>)
 800f5ca:	22ff      	movs	r2, #255	@ 0xff
 800f5cc:	490d      	ldr	r1, [pc, #52]	@ (800f604 <tcp_remove_listener+0x4c>)
 800f5ce:	480e      	ldr	r0, [pc, #56]	@ (800f608 <tcp_remove_listener+0x50>)
 800f5d0:	f00a f848 	bl	8019664 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	60fb      	str	r3, [r7, #12]
 800f5d8:	e00a      	b.n	800f5f0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f5de:	683a      	ldr	r2, [r7, #0]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d102      	bne.n	800f5ea <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	68db      	ldr	r3, [r3, #12]
 800f5ee:	60fb      	str	r3, [r7, #12]
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d1f1      	bne.n	800f5da <tcp_remove_listener+0x22>
    }
  }
}
 800f5f6:	bf00      	nop
 800f5f8:	bf00      	nop
 800f5fa:	3710      	adds	r7, #16
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	0801c2a4 	.word	0x0801c2a4
 800f604:	0801c32c 	.word	0x0801c32c
 800f608:	0801c2e8 	.word	0x0801c2e8

0800f60c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b084      	sub	sp, #16
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d106      	bne.n	800f628 <tcp_listen_closed+0x1c>
 800f61a:	4b14      	ldr	r3, [pc, #80]	@ (800f66c <tcp_listen_closed+0x60>)
 800f61c:	f240 1211 	movw	r2, #273	@ 0x111
 800f620:	4913      	ldr	r1, [pc, #76]	@ (800f670 <tcp_listen_closed+0x64>)
 800f622:	4814      	ldr	r0, [pc, #80]	@ (800f674 <tcp_listen_closed+0x68>)
 800f624:	f00a f81e 	bl	8019664 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	7d1b      	ldrb	r3, [r3, #20]
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	d006      	beq.n	800f63e <tcp_listen_closed+0x32>
 800f630:	4b0e      	ldr	r3, [pc, #56]	@ (800f66c <tcp_listen_closed+0x60>)
 800f632:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800f636:	4910      	ldr	r1, [pc, #64]	@ (800f678 <tcp_listen_closed+0x6c>)
 800f638:	480e      	ldr	r0, [pc, #56]	@ (800f674 <tcp_listen_closed+0x68>)
 800f63a:	f00a f813 	bl	8019664 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f63e:	2301      	movs	r3, #1
 800f640:	60fb      	str	r3, [r7, #12]
 800f642:	e00b      	b.n	800f65c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f644:	4a0d      	ldr	r2, [pc, #52]	@ (800f67c <tcp_listen_closed+0x70>)
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	6879      	ldr	r1, [r7, #4]
 800f650:	4618      	mov	r0, r3
 800f652:	f7ff ffb1 	bl	800f5b8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	3301      	adds	r3, #1
 800f65a:	60fb      	str	r3, [r7, #12]
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2b03      	cmp	r3, #3
 800f660:	d9f0      	bls.n	800f644 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f662:	bf00      	nop
 800f664:	bf00      	nop
 800f666:	3710      	adds	r7, #16
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}
 800f66c:	0801c2a4 	.word	0x0801c2a4
 800f670:	0801c354 	.word	0x0801c354
 800f674:	0801c2e8 	.word	0x0801c2e8
 800f678:	0801c360 	.word	0x0801c360
 800f67c:	0801f2e8 	.word	0x0801f2e8

0800f680 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f680:	b5b0      	push	{r4, r5, r7, lr}
 800f682:	b088      	sub	sp, #32
 800f684:	af04      	add	r7, sp, #16
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	460b      	mov	r3, r1
 800f68a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d106      	bne.n	800f6a0 <tcp_close_shutdown+0x20>
 800f692:	4b63      	ldr	r3, [pc, #396]	@ (800f820 <tcp_close_shutdown+0x1a0>)
 800f694:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800f698:	4962      	ldr	r1, [pc, #392]	@ (800f824 <tcp_close_shutdown+0x1a4>)
 800f69a:	4863      	ldr	r0, [pc, #396]	@ (800f828 <tcp_close_shutdown+0x1a8>)
 800f69c:	f009 ffe2 	bl	8019664 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f6a0:	78fb      	ldrb	r3, [r7, #3]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d066      	beq.n	800f774 <tcp_close_shutdown+0xf4>
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	7d1b      	ldrb	r3, [r3, #20]
 800f6aa:	2b04      	cmp	r3, #4
 800f6ac:	d003      	beq.n	800f6b6 <tcp_close_shutdown+0x36>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	7d1b      	ldrb	r3, [r3, #20]
 800f6b2:	2b07      	cmp	r3, #7
 800f6b4:	d15e      	bne.n	800f774 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d104      	bne.n	800f6c8 <tcp_close_shutdown+0x48>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f6c2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f6c6:	d055      	beq.n	800f774 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	8b5b      	ldrh	r3, [r3, #26]
 800f6cc:	f003 0310 	and.w	r3, r3, #16
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d106      	bne.n	800f6e2 <tcp_close_shutdown+0x62>
 800f6d4:	4b52      	ldr	r3, [pc, #328]	@ (800f820 <tcp_close_shutdown+0x1a0>)
 800f6d6:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800f6da:	4954      	ldr	r1, [pc, #336]	@ (800f82c <tcp_close_shutdown+0x1ac>)
 800f6dc:	4852      	ldr	r0, [pc, #328]	@ (800f828 <tcp_close_shutdown+0x1a8>)
 800f6de:	f009 ffc1 	bl	8019664 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f6ea:	687d      	ldr	r5, [r7, #4]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	3304      	adds	r3, #4
 800f6f0:	687a      	ldr	r2, [r7, #4]
 800f6f2:	8ad2      	ldrh	r2, [r2, #22]
 800f6f4:	6879      	ldr	r1, [r7, #4]
 800f6f6:	8b09      	ldrh	r1, [r1, #24]
 800f6f8:	9102      	str	r1, [sp, #8]
 800f6fa:	9201      	str	r2, [sp, #4]
 800f6fc:	9300      	str	r3, [sp, #0]
 800f6fe:	462b      	mov	r3, r5
 800f700:	4622      	mov	r2, r4
 800f702:	4601      	mov	r1, r0
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f004 ff71 	bl	80145ec <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f001 f8f2 	bl	80108f4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f710:	4b47      	ldr	r3, [pc, #284]	@ (800f830 <tcp_close_shutdown+0x1b0>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	687a      	ldr	r2, [r7, #4]
 800f716:	429a      	cmp	r2, r3
 800f718:	d105      	bne.n	800f726 <tcp_close_shutdown+0xa6>
 800f71a:	4b45      	ldr	r3, [pc, #276]	@ (800f830 <tcp_close_shutdown+0x1b0>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	68db      	ldr	r3, [r3, #12]
 800f720:	4a43      	ldr	r2, [pc, #268]	@ (800f830 <tcp_close_shutdown+0x1b0>)
 800f722:	6013      	str	r3, [r2, #0]
 800f724:	e013      	b.n	800f74e <tcp_close_shutdown+0xce>
 800f726:	4b42      	ldr	r3, [pc, #264]	@ (800f830 <tcp_close_shutdown+0x1b0>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	60fb      	str	r3, [r7, #12]
 800f72c:	e00c      	b.n	800f748 <tcp_close_shutdown+0xc8>
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	68db      	ldr	r3, [r3, #12]
 800f732:	687a      	ldr	r2, [r7, #4]
 800f734:	429a      	cmp	r2, r3
 800f736:	d104      	bne.n	800f742 <tcp_close_shutdown+0xc2>
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	68da      	ldr	r2, [r3, #12]
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	60da      	str	r2, [r3, #12]
 800f740:	e005      	b.n	800f74e <tcp_close_shutdown+0xce>
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	68db      	ldr	r3, [r3, #12]
 800f746:	60fb      	str	r3, [r7, #12]
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d1ef      	bne.n	800f72e <tcp_close_shutdown+0xae>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2200      	movs	r2, #0
 800f752:	60da      	str	r2, [r3, #12]
 800f754:	4b37      	ldr	r3, [pc, #220]	@ (800f834 <tcp_close_shutdown+0x1b4>)
 800f756:	2201      	movs	r2, #1
 800f758:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f75a:	4b37      	ldr	r3, [pc, #220]	@ (800f838 <tcp_close_shutdown+0x1b8>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	687a      	ldr	r2, [r7, #4]
 800f760:	429a      	cmp	r2, r3
 800f762:	d102      	bne.n	800f76a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f764:	f003 fdf2 	bl	801334c <tcp_trigger_input_pcb_close>
 800f768:	e002      	b.n	800f770 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f7ff fed6 	bl	800f51c <tcp_free>
      }
      return ERR_OK;
 800f770:	2300      	movs	r3, #0
 800f772:	e050      	b.n	800f816 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	7d1b      	ldrb	r3, [r3, #20]
 800f778:	2b02      	cmp	r3, #2
 800f77a:	d03b      	beq.n	800f7f4 <tcp_close_shutdown+0x174>
 800f77c:	2b02      	cmp	r3, #2
 800f77e:	dc44      	bgt.n	800f80a <tcp_close_shutdown+0x18a>
 800f780:	2b00      	cmp	r3, #0
 800f782:	d002      	beq.n	800f78a <tcp_close_shutdown+0x10a>
 800f784:	2b01      	cmp	r3, #1
 800f786:	d02a      	beq.n	800f7de <tcp_close_shutdown+0x15e>
 800f788:	e03f      	b.n	800f80a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	8adb      	ldrh	r3, [r3, #22]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d021      	beq.n	800f7d6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f792:	4b2a      	ldr	r3, [pc, #168]	@ (800f83c <tcp_close_shutdown+0x1bc>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	687a      	ldr	r2, [r7, #4]
 800f798:	429a      	cmp	r2, r3
 800f79a:	d105      	bne.n	800f7a8 <tcp_close_shutdown+0x128>
 800f79c:	4b27      	ldr	r3, [pc, #156]	@ (800f83c <tcp_close_shutdown+0x1bc>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	68db      	ldr	r3, [r3, #12]
 800f7a2:	4a26      	ldr	r2, [pc, #152]	@ (800f83c <tcp_close_shutdown+0x1bc>)
 800f7a4:	6013      	str	r3, [r2, #0]
 800f7a6:	e013      	b.n	800f7d0 <tcp_close_shutdown+0x150>
 800f7a8:	4b24      	ldr	r3, [pc, #144]	@ (800f83c <tcp_close_shutdown+0x1bc>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	60bb      	str	r3, [r7, #8]
 800f7ae:	e00c      	b.n	800f7ca <tcp_close_shutdown+0x14a>
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	68db      	ldr	r3, [r3, #12]
 800f7b4:	687a      	ldr	r2, [r7, #4]
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d104      	bne.n	800f7c4 <tcp_close_shutdown+0x144>
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	68da      	ldr	r2, [r3, #12]
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	60da      	str	r2, [r3, #12]
 800f7c2:	e005      	b.n	800f7d0 <tcp_close_shutdown+0x150>
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	68db      	ldr	r3, [r3, #12]
 800f7c8:	60bb      	str	r3, [r7, #8]
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d1ef      	bne.n	800f7b0 <tcp_close_shutdown+0x130>
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f7ff fea0 	bl	800f51c <tcp_free>
      break;
 800f7dc:	e01a      	b.n	800f814 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f7ff ff14 	bl	800f60c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f7e4:	6879      	ldr	r1, [r7, #4]
 800f7e6:	4816      	ldr	r0, [pc, #88]	@ (800f840 <tcp_close_shutdown+0x1c0>)
 800f7e8:	f001 f8d4 	bl	8010994 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f7ff feb1 	bl	800f554 <tcp_free_listen>
      break;
 800f7f2:	e00f      	b.n	800f814 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f7f4:	6879      	ldr	r1, [r7, #4]
 800f7f6:	480e      	ldr	r0, [pc, #56]	@ (800f830 <tcp_close_shutdown+0x1b0>)
 800f7f8:	f001 f8cc 	bl	8010994 <tcp_pcb_remove>
 800f7fc:	4b0d      	ldr	r3, [pc, #52]	@ (800f834 <tcp_close_shutdown+0x1b4>)
 800f7fe:	2201      	movs	r2, #1
 800f800:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f7ff fe8a 	bl	800f51c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f808:	e004      	b.n	800f814 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f000 f81a 	bl	800f844 <tcp_close_shutdown_fin>
 800f810:	4603      	mov	r3, r0
 800f812:	e000      	b.n	800f816 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f814:	2300      	movs	r3, #0
}
 800f816:	4618      	mov	r0, r3
 800f818:	3710      	adds	r7, #16
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bdb0      	pop	{r4, r5, r7, pc}
 800f81e:	bf00      	nop
 800f820:	0801c2a4 	.word	0x0801c2a4
 800f824:	0801c378 	.word	0x0801c378
 800f828:	0801c2e8 	.word	0x0801c2e8
 800f82c:	0801c398 	.word	0x0801c398
 800f830:	2000eb78 	.word	0x2000eb78
 800f834:	2000eb80 	.word	0x2000eb80
 800f838:	2000ebbc 	.word	0x2000ebbc
 800f83c:	2000eb70 	.word	0x2000eb70
 800f840:	2000eb74 	.word	0x2000eb74

0800f844 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b084      	sub	sp, #16
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d106      	bne.n	800f860 <tcp_close_shutdown_fin+0x1c>
 800f852:	4b2e      	ldr	r3, [pc, #184]	@ (800f90c <tcp_close_shutdown_fin+0xc8>)
 800f854:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800f858:	492d      	ldr	r1, [pc, #180]	@ (800f910 <tcp_close_shutdown_fin+0xcc>)
 800f85a:	482e      	ldr	r0, [pc, #184]	@ (800f914 <tcp_close_shutdown_fin+0xd0>)
 800f85c:	f009 ff02 	bl	8019664 <iprintf>

  switch (pcb->state) {
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	7d1b      	ldrb	r3, [r3, #20]
 800f864:	2b07      	cmp	r3, #7
 800f866:	d020      	beq.n	800f8aa <tcp_close_shutdown_fin+0x66>
 800f868:	2b07      	cmp	r3, #7
 800f86a:	dc2b      	bgt.n	800f8c4 <tcp_close_shutdown_fin+0x80>
 800f86c:	2b03      	cmp	r3, #3
 800f86e:	d002      	beq.n	800f876 <tcp_close_shutdown_fin+0x32>
 800f870:	2b04      	cmp	r3, #4
 800f872:	d00d      	beq.n	800f890 <tcp_close_shutdown_fin+0x4c>
 800f874:	e026      	b.n	800f8c4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f003 ff94 	bl	80137a4 <tcp_send_fin>
 800f87c:	4603      	mov	r3, r0
 800f87e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d11f      	bne.n	800f8c8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2205      	movs	r2, #5
 800f88c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f88e:	e01b      	b.n	800f8c8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f003 ff87 	bl	80137a4 <tcp_send_fin>
 800f896:	4603      	mov	r3, r0
 800f898:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f89a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d114      	bne.n	800f8cc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2205      	movs	r2, #5
 800f8a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f8a8:	e010      	b.n	800f8cc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f003 ff7a 	bl	80137a4 <tcp_send_fin>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f8b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d109      	bne.n	800f8d0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2209      	movs	r2, #9
 800f8c0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f8c2:	e005      	b.n	800f8d0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	e01c      	b.n	800f902 <tcp_close_shutdown_fin+0xbe>
      break;
 800f8c8:	bf00      	nop
 800f8ca:	e002      	b.n	800f8d2 <tcp_close_shutdown_fin+0x8e>
      break;
 800f8cc:	bf00      	nop
 800f8ce:	e000      	b.n	800f8d2 <tcp_close_shutdown_fin+0x8e>
      break;
 800f8d0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f8d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d103      	bne.n	800f8e2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f004 f8b2 	bl	8013a44 <tcp_output>
 800f8e0:	e00d      	b.n	800f8fe <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f8e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8ea:	d108      	bne.n	800f8fe <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	8b5b      	ldrh	r3, [r3, #26]
 800f8f0:	f043 0308 	orr.w	r3, r3, #8
 800f8f4:	b29a      	uxth	r2, r3
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	e001      	b.n	800f902 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f8fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f902:	4618      	mov	r0, r3
 800f904:	3710      	adds	r7, #16
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	bf00      	nop
 800f90c:	0801c2a4 	.word	0x0801c2a4
 800f910:	0801c354 	.word	0x0801c354
 800f914:	0801c2e8 	.word	0x0801c2e8

0800f918 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b082      	sub	sp, #8
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d109      	bne.n	800f93a <tcp_close+0x22>
 800f926:	4b0f      	ldr	r3, [pc, #60]	@ (800f964 <tcp_close+0x4c>)
 800f928:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800f92c:	490e      	ldr	r1, [pc, #56]	@ (800f968 <tcp_close+0x50>)
 800f92e:	480f      	ldr	r0, [pc, #60]	@ (800f96c <tcp_close+0x54>)
 800f930:	f009 fe98 	bl	8019664 <iprintf>
 800f934:	f06f 030f 	mvn.w	r3, #15
 800f938:	e00f      	b.n	800f95a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	7d1b      	ldrb	r3, [r3, #20]
 800f93e:	2b01      	cmp	r3, #1
 800f940:	d006      	beq.n	800f950 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	8b5b      	ldrh	r3, [r3, #26]
 800f946:	f043 0310 	orr.w	r3, r3, #16
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f950:	2101      	movs	r1, #1
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f7ff fe94 	bl	800f680 <tcp_close_shutdown>
 800f958:	4603      	mov	r3, r0
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3708      	adds	r7, #8
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
 800f962:	bf00      	nop
 800f964:	0801c2a4 	.word	0x0801c2a4
 800f968:	0801c3b4 	.word	0x0801c3b4
 800f96c:	0801c2e8 	.word	0x0801c2e8

0800f970 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b08e      	sub	sp, #56	@ 0x38
 800f974:	af04      	add	r7, sp, #16
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d107      	bne.n	800f990 <tcp_abandon+0x20>
 800f980:	4b52      	ldr	r3, [pc, #328]	@ (800facc <tcp_abandon+0x15c>)
 800f982:	f240 223d 	movw	r2, #573	@ 0x23d
 800f986:	4952      	ldr	r1, [pc, #328]	@ (800fad0 <tcp_abandon+0x160>)
 800f988:	4852      	ldr	r0, [pc, #328]	@ (800fad4 <tcp_abandon+0x164>)
 800f98a:	f009 fe6b 	bl	8019664 <iprintf>
 800f98e:	e099      	b.n	800fac4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	7d1b      	ldrb	r3, [r3, #20]
 800f994:	2b01      	cmp	r3, #1
 800f996:	d106      	bne.n	800f9a6 <tcp_abandon+0x36>
 800f998:	4b4c      	ldr	r3, [pc, #304]	@ (800facc <tcp_abandon+0x15c>)
 800f99a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800f99e:	494e      	ldr	r1, [pc, #312]	@ (800fad8 <tcp_abandon+0x168>)
 800f9a0:	484c      	ldr	r0, [pc, #304]	@ (800fad4 <tcp_abandon+0x164>)
 800f9a2:	f009 fe5f 	bl	8019664 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	7d1b      	ldrb	r3, [r3, #20]
 800f9aa:	2b0a      	cmp	r3, #10
 800f9ac:	d107      	bne.n	800f9be <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f9ae:	6879      	ldr	r1, [r7, #4]
 800f9b0:	484a      	ldr	r0, [pc, #296]	@ (800fadc <tcp_abandon+0x16c>)
 800f9b2:	f000 ffef 	bl	8010994 <tcp_pcb_remove>
    tcp_free(pcb);
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f7ff fdb0 	bl	800f51c <tcp_free>
 800f9bc:	e082      	b.n	800fac4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f9ca:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9d0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9d8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	691b      	ldr	r3, [r3, #16]
 800f9de:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	7d1b      	ldrb	r3, [r3, #20]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d126      	bne.n	800fa36 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	8adb      	ldrh	r3, [r3, #22]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d02e      	beq.n	800fa4e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f9f0:	4b3b      	ldr	r3, [pc, #236]	@ (800fae0 <tcp_abandon+0x170>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	687a      	ldr	r2, [r7, #4]
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d105      	bne.n	800fa06 <tcp_abandon+0x96>
 800f9fa:	4b39      	ldr	r3, [pc, #228]	@ (800fae0 <tcp_abandon+0x170>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	68db      	ldr	r3, [r3, #12]
 800fa00:	4a37      	ldr	r2, [pc, #220]	@ (800fae0 <tcp_abandon+0x170>)
 800fa02:	6013      	str	r3, [r2, #0]
 800fa04:	e013      	b.n	800fa2e <tcp_abandon+0xbe>
 800fa06:	4b36      	ldr	r3, [pc, #216]	@ (800fae0 <tcp_abandon+0x170>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	61fb      	str	r3, [r7, #28]
 800fa0c:	e00c      	b.n	800fa28 <tcp_abandon+0xb8>
 800fa0e:	69fb      	ldr	r3, [r7, #28]
 800fa10:	68db      	ldr	r3, [r3, #12]
 800fa12:	687a      	ldr	r2, [r7, #4]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d104      	bne.n	800fa22 <tcp_abandon+0xb2>
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	68da      	ldr	r2, [r3, #12]
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	60da      	str	r2, [r3, #12]
 800fa20:	e005      	b.n	800fa2e <tcp_abandon+0xbe>
 800fa22:	69fb      	ldr	r3, [r7, #28]
 800fa24:	68db      	ldr	r3, [r3, #12]
 800fa26:	61fb      	str	r3, [r7, #28]
 800fa28:	69fb      	ldr	r3, [r7, #28]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d1ef      	bne.n	800fa0e <tcp_abandon+0x9e>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2200      	movs	r2, #0
 800fa32:	60da      	str	r2, [r3, #12]
 800fa34:	e00b      	b.n	800fa4e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	8adb      	ldrh	r3, [r3, #22]
 800fa3e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fa40:	6879      	ldr	r1, [r7, #4]
 800fa42:	4828      	ldr	r0, [pc, #160]	@ (800fae4 <tcp_abandon+0x174>)
 800fa44:	f000 ffa6 	bl	8010994 <tcp_pcb_remove>
 800fa48:	4b27      	ldr	r3, [pc, #156]	@ (800fae8 <tcp_abandon+0x178>)
 800fa4a:	2201      	movs	r2, #1
 800fa4c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d004      	beq.n	800fa60 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f000 fd1e 	bl	801049c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d004      	beq.n	800fa72 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f000 fd15 	bl	801049c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d004      	beq.n	800fa84 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f000 fd0c 	bl	801049c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800fa84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d00e      	beq.n	800faa8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800fa8a:	6879      	ldr	r1, [r7, #4]
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	3304      	adds	r3, #4
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	8b12      	ldrh	r2, [r2, #24]
 800fa94:	9202      	str	r2, [sp, #8]
 800fa96:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800fa98:	9201      	str	r2, [sp, #4]
 800fa9a:	9300      	str	r3, [sp, #0]
 800fa9c:	460b      	mov	r3, r1
 800fa9e:	697a      	ldr	r2, [r7, #20]
 800faa0:	69b9      	ldr	r1, [r7, #24]
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f004 fda2 	bl	80145ec <tcp_rst>
    }
    last_state = pcb->state;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	7d1b      	ldrb	r3, [r3, #20]
 800faac:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f7ff fd34 	bl	800f51c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d004      	beq.n	800fac4 <tcp_abandon+0x154>
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	f06f 010c 	mvn.w	r1, #12
 800fac0:	68f8      	ldr	r0, [r7, #12]
 800fac2:	4798      	blx	r3
  }
}
 800fac4:	3728      	adds	r7, #40	@ 0x28
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	bf00      	nop
 800facc:	0801c2a4 	.word	0x0801c2a4
 800fad0:	0801c3e8 	.word	0x0801c3e8
 800fad4:	0801c2e8 	.word	0x0801c2e8
 800fad8:	0801c404 	.word	0x0801c404
 800fadc:	2000eb7c 	.word	0x2000eb7c
 800fae0:	2000eb70 	.word	0x2000eb70
 800fae4:	2000eb78 	.word	0x2000eb78
 800fae8:	2000eb80 	.word	0x2000eb80

0800faec <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800faf4:	2101      	movs	r1, #1
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f7ff ff3a 	bl	800f970 <tcp_abandon>
}
 800fafc:	bf00      	nop
 800fafe:	3708      	adds	r7, #8
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}

0800fb04 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b084      	sub	sp, #16
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d106      	bne.n	800fb20 <tcp_update_rcv_ann_wnd+0x1c>
 800fb12:	4b25      	ldr	r3, [pc, #148]	@ (800fba8 <tcp_update_rcv_ann_wnd+0xa4>)
 800fb14:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800fb18:	4924      	ldr	r1, [pc, #144]	@ (800fbac <tcp_update_rcv_ann_wnd+0xa8>)
 800fb1a:	4825      	ldr	r0, [pc, #148]	@ (800fbb0 <tcp_update_rcv_ann_wnd+0xac>)
 800fb1c:	f009 fda2 	bl	8019664 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb24:	687a      	ldr	r2, [r7, #4]
 800fb26:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800fb28:	4413      	add	r3, r2
 800fb2a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb30:	687a      	ldr	r2, [r7, #4]
 800fb32:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800fb34:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800fb38:	bf28      	it	cs
 800fb3a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800fb3e:	b292      	uxth	r2, r2
 800fb40:	4413      	add	r3, r2
 800fb42:	68fa      	ldr	r2, [r7, #12]
 800fb44:	1ad3      	subs	r3, r2, r3
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	db08      	blt.n	800fb5c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb56:	68fa      	ldr	r2, [r7, #12]
 800fb58:	1ad3      	subs	r3, r2, r3
 800fb5a:	e020      	b.n	800fb9e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb64:	1ad3      	subs	r3, r2, r3
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	dd03      	ble.n	800fb72 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800fb70:	e014      	b.n	800fb9c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb7a:	1ad3      	subs	r3, r2, r3
 800fb7c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fb84:	d306      	bcc.n	800fb94 <tcp_update_rcv_ann_wnd+0x90>
 800fb86:	4b08      	ldr	r3, [pc, #32]	@ (800fba8 <tcp_update_rcv_ann_wnd+0xa4>)
 800fb88:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800fb8c:	4909      	ldr	r1, [pc, #36]	@ (800fbb4 <tcp_update_rcv_ann_wnd+0xb0>)
 800fb8e:	4808      	ldr	r0, [pc, #32]	@ (800fbb0 <tcp_update_rcv_ann_wnd+0xac>)
 800fb90:	f009 fd68 	bl	8019664 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	b29a      	uxth	r2, r3
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800fb9c:	2300      	movs	r3, #0
  }
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3710      	adds	r7, #16
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}
 800fba6:	bf00      	nop
 800fba8:	0801c2a4 	.word	0x0801c2a4
 800fbac:	0801c500 	.word	0x0801c500
 800fbb0:	0801c2e8 	.word	0x0801c2e8
 800fbb4:	0801c524 	.word	0x0801c524

0800fbb8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b084      	sub	sp, #16
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	460b      	mov	r3, r1
 800fbc2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d107      	bne.n	800fbda <tcp_recved+0x22>
 800fbca:	4b1f      	ldr	r3, [pc, #124]	@ (800fc48 <tcp_recved+0x90>)
 800fbcc:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800fbd0:	491e      	ldr	r1, [pc, #120]	@ (800fc4c <tcp_recved+0x94>)
 800fbd2:	481f      	ldr	r0, [pc, #124]	@ (800fc50 <tcp_recved+0x98>)
 800fbd4:	f009 fd46 	bl	8019664 <iprintf>
 800fbd8:	e032      	b.n	800fc40 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	7d1b      	ldrb	r3, [r3, #20]
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	d106      	bne.n	800fbf0 <tcp_recved+0x38>
 800fbe2:	4b19      	ldr	r3, [pc, #100]	@ (800fc48 <tcp_recved+0x90>)
 800fbe4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800fbe8:	491a      	ldr	r1, [pc, #104]	@ (800fc54 <tcp_recved+0x9c>)
 800fbea:	4819      	ldr	r0, [pc, #100]	@ (800fc50 <tcp_recved+0x98>)
 800fbec:	f009 fd3a 	bl	8019664 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fbf4:	887b      	ldrh	r3, [r7, #2]
 800fbf6:	4413      	add	r3, r2
 800fbf8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800fbfa:	89fb      	ldrh	r3, [r7, #14]
 800fbfc:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800fc00:	d804      	bhi.n	800fc0c <tcp_recved+0x54>
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc06:	89fa      	ldrh	r2, [r7, #14]
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d204      	bcs.n	800fc16 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800fc12:	851a      	strh	r2, [r3, #40]	@ 0x28
 800fc14:	e002      	b.n	800fc1c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	89fa      	ldrh	r2, [r7, #14]
 800fc1a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f7ff ff71 	bl	800fb04 <tcp_update_rcv_ann_wnd>
 800fc22:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800fc2a:	d309      	bcc.n	800fc40 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	8b5b      	ldrh	r3, [r3, #26]
 800fc30:	f043 0302 	orr.w	r3, r3, #2
 800fc34:	b29a      	uxth	r2, r3
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f003 ff02 	bl	8013a44 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800fc40:	3710      	adds	r7, #16
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
 800fc46:	bf00      	nop
 800fc48:	0801c2a4 	.word	0x0801c2a4
 800fc4c:	0801c540 	.word	0x0801c540
 800fc50:	0801c2e8 	.word	0x0801c2e8
 800fc54:	0801c558 	.word	0x0801c558

0800fc58 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800fc58:	b5b0      	push	{r4, r5, r7, lr}
 800fc5a:	b090      	sub	sp, #64	@ 0x40
 800fc5c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800fc64:	4b95      	ldr	r3, [pc, #596]	@ (800febc <tcp_slowtmr+0x264>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	3301      	adds	r3, #1
 800fc6a:	4a94      	ldr	r2, [pc, #592]	@ (800febc <tcp_slowtmr+0x264>)
 800fc6c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800fc6e:	4b94      	ldr	r3, [pc, #592]	@ (800fec0 <tcp_slowtmr+0x268>)
 800fc70:	781b      	ldrb	r3, [r3, #0]
 800fc72:	3301      	adds	r3, #1
 800fc74:	b2da      	uxtb	r2, r3
 800fc76:	4b92      	ldr	r3, [pc, #584]	@ (800fec0 <tcp_slowtmr+0x268>)
 800fc78:	701a      	strb	r2, [r3, #0]
 800fc7a:	e000      	b.n	800fc7e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800fc7c:	bf00      	nop
  prev = NULL;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800fc82:	4b90      	ldr	r3, [pc, #576]	@ (800fec4 <tcp_slowtmr+0x26c>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800fc88:	e29f      	b.n	80101ca <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800fc8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc8c:	7d1b      	ldrb	r3, [r3, #20]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d106      	bne.n	800fca0 <tcp_slowtmr+0x48>
 800fc92:	4b8d      	ldr	r3, [pc, #564]	@ (800fec8 <tcp_slowtmr+0x270>)
 800fc94:	f240 42be 	movw	r2, #1214	@ 0x4be
 800fc98:	498c      	ldr	r1, [pc, #560]	@ (800fecc <tcp_slowtmr+0x274>)
 800fc9a:	488d      	ldr	r0, [pc, #564]	@ (800fed0 <tcp_slowtmr+0x278>)
 800fc9c:	f009 fce2 	bl	8019664 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800fca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fca2:	7d1b      	ldrb	r3, [r3, #20]
 800fca4:	2b01      	cmp	r3, #1
 800fca6:	d106      	bne.n	800fcb6 <tcp_slowtmr+0x5e>
 800fca8:	4b87      	ldr	r3, [pc, #540]	@ (800fec8 <tcp_slowtmr+0x270>)
 800fcaa:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800fcae:	4989      	ldr	r1, [pc, #548]	@ (800fed4 <tcp_slowtmr+0x27c>)
 800fcb0:	4887      	ldr	r0, [pc, #540]	@ (800fed0 <tcp_slowtmr+0x278>)
 800fcb2:	f009 fcd7 	bl	8019664 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800fcb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcb8:	7d1b      	ldrb	r3, [r3, #20]
 800fcba:	2b0a      	cmp	r3, #10
 800fcbc:	d106      	bne.n	800fccc <tcp_slowtmr+0x74>
 800fcbe:	4b82      	ldr	r3, [pc, #520]	@ (800fec8 <tcp_slowtmr+0x270>)
 800fcc0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800fcc4:	4984      	ldr	r1, [pc, #528]	@ (800fed8 <tcp_slowtmr+0x280>)
 800fcc6:	4882      	ldr	r0, [pc, #520]	@ (800fed0 <tcp_slowtmr+0x278>)
 800fcc8:	f009 fccc 	bl	8019664 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800fccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcce:	7f9a      	ldrb	r2, [r3, #30]
 800fcd0:	4b7b      	ldr	r3, [pc, #492]	@ (800fec0 <tcp_slowtmr+0x268>)
 800fcd2:	781b      	ldrb	r3, [r3, #0]
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d105      	bne.n	800fce4 <tcp_slowtmr+0x8c>
      prev = pcb;
 800fcd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcda:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800fcdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcde:	68db      	ldr	r3, [r3, #12]
 800fce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800fce2:	e272      	b.n	80101ca <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800fce4:	4b76      	ldr	r3, [pc, #472]	@ (800fec0 <tcp_slowtmr+0x268>)
 800fce6:	781a      	ldrb	r2, [r3, #0]
 800fce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcea:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800fcec:	2300      	movs	r3, #0
 800fcee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800fcf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcfa:	7d1b      	ldrb	r3, [r3, #20]
 800fcfc:	2b02      	cmp	r3, #2
 800fcfe:	d10a      	bne.n	800fd16 <tcp_slowtmr+0xbe>
 800fd00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fd06:	2b05      	cmp	r3, #5
 800fd08:	d905      	bls.n	800fd16 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800fd0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd0e:	3301      	adds	r3, #1
 800fd10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800fd14:	e11e      	b.n	800ff54 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800fd16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fd1c:	2b0b      	cmp	r3, #11
 800fd1e:	d905      	bls.n	800fd2c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800fd20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd24:	3301      	adds	r3, #1
 800fd26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fd2a:	e113      	b.n	800ff54 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800fd2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd2e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d075      	beq.n	800fe22 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800fd36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d006      	beq.n	800fd4c <tcp_slowtmr+0xf4>
 800fd3e:	4b62      	ldr	r3, [pc, #392]	@ (800fec8 <tcp_slowtmr+0x270>)
 800fd40:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800fd44:	4965      	ldr	r1, [pc, #404]	@ (800fedc <tcp_slowtmr+0x284>)
 800fd46:	4862      	ldr	r0, [pc, #392]	@ (800fed0 <tcp_slowtmr+0x278>)
 800fd48:	f009 fc8c 	bl	8019664 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800fd4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d106      	bne.n	800fd62 <tcp_slowtmr+0x10a>
 800fd54:	4b5c      	ldr	r3, [pc, #368]	@ (800fec8 <tcp_slowtmr+0x270>)
 800fd56:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800fd5a:	4961      	ldr	r1, [pc, #388]	@ (800fee0 <tcp_slowtmr+0x288>)
 800fd5c:	485c      	ldr	r0, [pc, #368]	@ (800fed0 <tcp_slowtmr+0x278>)
 800fd5e:	f009 fc81 	bl	8019664 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800fd62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd64:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800fd68:	2b0b      	cmp	r3, #11
 800fd6a:	d905      	bls.n	800fd78 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800fd6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd70:	3301      	adds	r3, #1
 800fd72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fd76:	e0ed      	b.n	800ff54 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800fd78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd7a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800fd7e:	3b01      	subs	r3, #1
 800fd80:	4a58      	ldr	r2, [pc, #352]	@ (800fee4 <tcp_slowtmr+0x28c>)
 800fd82:	5cd3      	ldrb	r3, [r2, r3]
 800fd84:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800fd86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd88:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800fd8c:	7c7a      	ldrb	r2, [r7, #17]
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d907      	bls.n	800fda2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800fd92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd94:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800fd98:	3301      	adds	r3, #1
 800fd9a:	b2da      	uxtb	r2, r3
 800fd9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd9e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800fda2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fda4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800fda8:	7c7a      	ldrb	r2, [r7, #17]
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	f200 80d2 	bhi.w	800ff54 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800fdb0:	2301      	movs	r3, #1
 800fdb2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800fdb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d108      	bne.n	800fdd0 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800fdbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fdc0:	f004 fd08 	bl	80147d4 <tcp_zero_window_probe>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d014      	beq.n	800fdf4 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800fdca:	2300      	movs	r3, #0
 800fdcc:	623b      	str	r3, [r7, #32]
 800fdce:	e011      	b.n	800fdf4 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800fdd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fdda:	f003 fb8d 	bl	80134f8 <tcp_split_unsent_seg>
 800fdde:	4603      	mov	r3, r0
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d107      	bne.n	800fdf4 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800fde4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fde6:	f003 fe2d 	bl	8013a44 <tcp_output>
 800fdea:	4603      	mov	r3, r0
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d101      	bne.n	800fdf4 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800fdf4:	6a3b      	ldr	r3, [r7, #32]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	f000 80ac 	beq.w	800ff54 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800fdfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdfe:	2200      	movs	r2, #0
 800fe00:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fe04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe06:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800fe0a:	2b06      	cmp	r3, #6
 800fe0c:	f200 80a2 	bhi.w	800ff54 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800fe10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe12:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800fe16:	3301      	adds	r3, #1
 800fe18:	b2da      	uxtb	r2, r3
 800fe1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe1c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800fe20:	e098      	b.n	800ff54 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fe22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe24:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	db0f      	blt.n	800fe4c <tcp_slowtmr+0x1f4>
 800fe2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe2e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800fe32:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800fe36:	4293      	cmp	r3, r2
 800fe38:	d008      	beq.n	800fe4c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800fe3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe3c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800fe40:	b29b      	uxth	r3, r3
 800fe42:	3301      	adds	r3, #1
 800fe44:	b29b      	uxth	r3, r3
 800fe46:	b21a      	sxth	r2, r3
 800fe48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe4a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800fe4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe4e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800fe52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe54:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	db7b      	blt.n	800ff54 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800fe5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe5e:	f004 f8f1 	bl	8014044 <tcp_rexmit_rto_prepare>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d007      	beq.n	800fe78 <tcp_slowtmr+0x220>
 800fe68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d171      	bne.n	800ff54 <tcp_slowtmr+0x2fc>
 800fe70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d06d      	beq.n	800ff54 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800fe78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe7a:	7d1b      	ldrb	r3, [r3, #20]
 800fe7c:	2b02      	cmp	r3, #2
 800fe7e:	d03a      	beq.n	800fef6 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800fe80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fe86:	2b0c      	cmp	r3, #12
 800fe88:	bf28      	it	cs
 800fe8a:	230c      	movcs	r3, #12
 800fe8c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fe8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fe94:	10db      	asrs	r3, r3, #3
 800fe96:	b21b      	sxth	r3, r3
 800fe98:	461a      	mov	r2, r3
 800fe9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe9c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fea0:	4413      	add	r3, r2
 800fea2:	7efa      	ldrb	r2, [r7, #27]
 800fea4:	4910      	ldr	r1, [pc, #64]	@ (800fee8 <tcp_slowtmr+0x290>)
 800fea6:	5c8a      	ldrb	r2, [r1, r2]
 800fea8:	4093      	lsls	r3, r2
 800feaa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800feac:	697b      	ldr	r3, [r7, #20]
 800feae:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800feb2:	4293      	cmp	r3, r2
 800feb4:	dc1a      	bgt.n	800feec <tcp_slowtmr+0x294>
 800feb6:	697b      	ldr	r3, [r7, #20]
 800feb8:	b21a      	sxth	r2, r3
 800feba:	e019      	b.n	800fef0 <tcp_slowtmr+0x298>
 800febc:	2000eb6c 	.word	0x2000eb6c
 800fec0:	2000eb82 	.word	0x2000eb82
 800fec4:	2000eb78 	.word	0x2000eb78
 800fec8:	0801c2a4 	.word	0x0801c2a4
 800fecc:	0801c5e8 	.word	0x0801c5e8
 800fed0:	0801c2e8 	.word	0x0801c2e8
 800fed4:	0801c614 	.word	0x0801c614
 800fed8:	0801c640 	.word	0x0801c640
 800fedc:	0801c670 	.word	0x0801c670
 800fee0:	0801c6a4 	.word	0x0801c6a4
 800fee4:	0801f2e0 	.word	0x0801f2e0
 800fee8:	0801f2d0 	.word	0x0801f2d0
 800feec:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800fef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fef2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800fef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fef8:	2200      	movs	r2, #0
 800fefa:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fefc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fefe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ff02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ff08:	4293      	cmp	r3, r2
 800ff0a:	bf28      	it	cs
 800ff0c:	4613      	movcs	r3, r2
 800ff0e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ff10:	8a7b      	ldrh	r3, [r7, #18]
 800ff12:	085b      	lsrs	r3, r3, #1
 800ff14:	b29a      	uxth	r2, r3
 800ff16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff18:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ff1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff1e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ff22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff24:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ff26:	005b      	lsls	r3, r3, #1
 800ff28:	b29b      	uxth	r3, r3
 800ff2a:	429a      	cmp	r2, r3
 800ff2c:	d206      	bcs.n	800ff3c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ff2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ff32:	005b      	lsls	r3, r3, #1
 800ff34:	b29a      	uxth	r2, r3
 800ff36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff38:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800ff3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff3e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800ff40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff42:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800ff46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff48:	2200      	movs	r2, #0
 800ff4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800ff4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ff50:	f004 f8f2 	bl	8014138 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800ff54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff56:	7d1b      	ldrb	r3, [r3, #20]
 800ff58:	2b06      	cmp	r3, #6
 800ff5a:	d111      	bne.n	800ff80 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800ff5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff5e:	8b5b      	ldrh	r3, [r3, #26]
 800ff60:	f003 0310 	and.w	r3, r3, #16
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d00b      	beq.n	800ff80 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ff68:	4b9d      	ldr	r3, [pc, #628]	@ (80101e0 <tcp_slowtmr+0x588>)
 800ff6a:	681a      	ldr	r2, [r3, #0]
 800ff6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff6e:	6a1b      	ldr	r3, [r3, #32]
 800ff70:	1ad3      	subs	r3, r2, r3
 800ff72:	2b28      	cmp	r3, #40	@ 0x28
 800ff74:	d904      	bls.n	800ff80 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800ff76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff7a:	3301      	adds	r3, #1
 800ff7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ff80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff82:	7a5b      	ldrb	r3, [r3, #9]
 800ff84:	f003 0308 	and.w	r3, r3, #8
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d04c      	beq.n	8010026 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800ff8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff8e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ff90:	2b04      	cmp	r3, #4
 800ff92:	d003      	beq.n	800ff9c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800ff94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff96:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ff98:	2b07      	cmp	r3, #7
 800ff9a:	d144      	bne.n	8010026 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ff9c:	4b90      	ldr	r3, [pc, #576]	@ (80101e0 <tcp_slowtmr+0x588>)
 800ff9e:	681a      	ldr	r2, [r3, #0]
 800ffa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffa2:	6a1b      	ldr	r3, [r3, #32]
 800ffa4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ffa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ffac:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800ffb0:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800ffb4:	498b      	ldr	r1, [pc, #556]	@ (80101e4 <tcp_slowtmr+0x58c>)
 800ffb6:	fba1 1303 	umull	r1, r3, r1, r3
 800ffba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d90a      	bls.n	800ffd6 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800ffc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ffc4:	3301      	adds	r3, #1
 800ffc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800ffca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ffce:	3301      	adds	r3, #1
 800ffd0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ffd4:	e027      	b.n	8010026 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ffd6:	4b82      	ldr	r3, [pc, #520]	@ (80101e0 <tcp_slowtmr+0x588>)
 800ffd8:	681a      	ldr	r2, [r3, #0]
 800ffda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffdc:	6a1b      	ldr	r3, [r3, #32]
 800ffde:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ffe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffe2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800ffe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffe8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800ffec:	4618      	mov	r0, r3
 800ffee:	4b7e      	ldr	r3, [pc, #504]	@ (80101e8 <tcp_slowtmr+0x590>)
 800fff0:	fb00 f303 	mul.w	r3, r0, r3
 800fff4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fff6:	497b      	ldr	r1, [pc, #492]	@ (80101e4 <tcp_slowtmr+0x58c>)
 800fff8:	fba1 1303 	umull	r1, r3, r1, r3
 800fffc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fffe:	429a      	cmp	r2, r3
 8010000:	d911      	bls.n	8010026 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8010002:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010004:	f004 fba6 	bl	8014754 <tcp_keepalive>
 8010008:	4603      	mov	r3, r0
 801000a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801000e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010012:	2b00      	cmp	r3, #0
 8010014:	d107      	bne.n	8010026 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8010016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010018:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801001c:	3301      	adds	r3, #1
 801001e:	b2da      	uxtb	r2, r3
 8010020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010022:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8010026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801002a:	2b00      	cmp	r3, #0
 801002c:	d011      	beq.n	8010052 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801002e:	4b6c      	ldr	r3, [pc, #432]	@ (80101e0 <tcp_slowtmr+0x588>)
 8010030:	681a      	ldr	r2, [r3, #0]
 8010032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010034:	6a1b      	ldr	r3, [r3, #32]
 8010036:	1ad2      	subs	r2, r2, r3
 8010038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801003a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801003e:	4619      	mov	r1, r3
 8010040:	460b      	mov	r3, r1
 8010042:	005b      	lsls	r3, r3, #1
 8010044:	440b      	add	r3, r1
 8010046:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010048:	429a      	cmp	r2, r3
 801004a:	d302      	bcc.n	8010052 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 801004c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801004e:	f000 fe0b 	bl	8010c68 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8010052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010054:	7d1b      	ldrb	r3, [r3, #20]
 8010056:	2b03      	cmp	r3, #3
 8010058:	d10b      	bne.n	8010072 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801005a:	4b61      	ldr	r3, [pc, #388]	@ (80101e0 <tcp_slowtmr+0x588>)
 801005c:	681a      	ldr	r2, [r3, #0]
 801005e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010060:	6a1b      	ldr	r3, [r3, #32]
 8010062:	1ad3      	subs	r3, r2, r3
 8010064:	2b28      	cmp	r3, #40	@ 0x28
 8010066:	d904      	bls.n	8010072 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8010068:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801006c:	3301      	adds	r3, #1
 801006e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8010072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010074:	7d1b      	ldrb	r3, [r3, #20]
 8010076:	2b09      	cmp	r3, #9
 8010078:	d10b      	bne.n	8010092 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801007a:	4b59      	ldr	r3, [pc, #356]	@ (80101e0 <tcp_slowtmr+0x588>)
 801007c:	681a      	ldr	r2, [r3, #0]
 801007e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010080:	6a1b      	ldr	r3, [r3, #32]
 8010082:	1ad3      	subs	r3, r2, r3
 8010084:	2bf0      	cmp	r3, #240	@ 0xf0
 8010086:	d904      	bls.n	8010092 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8010088:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801008c:	3301      	adds	r3, #1
 801008e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8010092:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010096:	2b00      	cmp	r3, #0
 8010098:	d060      	beq.n	801015c <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 801009a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801009c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100a0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80100a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80100a4:	f000 fc26 	bl	80108f4 <tcp_pcb_purge>
      if (prev != NULL) {
 80100a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d010      	beq.n	80100d0 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80100ae:	4b4f      	ldr	r3, [pc, #316]	@ (80101ec <tcp_slowtmr+0x594>)
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d106      	bne.n	80100c6 <tcp_slowtmr+0x46e>
 80100b8:	4b4d      	ldr	r3, [pc, #308]	@ (80101f0 <tcp_slowtmr+0x598>)
 80100ba:	f240 526d 	movw	r2, #1389	@ 0x56d
 80100be:	494d      	ldr	r1, [pc, #308]	@ (80101f4 <tcp_slowtmr+0x59c>)
 80100c0:	484d      	ldr	r0, [pc, #308]	@ (80101f8 <tcp_slowtmr+0x5a0>)
 80100c2:	f009 facf 	bl	8019664 <iprintf>
        prev->next = pcb->next;
 80100c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100c8:	68da      	ldr	r2, [r3, #12]
 80100ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100cc:	60da      	str	r2, [r3, #12]
 80100ce:	e00f      	b.n	80100f0 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80100d0:	4b46      	ldr	r3, [pc, #280]	@ (80101ec <tcp_slowtmr+0x594>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d006      	beq.n	80100e8 <tcp_slowtmr+0x490>
 80100da:	4b45      	ldr	r3, [pc, #276]	@ (80101f0 <tcp_slowtmr+0x598>)
 80100dc:	f240 5271 	movw	r2, #1393	@ 0x571
 80100e0:	4946      	ldr	r1, [pc, #280]	@ (80101fc <tcp_slowtmr+0x5a4>)
 80100e2:	4845      	ldr	r0, [pc, #276]	@ (80101f8 <tcp_slowtmr+0x5a0>)
 80100e4:	f009 fabe 	bl	8019664 <iprintf>
        tcp_active_pcbs = pcb->next;
 80100e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100ea:	68db      	ldr	r3, [r3, #12]
 80100ec:	4a3f      	ldr	r2, [pc, #252]	@ (80101ec <tcp_slowtmr+0x594>)
 80100ee:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80100f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d013      	beq.n	8010120 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80100f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100fa:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80100fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100fe:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010100:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8010102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010104:	3304      	adds	r3, #4
 8010106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010108:	8ad2      	ldrh	r2, [r2, #22]
 801010a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801010c:	8b09      	ldrh	r1, [r1, #24]
 801010e:	9102      	str	r1, [sp, #8]
 8010110:	9201      	str	r2, [sp, #4]
 8010112:	9300      	str	r3, [sp, #0]
 8010114:	462b      	mov	r3, r5
 8010116:	4622      	mov	r2, r4
 8010118:	4601      	mov	r1, r0
 801011a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801011c:	f004 fa66 	bl	80145ec <tcp_rst>
      err_arg = pcb->callback_arg;
 8010120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010122:	691b      	ldr	r3, [r3, #16]
 8010124:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010128:	7d1b      	ldrb	r3, [r3, #20]
 801012a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801012c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801012e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010132:	68db      	ldr	r3, [r3, #12]
 8010134:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8010136:	6838      	ldr	r0, [r7, #0]
 8010138:	f7ff f9f0 	bl	800f51c <tcp_free>
      tcp_active_pcbs_changed = 0;
 801013c:	4b30      	ldr	r3, [pc, #192]	@ (8010200 <tcp_slowtmr+0x5a8>)
 801013e:	2200      	movs	r2, #0
 8010140:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d004      	beq.n	8010152 <tcp_slowtmr+0x4fa>
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	f06f 010c 	mvn.w	r1, #12
 801014e:	68b8      	ldr	r0, [r7, #8]
 8010150:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010152:	4b2b      	ldr	r3, [pc, #172]	@ (8010200 <tcp_slowtmr+0x5a8>)
 8010154:	781b      	ldrb	r3, [r3, #0]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d037      	beq.n	80101ca <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 801015a:	e590      	b.n	800fc7e <tcp_slowtmr+0x26>
      prev = pcb;
 801015c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801015e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010162:	68db      	ldr	r3, [r3, #12]
 8010164:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8010166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010168:	7f1b      	ldrb	r3, [r3, #28]
 801016a:	3301      	adds	r3, #1
 801016c:	b2da      	uxtb	r2, r3
 801016e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010170:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010174:	7f1a      	ldrb	r2, [r3, #28]
 8010176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010178:	7f5b      	ldrb	r3, [r3, #29]
 801017a:	429a      	cmp	r2, r3
 801017c:	d325      	bcc.n	80101ca <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 801017e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010180:	2200      	movs	r2, #0
 8010182:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8010184:	4b1e      	ldr	r3, [pc, #120]	@ (8010200 <tcp_slowtmr+0x5a8>)
 8010186:	2200      	movs	r2, #0
 8010188:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801018a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801018c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010190:	2b00      	cmp	r3, #0
 8010192:	d00b      	beq.n	80101ac <tcp_slowtmr+0x554>
 8010194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010196:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801019a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801019c:	6912      	ldr	r2, [r2, #16]
 801019e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80101a0:	4610      	mov	r0, r2
 80101a2:	4798      	blx	r3
 80101a4:	4603      	mov	r3, r0
 80101a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80101aa:	e002      	b.n	80101b2 <tcp_slowtmr+0x55a>
 80101ac:	2300      	movs	r3, #0
 80101ae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80101b2:	4b13      	ldr	r3, [pc, #76]	@ (8010200 <tcp_slowtmr+0x5a8>)
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	f47f ad60 	bne.w	800fc7c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80101bc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d102      	bne.n	80101ca <tcp_slowtmr+0x572>
          tcp_output(prev);
 80101c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80101c6:	f003 fc3d 	bl	8013a44 <tcp_output>
  while (pcb != NULL) {
 80101ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	f47f ad5c 	bne.w	800fc8a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80101d2:	2300      	movs	r3, #0
 80101d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80101d6:	4b0b      	ldr	r3, [pc, #44]	@ (8010204 <tcp_slowtmr+0x5ac>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80101dc:	e067      	b.n	80102ae <tcp_slowtmr+0x656>
 80101de:	bf00      	nop
 80101e0:	2000eb6c 	.word	0x2000eb6c
 80101e4:	10624dd3 	.word	0x10624dd3
 80101e8:	000124f8 	.word	0x000124f8
 80101ec:	2000eb78 	.word	0x2000eb78
 80101f0:	0801c2a4 	.word	0x0801c2a4
 80101f4:	0801c6dc 	.word	0x0801c6dc
 80101f8:	0801c2e8 	.word	0x0801c2e8
 80101fc:	0801c708 	.word	0x0801c708
 8010200:	2000eb80 	.word	0x2000eb80
 8010204:	2000eb7c 	.word	0x2000eb7c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801020a:	7d1b      	ldrb	r3, [r3, #20]
 801020c:	2b0a      	cmp	r3, #10
 801020e:	d006      	beq.n	801021e <tcp_slowtmr+0x5c6>
 8010210:	4b2b      	ldr	r3, [pc, #172]	@ (80102c0 <tcp_slowtmr+0x668>)
 8010212:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8010216:	492b      	ldr	r1, [pc, #172]	@ (80102c4 <tcp_slowtmr+0x66c>)
 8010218:	482b      	ldr	r0, [pc, #172]	@ (80102c8 <tcp_slowtmr+0x670>)
 801021a:	f009 fa23 	bl	8019664 <iprintf>
    pcb_remove = 0;
 801021e:	2300      	movs	r3, #0
 8010220:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010224:	4b29      	ldr	r3, [pc, #164]	@ (80102cc <tcp_slowtmr+0x674>)
 8010226:	681a      	ldr	r2, [r3, #0]
 8010228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801022a:	6a1b      	ldr	r3, [r3, #32]
 801022c:	1ad3      	subs	r3, r2, r3
 801022e:	2bf0      	cmp	r3, #240	@ 0xf0
 8010230:	d904      	bls.n	801023c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8010232:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010236:	3301      	adds	r3, #1
 8010238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801023c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010240:	2b00      	cmp	r3, #0
 8010242:	d02f      	beq.n	80102a4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010244:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010246:	f000 fb55 	bl	80108f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801024a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801024c:	2b00      	cmp	r3, #0
 801024e:	d010      	beq.n	8010272 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010250:	4b1f      	ldr	r3, [pc, #124]	@ (80102d0 <tcp_slowtmr+0x678>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010256:	429a      	cmp	r2, r3
 8010258:	d106      	bne.n	8010268 <tcp_slowtmr+0x610>
 801025a:	4b19      	ldr	r3, [pc, #100]	@ (80102c0 <tcp_slowtmr+0x668>)
 801025c:	f240 52af 	movw	r2, #1455	@ 0x5af
 8010260:	491c      	ldr	r1, [pc, #112]	@ (80102d4 <tcp_slowtmr+0x67c>)
 8010262:	4819      	ldr	r0, [pc, #100]	@ (80102c8 <tcp_slowtmr+0x670>)
 8010264:	f009 f9fe 	bl	8019664 <iprintf>
        prev->next = pcb->next;
 8010268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801026a:	68da      	ldr	r2, [r3, #12]
 801026c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801026e:	60da      	str	r2, [r3, #12]
 8010270:	e00f      	b.n	8010292 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010272:	4b17      	ldr	r3, [pc, #92]	@ (80102d0 <tcp_slowtmr+0x678>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010278:	429a      	cmp	r2, r3
 801027a:	d006      	beq.n	801028a <tcp_slowtmr+0x632>
 801027c:	4b10      	ldr	r3, [pc, #64]	@ (80102c0 <tcp_slowtmr+0x668>)
 801027e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8010282:	4915      	ldr	r1, [pc, #84]	@ (80102d8 <tcp_slowtmr+0x680>)
 8010284:	4810      	ldr	r0, [pc, #64]	@ (80102c8 <tcp_slowtmr+0x670>)
 8010286:	f009 f9ed 	bl	8019664 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801028a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801028c:	68db      	ldr	r3, [r3, #12]
 801028e:	4a10      	ldr	r2, [pc, #64]	@ (80102d0 <tcp_slowtmr+0x678>)
 8010290:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010294:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010298:	68db      	ldr	r3, [r3, #12]
 801029a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801029c:	69f8      	ldr	r0, [r7, #28]
 801029e:	f7ff f93d 	bl	800f51c <tcp_free>
 80102a2:	e004      	b.n	80102ae <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80102a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80102a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102aa:	68db      	ldr	r3, [r3, #12]
 80102ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80102ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d1a9      	bne.n	8010208 <tcp_slowtmr+0x5b0>
    }
  }
}
 80102b4:	bf00      	nop
 80102b6:	bf00      	nop
 80102b8:	3730      	adds	r7, #48	@ 0x30
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bdb0      	pop	{r4, r5, r7, pc}
 80102be:	bf00      	nop
 80102c0:	0801c2a4 	.word	0x0801c2a4
 80102c4:	0801c734 	.word	0x0801c734
 80102c8:	0801c2e8 	.word	0x0801c2e8
 80102cc:	2000eb6c 	.word	0x2000eb6c
 80102d0:	2000eb7c 	.word	0x2000eb7c
 80102d4:	0801c764 	.word	0x0801c764
 80102d8:	0801c78c 	.word	0x0801c78c

080102dc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b082      	sub	sp, #8
 80102e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80102e2:	4b2d      	ldr	r3, [pc, #180]	@ (8010398 <tcp_fasttmr+0xbc>)
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	3301      	adds	r3, #1
 80102e8:	b2da      	uxtb	r2, r3
 80102ea:	4b2b      	ldr	r3, [pc, #172]	@ (8010398 <tcp_fasttmr+0xbc>)
 80102ec:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80102ee:	4b2b      	ldr	r3, [pc, #172]	@ (801039c <tcp_fasttmr+0xc0>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80102f4:	e048      	b.n	8010388 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	7f9a      	ldrb	r2, [r3, #30]
 80102fa:	4b27      	ldr	r3, [pc, #156]	@ (8010398 <tcp_fasttmr+0xbc>)
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	429a      	cmp	r2, r3
 8010300:	d03f      	beq.n	8010382 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010302:	4b25      	ldr	r3, [pc, #148]	@ (8010398 <tcp_fasttmr+0xbc>)
 8010304:	781a      	ldrb	r2, [r3, #0]
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	8b5b      	ldrh	r3, [r3, #26]
 801030e:	f003 0301 	and.w	r3, r3, #1
 8010312:	2b00      	cmp	r3, #0
 8010314:	d010      	beq.n	8010338 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	8b5b      	ldrh	r3, [r3, #26]
 801031a:	f043 0302 	orr.w	r3, r3, #2
 801031e:	b29a      	uxth	r2, r3
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f003 fb8d 	bl	8013a44 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	8b5b      	ldrh	r3, [r3, #26]
 801032e:	f023 0303 	bic.w	r3, r3, #3
 8010332:	b29a      	uxth	r2, r3
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	8b5b      	ldrh	r3, [r3, #26]
 801033c:	f003 0308 	and.w	r3, r3, #8
 8010340:	2b00      	cmp	r3, #0
 8010342:	d009      	beq.n	8010358 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	8b5b      	ldrh	r3, [r3, #26]
 8010348:	f023 0308 	bic.w	r3, r3, #8
 801034c:	b29a      	uxth	r2, r3
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f7ff fa76 	bl	800f844 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	68db      	ldr	r3, [r3, #12]
 801035c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010362:	2b00      	cmp	r3, #0
 8010364:	d00a      	beq.n	801037c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010366:	4b0e      	ldr	r3, [pc, #56]	@ (80103a0 <tcp_fasttmr+0xc4>)
 8010368:	2200      	movs	r2, #0
 801036a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f000 f819 	bl	80103a4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010372:	4b0b      	ldr	r3, [pc, #44]	@ (80103a0 <tcp_fasttmr+0xc4>)
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d000      	beq.n	801037c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801037a:	e7b8      	b.n	80102ee <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	607b      	str	r3, [r7, #4]
 8010380:	e002      	b.n	8010388 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	68db      	ldr	r3, [r3, #12]
 8010386:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d1b3      	bne.n	80102f6 <tcp_fasttmr+0x1a>
    }
  }
}
 801038e:	bf00      	nop
 8010390:	bf00      	nop
 8010392:	3708      	adds	r7, #8
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	2000eb82 	.word	0x2000eb82
 801039c:	2000eb78 	.word	0x2000eb78
 80103a0:	2000eb80 	.word	0x2000eb80

080103a4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80103a4:	b590      	push	{r4, r7, lr}
 80103a6:	b085      	sub	sp, #20
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d109      	bne.n	80103c6 <tcp_process_refused_data+0x22>
 80103b2:	4b37      	ldr	r3, [pc, #220]	@ (8010490 <tcp_process_refused_data+0xec>)
 80103b4:	f240 6209 	movw	r2, #1545	@ 0x609
 80103b8:	4936      	ldr	r1, [pc, #216]	@ (8010494 <tcp_process_refused_data+0xf0>)
 80103ba:	4837      	ldr	r0, [pc, #220]	@ (8010498 <tcp_process_refused_data+0xf4>)
 80103bc:	f009 f952 	bl	8019664 <iprintf>
 80103c0:	f06f 030f 	mvn.w	r3, #15
 80103c4:	e060      	b.n	8010488 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80103ca:	7b5b      	ldrb	r3, [r3, #13]
 80103cc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80103d2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2200      	movs	r2, #0
 80103d8:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d00b      	beq.n	80103fc <tcp_process_refused_data+0x58>
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6918      	ldr	r0, [r3, #16]
 80103ee:	2300      	movs	r3, #0
 80103f0:	68ba      	ldr	r2, [r7, #8]
 80103f2:	6879      	ldr	r1, [r7, #4]
 80103f4:	47a0      	blx	r4
 80103f6:	4603      	mov	r3, r0
 80103f8:	73fb      	strb	r3, [r7, #15]
 80103fa:	e007      	b.n	801040c <tcp_process_refused_data+0x68>
 80103fc:	2300      	movs	r3, #0
 80103fe:	68ba      	ldr	r2, [r7, #8]
 8010400:	6879      	ldr	r1, [r7, #4]
 8010402:	2000      	movs	r0, #0
 8010404:	f000 f8a4 	bl	8010550 <tcp_recv_null>
 8010408:	4603      	mov	r3, r0
 801040a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801040c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d12a      	bne.n	801046a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010414:	7bbb      	ldrb	r3, [r7, #14]
 8010416:	f003 0320 	and.w	r3, r3, #32
 801041a:	2b00      	cmp	r3, #0
 801041c:	d033      	beq.n	8010486 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010422:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010426:	d005      	beq.n	8010434 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801042c:	3301      	adds	r3, #1
 801042e:	b29a      	uxth	r2, r3
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801043a:	2b00      	cmp	r3, #0
 801043c:	d00b      	beq.n	8010456 <tcp_process_refused_data+0xb2>
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6918      	ldr	r0, [r3, #16]
 8010448:	2300      	movs	r3, #0
 801044a:	2200      	movs	r2, #0
 801044c:	6879      	ldr	r1, [r7, #4]
 801044e:	47a0      	blx	r4
 8010450:	4603      	mov	r3, r0
 8010452:	73fb      	strb	r3, [r7, #15]
 8010454:	e001      	b.n	801045a <tcp_process_refused_data+0xb6>
 8010456:	2300      	movs	r3, #0
 8010458:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801045a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801045e:	f113 0f0d 	cmn.w	r3, #13
 8010462:	d110      	bne.n	8010486 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010464:	f06f 030c 	mvn.w	r3, #12
 8010468:	e00e      	b.n	8010488 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801046a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801046e:	f113 0f0d 	cmn.w	r3, #13
 8010472:	d102      	bne.n	801047a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010474:	f06f 030c 	mvn.w	r3, #12
 8010478:	e006      	b.n	8010488 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	68ba      	ldr	r2, [r7, #8]
 801047e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8010480:	f06f 0304 	mvn.w	r3, #4
 8010484:	e000      	b.n	8010488 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010486:	2300      	movs	r3, #0
}
 8010488:	4618      	mov	r0, r3
 801048a:	3714      	adds	r7, #20
 801048c:	46bd      	mov	sp, r7
 801048e:	bd90      	pop	{r4, r7, pc}
 8010490:	0801c2a4 	.word	0x0801c2a4
 8010494:	0801c7b4 	.word	0x0801c7b4
 8010498:	0801c2e8 	.word	0x0801c2e8

0801049c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b084      	sub	sp, #16
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80104a4:	e007      	b.n	80104b6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f000 f80a 	bl	80104c6 <tcp_seg_free>
    seg = next;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d1f4      	bne.n	80104a6 <tcp_segs_free+0xa>
  }
}
 80104bc:	bf00      	nop
 80104be:	bf00      	nop
 80104c0:	3710      	adds	r7, #16
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}

080104c6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80104c6:	b580      	push	{r7, lr}
 80104c8:	b082      	sub	sp, #8
 80104ca:	af00      	add	r7, sp, #0
 80104cc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d00c      	beq.n	80104ee <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d004      	beq.n	80104e6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	685b      	ldr	r3, [r3, #4]
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7fe fd5f 	bl	800efa4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80104e6:	6879      	ldr	r1, [r7, #4]
 80104e8:	2003      	movs	r0, #3
 80104ea:	f7fd fda1 	bl	800e030 <memp_free>
  }
}
 80104ee:	bf00      	nop
 80104f0:	3708      	adds	r7, #8
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
	...

080104f8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b084      	sub	sp, #16
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d106      	bne.n	8010514 <tcp_seg_copy+0x1c>
 8010506:	4b0f      	ldr	r3, [pc, #60]	@ (8010544 <tcp_seg_copy+0x4c>)
 8010508:	f240 6282 	movw	r2, #1666	@ 0x682
 801050c:	490e      	ldr	r1, [pc, #56]	@ (8010548 <tcp_seg_copy+0x50>)
 801050e:	480f      	ldr	r0, [pc, #60]	@ (801054c <tcp_seg_copy+0x54>)
 8010510:	f009 f8a8 	bl	8019664 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010514:	2003      	movs	r0, #3
 8010516:	f7fd fd0f 	bl	800df38 <memp_malloc>
 801051a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d101      	bne.n	8010526 <tcp_seg_copy+0x2e>
    return NULL;
 8010522:	2300      	movs	r3, #0
 8010524:	e00a      	b.n	801053c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010526:	2214      	movs	r2, #20
 8010528:	6879      	ldr	r1, [r7, #4]
 801052a:	68f8      	ldr	r0, [r7, #12]
 801052c:	f009 fb3f 	bl	8019bae <memcpy>
  pbuf_ref(cseg->p);
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	685b      	ldr	r3, [r3, #4]
 8010534:	4618      	mov	r0, r3
 8010536:	f7fe fddb 	bl	800f0f0 <pbuf_ref>
  return cseg;
 801053a:	68fb      	ldr	r3, [r7, #12]
}
 801053c:	4618      	mov	r0, r3
 801053e:	3710      	adds	r7, #16
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}
 8010544:	0801c2a4 	.word	0x0801c2a4
 8010548:	0801c7f8 	.word	0x0801c7f8
 801054c:	0801c2e8 	.word	0x0801c2e8

08010550 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b084      	sub	sp, #16
 8010554:	af00      	add	r7, sp, #0
 8010556:	60f8      	str	r0, [r7, #12]
 8010558:	60b9      	str	r1, [r7, #8]
 801055a:	607a      	str	r2, [r7, #4]
 801055c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d109      	bne.n	8010578 <tcp_recv_null+0x28>
 8010564:	4b12      	ldr	r3, [pc, #72]	@ (80105b0 <tcp_recv_null+0x60>)
 8010566:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801056a:	4912      	ldr	r1, [pc, #72]	@ (80105b4 <tcp_recv_null+0x64>)
 801056c:	4812      	ldr	r0, [pc, #72]	@ (80105b8 <tcp_recv_null+0x68>)
 801056e:	f009 f879 	bl	8019664 <iprintf>
 8010572:	f06f 030f 	mvn.w	r3, #15
 8010576:	e016      	b.n	80105a6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d009      	beq.n	8010592 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	891b      	ldrh	r3, [r3, #8]
 8010582:	4619      	mov	r1, r3
 8010584:	68b8      	ldr	r0, [r7, #8]
 8010586:	f7ff fb17 	bl	800fbb8 <tcp_recved>
    pbuf_free(p);
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f7fe fd0a 	bl	800efa4 <pbuf_free>
 8010590:	e008      	b.n	80105a4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010592:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d104      	bne.n	80105a4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801059a:	68b8      	ldr	r0, [r7, #8]
 801059c:	f7ff f9bc 	bl	800f918 <tcp_close>
 80105a0:	4603      	mov	r3, r0
 80105a2:	e000      	b.n	80105a6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80105a4:	2300      	movs	r3, #0
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	3710      	adds	r7, #16
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}
 80105ae:	bf00      	nop
 80105b0:	0801c2a4 	.word	0x0801c2a4
 80105b4:	0801c814 	.word	0x0801c814
 80105b8:	0801c2e8 	.word	0x0801c2e8

080105bc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b086      	sub	sp, #24
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	4603      	mov	r3, r0
 80105c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80105c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	db01      	blt.n	80105d2 <tcp_kill_prio+0x16>
 80105ce:	79fb      	ldrb	r3, [r7, #7]
 80105d0:	e000      	b.n	80105d4 <tcp_kill_prio+0x18>
 80105d2:	237f      	movs	r3, #127	@ 0x7f
 80105d4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80105d6:	7afb      	ldrb	r3, [r7, #11]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d034      	beq.n	8010646 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80105dc:	7afb      	ldrb	r3, [r7, #11]
 80105de:	3b01      	subs	r3, #1
 80105e0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80105e2:	2300      	movs	r3, #0
 80105e4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80105e6:	2300      	movs	r3, #0
 80105e8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80105ea:	4b19      	ldr	r3, [pc, #100]	@ (8010650 <tcp_kill_prio+0x94>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	617b      	str	r3, [r7, #20]
 80105f0:	e01f      	b.n	8010632 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	7d5b      	ldrb	r3, [r3, #21]
 80105f6:	7afa      	ldrb	r2, [r7, #11]
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d80c      	bhi.n	8010616 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80105fc:	697b      	ldr	r3, [r7, #20]
 80105fe:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010600:	7afa      	ldrb	r2, [r7, #11]
 8010602:	429a      	cmp	r2, r3
 8010604:	d112      	bne.n	801062c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010606:	4b13      	ldr	r3, [pc, #76]	@ (8010654 <tcp_kill_prio+0x98>)
 8010608:	681a      	ldr	r2, [r3, #0]
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	6a1b      	ldr	r3, [r3, #32]
 801060e:	1ad3      	subs	r3, r2, r3
 8010610:	68fa      	ldr	r2, [r7, #12]
 8010612:	429a      	cmp	r2, r3
 8010614:	d80a      	bhi.n	801062c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010616:	4b0f      	ldr	r3, [pc, #60]	@ (8010654 <tcp_kill_prio+0x98>)
 8010618:	681a      	ldr	r2, [r3, #0]
 801061a:	697b      	ldr	r3, [r7, #20]
 801061c:	6a1b      	ldr	r3, [r3, #32]
 801061e:	1ad3      	subs	r3, r2, r3
 8010620:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010622:	697b      	ldr	r3, [r7, #20]
 8010624:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	7d5b      	ldrb	r3, [r3, #21]
 801062a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	68db      	ldr	r3, [r3, #12]
 8010630:	617b      	str	r3, [r7, #20]
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d1dc      	bne.n	80105f2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010638:	693b      	ldr	r3, [r7, #16]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d004      	beq.n	8010648 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801063e:	6938      	ldr	r0, [r7, #16]
 8010640:	f7ff fa54 	bl	800faec <tcp_abort>
 8010644:	e000      	b.n	8010648 <tcp_kill_prio+0x8c>
    return;
 8010646:	bf00      	nop
  }
}
 8010648:	3718      	adds	r7, #24
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}
 801064e:	bf00      	nop
 8010650:	2000eb78 	.word	0x2000eb78
 8010654:	2000eb6c 	.word	0x2000eb6c

08010658 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b086      	sub	sp, #24
 801065c:	af00      	add	r7, sp, #0
 801065e:	4603      	mov	r3, r0
 8010660:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010662:	79fb      	ldrb	r3, [r7, #7]
 8010664:	2b08      	cmp	r3, #8
 8010666:	d009      	beq.n	801067c <tcp_kill_state+0x24>
 8010668:	79fb      	ldrb	r3, [r7, #7]
 801066a:	2b09      	cmp	r3, #9
 801066c:	d006      	beq.n	801067c <tcp_kill_state+0x24>
 801066e:	4b1a      	ldr	r3, [pc, #104]	@ (80106d8 <tcp_kill_state+0x80>)
 8010670:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8010674:	4919      	ldr	r1, [pc, #100]	@ (80106dc <tcp_kill_state+0x84>)
 8010676:	481a      	ldr	r0, [pc, #104]	@ (80106e0 <tcp_kill_state+0x88>)
 8010678:	f008 fff4 	bl	8019664 <iprintf>

  inactivity = 0;
 801067c:	2300      	movs	r3, #0
 801067e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010680:	2300      	movs	r3, #0
 8010682:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010684:	4b17      	ldr	r3, [pc, #92]	@ (80106e4 <tcp_kill_state+0x8c>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	617b      	str	r3, [r7, #20]
 801068a:	e017      	b.n	80106bc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801068c:	697b      	ldr	r3, [r7, #20]
 801068e:	7d1b      	ldrb	r3, [r3, #20]
 8010690:	79fa      	ldrb	r2, [r7, #7]
 8010692:	429a      	cmp	r2, r3
 8010694:	d10f      	bne.n	80106b6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010696:	4b14      	ldr	r3, [pc, #80]	@ (80106e8 <tcp_kill_state+0x90>)
 8010698:	681a      	ldr	r2, [r3, #0]
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	6a1b      	ldr	r3, [r3, #32]
 801069e:	1ad3      	subs	r3, r2, r3
 80106a0:	68fa      	ldr	r2, [r7, #12]
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d807      	bhi.n	80106b6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80106a6:	4b10      	ldr	r3, [pc, #64]	@ (80106e8 <tcp_kill_state+0x90>)
 80106a8:	681a      	ldr	r2, [r3, #0]
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	6a1b      	ldr	r3, [r3, #32]
 80106ae:	1ad3      	subs	r3, r2, r3
 80106b0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	68db      	ldr	r3, [r3, #12]
 80106ba:	617b      	str	r3, [r7, #20]
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d1e4      	bne.n	801068c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d003      	beq.n	80106d0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80106c8:	2100      	movs	r1, #0
 80106ca:	6938      	ldr	r0, [r7, #16]
 80106cc:	f7ff f950 	bl	800f970 <tcp_abandon>
  }
}
 80106d0:	bf00      	nop
 80106d2:	3718      	adds	r7, #24
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}
 80106d8:	0801c2a4 	.word	0x0801c2a4
 80106dc:	0801c830 	.word	0x0801c830
 80106e0:	0801c2e8 	.word	0x0801c2e8
 80106e4:	2000eb78 	.word	0x2000eb78
 80106e8:	2000eb6c 	.word	0x2000eb6c

080106ec <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b084      	sub	sp, #16
 80106f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80106f2:	2300      	movs	r3, #0
 80106f4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80106f6:	2300      	movs	r3, #0
 80106f8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80106fa:	4b12      	ldr	r3, [pc, #72]	@ (8010744 <tcp_kill_timewait+0x58>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	60fb      	str	r3, [r7, #12]
 8010700:	e012      	b.n	8010728 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010702:	4b11      	ldr	r3, [pc, #68]	@ (8010748 <tcp_kill_timewait+0x5c>)
 8010704:	681a      	ldr	r2, [r3, #0]
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	6a1b      	ldr	r3, [r3, #32]
 801070a:	1ad3      	subs	r3, r2, r3
 801070c:	687a      	ldr	r2, [r7, #4]
 801070e:	429a      	cmp	r2, r3
 8010710:	d807      	bhi.n	8010722 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010712:	4b0d      	ldr	r3, [pc, #52]	@ (8010748 <tcp_kill_timewait+0x5c>)
 8010714:	681a      	ldr	r2, [r3, #0]
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	6a1b      	ldr	r3, [r3, #32]
 801071a:	1ad3      	subs	r3, r2, r3
 801071c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	68db      	ldr	r3, [r3, #12]
 8010726:	60fb      	str	r3, [r7, #12]
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d1e9      	bne.n	8010702 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d002      	beq.n	801073a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010734:	68b8      	ldr	r0, [r7, #8]
 8010736:	f7ff f9d9 	bl	800faec <tcp_abort>
  }
}
 801073a:	bf00      	nop
 801073c:	3710      	adds	r7, #16
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
 8010742:	bf00      	nop
 8010744:	2000eb7c 	.word	0x2000eb7c
 8010748:	2000eb6c 	.word	0x2000eb6c

0801074c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b082      	sub	sp, #8
 8010750:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010752:	4b10      	ldr	r3, [pc, #64]	@ (8010794 <tcp_handle_closepend+0x48>)
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010758:	e014      	b.n	8010784 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	68db      	ldr	r3, [r3, #12]
 801075e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	8b5b      	ldrh	r3, [r3, #26]
 8010764:	f003 0308 	and.w	r3, r3, #8
 8010768:	2b00      	cmp	r3, #0
 801076a:	d009      	beq.n	8010780 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	8b5b      	ldrh	r3, [r3, #26]
 8010770:	f023 0308 	bic.w	r3, r3, #8
 8010774:	b29a      	uxth	r2, r3
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f7ff f862 	bl	800f844 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d1e7      	bne.n	801075a <tcp_handle_closepend+0xe>
  }
}
 801078a:	bf00      	nop
 801078c:	bf00      	nop
 801078e:	3708      	adds	r7, #8
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}
 8010794:	2000eb78 	.word	0x2000eb78

08010798 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b084      	sub	sp, #16
 801079c:	af00      	add	r7, sp, #0
 801079e:	4603      	mov	r3, r0
 80107a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80107a2:	2001      	movs	r0, #1
 80107a4:	f7fd fbc8 	bl	800df38 <memp_malloc>
 80107a8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d14e      	bne.n	801084e <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80107b0:	f7ff ffcc 	bl	801074c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80107b4:	f7ff ff9a 	bl	80106ec <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80107b8:	2001      	movs	r0, #1
 80107ba:	f7fd fbbd 	bl	800df38 <memp_malloc>
 80107be:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d139      	bne.n	801083a <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80107c6:	2009      	movs	r0, #9
 80107c8:	f7ff ff46 	bl	8010658 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80107cc:	2001      	movs	r0, #1
 80107ce:	f7fd fbb3 	bl	800df38 <memp_malloc>
 80107d2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d125      	bne.n	8010826 <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80107da:	2008      	movs	r0, #8
 80107dc:	f7ff ff3c 	bl	8010658 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80107e0:	2001      	movs	r0, #1
 80107e2:	f7fd fba9 	bl	800df38 <memp_malloc>
 80107e6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d111      	bne.n	8010812 <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80107ee:	79fb      	ldrb	r3, [r7, #7]
 80107f0:	4618      	mov	r0, r3
 80107f2:	f7ff fee3 	bl	80105bc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80107f6:	2001      	movs	r0, #1
 80107f8:	f7fd fb9e 	bl	800df38 <memp_malloc>
 80107fc:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d006      	beq.n	8010812 <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8010804:	4b36      	ldr	r3, [pc, #216]	@ (80108e0 <tcp_alloc+0x148>)
 8010806:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801080a:	889a      	ldrh	r2, [r3, #4]
 801080c:	3a01      	subs	r2, #1
 801080e:	b292      	uxth	r2, r2
 8010810:	809a      	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d006      	beq.n	8010826 <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8010818:	4b31      	ldr	r3, [pc, #196]	@ (80108e0 <tcp_alloc+0x148>)
 801081a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801081e:	889a      	ldrh	r2, [r3, #4]
 8010820:	3a01      	subs	r2, #1
 8010822:	b292      	uxth	r2, r2
 8010824:	809a      	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d006      	beq.n	801083a <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801082c:	4b2c      	ldr	r3, [pc, #176]	@ (80108e0 <tcp_alloc+0x148>)
 801082e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010832:	889a      	ldrh	r2, [r3, #4]
 8010834:	3a01      	subs	r2, #1
 8010836:	b292      	uxth	r2, r2
 8010838:	809a      	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d006      	beq.n	801084e <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8010840:	4b27      	ldr	r3, [pc, #156]	@ (80108e0 <tcp_alloc+0x148>)
 8010842:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010846:	889a      	ldrh	r2, [r3, #4]
 8010848:	3a01      	subs	r2, #1
 801084a:	b292      	uxth	r2, r2
 801084c:	809a      	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d03f      	beq.n	80108d4 <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010854:	229c      	movs	r2, #156	@ 0x9c
 8010856:	2100      	movs	r1, #0
 8010858:	68f8      	ldr	r0, [r7, #12]
 801085a:	f009 f8d5 	bl	8019a08 <memset>
    pcb->prio = prio;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	79fa      	ldrb	r2, [r7, #7]
 8010862:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801086a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8010874:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	22ff      	movs	r2, #255	@ 0xff
 8010882:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801088a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	2206      	movs	r2, #6
 8010890:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	2206      	movs	r2, #6
 8010898:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80108a0:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	2201      	movs	r2, #1
 80108a6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80108aa:	4b0e      	ldr	r3, [pc, #56]	@ (80108e4 <tcp_alloc+0x14c>)
 80108ac:	681a      	ldr	r2, [r3, #0]
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80108b2:	4b0d      	ldr	r3, [pc, #52]	@ (80108e8 <tcp_alloc+0x150>)
 80108b4:	781a      	ldrb	r2, [r3, #0]
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80108c0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	4a09      	ldr	r2, [pc, #36]	@ (80108ec <tcp_alloc+0x154>)
 80108c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	4a08      	ldr	r2, [pc, #32]	@ (80108f0 <tcp_alloc+0x158>)
 80108d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80108d4:	68fb      	ldr	r3, [r7, #12]
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3710      	adds	r7, #16
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}
 80108de:	bf00      	nop
 80108e0:	2000ea4c 	.word	0x2000ea4c
 80108e4:	2000eb6c 	.word	0x2000eb6c
 80108e8:	2000eb82 	.word	0x2000eb82
 80108ec:	08010551 	.word	0x08010551
 80108f0:	006ddd00 	.word	0x006ddd00

080108f4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b082      	sub	sp, #8
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d107      	bne.n	8010912 <tcp_pcb_purge+0x1e>
 8010902:	4b21      	ldr	r3, [pc, #132]	@ (8010988 <tcp_pcb_purge+0x94>)
 8010904:	f640 0251 	movw	r2, #2129	@ 0x851
 8010908:	4920      	ldr	r1, [pc, #128]	@ (801098c <tcp_pcb_purge+0x98>)
 801090a:	4821      	ldr	r0, [pc, #132]	@ (8010990 <tcp_pcb_purge+0x9c>)
 801090c:	f008 feaa 	bl	8019664 <iprintf>
 8010910:	e037      	b.n	8010982 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	7d1b      	ldrb	r3, [r3, #20]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d033      	beq.n	8010982 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801091e:	2b0a      	cmp	r3, #10
 8010920:	d02f      	beq.n	8010982 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010926:	2b01      	cmp	r3, #1
 8010928:	d02b      	beq.n	8010982 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801092e:	2b00      	cmp	r3, #0
 8010930:	d007      	beq.n	8010942 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010936:	4618      	mov	r0, r3
 8010938:	f7fe fb34 	bl	800efa4 <pbuf_free>
      pcb->refused_data = NULL;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2200      	movs	r2, #0
 8010940:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010946:	2b00      	cmp	r3, #0
 8010948:	d002      	beq.n	8010950 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f000 f98c 	bl	8010c68 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010956:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801095c:	4618      	mov	r0, r3
 801095e:	f7ff fd9d 	bl	801049c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010966:	4618      	mov	r0, r3
 8010968:	f7ff fd98 	bl	801049c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2200      	movs	r2, #0
 8010970:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2200      	movs	r2, #0
 801097e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010982:	3708      	adds	r7, #8
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}
 8010988:	0801c2a4 	.word	0x0801c2a4
 801098c:	0801c8f0 	.word	0x0801c8f0
 8010990:	0801c2e8 	.word	0x0801c2e8

08010994 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b084      	sub	sp, #16
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d106      	bne.n	80109b2 <tcp_pcb_remove+0x1e>
 80109a4:	4b3e      	ldr	r3, [pc, #248]	@ (8010aa0 <tcp_pcb_remove+0x10c>)
 80109a6:	f640 0283 	movw	r2, #2179	@ 0x883
 80109aa:	493e      	ldr	r1, [pc, #248]	@ (8010aa4 <tcp_pcb_remove+0x110>)
 80109ac:	483e      	ldr	r0, [pc, #248]	@ (8010aa8 <tcp_pcb_remove+0x114>)
 80109ae:	f008 fe59 	bl	8019664 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d106      	bne.n	80109c6 <tcp_pcb_remove+0x32>
 80109b8:	4b39      	ldr	r3, [pc, #228]	@ (8010aa0 <tcp_pcb_remove+0x10c>)
 80109ba:	f640 0284 	movw	r2, #2180	@ 0x884
 80109be:	493b      	ldr	r1, [pc, #236]	@ (8010aac <tcp_pcb_remove+0x118>)
 80109c0:	4839      	ldr	r0, [pc, #228]	@ (8010aa8 <tcp_pcb_remove+0x114>)
 80109c2:	f008 fe4f 	bl	8019664 <iprintf>

  TCP_RMV(pcblist, pcb);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	683a      	ldr	r2, [r7, #0]
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d105      	bne.n	80109dc <tcp_pcb_remove+0x48>
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	68da      	ldr	r2, [r3, #12]
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	601a      	str	r2, [r3, #0]
 80109da:	e013      	b.n	8010a04 <tcp_pcb_remove+0x70>
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	60fb      	str	r3, [r7, #12]
 80109e2:	e00c      	b.n	80109fe <tcp_pcb_remove+0x6a>
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	68db      	ldr	r3, [r3, #12]
 80109e8:	683a      	ldr	r2, [r7, #0]
 80109ea:	429a      	cmp	r2, r3
 80109ec:	d104      	bne.n	80109f8 <tcp_pcb_remove+0x64>
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	68da      	ldr	r2, [r3, #12]
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	60da      	str	r2, [r3, #12]
 80109f6:	e005      	b.n	8010a04 <tcp_pcb_remove+0x70>
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	68db      	ldr	r3, [r3, #12]
 80109fc:	60fb      	str	r3, [r7, #12]
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d1ef      	bne.n	80109e4 <tcp_pcb_remove+0x50>
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	2200      	movs	r2, #0
 8010a08:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010a0a:	6838      	ldr	r0, [r7, #0]
 8010a0c:	f7ff ff72 	bl	80108f4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	7d1b      	ldrb	r3, [r3, #20]
 8010a14:	2b0a      	cmp	r3, #10
 8010a16:	d013      	beq.n	8010a40 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010a1c:	2b01      	cmp	r3, #1
 8010a1e:	d00f      	beq.n	8010a40 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	8b5b      	ldrh	r3, [r3, #26]
 8010a24:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d009      	beq.n	8010a40 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	8b5b      	ldrh	r3, [r3, #26]
 8010a30:	f043 0302 	orr.w	r3, r3, #2
 8010a34:	b29a      	uxth	r2, r3
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010a3a:	6838      	ldr	r0, [r7, #0]
 8010a3c:	f003 f802 	bl	8013a44 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	7d1b      	ldrb	r3, [r3, #20]
 8010a44:	2b01      	cmp	r3, #1
 8010a46:	d020      	beq.n	8010a8a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d006      	beq.n	8010a5e <tcp_pcb_remove+0xca>
 8010a50:	4b13      	ldr	r3, [pc, #76]	@ (8010aa0 <tcp_pcb_remove+0x10c>)
 8010a52:	f640 0293 	movw	r2, #2195	@ 0x893
 8010a56:	4916      	ldr	r1, [pc, #88]	@ (8010ab0 <tcp_pcb_remove+0x11c>)
 8010a58:	4813      	ldr	r0, [pc, #76]	@ (8010aa8 <tcp_pcb_remove+0x114>)
 8010a5a:	f008 fe03 	bl	8019664 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d006      	beq.n	8010a74 <tcp_pcb_remove+0xe0>
 8010a66:	4b0e      	ldr	r3, [pc, #56]	@ (8010aa0 <tcp_pcb_remove+0x10c>)
 8010a68:	f640 0294 	movw	r2, #2196	@ 0x894
 8010a6c:	4911      	ldr	r1, [pc, #68]	@ (8010ab4 <tcp_pcb_remove+0x120>)
 8010a6e:	480e      	ldr	r0, [pc, #56]	@ (8010aa8 <tcp_pcb_remove+0x114>)
 8010a70:	f008 fdf8 	bl	8019664 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010a74:	683b      	ldr	r3, [r7, #0]
 8010a76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d006      	beq.n	8010a8a <tcp_pcb_remove+0xf6>
 8010a7c:	4b08      	ldr	r3, [pc, #32]	@ (8010aa0 <tcp_pcb_remove+0x10c>)
 8010a7e:	f640 0296 	movw	r2, #2198	@ 0x896
 8010a82:	490d      	ldr	r1, [pc, #52]	@ (8010ab8 <tcp_pcb_remove+0x124>)
 8010a84:	4808      	ldr	r0, [pc, #32]	@ (8010aa8 <tcp_pcb_remove+0x114>)
 8010a86:	f008 fded 	bl	8019664 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	2200      	movs	r2, #0
 8010a94:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010a96:	bf00      	nop
 8010a98:	3710      	adds	r7, #16
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	bd80      	pop	{r7, pc}
 8010a9e:	bf00      	nop
 8010aa0:	0801c2a4 	.word	0x0801c2a4
 8010aa4:	0801c90c 	.word	0x0801c90c
 8010aa8:	0801c2e8 	.word	0x0801c2e8
 8010aac:	0801c928 	.word	0x0801c928
 8010ab0:	0801c948 	.word	0x0801c948
 8010ab4:	0801c960 	.word	0x0801c960
 8010ab8:	0801c97c 	.word	0x0801c97c

08010abc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b082      	sub	sp, #8
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d106      	bne.n	8010ad8 <tcp_next_iss+0x1c>
 8010aca:	4b0a      	ldr	r3, [pc, #40]	@ (8010af4 <tcp_next_iss+0x38>)
 8010acc:	f640 02af 	movw	r2, #2223	@ 0x8af
 8010ad0:	4909      	ldr	r1, [pc, #36]	@ (8010af8 <tcp_next_iss+0x3c>)
 8010ad2:	480a      	ldr	r0, [pc, #40]	@ (8010afc <tcp_next_iss+0x40>)
 8010ad4:	f008 fdc6 	bl	8019664 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010ad8:	4b09      	ldr	r3, [pc, #36]	@ (8010b00 <tcp_next_iss+0x44>)
 8010ada:	681a      	ldr	r2, [r3, #0]
 8010adc:	4b09      	ldr	r3, [pc, #36]	@ (8010b04 <tcp_next_iss+0x48>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	4413      	add	r3, r2
 8010ae2:	4a07      	ldr	r2, [pc, #28]	@ (8010b00 <tcp_next_iss+0x44>)
 8010ae4:	6013      	str	r3, [r2, #0]
  return iss;
 8010ae6:	4b06      	ldr	r3, [pc, #24]	@ (8010b00 <tcp_next_iss+0x44>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3708      	adds	r7, #8
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}
 8010af2:	bf00      	nop
 8010af4:	0801c2a4 	.word	0x0801c2a4
 8010af8:	0801c994 	.word	0x0801c994
 8010afc:	0801c2e8 	.word	0x0801c2e8
 8010b00:	200000b4 	.word	0x200000b4
 8010b04:	2000eb6c 	.word	0x2000eb6c

08010b08 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b086      	sub	sp, #24
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	4603      	mov	r3, r0
 8010b10:	60b9      	str	r1, [r7, #8]
 8010b12:	607a      	str	r2, [r7, #4]
 8010b14:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d106      	bne.n	8010b2a <tcp_eff_send_mss_netif+0x22>
 8010b1c:	4b14      	ldr	r3, [pc, #80]	@ (8010b70 <tcp_eff_send_mss_netif+0x68>)
 8010b1e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8010b22:	4914      	ldr	r1, [pc, #80]	@ (8010b74 <tcp_eff_send_mss_netif+0x6c>)
 8010b24:	4814      	ldr	r0, [pc, #80]	@ (8010b78 <tcp_eff_send_mss_netif+0x70>)
 8010b26:	f008 fd9d 	bl	8019664 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010b2a:	68bb      	ldr	r3, [r7, #8]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d101      	bne.n	8010b34 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010b30:	89fb      	ldrh	r3, [r7, #14]
 8010b32:	e019      	b.n	8010b68 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b38:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010b3a:	8afb      	ldrh	r3, [r7, #22]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d012      	beq.n	8010b66 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010b40:	2328      	movs	r3, #40	@ 0x28
 8010b42:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010b44:	8afa      	ldrh	r2, [r7, #22]
 8010b46:	8abb      	ldrh	r3, [r7, #20]
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d904      	bls.n	8010b56 <tcp_eff_send_mss_netif+0x4e>
 8010b4c:	8afa      	ldrh	r2, [r7, #22]
 8010b4e:	8abb      	ldrh	r3, [r7, #20]
 8010b50:	1ad3      	subs	r3, r2, r3
 8010b52:	b29b      	uxth	r3, r3
 8010b54:	e000      	b.n	8010b58 <tcp_eff_send_mss_netif+0x50>
 8010b56:	2300      	movs	r3, #0
 8010b58:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010b5a:	8a7a      	ldrh	r2, [r7, #18]
 8010b5c:	89fb      	ldrh	r3, [r7, #14]
 8010b5e:	4293      	cmp	r3, r2
 8010b60:	bf28      	it	cs
 8010b62:	4613      	movcs	r3, r2
 8010b64:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010b66:	89fb      	ldrh	r3, [r7, #14]
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3718      	adds	r7, #24
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}
 8010b70:	0801c2a4 	.word	0x0801c2a4
 8010b74:	0801c9b0 	.word	0x0801c9b0
 8010b78:	0801c2e8 	.word	0x0801c2e8

08010b7c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b084      	sub	sp, #16
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d11d      	bne.n	8010bcc <tcp_netif_ip_addr_changed_pcblist+0x50>
 8010b90:	4b12      	ldr	r3, [pc, #72]	@ (8010bdc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010b92:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8010b96:	4912      	ldr	r1, [pc, #72]	@ (8010be0 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8010b98:	4812      	ldr	r0, [pc, #72]	@ (8010be4 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8010b9a:	f008 fd63 	bl	8019664 <iprintf>

  while (pcb != NULL) {
 8010b9e:	e015      	b.n	8010bcc <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	681a      	ldr	r2, [r3, #0]
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	429a      	cmp	r2, r3
 8010baa:	d10c      	bne.n	8010bc6 <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	68db      	ldr	r3, [r3, #12]
 8010bb0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 8010bb2:	68f9      	ldr	r1, [r7, #12]
 8010bb4:	480c      	ldr	r0, [pc, #48]	@ (8010be8 <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 8010bb6:	f008 fd55 	bl	8019664 <iprintf>
      tcp_abort(pcb);
 8010bba:	68f8      	ldr	r0, [r7, #12]
 8010bbc:	f7fe ff96 	bl	800faec <tcp_abort>
      pcb = next;
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	60fb      	str	r3, [r7, #12]
 8010bc4:	e002      	b.n	8010bcc <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	68db      	ldr	r3, [r3, #12]
 8010bca:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d1e6      	bne.n	8010ba0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010bd2:	bf00      	nop
 8010bd4:	bf00      	nop
 8010bd6:	3710      	adds	r7, #16
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}
 8010bdc:	0801c2a4 	.word	0x0801c2a4
 8010be0:	0801c9d8 	.word	0x0801c9d8
 8010be4:	0801c2e8 	.word	0x0801c2e8
 8010be8:	0801ca0c 	.word	0x0801ca0c

08010bec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b084      	sub	sp, #16
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
 8010bf4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d02a      	beq.n	8010c52 <tcp_netif_ip_addr_changed+0x66>
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d026      	beq.n	8010c52 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010c04:	4b15      	ldr	r3, [pc, #84]	@ (8010c5c <tcp_netif_ip_addr_changed+0x70>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	4619      	mov	r1, r3
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	f7ff ffb6 	bl	8010b7c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010c10:	4b13      	ldr	r3, [pc, #76]	@ (8010c60 <tcp_netif_ip_addr_changed+0x74>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	4619      	mov	r1, r3
 8010c16:	6878      	ldr	r0, [r7, #4]
 8010c18:	f7ff ffb0 	bl	8010b7c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d017      	beq.n	8010c52 <tcp_netif_ip_addr_changed+0x66>
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d013      	beq.n	8010c52 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8010c64 <tcp_netif_ip_addr_changed+0x78>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	60fb      	str	r3, [r7, #12]
 8010c30:	e00c      	b.n	8010c4c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	681a      	ldr	r2, [r3, #0]
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d103      	bne.n	8010c46 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	681a      	ldr	r2, [r3, #0]
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	68db      	ldr	r3, [r3, #12]
 8010c4a:	60fb      	str	r3, [r7, #12]
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d1ef      	bne.n	8010c32 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010c52:	bf00      	nop
 8010c54:	3710      	adds	r7, #16
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	2000eb78 	.word	0x2000eb78
 8010c60:	2000eb70 	.word	0x2000eb70
 8010c64:	2000eb74 	.word	0x2000eb74

08010c68 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b082      	sub	sp, #8
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d007      	beq.n	8010c88 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f7ff fc0d 	bl	801049c <tcp_segs_free>
    pcb->ooseq = NULL;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2200      	movs	r2, #0
 8010c86:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010c88:	bf00      	nop
 8010c8a:	3708      	adds	r7, #8
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}

08010c90 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010c90:	b590      	push	{r4, r7, lr}
 8010c92:	b08d      	sub	sp, #52	@ 0x34
 8010c94:	af04      	add	r7, sp, #16
 8010c96:	6078      	str	r0, [r7, #4]
 8010c98:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d105      	bne.n	8010cac <tcp_input+0x1c>
 8010ca0:	4b9b      	ldr	r3, [pc, #620]	@ (8010f10 <tcp_input+0x280>)
 8010ca2:	2283      	movs	r2, #131	@ 0x83
 8010ca4:	499b      	ldr	r1, [pc, #620]	@ (8010f14 <tcp_input+0x284>)
 8010ca6:	489c      	ldr	r0, [pc, #624]	@ (8010f18 <tcp_input+0x288>)
 8010ca8:	f008 fcdc 	bl	8019664 <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8010cac:	4b9b      	ldr	r3, [pc, #620]	@ (8010f1c <tcp_input+0x28c>)
 8010cae:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8010cb2:	3301      	adds	r3, #1
 8010cb4:	b29a      	uxth	r2, r3
 8010cb6:	4b99      	ldr	r3, [pc, #612]	@ (8010f1c <tcp_input+0x28c>)
 8010cb8:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	685b      	ldr	r3, [r3, #4]
 8010cc0:	4a97      	ldr	r2, [pc, #604]	@ (8010f20 <tcp_input+0x290>)
 8010cc2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	895b      	ldrh	r3, [r3, #10]
 8010cc8:	2b13      	cmp	r3, #19
 8010cca:	d809      	bhi.n	8010ce0 <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8010ccc:	4b93      	ldr	r3, [pc, #588]	@ (8010f1c <tcp_input+0x28c>)
 8010cce:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	@ 0xb6
 8010cd2:	3301      	adds	r3, #1
 8010cd4:	b29a      	uxth	r2, r3
 8010cd6:	4b91      	ldr	r3, [pc, #580]	@ (8010f1c <tcp_input+0x28c>)
 8010cd8:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
    goto dropped;
 8010cdc:	f000 bc1c 	b.w	8011518 <tcp_input+0x888>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010ce0:	4b90      	ldr	r3, [pc, #576]	@ (8010f24 <tcp_input+0x294>)
 8010ce2:	695b      	ldr	r3, [r3, #20]
 8010ce4:	4a8f      	ldr	r2, [pc, #572]	@ (8010f24 <tcp_input+0x294>)
 8010ce6:	6812      	ldr	r2, [r2, #0]
 8010ce8:	4611      	mov	r1, r2
 8010cea:	4618      	mov	r0, r3
 8010cec:	f006 fd1a 	bl	8017724 <ip4_addr_isbroadcast_u32>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d105      	bne.n	8010d02 <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010cf6:	4b8b      	ldr	r3, [pc, #556]	@ (8010f24 <tcp_input+0x294>)
 8010cf8:	695b      	ldr	r3, [r3, #20]
 8010cfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010cfe:	2be0      	cmp	r3, #224	@ 0xe0
 8010d00:	d109      	bne.n	8010d16 <tcp_input+0x86>
    TCP_STATS_INC(tcp.proterr);
 8010d02:	4b86      	ldr	r3, [pc, #536]	@ (8010f1c <tcp_input+0x28c>)
 8010d04:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8010d08:	3301      	adds	r3, #1
 8010d0a:	b29a      	uxth	r2, r3
 8010d0c:	4b83      	ldr	r3, [pc, #524]	@ (8010f1c <tcp_input+0x28c>)
 8010d0e:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
    goto dropped;
 8010d12:	f000 bc01 	b.w	8011518 <tcp_input+0x888>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010d16:	4b82      	ldr	r3, [pc, #520]	@ (8010f20 <tcp_input+0x290>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	899b      	ldrh	r3, [r3, #12]
 8010d1c:	b29b      	uxth	r3, r3
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f7fc faa4 	bl	800d26c <lwip_htons>
 8010d24:	4603      	mov	r3, r0
 8010d26:	0b1b      	lsrs	r3, r3, #12
 8010d28:	b29b      	uxth	r3, r3
 8010d2a:	b2db      	uxtb	r3, r3
 8010d2c:	009b      	lsls	r3, r3, #2
 8010d2e:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010d30:	7cbb      	ldrb	r3, [r7, #18]
 8010d32:	2b13      	cmp	r3, #19
 8010d34:	d905      	bls.n	8010d42 <tcp_input+0xb2>
 8010d36:	7cbb      	ldrb	r3, [r7, #18]
 8010d38:	b29a      	uxth	r2, r3
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	891b      	ldrh	r3, [r3, #8]
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d908      	bls.n	8010d54 <tcp_input+0xc4>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8010d42:	4b76      	ldr	r3, [pc, #472]	@ (8010f1c <tcp_input+0x28c>)
 8010d44:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	@ 0xb6
 8010d48:	3301      	adds	r3, #1
 8010d4a:	b29a      	uxth	r2, r3
 8010d4c:	4b73      	ldr	r3, [pc, #460]	@ (8010f1c <tcp_input+0x28c>)
 8010d4e:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
    goto dropped;
 8010d52:	e3e1      	b.n	8011518 <tcp_input+0x888>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010d54:	7cbb      	ldrb	r3, [r7, #18]
 8010d56:	b29b      	uxth	r3, r3
 8010d58:	3b14      	subs	r3, #20
 8010d5a:	b29a      	uxth	r2, r3
 8010d5c:	4b72      	ldr	r3, [pc, #456]	@ (8010f28 <tcp_input+0x298>)
 8010d5e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010d60:	4b72      	ldr	r3, [pc, #456]	@ (8010f2c <tcp_input+0x29c>)
 8010d62:	2200      	movs	r2, #0
 8010d64:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	895a      	ldrh	r2, [r3, #10]
 8010d6a:	7cbb      	ldrb	r3, [r7, #18]
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d309      	bcc.n	8010d86 <tcp_input+0xf6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010d72:	4b6d      	ldr	r3, [pc, #436]	@ (8010f28 <tcp_input+0x298>)
 8010d74:	881a      	ldrh	r2, [r3, #0]
 8010d76:	4b6e      	ldr	r3, [pc, #440]	@ (8010f30 <tcp_input+0x2a0>)
 8010d78:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010d7a:	7cbb      	ldrb	r3, [r7, #18]
 8010d7c:	4619      	mov	r1, r3
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f7fe f88a 	bl	800ee98 <pbuf_remove_header>
 8010d84:	e056      	b.n	8010e34 <tcp_input+0x1a4>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d105      	bne.n	8010d9a <tcp_input+0x10a>
 8010d8e:	4b60      	ldr	r3, [pc, #384]	@ (8010f10 <tcp_input+0x280>)
 8010d90:	22c2      	movs	r2, #194	@ 0xc2
 8010d92:	4968      	ldr	r1, [pc, #416]	@ (8010f34 <tcp_input+0x2a4>)
 8010d94:	4860      	ldr	r0, [pc, #384]	@ (8010f18 <tcp_input+0x288>)
 8010d96:	f008 fc65 	bl	8019664 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010d9a:	2114      	movs	r1, #20
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f7fe f87b 	bl	800ee98 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	895a      	ldrh	r2, [r3, #10]
 8010da6:	4b62      	ldr	r3, [pc, #392]	@ (8010f30 <tcp_input+0x2a0>)
 8010da8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010daa:	4b5f      	ldr	r3, [pc, #380]	@ (8010f28 <tcp_input+0x298>)
 8010dac:	881a      	ldrh	r2, [r3, #0]
 8010dae:	4b60      	ldr	r3, [pc, #384]	@ (8010f30 <tcp_input+0x2a0>)
 8010db0:	881b      	ldrh	r3, [r3, #0]
 8010db2:	1ad3      	subs	r3, r2, r3
 8010db4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010db6:	4b5e      	ldr	r3, [pc, #376]	@ (8010f30 <tcp_input+0x2a0>)
 8010db8:	881b      	ldrh	r3, [r3, #0]
 8010dba:	4619      	mov	r1, r3
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f7fe f86b 	bl	800ee98 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	895b      	ldrh	r3, [r3, #10]
 8010dc8:	8a3a      	ldrh	r2, [r7, #16]
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d908      	bls.n	8010de0 <tcp_input+0x150>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8010dce:	4b53      	ldr	r3, [pc, #332]	@ (8010f1c <tcp_input+0x28c>)
 8010dd0:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	@ 0xb6
 8010dd4:	3301      	adds	r3, #1
 8010dd6:	b29a      	uxth	r2, r3
 8010dd8:	4b50      	ldr	r3, [pc, #320]	@ (8010f1c <tcp_input+0x28c>)
 8010dda:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
      goto dropped;
 8010dde:	e39b      	b.n	8011518 <tcp_input+0x888>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	685b      	ldr	r3, [r3, #4]
 8010de6:	4a51      	ldr	r2, [pc, #324]	@ (8010f2c <tcp_input+0x29c>)
 8010de8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	8a3a      	ldrh	r2, [r7, #16]
 8010df0:	4611      	mov	r1, r2
 8010df2:	4618      	mov	r0, r3
 8010df4:	f7fe f850 	bl	800ee98 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	891a      	ldrh	r2, [r3, #8]
 8010dfc:	8a3b      	ldrh	r3, [r7, #16]
 8010dfe:	1ad3      	subs	r3, r2, r3
 8010e00:	b29a      	uxth	r2, r3
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	895b      	ldrh	r3, [r3, #10]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d005      	beq.n	8010e1a <tcp_input+0x18a>
 8010e0e:	4b40      	ldr	r3, [pc, #256]	@ (8010f10 <tcp_input+0x280>)
 8010e10:	22df      	movs	r2, #223	@ 0xdf
 8010e12:	4949      	ldr	r1, [pc, #292]	@ (8010f38 <tcp_input+0x2a8>)
 8010e14:	4840      	ldr	r0, [pc, #256]	@ (8010f18 <tcp_input+0x288>)
 8010e16:	f008 fc25 	bl	8019664 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	891a      	ldrh	r2, [r3, #8]
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	891b      	ldrh	r3, [r3, #8]
 8010e24:	429a      	cmp	r2, r3
 8010e26:	d005      	beq.n	8010e34 <tcp_input+0x1a4>
 8010e28:	4b39      	ldr	r3, [pc, #228]	@ (8010f10 <tcp_input+0x280>)
 8010e2a:	22e0      	movs	r2, #224	@ 0xe0
 8010e2c:	4943      	ldr	r1, [pc, #268]	@ (8010f3c <tcp_input+0x2ac>)
 8010e2e:	483a      	ldr	r0, [pc, #232]	@ (8010f18 <tcp_input+0x288>)
 8010e30:	f008 fc18 	bl	8019664 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010e34:	4b3a      	ldr	r3, [pc, #232]	@ (8010f20 <tcp_input+0x290>)
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	881b      	ldrh	r3, [r3, #0]
 8010e3a:	b29b      	uxth	r3, r3
 8010e3c:	4a38      	ldr	r2, [pc, #224]	@ (8010f20 <tcp_input+0x290>)
 8010e3e:	6814      	ldr	r4, [r2, #0]
 8010e40:	4618      	mov	r0, r3
 8010e42:	f7fc fa13 	bl	800d26c <lwip_htons>
 8010e46:	4603      	mov	r3, r0
 8010e48:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010e4a:	4b35      	ldr	r3, [pc, #212]	@ (8010f20 <tcp_input+0x290>)
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	885b      	ldrh	r3, [r3, #2]
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	4a33      	ldr	r2, [pc, #204]	@ (8010f20 <tcp_input+0x290>)
 8010e54:	6814      	ldr	r4, [r2, #0]
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7fc fa08 	bl	800d26c <lwip_htons>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010e60:	4b2f      	ldr	r3, [pc, #188]	@ (8010f20 <tcp_input+0x290>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	685b      	ldr	r3, [r3, #4]
 8010e66:	4a2e      	ldr	r2, [pc, #184]	@ (8010f20 <tcp_input+0x290>)
 8010e68:	6814      	ldr	r4, [r2, #0]
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f7fc fa14 	bl	800d298 <lwip_htonl>
 8010e70:	4603      	mov	r3, r0
 8010e72:	6063      	str	r3, [r4, #4]
 8010e74:	6863      	ldr	r3, [r4, #4]
 8010e76:	4a32      	ldr	r2, [pc, #200]	@ (8010f40 <tcp_input+0x2b0>)
 8010e78:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010e7a:	4b29      	ldr	r3, [pc, #164]	@ (8010f20 <tcp_input+0x290>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	689b      	ldr	r3, [r3, #8]
 8010e80:	4a27      	ldr	r2, [pc, #156]	@ (8010f20 <tcp_input+0x290>)
 8010e82:	6814      	ldr	r4, [r2, #0]
 8010e84:	4618      	mov	r0, r3
 8010e86:	f7fc fa07 	bl	800d298 <lwip_htonl>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	60a3      	str	r3, [r4, #8]
 8010e8e:	68a3      	ldr	r3, [r4, #8]
 8010e90:	4a2c      	ldr	r2, [pc, #176]	@ (8010f44 <tcp_input+0x2b4>)
 8010e92:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010e94:	4b22      	ldr	r3, [pc, #136]	@ (8010f20 <tcp_input+0x290>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	89db      	ldrh	r3, [r3, #14]
 8010e9a:	b29b      	uxth	r3, r3
 8010e9c:	4a20      	ldr	r2, [pc, #128]	@ (8010f20 <tcp_input+0x290>)
 8010e9e:	6814      	ldr	r4, [r2, #0]
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7fc f9e3 	bl	800d26c <lwip_htons>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8010f20 <tcp_input+0x290>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	899b      	ldrh	r3, [r3, #12]
 8010eb0:	b29b      	uxth	r3, r3
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7fc f9da 	bl	800d26c <lwip_htons>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	b2db      	uxtb	r3, r3
 8010ebc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010ec0:	b2da      	uxtb	r2, r3
 8010ec2:	4b21      	ldr	r3, [pc, #132]	@ (8010f48 <tcp_input+0x2b8>)
 8010ec4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	891a      	ldrh	r2, [r3, #8]
 8010eca:	4b20      	ldr	r3, [pc, #128]	@ (8010f4c <tcp_input+0x2bc>)
 8010ecc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010ece:	4b1e      	ldr	r3, [pc, #120]	@ (8010f48 <tcp_input+0x2b8>)
 8010ed0:	781b      	ldrb	r3, [r3, #0]
 8010ed2:	f003 0303 	and.w	r3, r3, #3
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d014      	beq.n	8010f04 <tcp_input+0x274>
    tcplen++;
 8010eda:	4b1c      	ldr	r3, [pc, #112]	@ (8010f4c <tcp_input+0x2bc>)
 8010edc:	881b      	ldrh	r3, [r3, #0]
 8010ede:	3301      	adds	r3, #1
 8010ee0:	b29a      	uxth	r2, r3
 8010ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8010f4c <tcp_input+0x2bc>)
 8010ee4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	891a      	ldrh	r2, [r3, #8]
 8010eea:	4b18      	ldr	r3, [pc, #96]	@ (8010f4c <tcp_input+0x2bc>)
 8010eec:	881b      	ldrh	r3, [r3, #0]
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d908      	bls.n	8010f04 <tcp_input+0x274>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 8010ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8010f1c <tcp_input+0x28c>)
 8010ef4:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	@ 0xb6
 8010ef8:	3301      	adds	r3, #1
 8010efa:	b29a      	uxth	r2, r3
 8010efc:	4b07      	ldr	r3, [pc, #28]	@ (8010f1c <tcp_input+0x28c>)
 8010efe:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
      goto dropped;
 8010f02:	e309      	b.n	8011518 <tcp_input+0x888>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010f04:	2300      	movs	r3, #0
 8010f06:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f08:	4b11      	ldr	r3, [pc, #68]	@ (8010f50 <tcp_input+0x2c0>)
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	61bb      	str	r3, [r7, #24]
 8010f0e:	e0a1      	b.n	8011054 <tcp_input+0x3c4>
 8010f10:	0801ca34 	.word	0x0801ca34
 8010f14:	0801ca68 	.word	0x0801ca68
 8010f18:	0801ca80 	.word	0x0801ca80
 8010f1c:	2000ea4c 	.word	0x2000ea4c
 8010f20:	2000eb98 	.word	0x2000eb98
 8010f24:	20008f60 	.word	0x20008f60
 8010f28:	2000eb9c 	.word	0x2000eb9c
 8010f2c:	2000eba0 	.word	0x2000eba0
 8010f30:	2000eb9e 	.word	0x2000eb9e
 8010f34:	0801caa8 	.word	0x0801caa8
 8010f38:	0801cab8 	.word	0x0801cab8
 8010f3c:	0801cac4 	.word	0x0801cac4
 8010f40:	2000eba8 	.word	0x2000eba8
 8010f44:	2000ebac 	.word	0x2000ebac
 8010f48:	2000ebb4 	.word	0x2000ebb4
 8010f4c:	2000ebb2 	.word	0x2000ebb2
 8010f50:	2000eb78 	.word	0x2000eb78
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010f54:	69bb      	ldr	r3, [r7, #24]
 8010f56:	7d1b      	ldrb	r3, [r3, #20]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d105      	bne.n	8010f68 <tcp_input+0x2d8>
 8010f5c:	4b8a      	ldr	r3, [pc, #552]	@ (8011188 <tcp_input+0x4f8>)
 8010f5e:	22fb      	movs	r2, #251	@ 0xfb
 8010f60:	498a      	ldr	r1, [pc, #552]	@ (801118c <tcp_input+0x4fc>)
 8010f62:	488b      	ldr	r0, [pc, #556]	@ (8011190 <tcp_input+0x500>)
 8010f64:	f008 fb7e 	bl	8019664 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010f68:	69bb      	ldr	r3, [r7, #24]
 8010f6a:	7d1b      	ldrb	r3, [r3, #20]
 8010f6c:	2b0a      	cmp	r3, #10
 8010f6e:	d105      	bne.n	8010f7c <tcp_input+0x2ec>
 8010f70:	4b85      	ldr	r3, [pc, #532]	@ (8011188 <tcp_input+0x4f8>)
 8010f72:	22fc      	movs	r2, #252	@ 0xfc
 8010f74:	4987      	ldr	r1, [pc, #540]	@ (8011194 <tcp_input+0x504>)
 8010f76:	4886      	ldr	r0, [pc, #536]	@ (8011190 <tcp_input+0x500>)
 8010f78:	f008 fb74 	bl	8019664 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010f7c:	69bb      	ldr	r3, [r7, #24]
 8010f7e:	7d1b      	ldrb	r3, [r3, #20]
 8010f80:	2b01      	cmp	r3, #1
 8010f82:	d105      	bne.n	8010f90 <tcp_input+0x300>
 8010f84:	4b80      	ldr	r3, [pc, #512]	@ (8011188 <tcp_input+0x4f8>)
 8010f86:	22fd      	movs	r2, #253	@ 0xfd
 8010f88:	4983      	ldr	r1, [pc, #524]	@ (8011198 <tcp_input+0x508>)
 8010f8a:	4881      	ldr	r0, [pc, #516]	@ (8011190 <tcp_input+0x500>)
 8010f8c:	f008 fb6a 	bl	8019664 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010f90:	69bb      	ldr	r3, [r7, #24]
 8010f92:	7a1b      	ldrb	r3, [r3, #8]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d00c      	beq.n	8010fb2 <tcp_input+0x322>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010f98:	69bb      	ldr	r3, [r7, #24]
 8010f9a:	7a1a      	ldrb	r2, [r3, #8]
 8010f9c:	4b7f      	ldr	r3, [pc, #508]	@ (801119c <tcp_input+0x50c>)
 8010f9e:	685b      	ldr	r3, [r3, #4]
 8010fa0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010fa4:	3301      	adds	r3, #1
 8010fa6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d002      	beq.n	8010fb2 <tcp_input+0x322>
      prev = pcb;
 8010fac:	69bb      	ldr	r3, [r7, #24]
 8010fae:	61fb      	str	r3, [r7, #28]
      continue;
 8010fb0:	e04d      	b.n	801104e <tcp_input+0x3be>
    }

    if (pcb->remote_port == tcphdr->src &&
 8010fb2:	69bb      	ldr	r3, [r7, #24]
 8010fb4:	8b1a      	ldrh	r2, [r3, #24]
 8010fb6:	4b7a      	ldr	r3, [pc, #488]	@ (80111a0 <tcp_input+0x510>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	881b      	ldrh	r3, [r3, #0]
 8010fbc:	b29b      	uxth	r3, r3
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d143      	bne.n	801104a <tcp_input+0x3ba>
        pcb->local_port == tcphdr->dest &&
 8010fc2:	69bb      	ldr	r3, [r7, #24]
 8010fc4:	8ada      	ldrh	r2, [r3, #22]
 8010fc6:	4b76      	ldr	r3, [pc, #472]	@ (80111a0 <tcp_input+0x510>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	885b      	ldrh	r3, [r3, #2]
 8010fcc:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d13b      	bne.n	801104a <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010fd2:	69bb      	ldr	r3, [r7, #24]
 8010fd4:	685a      	ldr	r2, [r3, #4]
 8010fd6:	4b71      	ldr	r3, [pc, #452]	@ (801119c <tcp_input+0x50c>)
 8010fd8:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	d135      	bne.n	801104a <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010fde:	69bb      	ldr	r3, [r7, #24]
 8010fe0:	681a      	ldr	r2, [r3, #0]
 8010fe2:	4b6e      	ldr	r3, [pc, #440]	@ (801119c <tcp_input+0x50c>)
 8010fe4:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	d12f      	bne.n	801104a <tcp_input+0x3ba>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010fea:	69bb      	ldr	r3, [r7, #24]
 8010fec:	68db      	ldr	r3, [r3, #12]
 8010fee:	69ba      	ldr	r2, [r7, #24]
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d106      	bne.n	8011002 <tcp_input+0x372>
 8010ff4:	4b64      	ldr	r3, [pc, #400]	@ (8011188 <tcp_input+0x4f8>)
 8010ff6:	f240 120d 	movw	r2, #269	@ 0x10d
 8010ffa:	496a      	ldr	r1, [pc, #424]	@ (80111a4 <tcp_input+0x514>)
 8010ffc:	4864      	ldr	r0, [pc, #400]	@ (8011190 <tcp_input+0x500>)
 8010ffe:	f008 fb31 	bl	8019664 <iprintf>
      if (prev != NULL) {
 8011002:	69fb      	ldr	r3, [r7, #28]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d00b      	beq.n	8011020 <tcp_input+0x390>
        prev->next = pcb->next;
 8011008:	69bb      	ldr	r3, [r7, #24]
 801100a:	68da      	ldr	r2, [r3, #12]
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011010:	4b65      	ldr	r3, [pc, #404]	@ (80111a8 <tcp_input+0x518>)
 8011012:	681a      	ldr	r2, [r3, #0]
 8011014:	69bb      	ldr	r3, [r7, #24]
 8011016:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011018:	4a63      	ldr	r2, [pc, #396]	@ (80111a8 <tcp_input+0x518>)
 801101a:	69bb      	ldr	r3, [r7, #24]
 801101c:	6013      	str	r3, [r2, #0]
 801101e:	e007      	b.n	8011030 <tcp_input+0x3a0>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8011020:	4b62      	ldr	r3, [pc, #392]	@ (80111ac <tcp_input+0x51c>)
 8011022:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	@ 0xc2
 8011026:	3301      	adds	r3, #1
 8011028:	b29a      	uxth	r2, r3
 801102a:	4b60      	ldr	r3, [pc, #384]	@ (80111ac <tcp_input+0x51c>)
 801102c:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011030:	69bb      	ldr	r3, [r7, #24]
 8011032:	68db      	ldr	r3, [r3, #12]
 8011034:	69ba      	ldr	r2, [r7, #24]
 8011036:	429a      	cmp	r2, r3
 8011038:	d111      	bne.n	801105e <tcp_input+0x3ce>
 801103a:	4b53      	ldr	r3, [pc, #332]	@ (8011188 <tcp_input+0x4f8>)
 801103c:	f240 1215 	movw	r2, #277	@ 0x115
 8011040:	495b      	ldr	r1, [pc, #364]	@ (80111b0 <tcp_input+0x520>)
 8011042:	4853      	ldr	r0, [pc, #332]	@ (8011190 <tcp_input+0x500>)
 8011044:	f008 fb0e 	bl	8019664 <iprintf>
      break;
 8011048:	e009      	b.n	801105e <tcp_input+0x3ce>
    }
    prev = pcb;
 801104a:	69bb      	ldr	r3, [r7, #24]
 801104c:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801104e:	69bb      	ldr	r3, [r7, #24]
 8011050:	68db      	ldr	r3, [r3, #12]
 8011052:	61bb      	str	r3, [r7, #24]
 8011054:	69bb      	ldr	r3, [r7, #24]
 8011056:	2b00      	cmp	r3, #0
 8011058:	f47f af7c 	bne.w	8010f54 <tcp_input+0x2c4>
 801105c:	e000      	b.n	8011060 <tcp_input+0x3d0>
      break;
 801105e:	bf00      	nop
  }

  if (pcb == NULL) {
 8011060:	69bb      	ldr	r3, [r7, #24]
 8011062:	2b00      	cmp	r3, #0
 8011064:	f040 80bb 	bne.w	80111de <tcp_input+0x54e>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011068:	4b52      	ldr	r3, [pc, #328]	@ (80111b4 <tcp_input+0x524>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	61bb      	str	r3, [r7, #24]
 801106e:	e03f      	b.n	80110f0 <tcp_input+0x460>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011070:	69bb      	ldr	r3, [r7, #24]
 8011072:	7d1b      	ldrb	r3, [r3, #20]
 8011074:	2b0a      	cmp	r3, #10
 8011076:	d006      	beq.n	8011086 <tcp_input+0x3f6>
 8011078:	4b43      	ldr	r3, [pc, #268]	@ (8011188 <tcp_input+0x4f8>)
 801107a:	f240 121f 	movw	r2, #287	@ 0x11f
 801107e:	494e      	ldr	r1, [pc, #312]	@ (80111b8 <tcp_input+0x528>)
 8011080:	4843      	ldr	r0, [pc, #268]	@ (8011190 <tcp_input+0x500>)
 8011082:	f008 faef 	bl	8019664 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011086:	69bb      	ldr	r3, [r7, #24]
 8011088:	7a1b      	ldrb	r3, [r3, #8]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d009      	beq.n	80110a2 <tcp_input+0x412>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801108e:	69bb      	ldr	r3, [r7, #24]
 8011090:	7a1a      	ldrb	r2, [r3, #8]
 8011092:	4b42      	ldr	r3, [pc, #264]	@ (801119c <tcp_input+0x50c>)
 8011094:	685b      	ldr	r3, [r3, #4]
 8011096:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801109a:	3301      	adds	r3, #1
 801109c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801109e:	429a      	cmp	r2, r3
 80110a0:	d122      	bne.n	80110e8 <tcp_input+0x458>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80110a2:	69bb      	ldr	r3, [r7, #24]
 80110a4:	8b1a      	ldrh	r2, [r3, #24]
 80110a6:	4b3e      	ldr	r3, [pc, #248]	@ (80111a0 <tcp_input+0x510>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	881b      	ldrh	r3, [r3, #0]
 80110ac:	b29b      	uxth	r3, r3
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d11b      	bne.n	80110ea <tcp_input+0x45a>
          pcb->local_port == tcphdr->dest &&
 80110b2:	69bb      	ldr	r3, [r7, #24]
 80110b4:	8ada      	ldrh	r2, [r3, #22]
 80110b6:	4b3a      	ldr	r3, [pc, #232]	@ (80111a0 <tcp_input+0x510>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	885b      	ldrh	r3, [r3, #2]
 80110bc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80110be:	429a      	cmp	r2, r3
 80110c0:	d113      	bne.n	80110ea <tcp_input+0x45a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80110c2:	69bb      	ldr	r3, [r7, #24]
 80110c4:	685a      	ldr	r2, [r3, #4]
 80110c6:	4b35      	ldr	r3, [pc, #212]	@ (801119c <tcp_input+0x50c>)
 80110c8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80110ca:	429a      	cmp	r2, r3
 80110cc:	d10d      	bne.n	80110ea <tcp_input+0x45a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80110ce:	69bb      	ldr	r3, [r7, #24]
 80110d0:	681a      	ldr	r2, [r3, #0]
 80110d2:	4b32      	ldr	r3, [pc, #200]	@ (801119c <tcp_input+0x50c>)
 80110d4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d107      	bne.n	80110ea <tcp_input+0x45a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80110da:	69b8      	ldr	r0, [r7, #24]
 80110dc:	f000 fb88 	bl	80117f0 <tcp_timewait_input>
        }
        pbuf_free(p);
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f7fd ff5f 	bl	800efa4 <pbuf_free>
        return;
 80110e6:	e224      	b.n	8011532 <tcp_input+0x8a2>
        continue;
 80110e8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80110ea:	69bb      	ldr	r3, [r7, #24]
 80110ec:	68db      	ldr	r3, [r3, #12]
 80110ee:	61bb      	str	r3, [r7, #24]
 80110f0:	69bb      	ldr	r3, [r7, #24]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d1bc      	bne.n	8011070 <tcp_input+0x3e0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80110f6:	2300      	movs	r3, #0
 80110f8:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80110fa:	4b30      	ldr	r3, [pc, #192]	@ (80111bc <tcp_input+0x52c>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	617b      	str	r3, [r7, #20]
 8011100:	e02a      	b.n	8011158 <tcp_input+0x4c8>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011102:	697b      	ldr	r3, [r7, #20]
 8011104:	7a1b      	ldrb	r3, [r3, #8]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d00c      	beq.n	8011124 <tcp_input+0x494>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	7a1a      	ldrb	r2, [r3, #8]
 801110e:	4b23      	ldr	r3, [pc, #140]	@ (801119c <tcp_input+0x50c>)
 8011110:	685b      	ldr	r3, [r3, #4]
 8011112:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011116:	3301      	adds	r3, #1
 8011118:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801111a:	429a      	cmp	r2, r3
 801111c:	d002      	beq.n	8011124 <tcp_input+0x494>
        prev = (struct tcp_pcb *)lpcb;
 801111e:	697b      	ldr	r3, [r7, #20]
 8011120:	61fb      	str	r3, [r7, #28]
        continue;
 8011122:	e016      	b.n	8011152 <tcp_input+0x4c2>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011124:	697b      	ldr	r3, [r7, #20]
 8011126:	8ada      	ldrh	r2, [r3, #22]
 8011128:	4b1d      	ldr	r3, [pc, #116]	@ (80111a0 <tcp_input+0x510>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	885b      	ldrh	r3, [r3, #2]
 801112e:	b29b      	uxth	r3, r3
 8011130:	429a      	cmp	r2, r3
 8011132:	d10c      	bne.n	801114e <tcp_input+0x4be>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	681a      	ldr	r2, [r3, #0]
 8011138:	4b18      	ldr	r3, [pc, #96]	@ (801119c <tcp_input+0x50c>)
 801113a:	695b      	ldr	r3, [r3, #20]
 801113c:	429a      	cmp	r2, r3
 801113e:	d00f      	beq.n	8011160 <tcp_input+0x4d0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011140:	697b      	ldr	r3, [r7, #20]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d00d      	beq.n	8011162 <tcp_input+0x4d2>
 8011146:	697b      	ldr	r3, [r7, #20]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d009      	beq.n	8011162 <tcp_input+0x4d2>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801114e:	697b      	ldr	r3, [r7, #20]
 8011150:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	68db      	ldr	r3, [r3, #12]
 8011156:	617b      	str	r3, [r7, #20]
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d1d1      	bne.n	8011102 <tcp_input+0x472>
 801115e:	e000      	b.n	8011162 <tcp_input+0x4d2>
            break;
 8011160:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d03a      	beq.n	80111de <tcp_input+0x54e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011168:	69fb      	ldr	r3, [r7, #28]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d028      	beq.n	80111c0 <tcp_input+0x530>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	68da      	ldr	r2, [r3, #12]
 8011172:	69fb      	ldr	r3, [r7, #28]
 8011174:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011176:	4b11      	ldr	r3, [pc, #68]	@ (80111bc <tcp_input+0x52c>)
 8011178:	681a      	ldr	r2, [r3, #0]
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801117e:	4a0f      	ldr	r2, [pc, #60]	@ (80111bc <tcp_input+0x52c>)
 8011180:	697b      	ldr	r3, [r7, #20]
 8011182:	6013      	str	r3, [r2, #0]
 8011184:	e024      	b.n	80111d0 <tcp_input+0x540>
 8011186:	bf00      	nop
 8011188:	0801ca34 	.word	0x0801ca34
 801118c:	0801cae4 	.word	0x0801cae4
 8011190:	0801ca80 	.word	0x0801ca80
 8011194:	0801cb0c 	.word	0x0801cb0c
 8011198:	0801cb38 	.word	0x0801cb38
 801119c:	20008f60 	.word	0x20008f60
 80111a0:	2000eb98 	.word	0x2000eb98
 80111a4:	0801cb60 	.word	0x0801cb60
 80111a8:	2000eb78 	.word	0x2000eb78
 80111ac:	2000ea4c 	.word	0x2000ea4c
 80111b0:	0801cb8c 	.word	0x0801cb8c
 80111b4:	2000eb7c 	.word	0x2000eb7c
 80111b8:	0801cbb8 	.word	0x0801cbb8
 80111bc:	2000eb74 	.word	0x2000eb74
      } else {
        TCP_STATS_INC(tcp.cachehit);
 80111c0:	4ba0      	ldr	r3, [pc, #640]	@ (8011444 <tcp_input+0x7b4>)
 80111c2:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	@ 0xc2
 80111c6:	3301      	adds	r3, #1
 80111c8:	b29a      	uxth	r2, r3
 80111ca:	4b9e      	ldr	r3, [pc, #632]	@ (8011444 <tcp_input+0x7b4>)
 80111cc:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80111d0:	6978      	ldr	r0, [r7, #20]
 80111d2:	f000 fa05 	bl	80115e0 <tcp_listen_input>
      }
      pbuf_free(p);
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	f7fd fee4 	bl	800efa4 <pbuf_free>
      return;
 80111dc:	e1a9      	b.n	8011532 <tcp_input+0x8a2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80111de:	69bb      	ldr	r3, [r7, #24]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	f000 815f 	beq.w	80114a4 <tcp_input+0x814>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80111e6:	4b98      	ldr	r3, [pc, #608]	@ (8011448 <tcp_input+0x7b8>)
 80111e8:	2200      	movs	r2, #0
 80111ea:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	891a      	ldrh	r2, [r3, #8]
 80111f0:	4b95      	ldr	r3, [pc, #596]	@ (8011448 <tcp_input+0x7b8>)
 80111f2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80111f4:	4a94      	ldr	r2, [pc, #592]	@ (8011448 <tcp_input+0x7b8>)
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80111fa:	4b94      	ldr	r3, [pc, #592]	@ (801144c <tcp_input+0x7bc>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	4a92      	ldr	r2, [pc, #584]	@ (8011448 <tcp_input+0x7b8>)
 8011200:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8011202:	4b93      	ldr	r3, [pc, #588]	@ (8011450 <tcp_input+0x7c0>)
 8011204:	2200      	movs	r2, #0
 8011206:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011208:	4b92      	ldr	r3, [pc, #584]	@ (8011454 <tcp_input+0x7c4>)
 801120a:	2200      	movs	r2, #0
 801120c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801120e:	4b92      	ldr	r3, [pc, #584]	@ (8011458 <tcp_input+0x7c8>)
 8011210:	2200      	movs	r2, #0
 8011212:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011214:	4b91      	ldr	r3, [pc, #580]	@ (801145c <tcp_input+0x7cc>)
 8011216:	781b      	ldrb	r3, [r3, #0]
 8011218:	f003 0308 	and.w	r3, r3, #8
 801121c:	2b00      	cmp	r3, #0
 801121e:	d006      	beq.n	801122e <tcp_input+0x59e>
      p->flags |= PBUF_FLAG_PUSH;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	7b5b      	ldrb	r3, [r3, #13]
 8011224:	f043 0301 	orr.w	r3, r3, #1
 8011228:	b2da      	uxtb	r2, r3
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801122e:	69bb      	ldr	r3, [r7, #24]
 8011230:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011232:	2b00      	cmp	r3, #0
 8011234:	d01e      	beq.n	8011274 <tcp_input+0x5e4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011236:	69b8      	ldr	r0, [r7, #24]
 8011238:	f7ff f8b4 	bl	80103a4 <tcp_process_refused_data>
 801123c:	4603      	mov	r3, r0
 801123e:	f113 0f0d 	cmn.w	r3, #13
 8011242:	d007      	beq.n	8011254 <tcp_input+0x5c4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011244:	69bb      	ldr	r3, [r7, #24]
 8011246:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011248:	2b00      	cmp	r3, #0
 801124a:	d013      	beq.n	8011274 <tcp_input+0x5e4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801124c:	4b84      	ldr	r3, [pc, #528]	@ (8011460 <tcp_input+0x7d0>)
 801124e:	881b      	ldrh	r3, [r3, #0]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d00f      	beq.n	8011274 <tcp_input+0x5e4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011254:	69bb      	ldr	r3, [r7, #24]
 8011256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011258:	2b00      	cmp	r3, #0
 801125a:	d102      	bne.n	8011262 <tcp_input+0x5d2>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801125c:	69b8      	ldr	r0, [r7, #24]
 801125e:	f003 fa17 	bl	8014690 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8011262:	4b78      	ldr	r3, [pc, #480]	@ (8011444 <tcp_input+0x7b4>)
 8011264:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8011268:	3301      	adds	r3, #1
 801126a:	b29a      	uxth	r2, r3
 801126c:	4b75      	ldr	r3, [pc, #468]	@ (8011444 <tcp_input+0x7b4>)
 801126e:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011272:	e104      	b.n	801147e <tcp_input+0x7ee>
      }
    }
    tcp_input_pcb = pcb;
 8011274:	4a7b      	ldr	r2, [pc, #492]	@ (8011464 <tcp_input+0x7d4>)
 8011276:	69bb      	ldr	r3, [r7, #24]
 8011278:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801127a:	69b8      	ldr	r0, [r7, #24]
 801127c:	f000 fb32 	bl	80118e4 <tcp_process>
 8011280:	4603      	mov	r3, r0
 8011282:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011284:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011288:	f113 0f0d 	cmn.w	r3, #13
 801128c:	f000 80d1 	beq.w	8011432 <tcp_input+0x7a2>
      if (recv_flags & TF_RESET) {
 8011290:	4b70      	ldr	r3, [pc, #448]	@ (8011454 <tcp_input+0x7c4>)
 8011292:	781b      	ldrb	r3, [r3, #0]
 8011294:	f003 0308 	and.w	r3, r3, #8
 8011298:	2b00      	cmp	r3, #0
 801129a:	d015      	beq.n	80112c8 <tcp_input+0x638>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801129c:	69bb      	ldr	r3, [r7, #24]
 801129e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d008      	beq.n	80112b8 <tcp_input+0x628>
 80112a6:	69bb      	ldr	r3, [r7, #24]
 80112a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80112ac:	69ba      	ldr	r2, [r7, #24]
 80112ae:	6912      	ldr	r2, [r2, #16]
 80112b0:	f06f 010d 	mvn.w	r1, #13
 80112b4:	4610      	mov	r0, r2
 80112b6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80112b8:	69b9      	ldr	r1, [r7, #24]
 80112ba:	486b      	ldr	r0, [pc, #428]	@ (8011468 <tcp_input+0x7d8>)
 80112bc:	f7ff fb6a 	bl	8010994 <tcp_pcb_remove>
        tcp_free(pcb);
 80112c0:	69b8      	ldr	r0, [r7, #24]
 80112c2:	f7fe f92b 	bl	800f51c <tcp_free>
 80112c6:	e0da      	b.n	801147e <tcp_input+0x7ee>
      } else {
        err = ERR_OK;
 80112c8:	2300      	movs	r3, #0
 80112ca:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80112cc:	4b62      	ldr	r3, [pc, #392]	@ (8011458 <tcp_input+0x7c8>)
 80112ce:	881b      	ldrh	r3, [r3, #0]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d01d      	beq.n	8011310 <tcp_input+0x680>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80112d4:	4b60      	ldr	r3, [pc, #384]	@ (8011458 <tcp_input+0x7c8>)
 80112d6:	881b      	ldrh	r3, [r3, #0]
 80112d8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80112da:	69bb      	ldr	r3, [r7, #24]
 80112dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d00a      	beq.n	80112fa <tcp_input+0x66a>
 80112e4:	69bb      	ldr	r3, [r7, #24]
 80112e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80112ea:	69ba      	ldr	r2, [r7, #24]
 80112ec:	6910      	ldr	r0, [r2, #16]
 80112ee:	89fa      	ldrh	r2, [r7, #14]
 80112f0:	69b9      	ldr	r1, [r7, #24]
 80112f2:	4798      	blx	r3
 80112f4:	4603      	mov	r3, r0
 80112f6:	74fb      	strb	r3, [r7, #19]
 80112f8:	e001      	b.n	80112fe <tcp_input+0x66e>
 80112fa:	2300      	movs	r3, #0
 80112fc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80112fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011302:	f113 0f0d 	cmn.w	r3, #13
 8011306:	f000 8096 	beq.w	8011436 <tcp_input+0x7a6>
              goto aborted;
            }
          }
          recv_acked = 0;
 801130a:	4b53      	ldr	r3, [pc, #332]	@ (8011458 <tcp_input+0x7c8>)
 801130c:	2200      	movs	r2, #0
 801130e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011310:	69b8      	ldr	r0, [r7, #24]
 8011312:	f000 f925 	bl	8011560 <tcp_input_delayed_close>
 8011316:	4603      	mov	r3, r0
 8011318:	2b00      	cmp	r3, #0
 801131a:	f040 808e 	bne.w	801143a <tcp_input+0x7aa>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801131e:	4b4c      	ldr	r3, [pc, #304]	@ (8011450 <tcp_input+0x7c0>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d041      	beq.n	80113aa <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011326:	69bb      	ldr	r3, [r7, #24]
 8011328:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801132a:	2b00      	cmp	r3, #0
 801132c:	d006      	beq.n	801133c <tcp_input+0x6ac>
 801132e:	4b4f      	ldr	r3, [pc, #316]	@ (801146c <tcp_input+0x7dc>)
 8011330:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011334:	494e      	ldr	r1, [pc, #312]	@ (8011470 <tcp_input+0x7e0>)
 8011336:	484f      	ldr	r0, [pc, #316]	@ (8011474 <tcp_input+0x7e4>)
 8011338:	f008 f994 	bl	8019664 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801133c:	69bb      	ldr	r3, [r7, #24]
 801133e:	8b5b      	ldrh	r3, [r3, #26]
 8011340:	f003 0310 	and.w	r3, r3, #16
 8011344:	2b00      	cmp	r3, #0
 8011346:	d008      	beq.n	801135a <tcp_input+0x6ca>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011348:	4b41      	ldr	r3, [pc, #260]	@ (8011450 <tcp_input+0x7c0>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	4618      	mov	r0, r3
 801134e:	f7fd fe29 	bl	800efa4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011352:	69b8      	ldr	r0, [r7, #24]
 8011354:	f7fe fbca 	bl	800faec <tcp_abort>
            goto aborted;
 8011358:	e091      	b.n	801147e <tcp_input+0x7ee>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801135a:	69bb      	ldr	r3, [r7, #24]
 801135c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011360:	2b00      	cmp	r3, #0
 8011362:	d00c      	beq.n	801137e <tcp_input+0x6ee>
 8011364:	69bb      	ldr	r3, [r7, #24]
 8011366:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801136a:	69bb      	ldr	r3, [r7, #24]
 801136c:	6918      	ldr	r0, [r3, #16]
 801136e:	4b38      	ldr	r3, [pc, #224]	@ (8011450 <tcp_input+0x7c0>)
 8011370:	681a      	ldr	r2, [r3, #0]
 8011372:	2300      	movs	r3, #0
 8011374:	69b9      	ldr	r1, [r7, #24]
 8011376:	47a0      	blx	r4
 8011378:	4603      	mov	r3, r0
 801137a:	74fb      	strb	r3, [r7, #19]
 801137c:	e008      	b.n	8011390 <tcp_input+0x700>
 801137e:	4b34      	ldr	r3, [pc, #208]	@ (8011450 <tcp_input+0x7c0>)
 8011380:	681a      	ldr	r2, [r3, #0]
 8011382:	2300      	movs	r3, #0
 8011384:	69b9      	ldr	r1, [r7, #24]
 8011386:	2000      	movs	r0, #0
 8011388:	f7ff f8e2 	bl	8010550 <tcp_recv_null>
 801138c:	4603      	mov	r3, r0
 801138e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011390:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011394:	f113 0f0d 	cmn.w	r3, #13
 8011398:	d051      	beq.n	801143e <tcp_input+0x7ae>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801139a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d003      	beq.n	80113aa <tcp_input+0x71a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80113a2:	4b2b      	ldr	r3, [pc, #172]	@ (8011450 <tcp_input+0x7c0>)
 80113a4:	681a      	ldr	r2, [r3, #0]
 80113a6:	69bb      	ldr	r3, [r7, #24]
 80113a8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80113aa:	4b2a      	ldr	r3, [pc, #168]	@ (8011454 <tcp_input+0x7c4>)
 80113ac:	781b      	ldrb	r3, [r3, #0]
 80113ae:	f003 0320 	and.w	r3, r3, #32
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d030      	beq.n	8011418 <tcp_input+0x788>
          if (pcb->refused_data != NULL) {
 80113b6:	69bb      	ldr	r3, [r7, #24]
 80113b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d009      	beq.n	80113d2 <tcp_input+0x742>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80113be:	69bb      	ldr	r3, [r7, #24]
 80113c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80113c2:	7b5a      	ldrb	r2, [r3, #13]
 80113c4:	69bb      	ldr	r3, [r7, #24]
 80113c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80113c8:	f042 0220 	orr.w	r2, r2, #32
 80113cc:	b2d2      	uxtb	r2, r2
 80113ce:	735a      	strb	r2, [r3, #13]
 80113d0:	e022      	b.n	8011418 <tcp_input+0x788>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80113d2:	69bb      	ldr	r3, [r7, #24]
 80113d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80113d6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80113da:	d005      	beq.n	80113e8 <tcp_input+0x758>
              pcb->rcv_wnd++;
 80113dc:	69bb      	ldr	r3, [r7, #24]
 80113de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80113e0:	3301      	adds	r3, #1
 80113e2:	b29a      	uxth	r2, r3
 80113e4:	69bb      	ldr	r3, [r7, #24]
 80113e6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80113e8:	69bb      	ldr	r3, [r7, #24]
 80113ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d00b      	beq.n	801140a <tcp_input+0x77a>
 80113f2:	69bb      	ldr	r3, [r7, #24]
 80113f4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80113f8:	69bb      	ldr	r3, [r7, #24]
 80113fa:	6918      	ldr	r0, [r3, #16]
 80113fc:	2300      	movs	r3, #0
 80113fe:	2200      	movs	r2, #0
 8011400:	69b9      	ldr	r1, [r7, #24]
 8011402:	47a0      	blx	r4
 8011404:	4603      	mov	r3, r0
 8011406:	74fb      	strb	r3, [r7, #19]
 8011408:	e001      	b.n	801140e <tcp_input+0x77e>
 801140a:	2300      	movs	r3, #0
 801140c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801140e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011412:	f113 0f0d 	cmn.w	r3, #13
 8011416:	d02f      	beq.n	8011478 <tcp_input+0x7e8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011418:	4b12      	ldr	r3, [pc, #72]	@ (8011464 <tcp_input+0x7d4>)
 801141a:	2200      	movs	r2, #0
 801141c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801141e:	69b8      	ldr	r0, [r7, #24]
 8011420:	f000 f89e 	bl	8011560 <tcp_input_delayed_close>
 8011424:	4603      	mov	r3, r0
 8011426:	2b00      	cmp	r3, #0
 8011428:	d128      	bne.n	801147c <tcp_input+0x7ec>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801142a:	69b8      	ldr	r0, [r7, #24]
 801142c:	f002 fb0a 	bl	8013a44 <tcp_output>
 8011430:	e025      	b.n	801147e <tcp_input+0x7ee>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011432:	bf00      	nop
 8011434:	e023      	b.n	801147e <tcp_input+0x7ee>
              goto aborted;
 8011436:	bf00      	nop
 8011438:	e021      	b.n	801147e <tcp_input+0x7ee>
          goto aborted;
 801143a:	bf00      	nop
 801143c:	e01f      	b.n	801147e <tcp_input+0x7ee>
            goto aborted;
 801143e:	bf00      	nop
 8011440:	e01d      	b.n	801147e <tcp_input+0x7ee>
 8011442:	bf00      	nop
 8011444:	2000ea4c 	.word	0x2000ea4c
 8011448:	2000eb84 	.word	0x2000eb84
 801144c:	2000eb98 	.word	0x2000eb98
 8011450:	2000ebb8 	.word	0x2000ebb8
 8011454:	2000ebb5 	.word	0x2000ebb5
 8011458:	2000ebb0 	.word	0x2000ebb0
 801145c:	2000ebb4 	.word	0x2000ebb4
 8011460:	2000ebb2 	.word	0x2000ebb2
 8011464:	2000ebbc 	.word	0x2000ebbc
 8011468:	2000eb78 	.word	0x2000eb78
 801146c:	0801ca34 	.word	0x0801ca34
 8011470:	0801cbe8 	.word	0x0801cbe8
 8011474:	0801ca80 	.word	0x0801ca80
              goto aborted;
 8011478:	bf00      	nop
 801147a:	e000      	b.n	801147e <tcp_input+0x7ee>
          goto aborted;
 801147c:	bf00      	nop
    tcp_input_pcb = NULL;
 801147e:	4b2e      	ldr	r3, [pc, #184]	@ (8011538 <tcp_input+0x8a8>)
 8011480:	2200      	movs	r2, #0
 8011482:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011484:	4b2d      	ldr	r3, [pc, #180]	@ (801153c <tcp_input+0x8ac>)
 8011486:	2200      	movs	r2, #0
 8011488:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801148a:	4b2d      	ldr	r3, [pc, #180]	@ (8011540 <tcp_input+0x8b0>)
 801148c:	685b      	ldr	r3, [r3, #4]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d04e      	beq.n	8011530 <tcp_input+0x8a0>
      pbuf_free(inseg.p);
 8011492:	4b2b      	ldr	r3, [pc, #172]	@ (8011540 <tcp_input+0x8b0>)
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	4618      	mov	r0, r3
 8011498:	f7fd fd84 	bl	800efa4 <pbuf_free>
      inseg.p = NULL;
 801149c:	4b28      	ldr	r3, [pc, #160]	@ (8011540 <tcp_input+0x8b0>)
 801149e:	2200      	movs	r2, #0
 80114a0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80114a2:	e045      	b.n	8011530 <tcp_input+0x8a0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80114a4:	4b27      	ldr	r3, [pc, #156]	@ (8011544 <tcp_input+0x8b4>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	899b      	ldrh	r3, [r3, #12]
 80114aa:	b29b      	uxth	r3, r3
 80114ac:	4618      	mov	r0, r3
 80114ae:	f7fb fedd 	bl	800d26c <lwip_htons>
 80114b2:	4603      	mov	r3, r0
 80114b4:	b2db      	uxtb	r3, r3
 80114b6:	f003 0304 	and.w	r3, r3, #4
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d128      	bne.n	8011510 <tcp_input+0x880>
      TCP_STATS_INC(tcp.proterr);
 80114be:	4b22      	ldr	r3, [pc, #136]	@ (8011548 <tcp_input+0x8b8>)
 80114c0:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80114c4:	3301      	adds	r3, #1
 80114c6:	b29a      	uxth	r2, r3
 80114c8:	4b1f      	ldr	r3, [pc, #124]	@ (8011548 <tcp_input+0x8b8>)
 80114ca:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
      TCP_STATS_INC(tcp.drop);
 80114ce:	4b1e      	ldr	r3, [pc, #120]	@ (8011548 <tcp_input+0x8b8>)
 80114d0:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 80114d4:	3301      	adds	r3, #1
 80114d6:	b29a      	uxth	r2, r3
 80114d8:	4b1b      	ldr	r3, [pc, #108]	@ (8011548 <tcp_input+0x8b8>)
 80114da:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114de:	4b1b      	ldr	r3, [pc, #108]	@ (801154c <tcp_input+0x8bc>)
 80114e0:	6819      	ldr	r1, [r3, #0]
 80114e2:	4b1b      	ldr	r3, [pc, #108]	@ (8011550 <tcp_input+0x8c0>)
 80114e4:	881b      	ldrh	r3, [r3, #0]
 80114e6:	461a      	mov	r2, r3
 80114e8:	4b1a      	ldr	r3, [pc, #104]	@ (8011554 <tcp_input+0x8c4>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80114ee:	4b15      	ldr	r3, [pc, #84]	@ (8011544 <tcp_input+0x8b4>)
 80114f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114f2:	885b      	ldrh	r3, [r3, #2]
 80114f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80114f6:	4a13      	ldr	r2, [pc, #76]	@ (8011544 <tcp_input+0x8b4>)
 80114f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114fa:	8812      	ldrh	r2, [r2, #0]
 80114fc:	b292      	uxth	r2, r2
 80114fe:	9202      	str	r2, [sp, #8]
 8011500:	9301      	str	r3, [sp, #4]
 8011502:	4b15      	ldr	r3, [pc, #84]	@ (8011558 <tcp_input+0x8c8>)
 8011504:	9300      	str	r3, [sp, #0]
 8011506:	4b15      	ldr	r3, [pc, #84]	@ (801155c <tcp_input+0x8cc>)
 8011508:	4602      	mov	r2, r0
 801150a:	2000      	movs	r0, #0
 801150c:	f003 f86e 	bl	80145ec <tcp_rst>
    pbuf_free(p);
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f7fd fd47 	bl	800efa4 <pbuf_free>
  return;
 8011516:	e00b      	b.n	8011530 <tcp_input+0x8a0>
dropped:
  TCP_STATS_INC(tcp.drop);
 8011518:	4b0b      	ldr	r3, [pc, #44]	@ (8011548 <tcp_input+0x8b8>)
 801151a:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 801151e:	3301      	adds	r3, #1
 8011520:	b29a      	uxth	r2, r3
 8011522:	4b09      	ldr	r3, [pc, #36]	@ (8011548 <tcp_input+0x8b8>)
 8011524:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011528:	6878      	ldr	r0, [r7, #4]
 801152a:	f7fd fd3b 	bl	800efa4 <pbuf_free>
 801152e:	e000      	b.n	8011532 <tcp_input+0x8a2>
  return;
 8011530:	bf00      	nop
}
 8011532:	3724      	adds	r7, #36	@ 0x24
 8011534:	46bd      	mov	sp, r7
 8011536:	bd90      	pop	{r4, r7, pc}
 8011538:	2000ebbc 	.word	0x2000ebbc
 801153c:	2000ebb8 	.word	0x2000ebb8
 8011540:	2000eb84 	.word	0x2000eb84
 8011544:	2000eb98 	.word	0x2000eb98
 8011548:	2000ea4c 	.word	0x2000ea4c
 801154c:	2000ebac 	.word	0x2000ebac
 8011550:	2000ebb2 	.word	0x2000ebb2
 8011554:	2000eba8 	.word	0x2000eba8
 8011558:	20008f70 	.word	0x20008f70
 801155c:	20008f74 	.word	0x20008f74

08011560 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b082      	sub	sp, #8
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d106      	bne.n	801157c <tcp_input_delayed_close+0x1c>
 801156e:	4b17      	ldr	r3, [pc, #92]	@ (80115cc <tcp_input_delayed_close+0x6c>)
 8011570:	f240 225a 	movw	r2, #602	@ 0x25a
 8011574:	4916      	ldr	r1, [pc, #88]	@ (80115d0 <tcp_input_delayed_close+0x70>)
 8011576:	4817      	ldr	r0, [pc, #92]	@ (80115d4 <tcp_input_delayed_close+0x74>)
 8011578:	f008 f874 	bl	8019664 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801157c:	4b16      	ldr	r3, [pc, #88]	@ (80115d8 <tcp_input_delayed_close+0x78>)
 801157e:	781b      	ldrb	r3, [r3, #0]
 8011580:	f003 0310 	and.w	r3, r3, #16
 8011584:	2b00      	cmp	r3, #0
 8011586:	d01c      	beq.n	80115c2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	8b5b      	ldrh	r3, [r3, #26]
 801158c:	f003 0310 	and.w	r3, r3, #16
 8011590:	2b00      	cmp	r3, #0
 8011592:	d10d      	bne.n	80115b0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801159a:	2b00      	cmp	r3, #0
 801159c:	d008      	beq.n	80115b0 <tcp_input_delayed_close+0x50>
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80115a4:	687a      	ldr	r2, [r7, #4]
 80115a6:	6912      	ldr	r2, [r2, #16]
 80115a8:	f06f 010e 	mvn.w	r1, #14
 80115ac:	4610      	mov	r0, r2
 80115ae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80115b0:	6879      	ldr	r1, [r7, #4]
 80115b2:	480a      	ldr	r0, [pc, #40]	@ (80115dc <tcp_input_delayed_close+0x7c>)
 80115b4:	f7ff f9ee 	bl	8010994 <tcp_pcb_remove>
    tcp_free(pcb);
 80115b8:	6878      	ldr	r0, [r7, #4]
 80115ba:	f7fd ffaf 	bl	800f51c <tcp_free>
    return 1;
 80115be:	2301      	movs	r3, #1
 80115c0:	e000      	b.n	80115c4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80115c2:	2300      	movs	r3, #0
}
 80115c4:	4618      	mov	r0, r3
 80115c6:	3708      	adds	r7, #8
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}
 80115cc:	0801ca34 	.word	0x0801ca34
 80115d0:	0801cc04 	.word	0x0801cc04
 80115d4:	0801ca80 	.word	0x0801ca80
 80115d8:	2000ebb5 	.word	0x2000ebb5
 80115dc:	2000eb78 	.word	0x2000eb78

080115e0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80115e0:	b590      	push	{r4, r7, lr}
 80115e2:	b08b      	sub	sp, #44	@ 0x2c
 80115e4:	af04      	add	r7, sp, #16
 80115e6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80115e8:	4b73      	ldr	r3, [pc, #460]	@ (80117b8 <tcp_listen_input+0x1d8>)
 80115ea:	781b      	ldrb	r3, [r3, #0]
 80115ec:	f003 0304 	and.w	r3, r3, #4
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	f040 80da 	bne.w	80117aa <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d106      	bne.n	801160a <tcp_listen_input+0x2a>
 80115fc:	4b6f      	ldr	r3, [pc, #444]	@ (80117bc <tcp_listen_input+0x1dc>)
 80115fe:	f240 2281 	movw	r2, #641	@ 0x281
 8011602:	496f      	ldr	r1, [pc, #444]	@ (80117c0 <tcp_listen_input+0x1e0>)
 8011604:	486f      	ldr	r0, [pc, #444]	@ (80117c4 <tcp_listen_input+0x1e4>)
 8011606:	f008 f82d 	bl	8019664 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801160a:	4b6b      	ldr	r3, [pc, #428]	@ (80117b8 <tcp_listen_input+0x1d8>)
 801160c:	781b      	ldrb	r3, [r3, #0]
 801160e:	f003 0310 	and.w	r3, r3, #16
 8011612:	2b00      	cmp	r3, #0
 8011614:	d019      	beq.n	801164a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011616:	4b6c      	ldr	r3, [pc, #432]	@ (80117c8 <tcp_listen_input+0x1e8>)
 8011618:	6819      	ldr	r1, [r3, #0]
 801161a:	4b6c      	ldr	r3, [pc, #432]	@ (80117cc <tcp_listen_input+0x1ec>)
 801161c:	881b      	ldrh	r3, [r3, #0]
 801161e:	461a      	mov	r2, r3
 8011620:	4b6b      	ldr	r3, [pc, #428]	@ (80117d0 <tcp_listen_input+0x1f0>)
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011626:	4b6b      	ldr	r3, [pc, #428]	@ (80117d4 <tcp_listen_input+0x1f4>)
 8011628:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801162a:	885b      	ldrh	r3, [r3, #2]
 801162c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801162e:	4a69      	ldr	r2, [pc, #420]	@ (80117d4 <tcp_listen_input+0x1f4>)
 8011630:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011632:	8812      	ldrh	r2, [r2, #0]
 8011634:	b292      	uxth	r2, r2
 8011636:	9202      	str	r2, [sp, #8]
 8011638:	9301      	str	r3, [sp, #4]
 801163a:	4b67      	ldr	r3, [pc, #412]	@ (80117d8 <tcp_listen_input+0x1f8>)
 801163c:	9300      	str	r3, [sp, #0]
 801163e:	4b67      	ldr	r3, [pc, #412]	@ (80117dc <tcp_listen_input+0x1fc>)
 8011640:	4602      	mov	r2, r0
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f002 ffd2 	bl	80145ec <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011648:	e0b1      	b.n	80117ae <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 801164a:	4b5b      	ldr	r3, [pc, #364]	@ (80117b8 <tcp_listen_input+0x1d8>)
 801164c:	781b      	ldrb	r3, [r3, #0]
 801164e:	f003 0302 	and.w	r3, r3, #2
 8011652:	2b00      	cmp	r3, #0
 8011654:	f000 80ab 	beq.w	80117ae <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	7d5b      	ldrb	r3, [r3, #21]
 801165c:	4618      	mov	r0, r3
 801165e:	f7ff f89b 	bl	8010798 <tcp_alloc>
 8011662:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d119      	bne.n	801169e <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 801166a:	4b5d      	ldr	r3, [pc, #372]	@ (80117e0 <tcp_listen_input+0x200>)
 801166c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8011670:	3301      	adds	r3, #1
 8011672:	b29a      	uxth	r2, r3
 8011674:	4b5a      	ldr	r3, [pc, #360]	@ (80117e0 <tcp_listen_input+0x200>)
 8011676:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	699b      	ldr	r3, [r3, #24]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d00a      	beq.n	8011698 <tcp_listen_input+0xb8>
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	699b      	ldr	r3, [r3, #24]
 8011686:	687a      	ldr	r2, [r7, #4]
 8011688:	6910      	ldr	r0, [r2, #16]
 801168a:	f04f 32ff 	mov.w	r2, #4294967295
 801168e:	2100      	movs	r1, #0
 8011690:	4798      	blx	r3
 8011692:	4603      	mov	r3, r0
 8011694:	73bb      	strb	r3, [r7, #14]
      return;
 8011696:	e08b      	b.n	80117b0 <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011698:	23f0      	movs	r3, #240	@ 0xf0
 801169a:	73bb      	strb	r3, [r7, #14]
      return;
 801169c:	e088      	b.n	80117b0 <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801169e:	4b51      	ldr	r3, [pc, #324]	@ (80117e4 <tcp_listen_input+0x204>)
 80116a0:	695a      	ldr	r2, [r3, #20]
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80116a6:	4b4f      	ldr	r3, [pc, #316]	@ (80117e4 <tcp_listen_input+0x204>)
 80116a8:	691a      	ldr	r2, [r3, #16]
 80116aa:	697b      	ldr	r3, [r7, #20]
 80116ac:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	8ada      	ldrh	r2, [r3, #22]
 80116b2:	697b      	ldr	r3, [r7, #20]
 80116b4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80116b6:	4b47      	ldr	r3, [pc, #284]	@ (80117d4 <tcp_listen_input+0x1f4>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	881b      	ldrh	r3, [r3, #0]
 80116bc:	b29a      	uxth	r2, r3
 80116be:	697b      	ldr	r3, [r7, #20]
 80116c0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	2203      	movs	r2, #3
 80116c6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80116c8:	4b41      	ldr	r3, [pc, #260]	@ (80117d0 <tcp_listen_input+0x1f0>)
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	1c5a      	adds	r2, r3, #1
 80116ce:	697b      	ldr	r3, [r7, #20]
 80116d0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80116d2:	697b      	ldr	r3, [r7, #20]
 80116d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80116da:	6978      	ldr	r0, [r7, #20]
 80116dc:	f7ff f9ee 	bl	8010abc <tcp_next_iss>
 80116e0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80116e2:	697b      	ldr	r3, [r7, #20]
 80116e4:	693a      	ldr	r2, [r7, #16]
 80116e6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	693a      	ldr	r2, [r7, #16]
 80116ec:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80116ee:	697b      	ldr	r3, [r7, #20]
 80116f0:	693a      	ldr	r2, [r7, #16]
 80116f2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	693a      	ldr	r2, [r7, #16]
 80116f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80116fa:	4b35      	ldr	r3, [pc, #212]	@ (80117d0 <tcp_listen_input+0x1f0>)
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	1e5a      	subs	r2, r3, #1
 8011700:	697b      	ldr	r3, [r7, #20]
 8011702:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	691a      	ldr	r2, [r3, #16]
 8011708:	697b      	ldr	r3, [r7, #20]
 801170a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801170c:	697b      	ldr	r3, [r7, #20]
 801170e:	687a      	ldr	r2, [r7, #4]
 8011710:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	7a5b      	ldrb	r3, [r3, #9]
 8011716:	f003 030c 	and.w	r3, r3, #12
 801171a:	b2da      	uxtb	r2, r3
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	7a1a      	ldrb	r2, [r3, #8]
 8011724:	697b      	ldr	r3, [r7, #20]
 8011726:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011728:	4b2f      	ldr	r3, [pc, #188]	@ (80117e8 <tcp_listen_input+0x208>)
 801172a:	681a      	ldr	r2, [r3, #0]
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	60da      	str	r2, [r3, #12]
 8011730:	4a2d      	ldr	r2, [pc, #180]	@ (80117e8 <tcp_listen_input+0x208>)
 8011732:	697b      	ldr	r3, [r7, #20]
 8011734:	6013      	str	r3, [r2, #0]
 8011736:	f003 f91b 	bl	8014970 <tcp_timer_needed>
 801173a:	4b2c      	ldr	r3, [pc, #176]	@ (80117ec <tcp_listen_input+0x20c>)
 801173c:	2201      	movs	r2, #1
 801173e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011740:	6978      	ldr	r0, [r7, #20]
 8011742:	f001 fd8d 	bl	8013260 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011746:	4b23      	ldr	r3, [pc, #140]	@ (80117d4 <tcp_listen_input+0x1f4>)
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	89db      	ldrh	r3, [r3, #14]
 801174c:	b29a      	uxth	r2, r3
 801174e:	697b      	ldr	r3, [r7, #20]
 8011750:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011754:	697b      	ldr	r3, [r7, #20]
 8011756:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801175a:	697b      	ldr	r3, [r7, #20]
 801175c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	3304      	adds	r3, #4
 8011768:	4618      	mov	r0, r3
 801176a:	f005 fb77 	bl	8016e5c <ip4_route>
 801176e:	4601      	mov	r1, r0
 8011770:	697b      	ldr	r3, [r7, #20]
 8011772:	3304      	adds	r3, #4
 8011774:	461a      	mov	r2, r3
 8011776:	4620      	mov	r0, r4
 8011778:	f7ff f9c6 	bl	8010b08 <tcp_eff_send_mss_netif>
 801177c:	4603      	mov	r3, r0
 801177e:	461a      	mov	r2, r3
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011784:	2112      	movs	r1, #18
 8011786:	6978      	ldr	r0, [r7, #20]
 8011788:	f002 f85c 	bl	8013844 <tcp_enqueue_flags>
 801178c:	4603      	mov	r3, r0
 801178e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d004      	beq.n	80117a2 <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 8011798:	2100      	movs	r1, #0
 801179a:	6978      	ldr	r0, [r7, #20]
 801179c:	f7fe f8e8 	bl	800f970 <tcp_abandon>
      return;
 80117a0:	e006      	b.n	80117b0 <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 80117a2:	6978      	ldr	r0, [r7, #20]
 80117a4:	f002 f94e 	bl	8013a44 <tcp_output>
  return;
 80117a8:	e001      	b.n	80117ae <tcp_listen_input+0x1ce>
    return;
 80117aa:	bf00      	nop
 80117ac:	e000      	b.n	80117b0 <tcp_listen_input+0x1d0>
  return;
 80117ae:	bf00      	nop
}
 80117b0:	371c      	adds	r7, #28
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd90      	pop	{r4, r7, pc}
 80117b6:	bf00      	nop
 80117b8:	2000ebb4 	.word	0x2000ebb4
 80117bc:	0801ca34 	.word	0x0801ca34
 80117c0:	0801cc2c 	.word	0x0801cc2c
 80117c4:	0801ca80 	.word	0x0801ca80
 80117c8:	2000ebac 	.word	0x2000ebac
 80117cc:	2000ebb2 	.word	0x2000ebb2
 80117d0:	2000eba8 	.word	0x2000eba8
 80117d4:	2000eb98 	.word	0x2000eb98
 80117d8:	20008f70 	.word	0x20008f70
 80117dc:	20008f74 	.word	0x20008f74
 80117e0:	2000ea4c 	.word	0x2000ea4c
 80117e4:	20008f60 	.word	0x20008f60
 80117e8:	2000eb78 	.word	0x2000eb78
 80117ec:	2000eb80 	.word	0x2000eb80

080117f0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b086      	sub	sp, #24
 80117f4:	af04      	add	r7, sp, #16
 80117f6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80117f8:	4b2f      	ldr	r3, [pc, #188]	@ (80118b8 <tcp_timewait_input+0xc8>)
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	f003 0304 	and.w	r3, r3, #4
 8011800:	2b00      	cmp	r3, #0
 8011802:	d153      	bne.n	80118ac <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d106      	bne.n	8011818 <tcp_timewait_input+0x28>
 801180a:	4b2c      	ldr	r3, [pc, #176]	@ (80118bc <tcp_timewait_input+0xcc>)
 801180c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8011810:	492b      	ldr	r1, [pc, #172]	@ (80118c0 <tcp_timewait_input+0xd0>)
 8011812:	482c      	ldr	r0, [pc, #176]	@ (80118c4 <tcp_timewait_input+0xd4>)
 8011814:	f007 ff26 	bl	8019664 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011818:	4b27      	ldr	r3, [pc, #156]	@ (80118b8 <tcp_timewait_input+0xc8>)
 801181a:	781b      	ldrb	r3, [r3, #0]
 801181c:	f003 0302 	and.w	r3, r3, #2
 8011820:	2b00      	cmp	r3, #0
 8011822:	d02a      	beq.n	801187a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011824:	4b28      	ldr	r3, [pc, #160]	@ (80118c8 <tcp_timewait_input+0xd8>)
 8011826:	681a      	ldr	r2, [r3, #0]
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801182c:	1ad3      	subs	r3, r2, r3
 801182e:	2b00      	cmp	r3, #0
 8011830:	db2d      	blt.n	801188e <tcp_timewait_input+0x9e>
 8011832:	4b25      	ldr	r3, [pc, #148]	@ (80118c8 <tcp_timewait_input+0xd8>)
 8011834:	681a      	ldr	r2, [r3, #0]
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801183a:	6879      	ldr	r1, [r7, #4]
 801183c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801183e:	440b      	add	r3, r1
 8011840:	1ad3      	subs	r3, r2, r3
 8011842:	2b00      	cmp	r3, #0
 8011844:	dc23      	bgt.n	801188e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011846:	4b21      	ldr	r3, [pc, #132]	@ (80118cc <tcp_timewait_input+0xdc>)
 8011848:	6819      	ldr	r1, [r3, #0]
 801184a:	4b21      	ldr	r3, [pc, #132]	@ (80118d0 <tcp_timewait_input+0xe0>)
 801184c:	881b      	ldrh	r3, [r3, #0]
 801184e:	461a      	mov	r2, r3
 8011850:	4b1d      	ldr	r3, [pc, #116]	@ (80118c8 <tcp_timewait_input+0xd8>)
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011856:	4b1f      	ldr	r3, [pc, #124]	@ (80118d4 <tcp_timewait_input+0xe4>)
 8011858:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801185a:	885b      	ldrh	r3, [r3, #2]
 801185c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801185e:	4a1d      	ldr	r2, [pc, #116]	@ (80118d4 <tcp_timewait_input+0xe4>)
 8011860:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011862:	8812      	ldrh	r2, [r2, #0]
 8011864:	b292      	uxth	r2, r2
 8011866:	9202      	str	r2, [sp, #8]
 8011868:	9301      	str	r3, [sp, #4]
 801186a:	4b1b      	ldr	r3, [pc, #108]	@ (80118d8 <tcp_timewait_input+0xe8>)
 801186c:	9300      	str	r3, [sp, #0]
 801186e:	4b1b      	ldr	r3, [pc, #108]	@ (80118dc <tcp_timewait_input+0xec>)
 8011870:	4602      	mov	r2, r0
 8011872:	6878      	ldr	r0, [r7, #4]
 8011874:	f002 feba 	bl	80145ec <tcp_rst>
      return;
 8011878:	e01b      	b.n	80118b2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801187a:	4b0f      	ldr	r3, [pc, #60]	@ (80118b8 <tcp_timewait_input+0xc8>)
 801187c:	781b      	ldrb	r3, [r3, #0]
 801187e:	f003 0301 	and.w	r3, r3, #1
 8011882:	2b00      	cmp	r3, #0
 8011884:	d003      	beq.n	801188e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011886:	4b16      	ldr	r3, [pc, #88]	@ (80118e0 <tcp_timewait_input+0xf0>)
 8011888:	681a      	ldr	r2, [r3, #0]
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801188e:	4b10      	ldr	r3, [pc, #64]	@ (80118d0 <tcp_timewait_input+0xe0>)
 8011890:	881b      	ldrh	r3, [r3, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d00c      	beq.n	80118b0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	8b5b      	ldrh	r3, [r3, #26]
 801189a:	f043 0302 	orr.w	r3, r3, #2
 801189e:	b29a      	uxth	r2, r3
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80118a4:	6878      	ldr	r0, [r7, #4]
 80118a6:	f002 f8cd 	bl	8013a44 <tcp_output>
  }
  return;
 80118aa:	e001      	b.n	80118b0 <tcp_timewait_input+0xc0>
    return;
 80118ac:	bf00      	nop
 80118ae:	e000      	b.n	80118b2 <tcp_timewait_input+0xc2>
  return;
 80118b0:	bf00      	nop
}
 80118b2:	3708      	adds	r7, #8
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}
 80118b8:	2000ebb4 	.word	0x2000ebb4
 80118bc:	0801ca34 	.word	0x0801ca34
 80118c0:	0801cc4c 	.word	0x0801cc4c
 80118c4:	0801ca80 	.word	0x0801ca80
 80118c8:	2000eba8 	.word	0x2000eba8
 80118cc:	2000ebac 	.word	0x2000ebac
 80118d0:	2000ebb2 	.word	0x2000ebb2
 80118d4:	2000eb98 	.word	0x2000eb98
 80118d8:	20008f70 	.word	0x20008f70
 80118dc:	20008f74 	.word	0x20008f74
 80118e0:	2000eb6c 	.word	0x2000eb6c

080118e4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80118e4:	b590      	push	{r4, r7, lr}
 80118e6:	b08d      	sub	sp, #52	@ 0x34
 80118e8:	af04      	add	r7, sp, #16
 80118ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80118ec:	2300      	movs	r3, #0
 80118ee:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 80118f0:	2300      	movs	r3, #0
 80118f2:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d106      	bne.n	8011908 <tcp_process+0x24>
 80118fa:	4b9d      	ldr	r3, [pc, #628]	@ (8011b70 <tcp_process+0x28c>)
 80118fc:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8011900:	499c      	ldr	r1, [pc, #624]	@ (8011b74 <tcp_process+0x290>)
 8011902:	489d      	ldr	r0, [pc, #628]	@ (8011b78 <tcp_process+0x294>)
 8011904:	f007 feae 	bl	8019664 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011908:	4b9c      	ldr	r3, [pc, #624]	@ (8011b7c <tcp_process+0x298>)
 801190a:	781b      	ldrb	r3, [r3, #0]
 801190c:	f003 0304 	and.w	r3, r3, #4
 8011910:	2b00      	cmp	r3, #0
 8011912:	d04e      	beq.n	80119b2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	7d1b      	ldrb	r3, [r3, #20]
 8011918:	2b02      	cmp	r3, #2
 801191a:	d108      	bne.n	801192e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011920:	4b97      	ldr	r3, [pc, #604]	@ (8011b80 <tcp_process+0x29c>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	429a      	cmp	r2, r3
 8011926:	d123      	bne.n	8011970 <tcp_process+0x8c>
        acceptable = 1;
 8011928:	2301      	movs	r3, #1
 801192a:	77fb      	strb	r3, [r7, #31]
 801192c:	e020      	b.n	8011970 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011932:	4b94      	ldr	r3, [pc, #592]	@ (8011b84 <tcp_process+0x2a0>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	429a      	cmp	r2, r3
 8011938:	d102      	bne.n	8011940 <tcp_process+0x5c>
        acceptable = 1;
 801193a:	2301      	movs	r3, #1
 801193c:	77fb      	strb	r3, [r7, #31]
 801193e:	e017      	b.n	8011970 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011940:	4b90      	ldr	r3, [pc, #576]	@ (8011b84 <tcp_process+0x2a0>)
 8011942:	681a      	ldr	r2, [r3, #0]
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011948:	1ad3      	subs	r3, r2, r3
 801194a:	2b00      	cmp	r3, #0
 801194c:	db10      	blt.n	8011970 <tcp_process+0x8c>
 801194e:	4b8d      	ldr	r3, [pc, #564]	@ (8011b84 <tcp_process+0x2a0>)
 8011950:	681a      	ldr	r2, [r3, #0]
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011956:	6879      	ldr	r1, [r7, #4]
 8011958:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801195a:	440b      	add	r3, r1
 801195c:	1ad3      	subs	r3, r2, r3
 801195e:	2b00      	cmp	r3, #0
 8011960:	dc06      	bgt.n	8011970 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	8b5b      	ldrh	r3, [r3, #26]
 8011966:	f043 0302 	orr.w	r3, r3, #2
 801196a:	b29a      	uxth	r2, r3
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011970:	7ffb      	ldrb	r3, [r7, #31]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d01b      	beq.n	80119ae <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	7d1b      	ldrb	r3, [r3, #20]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d106      	bne.n	801198c <tcp_process+0xa8>
 801197e:	4b7c      	ldr	r3, [pc, #496]	@ (8011b70 <tcp_process+0x28c>)
 8011980:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8011984:	4980      	ldr	r1, [pc, #512]	@ (8011b88 <tcp_process+0x2a4>)
 8011986:	487c      	ldr	r0, [pc, #496]	@ (8011b78 <tcp_process+0x294>)
 8011988:	f007 fe6c 	bl	8019664 <iprintf>
      recv_flags |= TF_RESET;
 801198c:	4b7f      	ldr	r3, [pc, #508]	@ (8011b8c <tcp_process+0x2a8>)
 801198e:	781b      	ldrb	r3, [r3, #0]
 8011990:	f043 0308 	orr.w	r3, r3, #8
 8011994:	b2da      	uxtb	r2, r3
 8011996:	4b7d      	ldr	r3, [pc, #500]	@ (8011b8c <tcp_process+0x2a8>)
 8011998:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	8b5b      	ldrh	r3, [r3, #26]
 801199e:	f023 0301 	bic.w	r3, r3, #1
 80119a2:	b29a      	uxth	r2, r3
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80119a8:	f06f 030d 	mvn.w	r3, #13
 80119ac:	e37a      	b.n	80120a4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80119ae:	2300      	movs	r3, #0
 80119b0:	e378      	b.n	80120a4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80119b2:	4b72      	ldr	r3, [pc, #456]	@ (8011b7c <tcp_process+0x298>)
 80119b4:	781b      	ldrb	r3, [r3, #0]
 80119b6:	f003 0302 	and.w	r3, r3, #2
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d010      	beq.n	80119e0 <tcp_process+0xfc>
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	7d1b      	ldrb	r3, [r3, #20]
 80119c2:	2b02      	cmp	r3, #2
 80119c4:	d00c      	beq.n	80119e0 <tcp_process+0xfc>
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	7d1b      	ldrb	r3, [r3, #20]
 80119ca:	2b03      	cmp	r3, #3
 80119cc:	d008      	beq.n	80119e0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	8b5b      	ldrh	r3, [r3, #26]
 80119d2:	f043 0302 	orr.w	r3, r3, #2
 80119d6:	b29a      	uxth	r2, r3
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80119dc:	2300      	movs	r3, #0
 80119de:	e361      	b.n	80120a4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	8b5b      	ldrh	r3, [r3, #26]
 80119e4:	f003 0310 	and.w	r3, r3, #16
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d103      	bne.n	80119f4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80119ec:	4b68      	ldr	r3, [pc, #416]	@ (8011b90 <tcp_process+0x2ac>)
 80119ee:	681a      	ldr	r2, [r3, #0]
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	2200      	movs	r2, #0
 80119f8:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2200      	movs	r2, #0
 8011a00:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f001 fc2b 	bl	8013260 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	7d1b      	ldrb	r3, [r3, #20]
 8011a0e:	3b02      	subs	r3, #2
 8011a10:	2b07      	cmp	r3, #7
 8011a12:	f200 8337 	bhi.w	8012084 <tcp_process+0x7a0>
 8011a16:	a201      	add	r2, pc, #4	@ (adr r2, 8011a1c <tcp_process+0x138>)
 8011a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a1c:	08011a3d 	.word	0x08011a3d
 8011a20:	08011c6d 	.word	0x08011c6d
 8011a24:	08011de5 	.word	0x08011de5
 8011a28:	08011e0f 	.word	0x08011e0f
 8011a2c:	08011f33 	.word	0x08011f33
 8011a30:	08011de5 	.word	0x08011de5
 8011a34:	08011fbf 	.word	0x08011fbf
 8011a38:	0801204f 	.word	0x0801204f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011a3c:	4b4f      	ldr	r3, [pc, #316]	@ (8011b7c <tcp_process+0x298>)
 8011a3e:	781b      	ldrb	r3, [r3, #0]
 8011a40:	f003 0310 	and.w	r3, r3, #16
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	f000 80e4 	beq.w	8011c12 <tcp_process+0x32e>
 8011a4a:	4b4c      	ldr	r3, [pc, #304]	@ (8011b7c <tcp_process+0x298>)
 8011a4c:	781b      	ldrb	r3, [r3, #0]
 8011a4e:	f003 0302 	and.w	r3, r3, #2
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	f000 80dd 	beq.w	8011c12 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a5c:	1c5a      	adds	r2, r3, #1
 8011a5e:	4b48      	ldr	r3, [pc, #288]	@ (8011b80 <tcp_process+0x29c>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	429a      	cmp	r2, r3
 8011a64:	f040 80d5 	bne.w	8011c12 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011a68:	4b46      	ldr	r3, [pc, #280]	@ (8011b84 <tcp_process+0x2a0>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	1c5a      	adds	r2, r3, #1
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8011a7a:	4b41      	ldr	r3, [pc, #260]	@ (8011b80 <tcp_process+0x29c>)
 8011a7c:	681a      	ldr	r2, [r3, #0]
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011a82:	4b44      	ldr	r3, [pc, #272]	@ (8011b94 <tcp_process+0x2b0>)
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	89db      	ldrh	r3, [r3, #14]
 8011a88:	b29a      	uxth	r2, r3
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011a9c:	4b39      	ldr	r3, [pc, #228]	@ (8011b84 <tcp_process+0x2a0>)
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	1e5a      	subs	r2, r3, #1
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2204      	movs	r2, #4
 8011aaa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	3304      	adds	r3, #4
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f005 f9d1 	bl	8016e5c <ip4_route>
 8011aba:	4601      	mov	r1, r0
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	3304      	adds	r3, #4
 8011ac0:	461a      	mov	r2, r3
 8011ac2:	4620      	mov	r0, r4
 8011ac4:	f7ff f820 	bl	8010b08 <tcp_eff_send_mss_netif>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	461a      	mov	r2, r3
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011ad4:	009a      	lsls	r2, r3, #2
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011ada:	005b      	lsls	r3, r3, #1
 8011adc:	f241 111c 	movw	r1, #4380	@ 0x111c
 8011ae0:	428b      	cmp	r3, r1
 8011ae2:	bf38      	it	cc
 8011ae4:	460b      	movcc	r3, r1
 8011ae6:	429a      	cmp	r2, r3
 8011ae8:	d204      	bcs.n	8011af4 <tcp_process+0x210>
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011aee:	009b      	lsls	r3, r3, #2
 8011af0:	b29b      	uxth	r3, r3
 8011af2:	e00d      	b.n	8011b10 <tcp_process+0x22c>
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011af8:	005b      	lsls	r3, r3, #1
 8011afa:	f241 121c 	movw	r2, #4380	@ 0x111c
 8011afe:	4293      	cmp	r3, r2
 8011b00:	d904      	bls.n	8011b0c <tcp_process+0x228>
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b06:	005b      	lsls	r3, r3, #1
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	e001      	b.n	8011b10 <tcp_process+0x22c>
 8011b0c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8011b10:	687a      	ldr	r2, [r7, #4]
 8011b12:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d106      	bne.n	8011b2e <tcp_process+0x24a>
 8011b20:	4b13      	ldr	r3, [pc, #76]	@ (8011b70 <tcp_process+0x28c>)
 8011b22:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8011b26:	491c      	ldr	r1, [pc, #112]	@ (8011b98 <tcp_process+0x2b4>)
 8011b28:	4813      	ldr	r0, [pc, #76]	@ (8011b78 <tcp_process+0x294>)
 8011b2a:	f007 fd9b 	bl	8019664 <iprintf>
        --pcb->snd_queuelen;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011b34:	3b01      	subs	r3, #1
 8011b36:	b29a      	uxth	r2, r3
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011b42:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8011b44:	697b      	ldr	r3, [r7, #20]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d12a      	bne.n	8011ba0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b4e:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011b50:	697b      	ldr	r3, [r7, #20]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d106      	bne.n	8011b64 <tcp_process+0x280>
 8011b56:	4b06      	ldr	r3, [pc, #24]	@ (8011b70 <tcp_process+0x28c>)
 8011b58:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8011b5c:	490f      	ldr	r1, [pc, #60]	@ (8011b9c <tcp_process+0x2b8>)
 8011b5e:	4806      	ldr	r0, [pc, #24]	@ (8011b78 <tcp_process+0x294>)
 8011b60:	f007 fd80 	bl	8019664 <iprintf>
          pcb->unsent = rseg->next;
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	681a      	ldr	r2, [r3, #0]
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011b6c:	e01c      	b.n	8011ba8 <tcp_process+0x2c4>
 8011b6e:	bf00      	nop
 8011b70:	0801ca34 	.word	0x0801ca34
 8011b74:	0801cc6c 	.word	0x0801cc6c
 8011b78:	0801ca80 	.word	0x0801ca80
 8011b7c:	2000ebb4 	.word	0x2000ebb4
 8011b80:	2000ebac 	.word	0x2000ebac
 8011b84:	2000eba8 	.word	0x2000eba8
 8011b88:	0801cc88 	.word	0x0801cc88
 8011b8c:	2000ebb5 	.word	0x2000ebb5
 8011b90:	2000eb6c 	.word	0x2000eb6c
 8011b94:	2000eb98 	.word	0x2000eb98
 8011b98:	0801cca8 	.word	0x0801cca8
 8011b9c:	0801ccc0 	.word	0x0801ccc0
        } else {
          pcb->unacked = rseg->next;
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	681a      	ldr	r2, [r3, #0]
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8011ba8:	6978      	ldr	r0, [r7, #20]
 8011baa:	f7fe fc8c 	bl	80104c6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d104      	bne.n	8011bc0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011bbc:	861a      	strh	r2, [r3, #48]	@ 0x30
 8011bbe:	e006      	b.n	8011bce <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2200      	movs	r2, #0
 8011bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d00a      	beq.n	8011bee <tcp_process+0x30a>
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011bde:	687a      	ldr	r2, [r7, #4]
 8011be0:	6910      	ldr	r0, [r2, #16]
 8011be2:	2200      	movs	r2, #0
 8011be4:	6879      	ldr	r1, [r7, #4]
 8011be6:	4798      	blx	r3
 8011be8:	4603      	mov	r3, r0
 8011bea:	77bb      	strb	r3, [r7, #30]
 8011bec:	e001      	b.n	8011bf2 <tcp_process+0x30e>
 8011bee:	2300      	movs	r3, #0
 8011bf0:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8011bf2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011bf6:	f113 0f0d 	cmn.w	r3, #13
 8011bfa:	d102      	bne.n	8011c02 <tcp_process+0x31e>
          return ERR_ABRT;
 8011bfc:	f06f 030c 	mvn.w	r3, #12
 8011c00:	e250      	b.n	80120a4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	8b5b      	ldrh	r3, [r3, #26]
 8011c06:	f043 0302 	orr.w	r3, r3, #2
 8011c0a:	b29a      	uxth	r2, r3
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011c10:	e23a      	b.n	8012088 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011c12:	4b98      	ldr	r3, [pc, #608]	@ (8011e74 <tcp_process+0x590>)
 8011c14:	781b      	ldrb	r3, [r3, #0]
 8011c16:	f003 0310 	and.w	r3, r3, #16
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	f000 8234 	beq.w	8012088 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c20:	4b95      	ldr	r3, [pc, #596]	@ (8011e78 <tcp_process+0x594>)
 8011c22:	6819      	ldr	r1, [r3, #0]
 8011c24:	4b95      	ldr	r3, [pc, #596]	@ (8011e7c <tcp_process+0x598>)
 8011c26:	881b      	ldrh	r3, [r3, #0]
 8011c28:	461a      	mov	r2, r3
 8011c2a:	4b95      	ldr	r3, [pc, #596]	@ (8011e80 <tcp_process+0x59c>)
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c30:	4b94      	ldr	r3, [pc, #592]	@ (8011e84 <tcp_process+0x5a0>)
 8011c32:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c34:	885b      	ldrh	r3, [r3, #2]
 8011c36:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c38:	4a92      	ldr	r2, [pc, #584]	@ (8011e84 <tcp_process+0x5a0>)
 8011c3a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c3c:	8812      	ldrh	r2, [r2, #0]
 8011c3e:	b292      	uxth	r2, r2
 8011c40:	9202      	str	r2, [sp, #8]
 8011c42:	9301      	str	r3, [sp, #4]
 8011c44:	4b90      	ldr	r3, [pc, #576]	@ (8011e88 <tcp_process+0x5a4>)
 8011c46:	9300      	str	r3, [sp, #0]
 8011c48:	4b90      	ldr	r3, [pc, #576]	@ (8011e8c <tcp_process+0x5a8>)
 8011c4a:	4602      	mov	r2, r0
 8011c4c:	6878      	ldr	r0, [r7, #4]
 8011c4e:	f002 fccd 	bl	80145ec <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011c58:	2b05      	cmp	r3, #5
 8011c5a:	f200 8215 	bhi.w	8012088 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2200      	movs	r2, #0
 8011c62:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f002 fa8f 	bl	8014188 <tcp_rexmit_rto>
      break;
 8011c6a:	e20d      	b.n	8012088 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011c6c:	4b81      	ldr	r3, [pc, #516]	@ (8011e74 <tcp_process+0x590>)
 8011c6e:	781b      	ldrb	r3, [r3, #0]
 8011c70:	f003 0310 	and.w	r3, r3, #16
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	f000 80a1 	beq.w	8011dbc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011c7a:	4b7f      	ldr	r3, [pc, #508]	@ (8011e78 <tcp_process+0x594>)
 8011c7c:	681a      	ldr	r2, [r3, #0]
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c82:	1ad3      	subs	r3, r2, r3
 8011c84:	3b01      	subs	r3, #1
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	db7e      	blt.n	8011d88 <tcp_process+0x4a4>
 8011c8a:	4b7b      	ldr	r3, [pc, #492]	@ (8011e78 <tcp_process+0x594>)
 8011c8c:	681a      	ldr	r2, [r3, #0]
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011c92:	1ad3      	subs	r3, r2, r3
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	dc77      	bgt.n	8011d88 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	2204      	movs	r2, #4
 8011c9c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d102      	bne.n	8011cac <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011ca6:	23fa      	movs	r3, #250	@ 0xfa
 8011ca8:	77bb      	strb	r3, [r7, #30]
 8011caa:	e01d      	b.n	8011ce8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011cb0:	699b      	ldr	r3, [r3, #24]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d106      	bne.n	8011cc4 <tcp_process+0x3e0>
 8011cb6:	4b76      	ldr	r3, [pc, #472]	@ (8011e90 <tcp_process+0x5ac>)
 8011cb8:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8011cbc:	4975      	ldr	r1, [pc, #468]	@ (8011e94 <tcp_process+0x5b0>)
 8011cbe:	4876      	ldr	r0, [pc, #472]	@ (8011e98 <tcp_process+0x5b4>)
 8011cc0:	f007 fcd0 	bl	8019664 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011cc8:	699b      	ldr	r3, [r3, #24]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d00a      	beq.n	8011ce4 <tcp_process+0x400>
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011cd2:	699b      	ldr	r3, [r3, #24]
 8011cd4:	687a      	ldr	r2, [r7, #4]
 8011cd6:	6910      	ldr	r0, [r2, #16]
 8011cd8:	2200      	movs	r2, #0
 8011cda:	6879      	ldr	r1, [r7, #4]
 8011cdc:	4798      	blx	r3
 8011cde:	4603      	mov	r3, r0
 8011ce0:	77bb      	strb	r3, [r7, #30]
 8011ce2:	e001      	b.n	8011ce8 <tcp_process+0x404>
 8011ce4:	23f0      	movs	r3, #240	@ 0xf0
 8011ce6:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8011ce8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d00a      	beq.n	8011d06 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011cf0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011cf4:	f113 0f0d 	cmn.w	r3, #13
 8011cf8:	d002      	beq.n	8011d00 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f7fd fef6 	bl	800faec <tcp_abort>
            }
            return ERR_ABRT;
 8011d00:	f06f 030c 	mvn.w	r3, #12
 8011d04:	e1ce      	b.n	80120a4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f000 fae0 	bl	80122cc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011d0c:	4b63      	ldr	r3, [pc, #396]	@ (8011e9c <tcp_process+0x5b8>)
 8011d0e:	881b      	ldrh	r3, [r3, #0]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d005      	beq.n	8011d20 <tcp_process+0x43c>
            recv_acked--;
 8011d14:	4b61      	ldr	r3, [pc, #388]	@ (8011e9c <tcp_process+0x5b8>)
 8011d16:	881b      	ldrh	r3, [r3, #0]
 8011d18:	3b01      	subs	r3, #1
 8011d1a:	b29a      	uxth	r2, r3
 8011d1c:	4b5f      	ldr	r3, [pc, #380]	@ (8011e9c <tcp_process+0x5b8>)
 8011d1e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011d24:	009a      	lsls	r2, r3, #2
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011d2a:	005b      	lsls	r3, r3, #1
 8011d2c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8011d30:	428b      	cmp	r3, r1
 8011d32:	bf38      	it	cc
 8011d34:	460b      	movcc	r3, r1
 8011d36:	429a      	cmp	r2, r3
 8011d38:	d204      	bcs.n	8011d44 <tcp_process+0x460>
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011d3e:	009b      	lsls	r3, r3, #2
 8011d40:	b29b      	uxth	r3, r3
 8011d42:	e00d      	b.n	8011d60 <tcp_process+0x47c>
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011d48:	005b      	lsls	r3, r3, #1
 8011d4a:	f241 121c 	movw	r2, #4380	@ 0x111c
 8011d4e:	4293      	cmp	r3, r2
 8011d50:	d904      	bls.n	8011d5c <tcp_process+0x478>
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011d56:	005b      	lsls	r3, r3, #1
 8011d58:	b29b      	uxth	r3, r3
 8011d5a:	e001      	b.n	8011d60 <tcp_process+0x47c>
 8011d5c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8011d60:	687a      	ldr	r2, [r7, #4]
 8011d62:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011d66:	4b4e      	ldr	r3, [pc, #312]	@ (8011ea0 <tcp_process+0x5bc>)
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	f003 0320 	and.w	r3, r3, #32
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d037      	beq.n	8011de2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	8b5b      	ldrh	r3, [r3, #26]
 8011d76:	f043 0302 	orr.w	r3, r3, #2
 8011d7a:	b29a      	uxth	r2, r3
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2207      	movs	r2, #7
 8011d84:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011d86:	e02c      	b.n	8011de2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d88:	4b3b      	ldr	r3, [pc, #236]	@ (8011e78 <tcp_process+0x594>)
 8011d8a:	6819      	ldr	r1, [r3, #0]
 8011d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8011e7c <tcp_process+0x598>)
 8011d8e:	881b      	ldrh	r3, [r3, #0]
 8011d90:	461a      	mov	r2, r3
 8011d92:	4b3b      	ldr	r3, [pc, #236]	@ (8011e80 <tcp_process+0x59c>)
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d98:	4b3a      	ldr	r3, [pc, #232]	@ (8011e84 <tcp_process+0x5a0>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d9c:	885b      	ldrh	r3, [r3, #2]
 8011d9e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011da0:	4a38      	ldr	r2, [pc, #224]	@ (8011e84 <tcp_process+0x5a0>)
 8011da2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011da4:	8812      	ldrh	r2, [r2, #0]
 8011da6:	b292      	uxth	r2, r2
 8011da8:	9202      	str	r2, [sp, #8]
 8011daa:	9301      	str	r3, [sp, #4]
 8011dac:	4b36      	ldr	r3, [pc, #216]	@ (8011e88 <tcp_process+0x5a4>)
 8011dae:	9300      	str	r3, [sp, #0]
 8011db0:	4b36      	ldr	r3, [pc, #216]	@ (8011e8c <tcp_process+0x5a8>)
 8011db2:	4602      	mov	r2, r0
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f002 fc19 	bl	80145ec <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011dba:	e167      	b.n	801208c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8011e74 <tcp_process+0x590>)
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	f003 0302 	and.w	r3, r3, #2
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	f000 8161 	beq.w	801208c <tcp_process+0x7a8>
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dce:	1e5a      	subs	r2, r3, #1
 8011dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8011e80 <tcp_process+0x59c>)
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	f040 8159 	bne.w	801208c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011dda:	6878      	ldr	r0, [r7, #4]
 8011ddc:	f002 f9f6 	bl	80141cc <tcp_rexmit>
      break;
 8011de0:	e154      	b.n	801208c <tcp_process+0x7a8>
 8011de2:	e153      	b.n	801208c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f000 fa71 	bl	80122cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011dea:	4b2d      	ldr	r3, [pc, #180]	@ (8011ea0 <tcp_process+0x5bc>)
 8011dec:	781b      	ldrb	r3, [r3, #0]
 8011dee:	f003 0320 	and.w	r3, r3, #32
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	f000 814c 	beq.w	8012090 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	8b5b      	ldrh	r3, [r3, #26]
 8011dfc:	f043 0302 	orr.w	r3, r3, #2
 8011e00:	b29a      	uxth	r2, r3
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	2207      	movs	r2, #7
 8011e0a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011e0c:	e140      	b.n	8012090 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011e0e:	6878      	ldr	r0, [r7, #4]
 8011e10:	f000 fa5c 	bl	80122cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011e14:	4b22      	ldr	r3, [pc, #136]	@ (8011ea0 <tcp_process+0x5bc>)
 8011e16:	781b      	ldrb	r3, [r3, #0]
 8011e18:	f003 0320 	and.w	r3, r3, #32
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d071      	beq.n	8011f04 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011e20:	4b14      	ldr	r3, [pc, #80]	@ (8011e74 <tcp_process+0x590>)
 8011e22:	781b      	ldrb	r3, [r3, #0]
 8011e24:	f003 0310 	and.w	r3, r3, #16
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d060      	beq.n	8011eee <tcp_process+0x60a>
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011e30:	4b11      	ldr	r3, [pc, #68]	@ (8011e78 <tcp_process+0x594>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	429a      	cmp	r2, r3
 8011e36:	d15a      	bne.n	8011eee <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d156      	bne.n	8011eee <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	8b5b      	ldrh	r3, [r3, #26]
 8011e44:	f043 0302 	orr.w	r3, r3, #2
 8011e48:	b29a      	uxth	r2, r3
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f7fe fd50 	bl	80108f4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011e54:	4b13      	ldr	r3, [pc, #76]	@ (8011ea4 <tcp_process+0x5c0>)
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	687a      	ldr	r2, [r7, #4]
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d105      	bne.n	8011e6a <tcp_process+0x586>
 8011e5e:	4b11      	ldr	r3, [pc, #68]	@ (8011ea4 <tcp_process+0x5c0>)
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	68db      	ldr	r3, [r3, #12]
 8011e64:	4a0f      	ldr	r2, [pc, #60]	@ (8011ea4 <tcp_process+0x5c0>)
 8011e66:	6013      	str	r3, [r2, #0]
 8011e68:	e02e      	b.n	8011ec8 <tcp_process+0x5e4>
 8011e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8011ea4 <tcp_process+0x5c0>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	613b      	str	r3, [r7, #16]
 8011e70:	e027      	b.n	8011ec2 <tcp_process+0x5de>
 8011e72:	bf00      	nop
 8011e74:	2000ebb4 	.word	0x2000ebb4
 8011e78:	2000ebac 	.word	0x2000ebac
 8011e7c:	2000ebb2 	.word	0x2000ebb2
 8011e80:	2000eba8 	.word	0x2000eba8
 8011e84:	2000eb98 	.word	0x2000eb98
 8011e88:	20008f70 	.word	0x20008f70
 8011e8c:	20008f74 	.word	0x20008f74
 8011e90:	0801ca34 	.word	0x0801ca34
 8011e94:	0801ccd4 	.word	0x0801ccd4
 8011e98:	0801ca80 	.word	0x0801ca80
 8011e9c:	2000ebb0 	.word	0x2000ebb0
 8011ea0:	2000ebb5 	.word	0x2000ebb5
 8011ea4:	2000eb78 	.word	0x2000eb78
 8011ea8:	693b      	ldr	r3, [r7, #16]
 8011eaa:	68db      	ldr	r3, [r3, #12]
 8011eac:	687a      	ldr	r2, [r7, #4]
 8011eae:	429a      	cmp	r2, r3
 8011eb0:	d104      	bne.n	8011ebc <tcp_process+0x5d8>
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	68da      	ldr	r2, [r3, #12]
 8011eb6:	693b      	ldr	r3, [r7, #16]
 8011eb8:	60da      	str	r2, [r3, #12]
 8011eba:	e005      	b.n	8011ec8 <tcp_process+0x5e4>
 8011ebc:	693b      	ldr	r3, [r7, #16]
 8011ebe:	68db      	ldr	r3, [r3, #12]
 8011ec0:	613b      	str	r3, [r7, #16]
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d1ef      	bne.n	8011ea8 <tcp_process+0x5c4>
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2200      	movs	r2, #0
 8011ecc:	60da      	str	r2, [r3, #12]
 8011ece:	4b77      	ldr	r3, [pc, #476]	@ (80120ac <tcp_process+0x7c8>)
 8011ed0:	2201      	movs	r2, #1
 8011ed2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	220a      	movs	r2, #10
 8011ed8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011eda:	4b75      	ldr	r3, [pc, #468]	@ (80120b0 <tcp_process+0x7cc>)
 8011edc:	681a      	ldr	r2, [r3, #0]
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	60da      	str	r2, [r3, #12]
 8011ee2:	4a73      	ldr	r2, [pc, #460]	@ (80120b0 <tcp_process+0x7cc>)
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	6013      	str	r3, [r2, #0]
 8011ee8:	f002 fd42 	bl	8014970 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011eec:	e0d2      	b.n	8012094 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	8b5b      	ldrh	r3, [r3, #26]
 8011ef2:	f043 0302 	orr.w	r3, r3, #2
 8011ef6:	b29a      	uxth	r2, r3
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2208      	movs	r2, #8
 8011f00:	751a      	strb	r2, [r3, #20]
      break;
 8011f02:	e0c7      	b.n	8012094 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011f04:	4b6b      	ldr	r3, [pc, #428]	@ (80120b4 <tcp_process+0x7d0>)
 8011f06:	781b      	ldrb	r3, [r3, #0]
 8011f08:	f003 0310 	and.w	r3, r3, #16
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	f000 80c1 	beq.w	8012094 <tcp_process+0x7b0>
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011f16:	4b68      	ldr	r3, [pc, #416]	@ (80120b8 <tcp_process+0x7d4>)
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	429a      	cmp	r2, r3
 8011f1c:	f040 80ba 	bne.w	8012094 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	f040 80b5 	bne.w	8012094 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	2206      	movs	r2, #6
 8011f2e:	751a      	strb	r2, [r3, #20]
      break;
 8011f30:	e0b0      	b.n	8012094 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	f000 f9ca 	bl	80122cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011f38:	4b60      	ldr	r3, [pc, #384]	@ (80120bc <tcp_process+0x7d8>)
 8011f3a:	781b      	ldrb	r3, [r3, #0]
 8011f3c:	f003 0320 	and.w	r3, r3, #32
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	f000 80a9 	beq.w	8012098 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	8b5b      	ldrh	r3, [r3, #26]
 8011f4a:	f043 0302 	orr.w	r3, r3, #2
 8011f4e:	b29a      	uxth	r2, r3
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f7fe fccd 	bl	80108f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011f5a:	4b59      	ldr	r3, [pc, #356]	@ (80120c0 <tcp_process+0x7dc>)
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	687a      	ldr	r2, [r7, #4]
 8011f60:	429a      	cmp	r2, r3
 8011f62:	d105      	bne.n	8011f70 <tcp_process+0x68c>
 8011f64:	4b56      	ldr	r3, [pc, #344]	@ (80120c0 <tcp_process+0x7dc>)
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	68db      	ldr	r3, [r3, #12]
 8011f6a:	4a55      	ldr	r2, [pc, #340]	@ (80120c0 <tcp_process+0x7dc>)
 8011f6c:	6013      	str	r3, [r2, #0]
 8011f6e:	e013      	b.n	8011f98 <tcp_process+0x6b4>
 8011f70:	4b53      	ldr	r3, [pc, #332]	@ (80120c0 <tcp_process+0x7dc>)
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	60fb      	str	r3, [r7, #12]
 8011f76:	e00c      	b.n	8011f92 <tcp_process+0x6ae>
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	68db      	ldr	r3, [r3, #12]
 8011f7c:	687a      	ldr	r2, [r7, #4]
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d104      	bne.n	8011f8c <tcp_process+0x6a8>
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	68da      	ldr	r2, [r3, #12]
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	60da      	str	r2, [r3, #12]
 8011f8a:	e005      	b.n	8011f98 <tcp_process+0x6b4>
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	68db      	ldr	r3, [r3, #12]
 8011f90:	60fb      	str	r3, [r7, #12]
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d1ef      	bne.n	8011f78 <tcp_process+0x694>
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	60da      	str	r2, [r3, #12]
 8011f9e:	4b43      	ldr	r3, [pc, #268]	@ (80120ac <tcp_process+0x7c8>)
 8011fa0:	2201      	movs	r2, #1
 8011fa2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	220a      	movs	r2, #10
 8011fa8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011faa:	4b41      	ldr	r3, [pc, #260]	@ (80120b0 <tcp_process+0x7cc>)
 8011fac:	681a      	ldr	r2, [r3, #0]
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	60da      	str	r2, [r3, #12]
 8011fb2:	4a3f      	ldr	r2, [pc, #252]	@ (80120b0 <tcp_process+0x7cc>)
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	6013      	str	r3, [r2, #0]
 8011fb8:	f002 fcda 	bl	8014970 <tcp_timer_needed>
      }
      break;
 8011fbc:	e06c      	b.n	8012098 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011fbe:	6878      	ldr	r0, [r7, #4]
 8011fc0:	f000 f984 	bl	80122cc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80120b4 <tcp_process+0x7d0>)
 8011fc6:	781b      	ldrb	r3, [r3, #0]
 8011fc8:	f003 0310 	and.w	r3, r3, #16
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d065      	beq.n	801209c <tcp_process+0x7b8>
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011fd4:	4b38      	ldr	r3, [pc, #224]	@ (80120b8 <tcp_process+0x7d4>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d15f      	bne.n	801209c <tcp_process+0x7b8>
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d15b      	bne.n	801209c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011fe4:	6878      	ldr	r0, [r7, #4]
 8011fe6:	f7fe fc85 	bl	80108f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011fea:	4b35      	ldr	r3, [pc, #212]	@ (80120c0 <tcp_process+0x7dc>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	687a      	ldr	r2, [r7, #4]
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	d105      	bne.n	8012000 <tcp_process+0x71c>
 8011ff4:	4b32      	ldr	r3, [pc, #200]	@ (80120c0 <tcp_process+0x7dc>)
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	68db      	ldr	r3, [r3, #12]
 8011ffa:	4a31      	ldr	r2, [pc, #196]	@ (80120c0 <tcp_process+0x7dc>)
 8011ffc:	6013      	str	r3, [r2, #0]
 8011ffe:	e013      	b.n	8012028 <tcp_process+0x744>
 8012000:	4b2f      	ldr	r3, [pc, #188]	@ (80120c0 <tcp_process+0x7dc>)
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	61bb      	str	r3, [r7, #24]
 8012006:	e00c      	b.n	8012022 <tcp_process+0x73e>
 8012008:	69bb      	ldr	r3, [r7, #24]
 801200a:	68db      	ldr	r3, [r3, #12]
 801200c:	687a      	ldr	r2, [r7, #4]
 801200e:	429a      	cmp	r2, r3
 8012010:	d104      	bne.n	801201c <tcp_process+0x738>
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	68da      	ldr	r2, [r3, #12]
 8012016:	69bb      	ldr	r3, [r7, #24]
 8012018:	60da      	str	r2, [r3, #12]
 801201a:	e005      	b.n	8012028 <tcp_process+0x744>
 801201c:	69bb      	ldr	r3, [r7, #24]
 801201e:	68db      	ldr	r3, [r3, #12]
 8012020:	61bb      	str	r3, [r7, #24]
 8012022:	69bb      	ldr	r3, [r7, #24]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d1ef      	bne.n	8012008 <tcp_process+0x724>
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	2200      	movs	r2, #0
 801202c:	60da      	str	r2, [r3, #12]
 801202e:	4b1f      	ldr	r3, [pc, #124]	@ (80120ac <tcp_process+0x7c8>)
 8012030:	2201      	movs	r2, #1
 8012032:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	220a      	movs	r2, #10
 8012038:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801203a:	4b1d      	ldr	r3, [pc, #116]	@ (80120b0 <tcp_process+0x7cc>)
 801203c:	681a      	ldr	r2, [r3, #0]
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	60da      	str	r2, [r3, #12]
 8012042:	4a1b      	ldr	r2, [pc, #108]	@ (80120b0 <tcp_process+0x7cc>)
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6013      	str	r3, [r2, #0]
 8012048:	f002 fc92 	bl	8014970 <tcp_timer_needed>
      }
      break;
 801204c:	e026      	b.n	801209c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f000 f93c 	bl	80122cc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012054:	4b17      	ldr	r3, [pc, #92]	@ (80120b4 <tcp_process+0x7d0>)
 8012056:	781b      	ldrb	r3, [r3, #0]
 8012058:	f003 0310 	and.w	r3, r3, #16
 801205c:	2b00      	cmp	r3, #0
 801205e:	d01f      	beq.n	80120a0 <tcp_process+0x7bc>
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012064:	4b14      	ldr	r3, [pc, #80]	@ (80120b8 <tcp_process+0x7d4>)
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	429a      	cmp	r2, r3
 801206a:	d119      	bne.n	80120a0 <tcp_process+0x7bc>
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012070:	2b00      	cmp	r3, #0
 8012072:	d115      	bne.n	80120a0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012074:	4b11      	ldr	r3, [pc, #68]	@ (80120bc <tcp_process+0x7d8>)
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	f043 0310 	orr.w	r3, r3, #16
 801207c:	b2da      	uxtb	r2, r3
 801207e:	4b0f      	ldr	r3, [pc, #60]	@ (80120bc <tcp_process+0x7d8>)
 8012080:	701a      	strb	r2, [r3, #0]
      }
      break;
 8012082:	e00d      	b.n	80120a0 <tcp_process+0x7bc>
    default:
      break;
 8012084:	bf00      	nop
 8012086:	e00c      	b.n	80120a2 <tcp_process+0x7be>
      break;
 8012088:	bf00      	nop
 801208a:	e00a      	b.n	80120a2 <tcp_process+0x7be>
      break;
 801208c:	bf00      	nop
 801208e:	e008      	b.n	80120a2 <tcp_process+0x7be>
      break;
 8012090:	bf00      	nop
 8012092:	e006      	b.n	80120a2 <tcp_process+0x7be>
      break;
 8012094:	bf00      	nop
 8012096:	e004      	b.n	80120a2 <tcp_process+0x7be>
      break;
 8012098:	bf00      	nop
 801209a:	e002      	b.n	80120a2 <tcp_process+0x7be>
      break;
 801209c:	bf00      	nop
 801209e:	e000      	b.n	80120a2 <tcp_process+0x7be>
      break;
 80120a0:	bf00      	nop
  }
  return ERR_OK;
 80120a2:	2300      	movs	r3, #0
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	3724      	adds	r7, #36	@ 0x24
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd90      	pop	{r4, r7, pc}
 80120ac:	2000eb80 	.word	0x2000eb80
 80120b0:	2000eb7c 	.word	0x2000eb7c
 80120b4:	2000ebb4 	.word	0x2000ebb4
 80120b8:	2000ebac 	.word	0x2000ebac
 80120bc:	2000ebb5 	.word	0x2000ebb5
 80120c0:	2000eb78 	.word	0x2000eb78

080120c4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80120c4:	b590      	push	{r4, r7, lr}
 80120c6:	b085      	sub	sp, #20
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
 80120cc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d106      	bne.n	80120e2 <tcp_oos_insert_segment+0x1e>
 80120d4:	4b3b      	ldr	r3, [pc, #236]	@ (80121c4 <tcp_oos_insert_segment+0x100>)
 80120d6:	f240 421f 	movw	r2, #1055	@ 0x41f
 80120da:	493b      	ldr	r1, [pc, #236]	@ (80121c8 <tcp_oos_insert_segment+0x104>)
 80120dc:	483b      	ldr	r0, [pc, #236]	@ (80121cc <tcp_oos_insert_segment+0x108>)
 80120de:	f007 fac1 	bl	8019664 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	691b      	ldr	r3, [r3, #16]
 80120e6:	899b      	ldrh	r3, [r3, #12]
 80120e8:	b29b      	uxth	r3, r3
 80120ea:	4618      	mov	r0, r3
 80120ec:	f7fb f8be 	bl	800d26c <lwip_htons>
 80120f0:	4603      	mov	r3, r0
 80120f2:	b2db      	uxtb	r3, r3
 80120f4:	f003 0301 	and.w	r3, r3, #1
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d028      	beq.n	801214e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80120fc:	6838      	ldr	r0, [r7, #0]
 80120fe:	f7fe f9cd 	bl	801049c <tcp_segs_free>
    next = NULL;
 8012102:	2300      	movs	r3, #0
 8012104:	603b      	str	r3, [r7, #0]
 8012106:	e056      	b.n	80121b6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	691b      	ldr	r3, [r3, #16]
 801210c:	899b      	ldrh	r3, [r3, #12]
 801210e:	b29b      	uxth	r3, r3
 8012110:	4618      	mov	r0, r3
 8012112:	f7fb f8ab 	bl	800d26c <lwip_htons>
 8012116:	4603      	mov	r3, r0
 8012118:	b2db      	uxtb	r3, r3
 801211a:	f003 0301 	and.w	r3, r3, #1
 801211e:	2b00      	cmp	r3, #0
 8012120:	d00d      	beq.n	801213e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	691b      	ldr	r3, [r3, #16]
 8012126:	899b      	ldrh	r3, [r3, #12]
 8012128:	b29c      	uxth	r4, r3
 801212a:	2001      	movs	r0, #1
 801212c:	f7fb f89e 	bl	800d26c <lwip_htons>
 8012130:	4603      	mov	r3, r0
 8012132:	461a      	mov	r2, r3
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	691b      	ldr	r3, [r3, #16]
 8012138:	4322      	orrs	r2, r4
 801213a:	b292      	uxth	r2, r2
 801213c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012142:	683b      	ldr	r3, [r7, #0]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012148:	68f8      	ldr	r0, [r7, #12]
 801214a:	f7fe f9bc 	bl	80104c6 <tcp_seg_free>
    while (next &&
 801214e:	683b      	ldr	r3, [r7, #0]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d00e      	beq.n	8012172 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	891b      	ldrh	r3, [r3, #8]
 8012158:	461a      	mov	r2, r3
 801215a:	4b1d      	ldr	r3, [pc, #116]	@ (80121d0 <tcp_oos_insert_segment+0x10c>)
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	441a      	add	r2, r3
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	691b      	ldr	r3, [r3, #16]
 8012164:	685b      	ldr	r3, [r3, #4]
 8012166:	6839      	ldr	r1, [r7, #0]
 8012168:	8909      	ldrh	r1, [r1, #8]
 801216a:	440b      	add	r3, r1
 801216c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801216e:	2b00      	cmp	r3, #0
 8012170:	daca      	bge.n	8012108 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8012172:	683b      	ldr	r3, [r7, #0]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d01e      	beq.n	80121b6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	891b      	ldrh	r3, [r3, #8]
 801217c:	461a      	mov	r2, r3
 801217e:	4b14      	ldr	r3, [pc, #80]	@ (80121d0 <tcp_oos_insert_segment+0x10c>)
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	441a      	add	r2, r3
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	691b      	ldr	r3, [r3, #16]
 8012188:	685b      	ldr	r3, [r3, #4]
 801218a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801218c:	2b00      	cmp	r3, #0
 801218e:	dd12      	ble.n	80121b6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012190:	683b      	ldr	r3, [r7, #0]
 8012192:	691b      	ldr	r3, [r3, #16]
 8012194:	685b      	ldr	r3, [r3, #4]
 8012196:	b29a      	uxth	r2, r3
 8012198:	4b0d      	ldr	r3, [pc, #52]	@ (80121d0 <tcp_oos_insert_segment+0x10c>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	b29b      	uxth	r3, r3
 801219e:	1ad3      	subs	r3, r2, r3
 80121a0:	b29a      	uxth	r2, r3
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	685a      	ldr	r2, [r3, #4]
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	891b      	ldrh	r3, [r3, #8]
 80121ae:	4619      	mov	r1, r3
 80121b0:	4610      	mov	r0, r2
 80121b2:	f7fc fd71 	bl	800ec98 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	683a      	ldr	r2, [r7, #0]
 80121ba:	601a      	str	r2, [r3, #0]
}
 80121bc:	bf00      	nop
 80121be:	3714      	adds	r7, #20
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd90      	pop	{r4, r7, pc}
 80121c4:	0801ca34 	.word	0x0801ca34
 80121c8:	0801ccf4 	.word	0x0801ccf4
 80121cc:	0801ca80 	.word	0x0801ca80
 80121d0:	2000eba8 	.word	0x2000eba8

080121d4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80121d4:	b5b0      	push	{r4, r5, r7, lr}
 80121d6:	b086      	sub	sp, #24
 80121d8:	af00      	add	r7, sp, #0
 80121da:	60f8      	str	r0, [r7, #12]
 80121dc:	60b9      	str	r1, [r7, #8]
 80121de:	607a      	str	r2, [r7, #4]
 80121e0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80121e2:	e03e      	b.n	8012262 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80121e4:	68bb      	ldr	r3, [r7, #8]
 80121e6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80121ee:	697b      	ldr	r3, [r7, #20]
 80121f0:	685b      	ldr	r3, [r3, #4]
 80121f2:	4618      	mov	r0, r3
 80121f4:	f7fc ff64 	bl	800f0c0 <pbuf_clen>
 80121f8:	4603      	mov	r3, r0
 80121fa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012202:	8a7a      	ldrh	r2, [r7, #18]
 8012204:	429a      	cmp	r2, r3
 8012206:	d906      	bls.n	8012216 <tcp_free_acked_segments+0x42>
 8012208:	4b2a      	ldr	r3, [pc, #168]	@ (80122b4 <tcp_free_acked_segments+0xe0>)
 801220a:	f240 4257 	movw	r2, #1111	@ 0x457
 801220e:	492a      	ldr	r1, [pc, #168]	@ (80122b8 <tcp_free_acked_segments+0xe4>)
 8012210:	482a      	ldr	r0, [pc, #168]	@ (80122bc <tcp_free_acked_segments+0xe8>)
 8012212:	f007 fa27 	bl	8019664 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 801221c:	8a7b      	ldrh	r3, [r7, #18]
 801221e:	1ad3      	subs	r3, r2, r3
 8012220:	b29a      	uxth	r2, r3
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012228:	697b      	ldr	r3, [r7, #20]
 801222a:	891a      	ldrh	r2, [r3, #8]
 801222c:	4b24      	ldr	r3, [pc, #144]	@ (80122c0 <tcp_free_acked_segments+0xec>)
 801222e:	881b      	ldrh	r3, [r3, #0]
 8012230:	4413      	add	r3, r2
 8012232:	b29a      	uxth	r2, r3
 8012234:	4b22      	ldr	r3, [pc, #136]	@ (80122c0 <tcp_free_acked_segments+0xec>)
 8012236:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012238:	6978      	ldr	r0, [r7, #20]
 801223a:	f7fe f944 	bl	80104c6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012244:	2b00      	cmp	r3, #0
 8012246:	d00c      	beq.n	8012262 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012248:	68bb      	ldr	r3, [r7, #8]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d109      	bne.n	8012262 <tcp_free_acked_segments+0x8e>
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d106      	bne.n	8012262 <tcp_free_acked_segments+0x8e>
 8012254:	4b17      	ldr	r3, [pc, #92]	@ (80122b4 <tcp_free_acked_segments+0xe0>)
 8012256:	f240 4261 	movw	r2, #1121	@ 0x461
 801225a:	491a      	ldr	r1, [pc, #104]	@ (80122c4 <tcp_free_acked_segments+0xf0>)
 801225c:	4817      	ldr	r0, [pc, #92]	@ (80122bc <tcp_free_acked_segments+0xe8>)
 801225e:	f007 fa01 	bl	8019664 <iprintf>
  while (seg_list != NULL &&
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d020      	beq.n	80122aa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012268:	68bb      	ldr	r3, [r7, #8]
 801226a:	691b      	ldr	r3, [r3, #16]
 801226c:	685b      	ldr	r3, [r3, #4]
 801226e:	4618      	mov	r0, r3
 8012270:	f7fb f812 	bl	800d298 <lwip_htonl>
 8012274:	4604      	mov	r4, r0
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	891b      	ldrh	r3, [r3, #8]
 801227a:	461d      	mov	r5, r3
 801227c:	68bb      	ldr	r3, [r7, #8]
 801227e:	691b      	ldr	r3, [r3, #16]
 8012280:	899b      	ldrh	r3, [r3, #12]
 8012282:	b29b      	uxth	r3, r3
 8012284:	4618      	mov	r0, r3
 8012286:	f7fa fff1 	bl	800d26c <lwip_htons>
 801228a:	4603      	mov	r3, r0
 801228c:	b2db      	uxtb	r3, r3
 801228e:	f003 0303 	and.w	r3, r3, #3
 8012292:	2b00      	cmp	r3, #0
 8012294:	d001      	beq.n	801229a <tcp_free_acked_segments+0xc6>
 8012296:	2301      	movs	r3, #1
 8012298:	e000      	b.n	801229c <tcp_free_acked_segments+0xc8>
 801229a:	2300      	movs	r3, #0
 801229c:	442b      	add	r3, r5
 801229e:	18e2      	adds	r2, r4, r3
 80122a0:	4b09      	ldr	r3, [pc, #36]	@ (80122c8 <tcp_free_acked_segments+0xf4>)
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	dd9c      	ble.n	80121e4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80122aa:	68bb      	ldr	r3, [r7, #8]
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3718      	adds	r7, #24
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bdb0      	pop	{r4, r5, r7, pc}
 80122b4:	0801ca34 	.word	0x0801ca34
 80122b8:	0801cd1c 	.word	0x0801cd1c
 80122bc:	0801ca80 	.word	0x0801ca80
 80122c0:	2000ebb0 	.word	0x2000ebb0
 80122c4:	0801cd44 	.word	0x0801cd44
 80122c8:	2000ebac 	.word	0x2000ebac

080122cc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80122cc:	b5b0      	push	{r4, r5, r7, lr}
 80122ce:	b094      	sub	sp, #80	@ 0x50
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80122d4:	2300      	movs	r3, #0
 80122d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d106      	bne.n	80122ec <tcp_receive+0x20>
 80122de:	4b91      	ldr	r3, [pc, #580]	@ (8012524 <tcp_receive+0x258>)
 80122e0:	f240 427b 	movw	r2, #1147	@ 0x47b
 80122e4:	4990      	ldr	r1, [pc, #576]	@ (8012528 <tcp_receive+0x25c>)
 80122e6:	4891      	ldr	r0, [pc, #580]	@ (801252c <tcp_receive+0x260>)
 80122e8:	f007 f9bc 	bl	8019664 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	7d1b      	ldrb	r3, [r3, #20]
 80122f0:	2b03      	cmp	r3, #3
 80122f2:	d806      	bhi.n	8012302 <tcp_receive+0x36>
 80122f4:	4b8b      	ldr	r3, [pc, #556]	@ (8012524 <tcp_receive+0x258>)
 80122f6:	f240 427c 	movw	r2, #1148	@ 0x47c
 80122fa:	498d      	ldr	r1, [pc, #564]	@ (8012530 <tcp_receive+0x264>)
 80122fc:	488b      	ldr	r0, [pc, #556]	@ (801252c <tcp_receive+0x260>)
 80122fe:	f007 f9b1 	bl	8019664 <iprintf>

  if (flags & TCP_ACK) {
 8012302:	4b8c      	ldr	r3, [pc, #560]	@ (8012534 <tcp_receive+0x268>)
 8012304:	781b      	ldrb	r3, [r3, #0]
 8012306:	f003 0310 	and.w	r3, r3, #16
 801230a:	2b00      	cmp	r3, #0
 801230c:	f000 8264 	beq.w	80127d8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012316:	461a      	mov	r2, r3
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801231c:	4413      	add	r3, r2
 801231e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012324:	4b84      	ldr	r3, [pc, #528]	@ (8012538 <tcp_receive+0x26c>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	1ad3      	subs	r3, r2, r3
 801232a:	2b00      	cmp	r3, #0
 801232c:	db1b      	blt.n	8012366 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012332:	4b81      	ldr	r3, [pc, #516]	@ (8012538 <tcp_receive+0x26c>)
 8012334:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012336:	429a      	cmp	r2, r3
 8012338:	d106      	bne.n	8012348 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801233e:	4b7f      	ldr	r3, [pc, #508]	@ (801253c <tcp_receive+0x270>)
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	1ad3      	subs	r3, r2, r3
 8012344:	2b00      	cmp	r3, #0
 8012346:	db0e      	blt.n	8012366 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801234c:	4b7b      	ldr	r3, [pc, #492]	@ (801253c <tcp_receive+0x270>)
 801234e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012350:	429a      	cmp	r2, r3
 8012352:	d125      	bne.n	80123a0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012354:	4b7a      	ldr	r3, [pc, #488]	@ (8012540 <tcp_receive+0x274>)
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	89db      	ldrh	r3, [r3, #14]
 801235a:	b29a      	uxth	r2, r3
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012362:	429a      	cmp	r2, r3
 8012364:	d91c      	bls.n	80123a0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012366:	4b76      	ldr	r3, [pc, #472]	@ (8012540 <tcp_receive+0x274>)
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	89db      	ldrh	r3, [r3, #14]
 801236c:	b29a      	uxth	r2, r3
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012380:	429a      	cmp	r2, r3
 8012382:	d205      	bcs.n	8012390 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8012390:	4b69      	ldr	r3, [pc, #420]	@ (8012538 <tcp_receive+0x26c>)
 8012392:	681a      	ldr	r2, [r3, #0]
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8012398:	4b68      	ldr	r3, [pc, #416]	@ (801253c <tcp_receive+0x270>)
 801239a:	681a      	ldr	r2, [r3, #0]
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80123a0:	4b66      	ldr	r3, [pc, #408]	@ (801253c <tcp_receive+0x270>)
 80123a2:	681a      	ldr	r2, [r3, #0]
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123a8:	1ad3      	subs	r3, r2, r3
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	dc58      	bgt.n	8012460 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80123ae:	4b65      	ldr	r3, [pc, #404]	@ (8012544 <tcp_receive+0x278>)
 80123b0:	881b      	ldrh	r3, [r3, #0]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d14b      	bne.n	801244e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80123ba:	687a      	ldr	r2, [r7, #4]
 80123bc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80123c0:	4413      	add	r3, r2
 80123c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80123c4:	429a      	cmp	r2, r3
 80123c6:	d142      	bne.n	801244e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	db3d      	blt.n	801244e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80123d6:	4b59      	ldr	r3, [pc, #356]	@ (801253c <tcp_receive+0x270>)
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	429a      	cmp	r2, r3
 80123dc:	d137      	bne.n	801244e <tcp_receive+0x182>
              found_dupack = 1;
 80123de:	2301      	movs	r3, #1
 80123e0:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80123e8:	2bff      	cmp	r3, #255	@ 0xff
 80123ea:	d007      	beq.n	80123fc <tcp_receive+0x130>
                ++pcb->dupacks;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80123f2:	3301      	adds	r3, #1
 80123f4:	b2da      	uxtb	r2, r3
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012402:	2b03      	cmp	r3, #3
 8012404:	d91b      	bls.n	801243e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012410:	4413      	add	r3, r2
 8012412:	b29a      	uxth	r2, r3
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801241a:	429a      	cmp	r2, r3
 801241c:	d30a      	bcc.n	8012434 <tcp_receive+0x168>
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012428:	4413      	add	r3, r2
 801242a:	b29a      	uxth	r2, r3
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012432:	e004      	b.n	801243e <tcp_receive+0x172>
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801243a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012444:	2b02      	cmp	r3, #2
 8012446:	d902      	bls.n	801244e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f001 ff2b 	bl	80142a4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801244e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012450:	2b00      	cmp	r3, #0
 8012452:	f040 8161 	bne.w	8012718 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	2200      	movs	r2, #0
 801245a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801245e:	e15b      	b.n	8012718 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012460:	4b36      	ldr	r3, [pc, #216]	@ (801253c <tcp_receive+0x270>)
 8012462:	681a      	ldr	r2, [r3, #0]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012468:	1ad3      	subs	r3, r2, r3
 801246a:	3b01      	subs	r3, #1
 801246c:	2b00      	cmp	r3, #0
 801246e:	f2c0 814e 	blt.w	801270e <tcp_receive+0x442>
 8012472:	4b32      	ldr	r3, [pc, #200]	@ (801253c <tcp_receive+0x270>)
 8012474:	681a      	ldr	r2, [r3, #0]
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801247a:	1ad3      	subs	r3, r2, r3
 801247c:	2b00      	cmp	r3, #0
 801247e:	f300 8146 	bgt.w	801270e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	8b5b      	ldrh	r3, [r3, #26]
 8012486:	f003 0304 	and.w	r3, r3, #4
 801248a:	2b00      	cmp	r3, #0
 801248c:	d010      	beq.n	80124b0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	8b5b      	ldrh	r3, [r3, #26]
 8012492:	f023 0304 	bic.w	r3, r3, #4
 8012496:	b29a      	uxth	r2, r3
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	2200      	movs	r2, #0
 80124ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2200      	movs	r2, #0
 80124b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80124be:	10db      	asrs	r3, r3, #3
 80124c0:	b21b      	sxth	r3, r3
 80124c2:	b29a      	uxth	r2, r3
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80124ca:	b29b      	uxth	r3, r3
 80124cc:	4413      	add	r3, r2
 80124ce:	b29b      	uxth	r3, r3
 80124d0:	b21a      	sxth	r2, r3
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80124d8:	4b18      	ldr	r3, [pc, #96]	@ (801253c <tcp_receive+0x270>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	b29a      	uxth	r2, r3
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	1ad3      	subs	r3, r2, r3
 80124e6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	2200      	movs	r2, #0
 80124ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80124f0:	4b12      	ldr	r3, [pc, #72]	@ (801253c <tcp_receive+0x270>)
 80124f2:	681a      	ldr	r2, [r3, #0]
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	7d1b      	ldrb	r3, [r3, #20]
 80124fc:	2b03      	cmp	r3, #3
 80124fe:	f240 8097 	bls.w	8012630 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801250e:	429a      	cmp	r2, r3
 8012510:	d245      	bcs.n	801259e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	8b5b      	ldrh	r3, [r3, #26]
 8012516:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801251a:	2b00      	cmp	r3, #0
 801251c:	d014      	beq.n	8012548 <tcp_receive+0x27c>
 801251e:	2301      	movs	r3, #1
 8012520:	e013      	b.n	801254a <tcp_receive+0x27e>
 8012522:	bf00      	nop
 8012524:	0801ca34 	.word	0x0801ca34
 8012528:	0801cd64 	.word	0x0801cd64
 801252c:	0801ca80 	.word	0x0801ca80
 8012530:	0801cd80 	.word	0x0801cd80
 8012534:	2000ebb4 	.word	0x2000ebb4
 8012538:	2000eba8 	.word	0x2000eba8
 801253c:	2000ebac 	.word	0x2000ebac
 8012540:	2000eb98 	.word	0x2000eb98
 8012544:	2000ebb2 	.word	0x2000ebb2
 8012548:	2302      	movs	r3, #2
 801254a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801254e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8012552:	b29a      	uxth	r2, r3
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012558:	fb12 f303 	smulbb	r3, r2, r3
 801255c:	b29b      	uxth	r3, r3
 801255e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012560:	4293      	cmp	r3, r2
 8012562:	bf28      	it	cs
 8012564:	4613      	movcs	r3, r2
 8012566:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801256e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012570:	4413      	add	r3, r2
 8012572:	b29a      	uxth	r2, r3
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801257a:	429a      	cmp	r2, r3
 801257c:	d309      	bcc.n	8012592 <tcp_receive+0x2c6>
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012584:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012586:	4413      	add	r3, r2
 8012588:	b29a      	uxth	r2, r3
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012590:	e04e      	b.n	8012630 <tcp_receive+0x364>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012598:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801259c:	e048      	b.n	8012630 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80125a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80125a6:	4413      	add	r3, r2
 80125a8:	b29a      	uxth	r2, r3
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80125b0:	429a      	cmp	r2, r3
 80125b2:	d309      	bcc.n	80125c8 <tcp_receive+0x2fc>
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80125ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80125bc:	4413      	add	r3, r2
 80125be:	b29a      	uxth	r2, r3
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80125c6:	e004      	b.n	80125d2 <tcp_receive+0x306>
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80125ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80125de:	429a      	cmp	r2, r3
 80125e0:	d326      	bcc.n	8012630 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80125ee:	1ad3      	subs	r3, r2, r3
 80125f0:	b29a      	uxth	r2, r3
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012602:	4413      	add	r3, r2
 8012604:	b29a      	uxth	r2, r3
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801260c:	429a      	cmp	r2, r3
 801260e:	d30a      	bcc.n	8012626 <tcp_receive+0x35a>
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801261a:	4413      	add	r3, r2
 801261c:	b29a      	uxth	r2, r3
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012624:	e004      	b.n	8012630 <tcp_receive+0x364>
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801262c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012638:	4a98      	ldr	r2, [pc, #608]	@ (801289c <tcp_receive+0x5d0>)
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f7ff fdca 	bl	80121d4 <tcp_free_acked_segments>
 8012640:	4602      	mov	r2, r0
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801264e:	4a94      	ldr	r2, [pc, #592]	@ (80128a0 <tcp_receive+0x5d4>)
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f7ff fdbf 	bl	80121d4 <tcp_free_acked_segments>
 8012656:	4602      	mov	r2, r0
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012660:	2b00      	cmp	r3, #0
 8012662:	d104      	bne.n	801266e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801266a:	861a      	strh	r2, [r3, #48]	@ 0x30
 801266c:	e002      	b.n	8012674 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2200      	movs	r2, #0
 8012672:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	2200      	movs	r2, #0
 8012678:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801267e:	2b00      	cmp	r3, #0
 8012680:	d103      	bne.n	801268a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2200      	movs	r2, #0
 8012686:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012690:	4b84      	ldr	r3, [pc, #528]	@ (80128a4 <tcp_receive+0x5d8>)
 8012692:	881b      	ldrh	r3, [r3, #0]
 8012694:	4413      	add	r3, r2
 8012696:	b29a      	uxth	r2, r3
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	8b5b      	ldrh	r3, [r3, #26]
 80126a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d035      	beq.n	8012716 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d118      	bne.n	80126e4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d00c      	beq.n	80126d4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126c2:	691b      	ldr	r3, [r3, #16]
 80126c4:	685b      	ldr	r3, [r3, #4]
 80126c6:	4618      	mov	r0, r3
 80126c8:	f7fa fde6 	bl	800d298 <lwip_htonl>
 80126cc:	4603      	mov	r3, r0
 80126ce:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	dc20      	bgt.n	8012716 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	8b5b      	ldrh	r3, [r3, #26]
 80126d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80126dc:	b29a      	uxth	r2, r3
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80126e2:	e018      	b.n	8012716 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80126ec:	691b      	ldr	r3, [r3, #16]
 80126ee:	685b      	ldr	r3, [r3, #4]
 80126f0:	4618      	mov	r0, r3
 80126f2:	f7fa fdd1 	bl	800d298 <lwip_htonl>
 80126f6:	4603      	mov	r3, r0
 80126f8:	1ae3      	subs	r3, r4, r3
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	dc0b      	bgt.n	8012716 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	8b5b      	ldrh	r3, [r3, #26]
 8012702:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012706:	b29a      	uxth	r2, r3
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801270c:	e003      	b.n	8012716 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801270e:	6878      	ldr	r0, [r7, #4]
 8012710:	f001 ffbe 	bl	8014690 <tcp_send_empty_ack>
 8012714:	e000      	b.n	8012718 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012716:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801271c:	2b00      	cmp	r3, #0
 801271e:	d05b      	beq.n	80127d8 <tcp_receive+0x50c>
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012724:	4b60      	ldr	r3, [pc, #384]	@ (80128a8 <tcp_receive+0x5dc>)
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	1ad3      	subs	r3, r2, r3
 801272a:	2b00      	cmp	r3, #0
 801272c:	da54      	bge.n	80127d8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801272e:	4b5f      	ldr	r3, [pc, #380]	@ (80128ac <tcp_receive+0x5e0>)
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	b29a      	uxth	r2, r3
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012738:	b29b      	uxth	r3, r3
 801273a:	1ad3      	subs	r3, r2, r3
 801273c:	b29b      	uxth	r3, r3
 801273e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012742:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801274c:	10db      	asrs	r3, r3, #3
 801274e:	b21b      	sxth	r3, r3
 8012750:	b29b      	uxth	r3, r3
 8012752:	1ad3      	subs	r3, r2, r3
 8012754:	b29b      	uxth	r3, r3
 8012756:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012760:	b29a      	uxth	r2, r3
 8012762:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012766:	4413      	add	r3, r2
 8012768:	b29b      	uxth	r3, r3
 801276a:	b21a      	sxth	r2, r3
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8012770:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8012774:	2b00      	cmp	r3, #0
 8012776:	da05      	bge.n	8012784 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012778:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801277c:	425b      	negs	r3, r3
 801277e:	b29b      	uxth	r3, r3
 8012780:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012784:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801278e:	109b      	asrs	r3, r3, #2
 8012790:	b21b      	sxth	r3, r3
 8012792:	b29b      	uxth	r3, r3
 8012794:	1ad3      	subs	r3, r2, r3
 8012796:	b29b      	uxth	r3, r3
 8012798:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80127a2:	b29a      	uxth	r2, r3
 80127a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80127a8:	4413      	add	r3, r2
 80127aa:	b29b      	uxth	r3, r3
 80127ac:	b21a      	sxth	r2, r3
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80127b8:	10db      	asrs	r3, r3, #3
 80127ba:	b21b      	sxth	r3, r3
 80127bc:	b29a      	uxth	r2, r3
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80127c4:	b29b      	uxth	r3, r3
 80127c6:	4413      	add	r3, r2
 80127c8:	b29b      	uxth	r3, r3
 80127ca:	b21a      	sxth	r2, r3
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2200      	movs	r2, #0
 80127d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80127d8:	4b35      	ldr	r3, [pc, #212]	@ (80128b0 <tcp_receive+0x5e4>)
 80127da:	881b      	ldrh	r3, [r3, #0]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	f000 84df 	beq.w	80131a0 <tcp_receive+0xed4>
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	7d1b      	ldrb	r3, [r3, #20]
 80127e6:	2b06      	cmp	r3, #6
 80127e8:	f200 84da 	bhi.w	80131a0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80127f0:	4b30      	ldr	r3, [pc, #192]	@ (80128b4 <tcp_receive+0x5e8>)
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	1ad3      	subs	r3, r2, r3
 80127f6:	3b01      	subs	r3, #1
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	f2c0 808f 	blt.w	801291c <tcp_receive+0x650>
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012802:	4b2b      	ldr	r3, [pc, #172]	@ (80128b0 <tcp_receive+0x5e4>)
 8012804:	881b      	ldrh	r3, [r3, #0]
 8012806:	4619      	mov	r1, r3
 8012808:	4b2a      	ldr	r3, [pc, #168]	@ (80128b4 <tcp_receive+0x5e8>)
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	440b      	add	r3, r1
 801280e:	1ad3      	subs	r3, r2, r3
 8012810:	3301      	adds	r3, #1
 8012812:	2b00      	cmp	r3, #0
 8012814:	f300 8082 	bgt.w	801291c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012818:	4b27      	ldr	r3, [pc, #156]	@ (80128b8 <tcp_receive+0x5ec>)
 801281a:	685b      	ldr	r3, [r3, #4]
 801281c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012822:	4b24      	ldr	r3, [pc, #144]	@ (80128b4 <tcp_receive+0x5e8>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	1ad3      	subs	r3, r2, r3
 8012828:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801282a:	4b23      	ldr	r3, [pc, #140]	@ (80128b8 <tcp_receive+0x5ec>)
 801282c:	685b      	ldr	r3, [r3, #4]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d106      	bne.n	8012840 <tcp_receive+0x574>
 8012832:	4b22      	ldr	r3, [pc, #136]	@ (80128bc <tcp_receive+0x5f0>)
 8012834:	f240 5294 	movw	r2, #1428	@ 0x594
 8012838:	4921      	ldr	r1, [pc, #132]	@ (80128c0 <tcp_receive+0x5f4>)
 801283a:	4822      	ldr	r0, [pc, #136]	@ (80128c4 <tcp_receive+0x5f8>)
 801283c:	f006 ff12 	bl	8019664 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012842:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8012846:	4293      	cmp	r3, r2
 8012848:	d906      	bls.n	8012858 <tcp_receive+0x58c>
 801284a:	4b1c      	ldr	r3, [pc, #112]	@ (80128bc <tcp_receive+0x5f0>)
 801284c:	f240 5295 	movw	r2, #1429	@ 0x595
 8012850:	491d      	ldr	r1, [pc, #116]	@ (80128c8 <tcp_receive+0x5fc>)
 8012852:	481c      	ldr	r0, [pc, #112]	@ (80128c4 <tcp_receive+0x5f8>)
 8012854:	f006 ff06 	bl	8019664 <iprintf>
      off = (u16_t)off32;
 8012858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801285a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801285e:	4b16      	ldr	r3, [pc, #88]	@ (80128b8 <tcp_receive+0x5ec>)
 8012860:	685b      	ldr	r3, [r3, #4]
 8012862:	891b      	ldrh	r3, [r3, #8]
 8012864:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012868:	429a      	cmp	r2, r3
 801286a:	d906      	bls.n	801287a <tcp_receive+0x5ae>
 801286c:	4b13      	ldr	r3, [pc, #76]	@ (80128bc <tcp_receive+0x5f0>)
 801286e:	f240 5297 	movw	r2, #1431	@ 0x597
 8012872:	4916      	ldr	r1, [pc, #88]	@ (80128cc <tcp_receive+0x600>)
 8012874:	4813      	ldr	r0, [pc, #76]	@ (80128c4 <tcp_receive+0x5f8>)
 8012876:	f006 fef5 	bl	8019664 <iprintf>
      inseg.len -= off;
 801287a:	4b0f      	ldr	r3, [pc, #60]	@ (80128b8 <tcp_receive+0x5ec>)
 801287c:	891a      	ldrh	r2, [r3, #8]
 801287e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012882:	1ad3      	subs	r3, r2, r3
 8012884:	b29a      	uxth	r2, r3
 8012886:	4b0c      	ldr	r3, [pc, #48]	@ (80128b8 <tcp_receive+0x5ec>)
 8012888:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801288a:	4b0b      	ldr	r3, [pc, #44]	@ (80128b8 <tcp_receive+0x5ec>)
 801288c:	685b      	ldr	r3, [r3, #4]
 801288e:	891a      	ldrh	r2, [r3, #8]
 8012890:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012894:	1ad3      	subs	r3, r2, r3
 8012896:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8012898:	e02a      	b.n	80128f0 <tcp_receive+0x624>
 801289a:	bf00      	nop
 801289c:	0801cd9c 	.word	0x0801cd9c
 80128a0:	0801cda4 	.word	0x0801cda4
 80128a4:	2000ebb0 	.word	0x2000ebb0
 80128a8:	2000ebac 	.word	0x2000ebac
 80128ac:	2000eb6c 	.word	0x2000eb6c
 80128b0:	2000ebb2 	.word	0x2000ebb2
 80128b4:	2000eba8 	.word	0x2000eba8
 80128b8:	2000eb84 	.word	0x2000eb84
 80128bc:	0801ca34 	.word	0x0801ca34
 80128c0:	0801cdac 	.word	0x0801cdac
 80128c4:	0801ca80 	.word	0x0801ca80
 80128c8:	0801cdbc 	.word	0x0801cdbc
 80128cc:	0801cdcc 	.word	0x0801cdcc
        off -= p->len;
 80128d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128d2:	895b      	ldrh	r3, [r3, #10]
 80128d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80128d8:	1ad3      	subs	r3, r2, r3
 80128da:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80128de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128e0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80128e2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80128e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128e6:	2200      	movs	r2, #0
 80128e8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80128ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80128f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128f2:	895b      	ldrh	r3, [r3, #10]
 80128f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d8e9      	bhi.n	80128d0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80128fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012900:	4619      	mov	r1, r3
 8012902:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8012904:	f7fc fac8 	bl	800ee98 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801290c:	4a90      	ldr	r2, [pc, #576]	@ (8012b50 <tcp_receive+0x884>)
 801290e:	6013      	str	r3, [r2, #0]
 8012910:	4b90      	ldr	r3, [pc, #576]	@ (8012b54 <tcp_receive+0x888>)
 8012912:	691b      	ldr	r3, [r3, #16]
 8012914:	4a8e      	ldr	r2, [pc, #568]	@ (8012b50 <tcp_receive+0x884>)
 8012916:	6812      	ldr	r2, [r2, #0]
 8012918:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801291a:	e00d      	b.n	8012938 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801291c:	4b8c      	ldr	r3, [pc, #560]	@ (8012b50 <tcp_receive+0x884>)
 801291e:	681a      	ldr	r2, [r3, #0]
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012924:	1ad3      	subs	r3, r2, r3
 8012926:	2b00      	cmp	r3, #0
 8012928:	da06      	bge.n	8012938 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	8b5b      	ldrh	r3, [r3, #26]
 801292e:	f043 0302 	orr.w	r3, r3, #2
 8012932:	b29a      	uxth	r2, r3
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012938:	4b85      	ldr	r3, [pc, #532]	@ (8012b50 <tcp_receive+0x884>)
 801293a:	681a      	ldr	r2, [r3, #0]
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012940:	1ad3      	subs	r3, r2, r3
 8012942:	2b00      	cmp	r3, #0
 8012944:	f2c0 8427 	blt.w	8013196 <tcp_receive+0xeca>
 8012948:	4b81      	ldr	r3, [pc, #516]	@ (8012b50 <tcp_receive+0x884>)
 801294a:	681a      	ldr	r2, [r3, #0]
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012950:	6879      	ldr	r1, [r7, #4]
 8012952:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012954:	440b      	add	r3, r1
 8012956:	1ad3      	subs	r3, r2, r3
 8012958:	3301      	adds	r3, #1
 801295a:	2b00      	cmp	r3, #0
 801295c:	f300 841b 	bgt.w	8013196 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012964:	4b7a      	ldr	r3, [pc, #488]	@ (8012b50 <tcp_receive+0x884>)
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	429a      	cmp	r2, r3
 801296a:	f040 8298 	bne.w	8012e9e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801296e:	4b79      	ldr	r3, [pc, #484]	@ (8012b54 <tcp_receive+0x888>)
 8012970:	891c      	ldrh	r4, [r3, #8]
 8012972:	4b78      	ldr	r3, [pc, #480]	@ (8012b54 <tcp_receive+0x888>)
 8012974:	691b      	ldr	r3, [r3, #16]
 8012976:	899b      	ldrh	r3, [r3, #12]
 8012978:	b29b      	uxth	r3, r3
 801297a:	4618      	mov	r0, r3
 801297c:	f7fa fc76 	bl	800d26c <lwip_htons>
 8012980:	4603      	mov	r3, r0
 8012982:	b2db      	uxtb	r3, r3
 8012984:	f003 0303 	and.w	r3, r3, #3
 8012988:	2b00      	cmp	r3, #0
 801298a:	d001      	beq.n	8012990 <tcp_receive+0x6c4>
 801298c:	2301      	movs	r3, #1
 801298e:	e000      	b.n	8012992 <tcp_receive+0x6c6>
 8012990:	2300      	movs	r3, #0
 8012992:	4423      	add	r3, r4
 8012994:	b29a      	uxth	r2, r3
 8012996:	4b70      	ldr	r3, [pc, #448]	@ (8012b58 <tcp_receive+0x88c>)
 8012998:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801299e:	4b6e      	ldr	r3, [pc, #440]	@ (8012b58 <tcp_receive+0x88c>)
 80129a0:	881b      	ldrh	r3, [r3, #0]
 80129a2:	429a      	cmp	r2, r3
 80129a4:	d274      	bcs.n	8012a90 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80129a6:	4b6b      	ldr	r3, [pc, #428]	@ (8012b54 <tcp_receive+0x888>)
 80129a8:	691b      	ldr	r3, [r3, #16]
 80129aa:	899b      	ldrh	r3, [r3, #12]
 80129ac:	b29b      	uxth	r3, r3
 80129ae:	4618      	mov	r0, r3
 80129b0:	f7fa fc5c 	bl	800d26c <lwip_htons>
 80129b4:	4603      	mov	r3, r0
 80129b6:	b2db      	uxtb	r3, r3
 80129b8:	f003 0301 	and.w	r3, r3, #1
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d01e      	beq.n	80129fe <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80129c0:	4b64      	ldr	r3, [pc, #400]	@ (8012b54 <tcp_receive+0x888>)
 80129c2:	691b      	ldr	r3, [r3, #16]
 80129c4:	899b      	ldrh	r3, [r3, #12]
 80129c6:	b29b      	uxth	r3, r3
 80129c8:	b21b      	sxth	r3, r3
 80129ca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80129ce:	b21c      	sxth	r4, r3
 80129d0:	4b60      	ldr	r3, [pc, #384]	@ (8012b54 <tcp_receive+0x888>)
 80129d2:	691b      	ldr	r3, [r3, #16]
 80129d4:	899b      	ldrh	r3, [r3, #12]
 80129d6:	b29b      	uxth	r3, r3
 80129d8:	4618      	mov	r0, r3
 80129da:	f7fa fc47 	bl	800d26c <lwip_htons>
 80129de:	4603      	mov	r3, r0
 80129e0:	b2db      	uxtb	r3, r3
 80129e2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80129e6:	b29b      	uxth	r3, r3
 80129e8:	4618      	mov	r0, r3
 80129ea:	f7fa fc3f 	bl	800d26c <lwip_htons>
 80129ee:	4603      	mov	r3, r0
 80129f0:	b21b      	sxth	r3, r3
 80129f2:	4323      	orrs	r3, r4
 80129f4:	b21a      	sxth	r2, r3
 80129f6:	4b57      	ldr	r3, [pc, #348]	@ (8012b54 <tcp_receive+0x888>)
 80129f8:	691b      	ldr	r3, [r3, #16]
 80129fa:	b292      	uxth	r2, r2
 80129fc:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012a02:	4b54      	ldr	r3, [pc, #336]	@ (8012b54 <tcp_receive+0x888>)
 8012a04:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012a06:	4b53      	ldr	r3, [pc, #332]	@ (8012b54 <tcp_receive+0x888>)
 8012a08:	691b      	ldr	r3, [r3, #16]
 8012a0a:	899b      	ldrh	r3, [r3, #12]
 8012a0c:	b29b      	uxth	r3, r3
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f7fa fc2c 	bl	800d26c <lwip_htons>
 8012a14:	4603      	mov	r3, r0
 8012a16:	b2db      	uxtb	r3, r3
 8012a18:	f003 0302 	and.w	r3, r3, #2
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d005      	beq.n	8012a2c <tcp_receive+0x760>
            inseg.len -= 1;
 8012a20:	4b4c      	ldr	r3, [pc, #304]	@ (8012b54 <tcp_receive+0x888>)
 8012a22:	891b      	ldrh	r3, [r3, #8]
 8012a24:	3b01      	subs	r3, #1
 8012a26:	b29a      	uxth	r2, r3
 8012a28:	4b4a      	ldr	r3, [pc, #296]	@ (8012b54 <tcp_receive+0x888>)
 8012a2a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012a2c:	4b49      	ldr	r3, [pc, #292]	@ (8012b54 <tcp_receive+0x888>)
 8012a2e:	685b      	ldr	r3, [r3, #4]
 8012a30:	4a48      	ldr	r2, [pc, #288]	@ (8012b54 <tcp_receive+0x888>)
 8012a32:	8912      	ldrh	r2, [r2, #8]
 8012a34:	4611      	mov	r1, r2
 8012a36:	4618      	mov	r0, r3
 8012a38:	f7fc f92e 	bl	800ec98 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012a3c:	4b45      	ldr	r3, [pc, #276]	@ (8012b54 <tcp_receive+0x888>)
 8012a3e:	891c      	ldrh	r4, [r3, #8]
 8012a40:	4b44      	ldr	r3, [pc, #272]	@ (8012b54 <tcp_receive+0x888>)
 8012a42:	691b      	ldr	r3, [r3, #16]
 8012a44:	899b      	ldrh	r3, [r3, #12]
 8012a46:	b29b      	uxth	r3, r3
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f7fa fc0f 	bl	800d26c <lwip_htons>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	b2db      	uxtb	r3, r3
 8012a52:	f003 0303 	and.w	r3, r3, #3
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d001      	beq.n	8012a5e <tcp_receive+0x792>
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	e000      	b.n	8012a60 <tcp_receive+0x794>
 8012a5e:	2300      	movs	r3, #0
 8012a60:	4423      	add	r3, r4
 8012a62:	b29a      	uxth	r2, r3
 8012a64:	4b3c      	ldr	r3, [pc, #240]	@ (8012b58 <tcp_receive+0x88c>)
 8012a66:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012a68:	4b3b      	ldr	r3, [pc, #236]	@ (8012b58 <tcp_receive+0x88c>)
 8012a6a:	881b      	ldrh	r3, [r3, #0]
 8012a6c:	461a      	mov	r2, r3
 8012a6e:	4b38      	ldr	r3, [pc, #224]	@ (8012b50 <tcp_receive+0x884>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	441a      	add	r2, r3
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a78:	6879      	ldr	r1, [r7, #4]
 8012a7a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012a7c:	440b      	add	r3, r1
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d006      	beq.n	8012a90 <tcp_receive+0x7c4>
 8012a82:	4b36      	ldr	r3, [pc, #216]	@ (8012b5c <tcp_receive+0x890>)
 8012a84:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8012a88:	4935      	ldr	r1, [pc, #212]	@ (8012b60 <tcp_receive+0x894>)
 8012a8a:	4836      	ldr	r0, [pc, #216]	@ (8012b64 <tcp_receive+0x898>)
 8012a8c:	f006 fdea 	bl	8019664 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	f000 80e6 	beq.w	8012c66 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8012b54 <tcp_receive+0x888>)
 8012a9c:	691b      	ldr	r3, [r3, #16]
 8012a9e:	899b      	ldrh	r3, [r3, #12]
 8012aa0:	b29b      	uxth	r3, r3
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f7fa fbe2 	bl	800d26c <lwip_htons>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	b2db      	uxtb	r3, r3
 8012aac:	f003 0301 	and.w	r3, r3, #1
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d010      	beq.n	8012ad6 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012ab4:	e00a      	b.n	8012acc <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012aba:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012ac0:	681a      	ldr	r2, [r3, #0]
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8012ac6:	68f8      	ldr	r0, [r7, #12]
 8012ac8:	f7fd fcfd 	bl	80104c6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d1f0      	bne.n	8012ab6 <tcp_receive+0x7ea>
 8012ad4:	e0c7      	b.n	8012c66 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012adc:	e051      	b.n	8012b82 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ae0:	691b      	ldr	r3, [r3, #16]
 8012ae2:	899b      	ldrh	r3, [r3, #12]
 8012ae4:	b29b      	uxth	r3, r3
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	f7fa fbc0 	bl	800d26c <lwip_htons>
 8012aec:	4603      	mov	r3, r0
 8012aee:	b2db      	uxtb	r3, r3
 8012af0:	f003 0301 	and.w	r3, r3, #1
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d03c      	beq.n	8012b72 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012af8:	4b16      	ldr	r3, [pc, #88]	@ (8012b54 <tcp_receive+0x888>)
 8012afa:	691b      	ldr	r3, [r3, #16]
 8012afc:	899b      	ldrh	r3, [r3, #12]
 8012afe:	b29b      	uxth	r3, r3
 8012b00:	4618      	mov	r0, r3
 8012b02:	f7fa fbb3 	bl	800d26c <lwip_htons>
 8012b06:	4603      	mov	r3, r0
 8012b08:	b2db      	uxtb	r3, r3
 8012b0a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d12f      	bne.n	8012b72 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012b12:	4b10      	ldr	r3, [pc, #64]	@ (8012b54 <tcp_receive+0x888>)
 8012b14:	691b      	ldr	r3, [r3, #16]
 8012b16:	899b      	ldrh	r3, [r3, #12]
 8012b18:	b29c      	uxth	r4, r3
 8012b1a:	2001      	movs	r0, #1
 8012b1c:	f7fa fba6 	bl	800d26c <lwip_htons>
 8012b20:	4603      	mov	r3, r0
 8012b22:	461a      	mov	r2, r3
 8012b24:	4b0b      	ldr	r3, [pc, #44]	@ (8012b54 <tcp_receive+0x888>)
 8012b26:	691b      	ldr	r3, [r3, #16]
 8012b28:	4322      	orrs	r2, r4
 8012b2a:	b292      	uxth	r2, r2
 8012b2c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012b2e:	4b09      	ldr	r3, [pc, #36]	@ (8012b54 <tcp_receive+0x888>)
 8012b30:	891c      	ldrh	r4, [r3, #8]
 8012b32:	4b08      	ldr	r3, [pc, #32]	@ (8012b54 <tcp_receive+0x888>)
 8012b34:	691b      	ldr	r3, [r3, #16]
 8012b36:	899b      	ldrh	r3, [r3, #12]
 8012b38:	b29b      	uxth	r3, r3
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f7fa fb96 	bl	800d26c <lwip_htons>
 8012b40:	4603      	mov	r3, r0
 8012b42:	b2db      	uxtb	r3, r3
 8012b44:	f003 0303 	and.w	r3, r3, #3
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d00d      	beq.n	8012b68 <tcp_receive+0x89c>
 8012b4c:	2301      	movs	r3, #1
 8012b4e:	e00c      	b.n	8012b6a <tcp_receive+0x89e>
 8012b50:	2000eba8 	.word	0x2000eba8
 8012b54:	2000eb84 	.word	0x2000eb84
 8012b58:	2000ebb2 	.word	0x2000ebb2
 8012b5c:	0801ca34 	.word	0x0801ca34
 8012b60:	0801cddc 	.word	0x0801cddc
 8012b64:	0801ca80 	.word	0x0801ca80
 8012b68:	2300      	movs	r3, #0
 8012b6a:	4423      	add	r3, r4
 8012b6c:	b29a      	uxth	r2, r3
 8012b6e:	4b98      	ldr	r3, [pc, #608]	@ (8012dd0 <tcp_receive+0xb04>)
 8012b70:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b74:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8012b7c:	6938      	ldr	r0, [r7, #16]
 8012b7e:	f7fd fca2 	bl	80104c6 <tcp_seg_free>
            while (next &&
 8012b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d00e      	beq.n	8012ba6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012b88:	4b91      	ldr	r3, [pc, #580]	@ (8012dd0 <tcp_receive+0xb04>)
 8012b8a:	881b      	ldrh	r3, [r3, #0]
 8012b8c:	461a      	mov	r2, r3
 8012b8e:	4b91      	ldr	r3, [pc, #580]	@ (8012dd4 <tcp_receive+0xb08>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	441a      	add	r2, r3
 8012b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b96:	691b      	ldr	r3, [r3, #16]
 8012b98:	685b      	ldr	r3, [r3, #4]
 8012b9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012b9c:	8909      	ldrh	r1, [r1, #8]
 8012b9e:	440b      	add	r3, r1
 8012ba0:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	da9b      	bge.n	8012ade <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d059      	beq.n	8012c60 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012bac:	4b88      	ldr	r3, [pc, #544]	@ (8012dd0 <tcp_receive+0xb04>)
 8012bae:	881b      	ldrh	r3, [r3, #0]
 8012bb0:	461a      	mov	r2, r3
 8012bb2:	4b88      	ldr	r3, [pc, #544]	@ (8012dd4 <tcp_receive+0xb08>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	441a      	add	r2, r3
 8012bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012bba:	691b      	ldr	r3, [r3, #16]
 8012bbc:	685b      	ldr	r3, [r3, #4]
 8012bbe:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	dd4d      	ble.n	8012c60 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012bc6:	691b      	ldr	r3, [r3, #16]
 8012bc8:	685b      	ldr	r3, [r3, #4]
 8012bca:	b29a      	uxth	r2, r3
 8012bcc:	4b81      	ldr	r3, [pc, #516]	@ (8012dd4 <tcp_receive+0xb08>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	b29b      	uxth	r3, r3
 8012bd2:	1ad3      	subs	r3, r2, r3
 8012bd4:	b29a      	uxth	r2, r3
 8012bd6:	4b80      	ldr	r3, [pc, #512]	@ (8012dd8 <tcp_receive+0xb0c>)
 8012bd8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012bda:	4b7f      	ldr	r3, [pc, #508]	@ (8012dd8 <tcp_receive+0xb0c>)
 8012bdc:	691b      	ldr	r3, [r3, #16]
 8012bde:	899b      	ldrh	r3, [r3, #12]
 8012be0:	b29b      	uxth	r3, r3
 8012be2:	4618      	mov	r0, r3
 8012be4:	f7fa fb42 	bl	800d26c <lwip_htons>
 8012be8:	4603      	mov	r3, r0
 8012bea:	b2db      	uxtb	r3, r3
 8012bec:	f003 0302 	and.w	r3, r3, #2
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d005      	beq.n	8012c00 <tcp_receive+0x934>
                inseg.len -= 1;
 8012bf4:	4b78      	ldr	r3, [pc, #480]	@ (8012dd8 <tcp_receive+0xb0c>)
 8012bf6:	891b      	ldrh	r3, [r3, #8]
 8012bf8:	3b01      	subs	r3, #1
 8012bfa:	b29a      	uxth	r2, r3
 8012bfc:	4b76      	ldr	r3, [pc, #472]	@ (8012dd8 <tcp_receive+0xb0c>)
 8012bfe:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012c00:	4b75      	ldr	r3, [pc, #468]	@ (8012dd8 <tcp_receive+0xb0c>)
 8012c02:	685b      	ldr	r3, [r3, #4]
 8012c04:	4a74      	ldr	r2, [pc, #464]	@ (8012dd8 <tcp_receive+0xb0c>)
 8012c06:	8912      	ldrh	r2, [r2, #8]
 8012c08:	4611      	mov	r1, r2
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f7fc f844 	bl	800ec98 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012c10:	4b71      	ldr	r3, [pc, #452]	@ (8012dd8 <tcp_receive+0xb0c>)
 8012c12:	891c      	ldrh	r4, [r3, #8]
 8012c14:	4b70      	ldr	r3, [pc, #448]	@ (8012dd8 <tcp_receive+0xb0c>)
 8012c16:	691b      	ldr	r3, [r3, #16]
 8012c18:	899b      	ldrh	r3, [r3, #12]
 8012c1a:	b29b      	uxth	r3, r3
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f7fa fb25 	bl	800d26c <lwip_htons>
 8012c22:	4603      	mov	r3, r0
 8012c24:	b2db      	uxtb	r3, r3
 8012c26:	f003 0303 	and.w	r3, r3, #3
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d001      	beq.n	8012c32 <tcp_receive+0x966>
 8012c2e:	2301      	movs	r3, #1
 8012c30:	e000      	b.n	8012c34 <tcp_receive+0x968>
 8012c32:	2300      	movs	r3, #0
 8012c34:	4423      	add	r3, r4
 8012c36:	b29a      	uxth	r2, r3
 8012c38:	4b65      	ldr	r3, [pc, #404]	@ (8012dd0 <tcp_receive+0xb04>)
 8012c3a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012c3c:	4b64      	ldr	r3, [pc, #400]	@ (8012dd0 <tcp_receive+0xb04>)
 8012c3e:	881b      	ldrh	r3, [r3, #0]
 8012c40:	461a      	mov	r2, r3
 8012c42:	4b64      	ldr	r3, [pc, #400]	@ (8012dd4 <tcp_receive+0xb08>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	441a      	add	r2, r3
 8012c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012c4a:	691b      	ldr	r3, [r3, #16]
 8012c4c:	685b      	ldr	r3, [r3, #4]
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d006      	beq.n	8012c60 <tcp_receive+0x994>
 8012c52:	4b62      	ldr	r3, [pc, #392]	@ (8012ddc <tcp_receive+0xb10>)
 8012c54:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8012c58:	4961      	ldr	r1, [pc, #388]	@ (8012de0 <tcp_receive+0xb14>)
 8012c5a:	4862      	ldr	r0, [pc, #392]	@ (8012de4 <tcp_receive+0xb18>)
 8012c5c:	f006 fd02 	bl	8019664 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012c64:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012c66:	4b5a      	ldr	r3, [pc, #360]	@ (8012dd0 <tcp_receive+0xb04>)
 8012c68:	881b      	ldrh	r3, [r3, #0]
 8012c6a:	461a      	mov	r2, r3
 8012c6c:	4b59      	ldr	r3, [pc, #356]	@ (8012dd4 <tcp_receive+0xb08>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	441a      	add	r2, r3
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012c7a:	4b55      	ldr	r3, [pc, #340]	@ (8012dd0 <tcp_receive+0xb04>)
 8012c7c:	881b      	ldrh	r3, [r3, #0]
 8012c7e:	429a      	cmp	r2, r3
 8012c80:	d206      	bcs.n	8012c90 <tcp_receive+0x9c4>
 8012c82:	4b56      	ldr	r3, [pc, #344]	@ (8012ddc <tcp_receive+0xb10>)
 8012c84:	f240 6207 	movw	r2, #1543	@ 0x607
 8012c88:	4957      	ldr	r1, [pc, #348]	@ (8012de8 <tcp_receive+0xb1c>)
 8012c8a:	4856      	ldr	r0, [pc, #344]	@ (8012de4 <tcp_receive+0xb18>)
 8012c8c:	f006 fcea 	bl	8019664 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012c94:	4b4e      	ldr	r3, [pc, #312]	@ (8012dd0 <tcp_receive+0xb04>)
 8012c96:	881b      	ldrh	r3, [r3, #0]
 8012c98:	1ad3      	subs	r3, r2, r3
 8012c9a:	b29a      	uxth	r2, r3
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f7fc ff2f 	bl	800fb04 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012ca6:	4b4c      	ldr	r3, [pc, #304]	@ (8012dd8 <tcp_receive+0xb0c>)
 8012ca8:	685b      	ldr	r3, [r3, #4]
 8012caa:	891b      	ldrh	r3, [r3, #8]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d006      	beq.n	8012cbe <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8012cb0:	4b49      	ldr	r3, [pc, #292]	@ (8012dd8 <tcp_receive+0xb0c>)
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	4a4d      	ldr	r2, [pc, #308]	@ (8012dec <tcp_receive+0xb20>)
 8012cb6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012cb8:	4b47      	ldr	r3, [pc, #284]	@ (8012dd8 <tcp_receive+0xb0c>)
 8012cba:	2200      	movs	r2, #0
 8012cbc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012cbe:	4b46      	ldr	r3, [pc, #280]	@ (8012dd8 <tcp_receive+0xb0c>)
 8012cc0:	691b      	ldr	r3, [r3, #16]
 8012cc2:	899b      	ldrh	r3, [r3, #12]
 8012cc4:	b29b      	uxth	r3, r3
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f7fa fad0 	bl	800d26c <lwip_htons>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	b2db      	uxtb	r3, r3
 8012cd0:	f003 0301 	and.w	r3, r3, #1
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	f000 80b8 	beq.w	8012e4a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012cda:	4b45      	ldr	r3, [pc, #276]	@ (8012df0 <tcp_receive+0xb24>)
 8012cdc:	781b      	ldrb	r3, [r3, #0]
 8012cde:	f043 0320 	orr.w	r3, r3, #32
 8012ce2:	b2da      	uxtb	r2, r3
 8012ce4:	4b42      	ldr	r3, [pc, #264]	@ (8012df0 <tcp_receive+0xb24>)
 8012ce6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012ce8:	e0af      	b.n	8012e4a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012cee:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012cf4:	691b      	ldr	r3, [r3, #16]
 8012cf6:	685b      	ldr	r3, [r3, #4]
 8012cf8:	4a36      	ldr	r2, [pc, #216]	@ (8012dd4 <tcp_receive+0xb08>)
 8012cfa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	891b      	ldrh	r3, [r3, #8]
 8012d00:	461c      	mov	r4, r3
 8012d02:	68bb      	ldr	r3, [r7, #8]
 8012d04:	691b      	ldr	r3, [r3, #16]
 8012d06:	899b      	ldrh	r3, [r3, #12]
 8012d08:	b29b      	uxth	r3, r3
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f7fa faae 	bl	800d26c <lwip_htons>
 8012d10:	4603      	mov	r3, r0
 8012d12:	b2db      	uxtb	r3, r3
 8012d14:	f003 0303 	and.w	r3, r3, #3
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d001      	beq.n	8012d20 <tcp_receive+0xa54>
 8012d1c:	2301      	movs	r3, #1
 8012d1e:	e000      	b.n	8012d22 <tcp_receive+0xa56>
 8012d20:	2300      	movs	r3, #0
 8012d22:	191a      	adds	r2, r3, r4
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d28:	441a      	add	r2, r3
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012d32:	461c      	mov	r4, r3
 8012d34:	68bb      	ldr	r3, [r7, #8]
 8012d36:	891b      	ldrh	r3, [r3, #8]
 8012d38:	461d      	mov	r5, r3
 8012d3a:	68bb      	ldr	r3, [r7, #8]
 8012d3c:	691b      	ldr	r3, [r3, #16]
 8012d3e:	899b      	ldrh	r3, [r3, #12]
 8012d40:	b29b      	uxth	r3, r3
 8012d42:	4618      	mov	r0, r3
 8012d44:	f7fa fa92 	bl	800d26c <lwip_htons>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	b2db      	uxtb	r3, r3
 8012d4c:	f003 0303 	and.w	r3, r3, #3
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d001      	beq.n	8012d58 <tcp_receive+0xa8c>
 8012d54:	2301      	movs	r3, #1
 8012d56:	e000      	b.n	8012d5a <tcp_receive+0xa8e>
 8012d58:	2300      	movs	r3, #0
 8012d5a:	442b      	add	r3, r5
 8012d5c:	429c      	cmp	r4, r3
 8012d5e:	d206      	bcs.n	8012d6e <tcp_receive+0xaa2>
 8012d60:	4b1e      	ldr	r3, [pc, #120]	@ (8012ddc <tcp_receive+0xb10>)
 8012d62:	f240 622b 	movw	r2, #1579	@ 0x62b
 8012d66:	4923      	ldr	r1, [pc, #140]	@ (8012df4 <tcp_receive+0xb28>)
 8012d68:	481e      	ldr	r0, [pc, #120]	@ (8012de4 <tcp_receive+0xb18>)
 8012d6a:	f006 fc7b 	bl	8019664 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012d6e:	68bb      	ldr	r3, [r7, #8]
 8012d70:	891b      	ldrh	r3, [r3, #8]
 8012d72:	461c      	mov	r4, r3
 8012d74:	68bb      	ldr	r3, [r7, #8]
 8012d76:	691b      	ldr	r3, [r3, #16]
 8012d78:	899b      	ldrh	r3, [r3, #12]
 8012d7a:	b29b      	uxth	r3, r3
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	f7fa fa75 	bl	800d26c <lwip_htons>
 8012d82:	4603      	mov	r3, r0
 8012d84:	b2db      	uxtb	r3, r3
 8012d86:	f003 0303 	and.w	r3, r3, #3
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d001      	beq.n	8012d92 <tcp_receive+0xac6>
 8012d8e:	2301      	movs	r3, #1
 8012d90:	e000      	b.n	8012d94 <tcp_receive+0xac8>
 8012d92:	2300      	movs	r3, #0
 8012d94:	1919      	adds	r1, r3, r4
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012d9a:	b28b      	uxth	r3, r1
 8012d9c:	1ad3      	subs	r3, r2, r3
 8012d9e:	b29a      	uxth	r2, r3
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012da4:	6878      	ldr	r0, [r7, #4]
 8012da6:	f7fc fead 	bl	800fb04 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012daa:	68bb      	ldr	r3, [r7, #8]
 8012dac:	685b      	ldr	r3, [r3, #4]
 8012dae:	891b      	ldrh	r3, [r3, #8]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d028      	beq.n	8012e06 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012db4:	4b0d      	ldr	r3, [pc, #52]	@ (8012dec <tcp_receive+0xb20>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d01d      	beq.n	8012df8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8012dec <tcp_receive+0xb20>)
 8012dbe:	681a      	ldr	r2, [r3, #0]
 8012dc0:	68bb      	ldr	r3, [r7, #8]
 8012dc2:	685b      	ldr	r3, [r3, #4]
 8012dc4:	4619      	mov	r1, r3
 8012dc6:	4610      	mov	r0, r2
 8012dc8:	f7fc f9ba 	bl	800f140 <pbuf_cat>
 8012dcc:	e018      	b.n	8012e00 <tcp_receive+0xb34>
 8012dce:	bf00      	nop
 8012dd0:	2000ebb2 	.word	0x2000ebb2
 8012dd4:	2000eba8 	.word	0x2000eba8
 8012dd8:	2000eb84 	.word	0x2000eb84
 8012ddc:	0801ca34 	.word	0x0801ca34
 8012de0:	0801ce14 	.word	0x0801ce14
 8012de4:	0801ca80 	.word	0x0801ca80
 8012de8:	0801ce50 	.word	0x0801ce50
 8012dec:	2000ebb8 	.word	0x2000ebb8
 8012df0:	2000ebb5 	.word	0x2000ebb5
 8012df4:	0801ce70 	.word	0x0801ce70
            } else {
              recv_data = cseg->p;
 8012df8:	68bb      	ldr	r3, [r7, #8]
 8012dfa:	685b      	ldr	r3, [r3, #4]
 8012dfc:	4a70      	ldr	r2, [pc, #448]	@ (8012fc0 <tcp_receive+0xcf4>)
 8012dfe:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012e00:	68bb      	ldr	r3, [r7, #8]
 8012e02:	2200      	movs	r2, #0
 8012e04:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012e06:	68bb      	ldr	r3, [r7, #8]
 8012e08:	691b      	ldr	r3, [r3, #16]
 8012e0a:	899b      	ldrh	r3, [r3, #12]
 8012e0c:	b29b      	uxth	r3, r3
 8012e0e:	4618      	mov	r0, r3
 8012e10:	f7fa fa2c 	bl	800d26c <lwip_htons>
 8012e14:	4603      	mov	r3, r0
 8012e16:	b2db      	uxtb	r3, r3
 8012e18:	f003 0301 	and.w	r3, r3, #1
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d00d      	beq.n	8012e3c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012e20:	4b68      	ldr	r3, [pc, #416]	@ (8012fc4 <tcp_receive+0xcf8>)
 8012e22:	781b      	ldrb	r3, [r3, #0]
 8012e24:	f043 0320 	orr.w	r3, r3, #32
 8012e28:	b2da      	uxtb	r2, r3
 8012e2a:	4b66      	ldr	r3, [pc, #408]	@ (8012fc4 <tcp_receive+0xcf8>)
 8012e2c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	7d1b      	ldrb	r3, [r3, #20]
 8012e32:	2b04      	cmp	r3, #4
 8012e34:	d102      	bne.n	8012e3c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	2207      	movs	r2, #7
 8012e3a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012e3c:	68bb      	ldr	r3, [r7, #8]
 8012e3e:	681a      	ldr	r2, [r3, #0]
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8012e44:	68b8      	ldr	r0, [r7, #8]
 8012e46:	f7fd fb3e 	bl	80104c6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d008      	beq.n	8012e64 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012e56:	691b      	ldr	r3, [r3, #16]
 8012e58:	685a      	ldr	r2, [r3, #4]
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8012e5e:	429a      	cmp	r2, r3
 8012e60:	f43f af43 	beq.w	8012cea <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	8b5b      	ldrh	r3, [r3, #26]
 8012e68:	f003 0301 	and.w	r3, r3, #1
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d00e      	beq.n	8012e8e <tcp_receive+0xbc2>
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	8b5b      	ldrh	r3, [r3, #26]
 8012e74:	f023 0301 	bic.w	r3, r3, #1
 8012e78:	b29a      	uxth	r2, r3
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	835a      	strh	r2, [r3, #26]
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	8b5b      	ldrh	r3, [r3, #26]
 8012e82:	f043 0302 	orr.w	r3, r3, #2
 8012e86:	b29a      	uxth	r2, r3
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012e8c:	e187      	b.n	801319e <tcp_receive+0xed2>
        tcp_ack(pcb);
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	8b5b      	ldrh	r3, [r3, #26]
 8012e92:	f043 0301 	orr.w	r3, r3, #1
 8012e96:	b29a      	uxth	r2, r3
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012e9c:	e17f      	b.n	801319e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d106      	bne.n	8012eb4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012ea6:	4848      	ldr	r0, [pc, #288]	@ (8012fc8 <tcp_receive+0xcfc>)
 8012ea8:	f7fd fb26 	bl	80104f8 <tcp_seg_copy>
 8012eac:	4602      	mov	r2, r0
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	675a      	str	r2, [r3, #116]	@ 0x74
 8012eb2:	e16c      	b.n	801318e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012ebe:	e156      	b.n	801316e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8012ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ec2:	691b      	ldr	r3, [r3, #16]
 8012ec4:	685a      	ldr	r2, [r3, #4]
 8012ec6:	4b41      	ldr	r3, [pc, #260]	@ (8012fcc <tcp_receive+0xd00>)
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	d11d      	bne.n	8012f0a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012ece:	4b3e      	ldr	r3, [pc, #248]	@ (8012fc8 <tcp_receive+0xcfc>)
 8012ed0:	891a      	ldrh	r2, [r3, #8]
 8012ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ed4:	891b      	ldrh	r3, [r3, #8]
 8012ed6:	429a      	cmp	r2, r3
 8012ed8:	f240 814e 	bls.w	8013178 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012edc:	483a      	ldr	r0, [pc, #232]	@ (8012fc8 <tcp_receive+0xcfc>)
 8012ede:	f7fd fb0b 	bl	80104f8 <tcp_seg_copy>
 8012ee2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012ee4:	697b      	ldr	r3, [r7, #20]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	f000 8148 	beq.w	801317c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8012eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d003      	beq.n	8012efa <tcp_receive+0xc2e>
                    prev->next = cseg;
 8012ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ef4:	697a      	ldr	r2, [r7, #20]
 8012ef6:	601a      	str	r2, [r3, #0]
 8012ef8:	e002      	b.n	8012f00 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	697a      	ldr	r2, [r7, #20]
 8012efe:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012f00:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012f02:	6978      	ldr	r0, [r7, #20]
 8012f04:	f7ff f8de 	bl	80120c4 <tcp_oos_insert_segment>
                }
                break;
 8012f08:	e138      	b.n	801317c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d117      	bne.n	8012f40 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012f10:	4b2e      	ldr	r3, [pc, #184]	@ (8012fcc <tcp_receive+0xd00>)
 8012f12:	681a      	ldr	r2, [r3, #0]
 8012f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f16:	691b      	ldr	r3, [r3, #16]
 8012f18:	685b      	ldr	r3, [r3, #4]
 8012f1a:	1ad3      	subs	r3, r2, r3
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	da57      	bge.n	8012fd0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012f20:	4829      	ldr	r0, [pc, #164]	@ (8012fc8 <tcp_receive+0xcfc>)
 8012f22:	f7fd fae9 	bl	80104f8 <tcp_seg_copy>
 8012f26:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012f28:	69bb      	ldr	r3, [r7, #24]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	f000 8128 	beq.w	8013180 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	69ba      	ldr	r2, [r7, #24]
 8012f34:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012f36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012f38:	69b8      	ldr	r0, [r7, #24]
 8012f3a:	f7ff f8c3 	bl	80120c4 <tcp_oos_insert_segment>
                  }
                  break;
 8012f3e:	e11f      	b.n	8013180 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012f40:	4b22      	ldr	r3, [pc, #136]	@ (8012fcc <tcp_receive+0xd00>)
 8012f42:	681a      	ldr	r2, [r3, #0]
 8012f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f46:	691b      	ldr	r3, [r3, #16]
 8012f48:	685b      	ldr	r3, [r3, #4]
 8012f4a:	1ad3      	subs	r3, r2, r3
 8012f4c:	3b01      	subs	r3, #1
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	db3e      	blt.n	8012fd0 <tcp_receive+0xd04>
 8012f52:	4b1e      	ldr	r3, [pc, #120]	@ (8012fcc <tcp_receive+0xd00>)
 8012f54:	681a      	ldr	r2, [r3, #0]
 8012f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f58:	691b      	ldr	r3, [r3, #16]
 8012f5a:	685b      	ldr	r3, [r3, #4]
 8012f5c:	1ad3      	subs	r3, r2, r3
 8012f5e:	3301      	adds	r3, #1
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	dc35      	bgt.n	8012fd0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012f64:	4818      	ldr	r0, [pc, #96]	@ (8012fc8 <tcp_receive+0xcfc>)
 8012f66:	f7fd fac7 	bl	80104f8 <tcp_seg_copy>
 8012f6a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012f6c:	69fb      	ldr	r3, [r7, #28]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	f000 8108 	beq.w	8013184 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f76:	691b      	ldr	r3, [r3, #16]
 8012f78:	685b      	ldr	r3, [r3, #4]
 8012f7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012f7c:	8912      	ldrh	r2, [r2, #8]
 8012f7e:	441a      	add	r2, r3
 8012f80:	4b12      	ldr	r3, [pc, #72]	@ (8012fcc <tcp_receive+0xd00>)
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	1ad3      	subs	r3, r2, r3
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	dd12      	ble.n	8012fb0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012f8a:	4b10      	ldr	r3, [pc, #64]	@ (8012fcc <tcp_receive+0xd00>)
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	b29a      	uxth	r2, r3
 8012f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f92:	691b      	ldr	r3, [r3, #16]
 8012f94:	685b      	ldr	r3, [r3, #4]
 8012f96:	b29b      	uxth	r3, r3
 8012f98:	1ad3      	subs	r3, r2, r3
 8012f9a:	b29a      	uxth	r2, r3
 8012f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f9e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012fa2:	685a      	ldr	r2, [r3, #4]
 8012fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012fa6:	891b      	ldrh	r3, [r3, #8]
 8012fa8:	4619      	mov	r1, r3
 8012faa:	4610      	mov	r0, r2
 8012fac:	f7fb fe74 	bl	800ec98 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012fb2:	69fa      	ldr	r2, [r7, #28]
 8012fb4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012fb6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012fb8:	69f8      	ldr	r0, [r7, #28]
 8012fba:	f7ff f883 	bl	80120c4 <tcp_oos_insert_segment>
                  }
                  break;
 8012fbe:	e0e1      	b.n	8013184 <tcp_receive+0xeb8>
 8012fc0:	2000ebb8 	.word	0x2000ebb8
 8012fc4:	2000ebb5 	.word	0x2000ebb5
 8012fc8:	2000eb84 	.word	0x2000eb84
 8012fcc:	2000eba8 	.word	0x2000eba8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fd2:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	f040 80c5 	bne.w	8013168 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012fde:	4b7f      	ldr	r3, [pc, #508]	@ (80131dc <tcp_receive+0xf10>)
 8012fe0:	681a      	ldr	r2, [r3, #0]
 8012fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fe4:	691b      	ldr	r3, [r3, #16]
 8012fe6:	685b      	ldr	r3, [r3, #4]
 8012fe8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	f340 80bc 	ble.w	8013168 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ff2:	691b      	ldr	r3, [r3, #16]
 8012ff4:	899b      	ldrh	r3, [r3, #12]
 8012ff6:	b29b      	uxth	r3, r3
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f7fa f937 	bl	800d26c <lwip_htons>
 8012ffe:	4603      	mov	r3, r0
 8013000:	b2db      	uxtb	r3, r3
 8013002:	f003 0301 	and.w	r3, r3, #1
 8013006:	2b00      	cmp	r3, #0
 8013008:	f040 80be 	bne.w	8013188 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801300c:	4874      	ldr	r0, [pc, #464]	@ (80131e0 <tcp_receive+0xf14>)
 801300e:	f7fd fa73 	bl	80104f8 <tcp_seg_copy>
 8013012:	4602      	mov	r2, r0
 8013014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013016:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	2b00      	cmp	r3, #0
 801301e:	f000 80b5 	beq.w	801318c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013024:	691b      	ldr	r3, [r3, #16]
 8013026:	685b      	ldr	r3, [r3, #4]
 8013028:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801302a:	8912      	ldrh	r2, [r2, #8]
 801302c:	441a      	add	r2, r3
 801302e:	4b6b      	ldr	r3, [pc, #428]	@ (80131dc <tcp_receive+0xf10>)
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	1ad3      	subs	r3, r2, r3
 8013034:	2b00      	cmp	r3, #0
 8013036:	dd12      	ble.n	801305e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013038:	4b68      	ldr	r3, [pc, #416]	@ (80131dc <tcp_receive+0xf10>)
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	b29a      	uxth	r2, r3
 801303e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013040:	691b      	ldr	r3, [r3, #16]
 8013042:	685b      	ldr	r3, [r3, #4]
 8013044:	b29b      	uxth	r3, r3
 8013046:	1ad3      	subs	r3, r2, r3
 8013048:	b29a      	uxth	r2, r3
 801304a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801304c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801304e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013050:	685a      	ldr	r2, [r3, #4]
 8013052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013054:	891b      	ldrh	r3, [r3, #8]
 8013056:	4619      	mov	r1, r3
 8013058:	4610      	mov	r0, r2
 801305a:	f7fb fe1d 	bl	800ec98 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801305e:	4b61      	ldr	r3, [pc, #388]	@ (80131e4 <tcp_receive+0xf18>)
 8013060:	881b      	ldrh	r3, [r3, #0]
 8013062:	461a      	mov	r2, r3
 8013064:	4b5d      	ldr	r3, [pc, #372]	@ (80131dc <tcp_receive+0xf10>)
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	441a      	add	r2, r3
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801306e:	6879      	ldr	r1, [r7, #4]
 8013070:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013072:	440b      	add	r3, r1
 8013074:	1ad3      	subs	r3, r2, r3
 8013076:	2b00      	cmp	r3, #0
 8013078:	f340 8088 	ble.w	801318c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801307c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	691b      	ldr	r3, [r3, #16]
 8013082:	899b      	ldrh	r3, [r3, #12]
 8013084:	b29b      	uxth	r3, r3
 8013086:	4618      	mov	r0, r3
 8013088:	f7fa f8f0 	bl	800d26c <lwip_htons>
 801308c:	4603      	mov	r3, r0
 801308e:	b2db      	uxtb	r3, r3
 8013090:	f003 0301 	and.w	r3, r3, #1
 8013094:	2b00      	cmp	r3, #0
 8013096:	d021      	beq.n	80130dc <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	691b      	ldr	r3, [r3, #16]
 801309e:	899b      	ldrh	r3, [r3, #12]
 80130a0:	b29b      	uxth	r3, r3
 80130a2:	b21b      	sxth	r3, r3
 80130a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80130a8:	b21c      	sxth	r4, r3
 80130aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	691b      	ldr	r3, [r3, #16]
 80130b0:	899b      	ldrh	r3, [r3, #12]
 80130b2:	b29b      	uxth	r3, r3
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7fa f8d9 	bl	800d26c <lwip_htons>
 80130ba:	4603      	mov	r3, r0
 80130bc:	b2db      	uxtb	r3, r3
 80130be:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80130c2:	b29b      	uxth	r3, r3
 80130c4:	4618      	mov	r0, r3
 80130c6:	f7fa f8d1 	bl	800d26c <lwip_htons>
 80130ca:	4603      	mov	r3, r0
 80130cc:	b21b      	sxth	r3, r3
 80130ce:	4323      	orrs	r3, r4
 80130d0:	b21a      	sxth	r2, r3
 80130d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	691b      	ldr	r3, [r3, #16]
 80130d8:	b292      	uxth	r2, r2
 80130da:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130e0:	b29a      	uxth	r2, r3
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80130e6:	4413      	add	r3, r2
 80130e8:	b299      	uxth	r1, r3
 80130ea:	4b3c      	ldr	r3, [pc, #240]	@ (80131dc <tcp_receive+0xf10>)
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	b29a      	uxth	r2, r3
 80130f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	1a8a      	subs	r2, r1, r2
 80130f6:	b292      	uxth	r2, r2
 80130f8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80130fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	685a      	ldr	r2, [r3, #4]
 8013100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	891b      	ldrh	r3, [r3, #8]
 8013106:	4619      	mov	r1, r3
 8013108:	4610      	mov	r0, r2
 801310a:	f7fb fdc5 	bl	800ec98 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801310e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	891c      	ldrh	r4, [r3, #8]
 8013114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	691b      	ldr	r3, [r3, #16]
 801311a:	899b      	ldrh	r3, [r3, #12]
 801311c:	b29b      	uxth	r3, r3
 801311e:	4618      	mov	r0, r3
 8013120:	f7fa f8a4 	bl	800d26c <lwip_htons>
 8013124:	4603      	mov	r3, r0
 8013126:	b2db      	uxtb	r3, r3
 8013128:	f003 0303 	and.w	r3, r3, #3
 801312c:	2b00      	cmp	r3, #0
 801312e:	d001      	beq.n	8013134 <tcp_receive+0xe68>
 8013130:	2301      	movs	r3, #1
 8013132:	e000      	b.n	8013136 <tcp_receive+0xe6a>
 8013134:	2300      	movs	r3, #0
 8013136:	4423      	add	r3, r4
 8013138:	b29a      	uxth	r2, r3
 801313a:	4b2a      	ldr	r3, [pc, #168]	@ (80131e4 <tcp_receive+0xf18>)
 801313c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801313e:	4b29      	ldr	r3, [pc, #164]	@ (80131e4 <tcp_receive+0xf18>)
 8013140:	881b      	ldrh	r3, [r3, #0]
 8013142:	461a      	mov	r2, r3
 8013144:	4b25      	ldr	r3, [pc, #148]	@ (80131dc <tcp_receive+0xf10>)
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	441a      	add	r2, r3
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801314e:	6879      	ldr	r1, [r7, #4]
 8013150:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013152:	440b      	add	r3, r1
 8013154:	429a      	cmp	r2, r3
 8013156:	d019      	beq.n	801318c <tcp_receive+0xec0>
 8013158:	4b23      	ldr	r3, [pc, #140]	@ (80131e8 <tcp_receive+0xf1c>)
 801315a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801315e:	4923      	ldr	r1, [pc, #140]	@ (80131ec <tcp_receive+0xf20>)
 8013160:	4823      	ldr	r0, [pc, #140]	@ (80131f0 <tcp_receive+0xf24>)
 8013162:	f006 fa7f 	bl	8019664 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013166:	e011      	b.n	801318c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801316e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013170:	2b00      	cmp	r3, #0
 8013172:	f47f aea5 	bne.w	8012ec0 <tcp_receive+0xbf4>
 8013176:	e00a      	b.n	801318e <tcp_receive+0xec2>
                break;
 8013178:	bf00      	nop
 801317a:	e008      	b.n	801318e <tcp_receive+0xec2>
                break;
 801317c:	bf00      	nop
 801317e:	e006      	b.n	801318e <tcp_receive+0xec2>
                  break;
 8013180:	bf00      	nop
 8013182:	e004      	b.n	801318e <tcp_receive+0xec2>
                  break;
 8013184:	bf00      	nop
 8013186:	e002      	b.n	801318e <tcp_receive+0xec2>
                  break;
 8013188:	bf00      	nop
 801318a:	e000      	b.n	801318e <tcp_receive+0xec2>
                break;
 801318c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801318e:	6878      	ldr	r0, [r7, #4]
 8013190:	f001 fa7e 	bl	8014690 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013194:	e003      	b.n	801319e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013196:	6878      	ldr	r0, [r7, #4]
 8013198:	f001 fa7a 	bl	8014690 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801319c:	e01a      	b.n	80131d4 <tcp_receive+0xf08>
 801319e:	e019      	b.n	80131d4 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80131a0:	4b0e      	ldr	r3, [pc, #56]	@ (80131dc <tcp_receive+0xf10>)
 80131a2:	681a      	ldr	r2, [r3, #0]
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131a8:	1ad3      	subs	r3, r2, r3
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	db0a      	blt.n	80131c4 <tcp_receive+0xef8>
 80131ae:	4b0b      	ldr	r3, [pc, #44]	@ (80131dc <tcp_receive+0xf10>)
 80131b0:	681a      	ldr	r2, [r3, #0]
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131b6:	6879      	ldr	r1, [r7, #4]
 80131b8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80131ba:	440b      	add	r3, r1
 80131bc:	1ad3      	subs	r3, r2, r3
 80131be:	3301      	adds	r3, #1
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	dd07      	ble.n	80131d4 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	8b5b      	ldrh	r3, [r3, #26]
 80131c8:	f043 0302 	orr.w	r3, r3, #2
 80131cc:	b29a      	uxth	r2, r3
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80131d2:	e7ff      	b.n	80131d4 <tcp_receive+0xf08>
 80131d4:	bf00      	nop
 80131d6:	3750      	adds	r7, #80	@ 0x50
 80131d8:	46bd      	mov	sp, r7
 80131da:	bdb0      	pop	{r4, r5, r7, pc}
 80131dc:	2000eba8 	.word	0x2000eba8
 80131e0:	2000eb84 	.word	0x2000eb84
 80131e4:	2000ebb2 	.word	0x2000ebb2
 80131e8:	0801ca34 	.word	0x0801ca34
 80131ec:	0801cddc 	.word	0x0801cddc
 80131f0:	0801ca80 	.word	0x0801ca80

080131f4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80131f4:	b480      	push	{r7}
 80131f6:	b083      	sub	sp, #12
 80131f8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80131fa:	4b15      	ldr	r3, [pc, #84]	@ (8013250 <tcp_get_next_optbyte+0x5c>)
 80131fc:	881b      	ldrh	r3, [r3, #0]
 80131fe:	1c5a      	adds	r2, r3, #1
 8013200:	b291      	uxth	r1, r2
 8013202:	4a13      	ldr	r2, [pc, #76]	@ (8013250 <tcp_get_next_optbyte+0x5c>)
 8013204:	8011      	strh	r1, [r2, #0]
 8013206:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013208:	4b12      	ldr	r3, [pc, #72]	@ (8013254 <tcp_get_next_optbyte+0x60>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d004      	beq.n	801321a <tcp_get_next_optbyte+0x26>
 8013210:	4b11      	ldr	r3, [pc, #68]	@ (8013258 <tcp_get_next_optbyte+0x64>)
 8013212:	881b      	ldrh	r3, [r3, #0]
 8013214:	88fa      	ldrh	r2, [r7, #6]
 8013216:	429a      	cmp	r2, r3
 8013218:	d208      	bcs.n	801322c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801321a:	4b10      	ldr	r3, [pc, #64]	@ (801325c <tcp_get_next_optbyte+0x68>)
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	3314      	adds	r3, #20
 8013220:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013222:	88fb      	ldrh	r3, [r7, #6]
 8013224:	683a      	ldr	r2, [r7, #0]
 8013226:	4413      	add	r3, r2
 8013228:	781b      	ldrb	r3, [r3, #0]
 801322a:	e00b      	b.n	8013244 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801322c:	88fb      	ldrh	r3, [r7, #6]
 801322e:	b2da      	uxtb	r2, r3
 8013230:	4b09      	ldr	r3, [pc, #36]	@ (8013258 <tcp_get_next_optbyte+0x64>)
 8013232:	881b      	ldrh	r3, [r3, #0]
 8013234:	b2db      	uxtb	r3, r3
 8013236:	1ad3      	subs	r3, r2, r3
 8013238:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801323a:	4b06      	ldr	r3, [pc, #24]	@ (8013254 <tcp_get_next_optbyte+0x60>)
 801323c:	681a      	ldr	r2, [r3, #0]
 801323e:	797b      	ldrb	r3, [r7, #5]
 8013240:	4413      	add	r3, r2
 8013242:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013244:	4618      	mov	r0, r3
 8013246:	370c      	adds	r7, #12
 8013248:	46bd      	mov	sp, r7
 801324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324e:	4770      	bx	lr
 8013250:	2000eba4 	.word	0x2000eba4
 8013254:	2000eba0 	.word	0x2000eba0
 8013258:	2000eb9e 	.word	0x2000eb9e
 801325c:	2000eb98 	.word	0x2000eb98

08013260 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b084      	sub	sp, #16
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d106      	bne.n	801327c <tcp_parseopt+0x1c>
 801326e:	4b32      	ldr	r3, [pc, #200]	@ (8013338 <tcp_parseopt+0xd8>)
 8013270:	f240 727d 	movw	r2, #1917	@ 0x77d
 8013274:	4931      	ldr	r1, [pc, #196]	@ (801333c <tcp_parseopt+0xdc>)
 8013276:	4832      	ldr	r0, [pc, #200]	@ (8013340 <tcp_parseopt+0xe0>)
 8013278:	f006 f9f4 	bl	8019664 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801327c:	4b31      	ldr	r3, [pc, #196]	@ (8013344 <tcp_parseopt+0xe4>)
 801327e:	881b      	ldrh	r3, [r3, #0]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d056      	beq.n	8013332 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013284:	4b30      	ldr	r3, [pc, #192]	@ (8013348 <tcp_parseopt+0xe8>)
 8013286:	2200      	movs	r2, #0
 8013288:	801a      	strh	r2, [r3, #0]
 801328a:	e046      	b.n	801331a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 801328c:	f7ff ffb2 	bl	80131f4 <tcp_get_next_optbyte>
 8013290:	4603      	mov	r3, r0
 8013292:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013294:	7bfb      	ldrb	r3, [r7, #15]
 8013296:	2b02      	cmp	r3, #2
 8013298:	d006      	beq.n	80132a8 <tcp_parseopt+0x48>
 801329a:	2b02      	cmp	r3, #2
 801329c:	dc2a      	bgt.n	80132f4 <tcp_parseopt+0x94>
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d042      	beq.n	8013328 <tcp_parseopt+0xc8>
 80132a2:	2b01      	cmp	r3, #1
 80132a4:	d038      	beq.n	8013318 <tcp_parseopt+0xb8>
 80132a6:	e025      	b.n	80132f4 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80132a8:	f7ff ffa4 	bl	80131f4 <tcp_get_next_optbyte>
 80132ac:	4603      	mov	r3, r0
 80132ae:	2b04      	cmp	r3, #4
 80132b0:	d13c      	bne.n	801332c <tcp_parseopt+0xcc>
 80132b2:	4b25      	ldr	r3, [pc, #148]	@ (8013348 <tcp_parseopt+0xe8>)
 80132b4:	881b      	ldrh	r3, [r3, #0]
 80132b6:	3301      	adds	r3, #1
 80132b8:	4a22      	ldr	r2, [pc, #136]	@ (8013344 <tcp_parseopt+0xe4>)
 80132ba:	8812      	ldrh	r2, [r2, #0]
 80132bc:	4293      	cmp	r3, r2
 80132be:	da35      	bge.n	801332c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80132c0:	f7ff ff98 	bl	80131f4 <tcp_get_next_optbyte>
 80132c4:	4603      	mov	r3, r0
 80132c6:	021b      	lsls	r3, r3, #8
 80132c8:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80132ca:	f7ff ff93 	bl	80131f4 <tcp_get_next_optbyte>
 80132ce:	4603      	mov	r3, r0
 80132d0:	461a      	mov	r2, r3
 80132d2:	89bb      	ldrh	r3, [r7, #12]
 80132d4:	4313      	orrs	r3, r2
 80132d6:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80132d8:	89bb      	ldrh	r3, [r7, #12]
 80132da:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80132de:	d804      	bhi.n	80132ea <tcp_parseopt+0x8a>
 80132e0:	89bb      	ldrh	r3, [r7, #12]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d001      	beq.n	80132ea <tcp_parseopt+0x8a>
 80132e6:	89ba      	ldrh	r2, [r7, #12]
 80132e8:	e001      	b.n	80132ee <tcp_parseopt+0x8e>
 80132ea:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80132f2:	e012      	b.n	801331a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80132f4:	f7ff ff7e 	bl	80131f4 <tcp_get_next_optbyte>
 80132f8:	4603      	mov	r3, r0
 80132fa:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80132fc:	7afb      	ldrb	r3, [r7, #11]
 80132fe:	2b01      	cmp	r3, #1
 8013300:	d916      	bls.n	8013330 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013302:	7afb      	ldrb	r3, [r7, #11]
 8013304:	b29a      	uxth	r2, r3
 8013306:	4b10      	ldr	r3, [pc, #64]	@ (8013348 <tcp_parseopt+0xe8>)
 8013308:	881b      	ldrh	r3, [r3, #0]
 801330a:	4413      	add	r3, r2
 801330c:	b29b      	uxth	r3, r3
 801330e:	3b02      	subs	r3, #2
 8013310:	b29a      	uxth	r2, r3
 8013312:	4b0d      	ldr	r3, [pc, #52]	@ (8013348 <tcp_parseopt+0xe8>)
 8013314:	801a      	strh	r2, [r3, #0]
 8013316:	e000      	b.n	801331a <tcp_parseopt+0xba>
          break;
 8013318:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801331a:	4b0b      	ldr	r3, [pc, #44]	@ (8013348 <tcp_parseopt+0xe8>)
 801331c:	881a      	ldrh	r2, [r3, #0]
 801331e:	4b09      	ldr	r3, [pc, #36]	@ (8013344 <tcp_parseopt+0xe4>)
 8013320:	881b      	ldrh	r3, [r3, #0]
 8013322:	429a      	cmp	r2, r3
 8013324:	d3b2      	bcc.n	801328c <tcp_parseopt+0x2c>
 8013326:	e004      	b.n	8013332 <tcp_parseopt+0xd2>
          return;
 8013328:	bf00      	nop
 801332a:	e002      	b.n	8013332 <tcp_parseopt+0xd2>
            return;
 801332c:	bf00      	nop
 801332e:	e000      	b.n	8013332 <tcp_parseopt+0xd2>
            return;
 8013330:	bf00      	nop
      }
    }
  }
}
 8013332:	3710      	adds	r7, #16
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}
 8013338:	0801ca34 	.word	0x0801ca34
 801333c:	0801ce98 	.word	0x0801ce98
 8013340:	0801ca80 	.word	0x0801ca80
 8013344:	2000eb9c 	.word	0x2000eb9c
 8013348:	2000eba4 	.word	0x2000eba4

0801334c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801334c:	b480      	push	{r7}
 801334e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013350:	4b05      	ldr	r3, [pc, #20]	@ (8013368 <tcp_trigger_input_pcb_close+0x1c>)
 8013352:	781b      	ldrb	r3, [r3, #0]
 8013354:	f043 0310 	orr.w	r3, r3, #16
 8013358:	b2da      	uxtb	r2, r3
 801335a:	4b03      	ldr	r3, [pc, #12]	@ (8013368 <tcp_trigger_input_pcb_close+0x1c>)
 801335c:	701a      	strb	r2, [r3, #0]
}
 801335e:	bf00      	nop
 8013360:	46bd      	mov	sp, r7
 8013362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013366:	4770      	bx	lr
 8013368:	2000ebb5 	.word	0x2000ebb5

0801336c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b084      	sub	sp, #16
 8013370:	af00      	add	r7, sp, #0
 8013372:	60f8      	str	r0, [r7, #12]
 8013374:	60b9      	str	r1, [r7, #8]
 8013376:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d00a      	beq.n	8013394 <tcp_route+0x28>
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	7a1b      	ldrb	r3, [r3, #8]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d006      	beq.n	8013394 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	7a1b      	ldrb	r3, [r3, #8]
 801338a:	4618      	mov	r0, r3
 801338c:	f7fb fa7c 	bl	800e888 <netif_get_by_index>
 8013390:	4603      	mov	r3, r0
 8013392:	e003      	b.n	801339c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013394:	6878      	ldr	r0, [r7, #4]
 8013396:	f003 fd61 	bl	8016e5c <ip4_route>
 801339a:	4603      	mov	r3, r0
  }
}
 801339c:	4618      	mov	r0, r3
 801339e:	3710      	adds	r7, #16
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bd80      	pop	{r7, pc}

080133a4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80133a4:	b590      	push	{r4, r7, lr}
 80133a6:	b087      	sub	sp, #28
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	60f8      	str	r0, [r7, #12]
 80133ac:	60b9      	str	r1, [r7, #8]
 80133ae:	603b      	str	r3, [r7, #0]
 80133b0:	4613      	mov	r3, r2
 80133b2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d105      	bne.n	80133c6 <tcp_create_segment+0x22>
 80133ba:	4b49      	ldr	r3, [pc, #292]	@ (80134e0 <tcp_create_segment+0x13c>)
 80133bc:	22a3      	movs	r2, #163	@ 0xa3
 80133be:	4949      	ldr	r1, [pc, #292]	@ (80134e4 <tcp_create_segment+0x140>)
 80133c0:	4849      	ldr	r0, [pc, #292]	@ (80134e8 <tcp_create_segment+0x144>)
 80133c2:	f006 f94f 	bl	8019664 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80133c6:	68bb      	ldr	r3, [r7, #8]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d105      	bne.n	80133d8 <tcp_create_segment+0x34>
 80133cc:	4b44      	ldr	r3, [pc, #272]	@ (80134e0 <tcp_create_segment+0x13c>)
 80133ce:	22a4      	movs	r2, #164	@ 0xa4
 80133d0:	4946      	ldr	r1, [pc, #280]	@ (80134ec <tcp_create_segment+0x148>)
 80133d2:	4845      	ldr	r0, [pc, #276]	@ (80134e8 <tcp_create_segment+0x144>)
 80133d4:	f006 f946 	bl	8019664 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80133d8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80133dc:	009b      	lsls	r3, r3, #2
 80133de:	b2db      	uxtb	r3, r3
 80133e0:	f003 0304 	and.w	r3, r3, #4
 80133e4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80133e6:	2003      	movs	r0, #3
 80133e8:	f7fa fda6 	bl	800df38 <memp_malloc>
 80133ec:	6138      	str	r0, [r7, #16]
 80133ee:	693b      	ldr	r3, [r7, #16]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d104      	bne.n	80133fe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80133f4:	68b8      	ldr	r0, [r7, #8]
 80133f6:	f7fb fdd5 	bl	800efa4 <pbuf_free>
    return NULL;
 80133fa:	2300      	movs	r3, #0
 80133fc:	e06b      	b.n	80134d6 <tcp_create_segment+0x132>
  }
  seg->flags = optflags;
 80133fe:	693b      	ldr	r3, [r7, #16]
 8013400:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013404:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 8013406:	693b      	ldr	r3, [r7, #16]
 8013408:	2200      	movs	r2, #0
 801340a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801340c:	693b      	ldr	r3, [r7, #16]
 801340e:	68ba      	ldr	r2, [r7, #8]
 8013410:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013412:	68bb      	ldr	r3, [r7, #8]
 8013414:	891a      	ldrh	r2, [r3, #8]
 8013416:	7dfb      	ldrb	r3, [r7, #23]
 8013418:	b29b      	uxth	r3, r3
 801341a:	429a      	cmp	r2, r3
 801341c:	d205      	bcs.n	801342a <tcp_create_segment+0x86>
 801341e:	4b30      	ldr	r3, [pc, #192]	@ (80134e0 <tcp_create_segment+0x13c>)
 8013420:	22b0      	movs	r2, #176	@ 0xb0
 8013422:	4933      	ldr	r1, [pc, #204]	@ (80134f0 <tcp_create_segment+0x14c>)
 8013424:	4830      	ldr	r0, [pc, #192]	@ (80134e8 <tcp_create_segment+0x144>)
 8013426:	f006 f91d 	bl	8019664 <iprintf>
  seg->len = p->tot_len - optlen;
 801342a:	68bb      	ldr	r3, [r7, #8]
 801342c:	891a      	ldrh	r2, [r3, #8]
 801342e:	7dfb      	ldrb	r3, [r7, #23]
 8013430:	b29b      	uxth	r3, r3
 8013432:	1ad3      	subs	r3, r2, r3
 8013434:	b29a      	uxth	r2, r3
 8013436:	693b      	ldr	r3, [r7, #16]
 8013438:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 801343a:	693b      	ldr	r3, [r7, #16]
 801343c:	2200      	movs	r2, #0
 801343e:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013440:	2114      	movs	r1, #20
 8013442:	68b8      	ldr	r0, [r7, #8]
 8013444:	f7fb fd18 	bl	800ee78 <pbuf_add_header>
 8013448:	4603      	mov	r3, r0
 801344a:	2b00      	cmp	r3, #0
 801344c:	d00c      	beq.n	8013468 <tcp_create_segment+0xc4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 801344e:	4b29      	ldr	r3, [pc, #164]	@ (80134f4 <tcp_create_segment+0x150>)
 8013450:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 8013454:	3301      	adds	r3, #1
 8013456:	b29a      	uxth	r2, r3
 8013458:	4b26      	ldr	r3, [pc, #152]	@ (80134f4 <tcp_create_segment+0x150>)
 801345a:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
    tcp_seg_free(seg);
 801345e:	6938      	ldr	r0, [r7, #16]
 8013460:	f7fd f831 	bl	80104c6 <tcp_seg_free>
    return NULL;
 8013464:	2300      	movs	r3, #0
 8013466:	e036      	b.n	80134d6 <tcp_create_segment+0x132>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	685b      	ldr	r3, [r3, #4]
 801346c:	685a      	ldr	r2, [r3, #4]
 801346e:	693b      	ldr	r3, [r7, #16]
 8013470:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	8ada      	ldrh	r2, [r3, #22]
 8013476:	693b      	ldr	r3, [r7, #16]
 8013478:	691c      	ldr	r4, [r3, #16]
 801347a:	4610      	mov	r0, r2
 801347c:	f7f9 fef6 	bl	800d26c <lwip_htons>
 8013480:	4603      	mov	r3, r0
 8013482:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	8b1a      	ldrh	r2, [r3, #24]
 8013488:	693b      	ldr	r3, [r7, #16]
 801348a:	691c      	ldr	r4, [r3, #16]
 801348c:	4610      	mov	r0, r2
 801348e:	f7f9 feed 	bl	800d26c <lwip_htons>
 8013492:	4603      	mov	r3, r0
 8013494:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013496:	693b      	ldr	r3, [r7, #16]
 8013498:	691c      	ldr	r4, [r3, #16]
 801349a:	6838      	ldr	r0, [r7, #0]
 801349c:	f7f9 fefc 	bl	800d298 <lwip_htonl>
 80134a0:	4603      	mov	r3, r0
 80134a2:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80134a4:	7dfb      	ldrb	r3, [r7, #23]
 80134a6:	089b      	lsrs	r3, r3, #2
 80134a8:	b2db      	uxtb	r3, r3
 80134aa:	3305      	adds	r3, #5
 80134ac:	b29b      	uxth	r3, r3
 80134ae:	031b      	lsls	r3, r3, #12
 80134b0:	b29a      	uxth	r2, r3
 80134b2:	79fb      	ldrb	r3, [r7, #7]
 80134b4:	b29b      	uxth	r3, r3
 80134b6:	4313      	orrs	r3, r2
 80134b8:	b29a      	uxth	r2, r3
 80134ba:	693b      	ldr	r3, [r7, #16]
 80134bc:	691c      	ldr	r4, [r3, #16]
 80134be:	4610      	mov	r0, r2
 80134c0:	f7f9 fed4 	bl	800d26c <lwip_htons>
 80134c4:	4603      	mov	r3, r0
 80134c6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80134c8:	693b      	ldr	r3, [r7, #16]
 80134ca:	691b      	ldr	r3, [r3, #16]
 80134cc:	2200      	movs	r2, #0
 80134ce:	749a      	strb	r2, [r3, #18]
 80134d0:	2200      	movs	r2, #0
 80134d2:	74da      	strb	r2, [r3, #19]
  return seg;
 80134d4:	693b      	ldr	r3, [r7, #16]
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	371c      	adds	r7, #28
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd90      	pop	{r4, r7, pc}
 80134de:	bf00      	nop
 80134e0:	0801ceb4 	.word	0x0801ceb4
 80134e4:	0801cee8 	.word	0x0801cee8
 80134e8:	0801cf08 	.word	0x0801cf08
 80134ec:	0801cf30 	.word	0x0801cf30
 80134f0:	0801cf54 	.word	0x0801cf54
 80134f4:	2000ea4c 	.word	0x2000ea4c

080134f8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80134f8:	b590      	push	{r4, r7, lr}
 80134fa:	b08b      	sub	sp, #44	@ 0x2c
 80134fc:	af02      	add	r7, sp, #8
 80134fe:	6078      	str	r0, [r7, #4]
 8013500:	460b      	mov	r3, r1
 8013502:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013504:	2300      	movs	r3, #0
 8013506:	61bb      	str	r3, [r7, #24]
 8013508:	2300      	movs	r3, #0
 801350a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801350c:	2300      	movs	r3, #0
 801350e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d106      	bne.n	8013524 <tcp_split_unsent_seg+0x2c>
 8013516:	4b9b      	ldr	r3, [pc, #620]	@ (8013784 <tcp_split_unsent_seg+0x28c>)
 8013518:	f240 324b 	movw	r2, #843	@ 0x34b
 801351c:	499a      	ldr	r1, [pc, #616]	@ (8013788 <tcp_split_unsent_seg+0x290>)
 801351e:	489b      	ldr	r0, [pc, #620]	@ (801378c <tcp_split_unsent_seg+0x294>)
 8013520:	f006 f8a0 	bl	8019664 <iprintf>

  useg = pcb->unsent;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013528:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801352a:	697b      	ldr	r3, [r7, #20]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d102      	bne.n	8013536 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013530:	f04f 33ff 	mov.w	r3, #4294967295
 8013534:	e121      	b.n	801377a <tcp_split_unsent_seg+0x282>
  }

  if (split == 0) {
 8013536:	887b      	ldrh	r3, [r7, #2]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d109      	bne.n	8013550 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801353c:	4b91      	ldr	r3, [pc, #580]	@ (8013784 <tcp_split_unsent_seg+0x28c>)
 801353e:	f240 3253 	movw	r2, #851	@ 0x353
 8013542:	4993      	ldr	r1, [pc, #588]	@ (8013790 <tcp_split_unsent_seg+0x298>)
 8013544:	4891      	ldr	r0, [pc, #580]	@ (801378c <tcp_split_unsent_seg+0x294>)
 8013546:	f006 f88d 	bl	8019664 <iprintf>
    return ERR_VAL;
 801354a:	f06f 0305 	mvn.w	r3, #5
 801354e:	e114      	b.n	801377a <tcp_split_unsent_seg+0x282>
  }

  if (useg->len <= split) {
 8013550:	697b      	ldr	r3, [r7, #20]
 8013552:	891b      	ldrh	r3, [r3, #8]
 8013554:	887a      	ldrh	r2, [r7, #2]
 8013556:	429a      	cmp	r2, r3
 8013558:	d301      	bcc.n	801355e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801355a:	2300      	movs	r3, #0
 801355c:	e10d      	b.n	801377a <tcp_split_unsent_seg+0x282>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013562:	887a      	ldrh	r2, [r7, #2]
 8013564:	429a      	cmp	r2, r3
 8013566:	d906      	bls.n	8013576 <tcp_split_unsent_seg+0x7e>
 8013568:	4b86      	ldr	r3, [pc, #536]	@ (8013784 <tcp_split_unsent_seg+0x28c>)
 801356a:	f240 325b 	movw	r2, #859	@ 0x35b
 801356e:	4989      	ldr	r1, [pc, #548]	@ (8013794 <tcp_split_unsent_seg+0x29c>)
 8013570:	4886      	ldr	r0, [pc, #536]	@ (801378c <tcp_split_unsent_seg+0x294>)
 8013572:	f006 f877 	bl	8019664 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013576:	697b      	ldr	r3, [r7, #20]
 8013578:	891b      	ldrh	r3, [r3, #8]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d106      	bne.n	801358c <tcp_split_unsent_seg+0x94>
 801357e:	4b81      	ldr	r3, [pc, #516]	@ (8013784 <tcp_split_unsent_seg+0x28c>)
 8013580:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8013584:	4984      	ldr	r1, [pc, #528]	@ (8013798 <tcp_split_unsent_seg+0x2a0>)
 8013586:	4881      	ldr	r0, [pc, #516]	@ (801378c <tcp_split_unsent_seg+0x294>)
 8013588:	f006 f86c 	bl	8019664 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801358c:	697b      	ldr	r3, [r7, #20]
 801358e:	7b1b      	ldrb	r3, [r3, #12]
 8013590:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013592:	7bfb      	ldrb	r3, [r7, #15]
 8013594:	009b      	lsls	r3, r3, #2
 8013596:	b2db      	uxtb	r3, r3
 8013598:	f003 0304 	and.w	r3, r3, #4
 801359c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801359e:	697b      	ldr	r3, [r7, #20]
 80135a0:	891a      	ldrh	r2, [r3, #8]
 80135a2:	887b      	ldrh	r3, [r7, #2]
 80135a4:	1ad3      	subs	r3, r2, r3
 80135a6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80135a8:	7bbb      	ldrb	r3, [r7, #14]
 80135aa:	b29a      	uxth	r2, r3
 80135ac:	89bb      	ldrh	r3, [r7, #12]
 80135ae:	4413      	add	r3, r2
 80135b0:	b29b      	uxth	r3, r3
 80135b2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80135b6:	4619      	mov	r1, r3
 80135b8:	2038      	movs	r0, #56	@ 0x38
 80135ba:	f7fb fa0f 	bl	800e9dc <pbuf_alloc>
 80135be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80135c0:	693b      	ldr	r3, [r7, #16]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	f000 80ba 	beq.w	801373c <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80135c8:	697b      	ldr	r3, [r7, #20]
 80135ca:	685b      	ldr	r3, [r3, #4]
 80135cc:	891a      	ldrh	r2, [r3, #8]
 80135ce:	697b      	ldr	r3, [r7, #20]
 80135d0:	891b      	ldrh	r3, [r3, #8]
 80135d2:	1ad3      	subs	r3, r2, r3
 80135d4:	b29a      	uxth	r2, r3
 80135d6:	887b      	ldrh	r3, [r7, #2]
 80135d8:	4413      	add	r3, r2
 80135da:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80135dc:	697b      	ldr	r3, [r7, #20]
 80135de:	6858      	ldr	r0, [r3, #4]
 80135e0:	693b      	ldr	r3, [r7, #16]
 80135e2:	685a      	ldr	r2, [r3, #4]
 80135e4:	7bbb      	ldrb	r3, [r7, #14]
 80135e6:	18d1      	adds	r1, r2, r3
 80135e8:	897b      	ldrh	r3, [r7, #10]
 80135ea:	89ba      	ldrh	r2, [r7, #12]
 80135ec:	f7fb fed0 	bl	800f390 <pbuf_copy_partial>
 80135f0:	4603      	mov	r3, r0
 80135f2:	461a      	mov	r2, r3
 80135f4:	89bb      	ldrh	r3, [r7, #12]
 80135f6:	4293      	cmp	r3, r2
 80135f8:	f040 80a2 	bne.w	8013740 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80135fc:	697b      	ldr	r3, [r7, #20]
 80135fe:	691b      	ldr	r3, [r3, #16]
 8013600:	899b      	ldrh	r3, [r3, #12]
 8013602:	b29b      	uxth	r3, r3
 8013604:	4618      	mov	r0, r3
 8013606:	f7f9 fe31 	bl	800d26c <lwip_htons>
 801360a:	4603      	mov	r3, r0
 801360c:	b2db      	uxtb	r3, r3
 801360e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013612:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013614:	2300      	movs	r3, #0
 8013616:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 8013618:	7ffb      	ldrb	r3, [r7, #31]
 801361a:	f003 0308 	and.w	r3, r3, #8
 801361e:	2b00      	cmp	r3, #0
 8013620:	d007      	beq.n	8013632 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013622:	7ffb      	ldrb	r3, [r7, #31]
 8013624:	f023 0308 	bic.w	r3, r3, #8
 8013628:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 801362a:	7fbb      	ldrb	r3, [r7, #30]
 801362c:	f043 0308 	orr.w	r3, r3, #8
 8013630:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 8013632:	7ffb      	ldrb	r3, [r7, #31]
 8013634:	f003 0301 	and.w	r3, r3, #1
 8013638:	2b00      	cmp	r3, #0
 801363a:	d007      	beq.n	801364c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801363c:	7ffb      	ldrb	r3, [r7, #31]
 801363e:	f023 0301 	bic.w	r3, r3, #1
 8013642:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 8013644:	7fbb      	ldrb	r3, [r7, #30]
 8013646:	f043 0301 	orr.w	r3, r3, #1
 801364a:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801364c:	697b      	ldr	r3, [r7, #20]
 801364e:	691b      	ldr	r3, [r3, #16]
 8013650:	685b      	ldr	r3, [r3, #4]
 8013652:	4618      	mov	r0, r3
 8013654:	f7f9 fe20 	bl	800d298 <lwip_htonl>
 8013658:	4602      	mov	r2, r0
 801365a:	887b      	ldrh	r3, [r7, #2]
 801365c:	18d1      	adds	r1, r2, r3
 801365e:	7fba      	ldrb	r2, [r7, #30]
 8013660:	7bfb      	ldrb	r3, [r7, #15]
 8013662:	9300      	str	r3, [sp, #0]
 8013664:	460b      	mov	r3, r1
 8013666:	6939      	ldr	r1, [r7, #16]
 8013668:	6878      	ldr	r0, [r7, #4]
 801366a:	f7ff fe9b 	bl	80133a4 <tcp_create_segment>
 801366e:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 8013670:	69bb      	ldr	r3, [r7, #24]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d066      	beq.n	8013744 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013676:	697b      	ldr	r3, [r7, #20]
 8013678:	685b      	ldr	r3, [r3, #4]
 801367a:	4618      	mov	r0, r3
 801367c:	f7fb fd20 	bl	800f0c0 <pbuf_clen>
 8013680:	4603      	mov	r3, r0
 8013682:	461a      	mov	r2, r3
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801368a:	1a9b      	subs	r3, r3, r2
 801368c:	b29a      	uxth	r2, r3
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013694:	697b      	ldr	r3, [r7, #20]
 8013696:	6858      	ldr	r0, [r3, #4]
 8013698:	697b      	ldr	r3, [r7, #20]
 801369a:	685b      	ldr	r3, [r3, #4]
 801369c:	891a      	ldrh	r2, [r3, #8]
 801369e:	89bb      	ldrh	r3, [r7, #12]
 80136a0:	1ad3      	subs	r3, r2, r3
 80136a2:	b29b      	uxth	r3, r3
 80136a4:	4619      	mov	r1, r3
 80136a6:	f7fb faf7 	bl	800ec98 <pbuf_realloc>
  useg->len -= remainder;
 80136aa:	697b      	ldr	r3, [r7, #20]
 80136ac:	891a      	ldrh	r2, [r3, #8]
 80136ae:	89bb      	ldrh	r3, [r7, #12]
 80136b0:	1ad3      	subs	r3, r2, r3
 80136b2:	b29a      	uxth	r2, r3
 80136b4:	697b      	ldr	r3, [r7, #20]
 80136b6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80136b8:	697b      	ldr	r3, [r7, #20]
 80136ba:	691b      	ldr	r3, [r3, #16]
 80136bc:	899b      	ldrh	r3, [r3, #12]
 80136be:	b29c      	uxth	r4, r3
 80136c0:	7ffb      	ldrb	r3, [r7, #31]
 80136c2:	b29b      	uxth	r3, r3
 80136c4:	4618      	mov	r0, r3
 80136c6:	f7f9 fdd1 	bl	800d26c <lwip_htons>
 80136ca:	4603      	mov	r3, r0
 80136cc:	461a      	mov	r2, r3
 80136ce:	697b      	ldr	r3, [r7, #20]
 80136d0:	691b      	ldr	r3, [r3, #16]
 80136d2:	4322      	orrs	r2, r4
 80136d4:	b292      	uxth	r2, r2
 80136d6:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 80136d8:	697b      	ldr	r3, [r7, #20]
 80136da:	2200      	movs	r2, #0
 80136dc:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	685b      	ldr	r3, [r3, #4]
 80136e2:	4618      	mov	r0, r3
 80136e4:	f7fb fcec 	bl	800f0c0 <pbuf_clen>
 80136e8:	4603      	mov	r3, r0
 80136ea:	461a      	mov	r2, r3
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80136f2:	4413      	add	r3, r2
 80136f4:	b29a      	uxth	r2, r3
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80136fc:	69bb      	ldr	r3, [r7, #24]
 80136fe:	685b      	ldr	r3, [r3, #4]
 8013700:	4618      	mov	r0, r3
 8013702:	f7fb fcdd 	bl	800f0c0 <pbuf_clen>
 8013706:	4603      	mov	r3, r0
 8013708:	461a      	mov	r2, r3
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013710:	4413      	add	r3, r2
 8013712:	b29a      	uxth	r2, r3
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801371a:	697b      	ldr	r3, [r7, #20]
 801371c:	681a      	ldr	r2, [r3, #0]
 801371e:	69bb      	ldr	r3, [r7, #24]
 8013720:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013722:	697b      	ldr	r3, [r7, #20]
 8013724:	69ba      	ldr	r2, [r7, #24]
 8013726:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013728:	69bb      	ldr	r3, [r7, #24]
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d103      	bne.n	8013738 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	2200      	movs	r2, #0
 8013734:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013738:	2300      	movs	r3, #0
 801373a:	e01e      	b.n	801377a <tcp_split_unsent_seg+0x282>
    goto memerr;
 801373c:	bf00      	nop
 801373e:	e002      	b.n	8013746 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8013740:	bf00      	nop
 8013742:	e000      	b.n	8013746 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8013744:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 8013746:	4b15      	ldr	r3, [pc, #84]	@ (801379c <tcp_split_unsent_seg+0x2a4>)
 8013748:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801374c:	3301      	adds	r3, #1
 801374e:	b29a      	uxth	r2, r3
 8013750:	4b12      	ldr	r3, [pc, #72]	@ (801379c <tcp_split_unsent_seg+0x2a4>)
 8013752:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013756:	69bb      	ldr	r3, [r7, #24]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d006      	beq.n	801376a <tcp_split_unsent_seg+0x272>
 801375c:	4b09      	ldr	r3, [pc, #36]	@ (8013784 <tcp_split_unsent_seg+0x28c>)
 801375e:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8013762:	490f      	ldr	r1, [pc, #60]	@ (80137a0 <tcp_split_unsent_seg+0x2a8>)
 8013764:	4809      	ldr	r0, [pc, #36]	@ (801378c <tcp_split_unsent_seg+0x294>)
 8013766:	f005 ff7d 	bl	8019664 <iprintf>
  if (p != NULL) {
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d002      	beq.n	8013776 <tcp_split_unsent_seg+0x27e>
    pbuf_free(p);
 8013770:	6938      	ldr	r0, [r7, #16]
 8013772:	f7fb fc17 	bl	800efa4 <pbuf_free>
  }

  return ERR_MEM;
 8013776:	f04f 33ff 	mov.w	r3, #4294967295
}
 801377a:	4618      	mov	r0, r3
 801377c:	3724      	adds	r7, #36	@ 0x24
 801377e:	46bd      	mov	sp, r7
 8013780:	bd90      	pop	{r4, r7, pc}
 8013782:	bf00      	nop
 8013784:	0801ceb4 	.word	0x0801ceb4
 8013788:	0801d2a4 	.word	0x0801d2a4
 801378c:	0801cf08 	.word	0x0801cf08
 8013790:	0801d2c8 	.word	0x0801d2c8
 8013794:	0801d2ec 	.word	0x0801d2ec
 8013798:	0801d2fc 	.word	0x0801d2fc
 801379c:	2000ea4c 	.word	0x2000ea4c
 80137a0:	0801d30c 	.word	0x0801d30c

080137a4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80137a4:	b590      	push	{r4, r7, lr}
 80137a6:	b085      	sub	sp, #20
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d106      	bne.n	80137c0 <tcp_send_fin+0x1c>
 80137b2:	4b21      	ldr	r3, [pc, #132]	@ (8013838 <tcp_send_fin+0x94>)
 80137b4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80137b8:	4920      	ldr	r1, [pc, #128]	@ (801383c <tcp_send_fin+0x98>)
 80137ba:	4821      	ldr	r0, [pc, #132]	@ (8013840 <tcp_send_fin+0x9c>)
 80137bc:	f005 ff52 	bl	8019664 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d02e      	beq.n	8013826 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80137cc:	60fb      	str	r3, [r7, #12]
 80137ce:	e002      	b.n	80137d6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d1f8      	bne.n	80137d0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	691b      	ldr	r3, [r3, #16]
 80137e2:	899b      	ldrh	r3, [r3, #12]
 80137e4:	b29b      	uxth	r3, r3
 80137e6:	4618      	mov	r0, r3
 80137e8:	f7f9 fd40 	bl	800d26c <lwip_htons>
 80137ec:	4603      	mov	r3, r0
 80137ee:	b2db      	uxtb	r3, r3
 80137f0:	f003 0307 	and.w	r3, r3, #7
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d116      	bne.n	8013826 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	691b      	ldr	r3, [r3, #16]
 80137fc:	899b      	ldrh	r3, [r3, #12]
 80137fe:	b29c      	uxth	r4, r3
 8013800:	2001      	movs	r0, #1
 8013802:	f7f9 fd33 	bl	800d26c <lwip_htons>
 8013806:	4603      	mov	r3, r0
 8013808:	461a      	mov	r2, r3
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	691b      	ldr	r3, [r3, #16]
 801380e:	4322      	orrs	r2, r4
 8013810:	b292      	uxth	r2, r2
 8013812:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	8b5b      	ldrh	r3, [r3, #26]
 8013818:	f043 0320 	orr.w	r3, r3, #32
 801381c:	b29a      	uxth	r2, r3
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013822:	2300      	movs	r3, #0
 8013824:	e004      	b.n	8013830 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013826:	2101      	movs	r1, #1
 8013828:	6878      	ldr	r0, [r7, #4]
 801382a:	f000 f80b 	bl	8013844 <tcp_enqueue_flags>
 801382e:	4603      	mov	r3, r0
}
 8013830:	4618      	mov	r0, r3
 8013832:	3714      	adds	r7, #20
 8013834:	46bd      	mov	sp, r7
 8013836:	bd90      	pop	{r4, r7, pc}
 8013838:	0801ceb4 	.word	0x0801ceb4
 801383c:	0801d318 	.word	0x0801d318
 8013840:	0801cf08 	.word	0x0801cf08

08013844 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b088      	sub	sp, #32
 8013848:	af02      	add	r7, sp, #8
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	460b      	mov	r3, r1
 801384e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013850:	2300      	movs	r3, #0
 8013852:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 8013854:	2300      	movs	r3, #0
 8013856:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013858:	78fb      	ldrb	r3, [r7, #3]
 801385a:	f003 0303 	and.w	r3, r3, #3
 801385e:	2b00      	cmp	r3, #0
 8013860:	d106      	bne.n	8013870 <tcp_enqueue_flags+0x2c>
 8013862:	4b6f      	ldr	r3, [pc, #444]	@ (8013a20 <tcp_enqueue_flags+0x1dc>)
 8013864:	f240 4211 	movw	r2, #1041	@ 0x411
 8013868:	496e      	ldr	r1, [pc, #440]	@ (8013a24 <tcp_enqueue_flags+0x1e0>)
 801386a:	486f      	ldr	r0, [pc, #444]	@ (8013a28 <tcp_enqueue_flags+0x1e4>)
 801386c:	f005 fefa 	bl	8019664 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d106      	bne.n	8013884 <tcp_enqueue_flags+0x40>
 8013876:	4b6a      	ldr	r3, [pc, #424]	@ (8013a20 <tcp_enqueue_flags+0x1dc>)
 8013878:	f240 4213 	movw	r2, #1043	@ 0x413
 801387c:	496b      	ldr	r1, [pc, #428]	@ (8013a2c <tcp_enqueue_flags+0x1e8>)
 801387e:	486a      	ldr	r0, [pc, #424]	@ (8013a28 <tcp_enqueue_flags+0x1e4>)
 8013880:	f005 fef0 	bl	8019664 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013884:	78fb      	ldrb	r3, [r7, #3]
 8013886:	f003 0302 	and.w	r3, r3, #2
 801388a:	2b00      	cmp	r3, #0
 801388c:	d001      	beq.n	8013892 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801388e:	2301      	movs	r3, #1
 8013890:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013892:	7dfb      	ldrb	r3, [r7, #23]
 8013894:	009b      	lsls	r3, r3, #2
 8013896:	b2db      	uxtb	r3, r3
 8013898:	f003 0304 	and.w	r3, r3, #4
 801389c:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801389e:	7dbb      	ldrb	r3, [r7, #22]
 80138a0:	b29b      	uxth	r3, r3
 80138a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80138a6:	4619      	mov	r1, r3
 80138a8:	2038      	movs	r0, #56	@ 0x38
 80138aa:	f7fb f897 	bl	800e9dc <pbuf_alloc>
 80138ae:	60f8      	str	r0, [r7, #12]
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d111      	bne.n	80138da <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	8b5b      	ldrh	r3, [r3, #26]
 80138ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80138be:	b29a      	uxth	r2, r3
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 80138c4:	4b5a      	ldr	r3, [pc, #360]	@ (8013a30 <tcp_enqueue_flags+0x1ec>)
 80138c6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80138ca:	3301      	adds	r3, #1
 80138cc:	b29a      	uxth	r2, r3
 80138ce:	4b58      	ldr	r3, [pc, #352]	@ (8013a30 <tcp_enqueue_flags+0x1ec>)
 80138d0:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
    return ERR_MEM;
 80138d4:	f04f 33ff 	mov.w	r3, #4294967295
 80138d8:	e09d      	b.n	8013a16 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	895a      	ldrh	r2, [r3, #10]
 80138de:	7dbb      	ldrb	r3, [r7, #22]
 80138e0:	b29b      	uxth	r3, r3
 80138e2:	429a      	cmp	r2, r3
 80138e4:	d206      	bcs.n	80138f4 <tcp_enqueue_flags+0xb0>
 80138e6:	4b4e      	ldr	r3, [pc, #312]	@ (8013a20 <tcp_enqueue_flags+0x1dc>)
 80138e8:	f240 4239 	movw	r2, #1081	@ 0x439
 80138ec:	4951      	ldr	r1, [pc, #324]	@ (8013a34 <tcp_enqueue_flags+0x1f0>)
 80138ee:	484e      	ldr	r0, [pc, #312]	@ (8013a28 <tcp_enqueue_flags+0x1e4>)
 80138f0:	f005 feb8 	bl	8019664 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80138f8:	78fa      	ldrb	r2, [r7, #3]
 80138fa:	7dfb      	ldrb	r3, [r7, #23]
 80138fc:	9300      	str	r3, [sp, #0]
 80138fe:	460b      	mov	r3, r1
 8013900:	68f9      	ldr	r1, [r7, #12]
 8013902:	6878      	ldr	r0, [r7, #4]
 8013904:	f7ff fd4e 	bl	80133a4 <tcp_create_segment>
 8013908:	60b8      	str	r0, [r7, #8]
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d111      	bne.n	8013934 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	8b5b      	ldrh	r3, [r3, #26]
 8013914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013918:	b29a      	uxth	r2, r3
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801391e:	4b44      	ldr	r3, [pc, #272]	@ (8013a30 <tcp_enqueue_flags+0x1ec>)
 8013920:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8013924:	3301      	adds	r3, #1
 8013926:	b29a      	uxth	r2, r3
 8013928:	4b41      	ldr	r3, [pc, #260]	@ (8013a30 <tcp_enqueue_flags+0x1ec>)
 801392a:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
    return ERR_MEM;
 801392e:	f04f 33ff 	mov.w	r3, #4294967295
 8013932:	e070      	b.n	8013a16 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013934:	68bb      	ldr	r3, [r7, #8]
 8013936:	691b      	ldr	r3, [r3, #16]
 8013938:	f003 0303 	and.w	r3, r3, #3
 801393c:	2b00      	cmp	r3, #0
 801393e:	d006      	beq.n	801394e <tcp_enqueue_flags+0x10a>
 8013940:	4b37      	ldr	r3, [pc, #220]	@ (8013a20 <tcp_enqueue_flags+0x1dc>)
 8013942:	f240 4242 	movw	r2, #1090	@ 0x442
 8013946:	493c      	ldr	r1, [pc, #240]	@ (8013a38 <tcp_enqueue_flags+0x1f4>)
 8013948:	4837      	ldr	r0, [pc, #220]	@ (8013a28 <tcp_enqueue_flags+0x1e4>)
 801394a:	f005 fe8b 	bl	8019664 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	891b      	ldrh	r3, [r3, #8]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d006      	beq.n	8013964 <tcp_enqueue_flags+0x120>
 8013956:	4b32      	ldr	r3, [pc, #200]	@ (8013a20 <tcp_enqueue_flags+0x1dc>)
 8013958:	f240 4243 	movw	r2, #1091	@ 0x443
 801395c:	4937      	ldr	r1, [pc, #220]	@ (8013a3c <tcp_enqueue_flags+0x1f8>)
 801395e:	4832      	ldr	r0, [pc, #200]	@ (8013a28 <tcp_enqueue_flags+0x1e4>)
 8013960:	f005 fe80 	bl	8019664 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013968:	2b00      	cmp	r3, #0
 801396a:	d103      	bne.n	8013974 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	68ba      	ldr	r2, [r7, #8]
 8013970:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013972:	e00d      	b.n	8013990 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013978:	613b      	str	r3, [r7, #16]
 801397a:	e002      	b.n	8013982 <tcp_enqueue_flags+0x13e>
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	613b      	str	r3, [r7, #16]
 8013982:	693b      	ldr	r3, [r7, #16]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d1f8      	bne.n	801397c <tcp_enqueue_flags+0x138>
    useg->next = seg;
 801398a:	693b      	ldr	r3, [r7, #16]
 801398c:	68ba      	ldr	r2, [r7, #8]
 801398e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	2200      	movs	r2, #0
 8013994:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013998:	78fb      	ldrb	r3, [r7, #3]
 801399a:	f003 0302 	and.w	r3, r3, #2
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d104      	bne.n	80139ac <tcp_enqueue_flags+0x168>
 80139a2:	78fb      	ldrb	r3, [r7, #3]
 80139a4:	f003 0301 	and.w	r3, r3, #1
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d004      	beq.n	80139b6 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80139b0:	1c5a      	adds	r2, r3, #1
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80139b6:	78fb      	ldrb	r3, [r7, #3]
 80139b8:	f003 0301 	and.w	r3, r3, #1
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d006      	beq.n	80139ce <tcp_enqueue_flags+0x18a>
    tcp_set_flags(pcb, TF_FIN);
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	8b5b      	ldrh	r3, [r3, #26]
 80139c4:	f043 0320 	orr.w	r3, r3, #32
 80139c8:	b29a      	uxth	r2, r3
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	685b      	ldr	r3, [r3, #4]
 80139d2:	4618      	mov	r0, r3
 80139d4:	f7fb fb74 	bl	800f0c0 <pbuf_clen>
 80139d8:	4603      	mov	r3, r0
 80139da:	461a      	mov	r2, r3
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80139e2:	4413      	add	r3, r2
 80139e4:	b29a      	uxth	r2, r3
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d00e      	beq.n	8013a14 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d10a      	bne.n	8013a14 <tcp_enqueue_flags+0x1d0>
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d106      	bne.n	8013a14 <tcp_enqueue_flags+0x1d0>
 8013a06:	4b06      	ldr	r3, [pc, #24]	@ (8013a20 <tcp_enqueue_flags+0x1dc>)
 8013a08:	f240 4265 	movw	r2, #1125	@ 0x465
 8013a0c:	490c      	ldr	r1, [pc, #48]	@ (8013a40 <tcp_enqueue_flags+0x1fc>)
 8013a0e:	4806      	ldr	r0, [pc, #24]	@ (8013a28 <tcp_enqueue_flags+0x1e4>)
 8013a10:	f005 fe28 	bl	8019664 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013a14:	2300      	movs	r3, #0
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	3718      	adds	r7, #24
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}
 8013a1e:	bf00      	nop
 8013a20:	0801ceb4 	.word	0x0801ceb4
 8013a24:	0801d334 	.word	0x0801d334
 8013a28:	0801cf08 	.word	0x0801cf08
 8013a2c:	0801d38c 	.word	0x0801d38c
 8013a30:	2000ea4c 	.word	0x2000ea4c
 8013a34:	0801d3ac 	.word	0x0801d3ac
 8013a38:	0801d3e8 	.word	0x0801d3e8
 8013a3c:	0801d400 	.word	0x0801d400
 8013a40:	0801d42c 	.word	0x0801d42c

08013a44 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013a44:	b5b0      	push	{r4, r5, r7, lr}
 8013a46:	b08a      	sub	sp, #40	@ 0x28
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d106      	bne.n	8013a60 <tcp_output+0x1c>
 8013a52:	4b8a      	ldr	r3, [pc, #552]	@ (8013c7c <tcp_output+0x238>)
 8013a54:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8013a58:	4989      	ldr	r1, [pc, #548]	@ (8013c80 <tcp_output+0x23c>)
 8013a5a:	488a      	ldr	r0, [pc, #552]	@ (8013c84 <tcp_output+0x240>)
 8013a5c:	f005 fe02 	bl	8019664 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	7d1b      	ldrb	r3, [r3, #20]
 8013a64:	2b01      	cmp	r3, #1
 8013a66:	d106      	bne.n	8013a76 <tcp_output+0x32>
 8013a68:	4b84      	ldr	r3, [pc, #528]	@ (8013c7c <tcp_output+0x238>)
 8013a6a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8013a6e:	4986      	ldr	r1, [pc, #536]	@ (8013c88 <tcp_output+0x244>)
 8013a70:	4884      	ldr	r0, [pc, #528]	@ (8013c84 <tcp_output+0x240>)
 8013a72:	f005 fdf7 	bl	8019664 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013a76:	4b85      	ldr	r3, [pc, #532]	@ (8013c8c <tcp_output+0x248>)
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	687a      	ldr	r2, [r7, #4]
 8013a7c:	429a      	cmp	r2, r3
 8013a7e:	d101      	bne.n	8013a84 <tcp_output+0x40>
    return ERR_OK;
 8013a80:	2300      	movs	r3, #0
 8013a82:	e1d1      	b.n	8013e28 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013a90:	4293      	cmp	r3, r2
 8013a92:	bf28      	it	cs
 8013a94:	4613      	movcs	r3, r2
 8013a96:	b29b      	uxth	r3, r3
 8013a98:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013a9e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8013aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d10b      	bne.n	8013abe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	8b5b      	ldrh	r3, [r3, #26]
 8013aaa:	f003 0302 	and.w	r3, r3, #2
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	f000 81ad 	beq.w	8013e0e <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 8013ab4:	6878      	ldr	r0, [r7, #4]
 8013ab6:	f000 fdeb 	bl	8014690 <tcp_send_empty_ack>
 8013aba:	4603      	mov	r3, r0
 8013abc:	e1b4      	b.n	8013e28 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013abe:	6879      	ldr	r1, [r7, #4]
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	3304      	adds	r3, #4
 8013ac4:	461a      	mov	r2, r3
 8013ac6:	6878      	ldr	r0, [r7, #4]
 8013ac8:	f7ff fc50 	bl	801336c <tcp_route>
 8013acc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013ace:	697b      	ldr	r3, [r7, #20]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d102      	bne.n	8013ada <tcp_output+0x96>
    return ERR_RTE;
 8013ad4:	f06f 0303 	mvn.w	r3, #3
 8013ad8:	e1a6      	b.n	8013e28 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d003      	beq.n	8013ae8 <tcp_output+0xa4>
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d111      	bne.n	8013b0c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013ae8:	697b      	ldr	r3, [r7, #20]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d002      	beq.n	8013af4 <tcp_output+0xb0>
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	3304      	adds	r3, #4
 8013af2:	e000      	b.n	8013af6 <tcp_output+0xb2>
 8013af4:	2300      	movs	r3, #0
 8013af6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013af8:	693b      	ldr	r3, [r7, #16]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d102      	bne.n	8013b04 <tcp_output+0xc0>
      return ERR_RTE;
 8013afe:	f06f 0303 	mvn.w	r3, #3
 8013b02:	e191      	b.n	8013e28 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013b04:	693b      	ldr	r3, [r7, #16]
 8013b06:	681a      	ldr	r2, [r3, #0]
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b0e:	691b      	ldr	r3, [r3, #16]
 8013b10:	685b      	ldr	r3, [r3, #4]
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7f9 fbc0 	bl	800d298 <lwip_htonl>
 8013b18:	4602      	mov	r2, r0
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b1e:	1ad3      	subs	r3, r2, r3
 8013b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013b22:	8912      	ldrh	r2, [r2, #8]
 8013b24:	4413      	add	r3, r2
 8013b26:	69ba      	ldr	r2, [r7, #24]
 8013b28:	429a      	cmp	r2, r3
 8013b2a:	d227      	bcs.n	8013b7c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013b32:	461a      	mov	r2, r3
 8013b34:	69bb      	ldr	r3, [r7, #24]
 8013b36:	4293      	cmp	r3, r2
 8013b38:	d114      	bne.n	8013b64 <tcp_output+0x120>
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d110      	bne.n	8013b64 <tcp_output+0x120>
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d10b      	bne.n	8013b64 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	2200      	movs	r2, #0
 8013b50:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	2201      	movs	r2, #1
 8013b58:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2200      	movs	r2, #0
 8013b60:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	8b5b      	ldrh	r3, [r3, #26]
 8013b68:	f003 0302 	and.w	r3, r3, #2
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	f000 8150 	beq.w	8013e12 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f000 fd8c 	bl	8014690 <tcp_send_empty_ack>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	e155      	b.n	8013e28 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	2200      	movs	r2, #0
 8013b80:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013b88:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013b8a:	6a3b      	ldr	r3, [r7, #32]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	f000 811f 	beq.w	8013dd0 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 8013b92:	e002      	b.n	8013b9a <tcp_output+0x156>
 8013b94:	6a3b      	ldr	r3, [r7, #32]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	623b      	str	r3, [r7, #32]
 8013b9a:	6a3b      	ldr	r3, [r7, #32]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d1f8      	bne.n	8013b94 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013ba2:	e115      	b.n	8013dd0 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ba6:	691b      	ldr	r3, [r3, #16]
 8013ba8:	899b      	ldrh	r3, [r3, #12]
 8013baa:	b29b      	uxth	r3, r3
 8013bac:	4618      	mov	r0, r3
 8013bae:	f7f9 fb5d 	bl	800d26c <lwip_htons>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	b2db      	uxtb	r3, r3
 8013bb6:	f003 0304 	and.w	r3, r3, #4
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d006      	beq.n	8013bcc <tcp_output+0x188>
 8013bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8013c7c <tcp_output+0x238>)
 8013bc0:	f240 5236 	movw	r2, #1334	@ 0x536
 8013bc4:	4932      	ldr	r1, [pc, #200]	@ (8013c90 <tcp_output+0x24c>)
 8013bc6:	482f      	ldr	r0, [pc, #188]	@ (8013c84 <tcp_output+0x240>)
 8013bc8:	f005 fd4c 	bl	8019664 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d01f      	beq.n	8013c14 <tcp_output+0x1d0>
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	8b5b      	ldrh	r3, [r3, #26]
 8013bd8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d119      	bne.n	8013c14 <tcp_output+0x1d0>
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d00b      	beq.n	8013c00 <tcp_output+0x1bc>
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d110      	bne.n	8013c14 <tcp_output+0x1d0>
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013bf6:	891a      	ldrh	r2, [r3, #8]
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013bfc:	429a      	cmp	r2, r3
 8013bfe:	d209      	bcs.n	8013c14 <tcp_output+0x1d0>
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d004      	beq.n	8013c14 <tcp_output+0x1d0>
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013c10:	2b08      	cmp	r3, #8
 8013c12:	d901      	bls.n	8013c18 <tcp_output+0x1d4>
 8013c14:	2301      	movs	r3, #1
 8013c16:	e000      	b.n	8013c1a <tcp_output+0x1d6>
 8013c18:	2300      	movs	r3, #0
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d106      	bne.n	8013c2c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	8b5b      	ldrh	r3, [r3, #26]
 8013c22:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	f000 80e7 	beq.w	8013dfa <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	7d1b      	ldrb	r3, [r3, #20]
 8013c30:	2b02      	cmp	r3, #2
 8013c32:	d00d      	beq.n	8013c50 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c36:	691b      	ldr	r3, [r3, #16]
 8013c38:	899b      	ldrh	r3, [r3, #12]
 8013c3a:	b29c      	uxth	r4, r3
 8013c3c:	2010      	movs	r0, #16
 8013c3e:	f7f9 fb15 	bl	800d26c <lwip_htons>
 8013c42:	4603      	mov	r3, r0
 8013c44:	461a      	mov	r2, r3
 8013c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c48:	691b      	ldr	r3, [r3, #16]
 8013c4a:	4322      	orrs	r2, r4
 8013c4c:	b292      	uxth	r2, r2
 8013c4e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013c50:	697a      	ldr	r2, [r7, #20]
 8013c52:	6879      	ldr	r1, [r7, #4]
 8013c54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013c56:	f000 f90b 	bl	8013e70 <tcp_output_segment>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d016      	beq.n	8013c94 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	8b5b      	ldrh	r3, [r3, #26]
 8013c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c6e:	b29a      	uxth	r2, r3
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	835a      	strh	r2, [r3, #26]
      return err;
 8013c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c78:	e0d6      	b.n	8013e28 <tcp_output+0x3e4>
 8013c7a:	bf00      	nop
 8013c7c:	0801ceb4 	.word	0x0801ceb4
 8013c80:	0801d454 	.word	0x0801d454
 8013c84:	0801cf08 	.word	0x0801cf08
 8013c88:	0801d46c 	.word	0x0801d46c
 8013c8c:	2000ebbc 	.word	0x2000ebbc
 8013c90:	0801d494 	.word	0x0801d494
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8013c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c96:	2200      	movs	r2, #0
 8013c98:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c9c:	681a      	ldr	r2, [r3, #0]
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	7d1b      	ldrb	r3, [r3, #20]
 8013ca6:	2b02      	cmp	r3, #2
 8013ca8:	d006      	beq.n	8013cb8 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	8b5b      	ldrh	r3, [r3, #26]
 8013cae:	f023 0303 	bic.w	r3, r3, #3
 8013cb2:	b29a      	uxth	r2, r3
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cba:	691b      	ldr	r3, [r3, #16]
 8013cbc:	685b      	ldr	r3, [r3, #4]
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	f7f9 faea 	bl	800d298 <lwip_htonl>
 8013cc4:	4604      	mov	r4, r0
 8013cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cc8:	891b      	ldrh	r3, [r3, #8]
 8013cca:	461d      	mov	r5, r3
 8013ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cce:	691b      	ldr	r3, [r3, #16]
 8013cd0:	899b      	ldrh	r3, [r3, #12]
 8013cd2:	b29b      	uxth	r3, r3
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7f9 fac9 	bl	800d26c <lwip_htons>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	b2db      	uxtb	r3, r3
 8013cde:	f003 0303 	and.w	r3, r3, #3
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d001      	beq.n	8013cea <tcp_output+0x2a6>
 8013ce6:	2301      	movs	r3, #1
 8013ce8:	e000      	b.n	8013cec <tcp_output+0x2a8>
 8013cea:	2300      	movs	r3, #0
 8013cec:	442b      	add	r3, r5
 8013cee:	4423      	add	r3, r4
 8013cf0:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013cf6:	68bb      	ldr	r3, [r7, #8]
 8013cf8:	1ad3      	subs	r3, r2, r3
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	da02      	bge.n	8013d04 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	68ba      	ldr	r2, [r7, #8]
 8013d02:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d06:	891b      	ldrh	r3, [r3, #8]
 8013d08:	461c      	mov	r4, r3
 8013d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d0c:	691b      	ldr	r3, [r3, #16]
 8013d0e:	899b      	ldrh	r3, [r3, #12]
 8013d10:	b29b      	uxth	r3, r3
 8013d12:	4618      	mov	r0, r3
 8013d14:	f7f9 faaa 	bl	800d26c <lwip_htons>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	b2db      	uxtb	r3, r3
 8013d1c:	f003 0303 	and.w	r3, r3, #3
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d001      	beq.n	8013d28 <tcp_output+0x2e4>
 8013d24:	2301      	movs	r3, #1
 8013d26:	e000      	b.n	8013d2a <tcp_output+0x2e6>
 8013d28:	2300      	movs	r3, #0
 8013d2a:	4423      	add	r3, r4
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d049      	beq.n	8013dc4 <tcp_output+0x380>
      seg->next = NULL;
 8013d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d32:	2200      	movs	r2, #0
 8013d34:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d105      	bne.n	8013d4a <tcp_output+0x306>
        pcb->unacked = seg;
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013d42:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8013d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d46:	623b      	str	r3, [r7, #32]
 8013d48:	e03f      	b.n	8013dca <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d4c:	691b      	ldr	r3, [r3, #16]
 8013d4e:	685b      	ldr	r3, [r3, #4]
 8013d50:	4618      	mov	r0, r3
 8013d52:	f7f9 faa1 	bl	800d298 <lwip_htonl>
 8013d56:	4604      	mov	r4, r0
 8013d58:	6a3b      	ldr	r3, [r7, #32]
 8013d5a:	691b      	ldr	r3, [r3, #16]
 8013d5c:	685b      	ldr	r3, [r3, #4]
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f7f9 fa9a 	bl	800d298 <lwip_htonl>
 8013d64:	4603      	mov	r3, r0
 8013d66:	1ae3      	subs	r3, r4, r3
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	da24      	bge.n	8013db6 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	3370      	adds	r3, #112	@ 0x70
 8013d70:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013d72:	e002      	b.n	8013d7a <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013d74:	69fb      	ldr	r3, [r7, #28]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013d7a:	69fb      	ldr	r3, [r7, #28]
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d011      	beq.n	8013da6 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013d82:	69fb      	ldr	r3, [r7, #28]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	691b      	ldr	r3, [r3, #16]
 8013d88:	685b      	ldr	r3, [r3, #4]
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f7f9 fa84 	bl	800d298 <lwip_htonl>
 8013d90:	4604      	mov	r4, r0
 8013d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d94:	691b      	ldr	r3, [r3, #16]
 8013d96:	685b      	ldr	r3, [r3, #4]
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f7f9 fa7d 	bl	800d298 <lwip_htonl>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	dbe6      	blt.n	8013d74 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 8013da6:	69fb      	ldr	r3, [r7, #28]
 8013da8:	681a      	ldr	r2, [r3, #0]
 8013daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dac:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013dae:	69fb      	ldr	r3, [r7, #28]
 8013db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013db2:	601a      	str	r2, [r3, #0]
 8013db4:	e009      	b.n	8013dca <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013db6:	6a3b      	ldr	r3, [r7, #32]
 8013db8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013dba:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013dbc:	6a3b      	ldr	r3, [r7, #32]
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	623b      	str	r3, [r7, #32]
 8013dc2:	e002      	b.n	8013dca <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013dc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013dc6:	f7fc fb7e 	bl	80104c6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013dce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8013dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d012      	beq.n	8013dfc <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dd8:	691b      	ldr	r3, [r3, #16]
 8013dda:	685b      	ldr	r3, [r3, #4]
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f7f9 fa5b 	bl	800d298 <lwip_htonl>
 8013de2:	4602      	mov	r2, r0
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013de8:	1ad3      	subs	r3, r2, r3
 8013dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013dec:	8912      	ldrh	r2, [r2, #8]
 8013dee:	4413      	add	r3, r2
  while (seg != NULL &&
 8013df0:	69ba      	ldr	r2, [r7, #24]
 8013df2:	429a      	cmp	r2, r3
 8013df4:	f4bf aed6 	bcs.w	8013ba4 <tcp_output+0x160>
 8013df8:	e000      	b.n	8013dfc <tcp_output+0x3b8>
      break;
 8013dfa:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d108      	bne.n	8013e16 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	2200      	movs	r2, #0
 8013e08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8013e0c:	e004      	b.n	8013e18 <tcp_output+0x3d4>
    goto output_done;
 8013e0e:	bf00      	nop
 8013e10:	e002      	b.n	8013e18 <tcp_output+0x3d4>
    goto output_done;
 8013e12:	bf00      	nop
 8013e14:	e000      	b.n	8013e18 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013e16:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	8b5b      	ldrh	r3, [r3, #26]
 8013e1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013e20:	b29a      	uxth	r2, r3
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013e26:	2300      	movs	r3, #0
}
 8013e28:	4618      	mov	r0, r3
 8013e2a:	3728      	adds	r7, #40	@ 0x28
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bdb0      	pop	{r4, r5, r7, pc}

08013e30 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b082      	sub	sp, #8
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d106      	bne.n	8013e4c <tcp_output_segment_busy+0x1c>
 8013e3e:	4b09      	ldr	r3, [pc, #36]	@ (8013e64 <tcp_output_segment_busy+0x34>)
 8013e40:	f240 529a 	movw	r2, #1434	@ 0x59a
 8013e44:	4908      	ldr	r1, [pc, #32]	@ (8013e68 <tcp_output_segment_busy+0x38>)
 8013e46:	4809      	ldr	r0, [pc, #36]	@ (8013e6c <tcp_output_segment_busy+0x3c>)
 8013e48:	f005 fc0c 	bl	8019664 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	685b      	ldr	r3, [r3, #4]
 8013e50:	7b9b      	ldrb	r3, [r3, #14]
 8013e52:	2b01      	cmp	r3, #1
 8013e54:	d001      	beq.n	8013e5a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013e56:	2301      	movs	r3, #1
 8013e58:	e000      	b.n	8013e5c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013e5a:	2300      	movs	r3, #0
}
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	3708      	adds	r7, #8
 8013e60:	46bd      	mov	sp, r7
 8013e62:	bd80      	pop	{r7, pc}
 8013e64:	0801ceb4 	.word	0x0801ceb4
 8013e68:	0801d4ac 	.word	0x0801d4ac
 8013e6c:	0801cf08 	.word	0x0801cf08

08013e70 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013e70:	b5b0      	push	{r4, r5, r7, lr}
 8013e72:	b08c      	sub	sp, #48	@ 0x30
 8013e74:	af04      	add	r7, sp, #16
 8013e76:	60f8      	str	r0, [r7, #12]
 8013e78:	60b9      	str	r1, [r7, #8]
 8013e7a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d106      	bne.n	8013e90 <tcp_output_segment+0x20>
 8013e82:	4b68      	ldr	r3, [pc, #416]	@ (8014024 <tcp_output_segment+0x1b4>)
 8013e84:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8013e88:	4967      	ldr	r1, [pc, #412]	@ (8014028 <tcp_output_segment+0x1b8>)
 8013e8a:	4868      	ldr	r0, [pc, #416]	@ (801402c <tcp_output_segment+0x1bc>)
 8013e8c:	f005 fbea 	bl	8019664 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d106      	bne.n	8013ea4 <tcp_output_segment+0x34>
 8013e96:	4b63      	ldr	r3, [pc, #396]	@ (8014024 <tcp_output_segment+0x1b4>)
 8013e98:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8013e9c:	4964      	ldr	r1, [pc, #400]	@ (8014030 <tcp_output_segment+0x1c0>)
 8013e9e:	4863      	ldr	r0, [pc, #396]	@ (801402c <tcp_output_segment+0x1bc>)
 8013ea0:	f005 fbe0 	bl	8019664 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d106      	bne.n	8013eb8 <tcp_output_segment+0x48>
 8013eaa:	4b5e      	ldr	r3, [pc, #376]	@ (8014024 <tcp_output_segment+0x1b4>)
 8013eac:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8013eb0:	4960      	ldr	r1, [pc, #384]	@ (8014034 <tcp_output_segment+0x1c4>)
 8013eb2:	485e      	ldr	r0, [pc, #376]	@ (801402c <tcp_output_segment+0x1bc>)
 8013eb4:	f005 fbd6 	bl	8019664 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013eb8:	68f8      	ldr	r0, [r7, #12]
 8013eba:	f7ff ffb9 	bl	8013e30 <tcp_output_segment_busy>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d001      	beq.n	8013ec8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	e0a9      	b.n	801401c <tcp_output_segment+0x1ac>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013ec8:	68bb      	ldr	r3, [r7, #8]
 8013eca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	691c      	ldr	r4, [r3, #16]
 8013ed0:	4610      	mov	r0, r2
 8013ed2:	f7f9 f9e1 	bl	800d298 <lwip_htonl>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013eda:	68bb      	ldr	r3, [r7, #8]
 8013edc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	691c      	ldr	r4, [r3, #16]
 8013ee2:	4610      	mov	r0, r2
 8013ee4:	f7f9 f9c2 	bl	800d26c <lwip_htons>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013eec:	68bb      	ldr	r3, [r7, #8]
 8013eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ef0:	68ba      	ldr	r2, [r7, #8]
 8013ef2:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8013ef4:	441a      	add	r2, r3
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	691b      	ldr	r3, [r3, #16]
 8013efe:	3314      	adds	r3, #20
 8013f00:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	7b1b      	ldrb	r3, [r3, #12]
 8013f06:	f003 0301 	and.w	r3, r3, #1
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d015      	beq.n	8013f3a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013f0e:	68bb      	ldr	r3, [r7, #8]
 8013f10:	3304      	adds	r3, #4
 8013f12:	461a      	mov	r2, r3
 8013f14:	6879      	ldr	r1, [r7, #4]
 8013f16:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8013f1a:	f7fc fdf5 	bl	8010b08 <tcp_eff_send_mss_netif>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013f22:	8b7b      	ldrh	r3, [r7, #26]
 8013f24:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7f9 f9b5 	bl	800d298 <lwip_htonl>
 8013f2e:	4602      	mov	r2, r0
 8013f30:	69fb      	ldr	r3, [r7, #28]
 8013f32:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013f34:	69fb      	ldr	r3, [r7, #28]
 8013f36:	3304      	adds	r3, #4
 8013f38:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013f3a:	68bb      	ldr	r3, [r7, #8]
 8013f3c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	da02      	bge.n	8013f4a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	2200      	movs	r2, #0
 8013f48:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d10c      	bne.n	8013f6c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013f52:	4b39      	ldr	r3, [pc, #228]	@ (8014038 <tcp_output_segment+0x1c8>)
 8013f54:	681a      	ldr	r2, [r3, #0]
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	691b      	ldr	r3, [r3, #16]
 8013f5e:	685b      	ldr	r3, [r3, #4]
 8013f60:	4618      	mov	r0, r3
 8013f62:	f7f9 f999 	bl	800d298 <lwip_htonl>
 8013f66:	4602      	mov	r2, r0
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	691a      	ldr	r2, [r3, #16]
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	685b      	ldr	r3, [r3, #4]
 8013f74:	685b      	ldr	r3, [r3, #4]
 8013f76:	1ad3      	subs	r3, r2, r3
 8013f78:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	685b      	ldr	r3, [r3, #4]
 8013f7e:	8959      	ldrh	r1, [r3, #10]
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	685b      	ldr	r3, [r3, #4]
 8013f84:	8b3a      	ldrh	r2, [r7, #24]
 8013f86:	1a8a      	subs	r2, r1, r2
 8013f88:	b292      	uxth	r2, r2
 8013f8a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	685b      	ldr	r3, [r3, #4]
 8013f90:	8919      	ldrh	r1, [r3, #8]
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	685b      	ldr	r3, [r3, #4]
 8013f96:	8b3a      	ldrh	r2, [r7, #24]
 8013f98:	1a8a      	subs	r2, r1, r2
 8013f9a:	b292      	uxth	r2, r2
 8013f9c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	685b      	ldr	r3, [r3, #4]
 8013fa2:	68fa      	ldr	r2, [r7, #12]
 8013fa4:	6912      	ldr	r2, [r2, #16]
 8013fa6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	691b      	ldr	r3, [r3, #16]
 8013fac:	2200      	movs	r2, #0
 8013fae:	741a      	strb	r2, [r3, #16]
 8013fb0:	2200      	movs	r2, #0
 8013fb2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	691a      	ldr	r2, [r3, #16]
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	7b1b      	ldrb	r3, [r3, #12]
 8013fbc:	f003 0301 	and.w	r3, r3, #1
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d001      	beq.n	8013fc8 <tcp_output_segment+0x158>
 8013fc4:	2318      	movs	r3, #24
 8013fc6:	e000      	b.n	8013fca <tcp_output_segment+0x15a>
 8013fc8:	2314      	movs	r3, #20
 8013fca:	4413      	add	r3, r2
 8013fcc:	69fa      	ldr	r2, [r7, #28]
 8013fce:	429a      	cmp	r2, r3
 8013fd0:	d006      	beq.n	8013fe0 <tcp_output_segment+0x170>
 8013fd2:	4b14      	ldr	r3, [pc, #80]	@ (8014024 <tcp_output_segment+0x1b4>)
 8013fd4:	f240 621c 	movw	r2, #1564	@ 0x61c
 8013fd8:	4918      	ldr	r1, [pc, #96]	@ (801403c <tcp_output_segment+0x1cc>)
 8013fda:	4814      	ldr	r0, [pc, #80]	@ (801402c <tcp_output_segment+0x1bc>)
 8013fdc:	f005 fb42 	bl	8019664 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 8013fe0:	4b17      	ldr	r3, [pc, #92]	@ (8014040 <tcp_output_segment+0x1d0>)
 8013fe2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8013fe6:	3301      	adds	r3, #1
 8013fe8:	b29a      	uxth	r2, r3
 8013fea:	4b15      	ldr	r3, [pc, #84]	@ (8014040 <tcp_output_segment+0x1d0>)
 8013fec:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	6858      	ldr	r0, [r3, #4]
 8013ff4:	68b9      	ldr	r1, [r7, #8]
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	1d1c      	adds	r4, r3, #4
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	7add      	ldrb	r5, [r3, #11]
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	7a9b      	ldrb	r3, [r3, #10]
 8014002:	687a      	ldr	r2, [r7, #4]
 8014004:	9202      	str	r2, [sp, #8]
 8014006:	2206      	movs	r2, #6
 8014008:	9201      	str	r2, [sp, #4]
 801400a:	9300      	str	r3, [sp, #0]
 801400c:	462b      	mov	r3, r5
 801400e:	4622      	mov	r2, r4
 8014010:	f003 f9a4 	bl	801735c <ip4_output_if>
 8014014:	4603      	mov	r3, r0
 8014016:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014018:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801401c:	4618      	mov	r0, r3
 801401e:	3720      	adds	r7, #32
 8014020:	46bd      	mov	sp, r7
 8014022:	bdb0      	pop	{r4, r5, r7, pc}
 8014024:	0801ceb4 	.word	0x0801ceb4
 8014028:	0801d4d4 	.word	0x0801d4d4
 801402c:	0801cf08 	.word	0x0801cf08
 8014030:	0801d4f4 	.word	0x0801d4f4
 8014034:	0801d514 	.word	0x0801d514
 8014038:	2000eb6c 	.word	0x2000eb6c
 801403c:	0801d538 	.word	0x0801d538
 8014040:	2000ea4c 	.word	0x2000ea4c

08014044 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014044:	b5b0      	push	{r4, r5, r7, lr}
 8014046:	b084      	sub	sp, #16
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d106      	bne.n	8014060 <tcp_rexmit_rto_prepare+0x1c>
 8014052:	4b36      	ldr	r3, [pc, #216]	@ (801412c <tcp_rexmit_rto_prepare+0xe8>)
 8014054:	f240 6263 	movw	r2, #1635	@ 0x663
 8014058:	4935      	ldr	r1, [pc, #212]	@ (8014130 <tcp_rexmit_rto_prepare+0xec>)
 801405a:	4836      	ldr	r0, [pc, #216]	@ (8014134 <tcp_rexmit_rto_prepare+0xf0>)
 801405c:	f005 fb02 	bl	8019664 <iprintf>

  if (pcb->unacked == NULL) {
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014064:	2b00      	cmp	r3, #0
 8014066:	d102      	bne.n	801406e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014068:	f06f 0305 	mvn.w	r3, #5
 801406c:	e059      	b.n	8014122 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014072:	60fb      	str	r3, [r7, #12]
 8014074:	e00b      	b.n	801408e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014076:	68f8      	ldr	r0, [r7, #12]
 8014078:	f7ff feda 	bl	8013e30 <tcp_output_segment_busy>
 801407c:	4603      	mov	r3, r0
 801407e:	2b00      	cmp	r3, #0
 8014080:	d002      	beq.n	8014088 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014082:	f06f 0305 	mvn.w	r3, #5
 8014086:	e04c      	b.n	8014122 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	60fb      	str	r3, [r7, #12]
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d1ef      	bne.n	8014076 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014096:	68f8      	ldr	r0, [r7, #12]
 8014098:	f7ff feca 	bl	8013e30 <tcp_output_segment_busy>
 801409c:	4603      	mov	r3, r0
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d002      	beq.n	80140a8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80140a2:	f06f 0305 	mvn.w	r3, #5
 80140a6:	e03c      	b.n	8014122 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d104      	bne.n	80140c2 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	895a      	ldrh	r2, [r3, #10]
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	2200      	movs	r2, #0
 80140ce:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	8b5b      	ldrh	r3, [r3, #26]
 80140d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80140d8:	b29a      	uxth	r2, r3
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	691b      	ldr	r3, [r3, #16]
 80140e2:	685b      	ldr	r3, [r3, #4]
 80140e4:	4618      	mov	r0, r3
 80140e6:	f7f9 f8d7 	bl	800d298 <lwip_htonl>
 80140ea:	4604      	mov	r4, r0
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	891b      	ldrh	r3, [r3, #8]
 80140f0:	461d      	mov	r5, r3
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	691b      	ldr	r3, [r3, #16]
 80140f6:	899b      	ldrh	r3, [r3, #12]
 80140f8:	b29b      	uxth	r3, r3
 80140fa:	4618      	mov	r0, r3
 80140fc:	f7f9 f8b6 	bl	800d26c <lwip_htons>
 8014100:	4603      	mov	r3, r0
 8014102:	b2db      	uxtb	r3, r3
 8014104:	f003 0303 	and.w	r3, r3, #3
 8014108:	2b00      	cmp	r3, #0
 801410a:	d001      	beq.n	8014110 <tcp_rexmit_rto_prepare+0xcc>
 801410c:	2301      	movs	r3, #1
 801410e:	e000      	b.n	8014112 <tcp_rexmit_rto_prepare+0xce>
 8014110:	2300      	movs	r3, #0
 8014112:	442b      	add	r3, r5
 8014114:	18e2      	adds	r2, r4, r3
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	2200      	movs	r2, #0
 801411e:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8014120:	2300      	movs	r3, #0
}
 8014122:	4618      	mov	r0, r3
 8014124:	3710      	adds	r7, #16
 8014126:	46bd      	mov	sp, r7
 8014128:	bdb0      	pop	{r4, r5, r7, pc}
 801412a:	bf00      	nop
 801412c:	0801ceb4 	.word	0x0801ceb4
 8014130:	0801d54c 	.word	0x0801d54c
 8014134:	0801cf08 	.word	0x0801cf08

08014138 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b082      	sub	sp, #8
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d106      	bne.n	8014154 <tcp_rexmit_rto_commit+0x1c>
 8014146:	4b0d      	ldr	r3, [pc, #52]	@ (801417c <tcp_rexmit_rto_commit+0x44>)
 8014148:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801414c:	490c      	ldr	r1, [pc, #48]	@ (8014180 <tcp_rexmit_rto_commit+0x48>)
 801414e:	480d      	ldr	r0, [pc, #52]	@ (8014184 <tcp_rexmit_rto_commit+0x4c>)
 8014150:	f005 fa88 	bl	8019664 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801415a:	2bff      	cmp	r3, #255	@ 0xff
 801415c:	d007      	beq.n	801416e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014164:	3301      	adds	r3, #1
 8014166:	b2da      	uxtb	r2, r3
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	f7ff fc68 	bl	8013a44 <tcp_output>
}
 8014174:	bf00      	nop
 8014176:	3708      	adds	r7, #8
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}
 801417c:	0801ceb4 	.word	0x0801ceb4
 8014180:	0801d570 	.word	0x0801d570
 8014184:	0801cf08 	.word	0x0801cf08

08014188 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b082      	sub	sp, #8
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d106      	bne.n	80141a4 <tcp_rexmit_rto+0x1c>
 8014196:	4b0a      	ldr	r3, [pc, #40]	@ (80141c0 <tcp_rexmit_rto+0x38>)
 8014198:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801419c:	4909      	ldr	r1, [pc, #36]	@ (80141c4 <tcp_rexmit_rto+0x3c>)
 801419e:	480a      	ldr	r0, [pc, #40]	@ (80141c8 <tcp_rexmit_rto+0x40>)
 80141a0:	f005 fa60 	bl	8019664 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80141a4:	6878      	ldr	r0, [r7, #4]
 80141a6:	f7ff ff4d 	bl	8014044 <tcp_rexmit_rto_prepare>
 80141aa:	4603      	mov	r3, r0
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d102      	bne.n	80141b6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f7ff ffc1 	bl	8014138 <tcp_rexmit_rto_commit>
  }
}
 80141b6:	bf00      	nop
 80141b8:	3708      	adds	r7, #8
 80141ba:	46bd      	mov	sp, r7
 80141bc:	bd80      	pop	{r7, pc}
 80141be:	bf00      	nop
 80141c0:	0801ceb4 	.word	0x0801ceb4
 80141c4:	0801d594 	.word	0x0801d594
 80141c8:	0801cf08 	.word	0x0801cf08

080141cc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80141cc:	b590      	push	{r4, r7, lr}
 80141ce:	b085      	sub	sp, #20
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d106      	bne.n	80141e8 <tcp_rexmit+0x1c>
 80141da:	4b2f      	ldr	r3, [pc, #188]	@ (8014298 <tcp_rexmit+0xcc>)
 80141dc:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80141e0:	492e      	ldr	r1, [pc, #184]	@ (801429c <tcp_rexmit+0xd0>)
 80141e2:	482f      	ldr	r0, [pc, #188]	@ (80142a0 <tcp_rexmit+0xd4>)
 80141e4:	f005 fa3e 	bl	8019664 <iprintf>

  if (pcb->unacked == NULL) {
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d102      	bne.n	80141f6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80141f0:	f06f 0305 	mvn.w	r3, #5
 80141f4:	e04c      	b.n	8014290 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80141fa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80141fc:	68b8      	ldr	r0, [r7, #8]
 80141fe:	f7ff fe17 	bl	8013e30 <tcp_output_segment_busy>
 8014202:	4603      	mov	r3, r0
 8014204:	2b00      	cmp	r3, #0
 8014206:	d002      	beq.n	801420e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014208:	f06f 0305 	mvn.w	r3, #5
 801420c:	e040      	b.n	8014290 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	681a      	ldr	r2, [r3, #0]
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	336c      	adds	r3, #108	@ 0x6c
 801421a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801421c:	e002      	b.n	8014224 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d011      	beq.n	8014250 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	691b      	ldr	r3, [r3, #16]
 8014232:	685b      	ldr	r3, [r3, #4]
 8014234:	4618      	mov	r0, r3
 8014236:	f7f9 f82f 	bl	800d298 <lwip_htonl>
 801423a:	4604      	mov	r4, r0
 801423c:	68bb      	ldr	r3, [r7, #8]
 801423e:	691b      	ldr	r3, [r3, #16]
 8014240:	685b      	ldr	r3, [r3, #4]
 8014242:	4618      	mov	r0, r3
 8014244:	f7f9 f828 	bl	800d298 <lwip_htonl>
 8014248:	4603      	mov	r3, r0
 801424a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801424c:	2b00      	cmp	r3, #0
 801424e:	dbe6      	blt.n	801421e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	681a      	ldr	r2, [r3, #0]
 8014254:	68bb      	ldr	r3, [r7, #8]
 8014256:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	68ba      	ldr	r2, [r7, #8]
 801425c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801425e:	68bb      	ldr	r3, [r7, #8]
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d103      	bne.n	801426e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	2200      	movs	r2, #0
 801426a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014274:	2bff      	cmp	r3, #255	@ 0xff
 8014276:	d007      	beq.n	8014288 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801427e:	3301      	adds	r3, #1
 8014280:	b2da      	uxtb	r2, r3
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	2200      	movs	r2, #0
 801428c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801428e:	2300      	movs	r3, #0
}
 8014290:	4618      	mov	r0, r3
 8014292:	3714      	adds	r7, #20
 8014294:	46bd      	mov	sp, r7
 8014296:	bd90      	pop	{r4, r7, pc}
 8014298:	0801ceb4 	.word	0x0801ceb4
 801429c:	0801d5b0 	.word	0x0801d5b0
 80142a0:	0801cf08 	.word	0x0801cf08

080142a4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b082      	sub	sp, #8
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d106      	bne.n	80142c0 <tcp_rexmit_fast+0x1c>
 80142b2:	4b2a      	ldr	r3, [pc, #168]	@ (801435c <tcp_rexmit_fast+0xb8>)
 80142b4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80142b8:	4929      	ldr	r1, [pc, #164]	@ (8014360 <tcp_rexmit_fast+0xbc>)
 80142ba:	482a      	ldr	r0, [pc, #168]	@ (8014364 <tcp_rexmit_fast+0xc0>)
 80142bc:	f005 f9d2 	bl	8019664 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d044      	beq.n	8014352 <tcp_rexmit_fast+0xae>
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	8b5b      	ldrh	r3, [r3, #26]
 80142cc:	f003 0304 	and.w	r3, r3, #4
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d13e      	bne.n	8014352 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80142d4:	6878      	ldr	r0, [r7, #4]
 80142d6:	f7ff ff79 	bl	80141cc <tcp_rexmit>
 80142da:	4603      	mov	r3, r0
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d138      	bne.n	8014352 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80142ec:	4293      	cmp	r3, r2
 80142ee:	bf28      	it	cs
 80142f0:	4613      	movcs	r3, r2
 80142f2:	b29b      	uxth	r3, r3
 80142f4:	0fda      	lsrs	r2, r3, #31
 80142f6:	4413      	add	r3, r2
 80142f8:	105b      	asrs	r3, r3, #1
 80142fa:	b29a      	uxth	r2, r3
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8014308:	461a      	mov	r2, r3
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801430e:	005b      	lsls	r3, r3, #1
 8014310:	429a      	cmp	r2, r3
 8014312:	d206      	bcs.n	8014322 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014318:	005b      	lsls	r3, r3, #1
 801431a:	b29a      	uxth	r2, r3
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801432c:	4619      	mov	r1, r3
 801432e:	0049      	lsls	r1, r1, #1
 8014330:	440b      	add	r3, r1
 8014332:	b29b      	uxth	r3, r3
 8014334:	4413      	add	r3, r2
 8014336:	b29a      	uxth	r2, r3
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	8b5b      	ldrh	r3, [r3, #26]
 8014342:	f043 0304 	orr.w	r3, r3, #4
 8014346:	b29a      	uxth	r2, r3
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	2200      	movs	r2, #0
 8014350:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8014352:	bf00      	nop
 8014354:	3708      	adds	r7, #8
 8014356:	46bd      	mov	sp, r7
 8014358:	bd80      	pop	{r7, pc}
 801435a:	bf00      	nop
 801435c:	0801ceb4 	.word	0x0801ceb4
 8014360:	0801d5c8 	.word	0x0801d5c8
 8014364:	0801cf08 	.word	0x0801cf08

08014368 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b086      	sub	sp, #24
 801436c:	af00      	add	r7, sp, #0
 801436e:	60f8      	str	r0, [r7, #12]
 8014370:	607b      	str	r3, [r7, #4]
 8014372:	460b      	mov	r3, r1
 8014374:	817b      	strh	r3, [r7, #10]
 8014376:	4613      	mov	r3, r2
 8014378:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801437a:	897a      	ldrh	r2, [r7, #10]
 801437c:	893b      	ldrh	r3, [r7, #8]
 801437e:	4413      	add	r3, r2
 8014380:	b29b      	uxth	r3, r3
 8014382:	3314      	adds	r3, #20
 8014384:	b29b      	uxth	r3, r3
 8014386:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801438a:	4619      	mov	r1, r3
 801438c:	2024      	movs	r0, #36	@ 0x24
 801438e:	f7fa fb25 	bl	800e9dc <pbuf_alloc>
 8014392:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014394:	697b      	ldr	r3, [r7, #20]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d04d      	beq.n	8014436 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801439a:	897b      	ldrh	r3, [r7, #10]
 801439c:	3313      	adds	r3, #19
 801439e:	697a      	ldr	r2, [r7, #20]
 80143a0:	8952      	ldrh	r2, [r2, #10]
 80143a2:	4293      	cmp	r3, r2
 80143a4:	db06      	blt.n	80143b4 <tcp_output_alloc_header_common+0x4c>
 80143a6:	4b26      	ldr	r3, [pc, #152]	@ (8014440 <tcp_output_alloc_header_common+0xd8>)
 80143a8:	f240 7223 	movw	r2, #1827	@ 0x723
 80143ac:	4925      	ldr	r1, [pc, #148]	@ (8014444 <tcp_output_alloc_header_common+0xdc>)
 80143ae:	4826      	ldr	r0, [pc, #152]	@ (8014448 <tcp_output_alloc_header_common+0xe0>)
 80143b0:	f005 f958 	bl	8019664 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80143b4:	697b      	ldr	r3, [r7, #20]
 80143b6:	685b      	ldr	r3, [r3, #4]
 80143b8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80143ba:	8c3b      	ldrh	r3, [r7, #32]
 80143bc:	4618      	mov	r0, r3
 80143be:	f7f8 ff55 	bl	800d26c <lwip_htons>
 80143c2:	4603      	mov	r3, r0
 80143c4:	461a      	mov	r2, r3
 80143c6:	693b      	ldr	r3, [r7, #16]
 80143c8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80143ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80143cc:	4618      	mov	r0, r3
 80143ce:	f7f8 ff4d 	bl	800d26c <lwip_htons>
 80143d2:	4603      	mov	r3, r0
 80143d4:	461a      	mov	r2, r3
 80143d6:	693b      	ldr	r3, [r7, #16]
 80143d8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80143da:	693b      	ldr	r3, [r7, #16]
 80143dc:	687a      	ldr	r2, [r7, #4]
 80143de:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80143e0:	68f8      	ldr	r0, [r7, #12]
 80143e2:	f7f8 ff59 	bl	800d298 <lwip_htonl>
 80143e6:	4602      	mov	r2, r0
 80143e8:	693b      	ldr	r3, [r7, #16]
 80143ea:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80143ec:	897b      	ldrh	r3, [r7, #10]
 80143ee:	089b      	lsrs	r3, r3, #2
 80143f0:	b29b      	uxth	r3, r3
 80143f2:	3305      	adds	r3, #5
 80143f4:	b29b      	uxth	r3, r3
 80143f6:	031b      	lsls	r3, r3, #12
 80143f8:	b29a      	uxth	r2, r3
 80143fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80143fe:	b29b      	uxth	r3, r3
 8014400:	4313      	orrs	r3, r2
 8014402:	b29b      	uxth	r3, r3
 8014404:	4618      	mov	r0, r3
 8014406:	f7f8 ff31 	bl	800d26c <lwip_htons>
 801440a:	4603      	mov	r3, r0
 801440c:	461a      	mov	r2, r3
 801440e:	693b      	ldr	r3, [r7, #16]
 8014410:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014412:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014414:	4618      	mov	r0, r3
 8014416:	f7f8 ff29 	bl	800d26c <lwip_htons>
 801441a:	4603      	mov	r3, r0
 801441c:	461a      	mov	r2, r3
 801441e:	693b      	ldr	r3, [r7, #16]
 8014420:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014422:	693b      	ldr	r3, [r7, #16]
 8014424:	2200      	movs	r2, #0
 8014426:	741a      	strb	r2, [r3, #16]
 8014428:	2200      	movs	r2, #0
 801442a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801442c:	693b      	ldr	r3, [r7, #16]
 801442e:	2200      	movs	r2, #0
 8014430:	749a      	strb	r2, [r3, #18]
 8014432:	2200      	movs	r2, #0
 8014434:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014436:	697b      	ldr	r3, [r7, #20]
}
 8014438:	4618      	mov	r0, r3
 801443a:	3718      	adds	r7, #24
 801443c:	46bd      	mov	sp, r7
 801443e:	bd80      	pop	{r7, pc}
 8014440:	0801ceb4 	.word	0x0801ceb4
 8014444:	0801d5e8 	.word	0x0801d5e8
 8014448:	0801cf08 	.word	0x0801cf08

0801444c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801444c:	b5b0      	push	{r4, r5, r7, lr}
 801444e:	b08a      	sub	sp, #40	@ 0x28
 8014450:	af04      	add	r7, sp, #16
 8014452:	60f8      	str	r0, [r7, #12]
 8014454:	607b      	str	r3, [r7, #4]
 8014456:	460b      	mov	r3, r1
 8014458:	817b      	strh	r3, [r7, #10]
 801445a:	4613      	mov	r3, r2
 801445c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d106      	bne.n	8014472 <tcp_output_alloc_header+0x26>
 8014464:	4b15      	ldr	r3, [pc, #84]	@ (80144bc <tcp_output_alloc_header+0x70>)
 8014466:	f240 7242 	movw	r2, #1858	@ 0x742
 801446a:	4915      	ldr	r1, [pc, #84]	@ (80144c0 <tcp_output_alloc_header+0x74>)
 801446c:	4815      	ldr	r0, [pc, #84]	@ (80144c4 <tcp_output_alloc_header+0x78>)
 801446e:	f005 f8f9 	bl	8019664 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	8adb      	ldrh	r3, [r3, #22]
 801447a:	68fa      	ldr	r2, [r7, #12]
 801447c:	8b12      	ldrh	r2, [r2, #24]
 801447e:	68f9      	ldr	r1, [r7, #12]
 8014480:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8014482:	893d      	ldrh	r5, [r7, #8]
 8014484:	897c      	ldrh	r4, [r7, #10]
 8014486:	9103      	str	r1, [sp, #12]
 8014488:	2110      	movs	r1, #16
 801448a:	9102      	str	r1, [sp, #8]
 801448c:	9201      	str	r2, [sp, #4]
 801448e:	9300      	str	r3, [sp, #0]
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	462a      	mov	r2, r5
 8014494:	4621      	mov	r1, r4
 8014496:	f7ff ff67 	bl	8014368 <tcp_output_alloc_header_common>
 801449a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801449c:	697b      	ldr	r3, [r7, #20]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d006      	beq.n	80144b0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144a6:	68fa      	ldr	r2, [r7, #12]
 80144a8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80144aa:	441a      	add	r2, r3
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80144b0:	697b      	ldr	r3, [r7, #20]
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	3718      	adds	r7, #24
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bdb0      	pop	{r4, r5, r7, pc}
 80144ba:	bf00      	nop
 80144bc:	0801ceb4 	.word	0x0801ceb4
 80144c0:	0801d618 	.word	0x0801d618
 80144c4:	0801cf08 	.word	0x0801cf08

080144c8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b088      	sub	sp, #32
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	60f8      	str	r0, [r7, #12]
 80144d0:	60b9      	str	r1, [r7, #8]
 80144d2:	4611      	mov	r1, r2
 80144d4:	461a      	mov	r2, r3
 80144d6:	460b      	mov	r3, r1
 80144d8:	71fb      	strb	r3, [r7, #7]
 80144da:	4613      	mov	r3, r2
 80144dc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80144de:	2300      	movs	r3, #0
 80144e0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80144e2:	68bb      	ldr	r3, [r7, #8]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d106      	bne.n	80144f6 <tcp_output_fill_options+0x2e>
 80144e8:	4b12      	ldr	r3, [pc, #72]	@ (8014534 <tcp_output_fill_options+0x6c>)
 80144ea:	f240 7256 	movw	r2, #1878	@ 0x756
 80144ee:	4912      	ldr	r1, [pc, #72]	@ (8014538 <tcp_output_fill_options+0x70>)
 80144f0:	4812      	ldr	r0, [pc, #72]	@ (801453c <tcp_output_fill_options+0x74>)
 80144f2:	f005 f8b7 	bl	8019664 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80144f6:	68bb      	ldr	r3, [r7, #8]
 80144f8:	685b      	ldr	r3, [r3, #4]
 80144fa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80144fc:	69bb      	ldr	r3, [r7, #24]
 80144fe:	3314      	adds	r3, #20
 8014500:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014502:	8bfb      	ldrh	r3, [r7, #30]
 8014504:	009b      	lsls	r3, r3, #2
 8014506:	461a      	mov	r2, r3
 8014508:	79fb      	ldrb	r3, [r7, #7]
 801450a:	009b      	lsls	r3, r3, #2
 801450c:	f003 0304 	and.w	r3, r3, #4
 8014510:	4413      	add	r3, r2
 8014512:	3314      	adds	r3, #20
 8014514:	69ba      	ldr	r2, [r7, #24]
 8014516:	4413      	add	r3, r2
 8014518:	697a      	ldr	r2, [r7, #20]
 801451a:	429a      	cmp	r2, r3
 801451c:	d006      	beq.n	801452c <tcp_output_fill_options+0x64>
 801451e:	4b05      	ldr	r3, [pc, #20]	@ (8014534 <tcp_output_fill_options+0x6c>)
 8014520:	f240 7275 	movw	r2, #1909	@ 0x775
 8014524:	4906      	ldr	r1, [pc, #24]	@ (8014540 <tcp_output_fill_options+0x78>)
 8014526:	4805      	ldr	r0, [pc, #20]	@ (801453c <tcp_output_fill_options+0x74>)
 8014528:	f005 f89c 	bl	8019664 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801452c:	bf00      	nop
 801452e:	3720      	adds	r7, #32
 8014530:	46bd      	mov	sp, r7
 8014532:	bd80      	pop	{r7, pc}
 8014534:	0801ceb4 	.word	0x0801ceb4
 8014538:	0801d640 	.word	0x0801d640
 801453c:	0801cf08 	.word	0x0801cf08
 8014540:	0801d538 	.word	0x0801d538

08014544 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b08a      	sub	sp, #40	@ 0x28
 8014548:	af04      	add	r7, sp, #16
 801454a:	60f8      	str	r0, [r7, #12]
 801454c:	60b9      	str	r1, [r7, #8]
 801454e:	607a      	str	r2, [r7, #4]
 8014550:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014552:	68bb      	ldr	r3, [r7, #8]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d106      	bne.n	8014566 <tcp_output_control_segment+0x22>
 8014558:	4b20      	ldr	r3, [pc, #128]	@ (80145dc <tcp_output_control_segment+0x98>)
 801455a:	f240 7287 	movw	r2, #1927	@ 0x787
 801455e:	4920      	ldr	r1, [pc, #128]	@ (80145e0 <tcp_output_control_segment+0x9c>)
 8014560:	4820      	ldr	r0, [pc, #128]	@ (80145e4 <tcp_output_control_segment+0xa0>)
 8014562:	f005 f87f 	bl	8019664 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014566:	683a      	ldr	r2, [r7, #0]
 8014568:	6879      	ldr	r1, [r7, #4]
 801456a:	68f8      	ldr	r0, [r7, #12]
 801456c:	f7fe fefe 	bl	801336c <tcp_route>
 8014570:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014572:	693b      	ldr	r3, [r7, #16]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d102      	bne.n	801457e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014578:	23fc      	movs	r3, #252	@ 0xfc
 801457a:	75fb      	strb	r3, [r7, #23]
 801457c:	e024      	b.n	80145c8 <tcp_output_control_segment+0x84>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d006      	beq.n	8014592 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	7adb      	ldrb	r3, [r3, #11]
 8014588:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	7a9b      	ldrb	r3, [r3, #10]
 801458e:	757b      	strb	r3, [r7, #21]
 8014590:	e003      	b.n	801459a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014592:	23ff      	movs	r3, #255	@ 0xff
 8014594:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014596:	2300      	movs	r3, #0
 8014598:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
 801459a:	4b13      	ldr	r3, [pc, #76]	@ (80145e8 <tcp_output_control_segment+0xa4>)
 801459c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80145a0:	3301      	adds	r3, #1
 80145a2:	b29a      	uxth	r2, r3
 80145a4:	4b10      	ldr	r3, [pc, #64]	@ (80145e8 <tcp_output_control_segment+0xa4>)
 80145a6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80145aa:	7dba      	ldrb	r2, [r7, #22]
 80145ac:	693b      	ldr	r3, [r7, #16]
 80145ae:	9302      	str	r3, [sp, #8]
 80145b0:	2306      	movs	r3, #6
 80145b2:	9301      	str	r3, [sp, #4]
 80145b4:	7d7b      	ldrb	r3, [r7, #21]
 80145b6:	9300      	str	r3, [sp, #0]
 80145b8:	4613      	mov	r3, r2
 80145ba:	683a      	ldr	r2, [r7, #0]
 80145bc:	6879      	ldr	r1, [r7, #4]
 80145be:	68b8      	ldr	r0, [r7, #8]
 80145c0:	f002 fecc 	bl	801735c <ip4_output_if>
 80145c4:	4603      	mov	r3, r0
 80145c6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80145c8:	68b8      	ldr	r0, [r7, #8]
 80145ca:	f7fa fceb 	bl	800efa4 <pbuf_free>
  return err;
 80145ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80145d2:	4618      	mov	r0, r3
 80145d4:	3718      	adds	r7, #24
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bd80      	pop	{r7, pc}
 80145da:	bf00      	nop
 80145dc:	0801ceb4 	.word	0x0801ceb4
 80145e0:	0801d668 	.word	0x0801d668
 80145e4:	0801cf08 	.word	0x0801cf08
 80145e8:	2000ea4c 	.word	0x2000ea4c

080145ec <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80145ec:	b590      	push	{r4, r7, lr}
 80145ee:	b08b      	sub	sp, #44	@ 0x2c
 80145f0:	af04      	add	r7, sp, #16
 80145f2:	60f8      	str	r0, [r7, #12]
 80145f4:	60b9      	str	r1, [r7, #8]
 80145f6:	607a      	str	r2, [r7, #4]
 80145f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80145fa:	683b      	ldr	r3, [r7, #0]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d106      	bne.n	801460e <tcp_rst+0x22>
 8014600:	4b1f      	ldr	r3, [pc, #124]	@ (8014680 <tcp_rst+0x94>)
 8014602:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8014606:	491f      	ldr	r1, [pc, #124]	@ (8014684 <tcp_rst+0x98>)
 8014608:	481f      	ldr	r0, [pc, #124]	@ (8014688 <tcp_rst+0x9c>)
 801460a:	f005 f82b 	bl	8019664 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801460e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014610:	2b00      	cmp	r3, #0
 8014612:	d106      	bne.n	8014622 <tcp_rst+0x36>
 8014614:	4b1a      	ldr	r3, [pc, #104]	@ (8014680 <tcp_rst+0x94>)
 8014616:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801461a:	491c      	ldr	r1, [pc, #112]	@ (801468c <tcp_rst+0xa0>)
 801461c:	481a      	ldr	r0, [pc, #104]	@ (8014688 <tcp_rst+0x9c>)
 801461e:	f005 f821 	bl	8019664 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014622:	2300      	movs	r3, #0
 8014624:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014626:	f246 0308 	movw	r3, #24584	@ 0x6008
 801462a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801462c:	7dfb      	ldrb	r3, [r7, #23]
 801462e:	b29c      	uxth	r4, r3
 8014630:	68b8      	ldr	r0, [r7, #8]
 8014632:	f7f8 fe31 	bl	800d298 <lwip_htonl>
 8014636:	4602      	mov	r2, r0
 8014638:	8abb      	ldrh	r3, [r7, #20]
 801463a:	9303      	str	r3, [sp, #12]
 801463c:	2314      	movs	r3, #20
 801463e:	9302      	str	r3, [sp, #8]
 8014640:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8014642:	9301      	str	r3, [sp, #4]
 8014644:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014646:	9300      	str	r3, [sp, #0]
 8014648:	4613      	mov	r3, r2
 801464a:	2200      	movs	r2, #0
 801464c:	4621      	mov	r1, r4
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f7ff fe8a 	bl	8014368 <tcp_output_alloc_header_common>
 8014654:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014656:	693b      	ldr	r3, [r7, #16]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d00c      	beq.n	8014676 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801465c:	7dfb      	ldrb	r3, [r7, #23]
 801465e:	2200      	movs	r2, #0
 8014660:	6939      	ldr	r1, [r7, #16]
 8014662:	68f8      	ldr	r0, [r7, #12]
 8014664:	f7ff ff30 	bl	80144c8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801466a:	683a      	ldr	r2, [r7, #0]
 801466c:	6939      	ldr	r1, [r7, #16]
 801466e:	68f8      	ldr	r0, [r7, #12]
 8014670:	f7ff ff68 	bl	8014544 <tcp_output_control_segment>
 8014674:	e000      	b.n	8014678 <tcp_rst+0x8c>
    return;
 8014676:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014678:	371c      	adds	r7, #28
 801467a:	46bd      	mov	sp, r7
 801467c:	bd90      	pop	{r4, r7, pc}
 801467e:	bf00      	nop
 8014680:	0801ceb4 	.word	0x0801ceb4
 8014684:	0801d694 	.word	0x0801d694
 8014688:	0801cf08 	.word	0x0801cf08
 801468c:	0801d6b0 	.word	0x0801d6b0

08014690 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014690:	b590      	push	{r4, r7, lr}
 8014692:	b087      	sub	sp, #28
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014698:	2300      	movs	r3, #0
 801469a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801469c:	2300      	movs	r3, #0
 801469e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d106      	bne.n	80146b4 <tcp_send_empty_ack+0x24>
 80146a6:	4b28      	ldr	r3, [pc, #160]	@ (8014748 <tcp_send_empty_ack+0xb8>)
 80146a8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80146ac:	4927      	ldr	r1, [pc, #156]	@ (801474c <tcp_send_empty_ack+0xbc>)
 80146ae:	4828      	ldr	r0, [pc, #160]	@ (8014750 <tcp_send_empty_ack+0xc0>)
 80146b0:	f004 ffd8 	bl	8019664 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80146b4:	7dfb      	ldrb	r3, [r7, #23]
 80146b6:	009b      	lsls	r3, r3, #2
 80146b8:	b2db      	uxtb	r3, r3
 80146ba:	f003 0304 	and.w	r3, r3, #4
 80146be:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80146c0:	7d7b      	ldrb	r3, [r7, #21]
 80146c2:	b29c      	uxth	r4, r3
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80146c8:	4618      	mov	r0, r3
 80146ca:	f7f8 fde5 	bl	800d298 <lwip_htonl>
 80146ce:	4603      	mov	r3, r0
 80146d0:	2200      	movs	r2, #0
 80146d2:	4621      	mov	r1, r4
 80146d4:	6878      	ldr	r0, [r7, #4]
 80146d6:	f7ff feb9 	bl	801444c <tcp_output_alloc_header>
 80146da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80146dc:	693b      	ldr	r3, [r7, #16]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d109      	bne.n	80146f6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	8b5b      	ldrh	r3, [r3, #26]
 80146e6:	f043 0303 	orr.w	r3, r3, #3
 80146ea:	b29a      	uxth	r2, r3
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80146f0:	f06f 0301 	mvn.w	r3, #1
 80146f4:	e023      	b.n	801473e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80146f6:	7dbb      	ldrb	r3, [r7, #22]
 80146f8:	7dfa      	ldrb	r2, [r7, #23]
 80146fa:	6939      	ldr	r1, [r7, #16]
 80146fc:	6878      	ldr	r0, [r7, #4]
 80146fe:	f7ff fee3 	bl	80144c8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014702:	687a      	ldr	r2, [r7, #4]
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	3304      	adds	r3, #4
 8014708:	6939      	ldr	r1, [r7, #16]
 801470a:	6878      	ldr	r0, [r7, #4]
 801470c:	f7ff ff1a 	bl	8014544 <tcp_output_control_segment>
 8014710:	4603      	mov	r3, r0
 8014712:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d007      	beq.n	801472c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	8b5b      	ldrh	r3, [r3, #26]
 8014720:	f043 0303 	orr.w	r3, r3, #3
 8014724:	b29a      	uxth	r2, r3
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	835a      	strh	r2, [r3, #26]
 801472a:	e006      	b.n	801473a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	8b5b      	ldrh	r3, [r3, #26]
 8014730:	f023 0303 	bic.w	r3, r3, #3
 8014734:	b29a      	uxth	r2, r3
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801473a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801473e:	4618      	mov	r0, r3
 8014740:	371c      	adds	r7, #28
 8014742:	46bd      	mov	sp, r7
 8014744:	bd90      	pop	{r4, r7, pc}
 8014746:	bf00      	nop
 8014748:	0801ceb4 	.word	0x0801ceb4
 801474c:	0801d6cc 	.word	0x0801d6cc
 8014750:	0801cf08 	.word	0x0801cf08

08014754 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014754:	b590      	push	{r4, r7, lr}
 8014756:	b085      	sub	sp, #20
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801475c:	2300      	movs	r3, #0
 801475e:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d106      	bne.n	8014774 <tcp_keepalive+0x20>
 8014766:	4b18      	ldr	r3, [pc, #96]	@ (80147c8 <tcp_keepalive+0x74>)
 8014768:	f640 0224 	movw	r2, #2084	@ 0x824
 801476c:	4917      	ldr	r1, [pc, #92]	@ (80147cc <tcp_keepalive+0x78>)
 801476e:	4818      	ldr	r0, [pc, #96]	@ (80147d0 <tcp_keepalive+0x7c>)
 8014770:	f004 ff78 	bl	8019664 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014774:	7abb      	ldrb	r3, [r7, #10]
 8014776:	b29c      	uxth	r4, r3
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801477c:	3b01      	subs	r3, #1
 801477e:	4618      	mov	r0, r3
 8014780:	f7f8 fd8a 	bl	800d298 <lwip_htonl>
 8014784:	4603      	mov	r3, r0
 8014786:	2200      	movs	r2, #0
 8014788:	4621      	mov	r1, r4
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f7ff fe5e 	bl	801444c <tcp_output_alloc_header>
 8014790:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d102      	bne.n	801479e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014798:	f04f 33ff 	mov.w	r3, #4294967295
 801479c:	e010      	b.n	80147c0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801479e:	7abb      	ldrb	r3, [r7, #10]
 80147a0:	2200      	movs	r2, #0
 80147a2:	68f9      	ldr	r1, [r7, #12]
 80147a4:	6878      	ldr	r0, [r7, #4]
 80147a6:	f7ff fe8f 	bl	80144c8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80147aa:	687a      	ldr	r2, [r7, #4]
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	3304      	adds	r3, #4
 80147b0:	68f9      	ldr	r1, [r7, #12]
 80147b2:	6878      	ldr	r0, [r7, #4]
 80147b4:	f7ff fec6 	bl	8014544 <tcp_output_control_segment>
 80147b8:	4603      	mov	r3, r0
 80147ba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80147bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80147c0:	4618      	mov	r0, r3
 80147c2:	3714      	adds	r7, #20
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd90      	pop	{r4, r7, pc}
 80147c8:	0801ceb4 	.word	0x0801ceb4
 80147cc:	0801d6ec 	.word	0x0801d6ec
 80147d0:	0801cf08 	.word	0x0801cf08

080147d4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80147d4:	b590      	push	{r4, r7, lr}
 80147d6:	b08b      	sub	sp, #44	@ 0x2c
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80147dc:	2300      	movs	r3, #0
 80147de:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d106      	bne.n	80147f4 <tcp_zero_window_probe+0x20>
 80147e6:	4b4d      	ldr	r3, [pc, #308]	@ (801491c <tcp_zero_window_probe+0x148>)
 80147e8:	f640 024f 	movw	r2, #2127	@ 0x84f
 80147ec:	494c      	ldr	r1, [pc, #304]	@ (8014920 <tcp_zero_window_probe+0x14c>)
 80147ee:	484d      	ldr	r0, [pc, #308]	@ (8014924 <tcp_zero_window_probe+0x150>)
 80147f0:	f004 ff38 	bl	8019664 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80147f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 80147fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d101      	bne.n	8014804 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014800:	2300      	movs	r3, #0
 8014802:	e087      	b.n	8014914 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801480a:	2bff      	cmp	r3, #255	@ 0xff
 801480c:	d007      	beq.n	801481e <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8014814:	3301      	adds	r3, #1
 8014816:	b2da      	uxtb	r2, r3
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014820:	691b      	ldr	r3, [r3, #16]
 8014822:	899b      	ldrh	r3, [r3, #12]
 8014824:	b29b      	uxth	r3, r3
 8014826:	4618      	mov	r0, r3
 8014828:	f7f8 fd20 	bl	800d26c <lwip_htons>
 801482c:	4603      	mov	r3, r0
 801482e:	b2db      	uxtb	r3, r3
 8014830:	f003 0301 	and.w	r3, r3, #1
 8014834:	2b00      	cmp	r3, #0
 8014836:	d005      	beq.n	8014844 <tcp_zero_window_probe+0x70>
 8014838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801483a:	891b      	ldrh	r3, [r3, #8]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d101      	bne.n	8014844 <tcp_zero_window_probe+0x70>
 8014840:	2301      	movs	r3, #1
 8014842:	e000      	b.n	8014846 <tcp_zero_window_probe+0x72>
 8014844:	2300      	movs	r3, #0
 8014846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801484a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801484e:	2b00      	cmp	r3, #0
 8014850:	bf0c      	ite	eq
 8014852:	2301      	moveq	r3, #1
 8014854:	2300      	movne	r3, #0
 8014856:	b2db      	uxtb	r3, r3
 8014858:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801485a:	7cfb      	ldrb	r3, [r7, #19]
 801485c:	b299      	uxth	r1, r3
 801485e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014860:	691b      	ldr	r3, [r3, #16]
 8014862:	685b      	ldr	r3, [r3, #4]
 8014864:	8c3a      	ldrh	r2, [r7, #32]
 8014866:	6878      	ldr	r0, [r7, #4]
 8014868:	f7ff fdf0 	bl	801444c <tcp_output_alloc_header>
 801486c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801486e:	69fb      	ldr	r3, [r7, #28]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d102      	bne.n	801487a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014874:	f04f 33ff 	mov.w	r3, #4294967295
 8014878:	e04c      	b.n	8014914 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801487a:	69fb      	ldr	r3, [r7, #28]
 801487c:	685b      	ldr	r3, [r3, #4]
 801487e:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8014880:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014884:	2b00      	cmp	r3, #0
 8014886:	d011      	beq.n	80148ac <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014888:	69bb      	ldr	r3, [r7, #24]
 801488a:	899b      	ldrh	r3, [r3, #12]
 801488c:	b29b      	uxth	r3, r3
 801488e:	b21b      	sxth	r3, r3
 8014890:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8014894:	b21c      	sxth	r4, r3
 8014896:	2011      	movs	r0, #17
 8014898:	f7f8 fce8 	bl	800d26c <lwip_htons>
 801489c:	4603      	mov	r3, r0
 801489e:	b21b      	sxth	r3, r3
 80148a0:	4323      	orrs	r3, r4
 80148a2:	b21b      	sxth	r3, r3
 80148a4:	b29a      	uxth	r2, r3
 80148a6:	69bb      	ldr	r3, [r7, #24]
 80148a8:	819a      	strh	r2, [r3, #12]
 80148aa:	e010      	b.n	80148ce <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80148ac:	69fb      	ldr	r3, [r7, #28]
 80148ae:	685b      	ldr	r3, [r3, #4]
 80148b0:	3314      	adds	r3, #20
 80148b2:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80148b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148b6:	6858      	ldr	r0, [r3, #4]
 80148b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148ba:	685b      	ldr	r3, [r3, #4]
 80148bc:	891a      	ldrh	r2, [r3, #8]
 80148be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148c0:	891b      	ldrh	r3, [r3, #8]
 80148c2:	1ad3      	subs	r3, r2, r3
 80148c4:	b29b      	uxth	r3, r3
 80148c6:	2201      	movs	r2, #1
 80148c8:	6979      	ldr	r1, [r7, #20]
 80148ca:	f7fa fd61 	bl	800f390 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80148ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148d0:	691b      	ldr	r3, [r3, #16]
 80148d2:	685b      	ldr	r3, [r3, #4]
 80148d4:	4618      	mov	r0, r3
 80148d6:	f7f8 fcdf 	bl	800d298 <lwip_htonl>
 80148da:	4603      	mov	r3, r0
 80148dc:	3301      	adds	r3, #1
 80148de:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	1ad3      	subs	r3, r2, r3
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	da02      	bge.n	80148f2 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	68fa      	ldr	r2, [r7, #12]
 80148f0:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80148f2:	7cfb      	ldrb	r3, [r7, #19]
 80148f4:	2200      	movs	r2, #0
 80148f6:	69f9      	ldr	r1, [r7, #28]
 80148f8:	6878      	ldr	r0, [r7, #4]
 80148fa:	f7ff fde5 	bl	80144c8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80148fe:	687a      	ldr	r2, [r7, #4]
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	3304      	adds	r3, #4
 8014904:	69f9      	ldr	r1, [r7, #28]
 8014906:	6878      	ldr	r0, [r7, #4]
 8014908:	f7ff fe1c 	bl	8014544 <tcp_output_control_segment>
 801490c:	4603      	mov	r3, r0
 801490e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014910:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014914:	4618      	mov	r0, r3
 8014916:	372c      	adds	r7, #44	@ 0x2c
 8014918:	46bd      	mov	sp, r7
 801491a:	bd90      	pop	{r4, r7, pc}
 801491c:	0801ceb4 	.word	0x0801ceb4
 8014920:	0801d708 	.word	0x0801d708
 8014924:	0801cf08 	.word	0x0801cf08

08014928 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b082      	sub	sp, #8
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014930:	f7fa fe2c 	bl	800f58c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014934:	4b0a      	ldr	r3, [pc, #40]	@ (8014960 <tcpip_tcp_timer+0x38>)
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	2b00      	cmp	r3, #0
 801493a:	d103      	bne.n	8014944 <tcpip_tcp_timer+0x1c>
 801493c:	4b09      	ldr	r3, [pc, #36]	@ (8014964 <tcpip_tcp_timer+0x3c>)
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d005      	beq.n	8014950 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014944:	2200      	movs	r2, #0
 8014946:	4908      	ldr	r1, [pc, #32]	@ (8014968 <tcpip_tcp_timer+0x40>)
 8014948:	20fa      	movs	r0, #250	@ 0xfa
 801494a:	f000 f8f3 	bl	8014b34 <sys_timeout>
 801494e:	e003      	b.n	8014958 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014950:	4b06      	ldr	r3, [pc, #24]	@ (801496c <tcpip_tcp_timer+0x44>)
 8014952:	2200      	movs	r2, #0
 8014954:	601a      	str	r2, [r3, #0]
  }
}
 8014956:	bf00      	nop
 8014958:	bf00      	nop
 801495a:	3708      	adds	r7, #8
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}
 8014960:	2000eb78 	.word	0x2000eb78
 8014964:	2000eb7c 	.word	0x2000eb7c
 8014968:	08014929 	.word	0x08014929
 801496c:	2000ebc8 	.word	0x2000ebc8

08014970 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014974:	4b0a      	ldr	r3, [pc, #40]	@ (80149a0 <tcp_timer_needed+0x30>)
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d10f      	bne.n	801499c <tcp_timer_needed+0x2c>
 801497c:	4b09      	ldr	r3, [pc, #36]	@ (80149a4 <tcp_timer_needed+0x34>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d103      	bne.n	801498c <tcp_timer_needed+0x1c>
 8014984:	4b08      	ldr	r3, [pc, #32]	@ (80149a8 <tcp_timer_needed+0x38>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d007      	beq.n	801499c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801498c:	4b04      	ldr	r3, [pc, #16]	@ (80149a0 <tcp_timer_needed+0x30>)
 801498e:	2201      	movs	r2, #1
 8014990:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014992:	2200      	movs	r2, #0
 8014994:	4905      	ldr	r1, [pc, #20]	@ (80149ac <tcp_timer_needed+0x3c>)
 8014996:	20fa      	movs	r0, #250	@ 0xfa
 8014998:	f000 f8cc 	bl	8014b34 <sys_timeout>
  }
}
 801499c:	bf00      	nop
 801499e:	bd80      	pop	{r7, pc}
 80149a0:	2000ebc8 	.word	0x2000ebc8
 80149a4:	2000eb78 	.word	0x2000eb78
 80149a8:	2000eb7c 	.word	0x2000eb7c
 80149ac:	08014929 	.word	0x08014929

080149b0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b086      	sub	sp, #24
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	60f8      	str	r0, [r7, #12]
 80149b8:	60b9      	str	r1, [r7, #8]
 80149ba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80149bc:	200b      	movs	r0, #11
 80149be:	f7f9 fabb 	bl	800df38 <memp_malloc>
 80149c2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80149c4:	693b      	ldr	r3, [r7, #16]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d109      	bne.n	80149de <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80149ca:	693b      	ldr	r3, [r7, #16]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d151      	bne.n	8014a74 <sys_timeout_abs+0xc4>
 80149d0:	4b2a      	ldr	r3, [pc, #168]	@ (8014a7c <sys_timeout_abs+0xcc>)
 80149d2:	22be      	movs	r2, #190	@ 0xbe
 80149d4:	492a      	ldr	r1, [pc, #168]	@ (8014a80 <sys_timeout_abs+0xd0>)
 80149d6:	482b      	ldr	r0, [pc, #172]	@ (8014a84 <sys_timeout_abs+0xd4>)
 80149d8:	f004 fe44 	bl	8019664 <iprintf>
    return;
 80149dc:	e04a      	b.n	8014a74 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80149de:	693b      	ldr	r3, [r7, #16]
 80149e0:	2200      	movs	r2, #0
 80149e2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80149e4:	693b      	ldr	r3, [r7, #16]
 80149e6:	68ba      	ldr	r2, [r7, #8]
 80149e8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80149ea:	693b      	ldr	r3, [r7, #16]
 80149ec:	687a      	ldr	r2, [r7, #4]
 80149ee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80149f0:	693b      	ldr	r3, [r7, #16]
 80149f2:	68fa      	ldr	r2, [r7, #12]
 80149f4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80149f6:	4b24      	ldr	r3, [pc, #144]	@ (8014a88 <sys_timeout_abs+0xd8>)
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d103      	bne.n	8014a06 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80149fe:	4a22      	ldr	r2, [pc, #136]	@ (8014a88 <sys_timeout_abs+0xd8>)
 8014a00:	693b      	ldr	r3, [r7, #16]
 8014a02:	6013      	str	r3, [r2, #0]
    return;
 8014a04:	e037      	b.n	8014a76 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014a06:	693b      	ldr	r3, [r7, #16]
 8014a08:	685a      	ldr	r2, [r3, #4]
 8014a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8014a88 <sys_timeout_abs+0xd8>)
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	685b      	ldr	r3, [r3, #4]
 8014a10:	1ad3      	subs	r3, r2, r3
 8014a12:	0fdb      	lsrs	r3, r3, #31
 8014a14:	f003 0301 	and.w	r3, r3, #1
 8014a18:	b2db      	uxtb	r3, r3
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d007      	beq.n	8014a2e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8014a88 <sys_timeout_abs+0xd8>)
 8014a20:	681a      	ldr	r2, [r3, #0]
 8014a22:	693b      	ldr	r3, [r7, #16]
 8014a24:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014a26:	4a18      	ldr	r2, [pc, #96]	@ (8014a88 <sys_timeout_abs+0xd8>)
 8014a28:	693b      	ldr	r3, [r7, #16]
 8014a2a:	6013      	str	r3, [r2, #0]
 8014a2c:	e023      	b.n	8014a76 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014a2e:	4b16      	ldr	r3, [pc, #88]	@ (8014a88 <sys_timeout_abs+0xd8>)
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	617b      	str	r3, [r7, #20]
 8014a34:	e01a      	b.n	8014a6c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014a36:	697b      	ldr	r3, [r7, #20]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d00b      	beq.n	8014a56 <sys_timeout_abs+0xa6>
 8014a3e:	693b      	ldr	r3, [r7, #16]
 8014a40:	685a      	ldr	r2, [r3, #4]
 8014a42:	697b      	ldr	r3, [r7, #20]
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	685b      	ldr	r3, [r3, #4]
 8014a48:	1ad3      	subs	r3, r2, r3
 8014a4a:	0fdb      	lsrs	r3, r3, #31
 8014a4c:	f003 0301 	and.w	r3, r3, #1
 8014a50:	b2db      	uxtb	r3, r3
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d007      	beq.n	8014a66 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014a56:	697b      	ldr	r3, [r7, #20]
 8014a58:	681a      	ldr	r2, [r3, #0]
 8014a5a:	693b      	ldr	r3, [r7, #16]
 8014a5c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014a5e:	697b      	ldr	r3, [r7, #20]
 8014a60:	693a      	ldr	r2, [r7, #16]
 8014a62:	601a      	str	r2, [r3, #0]
        break;
 8014a64:	e007      	b.n	8014a76 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014a66:	697b      	ldr	r3, [r7, #20]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	617b      	str	r3, [r7, #20]
 8014a6c:	697b      	ldr	r3, [r7, #20]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d1e1      	bne.n	8014a36 <sys_timeout_abs+0x86>
 8014a72:	e000      	b.n	8014a76 <sys_timeout_abs+0xc6>
    return;
 8014a74:	bf00      	nop
      }
    }
  }
}
 8014a76:	3718      	adds	r7, #24
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	bd80      	pop	{r7, pc}
 8014a7c:	0801d72c 	.word	0x0801d72c
 8014a80:	0801d760 	.word	0x0801d760
 8014a84:	0801d7a0 	.word	0x0801d7a0
 8014a88:	2000ebc0 	.word	0x2000ebc0

08014a8c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b086      	sub	sp, #24
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014a98:	697b      	ldr	r3, [r7, #20]
 8014a9a:	685b      	ldr	r3, [r3, #4]
 8014a9c:	4798      	blx	r3

  now = sys_now();
 8014a9e:	f7f3 fa23 	bl	8007ee8 <sys_now>
 8014aa2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014aa4:	697b      	ldr	r3, [r7, #20]
 8014aa6:	681a      	ldr	r2, [r3, #0]
 8014aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8014ae8 <lwip_cyclic_timer+0x5c>)
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	4413      	add	r3, r2
 8014aae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014ab0:	68fa      	ldr	r2, [r7, #12]
 8014ab2:	693b      	ldr	r3, [r7, #16]
 8014ab4:	1ad3      	subs	r3, r2, r3
 8014ab6:	0fdb      	lsrs	r3, r3, #31
 8014ab8:	f003 0301 	and.w	r3, r3, #1
 8014abc:	b2db      	uxtb	r3, r3
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d009      	beq.n	8014ad6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014ac2:	697b      	ldr	r3, [r7, #20]
 8014ac4:	681a      	ldr	r2, [r3, #0]
 8014ac6:	693b      	ldr	r3, [r7, #16]
 8014ac8:	4413      	add	r3, r2
 8014aca:	687a      	ldr	r2, [r7, #4]
 8014acc:	4907      	ldr	r1, [pc, #28]	@ (8014aec <lwip_cyclic_timer+0x60>)
 8014ace:	4618      	mov	r0, r3
 8014ad0:	f7ff ff6e 	bl	80149b0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014ad4:	e004      	b.n	8014ae0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014ad6:	687a      	ldr	r2, [r7, #4]
 8014ad8:	4904      	ldr	r1, [pc, #16]	@ (8014aec <lwip_cyclic_timer+0x60>)
 8014ada:	68f8      	ldr	r0, [r7, #12]
 8014adc:	f7ff ff68 	bl	80149b0 <sys_timeout_abs>
}
 8014ae0:	bf00      	nop
 8014ae2:	3718      	adds	r7, #24
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	bd80      	pop	{r7, pc}
 8014ae8:	2000ebc4 	.word	0x2000ebc4
 8014aec:	08014a8d 	.word	0x08014a8d

08014af0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b082      	sub	sp, #8
 8014af4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014af6:	2301      	movs	r3, #1
 8014af8:	607b      	str	r3, [r7, #4]
 8014afa:	e00e      	b.n	8014b1a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014afc:	4a0b      	ldr	r2, [pc, #44]	@ (8014b2c <sys_timeouts_init+0x3c>)
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	00db      	lsls	r3, r3, #3
 8014b08:	4a08      	ldr	r2, [pc, #32]	@ (8014b2c <sys_timeouts_init+0x3c>)
 8014b0a:	4413      	add	r3, r2
 8014b0c:	461a      	mov	r2, r3
 8014b0e:	4908      	ldr	r1, [pc, #32]	@ (8014b30 <sys_timeouts_init+0x40>)
 8014b10:	f000 f810 	bl	8014b34 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	3301      	adds	r3, #1
 8014b18:	607b      	str	r3, [r7, #4]
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	2b03      	cmp	r3, #3
 8014b1e:	d9ed      	bls.n	8014afc <sys_timeouts_init+0xc>
  }
}
 8014b20:	bf00      	nop
 8014b22:	bf00      	nop
 8014b24:	3708      	adds	r7, #8
 8014b26:	46bd      	mov	sp, r7
 8014b28:	bd80      	pop	{r7, pc}
 8014b2a:	bf00      	nop
 8014b2c:	0801f2f8 	.word	0x0801f2f8
 8014b30:	08014a8d 	.word	0x08014a8d

08014b34 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b086      	sub	sp, #24
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	60f8      	str	r0, [r7, #12]
 8014b3c:	60b9      	str	r1, [r7, #8]
 8014b3e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014b46:	d306      	bcc.n	8014b56 <sys_timeout+0x22>
 8014b48:	4b0a      	ldr	r3, [pc, #40]	@ (8014b74 <sys_timeout+0x40>)
 8014b4a:	f240 1229 	movw	r2, #297	@ 0x129
 8014b4e:	490a      	ldr	r1, [pc, #40]	@ (8014b78 <sys_timeout+0x44>)
 8014b50:	480a      	ldr	r0, [pc, #40]	@ (8014b7c <sys_timeout+0x48>)
 8014b52:	f004 fd87 	bl	8019664 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014b56:	f7f3 f9c7 	bl	8007ee8 <sys_now>
 8014b5a:	4602      	mov	r2, r0
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	4413      	add	r3, r2
 8014b60:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014b62:	687a      	ldr	r2, [r7, #4]
 8014b64:	68b9      	ldr	r1, [r7, #8]
 8014b66:	6978      	ldr	r0, [r7, #20]
 8014b68:	f7ff ff22 	bl	80149b0 <sys_timeout_abs>
#endif
}
 8014b6c:	bf00      	nop
 8014b6e:	3718      	adds	r7, #24
 8014b70:	46bd      	mov	sp, r7
 8014b72:	bd80      	pop	{r7, pc}
 8014b74:	0801d72c 	.word	0x0801d72c
 8014b78:	0801d7c8 	.word	0x0801d7c8
 8014b7c:	0801d7a0 	.word	0x0801d7a0

08014b80 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b084      	sub	sp, #16
 8014b84:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014b86:	f7f3 f9af 	bl	8007ee8 <sys_now>
 8014b8a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014b8c:	4b17      	ldr	r3, [pc, #92]	@ (8014bec <sys_check_timeouts+0x6c>)
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d022      	beq.n	8014bde <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014b98:	68bb      	ldr	r3, [r7, #8]
 8014b9a:	685b      	ldr	r3, [r3, #4]
 8014b9c:	68fa      	ldr	r2, [r7, #12]
 8014b9e:	1ad3      	subs	r3, r2, r3
 8014ba0:	0fdb      	lsrs	r3, r3, #31
 8014ba2:	f003 0301 	and.w	r3, r3, #1
 8014ba6:	b2db      	uxtb	r3, r3
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d11a      	bne.n	8014be2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	4a0e      	ldr	r2, [pc, #56]	@ (8014bec <sys_check_timeouts+0x6c>)
 8014bb2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014bb4:	68bb      	ldr	r3, [r7, #8]
 8014bb6:	689b      	ldr	r3, [r3, #8]
 8014bb8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014bba:	68bb      	ldr	r3, [r7, #8]
 8014bbc:	68db      	ldr	r3, [r3, #12]
 8014bbe:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014bc0:	68bb      	ldr	r3, [r7, #8]
 8014bc2:	685b      	ldr	r3, [r3, #4]
 8014bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8014bf0 <sys_check_timeouts+0x70>)
 8014bc6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014bc8:	68b9      	ldr	r1, [r7, #8]
 8014bca:	200b      	movs	r0, #11
 8014bcc:	f7f9 fa30 	bl	800e030 <memp_free>
    if (handler != NULL) {
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d0da      	beq.n	8014b8c <sys_check_timeouts+0xc>
      handler(arg);
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	6838      	ldr	r0, [r7, #0]
 8014bda:	4798      	blx	r3
  do {
 8014bdc:	e7d6      	b.n	8014b8c <sys_check_timeouts+0xc>
      return;
 8014bde:	bf00      	nop
 8014be0:	e000      	b.n	8014be4 <sys_check_timeouts+0x64>
      return;
 8014be2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014be4:	3710      	adds	r7, #16
 8014be6:	46bd      	mov	sp, r7
 8014be8:	bd80      	pop	{r7, pc}
 8014bea:	bf00      	nop
 8014bec:	2000ebc0 	.word	0x2000ebc0
 8014bf0:	2000ebc4 	.word	0x2000ebc4

08014bf4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b082      	sub	sp, #8
 8014bf8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014bfa:	4b16      	ldr	r3, [pc, #88]	@ (8014c54 <sys_timeouts_sleeptime+0x60>)
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d102      	bne.n	8014c08 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014c02:	f04f 33ff 	mov.w	r3, #4294967295
 8014c06:	e020      	b.n	8014c4a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014c08:	f7f3 f96e 	bl	8007ee8 <sys_now>
 8014c0c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014c0e:	4b11      	ldr	r3, [pc, #68]	@ (8014c54 <sys_timeouts_sleeptime+0x60>)
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	685a      	ldr	r2, [r3, #4]
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	1ad3      	subs	r3, r2, r3
 8014c18:	0fdb      	lsrs	r3, r3, #31
 8014c1a:	f003 0301 	and.w	r3, r3, #1
 8014c1e:	b2db      	uxtb	r3, r3
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d001      	beq.n	8014c28 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014c24:	2300      	movs	r3, #0
 8014c26:	e010      	b.n	8014c4a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014c28:	4b0a      	ldr	r3, [pc, #40]	@ (8014c54 <sys_timeouts_sleeptime+0x60>)
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	685a      	ldr	r2, [r3, #4]
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	1ad3      	subs	r3, r2, r3
 8014c32:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014c34:	683b      	ldr	r3, [r7, #0]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	da06      	bge.n	8014c48 <sys_timeouts_sleeptime+0x54>
 8014c3a:	4b07      	ldr	r3, [pc, #28]	@ (8014c58 <sys_timeouts_sleeptime+0x64>)
 8014c3c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8014c40:	4906      	ldr	r1, [pc, #24]	@ (8014c5c <sys_timeouts_sleeptime+0x68>)
 8014c42:	4807      	ldr	r0, [pc, #28]	@ (8014c60 <sys_timeouts_sleeptime+0x6c>)
 8014c44:	f004 fd0e 	bl	8019664 <iprintf>
    return ret;
 8014c48:	683b      	ldr	r3, [r7, #0]
  }
}
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	3708      	adds	r7, #8
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}
 8014c52:	bf00      	nop
 8014c54:	2000ebc0 	.word	0x2000ebc0
 8014c58:	0801d72c 	.word	0x0801d72c
 8014c5c:	0801d800 	.word	0x0801d800
 8014c60:	0801d7a0 	.word	0x0801d7a0

08014c64 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014c68:	f004 fbfc 	bl	8019464 <rand>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	b29b      	uxth	r3, r3
 8014c70:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014c74:	b29b      	uxth	r3, r3
 8014c76:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8014c7a:	b29a      	uxth	r2, r3
 8014c7c:	4b01      	ldr	r3, [pc, #4]	@ (8014c84 <udp_init+0x20>)
 8014c7e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014c80:	bf00      	nop
 8014c82:	bd80      	pop	{r7, pc}
 8014c84:	200000b8 	.word	0x200000b8

08014c88 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	b084      	sub	sp, #16
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	60f8      	str	r0, [r7, #12]
 8014c90:	60b9      	str	r1, [r7, #8]
 8014c92:	4613      	mov	r3, r2
 8014c94:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d105      	bne.n	8014ca8 <udp_input_local_match+0x20>
 8014c9c:	4b27      	ldr	r3, [pc, #156]	@ (8014d3c <udp_input_local_match+0xb4>)
 8014c9e:	2287      	movs	r2, #135	@ 0x87
 8014ca0:	4927      	ldr	r1, [pc, #156]	@ (8014d40 <udp_input_local_match+0xb8>)
 8014ca2:	4828      	ldr	r0, [pc, #160]	@ (8014d44 <udp_input_local_match+0xbc>)
 8014ca4:	f004 fcde 	bl	8019664 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014ca8:	68bb      	ldr	r3, [r7, #8]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d105      	bne.n	8014cba <udp_input_local_match+0x32>
 8014cae:	4b23      	ldr	r3, [pc, #140]	@ (8014d3c <udp_input_local_match+0xb4>)
 8014cb0:	2288      	movs	r2, #136	@ 0x88
 8014cb2:	4925      	ldr	r1, [pc, #148]	@ (8014d48 <udp_input_local_match+0xc0>)
 8014cb4:	4823      	ldr	r0, [pc, #140]	@ (8014d44 <udp_input_local_match+0xbc>)
 8014cb6:	f004 fcd5 	bl	8019664 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	7a1b      	ldrb	r3, [r3, #8]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d00b      	beq.n	8014cda <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	7a1a      	ldrb	r2, [r3, #8]
 8014cc6:	4b21      	ldr	r3, [pc, #132]	@ (8014d4c <udp_input_local_match+0xc4>)
 8014cc8:	685b      	ldr	r3, [r3, #4]
 8014cca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014cce:	3301      	adds	r3, #1
 8014cd0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014cd2:	429a      	cmp	r2, r3
 8014cd4:	d001      	beq.n	8014cda <udp_input_local_match+0x52>
    return 0;
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	e02b      	b.n	8014d32 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014cda:	79fb      	ldrb	r3, [r7, #7]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d018      	beq.n	8014d12 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d013      	beq.n	8014d0e <udp_input_local_match+0x86>
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d00f      	beq.n	8014d0e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014cee:	4b17      	ldr	r3, [pc, #92]	@ (8014d4c <udp_input_local_match+0xc4>)
 8014cf0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cf6:	d00a      	beq.n	8014d0e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	681a      	ldr	r2, [r3, #0]
 8014cfc:	4b13      	ldr	r3, [pc, #76]	@ (8014d4c <udp_input_local_match+0xc4>)
 8014cfe:	695b      	ldr	r3, [r3, #20]
 8014d00:	405a      	eors	r2, r3
 8014d02:	68bb      	ldr	r3, [r7, #8]
 8014d04:	3308      	adds	r3, #8
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d110      	bne.n	8014d30 <udp_input_local_match+0xa8>
          return 1;
 8014d0e:	2301      	movs	r3, #1
 8014d10:	e00f      	b.n	8014d32 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d009      	beq.n	8014d2c <udp_input_local_match+0xa4>
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d005      	beq.n	8014d2c <udp_input_local_match+0xa4>
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	681a      	ldr	r2, [r3, #0]
 8014d24:	4b09      	ldr	r3, [pc, #36]	@ (8014d4c <udp_input_local_match+0xc4>)
 8014d26:	695b      	ldr	r3, [r3, #20]
 8014d28:	429a      	cmp	r2, r3
 8014d2a:	d101      	bne.n	8014d30 <udp_input_local_match+0xa8>
        return 1;
 8014d2c:	2301      	movs	r3, #1
 8014d2e:	e000      	b.n	8014d32 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014d30:	2300      	movs	r3, #0
}
 8014d32:	4618      	mov	r0, r3
 8014d34:	3710      	adds	r7, #16
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}
 8014d3a:	bf00      	nop
 8014d3c:	0801d814 	.word	0x0801d814
 8014d40:	0801d844 	.word	0x0801d844
 8014d44:	0801d868 	.word	0x0801d868
 8014d48:	0801d890 	.word	0x0801d890
 8014d4c:	20008f60 	.word	0x20008f60

08014d50 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014d50:	b590      	push	{r4, r7, lr}
 8014d52:	b08d      	sub	sp, #52	@ 0x34
 8014d54:	af02      	add	r7, sp, #8
 8014d56:	6078      	str	r0, [r7, #4]
 8014d58:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d105      	bne.n	8014d70 <udp_input+0x20>
 8014d64:	4b9c      	ldr	r3, [pc, #624]	@ (8014fd8 <udp_input+0x288>)
 8014d66:	22cf      	movs	r2, #207	@ 0xcf
 8014d68:	499c      	ldr	r1, [pc, #624]	@ (8014fdc <udp_input+0x28c>)
 8014d6a:	489d      	ldr	r0, [pc, #628]	@ (8014fe0 <udp_input+0x290>)
 8014d6c:	f004 fc7a 	bl	8019664 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014d70:	683b      	ldr	r3, [r7, #0]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d105      	bne.n	8014d82 <udp_input+0x32>
 8014d76:	4b98      	ldr	r3, [pc, #608]	@ (8014fd8 <udp_input+0x288>)
 8014d78:	22d0      	movs	r2, #208	@ 0xd0
 8014d7a:	499a      	ldr	r1, [pc, #616]	@ (8014fe4 <udp_input+0x294>)
 8014d7c:	4898      	ldr	r0, [pc, #608]	@ (8014fe0 <udp_input+0x290>)
 8014d7e:	f004 fc71 	bl	8019664 <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 8014d82:	4b99      	ldr	r3, [pc, #612]	@ (8014fe8 <udp_input+0x298>)
 8014d84:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8014d88:	3301      	adds	r3, #1
 8014d8a:	b29a      	uxth	r2, r3
 8014d8c:	4b96      	ldr	r3, [pc, #600]	@ (8014fe8 <udp_input+0x298>)
 8014d8e:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	895b      	ldrh	r3, [r3, #10]
 8014d96:	2b07      	cmp	r3, #7
 8014d98:	d819      	bhi.n	8014dce <udp_input+0x7e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	891b      	ldrh	r3, [r3, #8]
 8014d9e:	4619      	mov	r1, r3
 8014da0:	4892      	ldr	r0, [pc, #584]	@ (8014fec <udp_input+0x29c>)
 8014da2:	f004 fc5f 	bl	8019664 <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 8014da6:	4b90      	ldr	r3, [pc, #576]	@ (8014fe8 <udp_input+0x298>)
 8014da8:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8014dac:	3301      	adds	r3, #1
 8014dae:	b29a      	uxth	r2, r3
 8014db0:	4b8d      	ldr	r3, [pc, #564]	@ (8014fe8 <udp_input+0x298>)
 8014db2:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
    UDP_STATS_INC(udp.drop);
 8014db6:	4b8c      	ldr	r3, [pc, #560]	@ (8014fe8 <udp_input+0x298>)
 8014db8:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8014dbc:	3301      	adds	r3, #1
 8014dbe:	b29a      	uxth	r2, r3
 8014dc0:	4b89      	ldr	r3, [pc, #548]	@ (8014fe8 <udp_input+0x298>)
 8014dc2:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014dc6:	6878      	ldr	r0, [r7, #4]
 8014dc8:	f7fa f8ec 	bl	800efa4 <pbuf_free>
    goto end;
 8014dcc:	e1ae      	b.n	801512c <udp_input+0x3dc>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	685b      	ldr	r3, [r3, #4]
 8014dd2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014dd4:	4b86      	ldr	r3, [pc, #536]	@ (8014ff0 <udp_input+0x2a0>)
 8014dd6:	695b      	ldr	r3, [r3, #20]
 8014dd8:	4a85      	ldr	r2, [pc, #532]	@ (8014ff0 <udp_input+0x2a0>)
 8014dda:	6812      	ldr	r2, [r2, #0]
 8014ddc:	4611      	mov	r1, r2
 8014dde:	4618      	mov	r0, r3
 8014de0:	f002 fca0 	bl	8017724 <ip4_addr_isbroadcast_u32>
 8014de4:	4603      	mov	r3, r0
 8014de6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	891b      	ldrh	r3, [r3, #8]
 8014dec:	4619      	mov	r1, r3
 8014dee:	4881      	ldr	r0, [pc, #516]	@ (8014ff4 <udp_input+0x2a4>)
 8014df0:	f004 fc38 	bl	8019664 <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014df4:	697b      	ldr	r3, [r7, #20]
 8014df6:	881b      	ldrh	r3, [r3, #0]
 8014df8:	b29b      	uxth	r3, r3
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	f7f8 fa36 	bl	800d26c <lwip_htons>
 8014e00:	4603      	mov	r3, r0
 8014e02:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014e04:	697b      	ldr	r3, [r7, #20]
 8014e06:	885b      	ldrh	r3, [r3, #2]
 8014e08:	b29b      	uxth	r3, r3
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f7f8 fa2e 	bl	800d26c <lwip_htons>
 8014e10:	4603      	mov	r3, r0
 8014e12:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 8014e14:	6978      	ldr	r0, [r7, #20]
 8014e16:	f000 f9cd 	bl	80151b4 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 8014e1a:	4877      	ldr	r0, [pc, #476]	@ (8014ff8 <udp_input+0x2a8>)
 8014e1c:	f004 fc22 	bl	8019664 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 8014e20:	4b73      	ldr	r3, [pc, #460]	@ (8014ff0 <udp_input+0x2a0>)
 8014e22:	695b      	ldr	r3, [r3, #20]
 8014e24:	b2db      	uxtb	r3, r3
 8014e26:	4619      	mov	r1, r3
 8014e28:	4b71      	ldr	r3, [pc, #452]	@ (8014ff0 <udp_input+0x2a0>)
 8014e2a:	695b      	ldr	r3, [r3, #20]
 8014e2c:	0a1b      	lsrs	r3, r3, #8
 8014e2e:	b2db      	uxtb	r3, r3
 8014e30:	461a      	mov	r2, r3
 8014e32:	4b6f      	ldr	r3, [pc, #444]	@ (8014ff0 <udp_input+0x2a0>)
 8014e34:	695b      	ldr	r3, [r3, #20]
 8014e36:	0c1b      	lsrs	r3, r3, #16
 8014e38:	b2db      	uxtb	r3, r3
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	4b6c      	ldr	r3, [pc, #432]	@ (8014ff0 <udp_input+0x2a0>)
 8014e3e:	695b      	ldr	r3, [r3, #20]
 8014e40:	0e1b      	lsrs	r3, r3, #24
 8014e42:	b2db      	uxtb	r3, r3
 8014e44:	9300      	str	r3, [sp, #0]
 8014e46:	4603      	mov	r3, r0
 8014e48:	486c      	ldr	r0, [pc, #432]	@ (8014ffc <udp_input+0x2ac>)
 8014e4a:	f004 fc0b 	bl	8019664 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 8014e4e:	697b      	ldr	r3, [r7, #20]
 8014e50:	885b      	ldrh	r3, [r3, #2]
 8014e52:	b29b      	uxth	r3, r3
 8014e54:	4618      	mov	r0, r3
 8014e56:	f7f8 fa09 	bl	800d26c <lwip_htons>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	4619      	mov	r1, r3
 8014e5e:	4868      	ldr	r0, [pc, #416]	@ (8015000 <udp_input+0x2b0>)
 8014e60:	f004 fc00 	bl	8019664 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 8014e64:	4b62      	ldr	r3, [pc, #392]	@ (8014ff0 <udp_input+0x2a0>)
 8014e66:	691b      	ldr	r3, [r3, #16]
 8014e68:	b2db      	uxtb	r3, r3
 8014e6a:	4619      	mov	r1, r3
 8014e6c:	4b60      	ldr	r3, [pc, #384]	@ (8014ff0 <udp_input+0x2a0>)
 8014e6e:	691b      	ldr	r3, [r3, #16]
 8014e70:	0a1b      	lsrs	r3, r3, #8
 8014e72:	b2db      	uxtb	r3, r3
 8014e74:	461a      	mov	r2, r3
 8014e76:	4b5e      	ldr	r3, [pc, #376]	@ (8014ff0 <udp_input+0x2a0>)
 8014e78:	691b      	ldr	r3, [r3, #16]
 8014e7a:	0c1b      	lsrs	r3, r3, #16
 8014e7c:	b2db      	uxtb	r3, r3
 8014e7e:	4618      	mov	r0, r3
 8014e80:	4b5b      	ldr	r3, [pc, #364]	@ (8014ff0 <udp_input+0x2a0>)
 8014e82:	691b      	ldr	r3, [r3, #16]
 8014e84:	0e1b      	lsrs	r3, r3, #24
 8014e86:	b2db      	uxtb	r3, r3
 8014e88:	9300      	str	r3, [sp, #0]
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	485b      	ldr	r0, [pc, #364]	@ (8014ffc <udp_input+0x2ac>)
 8014e8e:	f004 fbe9 	bl	8019664 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 8014e92:	697b      	ldr	r3, [r7, #20]
 8014e94:	881b      	ldrh	r3, [r3, #0]
 8014e96:	b29b      	uxth	r3, r3
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f7f8 f9e7 	bl	800d26c <lwip_htons>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	4619      	mov	r1, r3
 8014ea2:	4858      	ldr	r0, [pc, #352]	@ (8015004 <udp_input+0x2b4>)
 8014ea4:	f004 fbde 	bl	8019664 <iprintf>

  pcb = NULL;
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8014eac:	2300      	movs	r3, #0
 8014eae:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014eb4:	4b54      	ldr	r3, [pc, #336]	@ (8015008 <udp_input+0x2b8>)
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8014eba:	e0b7      	b.n	801502c <udp_input+0x2dc>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 8014ebc:	4853      	ldr	r0, [pc, #332]	@ (801500c <udp_input+0x2bc>)
 8014ebe:	f004 fbd1 	bl	8019664 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 8014ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	b2db      	uxtb	r3, r3
 8014ec8:	4619      	mov	r1, r3
 8014eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	0a1b      	lsrs	r3, r3, #8
 8014ed0:	b2db      	uxtb	r3, r3
 8014ed2:	461a      	mov	r2, r3
 8014ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	0c1b      	lsrs	r3, r3, #16
 8014eda:	b2db      	uxtb	r3, r3
 8014edc:	4618      	mov	r0, r3
 8014ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	0e1b      	lsrs	r3, r3, #24
 8014ee4:	b2db      	uxtb	r3, r3
 8014ee6:	9300      	str	r3, [sp, #0]
 8014ee8:	4603      	mov	r3, r0
 8014eea:	4844      	ldr	r0, [pc, #272]	@ (8014ffc <udp_input+0x2ac>)
 8014eec:	f004 fbba 	bl	8019664 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 8014ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ef2:	8a5b      	ldrh	r3, [r3, #18]
 8014ef4:	4619      	mov	r1, r3
 8014ef6:	4842      	ldr	r0, [pc, #264]	@ (8015000 <udp_input+0x2b0>)
 8014ef8:	f004 fbb4 	bl	8019664 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 8014efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014efe:	685b      	ldr	r3, [r3, #4]
 8014f00:	b2db      	uxtb	r3, r3
 8014f02:	4619      	mov	r1, r3
 8014f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f06:	685b      	ldr	r3, [r3, #4]
 8014f08:	0a1b      	lsrs	r3, r3, #8
 8014f0a:	b2db      	uxtb	r3, r3
 8014f0c:	461a      	mov	r2, r3
 8014f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f10:	685b      	ldr	r3, [r3, #4]
 8014f12:	0c1b      	lsrs	r3, r3, #16
 8014f14:	b2db      	uxtb	r3, r3
 8014f16:	4618      	mov	r0, r3
 8014f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f1a:	685b      	ldr	r3, [r3, #4]
 8014f1c:	0e1b      	lsrs	r3, r3, #24
 8014f1e:	b2db      	uxtb	r3, r3
 8014f20:	9300      	str	r3, [sp, #0]
 8014f22:	4603      	mov	r3, r0
 8014f24:	4835      	ldr	r0, [pc, #212]	@ (8014ffc <udp_input+0x2ac>)
 8014f26:	f004 fb9d 	bl	8019664 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 8014f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f2c:	8a9b      	ldrh	r3, [r3, #20]
 8014f2e:	4619      	mov	r1, r3
 8014f30:	4834      	ldr	r0, [pc, #208]	@ (8015004 <udp_input+0x2b4>)
 8014f32:	f004 fb97 	bl	8019664 <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f38:	8a5b      	ldrh	r3, [r3, #18]
 8014f3a:	89fa      	ldrh	r2, [r7, #14]
 8014f3c:	429a      	cmp	r2, r3
 8014f3e:	d170      	bne.n	8015022 <udp_input+0x2d2>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014f40:	7cfb      	ldrb	r3, [r7, #19]
 8014f42:	461a      	mov	r2, r3
 8014f44:	6839      	ldr	r1, [r7, #0]
 8014f46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014f48:	f7ff fe9e 	bl	8014c88 <udp_input_local_match>
 8014f4c:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d067      	beq.n	8015022 <udp_input+0x2d2>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f54:	7c1b      	ldrb	r3, [r3, #16]
 8014f56:	f003 0304 	and.w	r3, r3, #4
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d11d      	bne.n	8014f9a <udp_input+0x24a>
        if (uncon_pcb == NULL) {
 8014f5e:	69fb      	ldr	r3, [r7, #28]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d102      	bne.n	8014f6a <udp_input+0x21a>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f66:	61fb      	str	r3, [r7, #28]
 8014f68:	e017      	b.n	8014f9a <udp_input+0x24a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014f6a:	7cfb      	ldrb	r3, [r7, #19]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d014      	beq.n	8014f9a <udp_input+0x24a>
 8014f70:	4b1f      	ldr	r3, [pc, #124]	@ (8014ff0 <udp_input+0x2a0>)
 8014f72:	695b      	ldr	r3, [r3, #20]
 8014f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f78:	d10f      	bne.n	8014f9a <udp_input+0x24a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014f7a:	69fb      	ldr	r3, [r7, #28]
 8014f7c:	681a      	ldr	r2, [r3, #0]
 8014f7e:	683b      	ldr	r3, [r7, #0]
 8014f80:	3304      	adds	r3, #4
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	429a      	cmp	r2, r3
 8014f86:	d008      	beq.n	8014f9a <udp_input+0x24a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f8a:	681a      	ldr	r2, [r3, #0]
 8014f8c:	683b      	ldr	r3, [r7, #0]
 8014f8e:	3304      	adds	r3, #4
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	429a      	cmp	r2, r3
 8014f94:	d101      	bne.n	8014f9a <udp_input+0x24a>
              /* better match */
              uncon_pcb = pcb;
 8014f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f98:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f9c:	8a9b      	ldrh	r3, [r3, #20]
 8014f9e:	8a3a      	ldrh	r2, [r7, #16]
 8014fa0:	429a      	cmp	r2, r3
 8014fa2:	d13e      	bne.n	8015022 <udp_input+0x2d2>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fa6:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d005      	beq.n	8014fb8 <udp_input+0x268>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fae:	685a      	ldr	r2, [r3, #4]
 8014fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8014ff0 <udp_input+0x2a0>)
 8014fb2:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014fb4:	429a      	cmp	r2, r3
 8014fb6:	d134      	bne.n	8015022 <udp_input+0x2d2>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014fb8:	6a3b      	ldr	r3, [r7, #32]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d028      	beq.n	8015010 <udp_input+0x2c0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fc0:	68da      	ldr	r2, [r3, #12]
 8014fc2:	6a3b      	ldr	r3, [r7, #32]
 8014fc4:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014fc6:	4b10      	ldr	r3, [pc, #64]	@ (8015008 <udp_input+0x2b8>)
 8014fc8:	681a      	ldr	r2, [r3, #0]
 8014fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fcc:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014fce:	4a0e      	ldr	r2, [pc, #56]	@ (8015008 <udp_input+0x2b8>)
 8014fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fd2:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014fd4:	e02e      	b.n	8015034 <udp_input+0x2e4>
 8014fd6:	bf00      	nop
 8014fd8:	0801d814 	.word	0x0801d814
 8014fdc:	0801d8b8 	.word	0x0801d8b8
 8014fe0:	0801d868 	.word	0x0801d868
 8014fe4:	0801d8d0 	.word	0x0801d8d0
 8014fe8:	2000ea4c 	.word	0x2000ea4c
 8014fec:	0801d8ec 	.word	0x0801d8ec
 8014ff0:	20008f60 	.word	0x20008f60
 8014ff4:	0801d924 	.word	0x0801d924
 8014ff8:	0801d950 	.word	0x0801d950
 8014ffc:	0801d958 	.word	0x0801d958
 8015000:	0801d968 	.word	0x0801d968
 8015004:	0801d978 	.word	0x0801d978
 8015008:	2000ebcc 	.word	0x2000ebcc
 801500c:	0801d980 	.word	0x0801d980
          UDP_STATS_INC(udp.cachehit);
 8015010:	4b48      	ldr	r3, [pc, #288]	@ (8015134 <udp_input+0x3e4>)
 8015012:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 8015016:	3301      	adds	r3, #1
 8015018:	b29a      	uxth	r2, r3
 801501a:	4b46      	ldr	r3, [pc, #280]	@ (8015134 <udp_input+0x3e4>)
 801501c:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
        break;
 8015020:	e008      	b.n	8015034 <udp_input+0x2e4>
      }
    }

    prev = pcb;
 8015022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015024:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015028:	68db      	ldr	r3, [r3, #12]
 801502a:	627b      	str	r3, [r7, #36]	@ 0x24
 801502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801502e:	2b00      	cmp	r3, #0
 8015030:	f47f af44 	bne.w	8014ebc <udp_input+0x16c>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015036:	2b00      	cmp	r3, #0
 8015038:	d101      	bne.n	801503e <udp_input+0x2ee>
    pcb = uncon_pcb;
 801503a:	69fb      	ldr	r3, [r7, #28]
 801503c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015040:	2b00      	cmp	r3, #0
 8015042:	d002      	beq.n	801504a <udp_input+0x2fa>
    for_us = 1;
 8015044:	2301      	movs	r3, #1
 8015046:	76fb      	strb	r3, [r7, #27]
 8015048:	e00a      	b.n	8015060 <udp_input+0x310>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	3304      	adds	r3, #4
 801504e:	681a      	ldr	r2, [r3, #0]
 8015050:	4b39      	ldr	r3, [pc, #228]	@ (8015138 <udp_input+0x3e8>)
 8015052:	695b      	ldr	r3, [r3, #20]
 8015054:	429a      	cmp	r2, r3
 8015056:	bf0c      	ite	eq
 8015058:	2301      	moveq	r3, #1
 801505a:	2300      	movne	r3, #0
 801505c:	b2db      	uxtb	r3, r3
 801505e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015060:	7efb      	ldrb	r3, [r7, #27]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d05f      	beq.n	8015126 <udp_input+0x3d6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 8015066:	4835      	ldr	r0, [pc, #212]	@ (801513c <udp_input+0x3ec>)
 8015068:	f004 fb6c 	bl	8019744 <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801506c:	2108      	movs	r1, #8
 801506e:	6878      	ldr	r0, [r7, #4]
 8015070:	f7f9 ff12 	bl	800ee98 <pbuf_remove_header>
 8015074:	4603      	mov	r3, r0
 8015076:	2b00      	cmp	r3, #0
 8015078:	d012      	beq.n	80150a0 <udp_input+0x350>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801507a:	4b31      	ldr	r3, [pc, #196]	@ (8015140 <udp_input+0x3f0>)
 801507c:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8015080:	4930      	ldr	r1, [pc, #192]	@ (8015144 <udp_input+0x3f4>)
 8015082:	4831      	ldr	r0, [pc, #196]	@ (8015148 <udp_input+0x3f8>)
 8015084:	f004 faee 	bl	8019664 <iprintf>
      UDP_STATS_INC(udp.drop);
 8015088:	4b2a      	ldr	r3, [pc, #168]	@ (8015134 <udp_input+0x3e4>)
 801508a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 801508e:	3301      	adds	r3, #1
 8015090:	b29a      	uxth	r2, r3
 8015092:	4b28      	ldr	r3, [pc, #160]	@ (8015134 <udp_input+0x3e4>)
 8015094:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015098:	6878      	ldr	r0, [r7, #4]
 801509a:	f7f9 ff83 	bl	800efa4 <pbuf_free>
      goto end;
 801509e:	e045      	b.n	801512c <udp_input+0x3dc>
    }

    if (pcb != NULL) {
 80150a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d012      	beq.n	80150cc <udp_input+0x37c>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80150a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150a8:	6a1b      	ldr	r3, [r3, #32]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d00a      	beq.n	80150c4 <udp_input+0x374>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80150ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150b0:	6a1c      	ldr	r4, [r3, #32]
 80150b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150b4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80150b6:	8a3b      	ldrh	r3, [r7, #16]
 80150b8:	9300      	str	r3, [sp, #0]
 80150ba:	4b24      	ldr	r3, [pc, #144]	@ (801514c <udp_input+0x3fc>)
 80150bc:	687a      	ldr	r2, [r7, #4]
 80150be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80150c0:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80150c2:	e034      	b.n	801512e <udp_input+0x3de>
        pbuf_free(p);
 80150c4:	6878      	ldr	r0, [r7, #4]
 80150c6:	f7f9 ff6d 	bl	800efa4 <pbuf_free>
        goto end;
 80150ca:	e02f      	b.n	801512c <udp_input+0x3dc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 80150cc:	4820      	ldr	r0, [pc, #128]	@ (8015150 <udp_input+0x400>)
 80150ce:	f004 fb39 	bl	8019744 <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80150d2:	7cfb      	ldrb	r3, [r7, #19]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d112      	bne.n	80150fe <udp_input+0x3ae>
 80150d8:	4b17      	ldr	r3, [pc, #92]	@ (8015138 <udp_input+0x3e8>)
 80150da:	695b      	ldr	r3, [r3, #20]
 80150dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80150e0:	2be0      	cmp	r3, #224	@ 0xe0
 80150e2:	d00c      	beq.n	80150fe <udp_input+0x3ae>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80150e4:	4b14      	ldr	r3, [pc, #80]	@ (8015138 <udp_input+0x3e8>)
 80150e6:	899b      	ldrh	r3, [r3, #12]
 80150e8:	3308      	adds	r3, #8
 80150ea:	b29b      	uxth	r3, r3
 80150ec:	b21b      	sxth	r3, r3
 80150ee:	4619      	mov	r1, r3
 80150f0:	6878      	ldr	r0, [r7, #4]
 80150f2:	f7f9 ff44 	bl	800ef7e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80150f6:	2103      	movs	r1, #3
 80150f8:	6878      	ldr	r0, [r7, #4]
 80150fa:	f001 fae7 	bl	80166cc <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 80150fe:	4b0d      	ldr	r3, [pc, #52]	@ (8015134 <udp_input+0x3e4>)
 8015100:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8015104:	3301      	adds	r3, #1
 8015106:	b29a      	uxth	r2, r3
 8015108:	4b0a      	ldr	r3, [pc, #40]	@ (8015134 <udp_input+0x3e4>)
 801510a:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
      UDP_STATS_INC(udp.drop);
 801510e:	4b09      	ldr	r3, [pc, #36]	@ (8015134 <udp_input+0x3e4>)
 8015110:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8015114:	3301      	adds	r3, #1
 8015116:	b29a      	uxth	r2, r3
 8015118:	4b06      	ldr	r3, [pc, #24]	@ (8015134 <udp_input+0x3e4>)
 801511a:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      pbuf_free(p);
 801511e:	6878      	ldr	r0, [r7, #4]
 8015120:	f7f9 ff40 	bl	800efa4 <pbuf_free>
  return;
 8015124:	e003      	b.n	801512e <udp_input+0x3de>
    pbuf_free(p);
 8015126:	6878      	ldr	r0, [r7, #4]
 8015128:	f7f9 ff3c 	bl	800efa4 <pbuf_free>
  return;
 801512c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801512e:	372c      	adds	r7, #44	@ 0x2c
 8015130:	46bd      	mov	sp, r7
 8015132:	bd90      	pop	{r4, r7, pc}
 8015134:	2000ea4c 	.word	0x2000ea4c
 8015138:	20008f60 	.word	0x20008f60
 801513c:	0801d988 	.word	0x0801d988
 8015140:	0801d814 	.word	0x0801d814
 8015144:	0801d9a8 	.word	0x0801d9a8
 8015148:	0801d868 	.word	0x0801d868
 801514c:	20008f70 	.word	0x20008f70
 8015150:	0801d9c4 	.word	0x0801d9c4

08015154 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015154:	b480      	push	{r7}
 8015156:	b085      	sub	sp, #20
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
 801515c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d01e      	beq.n	80151a2 <udp_netif_ip_addr_changed+0x4e>
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d01a      	beq.n	80151a2 <udp_netif_ip_addr_changed+0x4e>
 801516c:	683b      	ldr	r3, [r7, #0]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d017      	beq.n	80151a2 <udp_netif_ip_addr_changed+0x4e>
 8015172:	683b      	ldr	r3, [r7, #0]
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d013      	beq.n	80151a2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801517a:	4b0d      	ldr	r3, [pc, #52]	@ (80151b0 <udp_netif_ip_addr_changed+0x5c>)
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	60fb      	str	r3, [r7, #12]
 8015180:	e00c      	b.n	801519c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	681a      	ldr	r2, [r3, #0]
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	429a      	cmp	r2, r3
 801518c:	d103      	bne.n	8015196 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801518e:	683b      	ldr	r3, [r7, #0]
 8015190:	681a      	ldr	r2, [r3, #0]
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	68db      	ldr	r3, [r3, #12]
 801519a:	60fb      	str	r3, [r7, #12]
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d1ef      	bne.n	8015182 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80151a2:	bf00      	nop
 80151a4:	3714      	adds	r7, #20
 80151a6:	46bd      	mov	sp, r7
 80151a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ac:	4770      	bx	lr
 80151ae:	bf00      	nop
 80151b0:	2000ebcc 	.word	0x2000ebcc

080151b4 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 80151b4:	b590      	push	{r4, r7, lr}
 80151b6:	b083      	sub	sp, #12
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 80151bc:	481b      	ldr	r0, [pc, #108]	@ (801522c <udp_debug_print+0x78>)
 80151be:	f004 fac1 	bl	8019744 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 80151c2:	481b      	ldr	r0, [pc, #108]	@ (8015230 <udp_debug_print+0x7c>)
 80151c4:	f004 fabe 	bl	8019744 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	881b      	ldrh	r3, [r3, #0]
 80151cc:	b29b      	uxth	r3, r3
 80151ce:	4618      	mov	r0, r3
 80151d0:	f7f8 f84c 	bl	800d26c <lwip_htons>
 80151d4:	4603      	mov	r3, r0
 80151d6:	461c      	mov	r4, r3
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	885b      	ldrh	r3, [r3, #2]
 80151dc:	b29b      	uxth	r3, r3
 80151de:	4618      	mov	r0, r3
 80151e0:	f7f8 f844 	bl	800d26c <lwip_htons>
 80151e4:	4603      	mov	r3, r0
 80151e6:	461a      	mov	r2, r3
 80151e8:	4621      	mov	r1, r4
 80151ea:	4812      	ldr	r0, [pc, #72]	@ (8015234 <udp_debug_print+0x80>)
 80151ec:	f004 fa3a 	bl	8019664 <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 80151f0:	480f      	ldr	r0, [pc, #60]	@ (8015230 <udp_debug_print+0x7c>)
 80151f2:	f004 faa7 	bl	8019744 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	889b      	ldrh	r3, [r3, #4]
 80151fa:	b29b      	uxth	r3, r3
 80151fc:	4618      	mov	r0, r3
 80151fe:	f7f8 f835 	bl	800d26c <lwip_htons>
 8015202:	4603      	mov	r3, r0
 8015204:	461c      	mov	r4, r3
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	88db      	ldrh	r3, [r3, #6]
 801520a:	b29b      	uxth	r3, r3
 801520c:	4618      	mov	r0, r3
 801520e:	f7f8 f82d 	bl	800d26c <lwip_htons>
 8015212:	4603      	mov	r3, r0
 8015214:	461a      	mov	r2, r3
 8015216:	4621      	mov	r1, r4
 8015218:	4807      	ldr	r0, [pc, #28]	@ (8015238 <udp_debug_print+0x84>)
 801521a:	f004 fa23 	bl	8019664 <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801521e:	4804      	ldr	r0, [pc, #16]	@ (8015230 <udp_debug_print+0x7c>)
 8015220:	f004 fa90 	bl	8019744 <puts>
}
 8015224:	bf00      	nop
 8015226:	370c      	adds	r7, #12
 8015228:	46bd      	mov	sp, r7
 801522a:	bd90      	pop	{r4, r7, pc}
 801522c:	0801dea0 	.word	0x0801dea0
 8015230:	0801deac 	.word	0x0801deac
 8015234:	0801ded0 	.word	0x0801ded0
 8015238:	0801df08 	.word	0x0801df08

0801523c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	b082      	sub	sp, #8
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015244:	4933      	ldr	r1, [pc, #204]	@ (8015314 <etharp_free_entry+0xd8>)
 8015246:	687a      	ldr	r2, [r7, #4]
 8015248:	4613      	mov	r3, r2
 801524a:	005b      	lsls	r3, r3, #1
 801524c:	4413      	add	r3, r2
 801524e:	00db      	lsls	r3, r3, #3
 8015250:	440b      	add	r3, r1
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d023      	beq.n	80152a0 <etharp_free_entry+0x64>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	b29b      	uxth	r3, r3
 801525c:	4618      	mov	r0, r3
 801525e:	492d      	ldr	r1, [pc, #180]	@ (8015314 <etharp_free_entry+0xd8>)
 8015260:	687a      	ldr	r2, [r7, #4]
 8015262:	4613      	mov	r3, r2
 8015264:	005b      	lsls	r3, r3, #1
 8015266:	4413      	add	r3, r2
 8015268:	00db      	lsls	r3, r3, #3
 801526a:	440b      	add	r3, r1
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	461a      	mov	r2, r3
 8015270:	4601      	mov	r1, r0
 8015272:	4829      	ldr	r0, [pc, #164]	@ (8015318 <etharp_free_entry+0xdc>)
 8015274:	f004 f9f6 	bl	8019664 <iprintf>
    free_etharp_q(arp_table[i].q);
 8015278:	4926      	ldr	r1, [pc, #152]	@ (8015314 <etharp_free_entry+0xd8>)
 801527a:	687a      	ldr	r2, [r7, #4]
 801527c:	4613      	mov	r3, r2
 801527e:	005b      	lsls	r3, r3, #1
 8015280:	4413      	add	r3, r2
 8015282:	00db      	lsls	r3, r3, #3
 8015284:	440b      	add	r3, r1
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	4618      	mov	r0, r3
 801528a:	f7f9 fe8b 	bl	800efa4 <pbuf_free>
    arp_table[i].q = NULL;
 801528e:	4921      	ldr	r1, [pc, #132]	@ (8015314 <etharp_free_entry+0xd8>)
 8015290:	687a      	ldr	r2, [r7, #4]
 8015292:	4613      	mov	r3, r2
 8015294:	005b      	lsls	r3, r3, #1
 8015296:	4413      	add	r3, r2
 8015298:	00db      	lsls	r3, r3, #3
 801529a:	440b      	add	r3, r1
 801529c:	2200      	movs	r2, #0
 801529e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80152a0:	491c      	ldr	r1, [pc, #112]	@ (8015314 <etharp_free_entry+0xd8>)
 80152a2:	687a      	ldr	r2, [r7, #4]
 80152a4:	4613      	mov	r3, r2
 80152a6:	005b      	lsls	r3, r3, #1
 80152a8:	4413      	add	r3, r2
 80152aa:	00db      	lsls	r3, r3, #3
 80152ac:	440b      	add	r3, r1
 80152ae:	3314      	adds	r3, #20
 80152b0:	2200      	movs	r2, #0
 80152b2:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 80152b4:	4917      	ldr	r1, [pc, #92]	@ (8015314 <etharp_free_entry+0xd8>)
 80152b6:	687a      	ldr	r2, [r7, #4]
 80152b8:	4613      	mov	r3, r2
 80152ba:	005b      	lsls	r3, r3, #1
 80152bc:	4413      	add	r3, r2
 80152be:	00db      	lsls	r3, r3, #3
 80152c0:	440b      	add	r3, r1
 80152c2:	3312      	adds	r3, #18
 80152c4:	2200      	movs	r2, #0
 80152c6:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 80152c8:	4912      	ldr	r1, [pc, #72]	@ (8015314 <etharp_free_entry+0xd8>)
 80152ca:	687a      	ldr	r2, [r7, #4]
 80152cc:	4613      	mov	r3, r2
 80152ce:	005b      	lsls	r3, r3, #1
 80152d0:	4413      	add	r3, r2
 80152d2:	00db      	lsls	r3, r3, #3
 80152d4:	440b      	add	r3, r1
 80152d6:	3308      	adds	r3, #8
 80152d8:	2200      	movs	r2, #0
 80152da:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 80152dc:	490d      	ldr	r1, [pc, #52]	@ (8015314 <etharp_free_entry+0xd8>)
 80152de:	687a      	ldr	r2, [r7, #4]
 80152e0:	4613      	mov	r3, r2
 80152e2:	005b      	lsls	r3, r3, #1
 80152e4:	4413      	add	r3, r2
 80152e6:	00db      	lsls	r3, r3, #3
 80152e8:	440b      	add	r3, r1
 80152ea:	3304      	adds	r3, #4
 80152ec:	2200      	movs	r2, #0
 80152ee:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 80152f0:	4908      	ldr	r1, [pc, #32]	@ (8015314 <etharp_free_entry+0xd8>)
 80152f2:	687a      	ldr	r2, [r7, #4]
 80152f4:	4613      	mov	r3, r2
 80152f6:	005b      	lsls	r3, r3, #1
 80152f8:	4413      	add	r3, r2
 80152fa:	00db      	lsls	r3, r3, #3
 80152fc:	440b      	add	r3, r1
 80152fe:	3308      	adds	r3, #8
 8015300:	4a06      	ldr	r2, [pc, #24]	@ (801531c <etharp_free_entry+0xe0>)
 8015302:	3304      	adds	r3, #4
 8015304:	6810      	ldr	r0, [r2, #0]
 8015306:	6018      	str	r0, [r3, #0]
 8015308:	8892      	ldrh	r2, [r2, #4]
 801530a:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 801530c:	bf00      	nop
 801530e:	3708      	adds	r7, #8
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}
 8015314:	2000ebd0 	.word	0x2000ebd0
 8015318:	0801df3c 	.word	0x0801df3c
 801531c:	0801f324 	.word	0x0801f324

08015320 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b082      	sub	sp, #8
 8015324:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
 8015326:	485c      	ldr	r0, [pc, #368]	@ (8015498 <etharp_tmr+0x178>)
 8015328:	f004 fa0c 	bl	8019744 <puts>
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801532c:	2300      	movs	r3, #0
 801532e:	607b      	str	r3, [r7, #4]
 8015330:	e0a9      	b.n	8015486 <etharp_tmr+0x166>
    u8_t state = arp_table[i].state;
 8015332:	495a      	ldr	r1, [pc, #360]	@ (801549c <etharp_tmr+0x17c>)
 8015334:	687a      	ldr	r2, [r7, #4]
 8015336:	4613      	mov	r3, r2
 8015338:	005b      	lsls	r3, r3, #1
 801533a:	4413      	add	r3, r2
 801533c:	00db      	lsls	r3, r3, #3
 801533e:	440b      	add	r3, r1
 8015340:	3314      	adds	r3, #20
 8015342:	781b      	ldrb	r3, [r3, #0]
 8015344:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015346:	78fb      	ldrb	r3, [r7, #3]
 8015348:	2b00      	cmp	r3, #0
 801534a:	f000 8099 	beq.w	8015480 <etharp_tmr+0x160>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801534e:	4953      	ldr	r1, [pc, #332]	@ (801549c <etharp_tmr+0x17c>)
 8015350:	687a      	ldr	r2, [r7, #4]
 8015352:	4613      	mov	r3, r2
 8015354:	005b      	lsls	r3, r3, #1
 8015356:	4413      	add	r3, r2
 8015358:	00db      	lsls	r3, r3, #3
 801535a:	440b      	add	r3, r1
 801535c:	3312      	adds	r3, #18
 801535e:	881b      	ldrh	r3, [r3, #0]
 8015360:	3301      	adds	r3, #1
 8015362:	b298      	uxth	r0, r3
 8015364:	494d      	ldr	r1, [pc, #308]	@ (801549c <etharp_tmr+0x17c>)
 8015366:	687a      	ldr	r2, [r7, #4]
 8015368:	4613      	mov	r3, r2
 801536a:	005b      	lsls	r3, r3, #1
 801536c:	4413      	add	r3, r2
 801536e:	00db      	lsls	r3, r3, #3
 8015370:	440b      	add	r3, r1
 8015372:	3312      	adds	r3, #18
 8015374:	4602      	mov	r2, r0
 8015376:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015378:	4948      	ldr	r1, [pc, #288]	@ (801549c <etharp_tmr+0x17c>)
 801537a:	687a      	ldr	r2, [r7, #4]
 801537c:	4613      	mov	r3, r2
 801537e:	005b      	lsls	r3, r3, #1
 8015380:	4413      	add	r3, r2
 8015382:	00db      	lsls	r3, r3, #3
 8015384:	440b      	add	r3, r1
 8015386:	3312      	adds	r3, #18
 8015388:	881b      	ldrh	r3, [r3, #0]
 801538a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801538e:	d215      	bcs.n	80153bc <etharp_tmr+0x9c>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015390:	4942      	ldr	r1, [pc, #264]	@ (801549c <etharp_tmr+0x17c>)
 8015392:	687a      	ldr	r2, [r7, #4]
 8015394:	4613      	mov	r3, r2
 8015396:	005b      	lsls	r3, r3, #1
 8015398:	4413      	add	r3, r2
 801539a:	00db      	lsls	r3, r3, #3
 801539c:	440b      	add	r3, r1
 801539e:	3314      	adds	r3, #20
 80153a0:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80153a2:	2b01      	cmp	r3, #1
 80153a4:	d121      	bne.n	80153ea <etharp_tmr+0xca>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80153a6:	493d      	ldr	r1, [pc, #244]	@ (801549c <etharp_tmr+0x17c>)
 80153a8:	687a      	ldr	r2, [r7, #4]
 80153aa:	4613      	mov	r3, r2
 80153ac:	005b      	lsls	r3, r3, #1
 80153ae:	4413      	add	r3, r2
 80153b0:	00db      	lsls	r3, r3, #3
 80153b2:	440b      	add	r3, r1
 80153b4:	3312      	adds	r3, #18
 80153b6:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80153b8:	2b04      	cmp	r3, #4
 80153ba:	d916      	bls.n	80153ea <etharp_tmr+0xca>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
 80153bc:	4937      	ldr	r1, [pc, #220]	@ (801549c <etharp_tmr+0x17c>)
 80153be:	687a      	ldr	r2, [r7, #4]
 80153c0:	4613      	mov	r3, r2
 80153c2:	005b      	lsls	r3, r3, #1
 80153c4:	4413      	add	r3, r2
 80153c6:	00db      	lsls	r3, r3, #3
 80153c8:	440b      	add	r3, r1
 80153ca:	3314      	adds	r3, #20
 80153cc:	781b      	ldrb	r3, [r3, #0]
 80153ce:	2b01      	cmp	r3, #1
 80153d0:	d901      	bls.n	80153d6 <etharp_tmr+0xb6>
 80153d2:	4b33      	ldr	r3, [pc, #204]	@ (80154a0 <etharp_tmr+0x180>)
 80153d4:	e000      	b.n	80153d8 <etharp_tmr+0xb8>
 80153d6:	4b33      	ldr	r3, [pc, #204]	@ (80154a4 <etharp_tmr+0x184>)
 80153d8:	687a      	ldr	r2, [r7, #4]
 80153da:	4619      	mov	r1, r3
 80153dc:	4832      	ldr	r0, [pc, #200]	@ (80154a8 <etharp_tmr+0x188>)
 80153de:	f004 f941 	bl	8019664 <iprintf>
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80153e2:	6878      	ldr	r0, [r7, #4]
 80153e4:	f7ff ff2a 	bl	801523c <etharp_free_entry>
 80153e8:	e04a      	b.n	8015480 <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80153ea:	492c      	ldr	r1, [pc, #176]	@ (801549c <etharp_tmr+0x17c>)
 80153ec:	687a      	ldr	r2, [r7, #4]
 80153ee:	4613      	mov	r3, r2
 80153f0:	005b      	lsls	r3, r3, #1
 80153f2:	4413      	add	r3, r2
 80153f4:	00db      	lsls	r3, r3, #3
 80153f6:	440b      	add	r3, r1
 80153f8:	3314      	adds	r3, #20
 80153fa:	781b      	ldrb	r3, [r3, #0]
 80153fc:	2b03      	cmp	r3, #3
 80153fe:	d10a      	bne.n	8015416 <etharp_tmr+0xf6>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015400:	4926      	ldr	r1, [pc, #152]	@ (801549c <etharp_tmr+0x17c>)
 8015402:	687a      	ldr	r2, [r7, #4]
 8015404:	4613      	mov	r3, r2
 8015406:	005b      	lsls	r3, r3, #1
 8015408:	4413      	add	r3, r2
 801540a:	00db      	lsls	r3, r3, #3
 801540c:	440b      	add	r3, r1
 801540e:	3314      	adds	r3, #20
 8015410:	2204      	movs	r2, #4
 8015412:	701a      	strb	r2, [r3, #0]
 8015414:	e034      	b.n	8015480 <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015416:	4921      	ldr	r1, [pc, #132]	@ (801549c <etharp_tmr+0x17c>)
 8015418:	687a      	ldr	r2, [r7, #4]
 801541a:	4613      	mov	r3, r2
 801541c:	005b      	lsls	r3, r3, #1
 801541e:	4413      	add	r3, r2
 8015420:	00db      	lsls	r3, r3, #3
 8015422:	440b      	add	r3, r1
 8015424:	3314      	adds	r3, #20
 8015426:	781b      	ldrb	r3, [r3, #0]
 8015428:	2b04      	cmp	r3, #4
 801542a:	d10a      	bne.n	8015442 <etharp_tmr+0x122>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801542c:	491b      	ldr	r1, [pc, #108]	@ (801549c <etharp_tmr+0x17c>)
 801542e:	687a      	ldr	r2, [r7, #4]
 8015430:	4613      	mov	r3, r2
 8015432:	005b      	lsls	r3, r3, #1
 8015434:	4413      	add	r3, r2
 8015436:	00db      	lsls	r3, r3, #3
 8015438:	440b      	add	r3, r1
 801543a:	3314      	adds	r3, #20
 801543c:	2202      	movs	r2, #2
 801543e:	701a      	strb	r2, [r3, #0]
 8015440:	e01e      	b.n	8015480 <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015442:	4916      	ldr	r1, [pc, #88]	@ (801549c <etharp_tmr+0x17c>)
 8015444:	687a      	ldr	r2, [r7, #4]
 8015446:	4613      	mov	r3, r2
 8015448:	005b      	lsls	r3, r3, #1
 801544a:	4413      	add	r3, r2
 801544c:	00db      	lsls	r3, r3, #3
 801544e:	440b      	add	r3, r1
 8015450:	3314      	adds	r3, #20
 8015452:	781b      	ldrb	r3, [r3, #0]
 8015454:	2b01      	cmp	r3, #1
 8015456:	d113      	bne.n	8015480 <etharp_tmr+0x160>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015458:	4910      	ldr	r1, [pc, #64]	@ (801549c <etharp_tmr+0x17c>)
 801545a:	687a      	ldr	r2, [r7, #4]
 801545c:	4613      	mov	r3, r2
 801545e:	005b      	lsls	r3, r3, #1
 8015460:	4413      	add	r3, r2
 8015462:	00db      	lsls	r3, r3, #3
 8015464:	440b      	add	r3, r1
 8015466:	3308      	adds	r3, #8
 8015468:	6818      	ldr	r0, [r3, #0]
 801546a:	687a      	ldr	r2, [r7, #4]
 801546c:	4613      	mov	r3, r2
 801546e:	005b      	lsls	r3, r3, #1
 8015470:	4413      	add	r3, r2
 8015472:	00db      	lsls	r3, r3, #3
 8015474:	4a09      	ldr	r2, [pc, #36]	@ (801549c <etharp_tmr+0x17c>)
 8015476:	4413      	add	r3, r2
 8015478:	3304      	adds	r3, #4
 801547a:	4619      	mov	r1, r3
 801547c:	f000 ffa8 	bl	80163d0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	3301      	adds	r3, #1
 8015484:	607b      	str	r3, [r7, #4]
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	2b09      	cmp	r3, #9
 801548a:	f77f af52 	ble.w	8015332 <etharp_tmr+0x12>
      }
    }
  }
}
 801548e:	bf00      	nop
 8015490:	bf00      	nop
 8015492:	3708      	adds	r7, #8
 8015494:	46bd      	mov	sp, r7
 8015496:	bd80      	pop	{r7, pc}
 8015498:	0801df74 	.word	0x0801df74
 801549c:	2000ebd0 	.word	0x2000ebd0
 80154a0:	0801df84 	.word	0x0801df84
 80154a4:	0801df8c 	.word	0x0801df8c
 80154a8:	0801df94 	.word	0x0801df94

080154ac <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b08a      	sub	sp, #40	@ 0x28
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	60f8      	str	r0, [r7, #12]
 80154b4:	460b      	mov	r3, r1
 80154b6:	607a      	str	r2, [r7, #4]
 80154b8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80154ba:	230a      	movs	r3, #10
 80154bc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80154be:	230a      	movs	r3, #10
 80154c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80154c2:	230a      	movs	r3, #10
 80154c4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80154c6:	2300      	movs	r3, #0
 80154c8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80154ca:	230a      	movs	r3, #10
 80154cc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80154ce:	2300      	movs	r3, #0
 80154d0:	83bb      	strh	r3, [r7, #28]
 80154d2:	2300      	movs	r3, #0
 80154d4:	837b      	strh	r3, [r7, #26]
 80154d6:	2300      	movs	r3, #0
 80154d8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80154da:	2300      	movs	r3, #0
 80154dc:	843b      	strh	r3, [r7, #32]
 80154de:	e0ba      	b.n	8015656 <etharp_find_entry+0x1aa>
    u8_t state = arp_table[i].state;
 80154e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154e4:	4993      	ldr	r1, [pc, #588]	@ (8015734 <etharp_find_entry+0x288>)
 80154e6:	4613      	mov	r3, r2
 80154e8:	005b      	lsls	r3, r3, #1
 80154ea:	4413      	add	r3, r2
 80154ec:	00db      	lsls	r3, r3, #3
 80154ee:	440b      	add	r3, r1
 80154f0:	3314      	adds	r3, #20
 80154f2:	781b      	ldrb	r3, [r3, #0]
 80154f4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80154f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80154fa:	2b0a      	cmp	r3, #10
 80154fc:	d10b      	bne.n	8015516 <etharp_find_entry+0x6a>
 80154fe:	7dfb      	ldrb	r3, [r7, #23]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d108      	bne.n	8015516 <etharp_find_entry+0x6a>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
 8015504:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015508:	4619      	mov	r1, r3
 801550a:	488b      	ldr	r0, [pc, #556]	@ (8015738 <etharp_find_entry+0x28c>)
 801550c:	f004 f8aa 	bl	8019664 <iprintf>
      /* remember first empty entry */
      empty = i;
 8015510:	8c3b      	ldrh	r3, [r7, #32]
 8015512:	847b      	strh	r3, [r7, #34]	@ 0x22
 8015514:	e09b      	b.n	801564e <etharp_find_entry+0x1a2>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015516:	7dfb      	ldrb	r3, [r7, #23]
 8015518:	2b00      	cmp	r3, #0
 801551a:	f000 8098 	beq.w	801564e <etharp_find_entry+0x1a2>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801551e:	7dfb      	ldrb	r3, [r7, #23]
 8015520:	2b01      	cmp	r3, #1
 8015522:	d009      	beq.n	8015538 <etharp_find_entry+0x8c>
 8015524:	7dfb      	ldrb	r3, [r7, #23]
 8015526:	2b01      	cmp	r3, #1
 8015528:	d806      	bhi.n	8015538 <etharp_find_entry+0x8c>
 801552a:	4b84      	ldr	r3, [pc, #528]	@ (801573c <etharp_find_entry+0x290>)
 801552c:	f240 1223 	movw	r2, #291	@ 0x123
 8015530:	4983      	ldr	r1, [pc, #524]	@ (8015740 <etharp_find_entry+0x294>)
 8015532:	4884      	ldr	r0, [pc, #528]	@ (8015744 <etharp_find_entry+0x298>)
 8015534:	f004 f896 	bl	8019664 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d026      	beq.n	801558c <etharp_find_entry+0xe0>
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	6819      	ldr	r1, [r3, #0]
 8015542:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015546:	487b      	ldr	r0, [pc, #492]	@ (8015734 <etharp_find_entry+0x288>)
 8015548:	4613      	mov	r3, r2
 801554a:	005b      	lsls	r3, r3, #1
 801554c:	4413      	add	r3, r2
 801554e:	00db      	lsls	r3, r3, #3
 8015550:	4403      	add	r3, r0
 8015552:	3304      	adds	r3, #4
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	4299      	cmp	r1, r3
 8015558:	d118      	bne.n	801558c <etharp_find_entry+0xe0>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d00c      	beq.n	801557a <etharp_find_entry+0xce>
 8015560:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015564:	4973      	ldr	r1, [pc, #460]	@ (8015734 <etharp_find_entry+0x288>)
 8015566:	4613      	mov	r3, r2
 8015568:	005b      	lsls	r3, r3, #1
 801556a:	4413      	add	r3, r2
 801556c:	00db      	lsls	r3, r3, #3
 801556e:	440b      	add	r3, r1
 8015570:	3308      	adds	r3, #8
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	687a      	ldr	r2, [r7, #4]
 8015576:	429a      	cmp	r2, r3
 8015578:	d108      	bne.n	801558c <etharp_find_entry+0xe0>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
 801557a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801557e:	4619      	mov	r1, r3
 8015580:	4871      	ldr	r0, [pc, #452]	@ (8015748 <etharp_find_entry+0x29c>)
 8015582:	f004 f86f 	bl	8019664 <iprintf>
        /* found exact IP address match, simply bail out */
        return i;
 8015586:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801558a:	e142      	b.n	8015812 <etharp_find_entry+0x366>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801558c:	7dfb      	ldrb	r3, [r7, #23]
 801558e:	2b01      	cmp	r3, #1
 8015590:	d140      	bne.n	8015614 <etharp_find_entry+0x168>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015592:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015596:	4967      	ldr	r1, [pc, #412]	@ (8015734 <etharp_find_entry+0x288>)
 8015598:	4613      	mov	r3, r2
 801559a:	005b      	lsls	r3, r3, #1
 801559c:	4413      	add	r3, r2
 801559e:	00db      	lsls	r3, r3, #3
 80155a0:	440b      	add	r3, r1
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d01a      	beq.n	80155de <etharp_find_entry+0x132>
          if (arp_table[i].ctime >= age_queue) {
 80155a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155ac:	4961      	ldr	r1, [pc, #388]	@ (8015734 <etharp_find_entry+0x288>)
 80155ae:	4613      	mov	r3, r2
 80155b0:	005b      	lsls	r3, r3, #1
 80155b2:	4413      	add	r3, r2
 80155b4:	00db      	lsls	r3, r3, #3
 80155b6:	440b      	add	r3, r1
 80155b8:	3312      	adds	r3, #18
 80155ba:	881b      	ldrh	r3, [r3, #0]
 80155bc:	8bba      	ldrh	r2, [r7, #28]
 80155be:	429a      	cmp	r2, r3
 80155c0:	d845      	bhi.n	801564e <etharp_find_entry+0x1a2>
            old_queue = i;
 80155c2:	8c3b      	ldrh	r3, [r7, #32]
 80155c4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80155c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155ca:	495a      	ldr	r1, [pc, #360]	@ (8015734 <etharp_find_entry+0x288>)
 80155cc:	4613      	mov	r3, r2
 80155ce:	005b      	lsls	r3, r3, #1
 80155d0:	4413      	add	r3, r2
 80155d2:	00db      	lsls	r3, r3, #3
 80155d4:	440b      	add	r3, r1
 80155d6:	3312      	adds	r3, #18
 80155d8:	881b      	ldrh	r3, [r3, #0]
 80155da:	83bb      	strh	r3, [r7, #28]
 80155dc:	e037      	b.n	801564e <etharp_find_entry+0x1a2>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80155de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155e2:	4954      	ldr	r1, [pc, #336]	@ (8015734 <etharp_find_entry+0x288>)
 80155e4:	4613      	mov	r3, r2
 80155e6:	005b      	lsls	r3, r3, #1
 80155e8:	4413      	add	r3, r2
 80155ea:	00db      	lsls	r3, r3, #3
 80155ec:	440b      	add	r3, r1
 80155ee:	3312      	adds	r3, #18
 80155f0:	881b      	ldrh	r3, [r3, #0]
 80155f2:	8b7a      	ldrh	r2, [r7, #26]
 80155f4:	429a      	cmp	r2, r3
 80155f6:	d82a      	bhi.n	801564e <etharp_find_entry+0x1a2>
            old_pending = i;
 80155f8:	8c3b      	ldrh	r3, [r7, #32]
 80155fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80155fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015600:	494c      	ldr	r1, [pc, #304]	@ (8015734 <etharp_find_entry+0x288>)
 8015602:	4613      	mov	r3, r2
 8015604:	005b      	lsls	r3, r3, #1
 8015606:	4413      	add	r3, r2
 8015608:	00db      	lsls	r3, r3, #3
 801560a:	440b      	add	r3, r1
 801560c:	3312      	adds	r3, #18
 801560e:	881b      	ldrh	r3, [r3, #0]
 8015610:	837b      	strh	r3, [r7, #26]
 8015612:	e01c      	b.n	801564e <etharp_find_entry+0x1a2>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015614:	7dfb      	ldrb	r3, [r7, #23]
 8015616:	2b01      	cmp	r3, #1
 8015618:	d919      	bls.n	801564e <etharp_find_entry+0x1a2>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801561a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801561e:	4945      	ldr	r1, [pc, #276]	@ (8015734 <etharp_find_entry+0x288>)
 8015620:	4613      	mov	r3, r2
 8015622:	005b      	lsls	r3, r3, #1
 8015624:	4413      	add	r3, r2
 8015626:	00db      	lsls	r3, r3, #3
 8015628:	440b      	add	r3, r1
 801562a:	3312      	adds	r3, #18
 801562c:	881b      	ldrh	r3, [r3, #0]
 801562e:	8b3a      	ldrh	r2, [r7, #24]
 8015630:	429a      	cmp	r2, r3
 8015632:	d80c      	bhi.n	801564e <etharp_find_entry+0x1a2>
            old_stable = i;
 8015634:	8c3b      	ldrh	r3, [r7, #32]
 8015636:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8015638:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801563c:	493d      	ldr	r1, [pc, #244]	@ (8015734 <etharp_find_entry+0x288>)
 801563e:	4613      	mov	r3, r2
 8015640:	005b      	lsls	r3, r3, #1
 8015642:	4413      	add	r3, r2
 8015644:	00db      	lsls	r3, r3, #3
 8015646:	440b      	add	r3, r1
 8015648:	3312      	adds	r3, #18
 801564a:	881b      	ldrh	r3, [r3, #0]
 801564c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801564e:	8c3b      	ldrh	r3, [r7, #32]
 8015650:	3301      	adds	r3, #1
 8015652:	b29b      	uxth	r3, r3
 8015654:	843b      	strh	r3, [r7, #32]
 8015656:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801565a:	2b09      	cmp	r3, #9
 801565c:	f77f af40 	ble.w	80154e0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015660:	7afb      	ldrb	r3, [r7, #11]
 8015662:	f003 0302 	and.w	r3, r3, #2
 8015666:	2b00      	cmp	r3, #0
 8015668:	d108      	bne.n	801567c <etharp_find_entry+0x1d0>
 801566a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801566e:	2b0a      	cmp	r3, #10
 8015670:	d10a      	bne.n	8015688 <etharp_find_entry+0x1dc>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015672:	7afb      	ldrb	r3, [r7, #11]
 8015674:	f003 0301 	and.w	r3, r3, #1
 8015678:	2b00      	cmp	r3, #0
 801567a:	d105      	bne.n	8015688 <etharp_find_entry+0x1dc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
 801567c:	4833      	ldr	r0, [pc, #204]	@ (801574c <etharp_find_entry+0x2a0>)
 801567e:	f004 f861 	bl	8019744 <puts>
    return (s16_t)ERR_MEM;
 8015682:	f04f 33ff 	mov.w	r3, #4294967295
 8015686:	e0c4      	b.n	8015812 <etharp_find_entry+0x366>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015688:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801568c:	2b09      	cmp	r3, #9
 801568e:	dc08      	bgt.n	80156a2 <etharp_find_entry+0x1f6>
    i = empty;
 8015690:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015692:	843b      	strh	r3, [r7, #32]
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
 8015694:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015698:	4619      	mov	r1, r3
 801569a:	482d      	ldr	r0, [pc, #180]	@ (8015750 <etharp_find_entry+0x2a4>)
 801569c:	f003 ffe2 	bl	8019664 <iprintf>
 80156a0:	e072      	b.n	8015788 <etharp_find_entry+0x2dc>
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80156a2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80156a6:	2b09      	cmp	r3, #9
 80156a8:	dc1a      	bgt.n	80156e0 <etharp_find_entry+0x234>
      /* recycle oldest stable*/
      i = old_stable;
 80156aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80156ac:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
 80156ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80156b2:	4619      	mov	r1, r3
 80156b4:	4827      	ldr	r0, [pc, #156]	@ (8015754 <etharp_find_entry+0x2a8>)
 80156b6:	f003 ffd5 	bl	8019664 <iprintf>
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80156ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80156be:	491d      	ldr	r1, [pc, #116]	@ (8015734 <etharp_find_entry+0x288>)
 80156c0:	4613      	mov	r3, r2
 80156c2:	005b      	lsls	r3, r3, #1
 80156c4:	4413      	add	r3, r2
 80156c6:	00db      	lsls	r3, r3, #3
 80156c8:	440b      	add	r3, r1
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d04b      	beq.n	8015768 <etharp_find_entry+0x2bc>
 80156d0:	4b1a      	ldr	r3, [pc, #104]	@ (801573c <etharp_find_entry+0x290>)
 80156d2:	f240 126d 	movw	r2, #365	@ 0x16d
 80156d6:	4920      	ldr	r1, [pc, #128]	@ (8015758 <etharp_find_entry+0x2ac>)
 80156d8:	481a      	ldr	r0, [pc, #104]	@ (8015744 <etharp_find_entry+0x298>)
 80156da:	f003 ffc3 	bl	8019664 <iprintf>
 80156de:	e043      	b.n	8015768 <etharp_find_entry+0x2bc>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80156e0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80156e4:	2b09      	cmp	r3, #9
 80156e6:	dc08      	bgt.n	80156fa <etharp_find_entry+0x24e>
      /* recycle oldest pending */
      i = old_pending;
 80156e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80156ea:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
 80156ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80156f0:	4619      	mov	r1, r3
 80156f2:	481a      	ldr	r0, [pc, #104]	@ (801575c <etharp_find_entry+0x2b0>)
 80156f4:	f003 ffb6 	bl	8019664 <iprintf>
 80156f8:	e036      	b.n	8015768 <etharp_find_entry+0x2bc>
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80156fa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80156fe:	2b09      	cmp	r3, #9
 8015700:	dc11      	bgt.n	8015726 <etharp_find_entry+0x27a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015702:	8bfb      	ldrh	r3, [r7, #30]
 8015704:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
 8015706:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 801570a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801570e:	4809      	ldr	r0, [pc, #36]	@ (8015734 <etharp_find_entry+0x288>)
 8015710:	4613      	mov	r3, r2
 8015712:	005b      	lsls	r3, r3, #1
 8015714:	4413      	add	r3, r2
 8015716:	00db      	lsls	r3, r3, #3
 8015718:	4403      	add	r3, r0
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	461a      	mov	r2, r3
 801571e:	4810      	ldr	r0, [pc, #64]	@ (8015760 <etharp_find_entry+0x2b4>)
 8015720:	f003 ffa0 	bl	8019664 <iprintf>
 8015724:	e020      	b.n	8015768 <etharp_find_entry+0x2bc>
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
 8015726:	480f      	ldr	r0, [pc, #60]	@ (8015764 <etharp_find_entry+0x2b8>)
 8015728:	f004 f80c 	bl	8019744 <puts>
      return (s16_t)ERR_MEM;
 801572c:	f04f 33ff 	mov.w	r3, #4294967295
 8015730:	e06f      	b.n	8015812 <etharp_find_entry+0x366>
 8015732:	bf00      	nop
 8015734:	2000ebd0 	.word	0x2000ebd0
 8015738:	0801dfb8 	.word	0x0801dfb8
 801573c:	0801dfe4 	.word	0x0801dfe4
 8015740:	0801e01c 	.word	0x0801e01c
 8015744:	0801e05c 	.word	0x0801e05c
 8015748:	0801e084 	.word	0x0801e084
 801574c:	0801e0b0 	.word	0x0801e0b0
 8015750:	0801e0f4 	.word	0x0801e0f4
 8015754:	0801e124 	.word	0x0801e124
 8015758:	0801e15c 	.word	0x0801e15c
 801575c:	0801e174 	.word	0x0801e174
 8015760:	0801e1bc 	.word	0x0801e1bc
 8015764:	0801e20c 	.word	0x0801e20c
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015768:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801576c:	2b09      	cmp	r3, #9
 801576e:	dd06      	ble.n	801577e <etharp_find_entry+0x2d2>
 8015770:	4b2a      	ldr	r3, [pc, #168]	@ (801581c <etharp_find_entry+0x370>)
 8015772:	f240 127f 	movw	r2, #383	@ 0x17f
 8015776:	492a      	ldr	r1, [pc, #168]	@ (8015820 <etharp_find_entry+0x374>)
 8015778:	482a      	ldr	r0, [pc, #168]	@ (8015824 <etharp_find_entry+0x378>)
 801577a:	f003 ff73 	bl	8019664 <iprintf>
    etharp_free_entry(i);
 801577e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015782:	4618      	mov	r0, r3
 8015784:	f7ff fd5a 	bl	801523c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015788:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801578c:	2b09      	cmp	r3, #9
 801578e:	dd06      	ble.n	801579e <etharp_find_entry+0x2f2>
 8015790:	4b22      	ldr	r3, [pc, #136]	@ (801581c <etharp_find_entry+0x370>)
 8015792:	f240 1283 	movw	r2, #387	@ 0x183
 8015796:	4922      	ldr	r1, [pc, #136]	@ (8015820 <etharp_find_entry+0x374>)
 8015798:	4822      	ldr	r0, [pc, #136]	@ (8015824 <etharp_find_entry+0x378>)
 801579a:	f003 ff63 	bl	8019664 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801579e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80157a2:	4921      	ldr	r1, [pc, #132]	@ (8015828 <etharp_find_entry+0x37c>)
 80157a4:	4613      	mov	r3, r2
 80157a6:	005b      	lsls	r3, r3, #1
 80157a8:	4413      	add	r3, r2
 80157aa:	00db      	lsls	r3, r3, #3
 80157ac:	440b      	add	r3, r1
 80157ae:	3314      	adds	r3, #20
 80157b0:	781b      	ldrb	r3, [r3, #0]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d006      	beq.n	80157c4 <etharp_find_entry+0x318>
 80157b6:	4b19      	ldr	r3, [pc, #100]	@ (801581c <etharp_find_entry+0x370>)
 80157b8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80157bc:	491b      	ldr	r1, [pc, #108]	@ (801582c <etharp_find_entry+0x380>)
 80157be:	4819      	ldr	r0, [pc, #100]	@ (8015824 <etharp_find_entry+0x378>)
 80157c0:	f003 ff50 	bl	8019664 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d00b      	beq.n	80157e2 <etharp_find_entry+0x336>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80157ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	6819      	ldr	r1, [r3, #0]
 80157d2:	4815      	ldr	r0, [pc, #84]	@ (8015828 <etharp_find_entry+0x37c>)
 80157d4:	4613      	mov	r3, r2
 80157d6:	005b      	lsls	r3, r3, #1
 80157d8:	4413      	add	r3, r2
 80157da:	00db      	lsls	r3, r3, #3
 80157dc:	4403      	add	r3, r0
 80157de:	3304      	adds	r3, #4
 80157e0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80157e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80157e6:	4910      	ldr	r1, [pc, #64]	@ (8015828 <etharp_find_entry+0x37c>)
 80157e8:	4613      	mov	r3, r2
 80157ea:	005b      	lsls	r3, r3, #1
 80157ec:	4413      	add	r3, r2
 80157ee:	00db      	lsls	r3, r3, #3
 80157f0:	440b      	add	r3, r1
 80157f2:	3312      	adds	r3, #18
 80157f4:	2200      	movs	r2, #0
 80157f6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80157f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80157fc:	490a      	ldr	r1, [pc, #40]	@ (8015828 <etharp_find_entry+0x37c>)
 80157fe:	4613      	mov	r3, r2
 8015800:	005b      	lsls	r3, r3, #1
 8015802:	4413      	add	r3, r2
 8015804:	00db      	lsls	r3, r3, #3
 8015806:	440b      	add	r3, r1
 8015808:	3308      	adds	r3, #8
 801580a:	687a      	ldr	r2, [r7, #4]
 801580c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801580e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015812:	4618      	mov	r0, r3
 8015814:	3728      	adds	r7, #40	@ 0x28
 8015816:	46bd      	mov	sp, r7
 8015818:	bd80      	pop	{r7, pc}
 801581a:	bf00      	nop
 801581c:	0801dfe4 	.word	0x0801dfe4
 8015820:	0801e244 	.word	0x0801e244
 8015824:	0801e05c 	.word	0x0801e05c
 8015828:	2000ebd0 	.word	0x2000ebd0
 801582c:	0801e258 	.word	0x0801e258

08015830 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015834:	b08e      	sub	sp, #56	@ 0x38
 8015836:	af08      	add	r7, sp, #32
 8015838:	60f8      	str	r0, [r7, #12]
 801583a:	60b9      	str	r1, [r7, #8]
 801583c:	607a      	str	r2, [r7, #4]
 801583e:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015846:	2b06      	cmp	r3, #6
 8015848:	d006      	beq.n	8015858 <etharp_update_arp_entry+0x28>
 801584a:	4b64      	ldr	r3, [pc, #400]	@ (80159dc <etharp_update_arp_entry+0x1ac>)
 801584c:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8015850:	4963      	ldr	r1, [pc, #396]	@ (80159e0 <etharp_update_arp_entry+0x1b0>)
 8015852:	4864      	ldr	r0, [pc, #400]	@ (80159e4 <etharp_update_arp_entry+0x1b4>)
 8015854:	f003 ff06 	bl	8019664 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
 8015858:	68bb      	ldr	r3, [r7, #8]
 801585a:	781b      	ldrb	r3, [r3, #0]
 801585c:	469c      	mov	ip, r3
 801585e:	68bb      	ldr	r3, [r7, #8]
 8015860:	3301      	adds	r3, #1
 8015862:	781b      	ldrb	r3, [r3, #0]
 8015864:	469e      	mov	lr, r3
 8015866:	68bb      	ldr	r3, [r7, #8]
 8015868:	3302      	adds	r3, #2
 801586a:	781b      	ldrb	r3, [r3, #0]
 801586c:	4698      	mov	r8, r3
 801586e:	68bb      	ldr	r3, [r7, #8]
 8015870:	3303      	adds	r3, #3
 8015872:	781b      	ldrb	r3, [r3, #0]
 8015874:	461a      	mov	r2, r3
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	781b      	ldrb	r3, [r3, #0]
 801587a:	4619      	mov	r1, r3
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	785b      	ldrb	r3, [r3, #1]
 8015880:	4618      	mov	r0, r3
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	789b      	ldrb	r3, [r3, #2]
 8015886:	461c      	mov	r4, r3
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	78db      	ldrb	r3, [r3, #3]
 801588c:	461d      	mov	r5, r3
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	791b      	ldrb	r3, [r3, #4]
 8015892:	461e      	mov	r6, r3
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	795b      	ldrb	r3, [r3, #5]
 8015898:	9306      	str	r3, [sp, #24]
 801589a:	9605      	str	r6, [sp, #20]
 801589c:	9504      	str	r5, [sp, #16]
 801589e:	9403      	str	r4, [sp, #12]
 80158a0:	9002      	str	r0, [sp, #8]
 80158a2:	9101      	str	r1, [sp, #4]
 80158a4:	9200      	str	r2, [sp, #0]
 80158a6:	4643      	mov	r3, r8
 80158a8:	4672      	mov	r2, lr
 80158aa:	4661      	mov	r1, ip
 80158ac:	484e      	ldr	r0, [pc, #312]	@ (80159e8 <etharp_update_arp_entry+0x1b8>)
 80158ae:	f003 fed9 	bl	8019664 <iprintf>
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80158b2:	68bb      	ldr	r3, [r7, #8]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d012      	beq.n	80158de <etharp_update_arp_entry+0xae>
 80158b8:	68bb      	ldr	r3, [r7, #8]
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d00e      	beq.n	80158de <etharp_update_arp_entry+0xae>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80158c0:	68bb      	ldr	r3, [r7, #8]
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	68f9      	ldr	r1, [r7, #12]
 80158c6:	4618      	mov	r0, r3
 80158c8:	f001 ff2c 	bl	8017724 <ip4_addr_isbroadcast_u32>
 80158cc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d105      	bne.n	80158de <etharp_update_arp_entry+0xae>
      ip4_addr_ismulticast(ipaddr)) {
 80158d2:	68bb      	ldr	r3, [r7, #8]
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80158da:	2be0      	cmp	r3, #224	@ 0xe0
 80158dc:	d105      	bne.n	80158ea <etharp_update_arp_entry+0xba>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
 80158de:	4843      	ldr	r0, [pc, #268]	@ (80159ec <etharp_update_arp_entry+0x1bc>)
 80158e0:	f003 ff30 	bl	8019744 <puts>
    return ERR_ARG;
 80158e4:	f06f 030f 	mvn.w	r3, #15
 80158e8:	e072      	b.n	80159d0 <etharp_update_arp_entry+0x1a0>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80158ea:	78fb      	ldrb	r3, [r7, #3]
 80158ec:	68fa      	ldr	r2, [r7, #12]
 80158ee:	4619      	mov	r1, r3
 80158f0:	68b8      	ldr	r0, [r7, #8]
 80158f2:	f7ff fddb 	bl	80154ac <etharp_find_entry>
 80158f6:	4603      	mov	r3, r0
 80158f8:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80158fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	da02      	bge.n	8015908 <etharp_update_arp_entry+0xd8>
    return (err_t)i;
 8015902:	8afb      	ldrh	r3, [r7, #22]
 8015904:	b25b      	sxtb	r3, r3
 8015906:	e063      	b.n	80159d0 <etharp_update_arp_entry+0x1a0>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015908:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801590c:	4938      	ldr	r1, [pc, #224]	@ (80159f0 <etharp_update_arp_entry+0x1c0>)
 801590e:	4613      	mov	r3, r2
 8015910:	005b      	lsls	r3, r3, #1
 8015912:	4413      	add	r3, r2
 8015914:	00db      	lsls	r3, r3, #3
 8015916:	440b      	add	r3, r1
 8015918:	3314      	adds	r3, #20
 801591a:	2202      	movs	r2, #2
 801591c:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801591e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015922:	4933      	ldr	r1, [pc, #204]	@ (80159f0 <etharp_update_arp_entry+0x1c0>)
 8015924:	4613      	mov	r3, r2
 8015926:	005b      	lsls	r3, r3, #1
 8015928:	4413      	add	r3, r2
 801592a:	00db      	lsls	r3, r3, #3
 801592c:	440b      	add	r3, r1
 801592e:	3308      	adds	r3, #8
 8015930:	68fa      	ldr	r2, [r7, #12]
 8015932:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
 8015934:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015938:	4619      	mov	r1, r3
 801593a:	482e      	ldr	r0, [pc, #184]	@ (80159f4 <etharp_update_arp_entry+0x1c4>)
 801593c:	f003 fe92 	bl	8019664 <iprintf>
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015940:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015944:	4613      	mov	r3, r2
 8015946:	005b      	lsls	r3, r3, #1
 8015948:	4413      	add	r3, r2
 801594a:	00db      	lsls	r3, r3, #3
 801594c:	3308      	adds	r3, #8
 801594e:	4a28      	ldr	r2, [pc, #160]	@ (80159f0 <etharp_update_arp_entry+0x1c0>)
 8015950:	4413      	add	r3, r2
 8015952:	3304      	adds	r3, #4
 8015954:	2206      	movs	r2, #6
 8015956:	6879      	ldr	r1, [r7, #4]
 8015958:	4618      	mov	r0, r3
 801595a:	f004 f928 	bl	8019bae <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801595e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015962:	4923      	ldr	r1, [pc, #140]	@ (80159f0 <etharp_update_arp_entry+0x1c0>)
 8015964:	4613      	mov	r3, r2
 8015966:	005b      	lsls	r3, r3, #1
 8015968:	4413      	add	r3, r2
 801596a:	00db      	lsls	r3, r3, #3
 801596c:	440b      	add	r3, r1
 801596e:	3312      	adds	r3, #18
 8015970:	2200      	movs	r2, #0
 8015972:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015974:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015978:	491d      	ldr	r1, [pc, #116]	@ (80159f0 <etharp_update_arp_entry+0x1c0>)
 801597a:	4613      	mov	r3, r2
 801597c:	005b      	lsls	r3, r3, #1
 801597e:	4413      	add	r3, r2
 8015980:	00db      	lsls	r3, r3, #3
 8015982:	440b      	add	r3, r1
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d021      	beq.n	80159ce <etharp_update_arp_entry+0x19e>
    struct pbuf *p = arp_table[i].q;
 801598a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801598e:	4918      	ldr	r1, [pc, #96]	@ (80159f0 <etharp_update_arp_entry+0x1c0>)
 8015990:	4613      	mov	r3, r2
 8015992:	005b      	lsls	r3, r3, #1
 8015994:	4413      	add	r3, r2
 8015996:	00db      	lsls	r3, r3, #3
 8015998:	440b      	add	r3, r1
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801599e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80159a2:	4913      	ldr	r1, [pc, #76]	@ (80159f0 <etharp_update_arp_entry+0x1c0>)
 80159a4:	4613      	mov	r3, r2
 80159a6:	005b      	lsls	r3, r3, #1
 80159a8:	4413      	add	r3, r2
 80159aa:	00db      	lsls	r3, r3, #3
 80159ac:	440b      	add	r3, r1
 80159ae:	2200      	movs	r2, #0
 80159b0:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80159b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80159bc:	9300      	str	r3, [sp, #0]
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	6939      	ldr	r1, [r7, #16]
 80159c2:	68f8      	ldr	r0, [r7, #12]
 80159c4:	f002 fe80 	bl	80186c8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80159c8:	6938      	ldr	r0, [r7, #16]
 80159ca:	f7f9 faeb 	bl	800efa4 <pbuf_free>
  }
  return ERR_OK;
 80159ce:	2300      	movs	r3, #0
}
 80159d0:	4618      	mov	r0, r3
 80159d2:	3718      	adds	r7, #24
 80159d4:	46bd      	mov	sp, r7
 80159d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159da:	bf00      	nop
 80159dc:	0801dfe4 	.word	0x0801dfe4
 80159e0:	0801e284 	.word	0x0801e284
 80159e4:	0801e05c 	.word	0x0801e05c
 80159e8:	0801e2a8 	.word	0x0801e2a8
 80159ec:	0801e2f8 	.word	0x0801e2f8
 80159f0:	2000ebd0 	.word	0x2000ebd0
 80159f4:	0801e344 	.word	0x0801e344

080159f8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b084      	sub	sp, #16
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a00:	2300      	movs	r3, #0
 8015a02:	60fb      	str	r3, [r7, #12]
 8015a04:	e01e      	b.n	8015a44 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015a06:	4913      	ldr	r1, [pc, #76]	@ (8015a54 <etharp_cleanup_netif+0x5c>)
 8015a08:	68fa      	ldr	r2, [r7, #12]
 8015a0a:	4613      	mov	r3, r2
 8015a0c:	005b      	lsls	r3, r3, #1
 8015a0e:	4413      	add	r3, r2
 8015a10:	00db      	lsls	r3, r3, #3
 8015a12:	440b      	add	r3, r1
 8015a14:	3314      	adds	r3, #20
 8015a16:	781b      	ldrb	r3, [r3, #0]
 8015a18:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015a1a:	7afb      	ldrb	r3, [r7, #11]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d00e      	beq.n	8015a3e <etharp_cleanup_netif+0x46>
 8015a20:	490c      	ldr	r1, [pc, #48]	@ (8015a54 <etharp_cleanup_netif+0x5c>)
 8015a22:	68fa      	ldr	r2, [r7, #12]
 8015a24:	4613      	mov	r3, r2
 8015a26:	005b      	lsls	r3, r3, #1
 8015a28:	4413      	add	r3, r2
 8015a2a:	00db      	lsls	r3, r3, #3
 8015a2c:	440b      	add	r3, r1
 8015a2e:	3308      	adds	r3, #8
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	687a      	ldr	r2, [r7, #4]
 8015a34:	429a      	cmp	r2, r3
 8015a36:	d102      	bne.n	8015a3e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015a38:	68f8      	ldr	r0, [r7, #12]
 8015a3a:	f7ff fbff 	bl	801523c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	3301      	adds	r3, #1
 8015a42:	60fb      	str	r3, [r7, #12]
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	2b09      	cmp	r3, #9
 8015a48:	dddd      	ble.n	8015a06 <etharp_cleanup_netif+0xe>
    }
  }
}
 8015a4a:	bf00      	nop
 8015a4c:	bf00      	nop
 8015a4e:	3710      	adds	r7, #16
 8015a50:	46bd      	mov	sp, r7
 8015a52:	bd80      	pop	{r7, pc}
 8015a54:	2000ebd0 	.word	0x2000ebd0

08015a58 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015a58:	b5b0      	push	{r4, r5, r7, lr}
 8015a5a:	b08a      	sub	sp, #40	@ 0x28
 8015a5c:	af04      	add	r7, sp, #16
 8015a5e:	6078      	str	r0, [r7, #4]
 8015a60:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015a62:	683b      	ldr	r3, [r7, #0]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d107      	bne.n	8015a78 <etharp_input+0x20>
 8015a68:	4b60      	ldr	r3, [pc, #384]	@ (8015bec <etharp_input+0x194>)
 8015a6a:	f240 228a 	movw	r2, #650	@ 0x28a
 8015a6e:	4960      	ldr	r1, [pc, #384]	@ (8015bf0 <etharp_input+0x198>)
 8015a70:	4860      	ldr	r0, [pc, #384]	@ (8015bf4 <etharp_input+0x19c>)
 8015a72:	f003 fdf7 	bl	8019664 <iprintf>
 8015a76:	e0b6      	b.n	8015be6 <etharp_input+0x18e>

  hdr = (struct etharp_hdr *)p->payload;
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	685b      	ldr	r3, [r3, #4]
 8015a7c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015a7e:	693b      	ldr	r3, [r7, #16]
 8015a80:	881b      	ldrh	r3, [r3, #0]
 8015a82:	b29b      	uxth	r3, r3
 8015a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015a88:	d10c      	bne.n	8015aa4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015a8a:	693b      	ldr	r3, [r7, #16]
 8015a8c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015a8e:	2b06      	cmp	r3, #6
 8015a90:	d108      	bne.n	8015aa4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015a92:	693b      	ldr	r3, [r7, #16]
 8015a94:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015a96:	2b04      	cmp	r3, #4
 8015a98:	d104      	bne.n	8015aa4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015a9a:	693b      	ldr	r3, [r7, #16]
 8015a9c:	885b      	ldrh	r3, [r3, #2]
 8015a9e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015aa0:	2b08      	cmp	r3, #8
 8015aa2:	d021      	beq.n	8015ae8 <etharp_input+0x90>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 8015aa4:	693b      	ldr	r3, [r7, #16]
 8015aa6:	881b      	ldrh	r3, [r3, #0]
 8015aa8:	b29b      	uxth	r3, r3
 8015aaa:	4619      	mov	r1, r3
 8015aac:	693b      	ldr	r3, [r7, #16]
 8015aae:	791b      	ldrb	r3, [r3, #4]
 8015ab0:	461a      	mov	r2, r3
 8015ab2:	693b      	ldr	r3, [r7, #16]
 8015ab4:	885b      	ldrh	r3, [r3, #2]
 8015ab6:	b29b      	uxth	r3, r3
 8015ab8:	4618      	mov	r0, r3
 8015aba:	693b      	ldr	r3, [r7, #16]
 8015abc:	795b      	ldrb	r3, [r3, #5]
 8015abe:	9300      	str	r3, [sp, #0]
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	484d      	ldr	r0, [pc, #308]	@ (8015bf8 <etharp_input+0x1a0>)
 8015ac4:	f003 fdce 	bl	8019664 <iprintf>
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 8015ac8:	4b4c      	ldr	r3, [pc, #304]	@ (8015bfc <etharp_input+0x1a4>)
 8015aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015acc:	3301      	adds	r3, #1
 8015ace:	b29a      	uxth	r2, r3
 8015ad0:	4b4a      	ldr	r3, [pc, #296]	@ (8015bfc <etharp_input+0x1a4>)
 8015ad2:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 8015ad4:	4b49      	ldr	r3, [pc, #292]	@ (8015bfc <etharp_input+0x1a4>)
 8015ad6:	8bdb      	ldrh	r3, [r3, #30]
 8015ad8:	3301      	adds	r3, #1
 8015ada:	b29a      	uxth	r2, r3
 8015adc:	4b47      	ldr	r3, [pc, #284]	@ (8015bfc <etharp_input+0x1a4>)
 8015ade:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 8015ae0:	6878      	ldr	r0, [r7, #4]
 8015ae2:	f7f9 fa5f 	bl	800efa4 <pbuf_free>
    return;
 8015ae6:	e07e      	b.n	8015be6 <etharp_input+0x18e>
  }
  ETHARP_STATS_INC(etharp.recv);
 8015ae8:	4b44      	ldr	r3, [pc, #272]	@ (8015bfc <etharp_input+0x1a4>)
 8015aea:	8b5b      	ldrh	r3, [r3, #26]
 8015aec:	3301      	adds	r3, #1
 8015aee:	b29a      	uxth	r2, r3
 8015af0:	4b42      	ldr	r3, [pc, #264]	@ (8015bfc <etharp_input+0x1a4>)
 8015af2:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015af4:	693b      	ldr	r3, [r7, #16]
 8015af6:	330e      	adds	r3, #14
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015afc:	693b      	ldr	r3, [r7, #16]
 8015afe:	3318      	adds	r3, #24
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	3304      	adds	r3, #4
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d102      	bne.n	8015b14 <etharp_input+0xbc>
    for_us = 0;
 8015b0e:	2300      	movs	r3, #0
 8015b10:	75fb      	strb	r3, [r7, #23]
 8015b12:	e009      	b.n	8015b28 <etharp_input+0xd0>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015b14:	68ba      	ldr	r2, [r7, #8]
 8015b16:	683b      	ldr	r3, [r7, #0]
 8015b18:	3304      	adds	r3, #4
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	429a      	cmp	r2, r3
 8015b1e:	bf0c      	ite	eq
 8015b20:	2301      	moveq	r3, #1
 8015b22:	2300      	movne	r3, #0
 8015b24:	b2db      	uxtb	r3, r3
 8015b26:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015b28:	693b      	ldr	r3, [r7, #16]
 8015b2a:	f103 0208 	add.w	r2, r3, #8
 8015b2e:	7dfb      	ldrb	r3, [r7, #23]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d001      	beq.n	8015b38 <etharp_input+0xe0>
 8015b34:	2301      	movs	r3, #1
 8015b36:	e000      	b.n	8015b3a <etharp_input+0xe2>
 8015b38:	2302      	movs	r3, #2
 8015b3a:	f107 010c 	add.w	r1, r7, #12
 8015b3e:	6838      	ldr	r0, [r7, #0]
 8015b40:	f7ff fe76 	bl	8015830 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015b44:	693b      	ldr	r3, [r7, #16]
 8015b46:	88db      	ldrh	r3, [r3, #6]
 8015b48:	b29b      	uxth	r3, r3
 8015b4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015b4e:	d003      	beq.n	8015b58 <etharp_input+0x100>
 8015b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015b54:	d02e      	beq.n	8015bb4 <etharp_input+0x15c>
 8015b56:	e031      	b.n	8015bbc <etharp_input+0x164>
    case PP_HTONS(ARP_REQUEST):
      /* ARP request. If it asked for our address, we send out a
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
 8015b58:	4829      	ldr	r0, [pc, #164]	@ (8015c00 <etharp_input+0x1a8>)
 8015b5a:	f003 fdf3 	bl	8019744 <puts>
      /* ARP request for our address? */
      if (for_us) {
 8015b5e:	7dfb      	ldrb	r3, [r7, #23]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d01a      	beq.n	8015b9a <etharp_input+0x142>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015b64:	683b      	ldr	r3, [r7, #0]
 8015b66:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8015b6a:	693b      	ldr	r3, [r7, #16]
 8015b6c:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015b70:	683b      	ldr	r3, [r7, #0]
 8015b72:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8015b76:	683b      	ldr	r3, [r7, #0]
 8015b78:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015b7a:	693a      	ldr	r2, [r7, #16]
 8015b7c:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015b7e:	2102      	movs	r1, #2
 8015b80:	9103      	str	r1, [sp, #12]
 8015b82:	f107 010c 	add.w	r1, r7, #12
 8015b86:	9102      	str	r1, [sp, #8]
 8015b88:	9201      	str	r2, [sp, #4]
 8015b8a:	9300      	str	r3, [sp, #0]
 8015b8c:	462b      	mov	r3, r5
 8015b8e:	4622      	mov	r2, r4
 8015b90:	4601      	mov	r1, r0
 8015b92:	6838      	ldr	r0, [r7, #0]
 8015b94:	f000 fb56 	bl	8016244 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 8015b98:	e022      	b.n	8015be0 <etharp_input+0x188>
      } else if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015b9a:	683b      	ldr	r3, [r7, #0]
 8015b9c:	3304      	adds	r3, #4
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d103      	bne.n	8015bac <etharp_input+0x154>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: we are unconfigured, ARP request ignored.\n"));
 8015ba4:	4817      	ldr	r0, [pc, #92]	@ (8015c04 <etharp_input+0x1ac>)
 8015ba6:	f003 fdcd 	bl	8019744 <puts>
      break;
 8015baa:	e019      	b.n	8015be0 <etharp_input+0x188>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
 8015bac:	4816      	ldr	r0, [pc, #88]	@ (8015c08 <etharp_input+0x1b0>)
 8015bae:	f003 fdc9 	bl	8019744 <puts>
      break;
 8015bb2:	e015      	b.n	8015be0 <etharp_input+0x188>
    case PP_HTONS(ARP_REPLY):
      /* ARP reply. We already updated the ARP cache earlier. */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP reply\n"));
 8015bb4:	4815      	ldr	r0, [pc, #84]	@ (8015c0c <etharp_input+0x1b4>)
 8015bb6:	f003 fdc5 	bl	8019744 <puts>
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 8015bba:	e011      	b.n	8015be0 <etharp_input+0x188>
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
 8015bbc:	693b      	ldr	r3, [r7, #16]
 8015bbe:	88db      	ldrh	r3, [r3, #6]
 8015bc0:	b29b      	uxth	r3, r3
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f7f7 fb52 	bl	800d26c <lwip_htons>
 8015bc8:	4603      	mov	r3, r0
 8015bca:	4619      	mov	r1, r3
 8015bcc:	4810      	ldr	r0, [pc, #64]	@ (8015c10 <etharp_input+0x1b8>)
 8015bce:	f003 fd49 	bl	8019664 <iprintf>
      ETHARP_STATS_INC(etharp.err);
 8015bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8015bfc <etharp_input+0x1a4>)
 8015bd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8015bd6:	3301      	adds	r3, #1
 8015bd8:	b29a      	uxth	r2, r3
 8015bda:	4b08      	ldr	r3, [pc, #32]	@ (8015bfc <etharp_input+0x1a4>)
 8015bdc:	859a      	strh	r2, [r3, #44]	@ 0x2c
      break;
 8015bde:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015be0:	6878      	ldr	r0, [r7, #4]
 8015be2:	f7f9 f9df 	bl	800efa4 <pbuf_free>
}
 8015be6:	3718      	adds	r7, #24
 8015be8:	46bd      	mov	sp, r7
 8015bea:	bdb0      	pop	{r4, r5, r7, pc}
 8015bec:	0801dfe4 	.word	0x0801dfe4
 8015bf0:	0801e3ac 	.word	0x0801e3ac
 8015bf4:	0801e05c 	.word	0x0801e05c
 8015bf8:	0801e3cc 	.word	0x0801e3cc
 8015bfc:	2000ea4c 	.word	0x2000ea4c
 8015c00:	0801e434 	.word	0x0801e434
 8015c04:	0801e458 	.word	0x0801e458
 8015c08:	0801e490 	.word	0x0801e490
 8015c0c:	0801e4bc 	.word	0x0801e4bc
 8015c10:	0801e4e0 	.word	0x0801e4e0

08015c14 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b086      	sub	sp, #24
 8015c18:	af02      	add	r7, sp, #8
 8015c1a:	60f8      	str	r0, [r7, #12]
 8015c1c:	60b9      	str	r1, [r7, #8]
 8015c1e:	4613      	mov	r3, r2
 8015c20:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015c22:	79fa      	ldrb	r2, [r7, #7]
 8015c24:	4944      	ldr	r1, [pc, #272]	@ (8015d38 <etharp_output_to_arp_index+0x124>)
 8015c26:	4613      	mov	r3, r2
 8015c28:	005b      	lsls	r3, r3, #1
 8015c2a:	4413      	add	r3, r2
 8015c2c:	00db      	lsls	r3, r3, #3
 8015c2e:	440b      	add	r3, r1
 8015c30:	3314      	adds	r3, #20
 8015c32:	781b      	ldrb	r3, [r3, #0]
 8015c34:	2b01      	cmp	r3, #1
 8015c36:	d806      	bhi.n	8015c46 <etharp_output_to_arp_index+0x32>
 8015c38:	4b40      	ldr	r3, [pc, #256]	@ (8015d3c <etharp_output_to_arp_index+0x128>)
 8015c3a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8015c3e:	4940      	ldr	r1, [pc, #256]	@ (8015d40 <etharp_output_to_arp_index+0x12c>)
 8015c40:	4840      	ldr	r0, [pc, #256]	@ (8015d44 <etharp_output_to_arp_index+0x130>)
 8015c42:	f003 fd0f 	bl	8019664 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015c46:	79fa      	ldrb	r2, [r7, #7]
 8015c48:	493b      	ldr	r1, [pc, #236]	@ (8015d38 <etharp_output_to_arp_index+0x124>)
 8015c4a:	4613      	mov	r3, r2
 8015c4c:	005b      	lsls	r3, r3, #1
 8015c4e:	4413      	add	r3, r2
 8015c50:	00db      	lsls	r3, r3, #3
 8015c52:	440b      	add	r3, r1
 8015c54:	3314      	adds	r3, #20
 8015c56:	781b      	ldrb	r3, [r3, #0]
 8015c58:	2b02      	cmp	r3, #2
 8015c5a:	d153      	bne.n	8015d04 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015c5c:	79fa      	ldrb	r2, [r7, #7]
 8015c5e:	4936      	ldr	r1, [pc, #216]	@ (8015d38 <etharp_output_to_arp_index+0x124>)
 8015c60:	4613      	mov	r3, r2
 8015c62:	005b      	lsls	r3, r3, #1
 8015c64:	4413      	add	r3, r2
 8015c66:	00db      	lsls	r3, r3, #3
 8015c68:	440b      	add	r3, r1
 8015c6a:	3312      	adds	r3, #18
 8015c6c:	881b      	ldrh	r3, [r3, #0]
 8015c6e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8015c72:	d919      	bls.n	8015ca8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015c74:	79fa      	ldrb	r2, [r7, #7]
 8015c76:	4613      	mov	r3, r2
 8015c78:	005b      	lsls	r3, r3, #1
 8015c7a:	4413      	add	r3, r2
 8015c7c:	00db      	lsls	r3, r3, #3
 8015c7e:	4a2e      	ldr	r2, [pc, #184]	@ (8015d38 <etharp_output_to_arp_index+0x124>)
 8015c80:	4413      	add	r3, r2
 8015c82:	3304      	adds	r3, #4
 8015c84:	4619      	mov	r1, r3
 8015c86:	68f8      	ldr	r0, [r7, #12]
 8015c88:	f000 fba2 	bl	80163d0 <etharp_request>
 8015c8c:	4603      	mov	r3, r0
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d138      	bne.n	8015d04 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015c92:	79fa      	ldrb	r2, [r7, #7]
 8015c94:	4928      	ldr	r1, [pc, #160]	@ (8015d38 <etharp_output_to_arp_index+0x124>)
 8015c96:	4613      	mov	r3, r2
 8015c98:	005b      	lsls	r3, r3, #1
 8015c9a:	4413      	add	r3, r2
 8015c9c:	00db      	lsls	r3, r3, #3
 8015c9e:	440b      	add	r3, r1
 8015ca0:	3314      	adds	r3, #20
 8015ca2:	2203      	movs	r2, #3
 8015ca4:	701a      	strb	r2, [r3, #0]
 8015ca6:	e02d      	b.n	8015d04 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015ca8:	79fa      	ldrb	r2, [r7, #7]
 8015caa:	4923      	ldr	r1, [pc, #140]	@ (8015d38 <etharp_output_to_arp_index+0x124>)
 8015cac:	4613      	mov	r3, r2
 8015cae:	005b      	lsls	r3, r3, #1
 8015cb0:	4413      	add	r3, r2
 8015cb2:	00db      	lsls	r3, r3, #3
 8015cb4:	440b      	add	r3, r1
 8015cb6:	3312      	adds	r3, #18
 8015cb8:	881b      	ldrh	r3, [r3, #0]
 8015cba:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8015cbe:	d321      	bcc.n	8015d04 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015cc0:	79fa      	ldrb	r2, [r7, #7]
 8015cc2:	4613      	mov	r3, r2
 8015cc4:	005b      	lsls	r3, r3, #1
 8015cc6:	4413      	add	r3, r2
 8015cc8:	00db      	lsls	r3, r3, #3
 8015cca:	4a1b      	ldr	r2, [pc, #108]	@ (8015d38 <etharp_output_to_arp_index+0x124>)
 8015ccc:	4413      	add	r3, r2
 8015cce:	1d19      	adds	r1, r3, #4
 8015cd0:	79fa      	ldrb	r2, [r7, #7]
 8015cd2:	4613      	mov	r3, r2
 8015cd4:	005b      	lsls	r3, r3, #1
 8015cd6:	4413      	add	r3, r2
 8015cd8:	00db      	lsls	r3, r3, #3
 8015cda:	3308      	adds	r3, #8
 8015cdc:	4a16      	ldr	r2, [pc, #88]	@ (8015d38 <etharp_output_to_arp_index+0x124>)
 8015cde:	4413      	add	r3, r2
 8015ce0:	3304      	adds	r3, #4
 8015ce2:	461a      	mov	r2, r3
 8015ce4:	68f8      	ldr	r0, [r7, #12]
 8015ce6:	f000 fb51 	bl	801638c <etharp_request_dst>
 8015cea:	4603      	mov	r3, r0
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d109      	bne.n	8015d04 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015cf0:	79fa      	ldrb	r2, [r7, #7]
 8015cf2:	4911      	ldr	r1, [pc, #68]	@ (8015d38 <etharp_output_to_arp_index+0x124>)
 8015cf4:	4613      	mov	r3, r2
 8015cf6:	005b      	lsls	r3, r3, #1
 8015cf8:	4413      	add	r3, r2
 8015cfa:	00db      	lsls	r3, r3, #3
 8015cfc:	440b      	add	r3, r1
 8015cfe:	3314      	adds	r3, #20
 8015d00:	2203      	movs	r2, #3
 8015d02:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8015d0a:	79fa      	ldrb	r2, [r7, #7]
 8015d0c:	4613      	mov	r3, r2
 8015d0e:	005b      	lsls	r3, r3, #1
 8015d10:	4413      	add	r3, r2
 8015d12:	00db      	lsls	r3, r3, #3
 8015d14:	3308      	adds	r3, #8
 8015d16:	4a08      	ldr	r2, [pc, #32]	@ (8015d38 <etharp_output_to_arp_index+0x124>)
 8015d18:	4413      	add	r3, r2
 8015d1a:	3304      	adds	r3, #4
 8015d1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015d20:	9200      	str	r2, [sp, #0]
 8015d22:	460a      	mov	r2, r1
 8015d24:	68b9      	ldr	r1, [r7, #8]
 8015d26:	68f8      	ldr	r0, [r7, #12]
 8015d28:	f002 fcce 	bl	80186c8 <ethernet_output>
 8015d2c:	4603      	mov	r3, r0
}
 8015d2e:	4618      	mov	r0, r3
 8015d30:	3710      	adds	r7, #16
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bd80      	pop	{r7, pc}
 8015d36:	bf00      	nop
 8015d38:	2000ebd0 	.word	0x2000ebd0
 8015d3c:	0801dfe4 	.word	0x0801dfe4
 8015d40:	0801e50c 	.word	0x0801e50c
 8015d44:	0801e05c 	.word	0x0801e05c

08015d48 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b08a      	sub	sp, #40	@ 0x28
 8015d4c:	af02      	add	r7, sp, #8
 8015d4e:	60f8      	str	r0, [r7, #12]
 8015d50:	60b9      	str	r1, [r7, #8]
 8015d52:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d106      	bne.n	8015d6c <etharp_output+0x24>
 8015d5e:	4b76      	ldr	r3, [pc, #472]	@ (8015f38 <etharp_output+0x1f0>)
 8015d60:	f240 321e 	movw	r2, #798	@ 0x31e
 8015d64:	4975      	ldr	r1, [pc, #468]	@ (8015f3c <etharp_output+0x1f4>)
 8015d66:	4876      	ldr	r0, [pc, #472]	@ (8015f40 <etharp_output+0x1f8>)
 8015d68:	f003 fc7c 	bl	8019664 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015d6c:	68bb      	ldr	r3, [r7, #8]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d106      	bne.n	8015d80 <etharp_output+0x38>
 8015d72:	4b71      	ldr	r3, [pc, #452]	@ (8015f38 <etharp_output+0x1f0>)
 8015d74:	f240 321f 	movw	r2, #799	@ 0x31f
 8015d78:	4972      	ldr	r1, [pc, #456]	@ (8015f44 <etharp_output+0x1fc>)
 8015d7a:	4871      	ldr	r0, [pc, #452]	@ (8015f40 <etharp_output+0x1f8>)
 8015d7c:	f003 fc72 	bl	8019664 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d106      	bne.n	8015d94 <etharp_output+0x4c>
 8015d86:	4b6c      	ldr	r3, [pc, #432]	@ (8015f38 <etharp_output+0x1f0>)
 8015d88:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8015d8c:	496e      	ldr	r1, [pc, #440]	@ (8015f48 <etharp_output+0x200>)
 8015d8e:	486c      	ldr	r0, [pc, #432]	@ (8015f40 <etharp_output+0x1f8>)
 8015d90:	f003 fc68 	bl	8019664 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	68f9      	ldr	r1, [r7, #12]
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	f001 fcc2 	bl	8017724 <ip4_addr_isbroadcast_u32>
 8015da0:	4603      	mov	r3, r0
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d002      	beq.n	8015dac <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015da6:	4b69      	ldr	r3, [pc, #420]	@ (8015f4c <etharp_output+0x204>)
 8015da8:	61fb      	str	r3, [r7, #28]
 8015daa:	e0b5      	b.n	8015f18 <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015db4:	2be0      	cmp	r3, #224	@ 0xe0
 8015db6:	d118      	bne.n	8015dea <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015db8:	2301      	movs	r3, #1
 8015dba:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015dc0:	235e      	movs	r3, #94	@ 0x5e
 8015dc2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	3301      	adds	r3, #1
 8015dc8:	781b      	ldrb	r3, [r3, #0]
 8015dca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015dce:	b2db      	uxtb	r3, r3
 8015dd0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	3302      	adds	r3, #2
 8015dd6:	781b      	ldrb	r3, [r3, #0]
 8015dd8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	3303      	adds	r3, #3
 8015dde:	781b      	ldrb	r3, [r3, #0]
 8015de0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015de2:	f107 0310 	add.w	r3, r7, #16
 8015de6:	61fb      	str	r3, [r7, #28]
 8015de8:	e096      	b.n	8015f18 <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681a      	ldr	r2, [r3, #0]
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	3304      	adds	r3, #4
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	405a      	eors	r2, r3
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	3308      	adds	r3, #8
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	4013      	ands	r3, r2
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d012      	beq.n	8015e28 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015e08:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8015e0c:	4293      	cmp	r3, r2
 8015e0e:	d00b      	beq.n	8015e28 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	330c      	adds	r3, #12
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d003      	beq.n	8015e22 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	330c      	adds	r3, #12
 8015e1e:	61bb      	str	r3, [r7, #24]
 8015e20:	e002      	b.n	8015e28 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015e22:	f06f 0303 	mvn.w	r3, #3
 8015e26:	e083      	b.n	8015f30 <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015e28:	4b49      	ldr	r3, [pc, #292]	@ (8015f50 <etharp_output+0x208>)
 8015e2a:	781b      	ldrb	r3, [r3, #0]
 8015e2c:	4619      	mov	r1, r3
 8015e2e:	4a49      	ldr	r2, [pc, #292]	@ (8015f54 <etharp_output+0x20c>)
 8015e30:	460b      	mov	r3, r1
 8015e32:	005b      	lsls	r3, r3, #1
 8015e34:	440b      	add	r3, r1
 8015e36:	00db      	lsls	r3, r3, #3
 8015e38:	4413      	add	r3, r2
 8015e3a:	3314      	adds	r3, #20
 8015e3c:	781b      	ldrb	r3, [r3, #0]
 8015e3e:	2b01      	cmp	r3, #1
 8015e40:	d92b      	bls.n	8015e9a <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015e42:	4b43      	ldr	r3, [pc, #268]	@ (8015f50 <etharp_output+0x208>)
 8015e44:	781b      	ldrb	r3, [r3, #0]
 8015e46:	4619      	mov	r1, r3
 8015e48:	4a42      	ldr	r2, [pc, #264]	@ (8015f54 <etharp_output+0x20c>)
 8015e4a:	460b      	mov	r3, r1
 8015e4c:	005b      	lsls	r3, r3, #1
 8015e4e:	440b      	add	r3, r1
 8015e50:	00db      	lsls	r3, r3, #3
 8015e52:	4413      	add	r3, r2
 8015e54:	3308      	adds	r3, #8
 8015e56:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015e58:	68fa      	ldr	r2, [r7, #12]
 8015e5a:	429a      	cmp	r2, r3
 8015e5c:	d11d      	bne.n	8015e9a <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015e5e:	69bb      	ldr	r3, [r7, #24]
 8015e60:	681a      	ldr	r2, [r3, #0]
 8015e62:	4b3b      	ldr	r3, [pc, #236]	@ (8015f50 <etharp_output+0x208>)
 8015e64:	781b      	ldrb	r3, [r3, #0]
 8015e66:	4618      	mov	r0, r3
 8015e68:	493a      	ldr	r1, [pc, #232]	@ (8015f54 <etharp_output+0x20c>)
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	005b      	lsls	r3, r3, #1
 8015e6e:	4403      	add	r3, r0
 8015e70:	00db      	lsls	r3, r3, #3
 8015e72:	440b      	add	r3, r1
 8015e74:	3304      	adds	r3, #4
 8015e76:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015e78:	429a      	cmp	r2, r3
 8015e7a:	d10e      	bne.n	8015e9a <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 8015e7c:	4b36      	ldr	r3, [pc, #216]	@ (8015f58 <etharp_output+0x210>)
 8015e7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8015e80:	3301      	adds	r3, #1
 8015e82:	b29a      	uxth	r2, r3
 8015e84:	4b34      	ldr	r3, [pc, #208]	@ (8015f58 <etharp_output+0x210>)
 8015e86:	85da      	strh	r2, [r3, #46]	@ 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015e88:	4b31      	ldr	r3, [pc, #196]	@ (8015f50 <etharp_output+0x208>)
 8015e8a:	781b      	ldrb	r3, [r3, #0]
 8015e8c:	461a      	mov	r2, r3
 8015e8e:	68b9      	ldr	r1, [r7, #8]
 8015e90:	68f8      	ldr	r0, [r7, #12]
 8015e92:	f7ff febf 	bl	8015c14 <etharp_output_to_arp_index>
 8015e96:	4603      	mov	r3, r0
 8015e98:	e04a      	b.n	8015f30 <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	75fb      	strb	r3, [r7, #23]
 8015e9e:	e031      	b.n	8015f04 <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015ea0:	7dfa      	ldrb	r2, [r7, #23]
 8015ea2:	492c      	ldr	r1, [pc, #176]	@ (8015f54 <etharp_output+0x20c>)
 8015ea4:	4613      	mov	r3, r2
 8015ea6:	005b      	lsls	r3, r3, #1
 8015ea8:	4413      	add	r3, r2
 8015eaa:	00db      	lsls	r3, r3, #3
 8015eac:	440b      	add	r3, r1
 8015eae:	3314      	adds	r3, #20
 8015eb0:	781b      	ldrb	r3, [r3, #0]
 8015eb2:	2b01      	cmp	r3, #1
 8015eb4:	d923      	bls.n	8015efe <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015eb6:	7dfa      	ldrb	r2, [r7, #23]
 8015eb8:	4926      	ldr	r1, [pc, #152]	@ (8015f54 <etharp_output+0x20c>)
 8015eba:	4613      	mov	r3, r2
 8015ebc:	005b      	lsls	r3, r3, #1
 8015ebe:	4413      	add	r3, r2
 8015ec0:	00db      	lsls	r3, r3, #3
 8015ec2:	440b      	add	r3, r1
 8015ec4:	3308      	adds	r3, #8
 8015ec6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015ec8:	68fa      	ldr	r2, [r7, #12]
 8015eca:	429a      	cmp	r2, r3
 8015ecc:	d117      	bne.n	8015efe <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015ece:	69bb      	ldr	r3, [r7, #24]
 8015ed0:	6819      	ldr	r1, [r3, #0]
 8015ed2:	7dfa      	ldrb	r2, [r7, #23]
 8015ed4:	481f      	ldr	r0, [pc, #124]	@ (8015f54 <etharp_output+0x20c>)
 8015ed6:	4613      	mov	r3, r2
 8015ed8:	005b      	lsls	r3, r3, #1
 8015eda:	4413      	add	r3, r2
 8015edc:	00db      	lsls	r3, r3, #3
 8015ede:	4403      	add	r3, r0
 8015ee0:	3304      	adds	r3, #4
 8015ee2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015ee4:	4299      	cmp	r1, r3
 8015ee6:	d10a      	bne.n	8015efe <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015ee8:	4a19      	ldr	r2, [pc, #100]	@ (8015f50 <etharp_output+0x208>)
 8015eea:	7dfb      	ldrb	r3, [r7, #23]
 8015eec:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015eee:	7dfb      	ldrb	r3, [r7, #23]
 8015ef0:	461a      	mov	r2, r3
 8015ef2:	68b9      	ldr	r1, [r7, #8]
 8015ef4:	68f8      	ldr	r0, [r7, #12]
 8015ef6:	f7ff fe8d 	bl	8015c14 <etharp_output_to_arp_index>
 8015efa:	4603      	mov	r3, r0
 8015efc:	e018      	b.n	8015f30 <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015efe:	7dfb      	ldrb	r3, [r7, #23]
 8015f00:	3301      	adds	r3, #1
 8015f02:	75fb      	strb	r3, [r7, #23]
 8015f04:	7dfb      	ldrb	r3, [r7, #23]
 8015f06:	2b09      	cmp	r3, #9
 8015f08:	d9ca      	bls.n	8015ea0 <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015f0a:	68ba      	ldr	r2, [r7, #8]
 8015f0c:	69b9      	ldr	r1, [r7, #24]
 8015f0e:	68f8      	ldr	r0, [r7, #12]
 8015f10:	f000 f824 	bl	8015f5c <etharp_query>
 8015f14:	4603      	mov	r3, r0
 8015f16:	e00b      	b.n	8015f30 <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8015f1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015f22:	9300      	str	r3, [sp, #0]
 8015f24:	69fb      	ldr	r3, [r7, #28]
 8015f26:	68b9      	ldr	r1, [r7, #8]
 8015f28:	68f8      	ldr	r0, [r7, #12]
 8015f2a:	f002 fbcd 	bl	80186c8 <ethernet_output>
 8015f2e:	4603      	mov	r3, r0
}
 8015f30:	4618      	mov	r0, r3
 8015f32:	3720      	adds	r7, #32
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd80      	pop	{r7, pc}
 8015f38:	0801dfe4 	.word	0x0801dfe4
 8015f3c:	0801e3ac 	.word	0x0801e3ac
 8015f40:	0801e05c 	.word	0x0801e05c
 8015f44:	0801e53c 	.word	0x0801e53c
 8015f48:	0801e39c 	.word	0x0801e39c
 8015f4c:	0801f31c 	.word	0x0801f31c
 8015f50:	2000ecc0 	.word	0x2000ecc0
 8015f54:	2000ebd0 	.word	0x2000ebd0
 8015f58:	2000ea4c 	.word	0x2000ea4c

08015f5c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b08c      	sub	sp, #48	@ 0x30
 8015f60:	af02      	add	r7, sp, #8
 8015f62:	60f8      	str	r0, [r7, #12]
 8015f64:	60b9      	str	r1, [r7, #8]
 8015f66:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	332a      	adds	r3, #42	@ 0x2a
 8015f6c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015f6e:	23ff      	movs	r3, #255	@ 0xff
 8015f70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8015f74:	2300      	movs	r3, #0
 8015f76:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015f78:	68bb      	ldr	r3, [r7, #8]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	68f9      	ldr	r1, [r7, #12]
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f001 fbd0 	bl	8017724 <ip4_addr_isbroadcast_u32>
 8015f84:	4603      	mov	r3, r0
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d10c      	bne.n	8015fa4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015f8a:	68bb      	ldr	r3, [r7, #8]
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015f92:	2be0      	cmp	r3, #224	@ 0xe0
 8015f94:	d006      	beq.n	8015fa4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015f96:	68bb      	ldr	r3, [r7, #8]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d003      	beq.n	8015fa4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015f9c:	68bb      	ldr	r3, [r7, #8]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d105      	bne.n	8015fb0 <etharp_query+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
 8015fa4:	4898      	ldr	r0, [pc, #608]	@ (8016208 <etharp_query+0x2ac>)
 8015fa6:	f003 fbcd 	bl	8019744 <puts>
    return ERR_ARG;
 8015faa:	f06f 030f 	mvn.w	r3, #15
 8015fae:	e126      	b.n	80161fe <etharp_query+0x2a2>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015fb0:	68fa      	ldr	r2, [r7, #12]
 8015fb2:	2101      	movs	r1, #1
 8015fb4:	68b8      	ldr	r0, [r7, #8]
 8015fb6:	f7ff fa79 	bl	80154ac <etharp_find_entry>
 8015fba:	4603      	mov	r3, r0
 8015fbc:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015fbe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	da11      	bge.n	8015fea <etharp_query+0x8e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
 8015fc6:	4891      	ldr	r0, [pc, #580]	@ (801620c <etharp_query+0x2b0>)
 8015fc8:	f003 fbbc 	bl	8019744 <puts>
    if (q) {
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d008      	beq.n	8015fe4 <etharp_query+0x88>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
 8015fd2:	488f      	ldr	r0, [pc, #572]	@ (8016210 <etharp_query+0x2b4>)
 8015fd4:	f003 fbb6 	bl	8019744 <puts>
      ETHARP_STATS_INC(etharp.memerr);
 8015fd8:	4b8e      	ldr	r3, [pc, #568]	@ (8016214 <etharp_query+0x2b8>)
 8015fda:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015fdc:	3301      	adds	r3, #1
 8015fde:	b29a      	uxth	r2, r3
 8015fe0:	4b8c      	ldr	r3, [pc, #560]	@ (8016214 <etharp_query+0x2b8>)
 8015fe2:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    return (err_t)i_err;
 8015fe4:	8a7b      	ldrh	r3, [r7, #18]
 8015fe6:	b25b      	sxtb	r3, r3
 8015fe8:	e109      	b.n	80161fe <etharp_query+0x2a2>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015fea:	8a7b      	ldrh	r3, [r7, #18]
 8015fec:	2b7e      	cmp	r3, #126	@ 0x7e
 8015fee:	d906      	bls.n	8015ffe <etharp_query+0xa2>
 8015ff0:	4b89      	ldr	r3, [pc, #548]	@ (8016218 <etharp_query+0x2bc>)
 8015ff2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8015ff6:	4989      	ldr	r1, [pc, #548]	@ (801621c <etharp_query+0x2c0>)
 8015ff8:	4889      	ldr	r0, [pc, #548]	@ (8016220 <etharp_query+0x2c4>)
 8015ffa:	f003 fb33 	bl	8019664 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015ffe:	8a7b      	ldrh	r3, [r7, #18]
 8016000:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016002:	7c7a      	ldrb	r2, [r7, #17]
 8016004:	4987      	ldr	r1, [pc, #540]	@ (8016224 <etharp_query+0x2c8>)
 8016006:	4613      	mov	r3, r2
 8016008:	005b      	lsls	r3, r3, #1
 801600a:	4413      	add	r3, r2
 801600c:	00db      	lsls	r3, r3, #3
 801600e:	440b      	add	r3, r1
 8016010:	3314      	adds	r3, #20
 8016012:	781b      	ldrb	r3, [r3, #0]
 8016014:	2b00      	cmp	r3, #0
 8016016:	d115      	bne.n	8016044 <etharp_query+0xe8>
    is_new_entry = 1;
 8016018:	2301      	movs	r3, #1
 801601a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801601c:	7c7a      	ldrb	r2, [r7, #17]
 801601e:	4981      	ldr	r1, [pc, #516]	@ (8016224 <etharp_query+0x2c8>)
 8016020:	4613      	mov	r3, r2
 8016022:	005b      	lsls	r3, r3, #1
 8016024:	4413      	add	r3, r2
 8016026:	00db      	lsls	r3, r3, #3
 8016028:	440b      	add	r3, r1
 801602a:	3314      	adds	r3, #20
 801602c:	2201      	movs	r2, #1
 801602e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016030:	7c7a      	ldrb	r2, [r7, #17]
 8016032:	497c      	ldr	r1, [pc, #496]	@ (8016224 <etharp_query+0x2c8>)
 8016034:	4613      	mov	r3, r2
 8016036:	005b      	lsls	r3, r3, #1
 8016038:	4413      	add	r3, r2
 801603a:	00db      	lsls	r3, r3, #3
 801603c:	440b      	add	r3, r1
 801603e:	3308      	adds	r3, #8
 8016040:	68fa      	ldr	r2, [r7, #12]
 8016042:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016044:	7c7a      	ldrb	r2, [r7, #17]
 8016046:	4977      	ldr	r1, [pc, #476]	@ (8016224 <etharp_query+0x2c8>)
 8016048:	4613      	mov	r3, r2
 801604a:	005b      	lsls	r3, r3, #1
 801604c:	4413      	add	r3, r2
 801604e:	00db      	lsls	r3, r3, #3
 8016050:	440b      	add	r3, r1
 8016052:	3314      	adds	r3, #20
 8016054:	781b      	ldrb	r3, [r3, #0]
 8016056:	2b01      	cmp	r3, #1
 8016058:	d011      	beq.n	801607e <etharp_query+0x122>
 801605a:	7c7a      	ldrb	r2, [r7, #17]
 801605c:	4971      	ldr	r1, [pc, #452]	@ (8016224 <etharp_query+0x2c8>)
 801605e:	4613      	mov	r3, r2
 8016060:	005b      	lsls	r3, r3, #1
 8016062:	4413      	add	r3, r2
 8016064:	00db      	lsls	r3, r3, #3
 8016066:	440b      	add	r3, r1
 8016068:	3314      	adds	r3, #20
 801606a:	781b      	ldrb	r3, [r3, #0]
 801606c:	2b01      	cmp	r3, #1
 801606e:	d806      	bhi.n	801607e <etharp_query+0x122>
 8016070:	4b69      	ldr	r3, [pc, #420]	@ (8016218 <etharp_query+0x2bc>)
 8016072:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8016076:	496c      	ldr	r1, [pc, #432]	@ (8016228 <etharp_query+0x2cc>)
 8016078:	4869      	ldr	r0, [pc, #420]	@ (8016220 <etharp_query+0x2c4>)
 801607a:	f003 faf3 	bl	8019664 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801607e:	6a3b      	ldr	r3, [r7, #32]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d102      	bne.n	801608a <etharp_query+0x12e>
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d10c      	bne.n	80160a4 <etharp_query+0x148>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801608a:	68b9      	ldr	r1, [r7, #8]
 801608c:	68f8      	ldr	r0, [r7, #12]
 801608e:	f000 f99f 	bl	80163d0 <etharp_request>
 8016092:	4603      	mov	r3, r0
 8016094:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d102      	bne.n	80160a4 <etharp_query+0x148>
      return result;
 801609e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80160a2:	e0ac      	b.n	80161fe <etharp_query+0x2a2>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d106      	bne.n	80160b8 <etharp_query+0x15c>
 80160aa:	4b5b      	ldr	r3, [pc, #364]	@ (8016218 <etharp_query+0x2bc>)
 80160ac:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80160b0:	495e      	ldr	r1, [pc, #376]	@ (801622c <etharp_query+0x2d0>)
 80160b2:	485b      	ldr	r0, [pc, #364]	@ (8016220 <etharp_query+0x2c4>)
 80160b4:	f003 fad6 	bl	8019664 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80160b8:	7c7a      	ldrb	r2, [r7, #17]
 80160ba:	495a      	ldr	r1, [pc, #360]	@ (8016224 <etharp_query+0x2c8>)
 80160bc:	4613      	mov	r3, r2
 80160be:	005b      	lsls	r3, r3, #1
 80160c0:	4413      	add	r3, r2
 80160c2:	00db      	lsls	r3, r3, #3
 80160c4:	440b      	add	r3, r1
 80160c6:	3314      	adds	r3, #20
 80160c8:	781b      	ldrb	r3, [r3, #0]
 80160ca:	2b01      	cmp	r3, #1
 80160cc:	d917      	bls.n	80160fe <etharp_query+0x1a2>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80160ce:	4a58      	ldr	r2, [pc, #352]	@ (8016230 <etharp_query+0x2d4>)
 80160d0:	7c7b      	ldrb	r3, [r7, #17]
 80160d2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80160d4:	7c7a      	ldrb	r2, [r7, #17]
 80160d6:	4613      	mov	r3, r2
 80160d8:	005b      	lsls	r3, r3, #1
 80160da:	4413      	add	r3, r2
 80160dc:	00db      	lsls	r3, r3, #3
 80160de:	3308      	adds	r3, #8
 80160e0:	4a50      	ldr	r2, [pc, #320]	@ (8016224 <etharp_query+0x2c8>)
 80160e2:	4413      	add	r3, r2
 80160e4:	3304      	adds	r3, #4
 80160e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80160ea:	9200      	str	r2, [sp, #0]
 80160ec:	697a      	ldr	r2, [r7, #20]
 80160ee:	6879      	ldr	r1, [r7, #4]
 80160f0:	68f8      	ldr	r0, [r7, #12]
 80160f2:	f002 fae9 	bl	80186c8 <ethernet_output>
 80160f6:	4603      	mov	r3, r0
 80160f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80160fc:	e07d      	b.n	80161fa <etharp_query+0x29e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80160fe:	7c7a      	ldrb	r2, [r7, #17]
 8016100:	4948      	ldr	r1, [pc, #288]	@ (8016224 <etharp_query+0x2c8>)
 8016102:	4613      	mov	r3, r2
 8016104:	005b      	lsls	r3, r3, #1
 8016106:	4413      	add	r3, r2
 8016108:	00db      	lsls	r3, r3, #3
 801610a:	440b      	add	r3, r1
 801610c:	3314      	adds	r3, #20
 801610e:	781b      	ldrb	r3, [r3, #0]
 8016110:	2b01      	cmp	r3, #1
 8016112:	d172      	bne.n	80161fa <etharp_query+0x29e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016114:	2300      	movs	r3, #0
 8016116:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801611c:	e01c      	b.n	8016158 <etharp_query+0x1fc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801611e:	69fb      	ldr	r3, [r7, #28]
 8016120:	895a      	ldrh	r2, [r3, #10]
 8016122:	69fb      	ldr	r3, [r7, #28]
 8016124:	891b      	ldrh	r3, [r3, #8]
 8016126:	429a      	cmp	r2, r3
 8016128:	d10a      	bne.n	8016140 <etharp_query+0x1e4>
 801612a:	69fb      	ldr	r3, [r7, #28]
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	2b00      	cmp	r3, #0
 8016130:	d006      	beq.n	8016140 <etharp_query+0x1e4>
 8016132:	4b39      	ldr	r3, [pc, #228]	@ (8016218 <etharp_query+0x2bc>)
 8016134:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8016138:	493e      	ldr	r1, [pc, #248]	@ (8016234 <etharp_query+0x2d8>)
 801613a:	4839      	ldr	r0, [pc, #228]	@ (8016220 <etharp_query+0x2c4>)
 801613c:	f003 fa92 	bl	8019664 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016140:	69fb      	ldr	r3, [r7, #28]
 8016142:	7b1b      	ldrb	r3, [r3, #12]
 8016144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016148:	2b00      	cmp	r3, #0
 801614a:	d002      	beq.n	8016152 <etharp_query+0x1f6>
        copy_needed = 1;
 801614c:	2301      	movs	r3, #1
 801614e:	61bb      	str	r3, [r7, #24]
        break;
 8016150:	e005      	b.n	801615e <etharp_query+0x202>
      }
      p = p->next;
 8016152:	69fb      	ldr	r3, [r7, #28]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016158:	69fb      	ldr	r3, [r7, #28]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d1df      	bne.n	801611e <etharp_query+0x1c2>
    }
    if (copy_needed) {
 801615e:	69bb      	ldr	r3, [r7, #24]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d007      	beq.n	8016174 <etharp_query+0x218>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016164:	687a      	ldr	r2, [r7, #4]
 8016166:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801616a:	2010      	movs	r0, #16
 801616c:	f7f9 f982 	bl	800f474 <pbuf_clone>
 8016170:	61f8      	str	r0, [r7, #28]
 8016172:	e004      	b.n	801617e <etharp_query+0x222>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016178:	69f8      	ldr	r0, [r7, #28]
 801617a:	f7f8 ffb9 	bl	800f0f0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801617e:	69fb      	ldr	r3, [r7, #28]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d02d      	beq.n	80161e0 <etharp_query+0x284>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016184:	7c7a      	ldrb	r2, [r7, #17]
 8016186:	4927      	ldr	r1, [pc, #156]	@ (8016224 <etharp_query+0x2c8>)
 8016188:	4613      	mov	r3, r2
 801618a:	005b      	lsls	r3, r3, #1
 801618c:	4413      	add	r3, r2
 801618e:	00db      	lsls	r3, r3, #3
 8016190:	440b      	add	r3, r1
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d010      	beq.n	80161ba <etharp_query+0x25e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8016198:	7c7b      	ldrb	r3, [r7, #17]
 801619a:	461a      	mov	r2, r3
 801619c:	6879      	ldr	r1, [r7, #4]
 801619e:	4826      	ldr	r0, [pc, #152]	@ (8016238 <etharp_query+0x2dc>)
 80161a0:	f003 fa60 	bl	8019664 <iprintf>
        pbuf_free(arp_table[i].q);
 80161a4:	7c7a      	ldrb	r2, [r7, #17]
 80161a6:	491f      	ldr	r1, [pc, #124]	@ (8016224 <etharp_query+0x2c8>)
 80161a8:	4613      	mov	r3, r2
 80161aa:	005b      	lsls	r3, r3, #1
 80161ac:	4413      	add	r3, r2
 80161ae:	00db      	lsls	r3, r3, #3
 80161b0:	440b      	add	r3, r1
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	4618      	mov	r0, r3
 80161b6:	f7f8 fef5 	bl	800efa4 <pbuf_free>
      }
      arp_table[i].q = p;
 80161ba:	7c7a      	ldrb	r2, [r7, #17]
 80161bc:	4919      	ldr	r1, [pc, #100]	@ (8016224 <etharp_query+0x2c8>)
 80161be:	4613      	mov	r3, r2
 80161c0:	005b      	lsls	r3, r3, #1
 80161c2:	4413      	add	r3, r2
 80161c4:	00db      	lsls	r3, r3, #3
 80161c6:	440b      	add	r3, r1
 80161c8:	69fa      	ldr	r2, [r7, #28]
 80161ca:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80161cc:	2300      	movs	r3, #0
 80161ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 80161d2:	7c7b      	ldrb	r3, [r7, #17]
 80161d4:	461a      	mov	r2, r3
 80161d6:	6879      	ldr	r1, [r7, #4]
 80161d8:	4818      	ldr	r0, [pc, #96]	@ (801623c <etharp_query+0x2e0>)
 80161da:	f003 fa43 	bl	8019664 <iprintf>
 80161de:	e00c      	b.n	80161fa <etharp_query+0x29e>
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 80161e0:	4b0c      	ldr	r3, [pc, #48]	@ (8016214 <etharp_query+0x2b8>)
 80161e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80161e4:	3301      	adds	r3, #1
 80161e6:	b29a      	uxth	r2, r3
 80161e8:	4b0a      	ldr	r3, [pc, #40]	@ (8016214 <etharp_query+0x2b8>)
 80161ea:	849a      	strh	r2, [r3, #36]	@ 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
 80161ec:	6879      	ldr	r1, [r7, #4]
 80161ee:	4814      	ldr	r0, [pc, #80]	@ (8016240 <etharp_query+0x2e4>)
 80161f0:	f003 fa38 	bl	8019664 <iprintf>
      result = ERR_MEM;
 80161f4:	23ff      	movs	r3, #255	@ 0xff
 80161f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80161fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80161fe:	4618      	mov	r0, r3
 8016200:	3728      	adds	r7, #40	@ 0x28
 8016202:	46bd      	mov	sp, r7
 8016204:	bd80      	pop	{r7, pc}
 8016206:	bf00      	nop
 8016208:	0801e548 	.word	0x0801e548
 801620c:	0801e588 	.word	0x0801e588
 8016210:	0801e5b4 	.word	0x0801e5b4
 8016214:	2000ea4c 	.word	0x2000ea4c
 8016218:	0801dfe4 	.word	0x0801dfe4
 801621c:	0801e5d4 	.word	0x0801e5d4
 8016220:	0801e05c 	.word	0x0801e05c
 8016224:	2000ebd0 	.word	0x2000ebd0
 8016228:	0801e5e4 	.word	0x0801e5e4
 801622c:	0801e53c 	.word	0x0801e53c
 8016230:	2000ecc0 	.word	0x2000ecc0
 8016234:	0801e60c 	.word	0x0801e60c
 8016238:	0801e628 	.word	0x0801e628
 801623c:	0801e670 	.word	0x0801e670
 8016240:	0801e6a4 	.word	0x0801e6a4

08016244 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016244:	b580      	push	{r7, lr}
 8016246:	b08a      	sub	sp, #40	@ 0x28
 8016248:	af02      	add	r7, sp, #8
 801624a:	60f8      	str	r0, [r7, #12]
 801624c:	60b9      	str	r1, [r7, #8]
 801624e:	607a      	str	r2, [r7, #4]
 8016250:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016252:	2300      	movs	r3, #0
 8016254:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d106      	bne.n	801626a <etharp_raw+0x26>
 801625c:	4b43      	ldr	r3, [pc, #268]	@ (801636c <etharp_raw+0x128>)
 801625e:	f240 4257 	movw	r2, #1111	@ 0x457
 8016262:	4943      	ldr	r1, [pc, #268]	@ (8016370 <etharp_raw+0x12c>)
 8016264:	4843      	ldr	r0, [pc, #268]	@ (8016374 <etharp_raw+0x130>)
 8016266:	f003 f9fd 	bl	8019664 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801626a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801626e:	211c      	movs	r1, #28
 8016270:	2010      	movs	r0, #16
 8016272:	f7f8 fbb3 	bl	800e9dc <pbuf_alloc>
 8016276:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016278:	69bb      	ldr	r3, [r7, #24]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d10b      	bne.n	8016296 <etharp_raw+0x52>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 801627e:	483e      	ldr	r0, [pc, #248]	@ (8016378 <etharp_raw+0x134>)
 8016280:	f003 fa60 	bl	8019744 <puts>
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 8016284:	4b3d      	ldr	r3, [pc, #244]	@ (801637c <etharp_raw+0x138>)
 8016286:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016288:	3301      	adds	r3, #1
 801628a:	b29a      	uxth	r2, r3
 801628c:	4b3b      	ldr	r3, [pc, #236]	@ (801637c <etharp_raw+0x138>)
 801628e:	849a      	strh	r2, [r3, #36]	@ 0x24
    return ERR_MEM;
 8016290:	f04f 33ff 	mov.w	r3, #4294967295
 8016294:	e066      	b.n	8016364 <etharp_raw+0x120>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016296:	69bb      	ldr	r3, [r7, #24]
 8016298:	895b      	ldrh	r3, [r3, #10]
 801629a:	2b1b      	cmp	r3, #27
 801629c:	d806      	bhi.n	80162ac <etharp_raw+0x68>
 801629e:	4b33      	ldr	r3, [pc, #204]	@ (801636c <etharp_raw+0x128>)
 80162a0:	f240 4262 	movw	r2, #1122	@ 0x462
 80162a4:	4936      	ldr	r1, [pc, #216]	@ (8016380 <etharp_raw+0x13c>)
 80162a6:	4833      	ldr	r0, [pc, #204]	@ (8016374 <etharp_raw+0x130>)
 80162a8:	f003 f9dc 	bl	8019664 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80162ac:	69bb      	ldr	r3, [r7, #24]
 80162ae:	685b      	ldr	r3, [r3, #4]
 80162b0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
 80162b2:	4834      	ldr	r0, [pc, #208]	@ (8016384 <etharp_raw+0x140>)
 80162b4:	f003 fa46 	bl	8019744 <puts>
  hdr->opcode = lwip_htons(opcode);
 80162b8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80162ba:	4618      	mov	r0, r3
 80162bc:	f7f6 ffd6 	bl	800d26c <lwip_htons>
 80162c0:	4603      	mov	r3, r0
 80162c2:	461a      	mov	r2, r3
 80162c4:	697b      	ldr	r3, [r7, #20]
 80162c6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80162ce:	2b06      	cmp	r3, #6
 80162d0:	d006      	beq.n	80162e0 <etharp_raw+0x9c>
 80162d2:	4b26      	ldr	r3, [pc, #152]	@ (801636c <etharp_raw+0x128>)
 80162d4:	f240 4269 	movw	r2, #1129	@ 0x469
 80162d8:	492b      	ldr	r1, [pc, #172]	@ (8016388 <etharp_raw+0x144>)
 80162da:	4826      	ldr	r0, [pc, #152]	@ (8016374 <etharp_raw+0x130>)
 80162dc:	f003 f9c2 	bl	8019664 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80162e0:	697b      	ldr	r3, [r7, #20]
 80162e2:	3308      	adds	r3, #8
 80162e4:	2206      	movs	r2, #6
 80162e6:	6839      	ldr	r1, [r7, #0]
 80162e8:	4618      	mov	r0, r3
 80162ea:	f003 fc60 	bl	8019bae <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80162ee:	697b      	ldr	r3, [r7, #20]
 80162f0:	3312      	adds	r3, #18
 80162f2:	2206      	movs	r2, #6
 80162f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80162f6:	4618      	mov	r0, r3
 80162f8:	f003 fc59 	bl	8019bae <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80162fc:	697b      	ldr	r3, [r7, #20]
 80162fe:	330e      	adds	r3, #14
 8016300:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016302:	6812      	ldr	r2, [r2, #0]
 8016304:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016306:	697b      	ldr	r3, [r7, #20]
 8016308:	3318      	adds	r3, #24
 801630a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801630c:	6812      	ldr	r2, [r2, #0]
 801630e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016310:	697b      	ldr	r3, [r7, #20]
 8016312:	2200      	movs	r2, #0
 8016314:	701a      	strb	r2, [r3, #0]
 8016316:	2200      	movs	r2, #0
 8016318:	f042 0201 	orr.w	r2, r2, #1
 801631c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801631e:	697b      	ldr	r3, [r7, #20]
 8016320:	2200      	movs	r2, #0
 8016322:	f042 0208 	orr.w	r2, r2, #8
 8016326:	709a      	strb	r2, [r3, #2]
 8016328:	2200      	movs	r2, #0
 801632a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801632c:	697b      	ldr	r3, [r7, #20]
 801632e:	2206      	movs	r2, #6
 8016330:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016332:	697b      	ldr	r3, [r7, #20]
 8016334:	2204      	movs	r2, #4
 8016336:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016338:	f640 0306 	movw	r3, #2054	@ 0x806
 801633c:	9300      	str	r3, [sp, #0]
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	68ba      	ldr	r2, [r7, #8]
 8016342:	69b9      	ldr	r1, [r7, #24]
 8016344:	68f8      	ldr	r0, [r7, #12]
 8016346:	f002 f9bf 	bl	80186c8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801634a:	4b0c      	ldr	r3, [pc, #48]	@ (801637c <etharp_raw+0x138>)
 801634c:	8b1b      	ldrh	r3, [r3, #24]
 801634e:	3301      	adds	r3, #1
 8016350:	b29a      	uxth	r2, r3
 8016352:	4b0a      	ldr	r3, [pc, #40]	@ (801637c <etharp_raw+0x138>)
 8016354:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 8016356:	69b8      	ldr	r0, [r7, #24]
 8016358:	f7f8 fe24 	bl	800efa4 <pbuf_free>
  p = NULL;
 801635c:	2300      	movs	r3, #0
 801635e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016360:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016364:	4618      	mov	r0, r3
 8016366:	3720      	adds	r7, #32
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}
 801636c:	0801dfe4 	.word	0x0801dfe4
 8016370:	0801e3ac 	.word	0x0801e3ac
 8016374:	0801e05c 	.word	0x0801e05c
 8016378:	0801e6f0 	.word	0x0801e6f0
 801637c:	2000ea4c 	.word	0x2000ea4c
 8016380:	0801e728 	.word	0x0801e728
 8016384:	0801e75c 	.word	0x0801e75c
 8016388:	0801e780 	.word	0x0801e780

0801638c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801638c:	b580      	push	{r7, lr}
 801638e:	b088      	sub	sp, #32
 8016390:	af04      	add	r7, sp, #16
 8016392:	60f8      	str	r0, [r7, #12]
 8016394:	60b9      	str	r1, [r7, #8]
 8016396:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80163a8:	2201      	movs	r2, #1
 80163aa:	9203      	str	r2, [sp, #12]
 80163ac:	68ba      	ldr	r2, [r7, #8]
 80163ae:	9202      	str	r2, [sp, #8]
 80163b0:	4a06      	ldr	r2, [pc, #24]	@ (80163cc <etharp_request_dst+0x40>)
 80163b2:	9201      	str	r2, [sp, #4]
 80163b4:	9300      	str	r3, [sp, #0]
 80163b6:	4603      	mov	r3, r0
 80163b8:	687a      	ldr	r2, [r7, #4]
 80163ba:	68f8      	ldr	r0, [r7, #12]
 80163bc:	f7ff ff42 	bl	8016244 <etharp_raw>
 80163c0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80163c2:	4618      	mov	r0, r3
 80163c4:	3710      	adds	r7, #16
 80163c6:	46bd      	mov	sp, r7
 80163c8:	bd80      	pop	{r7, pc}
 80163ca:	bf00      	nop
 80163cc:	0801f324 	.word	0x0801f324

080163d0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b082      	sub	sp, #8
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
 80163d8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
 80163da:	4806      	ldr	r0, [pc, #24]	@ (80163f4 <etharp_request+0x24>)
 80163dc:	f003 f9b2 	bl	8019744 <puts>
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80163e0:	4a05      	ldr	r2, [pc, #20]	@ (80163f8 <etharp_request+0x28>)
 80163e2:	6839      	ldr	r1, [r7, #0]
 80163e4:	6878      	ldr	r0, [r7, #4]
 80163e6:	f7ff ffd1 	bl	801638c <etharp_request_dst>
 80163ea:	4603      	mov	r3, r0
}
 80163ec:	4618      	mov	r0, r3
 80163ee:	3708      	adds	r7, #8
 80163f0:	46bd      	mov	sp, r7
 80163f2:	bd80      	pop	{r7, pc}
 80163f4:	0801e7c4 	.word	0x0801e7c4
 80163f8:	0801f31c 	.word	0x0801f31c

080163fc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b08e      	sub	sp, #56	@ 0x38
 8016400:	af04      	add	r7, sp, #16
 8016402:	6078      	str	r0, [r7, #4]
 8016404:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 8016406:	4ba1      	ldr	r3, [pc, #644]	@ (801668c <icmp_input+0x290>)
 8016408:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801640c:	3301      	adds	r3, #1
 801640e:	b29a      	uxth	r2, r3
 8016410:	4b9e      	ldr	r3, [pc, #632]	@ (801668c <icmp_input+0x290>)
 8016412:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016416:	4b9e      	ldr	r3, [pc, #632]	@ (8016690 <icmp_input+0x294>)
 8016418:	689b      	ldr	r3, [r3, #8]
 801641a:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 801641c:	6a3b      	ldr	r3, [r7, #32]
 801641e:	781b      	ldrb	r3, [r3, #0]
 8016420:	f003 030f 	and.w	r3, r3, #15
 8016424:	b2db      	uxtb	r3, r3
 8016426:	009b      	lsls	r3, r3, #2
 8016428:	b2db      	uxtb	r3, r3
 801642a:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 801642c:	8bfb      	ldrh	r3, [r7, #30]
 801642e:	2b13      	cmp	r3, #19
 8016430:	f240 8118 	bls.w	8016664 <icmp_input+0x268>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	895b      	ldrh	r3, [r3, #10]
 8016438:	2b03      	cmp	r3, #3
 801643a:	f240 8115 	bls.w	8016668 <icmp_input+0x26c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	685b      	ldr	r3, [r3, #4]
 8016442:	781b      	ldrb	r3, [r3, #0]
 8016444:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	685b      	ldr	r3, [r3, #4]
 801644a:	785b      	ldrb	r3, [r3, #1]
 801644c:	773b      	strb	r3, [r7, #28]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801644e:	7f7b      	ldrb	r3, [r7, #29]
 8016450:	2b00      	cmp	r3, #0
 8016452:	f000 8100 	beq.w	8016656 <icmp_input+0x25a>
 8016456:	2b08      	cmp	r3, #8
 8016458:	f040 80ec 	bne.w	8016634 <icmp_input+0x238>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801645c:	4b8d      	ldr	r3, [pc, #564]	@ (8016694 <icmp_input+0x298>)
 801645e:	627b      	str	r3, [r7, #36]	@ 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016460:	4b8b      	ldr	r3, [pc, #556]	@ (8016690 <icmp_input+0x294>)
 8016462:	695b      	ldr	r3, [r3, #20]
 8016464:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016468:	2be0      	cmp	r3, #224	@ 0xe0
 801646a:	d102      	bne.n	8016472 <icmp_input+0x76>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 801646c:	683b      	ldr	r3, [r7, #0]
 801646e:	3304      	adds	r3, #4
 8016470:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016472:	4b87      	ldr	r3, [pc, #540]	@ (8016690 <icmp_input+0x294>)
 8016474:	695b      	ldr	r3, [r3, #20]
 8016476:	4a86      	ldr	r2, [pc, #536]	@ (8016690 <icmp_input+0x294>)
 8016478:	6812      	ldr	r2, [r2, #0]
 801647a:	4611      	mov	r1, r2
 801647c:	4618      	mov	r0, r3
 801647e:	f001 f951 	bl	8017724 <ip4_addr_isbroadcast_u32>
 8016482:	4603      	mov	r3, r0
 8016484:	2b00      	cmp	r3, #0
 8016486:	d002      	beq.n	801648e <icmp_input+0x92>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 8016488:	683b      	ldr	r3, [r7, #0]
 801648a:	3304      	adds	r3, #4
 801648c:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	891b      	ldrh	r3, [r3, #8]
 8016492:	2b07      	cmp	r3, #7
 8016494:	f240 80ea 	bls.w	801666c <icmp_input+0x270>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8016498:	6878      	ldr	r0, [r7, #4]
 801649a:	f7f6 ff85 	bl	800d3a8 <inet_chksum_pbuf>
 801649e:	4603      	mov	r3, r0
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d00b      	beq.n	80164bc <icmp_input+0xc0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80164a4:	6878      	ldr	r0, [r7, #4]
 80164a6:	f7f8 fd7d 	bl	800efa4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
 80164aa:	4b78      	ldr	r3, [pc, #480]	@ (801668c <icmp_input+0x290>)
 80164ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80164b0:	3301      	adds	r3, #1
 80164b2:	b29a      	uxth	r2, r3
 80164b4:	4b75      	ldr	r3, [pc, #468]	@ (801668c <icmp_input+0x290>)
 80164b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80164ba:	e102      	b.n	80166c2 <icmp_input+0x2c6>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80164bc:	8bfb      	ldrh	r3, [r7, #30]
 80164be:	3310      	adds	r3, #16
 80164c0:	4619      	mov	r1, r3
 80164c2:	6878      	ldr	r0, [r7, #4]
 80164c4:	f7f8 fcd8 	bl	800ee78 <pbuf_add_header>
 80164c8:	4603      	mov	r3, r0
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d04b      	beq.n	8016566 <icmp_input+0x16a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	891a      	ldrh	r2, [r3, #8]
 80164d2:	8bfb      	ldrh	r3, [r7, #30]
 80164d4:	4413      	add	r3, r2
 80164d6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	891b      	ldrh	r3, [r3, #8]
 80164dc:	8b7a      	ldrh	r2, [r7, #26]
 80164de:	429a      	cmp	r2, r3
 80164e0:	f0c0 80d1 	bcc.w	8016686 <icmp_input+0x28a>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80164e4:	8b7b      	ldrh	r3, [r7, #26]
 80164e6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80164ea:	4619      	mov	r1, r3
 80164ec:	2010      	movs	r0, #16
 80164ee:	f7f8 fa75 	bl	800e9dc <pbuf_alloc>
 80164f2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80164f4:	697b      	ldr	r3, [r7, #20]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	f000 80d6 	beq.w	80166a8 <icmp_input+0x2ac>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80164fc:	697b      	ldr	r3, [r7, #20]
 80164fe:	895b      	ldrh	r3, [r3, #10]
 8016500:	461a      	mov	r2, r3
 8016502:	8bfb      	ldrh	r3, [r7, #30]
 8016504:	3308      	adds	r3, #8
 8016506:	429a      	cmp	r2, r3
 8016508:	d203      	bcs.n	8016512 <icmp_input+0x116>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801650a:	6978      	ldr	r0, [r7, #20]
 801650c:	f7f8 fd4a 	bl	800efa4 <pbuf_free>
          goto icmperr;
 8016510:	e0cb      	b.n	80166aa <icmp_input+0x2ae>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016512:	697b      	ldr	r3, [r7, #20]
 8016514:	685b      	ldr	r3, [r3, #4]
 8016516:	8bfa      	ldrh	r2, [r7, #30]
 8016518:	6a39      	ldr	r1, [r7, #32]
 801651a:	4618      	mov	r0, r3
 801651c:	f003 fb47 	bl	8019bae <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016520:	8bfb      	ldrh	r3, [r7, #30]
 8016522:	4619      	mov	r1, r3
 8016524:	6978      	ldr	r0, [r7, #20]
 8016526:	f7f8 fcb7 	bl	800ee98 <pbuf_remove_header>
 801652a:	4603      	mov	r3, r0
 801652c:	2b00      	cmp	r3, #0
 801652e:	d009      	beq.n	8016544 <icmp_input+0x148>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016530:	4b59      	ldr	r3, [pc, #356]	@ (8016698 <icmp_input+0x29c>)
 8016532:	22b6      	movs	r2, #182	@ 0xb6
 8016534:	4959      	ldr	r1, [pc, #356]	@ (801669c <icmp_input+0x2a0>)
 8016536:	485a      	ldr	r0, [pc, #360]	@ (80166a0 <icmp_input+0x2a4>)
 8016538:	f003 f894 	bl	8019664 <iprintf>
          pbuf_free(r);
 801653c:	6978      	ldr	r0, [r7, #20]
 801653e:	f7f8 fd31 	bl	800efa4 <pbuf_free>
          goto icmperr;
 8016542:	e0b2      	b.n	80166aa <icmp_input+0x2ae>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016544:	6879      	ldr	r1, [r7, #4]
 8016546:	6978      	ldr	r0, [r7, #20]
 8016548:	f7f8 fe50 	bl	800f1ec <pbuf_copy>
 801654c:	4603      	mov	r3, r0
 801654e:	2b00      	cmp	r3, #0
 8016550:	d003      	beq.n	801655a <icmp_input+0x15e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016552:	6978      	ldr	r0, [r7, #20]
 8016554:	f7f8 fd26 	bl	800efa4 <pbuf_free>
          goto icmperr;
 8016558:	e0a7      	b.n	80166aa <icmp_input+0x2ae>
        }
        /* free the original p */
        pbuf_free(p);
 801655a:	6878      	ldr	r0, [r7, #4]
 801655c:	f7f8 fd22 	bl	800efa4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016560:	697b      	ldr	r3, [r7, #20]
 8016562:	607b      	str	r3, [r7, #4]
 8016564:	e00f      	b.n	8016586 <icmp_input+0x18a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016566:	8bfb      	ldrh	r3, [r7, #30]
 8016568:	3310      	adds	r3, #16
 801656a:	4619      	mov	r1, r3
 801656c:	6878      	ldr	r0, [r7, #4]
 801656e:	f7f8 fc93 	bl	800ee98 <pbuf_remove_header>
 8016572:	4603      	mov	r3, r0
 8016574:	2b00      	cmp	r3, #0
 8016576:	d006      	beq.n	8016586 <icmp_input+0x18a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016578:	4b47      	ldr	r3, [pc, #284]	@ (8016698 <icmp_input+0x29c>)
 801657a:	22c7      	movs	r2, #199	@ 0xc7
 801657c:	4949      	ldr	r1, [pc, #292]	@ (80166a4 <icmp_input+0x2a8>)
 801657e:	4848      	ldr	r0, [pc, #288]	@ (80166a0 <icmp_input+0x2a4>)
 8016580:	f003 f870 	bl	8019664 <iprintf>
          goto icmperr;
 8016584:	e091      	b.n	80166aa <icmp_input+0x2ae>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	685b      	ldr	r3, [r3, #4]
 801658a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801658c:	8bfb      	ldrh	r3, [r7, #30]
 801658e:	4619      	mov	r1, r3
 8016590:	6878      	ldr	r0, [r7, #4]
 8016592:	f7f8 fc71 	bl	800ee78 <pbuf_add_header>
 8016596:	4603      	mov	r3, r0
 8016598:	2b00      	cmp	r3, #0
 801659a:	d15e      	bne.n	801665a <icmp_input+0x25e>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	685b      	ldr	r3, [r3, #4]
 80165a0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80165a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165a4:	681a      	ldr	r2, [r3, #0]
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80165aa:	4b39      	ldr	r3, [pc, #228]	@ (8016690 <icmp_input+0x294>)
 80165ac:	691a      	ldr	r2, [r3, #16]
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80165b2:	693b      	ldr	r3, [r7, #16]
 80165b4:	2200      	movs	r2, #0
 80165b6:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80165b8:	693b      	ldr	r3, [r7, #16]
 80165ba:	885b      	ldrh	r3, [r3, #2]
 80165bc:	b29b      	uxth	r3, r3
 80165be:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80165c2:	4293      	cmp	r3, r2
 80165c4:	d907      	bls.n	80165d6 <icmp_input+0x1da>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80165c6:	693b      	ldr	r3, [r7, #16]
 80165c8:	885b      	ldrh	r3, [r3, #2]
 80165ca:	b29b      	uxth	r3, r3
 80165cc:	3309      	adds	r3, #9
 80165ce:	b29a      	uxth	r2, r3
 80165d0:	693b      	ldr	r3, [r7, #16]
 80165d2:	805a      	strh	r2, [r3, #2]
 80165d4:	e006      	b.n	80165e4 <icmp_input+0x1e8>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80165d6:	693b      	ldr	r3, [r7, #16]
 80165d8:	885b      	ldrh	r3, [r3, #2]
 80165da:	b29b      	uxth	r3, r3
 80165dc:	3308      	adds	r3, #8
 80165de:	b29a      	uxth	r2, r3
 80165e0:	693b      	ldr	r3, [r7, #16]
 80165e2:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	22ff      	movs	r2, #255	@ 0xff
 80165e8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	2200      	movs	r2, #0
 80165ee:	729a      	strb	r2, [r3, #10]
 80165f0:	2200      	movs	r2, #0
 80165f2:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 80165f4:	8bfb      	ldrh	r3, [r7, #30]
 80165f6:	4619      	mov	r1, r3
 80165f8:	68f8      	ldr	r0, [r7, #12]
 80165fa:	f7f6 fec3 	bl	800d384 <inet_chksum>
 80165fe:	4603      	mov	r3, r0
 8016600:	461a      	mov	r2, r3
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	815a      	strh	r2, [r3, #10]
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 8016606:	4b21      	ldr	r3, [pc, #132]	@ (801668c <icmp_input+0x290>)
 8016608:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801660c:	3301      	adds	r3, #1
 801660e:	b29a      	uxth	r2, r3
 8016610:	4b1e      	ldr	r3, [pc, #120]	@ (801668c <icmp_input+0x290>)
 8016612:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016616:	683b      	ldr	r3, [r7, #0]
 8016618:	9302      	str	r3, [sp, #8]
 801661a:	2301      	movs	r3, #1
 801661c:	9301      	str	r3, [sp, #4]
 801661e:	2300      	movs	r3, #0
 8016620:	9300      	str	r3, [sp, #0]
 8016622:	23ff      	movs	r3, #255	@ 0xff
 8016624:	2200      	movs	r2, #0
 8016626:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016628:	6878      	ldr	r0, [r7, #4]
 801662a:	f000 fe97 	bl	801735c <ip4_output_if>
 801662e:	4603      	mov	r3, r0
 8016630:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016632:	e012      	b.n	801665a <icmp_input+0x25e>
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 8016634:	4b15      	ldr	r3, [pc, #84]	@ (801668c <icmp_input+0x290>)
 8016636:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801663a:	3301      	adds	r3, #1
 801663c:	b29a      	uxth	r2, r3
 801663e:	4b13      	ldr	r3, [pc, #76]	@ (801668c <icmp_input+0x290>)
 8016640:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
      ICMP_STATS_INC(icmp.drop);
 8016644:	4b11      	ldr	r3, [pc, #68]	@ (801668c <icmp_input+0x290>)
 8016646:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801664a:	3301      	adds	r3, #1
 801664c:	b29a      	uxth	r2, r3
 801664e:	4b0f      	ldr	r3, [pc, #60]	@ (801668c <icmp_input+0x290>)
 8016650:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 8016654:	e002      	b.n	801665c <icmp_input+0x260>
      break;
 8016656:	bf00      	nop
 8016658:	e000      	b.n	801665c <icmp_input+0x260>
      break;
 801665a:	bf00      	nop
  }
  pbuf_free(p);
 801665c:	6878      	ldr	r0, [r7, #4]
 801665e:	f7f8 fca1 	bl	800efa4 <pbuf_free>
  return;
 8016662:	e02e      	b.n	80166c2 <icmp_input+0x2c6>
    goto lenerr;
 8016664:	bf00      	nop
 8016666:	e002      	b.n	801666e <icmp_input+0x272>
    goto lenerr;
 8016668:	bf00      	nop
 801666a:	e000      	b.n	801666e <icmp_input+0x272>
        goto lenerr;
 801666c:	bf00      	nop
lenerr:
  pbuf_free(p);
 801666e:	6878      	ldr	r0, [r7, #4]
 8016670:	f7f8 fc98 	bl	800efa4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 8016674:	4b05      	ldr	r3, [pc, #20]	@ (801668c <icmp_input+0x290>)
 8016676:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801667a:	3301      	adds	r3, #1
 801667c:	b29a      	uxth	r2, r3
 801667e:	4b03      	ldr	r3, [pc, #12]	@ (801668c <icmp_input+0x290>)
 8016680:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016684:	e01d      	b.n	80166c2 <icmp_input+0x2c6>
          goto icmperr;
 8016686:	bf00      	nop
 8016688:	e00f      	b.n	80166aa <icmp_input+0x2ae>
 801668a:	bf00      	nop
 801668c:	2000ea4c 	.word	0x2000ea4c
 8016690:	20008f60 	.word	0x20008f60
 8016694:	20008f74 	.word	0x20008f74
 8016698:	0801e7ec 	.word	0x0801e7ec
 801669c:	0801e824 	.word	0x0801e824
 80166a0:	0801e85c 	.word	0x0801e85c
 80166a4:	0801e884 	.word	0x0801e884
          goto icmperr;
 80166a8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80166aa:	6878      	ldr	r0, [r7, #4]
 80166ac:	f7f8 fc7a 	bl	800efa4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 80166b0:	4b05      	ldr	r3, [pc, #20]	@ (80166c8 <icmp_input+0x2cc>)
 80166b2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80166b6:	3301      	adds	r3, #1
 80166b8:	b29a      	uxth	r2, r3
 80166ba:	4b03      	ldr	r3, [pc, #12]	@ (80166c8 <icmp_input+0x2cc>)
 80166bc:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80166c0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80166c2:	3728      	adds	r7, #40	@ 0x28
 80166c4:	46bd      	mov	sp, r7
 80166c6:	bd80      	pop	{r7, pc}
 80166c8:	2000ea4c 	.word	0x2000ea4c

080166cc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b082      	sub	sp, #8
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	6078      	str	r0, [r7, #4]
 80166d4:	460b      	mov	r3, r1
 80166d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80166d8:	78fb      	ldrb	r3, [r7, #3]
 80166da:	461a      	mov	r2, r3
 80166dc:	2103      	movs	r1, #3
 80166de:	6878      	ldr	r0, [r7, #4]
 80166e0:	f000 f814 	bl	801670c <icmp_send_response>
}
 80166e4:	bf00      	nop
 80166e6:	3708      	adds	r7, #8
 80166e8:	46bd      	mov	sp, r7
 80166ea:	bd80      	pop	{r7, pc}

080166ec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b082      	sub	sp, #8
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
 80166f4:	460b      	mov	r3, r1
 80166f6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80166f8:	78fb      	ldrb	r3, [r7, #3]
 80166fa:	461a      	mov	r2, r3
 80166fc:	210b      	movs	r1, #11
 80166fe:	6878      	ldr	r0, [r7, #4]
 8016700:	f000 f804 	bl	801670c <icmp_send_response>
}
 8016704:	bf00      	nop
 8016706:	3708      	adds	r7, #8
 8016708:	46bd      	mov	sp, r7
 801670a:	bd80      	pop	{r7, pc}

0801670c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801670c:	b580      	push	{r7, lr}
 801670e:	b08c      	sub	sp, #48	@ 0x30
 8016710:	af04      	add	r7, sp, #16
 8016712:	6078      	str	r0, [r7, #4]
 8016714:	460b      	mov	r3, r1
 8016716:	70fb      	strb	r3, [r7, #3]
 8016718:	4613      	mov	r3, r2
 801671a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801671c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016720:	2124      	movs	r1, #36	@ 0x24
 8016722:	2024      	movs	r0, #36	@ 0x24
 8016724:	f7f8 f95a 	bl	800e9dc <pbuf_alloc>
 8016728:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 801672a:	69bb      	ldr	r3, [r7, #24]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d05e      	beq.n	80167ee <icmp_send_response+0xe2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016730:	69bb      	ldr	r3, [r7, #24]
 8016732:	895b      	ldrh	r3, [r3, #10]
 8016734:	2b23      	cmp	r3, #35	@ 0x23
 8016736:	d806      	bhi.n	8016746 <icmp_send_response+0x3a>
 8016738:	4b2f      	ldr	r3, [pc, #188]	@ (80167f8 <icmp_send_response+0xec>)
 801673a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801673e:	492f      	ldr	r1, [pc, #188]	@ (80167fc <icmp_send_response+0xf0>)
 8016740:	482f      	ldr	r0, [pc, #188]	@ (8016800 <icmp_send_response+0xf4>)
 8016742:	f002 ff8f 	bl	8019664 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	685b      	ldr	r3, [r3, #4]
 801674a:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801674c:	69bb      	ldr	r3, [r7, #24]
 801674e:	685b      	ldr	r3, [r3, #4]
 8016750:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 8016752:	693b      	ldr	r3, [r7, #16]
 8016754:	78fa      	ldrb	r2, [r7, #3]
 8016756:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016758:	693b      	ldr	r3, [r7, #16]
 801675a:	78ba      	ldrb	r2, [r7, #2]
 801675c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801675e:	693b      	ldr	r3, [r7, #16]
 8016760:	2200      	movs	r2, #0
 8016762:	711a      	strb	r2, [r3, #4]
 8016764:	2200      	movs	r2, #0
 8016766:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016768:	693b      	ldr	r3, [r7, #16]
 801676a:	2200      	movs	r2, #0
 801676c:	719a      	strb	r2, [r3, #6]
 801676e:	2200      	movs	r2, #0
 8016770:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016772:	69bb      	ldr	r3, [r7, #24]
 8016774:	685b      	ldr	r3, [r3, #4]
 8016776:	f103 0008 	add.w	r0, r3, #8
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	685b      	ldr	r3, [r3, #4]
 801677e:	221c      	movs	r2, #28
 8016780:	4619      	mov	r1, r3
 8016782:	f003 fa14 	bl	8019bae <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016786:	697b      	ldr	r3, [r7, #20]
 8016788:	68db      	ldr	r3, [r3, #12]
 801678a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801678c:	f107 030c 	add.w	r3, r7, #12
 8016790:	4618      	mov	r0, r3
 8016792:	f000 fb63 	bl	8016e5c <ip4_route>
 8016796:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 8016798:	69fb      	ldr	r3, [r7, #28]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d023      	beq.n	80167e6 <icmp_send_response+0xda>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801679e:	693b      	ldr	r3, [r7, #16]
 80167a0:	2200      	movs	r2, #0
 80167a2:	709a      	strb	r2, [r3, #2]
 80167a4:	2200      	movs	r2, #0
 80167a6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80167a8:	69bb      	ldr	r3, [r7, #24]
 80167aa:	895b      	ldrh	r3, [r3, #10]
 80167ac:	4619      	mov	r1, r3
 80167ae:	6938      	ldr	r0, [r7, #16]
 80167b0:	f7f6 fde8 	bl	800d384 <inet_chksum>
 80167b4:	4603      	mov	r3, r0
 80167b6:	461a      	mov	r2, r3
 80167b8:	693b      	ldr	r3, [r7, #16]
 80167ba:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 80167bc:	4b11      	ldr	r3, [pc, #68]	@ (8016804 <icmp_send_response+0xf8>)
 80167be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80167c2:	3301      	adds	r3, #1
 80167c4:	b29a      	uxth	r2, r3
 80167c6:	4b0f      	ldr	r3, [pc, #60]	@ (8016804 <icmp_send_response+0xf8>)
 80167c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80167cc:	f107 020c 	add.w	r2, r7, #12
 80167d0:	69fb      	ldr	r3, [r7, #28]
 80167d2:	9302      	str	r3, [sp, #8]
 80167d4:	2301      	movs	r3, #1
 80167d6:	9301      	str	r3, [sp, #4]
 80167d8:	2300      	movs	r3, #0
 80167da:	9300      	str	r3, [sp, #0]
 80167dc:	23ff      	movs	r3, #255	@ 0xff
 80167de:	2100      	movs	r1, #0
 80167e0:	69b8      	ldr	r0, [r7, #24]
 80167e2:	f000 fdbb 	bl	801735c <ip4_output_if>
  }
  pbuf_free(q);
 80167e6:	69b8      	ldr	r0, [r7, #24]
 80167e8:	f7f8 fbdc 	bl	800efa4 <pbuf_free>
 80167ec:	e000      	b.n	80167f0 <icmp_send_response+0xe4>
    return;
 80167ee:	bf00      	nop
}
 80167f0:	3720      	adds	r7, #32
 80167f2:	46bd      	mov	sp, r7
 80167f4:	bd80      	pop	{r7, pc}
 80167f6:	bf00      	nop
 80167f8:	0801e7ec 	.word	0x0801e7ec
 80167fc:	0801e8b8 	.word	0x0801e8b8
 8016800:	0801e85c 	.word	0x0801e85c
 8016804:	2000ea4c 	.word	0x2000ea4c

08016808 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
 8016808:	b480      	push	{r7}
 801680a:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 801680c:	4b05      	ldr	r3, [pc, #20]	@ (8016824 <igmp_init+0x1c>)
 801680e:	4a06      	ldr	r2, [pc, #24]	@ (8016828 <igmp_init+0x20>)
 8016810:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 8016812:	4b06      	ldr	r3, [pc, #24]	@ (801682c <igmp_init+0x24>)
 8016814:	4a06      	ldr	r2, [pc, #24]	@ (8016830 <igmp_init+0x28>)
 8016816:	601a      	str	r2, [r3, #0]
}
 8016818:	bf00      	nop
 801681a:	46bd      	mov	sp, r7
 801681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016820:	4770      	bx	lr
 8016822:	bf00      	nop
 8016824:	2000ecc4 	.word	0x2000ecc4
 8016828:	010000e0 	.word	0x010000e0
 801682c:	2000ecc8 	.word	0x2000ecc8
 8016830:	020000e0 	.word	0x020000e0

08016834 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b084      	sub	sp, #16
 8016838:	af00      	add	r7, sp, #0
 801683a:	6078      	str	r0, [r7, #4]
  struct igmp_group *group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void *)netif));

  group = igmp_lookup_group(netif, &allsystems);
 801683c:	4911      	ldr	r1, [pc, #68]	@ (8016884 <igmp_start+0x50>)
 801683e:	6878      	ldr	r0, [r7, #4]
 8016840:	f000 f85e 	bl	8016900 <igmp_lookup_group>
 8016844:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	2b00      	cmp	r3, #0
 801684a:	d014      	beq.n	8016876 <igmp_start+0x42>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	2202      	movs	r2, #2
 8016850:	725a      	strb	r2, [r3, #9]
    group->use++;
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	7b1b      	ldrb	r3, [r3, #12]
 8016856:	3301      	adds	r3, #1
 8016858:	b2da      	uxtb	r2, r3
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	731a      	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016862:	2b00      	cmp	r3, #0
 8016864:	d005      	beq.n	8016872 <igmp_start+0x3e>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801686a:	2201      	movs	r2, #1
 801686c:	4905      	ldr	r1, [pc, #20]	@ (8016884 <igmp_start+0x50>)
 801686e:	6878      	ldr	r0, [r7, #4]
 8016870:	4798      	blx	r3
    }

    return ERR_OK;
 8016872:	2300      	movs	r3, #0
 8016874:	e001      	b.n	801687a <igmp_start+0x46>
  }

  return ERR_MEM;
 8016876:	f04f 33ff 	mov.w	r3, #4294967295
}
 801687a:	4618      	mov	r0, r3
 801687c:	3710      	adds	r7, #16
 801687e:	46bd      	mov	sp, r7
 8016880:	bd80      	pop	{r7, pc}
 8016882:	bf00      	nop
 8016884:	2000ecc4 	.word	0x2000ecc4

08016888 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b084      	sub	sp, #16
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
  struct igmp_group *group = netif_igmp_data(netif);
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016894:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void *)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if (group != NULL) {
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d00a      	beq.n	80168b2 <igmp_report_groups+0x2a>
    group = group->next;
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	60fb      	str	r3, [r7, #12]
  }

  while (group != NULL) {
 80168a2:	e006      	b.n	80168b2 <igmp_report_groups+0x2a>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 80168a4:	2105      	movs	r1, #5
 80168a6:	68f8      	ldr	r0, [r7, #12]
 80168a8:	f000 fa07 	bl	8016cba <igmp_delaying_member>
    group = group->next;
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d1f5      	bne.n	80168a4 <igmp_report_groups+0x1c>
  }
}
 80168b8:	bf00      	nop
 80168ba:	bf00      	nop
 80168bc:	3710      	adds	r7, #16
 80168be:	46bd      	mov	sp, r7
 80168c0:	bd80      	pop	{r7, pc}

080168c2 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
 80168c2:	b480      	push	{r7}
 80168c4:	b085      	sub	sp, #20
 80168c6:	af00      	add	r7, sp, #0
 80168c8:	6078      	str	r0, [r7, #4]
 80168ca:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = netif_igmp_data(ifp);
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168d0:	60fb      	str	r3, [r7, #12]

  while (group != NULL) {
 80168d2:	e00a      	b.n	80168ea <igmp_lookfor_group+0x28>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	685a      	ldr	r2, [r3, #4]
 80168d8:	683b      	ldr	r3, [r7, #0]
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	429a      	cmp	r2, r3
 80168de:	d101      	bne.n	80168e4 <igmp_lookfor_group+0x22>
      return group;
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	e006      	b.n	80168f2 <igmp_lookfor_group+0x30>
    }
    group = group->next;
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d1f1      	bne.n	80168d4 <igmp_lookfor_group+0x12>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
 80168f0:	2300      	movs	r3, #0
}
 80168f2:	4618      	mov	r0, r3
 80168f4:	3714      	adds	r7, #20
 80168f6:	46bd      	mov	sp, r7
 80168f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168fc:	4770      	bx	lr
	...

08016900 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
 8016900:	b580      	push	{r7, lr}
 8016902:	b084      	sub	sp, #16
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
 8016908:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801690e:	60fb      	str	r3, [r7, #12]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
 8016910:	6839      	ldr	r1, [r7, #0]
 8016912:	6878      	ldr	r0, [r7, #4]
 8016914:	f7ff ffd5 	bl	80168c2 <igmp_lookfor_group>
 8016918:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 801691a:	68bb      	ldr	r3, [r7, #8]
 801691c:	2b00      	cmp	r3, #0
 801691e:	d001      	beq.n	8016924 <igmp_lookup_group+0x24>
    /* Group already exists. */
    return group;
 8016920:	68bb      	ldr	r3, [r7, #8]
 8016922:	e047      	b.n	80169b4 <igmp_lookup_group+0xb4>
  }

  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 8016924:	200a      	movs	r0, #10
 8016926:	f7f7 fb07 	bl	800df38 <memp_malloc>
 801692a:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 801692c:	68bb      	ldr	r3, [r7, #8]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d03f      	beq.n	80169b2 <igmp_lookup_group+0xb2>
    ip4_addr_set(&(group->group_address), addr);
 8016932:	683b      	ldr	r3, [r7, #0]
 8016934:	2b00      	cmp	r3, #0
 8016936:	d002      	beq.n	801693e <igmp_lookup_group+0x3e>
 8016938:	683b      	ldr	r3, [r7, #0]
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	e000      	b.n	8016940 <igmp_lookup_group+0x40>
 801693e:	2300      	movs	r3, #0
 8016940:	68ba      	ldr	r2, [r7, #8]
 8016942:	6053      	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
 8016944:	68bb      	ldr	r3, [r7, #8]
 8016946:	2200      	movs	r2, #0
 8016948:	815a      	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 801694a:	68bb      	ldr	r3, [r7, #8]
 801694c:	2200      	movs	r2, #0
 801694e:	725a      	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
 8016950:	68bb      	ldr	r3, [r7, #8]
 8016952:	2200      	movs	r2, #0
 8016954:	721a      	strb	r2, [r3, #8]
    group->use                = 0;
 8016956:	68bb      	ldr	r3, [r7, #8]
 8016958:	2200      	movs	r2, #0
 801695a:	731a      	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */
    if (list_head == NULL) {
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d113      	bne.n	801698a <igmp_lookup_group+0x8a>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 8016962:	683b      	ldr	r3, [r7, #0]
 8016964:	681a      	ldr	r2, [r3, #0]
 8016966:	4b15      	ldr	r3, [pc, #84]	@ (80169bc <igmp_lookup_group+0xbc>)
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	429a      	cmp	r2, r3
 801696c:	d006      	beq.n	801697c <igmp_lookup_group+0x7c>
 801696e:	4b14      	ldr	r3, [pc, #80]	@ (80169c0 <igmp_lookup_group+0xc0>)
 8016970:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8016974:	4913      	ldr	r1, [pc, #76]	@ (80169c4 <igmp_lookup_group+0xc4>)
 8016976:	4814      	ldr	r0, [pc, #80]	@ (80169c8 <igmp_lookup_group+0xc8>)
 8016978:	f002 fe74 	bl	8019664 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
 801697c:	68bb      	ldr	r3, [r7, #8]
 801697e:	2200      	movs	r2, #0
 8016980:	601a      	str	r2, [r3, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	68ba      	ldr	r2, [r7, #8]
 8016986:	625a      	str	r2, [r3, #36]	@ 0x24
 8016988:	e013      	b.n	80169b2 <igmp_lookup_group+0xb2>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 801698a:	683b      	ldr	r3, [r7, #0]
 801698c:	681a      	ldr	r2, [r3, #0]
 801698e:	4b0b      	ldr	r3, [pc, #44]	@ (80169bc <igmp_lookup_group+0xbc>)
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	429a      	cmp	r2, r3
 8016994:	d106      	bne.n	80169a4 <igmp_lookup_group+0xa4>
 8016996:	4b0a      	ldr	r3, [pc, #40]	@ (80169c0 <igmp_lookup_group+0xc0>)
 8016998:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801699c:	490b      	ldr	r1, [pc, #44]	@ (80169cc <igmp_lookup_group+0xcc>)
 801699e:	480a      	ldr	r0, [pc, #40]	@ (80169c8 <igmp_lookup_group+0xc8>)
 80169a0:	f002 fe60 	bl	8019664 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	681a      	ldr	r2, [r3, #0]
 80169a8:	68bb      	ldr	r3, [r7, #8]
 80169aa:	601a      	str	r2, [r3, #0]
      list_head->next = group;
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	68ba      	ldr	r2, [r7, #8]
 80169b0:	601a      	str	r2, [r3, #0]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group ? "" : "impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)ifp));

  return group;
 80169b2:	68bb      	ldr	r3, [r7, #8]
}
 80169b4:	4618      	mov	r0, r3
 80169b6:	3710      	adds	r7, #16
 80169b8:	46bd      	mov	sp, r7
 80169ba:	bd80      	pop	{r7, pc}
 80169bc:	2000ecc4 	.word	0x2000ecc4
 80169c0:	0801e8e4 	.word	0x0801e8e4
 80169c4:	0801e91c 	.word	0x0801e91c
 80169c8:	0801e950 	.word	0x0801e950
 80169cc:	0801e978 	.word	0x0801e978

080169d0 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b088      	sub	sp, #32
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	60f8      	str	r0, [r7, #12]
 80169d8:	60b9      	str	r1, [r7, #8]
 80169da:	607a      	str	r2, [r7, #4]
  struct igmp_msg   *igmp;
  struct igmp_group *group;
  struct igmp_group *groupref;

  IGMP_STATS_INC(igmp.recv);
 80169dc:	4b77      	ldr	r3, [pc, #476]	@ (8016bbc <igmp_input+0x1ec>)
 80169de:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 80169e2:	3301      	adds	r3, #1
 80169e4:	b29a      	uxth	r2, r3
 80169e6:	4b75      	ldr	r3, [pc, #468]	@ (8016bbc <igmp_input+0x1ec>)
 80169e8:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	895b      	ldrh	r3, [r3, #10]
 80169f0:	2b07      	cmp	r3, #7
 80169f2:	d80b      	bhi.n	8016a0c <igmp_input+0x3c>
    pbuf_free(p);
 80169f4:	68f8      	ldr	r0, [r7, #12]
 80169f6:	f7f8 fad5 	bl	800efa4 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
 80169fa:	4b70      	ldr	r3, [pc, #448]	@ (8016bbc <igmp_input+0x1ec>)
 80169fc:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8016a00:	3301      	adds	r3, #1
 8016a02:	b29a      	uxth	r2, r3
 8016a04:	4b6d      	ldr	r3, [pc, #436]	@ (8016bbc <igmp_input+0x1ec>)
 8016a06:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
 8016a0a:	e0d3      	b.n	8016bb4 <igmp_input+0x1e4>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print_val(IGMP_DEBUG, ip4_current_header()->dest);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	685b      	ldr	r3, [r3, #4]
 8016a10:	61bb      	str	r3, [r7, #24]
  if (inet_chksum(igmp, p->len)) {
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	895b      	ldrh	r3, [r3, #10]
 8016a16:	4619      	mov	r1, r3
 8016a18:	69b8      	ldr	r0, [r7, #24]
 8016a1a:	f7f6 fcb3 	bl	800d384 <inet_chksum>
 8016a1e:	4603      	mov	r3, r0
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d00b      	beq.n	8016a3c <igmp_input+0x6c>
    pbuf_free(p);
 8016a24:	68f8      	ldr	r0, [r7, #12]
 8016a26:	f7f8 fabd 	bl	800efa4 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
 8016a2a:	4b64      	ldr	r3, [pc, #400]	@ (8016bbc <igmp_input+0x1ec>)
 8016a2c:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 8016a30:	3301      	adds	r3, #1
 8016a32:	b29a      	uxth	r2, r3
 8016a34:	4b61      	ldr	r3, [pc, #388]	@ (8016bbc <igmp_input+0x1ec>)
 8016a36:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
 8016a3a:	e0bb      	b.n	8016bb4 <igmp_input+0x1e4>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 8016a3c:	6879      	ldr	r1, [r7, #4]
 8016a3e:	68b8      	ldr	r0, [r7, #8]
 8016a40:	f7ff ff3f 	bl	80168c2 <igmp_lookfor_group>
 8016a44:	4603      	mov	r3, r0
 8016a46:	617b      	str	r3, [r7, #20]

  /* If group can be found or create... */
  if (!group) {
 8016a48:	697b      	ldr	r3, [r7, #20]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d10b      	bne.n	8016a66 <igmp_input+0x96>
    pbuf_free(p);
 8016a4e:	68f8      	ldr	r0, [r7, #12]
 8016a50:	f7f8 faa8 	bl	800efa4 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
 8016a54:	4b59      	ldr	r3, [pc, #356]	@ (8016bbc <igmp_input+0x1ec>)
 8016a56:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8016a5a:	3301      	adds	r3, #1
 8016a5c:	b29a      	uxth	r2, r3
 8016a5e:	4b57      	ldr	r3, [pc, #348]	@ (8016bbc <igmp_input+0x1ec>)
 8016a60:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
 8016a64:	e0a6      	b.n	8016bb4 <igmp_input+0x1e4>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
 8016a66:	69bb      	ldr	r3, [r7, #24]
 8016a68:	781b      	ldrb	r3, [r3, #0]
 8016a6a:	2b11      	cmp	r3, #17
 8016a6c:	d002      	beq.n	8016a74 <igmp_input+0xa4>
 8016a6e:	2b16      	cmp	r3, #22
 8016a70:	d07c      	beq.n	8016b6c <igmp_input+0x19c>
 8016a72:	e091      	b.n	8016b98 <igmp_input+0x1c8>
    case IGMP_MEMB_QUERY:
      /* IGMP_MEMB_QUERY to the "all systems" address ? */
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	681a      	ldr	r2, [r3, #0]
 8016a78:	4b51      	ldr	r3, [pc, #324]	@ (8016bc0 <igmp_input+0x1f0>)
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	429a      	cmp	r2, r3
 8016a7e:	d136      	bne.n	8016aee <igmp_input+0x11e>
 8016a80:	69bb      	ldr	r3, [r7, #24]
 8016a82:	3304      	adds	r3, #4
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d003      	beq.n	8016a90 <igmp_input+0xc0>
 8016a88:	69bb      	ldr	r3, [r7, #24]
 8016a8a:	685b      	ldr	r3, [r3, #4]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d12e      	bne.n	8016aee <igmp_input+0x11e>
        /* THIS IS THE GENERAL QUERY */
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: General IGMP_MEMB_QUERY on \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));

        if (igmp->igmp_maxresp == 0) {
 8016a90:	69bb      	ldr	r3, [r7, #24]
 8016a92:	785b      	ldrb	r3, [r3, #1]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d10b      	bne.n	8016ab0 <igmp_input+0xe0>
          IGMP_STATS_INC(igmp.rx_v1);
 8016a98:	4b48      	ldr	r3, [pc, #288]	@ (8016bbc <igmp_input+0x1ec>)
 8016a9a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8016a9e:	3301      	adds	r3, #1
 8016aa0:	b29a      	uxth	r2, r3
 8016aa2:	4b46      	ldr	r3, [pc, #280]	@ (8016bbc <igmp_input+0x1ec>)
 8016aa4:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
          LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: got an all hosts query with time== 0 - this is V1 and not implemented - treat as v2\n"));
          igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 8016aa8:	69bb      	ldr	r3, [r7, #24]
 8016aaa:	220a      	movs	r2, #10
 8016aac:	705a      	strb	r2, [r3, #1]
 8016aae:	e007      	b.n	8016ac0 <igmp_input+0xf0>
        } else {
          IGMP_STATS_INC(igmp.rx_general);
 8016ab0:	4b42      	ldr	r3, [pc, #264]	@ (8016bbc <igmp_input+0x1ec>)
 8016ab2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8016ab6:	3301      	adds	r3, #1
 8016ab8:	b29a      	uxth	r2, r3
 8016aba:	4b40      	ldr	r3, [pc, #256]	@ (8016bbc <igmp_input+0x1ec>)
 8016abc:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
        }

        groupref = netif_igmp_data(inp);
 8016ac0:	68bb      	ldr	r3, [r7, #8]
 8016ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ac4:	61fb      	str	r3, [r7, #28]

        /* Do not send messages on the all systems group address! */
        /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
        if (groupref != NULL) {
 8016ac6:	69fb      	ldr	r3, [r7, #28]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d00c      	beq.n	8016ae6 <igmp_input+0x116>
          groupref = groupref->next;
 8016acc:	69fb      	ldr	r3, [r7, #28]
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	61fb      	str	r3, [r7, #28]
        }

        while (groupref) {
 8016ad2:	e008      	b.n	8016ae6 <igmp_input+0x116>
          igmp_delaying_member(groupref, igmp->igmp_maxresp);
 8016ad4:	69bb      	ldr	r3, [r7, #24]
 8016ad6:	785b      	ldrb	r3, [r3, #1]
 8016ad8:	4619      	mov	r1, r3
 8016ada:	69f8      	ldr	r0, [r7, #28]
 8016adc:	f000 f8ed 	bl	8016cba <igmp_delaying_member>
          groupref = groupref->next;
 8016ae0:	69fb      	ldr	r3, [r7, #28]
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	61fb      	str	r3, [r7, #28]
        while (groupref) {
 8016ae6:	69fb      	ldr	r3, [r7, #28]
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d1f3      	bne.n	8016ad4 <igmp_input+0x104>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8016aec:	e03d      	b.n	8016b6a <igmp_input+0x19a>
        }
      } else {
        /* IGMP_MEMB_QUERY to a specific group ? */
        if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 8016aee:	69bb      	ldr	r3, [r7, #24]
 8016af0:	3304      	adds	r3, #4
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d030      	beq.n	8016b58 <igmp_input+0x188>
 8016af6:	69bb      	ldr	r3, [r7, #24]
 8016af8:	685b      	ldr	r3, [r3, #4]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d02c      	beq.n	8016b58 <igmp_input+0x188>
          LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_MEMB_QUERY to a specific group "));
          ip4_addr_debug_print_val(IGMP_DEBUG, igmp->igmp_group_address);
          if (ip4_addr_cmp(dest, &allsystems)) {
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	681a      	ldr	r2, [r3, #0]
 8016b02:	4b2f      	ldr	r3, [pc, #188]	@ (8016bc0 <igmp_input+0x1f0>)
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	429a      	cmp	r2, r3
 8016b08:	d10a      	bne.n	8016b20 <igmp_input+0x150>
            ip4_addr_t groupaddr;
            LWIP_DEBUGF(IGMP_DEBUG, (" using \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
            /* we first need to re-look for the group since we used dest last time */
            ip4_addr_copy(groupaddr, igmp->igmp_group_address);
 8016b0a:	69bb      	ldr	r3, [r7, #24]
 8016b0c:	685b      	ldr	r3, [r3, #4]
 8016b0e:	613b      	str	r3, [r7, #16]
            group = igmp_lookfor_group(inp, &groupaddr);
 8016b10:	f107 0310 	add.w	r3, r7, #16
 8016b14:	4619      	mov	r1, r3
 8016b16:	68b8      	ldr	r0, [r7, #8]
 8016b18:	f7ff fed3 	bl	80168c2 <igmp_lookfor_group>
 8016b1c:	4603      	mov	r3, r0
 8016b1e:	617b      	str	r3, [r7, #20]
          } else {
            LWIP_DEBUGF(IGMP_DEBUG, (" with the group address as destination [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
          }

          if (group != NULL) {
 8016b20:	697b      	ldr	r3, [r7, #20]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d00f      	beq.n	8016b46 <igmp_input+0x176>
            IGMP_STATS_INC(igmp.rx_group);
 8016b26:	4b25      	ldr	r3, [pc, #148]	@ (8016bbc <igmp_input+0x1ec>)
 8016b28:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8016b2c:	3301      	adds	r3, #1
 8016b2e:	b29a      	uxth	r2, r3
 8016b30:	4b22      	ldr	r3, [pc, #136]	@ (8016bbc <igmp_input+0x1ec>)
 8016b32:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            igmp_delaying_member(group, igmp->igmp_maxresp);
 8016b36:	697a      	ldr	r2, [r7, #20]
 8016b38:	69bb      	ldr	r3, [r7, #24]
 8016b3a:	785b      	ldrb	r3, [r3, #1]
 8016b3c:	4619      	mov	r1, r3
 8016b3e:	4610      	mov	r0, r2
 8016b40:	f000 f8bb 	bl	8016cba <igmp_delaying_member>
          if (group != NULL) {
 8016b44:	e011      	b.n	8016b6a <igmp_input+0x19a>
          } else {
            IGMP_STATS_INC(igmp.drop);
 8016b46:	4b1d      	ldr	r3, [pc, #116]	@ (8016bbc <igmp_input+0x1ec>)
 8016b48:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8016b4c:	3301      	adds	r3, #1
 8016b4e:	b29a      	uxth	r2, r3
 8016b50:	4b1a      	ldr	r3, [pc, #104]	@ (8016bbc <igmp_input+0x1ec>)
 8016b52:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
          if (group != NULL) {
 8016b56:	e008      	b.n	8016b6a <igmp_input+0x19a>
          }
        } else {
          IGMP_STATS_INC(igmp.proterr);
 8016b58:	4b18      	ldr	r3, [pc, #96]	@ (8016bbc <igmp_input+0x1ec>)
 8016b5a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8016b5e:	3301      	adds	r3, #1
 8016b60:	b29a      	uxth	r2, r3
 8016b62:	4b16      	ldr	r3, [pc, #88]	@ (8016bbc <igmp_input+0x1ec>)
 8016b64:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
        }
      }
      break;
 8016b68:	e020      	b.n	8016bac <igmp_input+0x1dc>
 8016b6a:	e01f      	b.n	8016bac <igmp_input+0x1dc>
    case IGMP_V2_MEMB_REPORT:
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));
      IGMP_STATS_INC(igmp.rx_report);
 8016b6c:	4b13      	ldr	r3, [pc, #76]	@ (8016bbc <igmp_input+0x1ec>)
 8016b6e:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8016b72:	3301      	adds	r3, #1
 8016b74:	b29a      	uxth	r2, r3
 8016b76:	4b11      	ldr	r3, [pc, #68]	@ (8016bbc <igmp_input+0x1ec>)
 8016b78:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 8016b7c:	697b      	ldr	r3, [r7, #20]
 8016b7e:	7a5b      	ldrb	r3, [r3, #9]
 8016b80:	2b01      	cmp	r3, #1
 8016b82:	d112      	bne.n	8016baa <igmp_input+0x1da>
        /* This is on a specific group we have already looked up */
        group->timer = 0; /* stopped */
 8016b84:	697b      	ldr	r3, [r7, #20]
 8016b86:	2200      	movs	r2, #0
 8016b88:	815a      	strh	r2, [r3, #10]
        group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8016b8a:	697b      	ldr	r3, [r7, #20]
 8016b8c:	2202      	movs	r2, #2
 8016b8e:	725a      	strb	r2, [r3, #9]
        group->last_reporter_flag = 0;
 8016b90:	697b      	ldr	r3, [r7, #20]
 8016b92:	2200      	movs	r2, #0
 8016b94:	721a      	strb	r2, [r3, #8]
      }
      break;
 8016b96:	e008      	b.n	8016baa <igmp_input+0x1da>
    default:
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
                               igmp->igmp_msgtype, group->group_state, (void *)&group, (void *)inp));
      IGMP_STATS_INC(igmp.proterr);
 8016b98:	4b08      	ldr	r3, [pc, #32]	@ (8016bbc <igmp_input+0x1ec>)
 8016b9a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8016b9e:	3301      	adds	r3, #1
 8016ba0:	b29a      	uxth	r2, r3
 8016ba2:	4b06      	ldr	r3, [pc, #24]	@ (8016bbc <igmp_input+0x1ec>)
 8016ba4:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
      break;
 8016ba8:	e000      	b.n	8016bac <igmp_input+0x1dc>
      break;
 8016baa:	bf00      	nop
  }

  pbuf_free(p);
 8016bac:	68f8      	ldr	r0, [r7, #12]
 8016bae:	f7f8 f9f9 	bl	800efa4 <pbuf_free>
  return;
 8016bb2:	bf00      	nop
}
 8016bb4:	3720      	adds	r7, #32
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	bd80      	pop	{r7, pc}
 8016bba:	bf00      	nop
 8016bbc:	2000ea4c 	.word	0x2000ea4c
 8016bc0:	2000ecc4 	.word	0x2000ecc4

08016bc4 <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b082      	sub	sp, #8
 8016bc8:	af00      	add	r7, sp, #0
  struct netif *netif;

  NETIF_FOREACH(netif) {
 8016bca:	4b15      	ldr	r3, [pc, #84]	@ (8016c20 <igmp_tmr+0x5c>)
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	607b      	str	r3, [r7, #4]
 8016bd0:	e01e      	b.n	8016c10 <igmp_tmr+0x4c>
    struct igmp_group *group = netif_igmp_data(netif);
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bd6:	603b      	str	r3, [r7, #0]

    while (group != NULL) {
 8016bd8:	e014      	b.n	8016c04 <igmp_tmr+0x40>
      if (group->timer > 0) {
 8016bda:	683b      	ldr	r3, [r7, #0]
 8016bdc:	895b      	ldrh	r3, [r3, #10]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d00d      	beq.n	8016bfe <igmp_tmr+0x3a>
        group->timer--;
 8016be2:	683b      	ldr	r3, [r7, #0]
 8016be4:	895b      	ldrh	r3, [r3, #10]
 8016be6:	3b01      	subs	r3, #1
 8016be8:	b29a      	uxth	r2, r3
 8016bea:	683b      	ldr	r3, [r7, #0]
 8016bec:	815a      	strh	r2, [r3, #10]
        if (group->timer == 0) {
 8016bee:	683b      	ldr	r3, [r7, #0]
 8016bf0:	895b      	ldrh	r3, [r3, #10]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d103      	bne.n	8016bfe <igmp_tmr+0x3a>
          igmp_timeout(netif, group);
 8016bf6:	6839      	ldr	r1, [r7, #0]
 8016bf8:	6878      	ldr	r0, [r7, #4]
 8016bfa:	f000 f813 	bl	8016c24 <igmp_timeout>
        }
      }
      group = group->next;
 8016bfe:	683b      	ldr	r3, [r7, #0]
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	603b      	str	r3, [r7, #0]
    while (group != NULL) {
 8016c04:	683b      	ldr	r3, [r7, #0]
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d1e7      	bne.n	8016bda <igmp_tmr+0x16>
  NETIF_FOREACH(netif) {
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	607b      	str	r3, [r7, #4]
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d1dd      	bne.n	8016bd2 <igmp_tmr+0xe>
    }
  }
}
 8016c16:	bf00      	nop
 8016c18:	bf00      	nop
 8016c1a:	3708      	adds	r7, #8
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	bd80      	pop	{r7, pc}
 8016c20:	2000ea40 	.word	0x2000ea40

08016c24 <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b082      	sub	sp, #8
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	6078      	str	r0, [r7, #4]
 8016c2c:	6039      	str	r1, [r7, #0]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8016c2e:	683b      	ldr	r3, [r7, #0]
 8016c30:	7a5b      	ldrb	r3, [r3, #9]
 8016c32:	2b01      	cmp	r3, #1
 8016c34:	d115      	bne.n	8016c62 <igmp_timeout+0x3e>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 8016c36:	683b      	ldr	r3, [r7, #0]
 8016c38:	685a      	ldr	r2, [r3, #4]
 8016c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8016c6c <igmp_timeout+0x48>)
 8016c3c:	681b      	ldr	r3, [r3, #0]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8016c3e:	429a      	cmp	r2, r3
 8016c40:	d00f      	beq.n	8016c62 <igmp_timeout+0x3e>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print_val(IGMP_DEBUG, group->group_address);
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8016c42:	683b      	ldr	r3, [r7, #0]
 8016c44:	2202      	movs	r2, #2
 8016c46:	725a      	strb	r2, [r3, #9]

    IGMP_STATS_INC(igmp.tx_report);
 8016c48:	4b09      	ldr	r3, [pc, #36]	@ (8016c70 <igmp_timeout+0x4c>)
 8016c4a:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 8016c4e:	3301      	adds	r3, #1
 8016c50:	b29a      	uxth	r2, r3
 8016c52:	4b07      	ldr	r3, [pc, #28]	@ (8016c70 <igmp_timeout+0x4c>)
 8016c54:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 8016c58:	2216      	movs	r2, #22
 8016c5a:	6839      	ldr	r1, [r7, #0]
 8016c5c:	6878      	ldr	r0, [r7, #4]
 8016c5e:	f000 f87d 	bl	8016d5c <igmp_send>
  }
}
 8016c62:	bf00      	nop
 8016c64:	3708      	adds	r7, #8
 8016c66:	46bd      	mov	sp, r7
 8016c68:	bd80      	pop	{r7, pc}
 8016c6a:	bf00      	nop
 8016c6c:	2000ecc4 	.word	0x2000ecc4
 8016c70:	2000ea4c 	.word	0x2000ea4c

08016c74 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 8016c74:	b580      	push	{r7, lr}
 8016c76:	b082      	sub	sp, #8
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
 8016c7c:	460b      	mov	r3, r1
 8016c7e:	70fb      	strb	r3, [r7, #3]
#ifdef LWIP_RAND
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 8016c80:	78fb      	ldrb	r3, [r7, #3]
 8016c82:	2b02      	cmp	r3, #2
 8016c84:	d90b      	bls.n	8016c9e <igmp_start_timer+0x2a>
 8016c86:	f002 fbed 	bl	8019464 <rand>
 8016c8a:	4603      	mov	r3, r0
 8016c8c:	461a      	mov	r2, r3
 8016c8e:	78fb      	ldrb	r3, [r7, #3]
 8016c90:	fbb2 f1f3 	udiv	r1, r2, r3
 8016c94:	fb01 f303 	mul.w	r3, r1, r3
 8016c98:	1ad3      	subs	r3, r2, r3
 8016c9a:	b29a      	uxth	r2, r3
 8016c9c:	e000      	b.n	8016ca0 <igmp_start_timer+0x2c>
 8016c9e:	2201      	movs	r2, #1
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	815a      	strh	r2, [r3, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	895b      	ldrh	r3, [r3, #10]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d102      	bne.n	8016cb2 <igmp_start_timer+0x3e>
    group->timer = 1;
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	2201      	movs	r2, #1
 8016cb0:	815a      	strh	r2, [r3, #10]
  }
}
 8016cb2:	bf00      	nop
 8016cb4:	3708      	adds	r7, #8
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	bd80      	pop	{r7, pc}

08016cba <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 8016cba:	b580      	push	{r7, lr}
 8016cbc:	b082      	sub	sp, #8
 8016cbe:	af00      	add	r7, sp, #0
 8016cc0:	6078      	str	r0, [r7, #4]
 8016cc2:	460b      	mov	r3, r1
 8016cc4:	70fb      	strb	r3, [r7, #3]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	7a5b      	ldrb	r3, [r3, #9]
 8016cca:	2b02      	cmp	r3, #2
 8016ccc:	d00d      	beq.n	8016cea <igmp_delaying_member+0x30>
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	7a5b      	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8016cd2:	2b01      	cmp	r3, #1
 8016cd4:	d111      	bne.n	8016cfa <igmp_delaying_member+0x40>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	895b      	ldrh	r3, [r3, #10]
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d005      	beq.n	8016cea <igmp_delaying_member+0x30>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 8016cde:	78fb      	ldrb	r3, [r7, #3]
 8016ce0:	b29a      	uxth	r2, r3
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	895b      	ldrh	r3, [r3, #10]
 8016ce6:	429a      	cmp	r2, r3
 8016ce8:	d207      	bcs.n	8016cfa <igmp_delaying_member+0x40>
    igmp_start_timer(group, maxresp);
 8016cea:	78fb      	ldrb	r3, [r7, #3]
 8016cec:	4619      	mov	r1, r3
 8016cee:	6878      	ldr	r0, [r7, #4]
 8016cf0:	f7ff ffc0 	bl	8016c74 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	2201      	movs	r2, #1
 8016cf8:	725a      	strb	r2, [r3, #9]
  }
}
 8016cfa:	bf00      	nop
 8016cfc:	3708      	adds	r7, #8
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	bd80      	pop	{r7, pc}
	...

08016d04 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b08c      	sub	sp, #48	@ 0x30
 8016d08:	af06      	add	r7, sp, #24
 8016d0a:	60f8      	str	r0, [r7, #12]
 8016d0c:	60b9      	str	r1, [r7, #8]
 8016d0e:	607a      	str	r2, [r7, #4]
 8016d10:	603b      	str	r3, [r7, #0]
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 8016d12:	f240 4394 	movw	r3, #1172	@ 0x494
 8016d16:	82bb      	strh	r3, [r7, #20]
  ra[1] = 0x0000; /* Router shall examine packet */
 8016d18:	2300      	movs	r3, #0
 8016d1a:	82fb      	strh	r3, [r7, #22]
  IGMP_STATS_INC(igmp.xmit);
 8016d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8016d58 <igmp_ip_output_if+0x54>)
 8016d1e:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8016d22:	3301      	adds	r3, #1
 8016d24:	b29a      	uxth	r2, r3
 8016d26:	4b0c      	ldr	r3, [pc, #48]	@ (8016d58 <igmp_ip_output_if+0x54>)
 8016d28:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 8016d2c:	2304      	movs	r3, #4
 8016d2e:	9304      	str	r3, [sp, #16]
 8016d30:	f107 0314 	add.w	r3, r7, #20
 8016d34:	9303      	str	r3, [sp, #12]
 8016d36:	683b      	ldr	r3, [r7, #0]
 8016d38:	9302      	str	r3, [sp, #8]
 8016d3a:	2302      	movs	r3, #2
 8016d3c:	9301      	str	r3, [sp, #4]
 8016d3e:	2300      	movs	r3, #0
 8016d40:	9300      	str	r3, [sp, #0]
 8016d42:	2301      	movs	r3, #1
 8016d44:	687a      	ldr	r2, [r7, #4]
 8016d46:	68b9      	ldr	r1, [r7, #8]
 8016d48:	68f8      	ldr	r0, [r7, #12]
 8016d4a:	f000 fb24 	bl	8017396 <ip4_output_if_opt>
 8016d4e:	4603      	mov	r3, r0
}
 8016d50:	4618      	mov	r0, r3
 8016d52:	3718      	adds	r7, #24
 8016d54:	46bd      	mov	sp, r7
 8016d56:	bd80      	pop	{r7, pc}
 8016d58:	2000ea4c 	.word	0x2000ea4c

08016d5c <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b088      	sub	sp, #32
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	60f8      	str	r0, [r7, #12]
 8016d64:	60b9      	str	r1, [r7, #8]
 8016d66:	4613      	mov	r3, r2
 8016d68:	71fb      	strb	r3, [r7, #7]
  struct pbuf     *p    = NULL;
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	61bb      	str	r3, [r7, #24]
  struct igmp_msg *igmp = NULL;
 8016d6e:	2300      	movs	r3, #0
 8016d70:	617b      	str	r3, [r7, #20]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 8016d72:	4b34      	ldr	r3, [pc, #208]	@ (8016e44 <igmp_send+0xe8>)
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	613b      	str	r3, [r7, #16]
  ip4_addr_t  *dest = NULL;
 8016d78:	2300      	movs	r3, #0
 8016d7a:	61fb      	str	r3, [r7, #28]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 8016d7c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016d80:	2108      	movs	r1, #8
 8016d82:	2038      	movs	r0, #56	@ 0x38
 8016d84:	f7f7 fe2a 	bl	800e9dc <pbuf_alloc>
 8016d88:	61b8      	str	r0, [r7, #24]

  if (p) {
 8016d8a:	69bb      	ldr	r3, [r7, #24]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d04c      	beq.n	8016e2a <igmp_send+0xce>
    igmp = (struct igmp_msg *)p->payload;
 8016d90:	69bb      	ldr	r3, [r7, #24]
 8016d92:	685b      	ldr	r3, [r3, #4]
 8016d94:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 8016d96:	69bb      	ldr	r3, [r7, #24]
 8016d98:	895b      	ldrh	r3, [r3, #10]
 8016d9a:	2b07      	cmp	r3, #7
 8016d9c:	d806      	bhi.n	8016dac <igmp_send+0x50>
 8016d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8016e48 <igmp_send+0xec>)
 8016da0:	f240 3202 	movw	r2, #770	@ 0x302
 8016da4:	4929      	ldr	r1, [pc, #164]	@ (8016e4c <igmp_send+0xf0>)
 8016da6:	482a      	ldr	r0, [pc, #168]	@ (8016e50 <igmp_send+0xf4>)
 8016da8:	f002 fc5c 	bl	8019664 <iprintf>
                (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	3304      	adds	r3, #4
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	613b      	str	r3, [r7, #16]

    if (type == IGMP_V2_MEMB_REPORT) {
 8016db4:	79fb      	ldrb	r3, [r7, #7]
 8016db6:	2b16      	cmp	r3, #22
 8016db8:	d10a      	bne.n	8016dd0 <igmp_send+0x74>
      dest = &(group->group_address);
 8016dba:	68bb      	ldr	r3, [r7, #8]
 8016dbc:	3304      	adds	r3, #4
 8016dbe:	61fb      	str	r3, [r7, #28]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8016dc0:	68bb      	ldr	r3, [r7, #8]
 8016dc2:	685a      	ldr	r2, [r3, #4]
 8016dc4:	697b      	ldr	r3, [r7, #20]
 8016dc6:	605a      	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 8016dc8:	68bb      	ldr	r3, [r7, #8]
 8016dca:	2201      	movs	r2, #1
 8016dcc:	721a      	strb	r2, [r3, #8]
 8016dce:	e008      	b.n	8016de2 <igmp_send+0x86>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 8016dd0:	79fb      	ldrb	r3, [r7, #7]
 8016dd2:	2b17      	cmp	r3, #23
 8016dd4:	d105      	bne.n	8016de2 <igmp_send+0x86>
        dest = &allrouters;
 8016dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8016e54 <igmp_send+0xf8>)
 8016dd8:	61fb      	str	r3, [r7, #28]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8016dda:	68bb      	ldr	r3, [r7, #8]
 8016ddc:	685a      	ldr	r2, [r3, #4]
 8016dde:	697b      	ldr	r3, [r7, #20]
 8016de0:	605a      	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 8016de2:	79fb      	ldrb	r3, [r7, #7]
 8016de4:	2b16      	cmp	r3, #22
 8016de6:	d002      	beq.n	8016dee <igmp_send+0x92>
 8016de8:	79fb      	ldrb	r3, [r7, #7]
 8016dea:	2b17      	cmp	r3, #23
 8016dec:	d119      	bne.n	8016e22 <igmp_send+0xc6>
      igmp->igmp_msgtype  = type;
 8016dee:	697b      	ldr	r3, [r7, #20]
 8016df0:	79fa      	ldrb	r2, [r7, #7]
 8016df2:	701a      	strb	r2, [r3, #0]
      igmp->igmp_maxresp  = 0;
 8016df4:	697b      	ldr	r3, [r7, #20]
 8016df6:	2200      	movs	r2, #0
 8016df8:	705a      	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
 8016dfa:	697b      	ldr	r3, [r7, #20]
 8016dfc:	2200      	movs	r2, #0
 8016dfe:	709a      	strb	r2, [r3, #2]
 8016e00:	2200      	movs	r2, #0
 8016e02:	70da      	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 8016e04:	2108      	movs	r1, #8
 8016e06:	6978      	ldr	r0, [r7, #20]
 8016e08:	f7f6 fabc 	bl	800d384 <inet_chksum>
 8016e0c:	4603      	mov	r3, r0
 8016e0e:	461a      	mov	r2, r3
 8016e10:	697b      	ldr	r3, [r7, #20]
 8016e12:	805a      	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
 8016e14:	f107 0110 	add.w	r1, r7, #16
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	69fa      	ldr	r2, [r7, #28]
 8016e1c:	69b8      	ldr	r0, [r7, #24]
 8016e1e:	f7ff ff71 	bl	8016d04 <igmp_ip_output_if>
    }

    pbuf_free(p);
 8016e22:	69b8      	ldr	r0, [r7, #24]
 8016e24:	f7f8 f8be 	bl	800efa4 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 8016e28:	e007      	b.n	8016e3a <igmp_send+0xde>
    IGMP_STATS_INC(igmp.memerr);
 8016e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8016e58 <igmp_send+0xfc>)
 8016e2c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8016e30:	3301      	adds	r3, #1
 8016e32:	b29a      	uxth	r2, r3
 8016e34:	4b08      	ldr	r3, [pc, #32]	@ (8016e58 <igmp_send+0xfc>)
 8016e36:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
}
 8016e3a:	bf00      	nop
 8016e3c:	3720      	adds	r7, #32
 8016e3e:	46bd      	mov	sp, r7
 8016e40:	bd80      	pop	{r7, pc}
 8016e42:	bf00      	nop
 8016e44:	0801f318 	.word	0x0801f318
 8016e48:	0801e8e4 	.word	0x0801e8e4
 8016e4c:	0801ec00 	.word	0x0801ec00
 8016e50:	0801e950 	.word	0x0801e950
 8016e54:	2000ecc8 	.word	0x2000ecc8
 8016e58:	2000ea4c 	.word	0x2000ea4c

08016e5c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016e5c:	b480      	push	{r7}
 8016e5e:	b085      	sub	sp, #20
 8016e60:	af00      	add	r7, sp, #0
 8016e62:	6078      	str	r0, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016e6c:	2be0      	cmp	r3, #224	@ 0xe0
 8016e6e:	d106      	bne.n	8016e7e <ip4_route+0x22>
 8016e70:	4b3a      	ldr	r3, [pc, #232]	@ (8016f5c <ip4_route+0x100>)
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d002      	beq.n	8016e7e <ip4_route+0x22>
    return ip4_default_multicast_netif;
 8016e78:	4b38      	ldr	r3, [pc, #224]	@ (8016f5c <ip4_route+0x100>)
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	e068      	b.n	8016f50 <ip4_route+0xf4>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016e7e:	4b38      	ldr	r3, [pc, #224]	@ (8016f60 <ip4_route+0x104>)
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	60fb      	str	r3, [r7, #12]
 8016e84:	e036      	b.n	8016ef4 <ip4_route+0x98>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016e8c:	f003 0301 	and.w	r3, r3, #1
 8016e90:	b2db      	uxtb	r3, r3
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d02b      	beq.n	8016eee <ip4_route+0x92>
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016e9c:	089b      	lsrs	r3, r3, #2
 8016e9e:	f003 0301 	and.w	r3, r3, #1
 8016ea2:	b2db      	uxtb	r3, r3
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d022      	beq.n	8016eee <ip4_route+0x92>
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	3304      	adds	r3, #4
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d01d      	beq.n	8016eee <ip4_route+0x92>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	681a      	ldr	r2, [r3, #0]
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	3304      	adds	r3, #4
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	405a      	eors	r2, r3
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	3308      	adds	r3, #8
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	4013      	ands	r3, r2
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d101      	bne.n	8016ece <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	e040      	b.n	8016f50 <ip4_route+0xf4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016ed4:	f003 0302 	and.w	r3, r3, #2
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d108      	bne.n	8016eee <ip4_route+0x92>
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	681a      	ldr	r2, [r3, #0]
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	330c      	adds	r3, #12
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	429a      	cmp	r2, r3
 8016ee8:	d101      	bne.n	8016eee <ip4_route+0x92>
        /* return netif on which to forward IP packet */
        return netif;
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	e030      	b.n	8016f50 <ip4_route+0xf4>
  NETIF_FOREACH(netif) {
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	60fb      	str	r3, [r7, #12]
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d1c5      	bne.n	8016e86 <ip4_route+0x2a>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016efa:	4b1a      	ldr	r3, [pc, #104]	@ (8016f64 <ip4_route+0x108>)
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d01a      	beq.n	8016f38 <ip4_route+0xdc>
 8016f02:	4b18      	ldr	r3, [pc, #96]	@ (8016f64 <ip4_route+0x108>)
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016f0a:	f003 0301 	and.w	r3, r3, #1
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d012      	beq.n	8016f38 <ip4_route+0xdc>
 8016f12:	4b14      	ldr	r3, [pc, #80]	@ (8016f64 <ip4_route+0x108>)
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016f1a:	f003 0304 	and.w	r3, r3, #4
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d00a      	beq.n	8016f38 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016f22:	4b10      	ldr	r3, [pc, #64]	@ (8016f64 <ip4_route+0x108>)
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	3304      	adds	r3, #4
 8016f28:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d004      	beq.n	8016f38 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	b2db      	uxtb	r3, r3
 8016f34:	2b7f      	cmp	r3, #127	@ 0x7f
 8016f36:	d109      	bne.n	8016f4c <ip4_route+0xf0>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 8016f38:	4b0b      	ldr	r3, [pc, #44]	@ (8016f68 <ip4_route+0x10c>)
 8016f3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8016f3e:	3301      	adds	r3, #1
 8016f40:	b29a      	uxth	r2, r3
 8016f42:	4b09      	ldr	r3, [pc, #36]	@ (8016f68 <ip4_route+0x10c>)
 8016f44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016f48:	2300      	movs	r3, #0
 8016f4a:	e001      	b.n	8016f50 <ip4_route+0xf4>
  }

  return netif_default;
 8016f4c:	4b05      	ldr	r3, [pc, #20]	@ (8016f64 <ip4_route+0x108>)
 8016f4e:	681b      	ldr	r3, [r3, #0]
}
 8016f50:	4618      	mov	r0, r3
 8016f52:	3714      	adds	r7, #20
 8016f54:	46bd      	mov	sp, r7
 8016f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f5a:	4770      	bx	lr
 8016f5c:	2000ecd0 	.word	0x2000ecd0
 8016f60:	2000ea40 	.word	0x2000ea40
 8016f64:	2000ea44 	.word	0x2000ea44
 8016f68:	2000ea4c 	.word	0x2000ea4c

08016f6c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b082      	sub	sp, #8
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016f7a:	f003 0301 	and.w	r3, r3, #1
 8016f7e:	b2db      	uxtb	r3, r3
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d016      	beq.n	8016fb2 <ip4_input_accept+0x46>
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	3304      	adds	r3, #4
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d011      	beq.n	8016fb2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8016fbc <ip4_input_accept+0x50>)
 8016f90:	695a      	ldr	r2, [r3, #20]
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	3304      	adds	r3, #4
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	429a      	cmp	r2, r3
 8016f9a:	d008      	beq.n	8016fae <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016f9c:	4b07      	ldr	r3, [pc, #28]	@ (8016fbc <ip4_input_accept+0x50>)
 8016f9e:	695b      	ldr	r3, [r3, #20]
 8016fa0:	6879      	ldr	r1, [r7, #4]
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	f000 fbbe 	bl	8017724 <ip4_addr_isbroadcast_u32>
 8016fa8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d001      	beq.n	8016fb2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016fae:	2301      	movs	r3, #1
 8016fb0:	e000      	b.n	8016fb4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016fb2:	2300      	movs	r3, #0
}
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	3708      	adds	r7, #8
 8016fb8:	46bd      	mov	sp, r7
 8016fba:	bd80      	pop	{r7, pc}
 8016fbc:	20008f60 	.word	0x20008f60

08016fc0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016fc0:	b580      	push	{r7, lr}
 8016fc2:	b088      	sub	sp, #32
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	6078      	str	r0, [r7, #4]
 8016fc8:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8016fca:	2301      	movs	r3, #1
 8016fcc:	60fb      	str	r3, [r7, #12]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 8016fce:	4b8b      	ldr	r3, [pc, #556]	@ (80171fc <ip4_input+0x23c>)
 8016fd0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8016fd4:	3301      	adds	r3, #1
 8016fd6:	b29a      	uxth	r2, r3
 8016fd8:	4b88      	ldr	r3, [pc, #544]	@ (80171fc <ip4_input+0x23c>)
 8016fda:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	685b      	ldr	r3, [r3, #4]
 8016fe2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016fe4:	697b      	ldr	r3, [r7, #20]
 8016fe6:	781b      	ldrb	r3, [r3, #0]
 8016fe8:	091b      	lsrs	r3, r3, #4
 8016fea:	b2db      	uxtb	r3, r3
 8016fec:	2b04      	cmp	r3, #4
 8016fee:	d014      	beq.n	801701a <ip4_input+0x5a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016ff0:	6878      	ldr	r0, [r7, #4]
 8016ff2:	f7f7 ffd7 	bl	800efa4 <pbuf_free>
    IP_STATS_INC(ip.err);
 8016ff6:	4b81      	ldr	r3, [pc, #516]	@ (80171fc <ip4_input+0x23c>)
 8016ff8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8016ffc:	3301      	adds	r3, #1
 8016ffe:	b29a      	uxth	r2, r3
 8017000:	4b7e      	ldr	r3, [pc, #504]	@ (80171fc <ip4_input+0x23c>)
 8017002:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    IP_STATS_INC(ip.drop);
 8017006:	4b7d      	ldr	r3, [pc, #500]	@ (80171fc <ip4_input+0x23c>)
 8017008:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801700c:	3301      	adds	r3, #1
 801700e:	b29a      	uxth	r2, r3
 8017010:	4b7a      	ldr	r3, [pc, #488]	@ (80171fc <ip4_input+0x23c>)
 8017012:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017016:	2300      	movs	r3, #0
 8017018:	e195      	b.n	8017346 <ip4_input+0x386>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801701a:	697b      	ldr	r3, [r7, #20]
 801701c:	781b      	ldrb	r3, [r3, #0]
 801701e:	f003 030f 	and.w	r3, r3, #15
 8017022:	b2db      	uxtb	r3, r3
 8017024:	009b      	lsls	r3, r3, #2
 8017026:	b2db      	uxtb	r3, r3
 8017028:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801702a:	697b      	ldr	r3, [r7, #20]
 801702c:	885b      	ldrh	r3, [r3, #2]
 801702e:	b29b      	uxth	r3, r3
 8017030:	4618      	mov	r0, r3
 8017032:	f7f6 f91b 	bl	800d26c <lwip_htons>
 8017036:	4603      	mov	r3, r0
 8017038:	837b      	strh	r3, [r7, #26]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	891b      	ldrh	r3, [r3, #8]
 801703e:	8b7a      	ldrh	r2, [r7, #26]
 8017040:	429a      	cmp	r2, r3
 8017042:	d204      	bcs.n	801704e <ip4_input+0x8e>
    pbuf_realloc(p, iphdr_len);
 8017044:	8b7b      	ldrh	r3, [r7, #26]
 8017046:	4619      	mov	r1, r3
 8017048:	6878      	ldr	r0, [r7, #4]
 801704a:	f7f7 fe25 	bl	800ec98 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	895b      	ldrh	r3, [r3, #10]
 8017052:	8a7a      	ldrh	r2, [r7, #18]
 8017054:	429a      	cmp	r2, r3
 8017056:	d807      	bhi.n	8017068 <ip4_input+0xa8>
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	891b      	ldrh	r3, [r3, #8]
 801705c:	8b7a      	ldrh	r2, [r7, #26]
 801705e:	429a      	cmp	r2, r3
 8017060:	d802      	bhi.n	8017068 <ip4_input+0xa8>
 8017062:	8a7b      	ldrh	r3, [r7, #18]
 8017064:	2b13      	cmp	r3, #19
 8017066:	d814      	bhi.n	8017092 <ip4_input+0xd2>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017068:	6878      	ldr	r0, [r7, #4]
 801706a:	f7f7 ff9b 	bl	800efa4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801706e:	4b63      	ldr	r3, [pc, #396]	@ (80171fc <ip4_input+0x23c>)
 8017070:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8017074:	3301      	adds	r3, #1
 8017076:	b29a      	uxth	r2, r3
 8017078:	4b60      	ldr	r3, [pc, #384]	@ (80171fc <ip4_input+0x23c>)
 801707a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    IP_STATS_INC(ip.drop);
 801707e:	4b5f      	ldr	r3, [pc, #380]	@ (80171fc <ip4_input+0x23c>)
 8017080:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8017084:	3301      	adds	r3, #1
 8017086:	b29a      	uxth	r2, r3
 8017088:	4b5c      	ldr	r3, [pc, #368]	@ (80171fc <ip4_input+0x23c>)
 801708a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801708e:	2300      	movs	r3, #0
 8017090:	e159      	b.n	8017346 <ip4_input+0x386>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8017092:	8a7b      	ldrh	r3, [r7, #18]
 8017094:	4619      	mov	r1, r3
 8017096:	6978      	ldr	r0, [r7, #20]
 8017098:	f7f6 f974 	bl	800d384 <inet_chksum>
 801709c:	4603      	mov	r3, r0
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d014      	beq.n	80170cc <ip4_input+0x10c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 80170a2:	6878      	ldr	r0, [r7, #4]
 80170a4:	f7f7 ff7e 	bl	800efa4 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
 80170a8:	4b54      	ldr	r3, [pc, #336]	@ (80171fc <ip4_input+0x23c>)
 80170aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80170ae:	3301      	adds	r3, #1
 80170b0:	b29a      	uxth	r2, r3
 80170b2:	4b52      	ldr	r3, [pc, #328]	@ (80171fc <ip4_input+0x23c>)
 80170b4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
      IP_STATS_INC(ip.drop);
 80170b8:	4b50      	ldr	r3, [pc, #320]	@ (80171fc <ip4_input+0x23c>)
 80170ba:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 80170be:	3301      	adds	r3, #1
 80170c0:	b29a      	uxth	r2, r3
 80170c2:	4b4e      	ldr	r3, [pc, #312]	@ (80171fc <ip4_input+0x23c>)
 80170c4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 80170c8:	2300      	movs	r3, #0
 80170ca:	e13c      	b.n	8017346 <ip4_input+0x386>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80170cc:	697b      	ldr	r3, [r7, #20]
 80170ce:	691b      	ldr	r3, [r3, #16]
 80170d0:	4a4b      	ldr	r2, [pc, #300]	@ (8017200 <ip4_input+0x240>)
 80170d2:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80170d4:	697b      	ldr	r3, [r7, #20]
 80170d6:	68db      	ldr	r3, [r3, #12]
 80170d8:	4a49      	ldr	r2, [pc, #292]	@ (8017200 <ip4_input+0x240>)
 80170da:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80170dc:	4b48      	ldr	r3, [pc, #288]	@ (8017200 <ip4_input+0x240>)
 80170de:	695b      	ldr	r3, [r3, #20]
 80170e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80170e4:	2be0      	cmp	r3, #224	@ 0xe0
 80170e6:	d120      	bne.n	801712a <ip4_input+0x16a>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 80170e8:	683b      	ldr	r3, [r7, #0]
 80170ea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80170ee:	f003 0320 	and.w	r3, r3, #32
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d016      	beq.n	8017124 <ip4_input+0x164>
 80170f6:	4943      	ldr	r1, [pc, #268]	@ (8017204 <ip4_input+0x244>)
 80170f8:	6838      	ldr	r0, [r7, #0]
 80170fa:	f7ff fbe2 	bl	80168c2 <igmp_lookfor_group>
 80170fe:	4603      	mov	r3, r0
 8017100:	2b00      	cmp	r3, #0
 8017102:	d00f      	beq.n	8017124 <ip4_input+0x164>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
 8017104:	4b40      	ldr	r3, [pc, #256]	@ (8017208 <ip4_input+0x248>)
 8017106:	60bb      	str	r3, [r7, #8]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 8017108:	4b3d      	ldr	r3, [pc, #244]	@ (8017200 <ip4_input+0x240>)
 801710a:	695a      	ldr	r2, [r3, #20]
 801710c:	68bb      	ldr	r3, [r7, #8]
 801710e:	429a      	cmp	r2, r3
 8017110:	d105      	bne.n	801711e <ip4_input+0x15e>
          ip4_addr_isany(ip4_current_src_addr())) {
 8017112:	4b3b      	ldr	r3, [pc, #236]	@ (8017200 <ip4_input+0x240>)
 8017114:	691b      	ldr	r3, [r3, #16]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d101      	bne.n	801711e <ip4_input+0x15e>
        check_ip_src = 0;
 801711a:	2300      	movs	r3, #0
 801711c:	60fb      	str	r3, [r7, #12]
      }
      netif = inp;
 801711e:	683b      	ldr	r3, [r7, #0]
 8017120:	61fb      	str	r3, [r7, #28]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 8017122:	e02a      	b.n	801717a <ip4_input+0x1ba>
    } else {
      netif = NULL;
 8017124:	2300      	movs	r3, #0
 8017126:	61fb      	str	r3, [r7, #28]
 8017128:	e027      	b.n	801717a <ip4_input+0x1ba>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801712a:	6838      	ldr	r0, [r7, #0]
 801712c:	f7ff ff1e 	bl	8016f6c <ip4_input_accept>
 8017130:	4603      	mov	r3, r0
 8017132:	2b00      	cmp	r3, #0
 8017134:	d002      	beq.n	801713c <ip4_input+0x17c>
      netif = inp;
 8017136:	683b      	ldr	r3, [r7, #0]
 8017138:	61fb      	str	r3, [r7, #28]
 801713a:	e01e      	b.n	801717a <ip4_input+0x1ba>
    } else {
      netif = NULL;
 801713c:	2300      	movs	r3, #0
 801713e:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017140:	4b2f      	ldr	r3, [pc, #188]	@ (8017200 <ip4_input+0x240>)
 8017142:	695b      	ldr	r3, [r3, #20]
 8017144:	b2db      	uxtb	r3, r3
 8017146:	2b7f      	cmp	r3, #127	@ 0x7f
 8017148:	d017      	beq.n	801717a <ip4_input+0x1ba>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801714a:	4b30      	ldr	r3, [pc, #192]	@ (801720c <ip4_input+0x24c>)
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	61fb      	str	r3, [r7, #28]
 8017150:	e00e      	b.n	8017170 <ip4_input+0x1b0>
          if (netif == inp) {
 8017152:	69fa      	ldr	r2, [r7, #28]
 8017154:	683b      	ldr	r3, [r7, #0]
 8017156:	429a      	cmp	r2, r3
 8017158:	d006      	beq.n	8017168 <ip4_input+0x1a8>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801715a:	69f8      	ldr	r0, [r7, #28]
 801715c:	f7ff ff06 	bl	8016f6c <ip4_input_accept>
 8017160:	4603      	mov	r3, r0
 8017162:	2b00      	cmp	r3, #0
 8017164:	d108      	bne.n	8017178 <ip4_input+0x1b8>
 8017166:	e000      	b.n	801716a <ip4_input+0x1aa>
            continue;
 8017168:	bf00      	nop
        NETIF_FOREACH(netif) {
 801716a:	69fb      	ldr	r3, [r7, #28]
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	61fb      	str	r3, [r7, #28]
 8017170:	69fb      	ldr	r3, [r7, #28]
 8017172:	2b00      	cmp	r3, #0
 8017174:	d1ed      	bne.n	8017152 <ip4_input+0x192>
 8017176:	e000      	b.n	801717a <ip4_input+0x1ba>
            break;
 8017178:	bf00      	nop
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d01b      	beq.n	80171b8 <ip4_input+0x1f8>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017180:	4b1f      	ldr	r3, [pc, #124]	@ (8017200 <ip4_input+0x240>)
 8017182:	691b      	ldr	r3, [r3, #16]
 8017184:	6839      	ldr	r1, [r7, #0]
 8017186:	4618      	mov	r0, r3
 8017188:	f000 facc 	bl	8017724 <ip4_addr_isbroadcast_u32>
 801718c:	4603      	mov	r3, r0
 801718e:	2b00      	cmp	r3, #0
 8017190:	d105      	bne.n	801719e <ip4_input+0x1de>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017192:	4b1b      	ldr	r3, [pc, #108]	@ (8017200 <ip4_input+0x240>)
 8017194:	691b      	ldr	r3, [r3, #16]
 8017196:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801719a:	2be0      	cmp	r3, #224	@ 0xe0
 801719c:	d10c      	bne.n	80171b8 <ip4_input+0x1f8>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801719e:	6878      	ldr	r0, [r7, #4]
 80171a0:	f7f7 ff00 	bl	800efa4 <pbuf_free>
      IP_STATS_INC(ip.drop);
 80171a4:	4b15      	ldr	r3, [pc, #84]	@ (80171fc <ip4_input+0x23c>)
 80171a6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 80171aa:	3301      	adds	r3, #1
 80171ac:	b29a      	uxth	r2, r3
 80171ae:	4b13      	ldr	r3, [pc, #76]	@ (80171fc <ip4_input+0x23c>)
 80171b0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80171b4:	2300      	movs	r3, #0
 80171b6:	e0c6      	b.n	8017346 <ip4_input+0x386>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80171b8:	69fb      	ldr	r3, [r7, #28]
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d10c      	bne.n	80171d8 <ip4_input+0x218>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 80171be:	4b0f      	ldr	r3, [pc, #60]	@ (80171fc <ip4_input+0x23c>)
 80171c0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 80171c4:	3301      	adds	r3, #1
 80171c6:	b29a      	uxth	r2, r3
 80171c8:	4b0c      	ldr	r3, [pc, #48]	@ (80171fc <ip4_input+0x23c>)
 80171ca:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80171ce:	6878      	ldr	r0, [r7, #4]
 80171d0:	f7f7 fee8 	bl	800efa4 <pbuf_free>
    return ERR_OK;
 80171d4:	2300      	movs	r3, #0
 80171d6:	e0b6      	b.n	8017346 <ip4_input+0x386>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80171d8:	697b      	ldr	r3, [r7, #20]
 80171da:	88db      	ldrh	r3, [r3, #6]
 80171dc:	b29b      	uxth	r3, r3
 80171de:	461a      	mov	r2, r3
 80171e0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80171e4:	4013      	ands	r3, r2
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d015      	beq.n	8017216 <ip4_input+0x256>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80171ea:	6878      	ldr	r0, [r7, #4]
 80171ec:	f000 fde8 	bl	8017dc0 <ip4_reass>
 80171f0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d10b      	bne.n	8017210 <ip4_input+0x250>
      return ERR_OK;
 80171f8:	2300      	movs	r3, #0
 80171fa:	e0a4      	b.n	8017346 <ip4_input+0x386>
 80171fc:	2000ea4c 	.word	0x2000ea4c
 8017200:	20008f60 	.word	0x20008f60
 8017204:	20008f74 	.word	0x20008f74
 8017208:	010000e0 	.word	0x010000e0
 801720c:	2000ea40 	.word	0x2000ea40
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	685b      	ldr	r3, [r3, #4]
 8017214:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017216:	4a4e      	ldr	r2, [pc, #312]	@ (8017350 <ip4_input+0x390>)
 8017218:	69fb      	ldr	r3, [r7, #28]
 801721a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801721c:	4a4c      	ldr	r2, [pc, #304]	@ (8017350 <ip4_input+0x390>)
 801721e:	683b      	ldr	r3, [r7, #0]
 8017220:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017222:	4a4b      	ldr	r2, [pc, #300]	@ (8017350 <ip4_input+0x390>)
 8017224:	697b      	ldr	r3, [r7, #20]
 8017226:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017228:	697b      	ldr	r3, [r7, #20]
 801722a:	781b      	ldrb	r3, [r3, #0]
 801722c:	f003 030f 	and.w	r3, r3, #15
 8017230:	b2db      	uxtb	r3, r3
 8017232:	009b      	lsls	r3, r3, #2
 8017234:	b2db      	uxtb	r3, r3
 8017236:	461a      	mov	r2, r3
 8017238:	4b45      	ldr	r3, [pc, #276]	@ (8017350 <ip4_input+0x390>)
 801723a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801723c:	8a7b      	ldrh	r3, [r7, #18]
 801723e:	4619      	mov	r1, r3
 8017240:	6878      	ldr	r0, [r7, #4]
 8017242:	f7f7 fe29 	bl	800ee98 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017246:	697b      	ldr	r3, [r7, #20]
 8017248:	7a5b      	ldrb	r3, [r3, #9]
 801724a:	3b01      	subs	r3, #1
 801724c:	2b10      	cmp	r3, #16
 801724e:	d83a      	bhi.n	80172c6 <ip4_input+0x306>
 8017250:	a201      	add	r2, pc, #4	@ (adr r2, 8017258 <ip4_input+0x298>)
 8017252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017256:	bf00      	nop
 8017258:	080172b1 	.word	0x080172b1
 801725c:	080172bb 	.word	0x080172bb
 8017260:	080172c7 	.word	0x080172c7
 8017264:	080172c7 	.word	0x080172c7
 8017268:	080172c7 	.word	0x080172c7
 801726c:	080172a7 	.word	0x080172a7
 8017270:	080172c7 	.word	0x080172c7
 8017274:	080172c7 	.word	0x080172c7
 8017278:	080172c7 	.word	0x080172c7
 801727c:	080172c7 	.word	0x080172c7
 8017280:	080172c7 	.word	0x080172c7
 8017284:	080172c7 	.word	0x080172c7
 8017288:	080172c7 	.word	0x080172c7
 801728c:	080172c7 	.word	0x080172c7
 8017290:	080172c7 	.word	0x080172c7
 8017294:	080172c7 	.word	0x080172c7
 8017298:	0801729d 	.word	0x0801729d
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801729c:	6839      	ldr	r1, [r7, #0]
 801729e:	6878      	ldr	r0, [r7, #4]
 80172a0:	f7fd fd56 	bl	8014d50 <udp_input>
        break;
 80172a4:	e03c      	b.n	8017320 <ip4_input+0x360>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80172a6:	6839      	ldr	r1, [r7, #0]
 80172a8:	6878      	ldr	r0, [r7, #4]
 80172aa:	f7f9 fcf1 	bl	8010c90 <tcp_input>
        break;
 80172ae:	e037      	b.n	8017320 <ip4_input+0x360>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80172b0:	6839      	ldr	r1, [r7, #0]
 80172b2:	6878      	ldr	r0, [r7, #4]
 80172b4:	f7ff f8a2 	bl	80163fc <icmp_input>
        break;
 80172b8:	e032      	b.n	8017320 <ip4_input+0x360>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
      case IP_PROTO_IGMP:
        igmp_input(p, inp, ip4_current_dest_addr());
 80172ba:	4a26      	ldr	r2, [pc, #152]	@ (8017354 <ip4_input+0x394>)
 80172bc:	6839      	ldr	r1, [r7, #0]
 80172be:	6878      	ldr	r0, [r7, #4]
 80172c0:	f7ff fb86 	bl	80169d0 <igmp_input>
        break;
 80172c4:	e02c      	b.n	8017320 <ip4_input+0x360>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80172c6:	4b22      	ldr	r3, [pc, #136]	@ (8017350 <ip4_input+0x390>)
 80172c8:	695b      	ldr	r3, [r3, #20]
 80172ca:	69f9      	ldr	r1, [r7, #28]
 80172cc:	4618      	mov	r0, r3
 80172ce:	f000 fa29 	bl	8017724 <ip4_addr_isbroadcast_u32>
 80172d2:	4603      	mov	r3, r0
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d10f      	bne.n	80172f8 <ip4_input+0x338>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80172d8:	4b1d      	ldr	r3, [pc, #116]	@ (8017350 <ip4_input+0x390>)
 80172da:	695b      	ldr	r3, [r3, #20]
 80172dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80172e0:	2be0      	cmp	r3, #224	@ 0xe0
 80172e2:	d009      	beq.n	80172f8 <ip4_input+0x338>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80172e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80172e8:	4619      	mov	r1, r3
 80172ea:	6878      	ldr	r0, [r7, #4]
 80172ec:	f7f7 fe47 	bl	800ef7e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80172f0:	2102      	movs	r1, #2
 80172f2:	6878      	ldr	r0, [r7, #4]
 80172f4:	f7ff f9ea 	bl	80166cc <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 80172f8:	4b17      	ldr	r3, [pc, #92]	@ (8017358 <ip4_input+0x398>)
 80172fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80172fe:	3301      	adds	r3, #1
 8017300:	b29a      	uxth	r2, r3
 8017302:	4b15      	ldr	r3, [pc, #84]	@ (8017358 <ip4_input+0x398>)
 8017304:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
          IP_STATS_INC(ip.drop);
 8017308:	4b13      	ldr	r3, [pc, #76]	@ (8017358 <ip4_input+0x398>)
 801730a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801730e:	3301      	adds	r3, #1
 8017310:	b29a      	uxth	r2, r3
 8017312:	4b11      	ldr	r3, [pc, #68]	@ (8017358 <ip4_input+0x398>)
 8017314:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017318:	6878      	ldr	r0, [r7, #4]
 801731a:	f7f7 fe43 	bl	800efa4 <pbuf_free>
        break;
 801731e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017320:	4b0b      	ldr	r3, [pc, #44]	@ (8017350 <ip4_input+0x390>)
 8017322:	2200      	movs	r2, #0
 8017324:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017326:	4b0a      	ldr	r3, [pc, #40]	@ (8017350 <ip4_input+0x390>)
 8017328:	2200      	movs	r2, #0
 801732a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801732c:	4b08      	ldr	r3, [pc, #32]	@ (8017350 <ip4_input+0x390>)
 801732e:	2200      	movs	r2, #0
 8017330:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017332:	4b07      	ldr	r3, [pc, #28]	@ (8017350 <ip4_input+0x390>)
 8017334:	2200      	movs	r2, #0
 8017336:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017338:	4b05      	ldr	r3, [pc, #20]	@ (8017350 <ip4_input+0x390>)
 801733a:	2200      	movs	r2, #0
 801733c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801733e:	4b04      	ldr	r3, [pc, #16]	@ (8017350 <ip4_input+0x390>)
 8017340:	2200      	movs	r2, #0
 8017342:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017344:	2300      	movs	r3, #0
}
 8017346:	4618      	mov	r0, r3
 8017348:	3720      	adds	r7, #32
 801734a:	46bd      	mov	sp, r7
 801734c:	bd80      	pop	{r7, pc}
 801734e:	bf00      	nop
 8017350:	20008f60 	.word	0x20008f60
 8017354:	20008f74 	.word	0x20008f74
 8017358:	2000ea4c 	.word	0x2000ea4c

0801735c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b08a      	sub	sp, #40	@ 0x28
 8017360:	af06      	add	r7, sp, #24
 8017362:	60f8      	str	r0, [r7, #12]
 8017364:	60b9      	str	r1, [r7, #8]
 8017366:	607a      	str	r2, [r7, #4]
 8017368:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 801736a:	78fa      	ldrb	r2, [r7, #3]
 801736c:	2300      	movs	r3, #0
 801736e:	9304      	str	r3, [sp, #16]
 8017370:	2300      	movs	r3, #0
 8017372:	9303      	str	r3, [sp, #12]
 8017374:	6a3b      	ldr	r3, [r7, #32]
 8017376:	9302      	str	r3, [sp, #8]
 8017378:	7f3b      	ldrb	r3, [r7, #28]
 801737a:	9301      	str	r3, [sp, #4]
 801737c:	7e3b      	ldrb	r3, [r7, #24]
 801737e:	9300      	str	r3, [sp, #0]
 8017380:	4613      	mov	r3, r2
 8017382:	687a      	ldr	r2, [r7, #4]
 8017384:	68b9      	ldr	r1, [r7, #8]
 8017386:	68f8      	ldr	r0, [r7, #12]
 8017388:	f000 f805 	bl	8017396 <ip4_output_if_opt>
 801738c:	4603      	mov	r3, r0
}
 801738e:	4618      	mov	r0, r3
 8017390:	3710      	adds	r7, #16
 8017392:	46bd      	mov	sp, r7
 8017394:	bd80      	pop	{r7, pc}

08017396 <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
 8017396:	b580      	push	{r7, lr}
 8017398:	b08c      	sub	sp, #48	@ 0x30
 801739a:	af06      	add	r7, sp, #24
 801739c:	60f8      	str	r0, [r7, #12]
 801739e:	60b9      	str	r1, [r7, #8]
 80173a0:	607a      	str	r2, [r7, #4]
 80173a2:	70fb      	strb	r3, [r7, #3]
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80173a4:	68bb      	ldr	r3, [r7, #8]
 80173a6:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d009      	beq.n	80173c2 <ip4_output_if_opt+0x2c>
    if (ip4_addr_isany(src)) {
 80173ae:	68bb      	ldr	r3, [r7, #8]
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d003      	beq.n	80173bc <ip4_output_if_opt+0x26>
 80173b4:	68bb      	ldr	r3, [r7, #8]
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d102      	bne.n	80173c2 <ip4_output_if_opt+0x2c>
      src_used = netif_ip4_addr(netif);
 80173bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173be:	3304      	adds	r3, #4
 80173c0:	617b      	str	r3, [r7, #20]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 80173c2:	78fa      	ldrb	r2, [r7, #3]
 80173c4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80173c6:	9304      	str	r3, [sp, #16]
 80173c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173ca:	9303      	str	r3, [sp, #12]
 80173cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173ce:	9302      	str	r3, [sp, #8]
 80173d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80173d4:	9301      	str	r3, [sp, #4]
 80173d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80173da:	9300      	str	r3, [sp, #0]
 80173dc:	4613      	mov	r3, r2
 80173de:	687a      	ldr	r2, [r7, #4]
 80173e0:	6979      	ldr	r1, [r7, #20]
 80173e2:	68f8      	ldr	r0, [r7, #12]
 80173e4:	f000 f806 	bl	80173f4 <ip4_output_if_opt_src>
 80173e8:	4603      	mov	r3, r0
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
 80173ea:	4618      	mov	r0, r3
 80173ec:	3718      	adds	r7, #24
 80173ee:	46bd      	mov	sp, r7
 80173f0:	bd80      	pop	{r7, pc}
	...

080173f4 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                      u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                      u16_t optlen)
{
 80173f4:	b580      	push	{r7, lr}
 80173f6:	b08a      	sub	sp, #40	@ 0x28
 80173f8:	af00      	add	r7, sp, #0
 80173fa:	60f8      	str	r0, [r7, #12]
 80173fc:	60b9      	str	r1, [r7, #8]
 80173fe:	607a      	str	r2, [r7, #4]
 8017400:	70fb      	strb	r3, [r7, #3]
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8017402:	2300      	movs	r3, #0
 8017404:	627b      	str	r3, [r7, #36]	@ 0x24
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	7b9b      	ldrb	r3, [r3, #14]
 801740a:	2b01      	cmp	r3, #1
 801740c:	d006      	beq.n	801741c <ip4_output_if_opt_src+0x28>
 801740e:	4ba6      	ldr	r3, [pc, #664]	@ (80176a8 <ip4_output_if_opt_src+0x2b4>)
 8017410:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8017414:	49a5      	ldr	r1, [pc, #660]	@ (80176ac <ip4_output_if_opt_src+0x2b8>)
 8017416:	48a6      	ldr	r0, [pc, #664]	@ (80176b0 <ip4_output_if_opt_src+0x2bc>)
 8017418:	f002 f924 	bl	8019664 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	2b00      	cmp	r3, #0
 8017420:	f000 8132 	beq.w	8017688 <ip4_output_if_opt_src+0x294>
    u16_t ip_hlen = IP_HLEN;
 8017424:	2314      	movs	r3, #20
 8017426:	847b      	strh	r3, [r7, #34]	@ 0x22
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
 8017428:	2300      	movs	r3, #0
 801742a:	82fb      	strh	r3, [r7, #22]
    if (optlen != 0) {
 801742c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017430:	2b00      	cmp	r3, #0
 8017432:	d05d      	beq.n	80174f0 <ip4_output_if_opt_src+0xfc>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
 8017434:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017438:	2b28      	cmp	r3, #40	@ 0x28
 801743a:	d90a      	bls.n	8017452 <ip4_output_if_opt_src+0x5e>
        /* optlen too long */
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: optlen too long\n"));
        IP_STATS_INC(ip.err);
 801743c:	4b9d      	ldr	r3, [pc, #628]	@ (80176b4 <ip4_output_if_opt_src+0x2c0>)
 801743e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017442:	3301      	adds	r3, #1
 8017444:	b29a      	uxth	r2, r3
 8017446:	4b9b      	ldr	r3, [pc, #620]	@ (80176b4 <ip4_output_if_opt_src+0x2c0>)
 8017448:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_VAL;
 801744c:	f06f 0305 	mvn.w	r3, #5
 8017450:	e161      	b.n	8017716 <ip4_output_if_opt_src+0x322>
      }
      /* round up to a multiple of 4 */
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
 8017452:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017456:	3303      	adds	r3, #3
 8017458:	b29b      	uxth	r3, r3
 801745a:	f023 0303 	bic.w	r3, r3, #3
 801745e:	82fb      	strh	r3, [r7, #22]
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
 8017460:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017462:	8afb      	ldrh	r3, [r7, #22]
 8017464:	4413      	add	r3, r2
 8017466:	847b      	strh	r3, [r7, #34]	@ 0x22
      /* First write in the IP options */
      if (pbuf_add_header(p, optlen_aligned)) {
 8017468:	8afb      	ldrh	r3, [r7, #22]
 801746a:	4619      	mov	r1, r3
 801746c:	68f8      	ldr	r0, [r7, #12]
 801746e:	f7f7 fd03 	bl	800ee78 <pbuf_add_header>
 8017472:	4603      	mov	r3, r0
 8017474:	2b00      	cmp	r3, #0
 8017476:	d00a      	beq.n	801748e <ip4_output_if_opt_src+0x9a>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
 8017478:	4b8e      	ldr	r3, [pc, #568]	@ (80176b4 <ip4_output_if_opt_src+0x2c0>)
 801747a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801747e:	3301      	adds	r3, #1
 8017480:	b29a      	uxth	r2, r3
 8017482:	4b8c      	ldr	r3, [pc, #560]	@ (80176b4 <ip4_output_if_opt_src+0x2c0>)
 8017484:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
 8017488:	f06f 0301 	mvn.w	r3, #1
 801748c:	e143      	b.n	8017716 <ip4_output_if_opt_src+0x322>
      }
      MEMCPY(p->payload, ip_options, optlen);
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	685b      	ldr	r3, [r3, #4]
 8017492:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8017496:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017498:	4618      	mov	r0, r3
 801749a:	f002 fb88 	bl	8019bae <memcpy>
      if (optlen < optlen_aligned) {
 801749e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80174a2:	8afb      	ldrh	r3, [r7, #22]
 80174a4:	429a      	cmp	r2, r3
 80174a6:	d20c      	bcs.n	80174c2 <ip4_output_if_opt_src+0xce>
        /* zero the remaining bytes */
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	685a      	ldr	r2, [r3, #4]
 80174ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80174b0:	18d0      	adds	r0, r2, r3
 80174b2:	8afa      	ldrh	r2, [r7, #22]
 80174b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80174b8:	1ad3      	subs	r3, r2, r3
 80174ba:	461a      	mov	r2, r3
 80174bc:	2100      	movs	r1, #0
 80174be:	f002 faa3 	bl	8019a08 <memset>
      }
#if CHECKSUM_GEN_IP_INLINE
      for (i = 0; i < optlen_aligned / 2; i++) {
 80174c2:	2300      	movs	r3, #0
 80174c4:	61fb      	str	r3, [r7, #28]
 80174c6:	e00c      	b.n	80174e2 <ip4_output_if_opt_src+0xee>
        chk_sum += ((u16_t *)p->payload)[i];
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	685a      	ldr	r2, [r3, #4]
 80174cc:	69fb      	ldr	r3, [r7, #28]
 80174ce:	005b      	lsls	r3, r3, #1
 80174d0:	4413      	add	r3, r2
 80174d2:	881b      	ldrh	r3, [r3, #0]
 80174d4:	461a      	mov	r2, r3
 80174d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174d8:	4413      	add	r3, r2
 80174da:	627b      	str	r3, [r7, #36]	@ 0x24
      for (i = 0; i < optlen_aligned / 2; i++) {
 80174dc:	69fb      	ldr	r3, [r7, #28]
 80174de:	3301      	adds	r3, #1
 80174e0:	61fb      	str	r3, [r7, #28]
 80174e2:	8afb      	ldrh	r3, [r7, #22]
 80174e4:	085b      	lsrs	r3, r3, #1
 80174e6:	b29b      	uxth	r3, r3
 80174e8:	461a      	mov	r2, r3
 80174ea:	69fb      	ldr	r3, [r7, #28]
 80174ec:	4293      	cmp	r3, r2
 80174ee:	dbeb      	blt.n	80174c8 <ip4_output_if_opt_src+0xd4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80174f0:	2114      	movs	r1, #20
 80174f2:	68f8      	ldr	r0, [r7, #12]
 80174f4:	f7f7 fcc0 	bl	800ee78 <pbuf_add_header>
 80174f8:	4603      	mov	r3, r0
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d00a      	beq.n	8017514 <ip4_output_if_opt_src+0x120>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 80174fe:	4b6d      	ldr	r3, [pc, #436]	@ (80176b4 <ip4_output_if_opt_src+0x2c0>)
 8017500:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017504:	3301      	adds	r3, #1
 8017506:	b29a      	uxth	r2, r3
 8017508:	4b6a      	ldr	r3, [pc, #424]	@ (80176b4 <ip4_output_if_opt_src+0x2c0>)
 801750a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801750e:	f06f 0301 	mvn.w	r3, #1
 8017512:	e100      	b.n	8017716 <ip4_output_if_opt_src+0x322>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	685b      	ldr	r3, [r3, #4]
 8017518:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801751a:	68fb      	ldr	r3, [r7, #12]
 801751c:	895b      	ldrh	r3, [r3, #10]
 801751e:	2b13      	cmp	r3, #19
 8017520:	d806      	bhi.n	8017530 <ip4_output_if_opt_src+0x13c>
 8017522:	4b61      	ldr	r3, [pc, #388]	@ (80176a8 <ip4_output_if_opt_src+0x2b4>)
 8017524:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8017528:	4963      	ldr	r1, [pc, #396]	@ (80176b8 <ip4_output_if_opt_src+0x2c4>)
 801752a:	4861      	ldr	r0, [pc, #388]	@ (80176b0 <ip4_output_if_opt_src+0x2bc>)
 801752c:	f002 f89a 	bl	8019664 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017530:	69bb      	ldr	r3, [r7, #24]
 8017532:	78fa      	ldrb	r2, [r7, #3]
 8017534:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017536:	69bb      	ldr	r3, [r7, #24]
 8017538:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 801753c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801753e:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8017542:	78fb      	ldrb	r3, [r7, #3]
 8017544:	021b      	lsls	r3, r3, #8
 8017546:	4313      	orrs	r3, r2
 8017548:	b21b      	sxth	r3, r3
 801754a:	021b      	lsls	r3, r3, #8
 801754c:	b21a      	sxth	r2, r3
 801754e:	f897 1034 	ldrb.w	r1, [r7, #52]	@ 0x34
 8017552:	78fb      	ldrb	r3, [r7, #3]
 8017554:	021b      	lsls	r3, r3, #8
 8017556:	430b      	orrs	r3, r1
 8017558:	121b      	asrs	r3, r3, #8
 801755a:	b21b      	sxth	r3, r3
 801755c:	b2db      	uxtb	r3, r3
 801755e:	b21b      	sxth	r3, r3
 8017560:	4313      	orrs	r3, r2
 8017562:	b21b      	sxth	r3, r3
 8017564:	b29b      	uxth	r3, r3
 8017566:	461a      	mov	r2, r3
 8017568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801756a:	4413      	add	r3, r2
 801756c:	627b      	str	r3, [r7, #36]	@ 0x24
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	681a      	ldr	r2, [r3, #0]
 8017572:	69bb      	ldr	r3, [r7, #24]
 8017574:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8017576:	69bb      	ldr	r3, [r7, #24]
 8017578:	691b      	ldr	r3, [r3, #16]
 801757a:	b29b      	uxth	r3, r3
 801757c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801757e:	4413      	add	r3, r2
 8017580:	627b      	str	r3, [r7, #36]	@ 0x24
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8017582:	69bb      	ldr	r3, [r7, #24]
 8017584:	691b      	ldr	r3, [r3, #16]
 8017586:	0c1b      	lsrs	r3, r3, #16
 8017588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801758a:	4413      	add	r3, r2
 801758c:	627b      	str	r3, [r7, #36]	@ 0x24
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801758e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017590:	089b      	lsrs	r3, r3, #2
 8017592:	b29b      	uxth	r3, r3
 8017594:	b2db      	uxtb	r3, r3
 8017596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801759a:	b2da      	uxtb	r2, r3
 801759c:	69bb      	ldr	r3, [r7, #24]
 801759e:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80175a0:	69bb      	ldr	r3, [r7, #24]
 80175a2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80175a6:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 80175a8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80175ac:	69bb      	ldr	r3, [r7, #24]
 80175ae:	781b      	ldrb	r3, [r3, #0]
 80175b0:	021b      	lsls	r3, r3, #8
 80175b2:	4313      	orrs	r3, r2
 80175b4:	b21b      	sxth	r3, r3
 80175b6:	021b      	lsls	r3, r3, #8
 80175b8:	b21a      	sxth	r2, r3
 80175ba:	f897 1030 	ldrb.w	r1, [r7, #48]	@ 0x30
 80175be:	69bb      	ldr	r3, [r7, #24]
 80175c0:	781b      	ldrb	r3, [r3, #0]
 80175c2:	021b      	lsls	r3, r3, #8
 80175c4:	430b      	orrs	r3, r1
 80175c6:	121b      	asrs	r3, r3, #8
 80175c8:	b21b      	sxth	r3, r3
 80175ca:	b2db      	uxtb	r3, r3
 80175cc:	b21b      	sxth	r3, r3
 80175ce:	4313      	orrs	r3, r2
 80175d0:	b21b      	sxth	r3, r3
 80175d2:	b29b      	uxth	r3, r3
 80175d4:	461a      	mov	r2, r3
 80175d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175d8:	4413      	add	r3, r2
 80175da:	627b      	str	r3, [r7, #36]	@ 0x24
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	891b      	ldrh	r3, [r3, #8]
 80175e0:	4618      	mov	r0, r3
 80175e2:	f7f5 fe43 	bl	800d26c <lwip_htons>
 80175e6:	4603      	mov	r3, r0
 80175e8:	461a      	mov	r2, r3
 80175ea:	69bb      	ldr	r3, [r7, #24]
 80175ec:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 80175ee:	69bb      	ldr	r3, [r7, #24]
 80175f0:	885b      	ldrh	r3, [r3, #2]
 80175f2:	b29b      	uxth	r3, r3
 80175f4:	461a      	mov	r2, r3
 80175f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175f8:	4413      	add	r3, r2
 80175fa:	627b      	str	r3, [r7, #36]	@ 0x24
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80175fc:	69bb      	ldr	r3, [r7, #24]
 80175fe:	2200      	movs	r2, #0
 8017600:	719a      	strb	r2, [r3, #6]
 8017602:	2200      	movs	r2, #0
 8017604:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017606:	4b2d      	ldr	r3, [pc, #180]	@ (80176bc <ip4_output_if_opt_src+0x2c8>)
 8017608:	881b      	ldrh	r3, [r3, #0]
 801760a:	4618      	mov	r0, r3
 801760c:	f7f5 fe2e 	bl	800d26c <lwip_htons>
 8017610:	4603      	mov	r3, r0
 8017612:	461a      	mov	r2, r3
 8017614:	69bb      	ldr	r3, [r7, #24]
 8017616:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8017618:	69bb      	ldr	r3, [r7, #24]
 801761a:	889b      	ldrh	r3, [r3, #4]
 801761c:	b29b      	uxth	r3, r3
 801761e:	461a      	mov	r2, r3
 8017620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017622:	4413      	add	r3, r2
 8017624:	627b      	str	r3, [r7, #36]	@ 0x24
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017626:	4b25      	ldr	r3, [pc, #148]	@ (80176bc <ip4_output_if_opt_src+0x2c8>)
 8017628:	881b      	ldrh	r3, [r3, #0]
 801762a:	3301      	adds	r3, #1
 801762c:	b29a      	uxth	r2, r3
 801762e:	4b23      	ldr	r3, [pc, #140]	@ (80176bc <ip4_output_if_opt_src+0x2c8>)
 8017630:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017632:	68bb      	ldr	r3, [r7, #8]
 8017634:	2b00      	cmp	r3, #0
 8017636:	d104      	bne.n	8017642 <ip4_output_if_opt_src+0x24e>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017638:	4b21      	ldr	r3, [pc, #132]	@ (80176c0 <ip4_output_if_opt_src+0x2cc>)
 801763a:	681a      	ldr	r2, [r3, #0]
 801763c:	69bb      	ldr	r3, [r7, #24]
 801763e:	60da      	str	r2, [r3, #12]
 8017640:	e003      	b.n	801764a <ip4_output_if_opt_src+0x256>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017642:	68bb      	ldr	r3, [r7, #8]
 8017644:	681a      	ldr	r2, [r3, #0]
 8017646:	69bb      	ldr	r3, [r7, #24]
 8017648:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 801764a:	69bb      	ldr	r3, [r7, #24]
 801764c:	68db      	ldr	r3, [r3, #12]
 801764e:	b29b      	uxth	r3, r3
 8017650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017652:	4413      	add	r3, r2
 8017654:	627b      	str	r3, [r7, #36]	@ 0x24
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8017656:	69bb      	ldr	r3, [r7, #24]
 8017658:	68db      	ldr	r3, [r3, #12]
 801765a:	0c1b      	lsrs	r3, r3, #16
 801765c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801765e:	4413      	add	r3, r2
 8017660:	627b      	str	r3, [r7, #36]	@ 0x24
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8017662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017664:	0c1a      	lsrs	r2, r3, #16
 8017666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017668:	b29b      	uxth	r3, r3
 801766a:	4413      	add	r3, r2
 801766c:	627b      	str	r3, [r7, #36]	@ 0x24
    chk_sum = (chk_sum >> 16) + chk_sum;
 801766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017670:	0c1b      	lsrs	r3, r3, #16
 8017672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017674:	4413      	add	r3, r2
 8017676:	627b      	str	r3, [r7, #36]	@ 0x24
    chk_sum = ~chk_sum;
 8017678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801767a:	43db      	mvns	r3, r3
 801767c:	627b      	str	r3, [r7, #36]	@ 0x24
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 801767e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017680:	b29a      	uxth	r2, r3
 8017682:	69bb      	ldr	r3, [r7, #24]
 8017684:	815a      	strh	r2, [r3, #10]
 8017686:	e026      	b.n	80176d6 <ip4_output_if_opt_src+0x2e2>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	895b      	ldrh	r3, [r3, #10]
 801768c:	2b13      	cmp	r3, #19
 801768e:	d819      	bhi.n	80176c4 <ip4_output_if_opt_src+0x2d0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 8017690:	4b08      	ldr	r3, [pc, #32]	@ (80176b4 <ip4_output_if_opt_src+0x2c0>)
 8017692:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017696:	3301      	adds	r3, #1
 8017698:	b29a      	uxth	r2, r3
 801769a:	4b06      	ldr	r3, [pc, #24]	@ (80176b4 <ip4_output_if_opt_src+0x2c0>)
 801769c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80176a0:	f06f 0301 	mvn.w	r3, #1
 80176a4:	e037      	b.n	8017716 <ip4_output_if_opt_src+0x322>
 80176a6:	bf00      	nop
 80176a8:	0801ec3c 	.word	0x0801ec3c
 80176ac:	0801ec70 	.word	0x0801ec70
 80176b0:	0801ec7c 	.word	0x0801ec7c
 80176b4:	2000ea4c 	.word	0x2000ea4c
 80176b8:	0801eca4 	.word	0x0801eca4
 80176bc:	2000eccc 	.word	0x2000eccc
 80176c0:	0801f318 	.word	0x0801f318
    }
    iphdr = (struct ip_hdr *)p->payload;
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	685b      	ldr	r3, [r3, #4]
 80176c8:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80176ca:	69bb      	ldr	r3, [r7, #24]
 80176cc:	691b      	ldr	r3, [r3, #16]
 80176ce:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 80176d0:	f107 0310 	add.w	r3, r7, #16
 80176d4:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 80176d6:	4b12      	ldr	r3, [pc, #72]	@ (8017720 <ip4_output_if_opt_src+0x32c>)
 80176d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80176dc:	3301      	adds	r3, #1
 80176de:	b29a      	uxth	r2, r3
 80176e0:	4b0f      	ldr	r3, [pc, #60]	@ (8017720 <ip4_output_if_opt_src+0x32c>)
 80176e2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80176e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80176e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d00c      	beq.n	8017708 <ip4_output_if_opt_src+0x314>
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	891a      	ldrh	r2, [r3, #8]
 80176f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80176f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80176f6:	429a      	cmp	r2, r3
 80176f8:	d906      	bls.n	8017708 <ip4_output_if_opt_src+0x314>
    return ip4_frag(p, netif, dest);
 80176fa:	687a      	ldr	r2, [r7, #4]
 80176fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80176fe:	68f8      	ldr	r0, [r7, #12]
 8017700:	f000 fd78 	bl	80181f4 <ip4_frag>
 8017704:	4603      	mov	r3, r0
 8017706:	e006      	b.n	8017716 <ip4_output_if_opt_src+0x322>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801770a:	695b      	ldr	r3, [r3, #20]
 801770c:	687a      	ldr	r2, [r7, #4]
 801770e:	68f9      	ldr	r1, [r7, #12]
 8017710:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017712:	4798      	blx	r3
 8017714:	4603      	mov	r3, r0
}
 8017716:	4618      	mov	r0, r3
 8017718:	3728      	adds	r7, #40	@ 0x28
 801771a:	46bd      	mov	sp, r7
 801771c:	bd80      	pop	{r7, pc}
 801771e:	bf00      	nop
 8017720:	2000ea4c 	.word	0x2000ea4c

08017724 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017724:	b480      	push	{r7}
 8017726:	b085      	sub	sp, #20
 8017728:	af00      	add	r7, sp, #0
 801772a:	6078      	str	r0, [r7, #4]
 801772c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017738:	d002      	beq.n	8017740 <ip4_addr_isbroadcast_u32+0x1c>
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d101      	bne.n	8017744 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017740:	2301      	movs	r3, #1
 8017742:	e02a      	b.n	801779a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017744:	683b      	ldr	r3, [r7, #0]
 8017746:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801774a:	f003 0302 	and.w	r3, r3, #2
 801774e:	2b00      	cmp	r3, #0
 8017750:	d101      	bne.n	8017756 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017752:	2300      	movs	r3, #0
 8017754:	e021      	b.n	801779a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017756:	683b      	ldr	r3, [r7, #0]
 8017758:	3304      	adds	r3, #4
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	687a      	ldr	r2, [r7, #4]
 801775e:	429a      	cmp	r2, r3
 8017760:	d101      	bne.n	8017766 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017762:	2300      	movs	r3, #0
 8017764:	e019      	b.n	801779a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017766:	68fa      	ldr	r2, [r7, #12]
 8017768:	683b      	ldr	r3, [r7, #0]
 801776a:	3304      	adds	r3, #4
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	405a      	eors	r2, r3
 8017770:	683b      	ldr	r3, [r7, #0]
 8017772:	3308      	adds	r3, #8
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	4013      	ands	r3, r2
 8017778:	2b00      	cmp	r3, #0
 801777a:	d10d      	bne.n	8017798 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801777c:	683b      	ldr	r3, [r7, #0]
 801777e:	3308      	adds	r3, #8
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	43da      	mvns	r2, r3
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017788:	683b      	ldr	r3, [r7, #0]
 801778a:	3308      	adds	r3, #8
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017790:	429a      	cmp	r2, r3
 8017792:	d101      	bne.n	8017798 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017794:	2301      	movs	r3, #1
 8017796:	e000      	b.n	801779a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017798:	2300      	movs	r3, #0
  }
}
 801779a:	4618      	mov	r0, r3
 801779c:	3714      	adds	r7, #20
 801779e:	46bd      	mov	sp, r7
 80177a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a4:	4770      	bx	lr
	...

080177a8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80177a8:	b580      	push	{r7, lr}
 80177aa:	b084      	sub	sp, #16
 80177ac:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80177ae:	2300      	movs	r3, #0
 80177b0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80177b2:	4b12      	ldr	r3, [pc, #72]	@ (80177fc <ip_reass_tmr+0x54>)
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80177b8:	e018      	b.n	80177ec <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	7fdb      	ldrb	r3, [r3, #31]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d00b      	beq.n	80177da <ip_reass_tmr+0x32>
      r->timer--;
 80177c2:	68fb      	ldr	r3, [r7, #12]
 80177c4:	7fdb      	ldrb	r3, [r3, #31]
 80177c6:	3b01      	subs	r3, #1
 80177c8:	b2da      	uxtb	r2, r3
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	60fb      	str	r3, [r7, #12]
 80177d8:	e008      	b.n	80177ec <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80177e4:	68b9      	ldr	r1, [r7, #8]
 80177e6:	6878      	ldr	r0, [r7, #4]
 80177e8:	f000 f80a 	bl	8017800 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d1e3      	bne.n	80177ba <ip_reass_tmr+0x12>
    }
  }
}
 80177f2:	bf00      	nop
 80177f4:	bf00      	nop
 80177f6:	3710      	adds	r7, #16
 80177f8:	46bd      	mov	sp, r7
 80177fa:	bd80      	pop	{r7, pc}
 80177fc:	2000ecd4 	.word	0x2000ecd4

08017800 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017800:	b580      	push	{r7, lr}
 8017802:	b088      	sub	sp, #32
 8017804:	af00      	add	r7, sp, #0
 8017806:	6078      	str	r0, [r7, #4]
 8017808:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801780a:	2300      	movs	r3, #0
 801780c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801780e:	683a      	ldr	r2, [r7, #0]
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	429a      	cmp	r2, r3
 8017814:	d105      	bne.n	8017822 <ip_reass_free_complete_datagram+0x22>
 8017816:	4b45      	ldr	r3, [pc, #276]	@ (801792c <ip_reass_free_complete_datagram+0x12c>)
 8017818:	22ab      	movs	r2, #171	@ 0xab
 801781a:	4945      	ldr	r1, [pc, #276]	@ (8017930 <ip_reass_free_complete_datagram+0x130>)
 801781c:	4845      	ldr	r0, [pc, #276]	@ (8017934 <ip_reass_free_complete_datagram+0x134>)
 801781e:	f001 ff21 	bl	8019664 <iprintf>
  if (prev != NULL) {
 8017822:	683b      	ldr	r3, [r7, #0]
 8017824:	2b00      	cmp	r3, #0
 8017826:	d00a      	beq.n	801783e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017828:	683b      	ldr	r3, [r7, #0]
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	687a      	ldr	r2, [r7, #4]
 801782e:	429a      	cmp	r2, r3
 8017830:	d005      	beq.n	801783e <ip_reass_free_complete_datagram+0x3e>
 8017832:	4b3e      	ldr	r3, [pc, #248]	@ (801792c <ip_reass_free_complete_datagram+0x12c>)
 8017834:	22ad      	movs	r2, #173	@ 0xad
 8017836:	4940      	ldr	r1, [pc, #256]	@ (8017938 <ip_reass_free_complete_datagram+0x138>)
 8017838:	483e      	ldr	r0, [pc, #248]	@ (8017934 <ip_reass_free_complete_datagram+0x134>)
 801783a:	f001 ff13 	bl	8019664 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	685b      	ldr	r3, [r3, #4]
 8017842:	685b      	ldr	r3, [r3, #4]
 8017844:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017846:	697b      	ldr	r3, [r7, #20]
 8017848:	889b      	ldrh	r3, [r3, #4]
 801784a:	b29b      	uxth	r3, r3
 801784c:	2b00      	cmp	r3, #0
 801784e:	d12a      	bne.n	80178a6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	685b      	ldr	r3, [r3, #4]
 8017854:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017856:	697b      	ldr	r3, [r7, #20]
 8017858:	681a      	ldr	r2, [r3, #0]
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801785e:	69bb      	ldr	r3, [r7, #24]
 8017860:	6858      	ldr	r0, [r3, #4]
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	3308      	adds	r3, #8
 8017866:	2214      	movs	r2, #20
 8017868:	4619      	mov	r1, r3
 801786a:	f002 f9a0 	bl	8019bae <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801786e:	2101      	movs	r1, #1
 8017870:	69b8      	ldr	r0, [r7, #24]
 8017872:	f7fe ff3b 	bl	80166ec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017876:	69b8      	ldr	r0, [r7, #24]
 8017878:	f7f7 fc22 	bl	800f0c0 <pbuf_clen>
 801787c:	4603      	mov	r3, r0
 801787e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017880:	8bfa      	ldrh	r2, [r7, #30]
 8017882:	8a7b      	ldrh	r3, [r7, #18]
 8017884:	4413      	add	r3, r2
 8017886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801788a:	db05      	blt.n	8017898 <ip_reass_free_complete_datagram+0x98>
 801788c:	4b27      	ldr	r3, [pc, #156]	@ (801792c <ip_reass_free_complete_datagram+0x12c>)
 801788e:	22bc      	movs	r2, #188	@ 0xbc
 8017890:	492a      	ldr	r1, [pc, #168]	@ (801793c <ip_reass_free_complete_datagram+0x13c>)
 8017892:	4828      	ldr	r0, [pc, #160]	@ (8017934 <ip_reass_free_complete_datagram+0x134>)
 8017894:	f001 fee6 	bl	8019664 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017898:	8bfa      	ldrh	r2, [r7, #30]
 801789a:	8a7b      	ldrh	r3, [r7, #18]
 801789c:	4413      	add	r3, r2
 801789e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80178a0:	69b8      	ldr	r0, [r7, #24]
 80178a2:	f7f7 fb7f 	bl	800efa4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	685b      	ldr	r3, [r3, #4]
 80178aa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80178ac:	e01f      	b.n	80178ee <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80178ae:	69bb      	ldr	r3, [r7, #24]
 80178b0:	685b      	ldr	r3, [r3, #4]
 80178b2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80178b4:	69bb      	ldr	r3, [r7, #24]
 80178b6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80178b8:	697b      	ldr	r3, [r7, #20]
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80178be:	68f8      	ldr	r0, [r7, #12]
 80178c0:	f7f7 fbfe 	bl	800f0c0 <pbuf_clen>
 80178c4:	4603      	mov	r3, r0
 80178c6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80178c8:	8bfa      	ldrh	r2, [r7, #30]
 80178ca:	8a7b      	ldrh	r3, [r7, #18]
 80178cc:	4413      	add	r3, r2
 80178ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80178d2:	db05      	blt.n	80178e0 <ip_reass_free_complete_datagram+0xe0>
 80178d4:	4b15      	ldr	r3, [pc, #84]	@ (801792c <ip_reass_free_complete_datagram+0x12c>)
 80178d6:	22cc      	movs	r2, #204	@ 0xcc
 80178d8:	4918      	ldr	r1, [pc, #96]	@ (801793c <ip_reass_free_complete_datagram+0x13c>)
 80178da:	4816      	ldr	r0, [pc, #88]	@ (8017934 <ip_reass_free_complete_datagram+0x134>)
 80178dc:	f001 fec2 	bl	8019664 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80178e0:	8bfa      	ldrh	r2, [r7, #30]
 80178e2:	8a7b      	ldrh	r3, [r7, #18]
 80178e4:	4413      	add	r3, r2
 80178e6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80178e8:	68f8      	ldr	r0, [r7, #12]
 80178ea:	f7f7 fb5b 	bl	800efa4 <pbuf_free>
  while (p != NULL) {
 80178ee:	69bb      	ldr	r3, [r7, #24]
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d1dc      	bne.n	80178ae <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80178f4:	6839      	ldr	r1, [r7, #0]
 80178f6:	6878      	ldr	r0, [r7, #4]
 80178f8:	f000 f8ca 	bl	8017a90 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80178fc:	4b10      	ldr	r3, [pc, #64]	@ (8017940 <ip_reass_free_complete_datagram+0x140>)
 80178fe:	881b      	ldrh	r3, [r3, #0]
 8017900:	8bfa      	ldrh	r2, [r7, #30]
 8017902:	429a      	cmp	r2, r3
 8017904:	d905      	bls.n	8017912 <ip_reass_free_complete_datagram+0x112>
 8017906:	4b09      	ldr	r3, [pc, #36]	@ (801792c <ip_reass_free_complete_datagram+0x12c>)
 8017908:	22d2      	movs	r2, #210	@ 0xd2
 801790a:	490e      	ldr	r1, [pc, #56]	@ (8017944 <ip_reass_free_complete_datagram+0x144>)
 801790c:	4809      	ldr	r0, [pc, #36]	@ (8017934 <ip_reass_free_complete_datagram+0x134>)
 801790e:	f001 fea9 	bl	8019664 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017912:	4b0b      	ldr	r3, [pc, #44]	@ (8017940 <ip_reass_free_complete_datagram+0x140>)
 8017914:	881a      	ldrh	r2, [r3, #0]
 8017916:	8bfb      	ldrh	r3, [r7, #30]
 8017918:	1ad3      	subs	r3, r2, r3
 801791a:	b29a      	uxth	r2, r3
 801791c:	4b08      	ldr	r3, [pc, #32]	@ (8017940 <ip_reass_free_complete_datagram+0x140>)
 801791e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017920:	8bfb      	ldrh	r3, [r7, #30]
}
 8017922:	4618      	mov	r0, r3
 8017924:	3720      	adds	r7, #32
 8017926:	46bd      	mov	sp, r7
 8017928:	bd80      	pop	{r7, pc}
 801792a:	bf00      	nop
 801792c:	0801ecd4 	.word	0x0801ecd4
 8017930:	0801ed10 	.word	0x0801ed10
 8017934:	0801ed1c 	.word	0x0801ed1c
 8017938:	0801ed44 	.word	0x0801ed44
 801793c:	0801ed58 	.word	0x0801ed58
 8017940:	2000ecd8 	.word	0x2000ecd8
 8017944:	0801ed78 	.word	0x0801ed78

08017948 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017948:	b580      	push	{r7, lr}
 801794a:	b08a      	sub	sp, #40	@ 0x28
 801794c:	af00      	add	r7, sp, #0
 801794e:	6078      	str	r0, [r7, #4]
 8017950:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017952:	2300      	movs	r3, #0
 8017954:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017956:	2300      	movs	r3, #0
 8017958:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801795a:	2300      	movs	r3, #0
 801795c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801795e:	2300      	movs	r3, #0
 8017960:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017962:	2300      	movs	r3, #0
 8017964:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017966:	4b28      	ldr	r3, [pc, #160]	@ (8017a08 <ip_reass_remove_oldest_datagram+0xc0>)
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801796c:	e030      	b.n	80179d0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801796e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017970:	695a      	ldr	r2, [r3, #20]
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	68db      	ldr	r3, [r3, #12]
 8017976:	429a      	cmp	r2, r3
 8017978:	d10c      	bne.n	8017994 <ip_reass_remove_oldest_datagram+0x4c>
 801797a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801797c:	699a      	ldr	r2, [r3, #24]
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	691b      	ldr	r3, [r3, #16]
 8017982:	429a      	cmp	r2, r3
 8017984:	d106      	bne.n	8017994 <ip_reass_remove_oldest_datagram+0x4c>
 8017986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017988:	899a      	ldrh	r2, [r3, #12]
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	889b      	ldrh	r3, [r3, #4]
 801798e:	b29b      	uxth	r3, r3
 8017990:	429a      	cmp	r2, r3
 8017992:	d014      	beq.n	80179be <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017994:	693b      	ldr	r3, [r7, #16]
 8017996:	3301      	adds	r3, #1
 8017998:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801799a:	6a3b      	ldr	r3, [r7, #32]
 801799c:	2b00      	cmp	r3, #0
 801799e:	d104      	bne.n	80179aa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80179a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179a2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80179a4:	69fb      	ldr	r3, [r7, #28]
 80179a6:	61bb      	str	r3, [r7, #24]
 80179a8:	e009      	b.n	80179be <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80179aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179ac:	7fda      	ldrb	r2, [r3, #31]
 80179ae:	6a3b      	ldr	r3, [r7, #32]
 80179b0:	7fdb      	ldrb	r3, [r3, #31]
 80179b2:	429a      	cmp	r2, r3
 80179b4:	d803      	bhi.n	80179be <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80179b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179b8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80179ba:	69fb      	ldr	r3, [r7, #28]
 80179bc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80179be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d001      	beq.n	80179ca <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80179c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179c8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80179ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80179d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d1cb      	bne.n	801796e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80179d6:	6a3b      	ldr	r3, [r7, #32]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d008      	beq.n	80179ee <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80179dc:	69b9      	ldr	r1, [r7, #24]
 80179de:	6a38      	ldr	r0, [r7, #32]
 80179e0:	f7ff ff0e 	bl	8017800 <ip_reass_free_complete_datagram>
 80179e4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80179e6:	697a      	ldr	r2, [r7, #20]
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	4413      	add	r3, r2
 80179ec:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80179ee:	697a      	ldr	r2, [r7, #20]
 80179f0:	683b      	ldr	r3, [r7, #0]
 80179f2:	429a      	cmp	r2, r3
 80179f4:	da02      	bge.n	80179fc <ip_reass_remove_oldest_datagram+0xb4>
 80179f6:	693b      	ldr	r3, [r7, #16]
 80179f8:	2b01      	cmp	r3, #1
 80179fa:	dcac      	bgt.n	8017956 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80179fc:	697b      	ldr	r3, [r7, #20]
}
 80179fe:	4618      	mov	r0, r3
 8017a00:	3728      	adds	r7, #40	@ 0x28
 8017a02:	46bd      	mov	sp, r7
 8017a04:	bd80      	pop	{r7, pc}
 8017a06:	bf00      	nop
 8017a08:	2000ecd4 	.word	0x2000ecd4

08017a0c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017a0c:	b580      	push	{r7, lr}
 8017a0e:	b084      	sub	sp, #16
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	6078      	str	r0, [r7, #4]
 8017a14:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017a16:	2004      	movs	r0, #4
 8017a18:	f7f6 fa8e 	bl	800df38 <memp_malloc>
 8017a1c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d116      	bne.n	8017a52 <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017a24:	6839      	ldr	r1, [r7, #0]
 8017a26:	6878      	ldr	r0, [r7, #4]
 8017a28:	f7ff ff8e 	bl	8017948 <ip_reass_remove_oldest_datagram>
 8017a2c:	4602      	mov	r2, r0
 8017a2e:	683b      	ldr	r3, [r7, #0]
 8017a30:	4293      	cmp	r3, r2
 8017a32:	dc03      	bgt.n	8017a3c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017a34:	2004      	movs	r0, #4
 8017a36:	f7f6 fa7f 	bl	800df38 <memp_malloc>
 8017a3a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d107      	bne.n	8017a52 <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 8017a42:	4b11      	ldr	r3, [pc, #68]	@ (8017a88 <ip_reass_enqueue_new_datagram+0x7c>)
 8017a44:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8017a46:	3301      	adds	r3, #1
 8017a48:	b29a      	uxth	r2, r3
 8017a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8017a88 <ip_reass_enqueue_new_datagram+0x7c>)
 8017a4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017a4e:	2300      	movs	r3, #0
 8017a50:	e016      	b.n	8017a80 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017a52:	2220      	movs	r2, #32
 8017a54:	2100      	movs	r1, #0
 8017a56:	68f8      	ldr	r0, [r7, #12]
 8017a58:	f001 ffd6 	bl	8019a08 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	220f      	movs	r2, #15
 8017a60:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017a62:	4b0a      	ldr	r3, [pc, #40]	@ (8017a8c <ip_reass_enqueue_new_datagram+0x80>)
 8017a64:	681a      	ldr	r2, [r3, #0]
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017a6a:	4a08      	ldr	r2, [pc, #32]	@ (8017a8c <ip_reass_enqueue_new_datagram+0x80>)
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	3308      	adds	r3, #8
 8017a74:	2214      	movs	r2, #20
 8017a76:	6879      	ldr	r1, [r7, #4]
 8017a78:	4618      	mov	r0, r3
 8017a7a:	f002 f898 	bl	8019bae <memcpy>
  return ipr;
 8017a7e:	68fb      	ldr	r3, [r7, #12]
}
 8017a80:	4618      	mov	r0, r3
 8017a82:	3710      	adds	r7, #16
 8017a84:	46bd      	mov	sp, r7
 8017a86:	bd80      	pop	{r7, pc}
 8017a88:	2000ea4c 	.word	0x2000ea4c
 8017a8c:	2000ecd4 	.word	0x2000ecd4

08017a90 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b082      	sub	sp, #8
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	6078      	str	r0, [r7, #4]
 8017a98:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017a9a:	4b10      	ldr	r3, [pc, #64]	@ (8017adc <ip_reass_dequeue_datagram+0x4c>)
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	687a      	ldr	r2, [r7, #4]
 8017aa0:	429a      	cmp	r2, r3
 8017aa2:	d104      	bne.n	8017aae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	4a0c      	ldr	r2, [pc, #48]	@ (8017adc <ip_reass_dequeue_datagram+0x4c>)
 8017aaa:	6013      	str	r3, [r2, #0]
 8017aac:	e00d      	b.n	8017aca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017aae:	683b      	ldr	r3, [r7, #0]
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d106      	bne.n	8017ac2 <ip_reass_dequeue_datagram+0x32>
 8017ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8017ae0 <ip_reass_dequeue_datagram+0x50>)
 8017ab6:	f240 1245 	movw	r2, #325	@ 0x145
 8017aba:	490a      	ldr	r1, [pc, #40]	@ (8017ae4 <ip_reass_dequeue_datagram+0x54>)
 8017abc:	480a      	ldr	r0, [pc, #40]	@ (8017ae8 <ip_reass_dequeue_datagram+0x58>)
 8017abe:	f001 fdd1 	bl	8019664 <iprintf>
    prev->next = ipr->next;
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	681a      	ldr	r2, [r3, #0]
 8017ac6:	683b      	ldr	r3, [r7, #0]
 8017ac8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017aca:	6879      	ldr	r1, [r7, #4]
 8017acc:	2004      	movs	r0, #4
 8017ace:	f7f6 faaf 	bl	800e030 <memp_free>
}
 8017ad2:	bf00      	nop
 8017ad4:	3708      	adds	r7, #8
 8017ad6:	46bd      	mov	sp, r7
 8017ad8:	bd80      	pop	{r7, pc}
 8017ada:	bf00      	nop
 8017adc:	2000ecd4 	.word	0x2000ecd4
 8017ae0:	0801ecd4 	.word	0x0801ecd4
 8017ae4:	0801ed9c 	.word	0x0801ed9c
 8017ae8:	0801ed1c 	.word	0x0801ed1c

08017aec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b08c      	sub	sp, #48	@ 0x30
 8017af0:	af00      	add	r7, sp, #0
 8017af2:	60f8      	str	r0, [r7, #12]
 8017af4:	60b9      	str	r1, [r7, #8]
 8017af6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017af8:	2300      	movs	r3, #0
 8017afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017afc:	2301      	movs	r3, #1
 8017afe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017b00:	68bb      	ldr	r3, [r7, #8]
 8017b02:	685b      	ldr	r3, [r3, #4]
 8017b04:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017b06:	69fb      	ldr	r3, [r7, #28]
 8017b08:	885b      	ldrh	r3, [r3, #2]
 8017b0a:	b29b      	uxth	r3, r3
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	f7f5 fbad 	bl	800d26c <lwip_htons>
 8017b12:	4603      	mov	r3, r0
 8017b14:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017b16:	69fb      	ldr	r3, [r7, #28]
 8017b18:	781b      	ldrb	r3, [r3, #0]
 8017b1a:	f003 030f 	and.w	r3, r3, #15
 8017b1e:	b2db      	uxtb	r3, r3
 8017b20:	009b      	lsls	r3, r3, #2
 8017b22:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017b24:	7e7b      	ldrb	r3, [r7, #25]
 8017b26:	b29b      	uxth	r3, r3
 8017b28:	8b7a      	ldrh	r2, [r7, #26]
 8017b2a:	429a      	cmp	r2, r3
 8017b2c:	d202      	bcs.n	8017b34 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8017b32:	e135      	b.n	8017da0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017b34:	7e7b      	ldrb	r3, [r7, #25]
 8017b36:	b29b      	uxth	r3, r3
 8017b38:	8b7a      	ldrh	r2, [r7, #26]
 8017b3a:	1ad3      	subs	r3, r2, r3
 8017b3c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017b3e:	69fb      	ldr	r3, [r7, #28]
 8017b40:	88db      	ldrh	r3, [r3, #6]
 8017b42:	b29b      	uxth	r3, r3
 8017b44:	4618      	mov	r0, r3
 8017b46:	f7f5 fb91 	bl	800d26c <lwip_htons>
 8017b4a:	4603      	mov	r3, r0
 8017b4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017b50:	b29b      	uxth	r3, r3
 8017b52:	00db      	lsls	r3, r3, #3
 8017b54:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017b56:	68bb      	ldr	r3, [r7, #8]
 8017b58:	685b      	ldr	r3, [r3, #4]
 8017b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8017b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b5e:	2200      	movs	r2, #0
 8017b60:	701a      	strb	r2, [r3, #0]
 8017b62:	2200      	movs	r2, #0
 8017b64:	705a      	strb	r2, [r3, #1]
 8017b66:	2200      	movs	r2, #0
 8017b68:	709a      	strb	r2, [r3, #2]
 8017b6a:	2200      	movs	r2, #0
 8017b6c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b70:	8afa      	ldrh	r2, [r7, #22]
 8017b72:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017b74:	8afa      	ldrh	r2, [r7, #22]
 8017b76:	8b7b      	ldrh	r3, [r7, #26]
 8017b78:	4413      	add	r3, r2
 8017b7a:	b29a      	uxth	r2, r3
 8017b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b7e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b82:	88db      	ldrh	r3, [r3, #6]
 8017b84:	b29b      	uxth	r3, r3
 8017b86:	8afa      	ldrh	r2, [r7, #22]
 8017b88:	429a      	cmp	r2, r3
 8017b8a:	d902      	bls.n	8017b92 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8017b90:	e106      	b.n	8017da0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017b92:	68fb      	ldr	r3, [r7, #12]
 8017b94:	685b      	ldr	r3, [r3, #4]
 8017b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8017b98:	e068      	b.n	8017c6c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b9c:	685b      	ldr	r3, [r3, #4]
 8017b9e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ba2:	889b      	ldrh	r3, [r3, #4]
 8017ba4:	b29a      	uxth	r2, r3
 8017ba6:	693b      	ldr	r3, [r7, #16]
 8017ba8:	889b      	ldrh	r3, [r3, #4]
 8017baa:	b29b      	uxth	r3, r3
 8017bac:	429a      	cmp	r2, r3
 8017bae:	d235      	bcs.n	8017c1c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017bb4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d020      	beq.n	8017bfe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bbe:	889b      	ldrh	r3, [r3, #4]
 8017bc0:	b29a      	uxth	r2, r3
 8017bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bc4:	88db      	ldrh	r3, [r3, #6]
 8017bc6:	b29b      	uxth	r3, r3
 8017bc8:	429a      	cmp	r2, r3
 8017bca:	d307      	bcc.n	8017bdc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bce:	88db      	ldrh	r3, [r3, #6]
 8017bd0:	b29a      	uxth	r2, r3
 8017bd2:	693b      	ldr	r3, [r7, #16]
 8017bd4:	889b      	ldrh	r3, [r3, #4]
 8017bd6:	b29b      	uxth	r3, r3
 8017bd8:	429a      	cmp	r2, r3
 8017bda:	d902      	bls.n	8017be2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8017be0:	e0de      	b.n	8017da0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017be4:	68ba      	ldr	r2, [r7, #8]
 8017be6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bea:	88db      	ldrh	r3, [r3, #6]
 8017bec:	b29a      	uxth	r2, r3
 8017bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bf0:	889b      	ldrh	r3, [r3, #4]
 8017bf2:	b29b      	uxth	r3, r3
 8017bf4:	429a      	cmp	r2, r3
 8017bf6:	d03d      	beq.n	8017c74 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017bfc:	e03a      	b.n	8017c74 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c00:	88db      	ldrh	r3, [r3, #6]
 8017c02:	b29a      	uxth	r2, r3
 8017c04:	693b      	ldr	r3, [r7, #16]
 8017c06:	889b      	ldrh	r3, [r3, #4]
 8017c08:	b29b      	uxth	r3, r3
 8017c0a:	429a      	cmp	r2, r3
 8017c0c:	d902      	bls.n	8017c14 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8017c12:	e0c5      	b.n	8017da0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	68ba      	ldr	r2, [r7, #8]
 8017c18:	605a      	str	r2, [r3, #4]
      break;
 8017c1a:	e02b      	b.n	8017c74 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c1e:	889b      	ldrh	r3, [r3, #4]
 8017c20:	b29a      	uxth	r2, r3
 8017c22:	693b      	ldr	r3, [r7, #16]
 8017c24:	889b      	ldrh	r3, [r3, #4]
 8017c26:	b29b      	uxth	r3, r3
 8017c28:	429a      	cmp	r2, r3
 8017c2a:	d102      	bne.n	8017c32 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8017c30:	e0b6      	b.n	8017da0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c34:	889b      	ldrh	r3, [r3, #4]
 8017c36:	b29a      	uxth	r2, r3
 8017c38:	693b      	ldr	r3, [r7, #16]
 8017c3a:	88db      	ldrh	r3, [r3, #6]
 8017c3c:	b29b      	uxth	r3, r3
 8017c3e:	429a      	cmp	r2, r3
 8017c40:	d202      	bcs.n	8017c48 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c42:	f04f 33ff 	mov.w	r3, #4294967295
 8017c46:	e0ab      	b.n	8017da0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d009      	beq.n	8017c62 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c50:	88db      	ldrh	r3, [r3, #6]
 8017c52:	b29a      	uxth	r2, r3
 8017c54:	693b      	ldr	r3, [r7, #16]
 8017c56:	889b      	ldrh	r3, [r3, #4]
 8017c58:	b29b      	uxth	r3, r3
 8017c5a:	429a      	cmp	r2, r3
 8017c5c:	d001      	beq.n	8017c62 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017c5e:	2300      	movs	r3, #0
 8017c60:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017c62:	693b      	ldr	r3, [r7, #16]
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8017c68:	693b      	ldr	r3, [r7, #16]
 8017c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8017c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d193      	bne.n	8017b9a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017c72:	e000      	b.n	8017c76 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017c74:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d12d      	bne.n	8017cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d01c      	beq.n	8017cbc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c84:	88db      	ldrh	r3, [r3, #6]
 8017c86:	b29a      	uxth	r2, r3
 8017c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c8a:	889b      	ldrh	r3, [r3, #4]
 8017c8c:	b29b      	uxth	r3, r3
 8017c8e:	429a      	cmp	r2, r3
 8017c90:	d906      	bls.n	8017ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017c92:	4b45      	ldr	r3, [pc, #276]	@ (8017da8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017c94:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8017c98:	4944      	ldr	r1, [pc, #272]	@ (8017dac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017c9a:	4845      	ldr	r0, [pc, #276]	@ (8017db0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017c9c:	f001 fce2 	bl	8019664 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ca2:	68ba      	ldr	r2, [r7, #8]
 8017ca4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ca8:	88db      	ldrh	r3, [r3, #6]
 8017caa:	b29a      	uxth	r2, r3
 8017cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cae:	889b      	ldrh	r3, [r3, #4]
 8017cb0:	b29b      	uxth	r3, r3
 8017cb2:	429a      	cmp	r2, r3
 8017cb4:	d010      	beq.n	8017cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017cb6:	2300      	movs	r3, #0
 8017cb8:	623b      	str	r3, [r7, #32]
 8017cba:	e00d      	b.n	8017cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017cbc:	68fb      	ldr	r3, [r7, #12]
 8017cbe:	685b      	ldr	r3, [r3, #4]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d006      	beq.n	8017cd2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017cc4:	4b38      	ldr	r3, [pc, #224]	@ (8017da8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017cc6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8017cca:	493a      	ldr	r1, [pc, #232]	@ (8017db4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017ccc:	4838      	ldr	r0, [pc, #224]	@ (8017db0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017cce:	f001 fcc9 	bl	8019664 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017cd2:	68fb      	ldr	r3, [r7, #12]
 8017cd4:	68ba      	ldr	r2, [r7, #8]
 8017cd6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d105      	bne.n	8017cea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	7f9b      	ldrb	r3, [r3, #30]
 8017ce2:	f003 0301 	and.w	r3, r3, #1
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d059      	beq.n	8017d9e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017cea:	6a3b      	ldr	r3, [r7, #32]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d04f      	beq.n	8017d90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	685b      	ldr	r3, [r3, #4]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d006      	beq.n	8017d06 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	685b      	ldr	r3, [r3, #4]
 8017cfc:	685b      	ldr	r3, [r3, #4]
 8017cfe:	889b      	ldrh	r3, [r3, #4]
 8017d00:	b29b      	uxth	r3, r3
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d002      	beq.n	8017d0c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017d06:	2300      	movs	r3, #0
 8017d08:	623b      	str	r3, [r7, #32]
 8017d0a:	e041      	b.n	8017d90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8017d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8017d16:	e012      	b.n	8017d3e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d1a:	685b      	ldr	r3, [r3, #4]
 8017d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8017d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d20:	88db      	ldrh	r3, [r3, #6]
 8017d22:	b29a      	uxth	r2, r3
 8017d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d26:	889b      	ldrh	r3, [r3, #4]
 8017d28:	b29b      	uxth	r3, r3
 8017d2a:	429a      	cmp	r2, r3
 8017d2c:	d002      	beq.n	8017d34 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017d2e:	2300      	movs	r3, #0
 8017d30:	623b      	str	r3, [r7, #32]
            break;
 8017d32:	e007      	b.n	8017d44 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d36:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8017d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8017d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d1e9      	bne.n	8017d18 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017d44:	6a3b      	ldr	r3, [r7, #32]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d022      	beq.n	8017d90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	685b      	ldr	r3, [r3, #4]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d106      	bne.n	8017d60 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017d52:	4b15      	ldr	r3, [pc, #84]	@ (8017da8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d54:	f240 12df 	movw	r2, #479	@ 0x1df
 8017d58:	4917      	ldr	r1, [pc, #92]	@ (8017db8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017d5a:	4815      	ldr	r0, [pc, #84]	@ (8017db0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d5c:	f001 fc82 	bl	8019664 <iprintf>
          LWIP_ASSERT("sanity check",
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	685b      	ldr	r3, [r3, #4]
 8017d64:	685b      	ldr	r3, [r3, #4]
 8017d66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017d68:	429a      	cmp	r2, r3
 8017d6a:	d106      	bne.n	8017d7a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8017da8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d6e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8017d72:	4911      	ldr	r1, [pc, #68]	@ (8017db8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017d74:	480e      	ldr	r0, [pc, #56]	@ (8017db0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d76:	f001 fc75 	bl	8019664 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d006      	beq.n	8017d90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017d82:	4b09      	ldr	r3, [pc, #36]	@ (8017da8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d84:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8017d88:	490c      	ldr	r1, [pc, #48]	@ (8017dbc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017d8a:	4809      	ldr	r0, [pc, #36]	@ (8017db0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d8c:	f001 fc6a 	bl	8019664 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017d90:	6a3b      	ldr	r3, [r7, #32]
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	bf14      	ite	ne
 8017d96:	2301      	movne	r3, #1
 8017d98:	2300      	moveq	r3, #0
 8017d9a:	b2db      	uxtb	r3, r3
 8017d9c:	e000      	b.n	8017da0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017d9e:	2300      	movs	r3, #0
}
 8017da0:	4618      	mov	r0, r3
 8017da2:	3730      	adds	r7, #48	@ 0x30
 8017da4:	46bd      	mov	sp, r7
 8017da6:	bd80      	pop	{r7, pc}
 8017da8:	0801ecd4 	.word	0x0801ecd4
 8017dac:	0801edb8 	.word	0x0801edb8
 8017db0:	0801ed1c 	.word	0x0801ed1c
 8017db4:	0801edd8 	.word	0x0801edd8
 8017db8:	0801ee10 	.word	0x0801ee10
 8017dbc:	0801ee20 	.word	0x0801ee20

08017dc0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b08e      	sub	sp, #56	@ 0x38
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 8017dc8:	4b94      	ldr	r3, [pc, #592]	@ (801801c <ip4_reass+0x25c>)
 8017dca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017dcc:	3301      	adds	r3, #1
 8017dce:	b29a      	uxth	r2, r3
 8017dd0:	4b92      	ldr	r3, [pc, #584]	@ (801801c <ip4_reass+0x25c>)
 8017dd2:	865a      	strh	r2, [r3, #50]	@ 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	685b      	ldr	r3, [r3, #4]
 8017dd8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ddc:	781b      	ldrb	r3, [r3, #0]
 8017dde:	f003 030f 	and.w	r3, r3, #15
 8017de2:	b2db      	uxtb	r3, r3
 8017de4:	009b      	lsls	r3, r3, #2
 8017de6:	b2db      	uxtb	r3, r3
 8017de8:	2b14      	cmp	r3, #20
 8017dea:	d008      	beq.n	8017dfe <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 8017dec:	4b8b      	ldr	r3, [pc, #556]	@ (801801c <ip4_reass+0x25c>)
 8017dee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8017df2:	3301      	adds	r3, #1
 8017df4:	b29a      	uxth	r2, r3
 8017df6:	4b89      	ldr	r3, [pc, #548]	@ (801801c <ip4_reass+0x25c>)
 8017df8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    goto nullreturn;
 8017dfc:	e183      	b.n	8018106 <ip4_reass+0x346>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e00:	88db      	ldrh	r3, [r3, #6]
 8017e02:	b29b      	uxth	r3, r3
 8017e04:	4618      	mov	r0, r3
 8017e06:	f7f5 fa31 	bl	800d26c <lwip_htons>
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017e10:	b29b      	uxth	r3, r3
 8017e12:	00db      	lsls	r3, r3, #3
 8017e14:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e18:	885b      	ldrh	r3, [r3, #2]
 8017e1a:	b29b      	uxth	r3, r3
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	f7f5 fa25 	bl	800d26c <lwip_htons>
 8017e22:	4603      	mov	r3, r0
 8017e24:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e28:	781b      	ldrb	r3, [r3, #0]
 8017e2a:	f003 030f 	and.w	r3, r3, #15
 8017e2e:	b2db      	uxtb	r3, r3
 8017e30:	009b      	lsls	r3, r3, #2
 8017e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8017e36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017e3a:	b29b      	uxth	r3, r3
 8017e3c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017e3e:	429a      	cmp	r2, r3
 8017e40:	f0c0 815e 	bcc.w	8018100 <ip4_reass+0x340>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017e44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017e48:	b29b      	uxth	r3, r3
 8017e4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017e4c:	1ad3      	subs	r3, r2, r3
 8017e4e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017e50:	6878      	ldr	r0, [r7, #4]
 8017e52:	f7f7 f935 	bl	800f0c0 <pbuf_clen>
 8017e56:	4603      	mov	r3, r0
 8017e58:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017e5a:	4b71      	ldr	r3, [pc, #452]	@ (8018020 <ip4_reass+0x260>)
 8017e5c:	881b      	ldrh	r3, [r3, #0]
 8017e5e:	461a      	mov	r2, r3
 8017e60:	8c3b      	ldrh	r3, [r7, #32]
 8017e62:	4413      	add	r3, r2
 8017e64:	2b0a      	cmp	r3, #10
 8017e66:	dd15      	ble.n	8017e94 <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017e68:	8c3b      	ldrh	r3, [r7, #32]
 8017e6a:	4619      	mov	r1, r3
 8017e6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017e6e:	f7ff fd6b 	bl	8017948 <ip_reass_remove_oldest_datagram>
 8017e72:	4603      	mov	r3, r0
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d006      	beq.n	8017e86 <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017e78:	4b69      	ldr	r3, [pc, #420]	@ (8018020 <ip4_reass+0x260>)
 8017e7a:	881b      	ldrh	r3, [r3, #0]
 8017e7c:	461a      	mov	r2, r3
 8017e7e:	8c3b      	ldrh	r3, [r7, #32]
 8017e80:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017e82:	2b0a      	cmp	r3, #10
 8017e84:	dd06      	ble.n	8017e94 <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 8017e86:	4b65      	ldr	r3, [pc, #404]	@ (801801c <ip4_reass+0x25c>)
 8017e88:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8017e8a:	3301      	adds	r3, #1
 8017e8c:	b29a      	uxth	r2, r3
 8017e8e:	4b63      	ldr	r3, [pc, #396]	@ (801801c <ip4_reass+0x25c>)
 8017e90:	879a      	strh	r2, [r3, #60]	@ 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 8017e92:	e138      	b.n	8018106 <ip4_reass+0x346>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017e94:	4b63      	ldr	r3, [pc, #396]	@ (8018024 <ip4_reass+0x264>)
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	633b      	str	r3, [r7, #48]	@ 0x30
 8017e9a:	e01e      	b.n	8017eda <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e9e:	695a      	ldr	r2, [r3, #20]
 8017ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ea2:	68db      	ldr	r3, [r3, #12]
 8017ea4:	429a      	cmp	r2, r3
 8017ea6:	d115      	bne.n	8017ed4 <ip4_reass+0x114>
 8017ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017eaa:	699a      	ldr	r2, [r3, #24]
 8017eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017eae:	691b      	ldr	r3, [r3, #16]
 8017eb0:	429a      	cmp	r2, r3
 8017eb2:	d10f      	bne.n	8017ed4 <ip4_reass+0x114>
 8017eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017eb6:	899a      	ldrh	r2, [r3, #12]
 8017eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017eba:	889b      	ldrh	r3, [r3, #4]
 8017ebc:	b29b      	uxth	r3, r3
 8017ebe:	429a      	cmp	r2, r3
 8017ec0:	d108      	bne.n	8017ed4 <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 8017ec2:	4b56      	ldr	r3, [pc, #344]	@ (801801c <ip4_reass+0x25c>)
 8017ec4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8017ec8:	3301      	adds	r3, #1
 8017eca:	b29a      	uxth	r2, r3
 8017ecc:	4b53      	ldr	r3, [pc, #332]	@ (801801c <ip4_reass+0x25c>)
 8017ece:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      break;
 8017ed2:	e005      	b.n	8017ee0 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	633b      	str	r3, [r7, #48]	@ 0x30
 8017eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d1dd      	bne.n	8017e9c <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 8017ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d109      	bne.n	8017efa <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017ee6:	8c3b      	ldrh	r3, [r7, #32]
 8017ee8:	4619      	mov	r1, r3
 8017eea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017eec:	f7ff fd8e 	bl	8017a0c <ip_reass_enqueue_new_datagram>
 8017ef0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d11c      	bne.n	8017f32 <ip4_reass+0x172>
      goto nullreturn;
 8017ef8:	e105      	b.n	8018106 <ip4_reass+0x346>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017efc:	88db      	ldrh	r3, [r3, #6]
 8017efe:	b29b      	uxth	r3, r3
 8017f00:	4618      	mov	r0, r3
 8017f02:	f7f5 f9b3 	bl	800d26c <lwip_htons>
 8017f06:	4603      	mov	r3, r0
 8017f08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d110      	bne.n	8017f32 <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f12:	89db      	ldrh	r3, [r3, #14]
 8017f14:	4618      	mov	r0, r3
 8017f16:	f7f5 f9a9 	bl	800d26c <lwip_htons>
 8017f1a:	4603      	mov	r3, r0
 8017f1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d006      	beq.n	8017f32 <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f26:	3308      	adds	r3, #8
 8017f28:	2214      	movs	r2, #20
 8017f2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	f001 fe3e 	bl	8019bae <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f34:	88db      	ldrh	r3, [r3, #6]
 8017f36:	b29b      	uxth	r3, r3
 8017f38:	f003 0320 	and.w	r3, r3, #32
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	bf0c      	ite	eq
 8017f40:	2301      	moveq	r3, #1
 8017f42:	2300      	movne	r3, #0
 8017f44:	b2db      	uxtb	r3, r3
 8017f46:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017f48:	69fb      	ldr	r3, [r7, #28]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d00e      	beq.n	8017f6c <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 8017f4e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017f50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017f52:	4413      	add	r3, r2
 8017f54:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017f56:	8b7a      	ldrh	r2, [r7, #26]
 8017f58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017f5a:	429a      	cmp	r2, r3
 8017f5c:	f0c0 80ae 	bcc.w	80180bc <ip4_reass+0x2fc>
 8017f60:	8b7b      	ldrh	r3, [r7, #26]
 8017f62:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8017f66:	4293      	cmp	r3, r2
 8017f68:	f200 80a8 	bhi.w	80180bc <ip4_reass+0x2fc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017f6c:	69fa      	ldr	r2, [r7, #28]
 8017f6e:	6879      	ldr	r1, [r7, #4]
 8017f70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017f72:	f7ff fdbb 	bl	8017aec <ip_reass_chain_frag_into_datagram_and_validate>
 8017f76:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017f78:	697b      	ldr	r3, [r7, #20]
 8017f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f7e:	f000 809f 	beq.w	80180c0 <ip4_reass+0x300>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017f82:	4b27      	ldr	r3, [pc, #156]	@ (8018020 <ip4_reass+0x260>)
 8017f84:	881a      	ldrh	r2, [r3, #0]
 8017f86:	8c3b      	ldrh	r3, [r7, #32]
 8017f88:	4413      	add	r3, r2
 8017f8a:	b29a      	uxth	r2, r3
 8017f8c:	4b24      	ldr	r3, [pc, #144]	@ (8018020 <ip4_reass+0x260>)
 8017f8e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017f90:	69fb      	ldr	r3, [r7, #28]
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d00d      	beq.n	8017fb2 <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 8017f96:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017f98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017f9a:	4413      	add	r3, r2
 8017f9c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fa0:	8a7a      	ldrh	r2, [r7, #18]
 8017fa2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fa6:	7f9b      	ldrb	r3, [r3, #30]
 8017fa8:	f043 0301 	orr.w	r3, r3, #1
 8017fac:	b2da      	uxtb	r2, r3
 8017fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fb0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017fb2:	697b      	ldr	r3, [r7, #20]
 8017fb4:	2b01      	cmp	r3, #1
 8017fb6:	d17f      	bne.n	80180b8 <ip4_reass+0x2f8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fba:	8b9b      	ldrh	r3, [r3, #28]
 8017fbc:	3314      	adds	r3, #20
 8017fbe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fc2:	685b      	ldr	r3, [r3, #4]
 8017fc4:	685b      	ldr	r3, [r3, #4]
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fcc:	685b      	ldr	r3, [r3, #4]
 8017fce:	685b      	ldr	r3, [r3, #4]
 8017fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fd4:	3308      	adds	r3, #8
 8017fd6:	2214      	movs	r2, #20
 8017fd8:	4619      	mov	r1, r3
 8017fda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017fdc:	f001 fde7 	bl	8019bae <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017fe0:	8a3b      	ldrh	r3, [r7, #16]
 8017fe2:	4618      	mov	r0, r3
 8017fe4:	f7f5 f942 	bl	800d26c <lwip_htons>
 8017fe8:	4603      	mov	r3, r0
 8017fea:	461a      	mov	r2, r3
 8017fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ff2:	2200      	movs	r2, #0
 8017ff4:	719a      	strb	r2, [r3, #6]
 8017ff6:	2200      	movs	r2, #0
 8017ff8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ffc:	2200      	movs	r2, #0
 8017ffe:	729a      	strb	r2, [r3, #10]
 8018000:	2200      	movs	r2, #0
 8018002:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8018004:	2114      	movs	r1, #20
 8018006:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018008:	f7f5 f9bc 	bl	800d384 <inet_chksum>
 801800c:	4603      	mov	r3, r0
 801800e:	461a      	mov	r2, r3
 8018010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018012:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018016:	685b      	ldr	r3, [r3, #4]
 8018018:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801801a:	e013      	b.n	8018044 <ip4_reass+0x284>
 801801c:	2000ea4c 	.word	0x2000ea4c
 8018020:	2000ecd8 	.word	0x2000ecd8
 8018024:	2000ecd4 	.word	0x2000ecd4
      iprh = (struct ip_reass_helper *)r->payload;
 8018028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801802a:	685b      	ldr	r3, [r3, #4]
 801802c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801802e:	2114      	movs	r1, #20
 8018030:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018032:	f7f6 ff31 	bl	800ee98 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018036:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018038:	6878      	ldr	r0, [r7, #4]
 801803a:	f7f7 f881 	bl	800f140 <pbuf_cat>
      r = iprh->next_pbuf;
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 8018044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018046:	2b00      	cmp	r3, #0
 8018048:	d1ee      	bne.n	8018028 <ip4_reass+0x268>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801804a:	4b36      	ldr	r3, [pc, #216]	@ (8018124 <ip4_reass+0x364>)
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018050:	429a      	cmp	r2, r3
 8018052:	d102      	bne.n	801805a <ip4_reass+0x29a>
      ipr_prev = NULL;
 8018054:	2300      	movs	r3, #0
 8018056:	637b      	str	r3, [r7, #52]	@ 0x34
 8018058:	e010      	b.n	801807c <ip4_reass+0x2bc>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801805a:	4b32      	ldr	r3, [pc, #200]	@ (8018124 <ip4_reass+0x364>)
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	637b      	str	r3, [r7, #52]	@ 0x34
 8018060:	e007      	b.n	8018072 <ip4_reass+0x2b2>
        if (ipr_prev->next == ipr) {
 8018062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018064:	681b      	ldr	r3, [r3, #0]
 8018066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018068:	429a      	cmp	r2, r3
 801806a:	d006      	beq.n	801807a <ip4_reass+0x2ba>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801806c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	637b      	str	r3, [r7, #52]	@ 0x34
 8018072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018074:	2b00      	cmp	r3, #0
 8018076:	d1f4      	bne.n	8018062 <ip4_reass+0x2a2>
 8018078:	e000      	b.n	801807c <ip4_reass+0x2bc>
          break;
 801807a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801807c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801807e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018080:	f7ff fd06 	bl	8017a90 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018084:	6878      	ldr	r0, [r7, #4]
 8018086:	f7f7 f81b 	bl	800f0c0 <pbuf_clen>
 801808a:	4603      	mov	r3, r0
 801808c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801808e:	4b26      	ldr	r3, [pc, #152]	@ (8018128 <ip4_reass+0x368>)
 8018090:	881b      	ldrh	r3, [r3, #0]
 8018092:	8c3a      	ldrh	r2, [r7, #32]
 8018094:	429a      	cmp	r2, r3
 8018096:	d906      	bls.n	80180a6 <ip4_reass+0x2e6>
 8018098:	4b24      	ldr	r3, [pc, #144]	@ (801812c <ip4_reass+0x36c>)
 801809a:	f240 229b 	movw	r2, #667	@ 0x29b
 801809e:	4924      	ldr	r1, [pc, #144]	@ (8018130 <ip4_reass+0x370>)
 80180a0:	4824      	ldr	r0, [pc, #144]	@ (8018134 <ip4_reass+0x374>)
 80180a2:	f001 fadf 	bl	8019664 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80180a6:	4b20      	ldr	r3, [pc, #128]	@ (8018128 <ip4_reass+0x368>)
 80180a8:	881a      	ldrh	r2, [r3, #0]
 80180aa:	8c3b      	ldrh	r3, [r7, #32]
 80180ac:	1ad3      	subs	r3, r2, r3
 80180ae:	b29a      	uxth	r2, r3
 80180b0:	4b1d      	ldr	r3, [pc, #116]	@ (8018128 <ip4_reass+0x368>)
 80180b2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	e030      	b.n	801811a <ip4_reass+0x35a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80180b8:	2300      	movs	r3, #0
 80180ba:	e02e      	b.n	801811a <ip4_reass+0x35a>
      goto nullreturn_ipr;
 80180bc:	bf00      	nop
 80180be:	e000      	b.n	80180c2 <ip4_reass+0x302>
    goto nullreturn_ipr;
 80180c0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80180c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d106      	bne.n	80180d6 <ip4_reass+0x316>
 80180c8:	4b18      	ldr	r3, [pc, #96]	@ (801812c <ip4_reass+0x36c>)
 80180ca:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80180ce:	491a      	ldr	r1, [pc, #104]	@ (8018138 <ip4_reass+0x378>)
 80180d0:	4818      	ldr	r0, [pc, #96]	@ (8018134 <ip4_reass+0x374>)
 80180d2:	f001 fac7 	bl	8019664 <iprintf>
  if (ipr->p == NULL) {
 80180d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180d8:	685b      	ldr	r3, [r3, #4]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d112      	bne.n	8018104 <ip4_reass+0x344>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80180de:	4b11      	ldr	r3, [pc, #68]	@ (8018124 <ip4_reass+0x364>)
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80180e4:	429a      	cmp	r2, r3
 80180e6:	d006      	beq.n	80180f6 <ip4_reass+0x336>
 80180e8:	4b10      	ldr	r3, [pc, #64]	@ (801812c <ip4_reass+0x36c>)
 80180ea:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80180ee:	4913      	ldr	r1, [pc, #76]	@ (801813c <ip4_reass+0x37c>)
 80180f0:	4810      	ldr	r0, [pc, #64]	@ (8018134 <ip4_reass+0x374>)
 80180f2:	f001 fab7 	bl	8019664 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80180f6:	2100      	movs	r1, #0
 80180f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80180fa:	f7ff fcc9 	bl	8017a90 <ip_reass_dequeue_datagram>
 80180fe:	e002      	b.n	8018106 <ip4_reass+0x346>
    goto nullreturn;
 8018100:	bf00      	nop
 8018102:	e000      	b.n	8018106 <ip4_reass+0x346>
  }

nullreturn:
 8018104:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 8018106:	4b0e      	ldr	r3, [pc, #56]	@ (8018140 <ip4_reass+0x380>)
 8018108:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801810a:	3301      	adds	r3, #1
 801810c:	b29a      	uxth	r2, r3
 801810e:	4b0c      	ldr	r3, [pc, #48]	@ (8018140 <ip4_reass+0x380>)
 8018110:	86da      	strh	r2, [r3, #54]	@ 0x36
  pbuf_free(p);
 8018112:	6878      	ldr	r0, [r7, #4]
 8018114:	f7f6 ff46 	bl	800efa4 <pbuf_free>
  return NULL;
 8018118:	2300      	movs	r3, #0
}
 801811a:	4618      	mov	r0, r3
 801811c:	3738      	adds	r7, #56	@ 0x38
 801811e:	46bd      	mov	sp, r7
 8018120:	bd80      	pop	{r7, pc}
 8018122:	bf00      	nop
 8018124:	2000ecd4 	.word	0x2000ecd4
 8018128:	2000ecd8 	.word	0x2000ecd8
 801812c:	0801ecd4 	.word	0x0801ecd4
 8018130:	0801ee44 	.word	0x0801ee44
 8018134:	0801ed1c 	.word	0x0801ed1c
 8018138:	0801ee60 	.word	0x0801ee60
 801813c:	0801ee6c 	.word	0x0801ee6c
 8018140:	2000ea4c 	.word	0x2000ea4c

08018144 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018144:	b580      	push	{r7, lr}
 8018146:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018148:	2005      	movs	r0, #5
 801814a:	f7f5 fef5 	bl	800df38 <memp_malloc>
 801814e:	4603      	mov	r3, r0
}
 8018150:	4618      	mov	r0, r3
 8018152:	bd80      	pop	{r7, pc}

08018154 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018154:	b580      	push	{r7, lr}
 8018156:	b082      	sub	sp, #8
 8018158:	af00      	add	r7, sp, #0
 801815a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	2b00      	cmp	r3, #0
 8018160:	d106      	bne.n	8018170 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018162:	4b07      	ldr	r3, [pc, #28]	@ (8018180 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018164:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8018168:	4906      	ldr	r1, [pc, #24]	@ (8018184 <ip_frag_free_pbuf_custom_ref+0x30>)
 801816a:	4807      	ldr	r0, [pc, #28]	@ (8018188 <ip_frag_free_pbuf_custom_ref+0x34>)
 801816c:	f001 fa7a 	bl	8019664 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018170:	6879      	ldr	r1, [r7, #4]
 8018172:	2005      	movs	r0, #5
 8018174:	f7f5 ff5c 	bl	800e030 <memp_free>
}
 8018178:	bf00      	nop
 801817a:	3708      	adds	r7, #8
 801817c:	46bd      	mov	sp, r7
 801817e:	bd80      	pop	{r7, pc}
 8018180:	0801ecd4 	.word	0x0801ecd4
 8018184:	0801ee8c 	.word	0x0801ee8c
 8018188:	0801ed1c 	.word	0x0801ed1c

0801818c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801818c:	b580      	push	{r7, lr}
 801818e:	b084      	sub	sp, #16
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	2b00      	cmp	r3, #0
 801819c:	d106      	bne.n	80181ac <ipfrag_free_pbuf_custom+0x20>
 801819e:	4b11      	ldr	r3, [pc, #68]	@ (80181e4 <ipfrag_free_pbuf_custom+0x58>)
 80181a0:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80181a4:	4910      	ldr	r1, [pc, #64]	@ (80181e8 <ipfrag_free_pbuf_custom+0x5c>)
 80181a6:	4811      	ldr	r0, [pc, #68]	@ (80181ec <ipfrag_free_pbuf_custom+0x60>)
 80181a8:	f001 fa5c 	bl	8019664 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80181ac:	68fa      	ldr	r2, [r7, #12]
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	429a      	cmp	r2, r3
 80181b2:	d006      	beq.n	80181c2 <ipfrag_free_pbuf_custom+0x36>
 80181b4:	4b0b      	ldr	r3, [pc, #44]	@ (80181e4 <ipfrag_free_pbuf_custom+0x58>)
 80181b6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80181ba:	490d      	ldr	r1, [pc, #52]	@ (80181f0 <ipfrag_free_pbuf_custom+0x64>)
 80181bc:	480b      	ldr	r0, [pc, #44]	@ (80181ec <ipfrag_free_pbuf_custom+0x60>)
 80181be:	f001 fa51 	bl	8019664 <iprintf>
  if (pcr->original != NULL) {
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	695b      	ldr	r3, [r3, #20]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d004      	beq.n	80181d4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80181ca:	68fb      	ldr	r3, [r7, #12]
 80181cc:	695b      	ldr	r3, [r3, #20]
 80181ce:	4618      	mov	r0, r3
 80181d0:	f7f6 fee8 	bl	800efa4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80181d4:	68f8      	ldr	r0, [r7, #12]
 80181d6:	f7ff ffbd 	bl	8018154 <ip_frag_free_pbuf_custom_ref>
}
 80181da:	bf00      	nop
 80181dc:	3710      	adds	r7, #16
 80181de:	46bd      	mov	sp, r7
 80181e0:	bd80      	pop	{r7, pc}
 80181e2:	bf00      	nop
 80181e4:	0801ecd4 	.word	0x0801ecd4
 80181e8:	0801ee98 	.word	0x0801ee98
 80181ec:	0801ed1c 	.word	0x0801ed1c
 80181f0:	0801eea4 	.word	0x0801eea4

080181f4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80181f4:	b580      	push	{r7, lr}
 80181f6:	b094      	sub	sp, #80	@ 0x50
 80181f8:	af02      	add	r7, sp, #8
 80181fa:	60f8      	str	r0, [r7, #12]
 80181fc:	60b9      	str	r1, [r7, #8]
 80181fe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018200:	2300      	movs	r3, #0
 8018202:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018206:	68bb      	ldr	r3, [r7, #8]
 8018208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801820a:	3b14      	subs	r3, #20
 801820c:	2b00      	cmp	r3, #0
 801820e:	da00      	bge.n	8018212 <ip4_frag+0x1e>
 8018210:	3307      	adds	r3, #7
 8018212:	10db      	asrs	r3, r3, #3
 8018214:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018216:	2314      	movs	r3, #20
 8018218:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	685b      	ldr	r3, [r3, #4]
 801821e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8018220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018222:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018226:	781b      	ldrb	r3, [r3, #0]
 8018228:	f003 030f 	and.w	r3, r3, #15
 801822c:	b2db      	uxtb	r3, r3
 801822e:	009b      	lsls	r3, r3, #2
 8018230:	b2db      	uxtb	r3, r3
 8018232:	2b14      	cmp	r3, #20
 8018234:	d002      	beq.n	801823c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018236:	f06f 0305 	mvn.w	r3, #5
 801823a:	e11e      	b.n	801847a <ip4_frag+0x286>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801823c:	68fb      	ldr	r3, [r7, #12]
 801823e:	895b      	ldrh	r3, [r3, #10]
 8018240:	2b13      	cmp	r3, #19
 8018242:	d809      	bhi.n	8018258 <ip4_frag+0x64>
 8018244:	4b8f      	ldr	r3, [pc, #572]	@ (8018484 <ip4_frag+0x290>)
 8018246:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801824a:	498f      	ldr	r1, [pc, #572]	@ (8018488 <ip4_frag+0x294>)
 801824c:	488f      	ldr	r0, [pc, #572]	@ (801848c <ip4_frag+0x298>)
 801824e:	f001 fa09 	bl	8019664 <iprintf>
 8018252:	f06f 0305 	mvn.w	r3, #5
 8018256:	e110      	b.n	801847a <ip4_frag+0x286>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801825a:	88db      	ldrh	r3, [r3, #6]
 801825c:	b29b      	uxth	r3, r3
 801825e:	4618      	mov	r0, r3
 8018260:	f7f5 f804 	bl	800d26c <lwip_htons>
 8018264:	4603      	mov	r3, r0
 8018266:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8018268:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801826a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801826e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018272:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8018278:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	891b      	ldrh	r3, [r3, #8]
 801827e:	3b14      	subs	r3, #20
 8018280:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8018284:	e0ef      	b.n	8018466 <ip4_frag+0x272>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018286:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018288:	00db      	lsls	r3, r3, #3
 801828a:	b29b      	uxth	r3, r3
 801828c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018290:	4293      	cmp	r3, r2
 8018292:	bf28      	it	cs
 8018294:	4613      	movcs	r3, r2
 8018296:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018298:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801829c:	2114      	movs	r1, #20
 801829e:	2010      	movs	r0, #16
 80182a0:	f7f6 fb9c 	bl	800e9dc <pbuf_alloc>
 80182a4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80182a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	f000 80e3 	beq.w	8018474 <ip4_frag+0x280>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80182ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182b0:	895b      	ldrh	r3, [r3, #10]
 80182b2:	2b13      	cmp	r3, #19
 80182b4:	d806      	bhi.n	80182c4 <ip4_frag+0xd0>
 80182b6:	4b73      	ldr	r3, [pc, #460]	@ (8018484 <ip4_frag+0x290>)
 80182b8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80182bc:	4974      	ldr	r1, [pc, #464]	@ (8018490 <ip4_frag+0x29c>)
 80182be:	4873      	ldr	r0, [pc, #460]	@ (801848c <ip4_frag+0x298>)
 80182c0:	f001 f9d0 	bl	8019664 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80182c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182c6:	685b      	ldr	r3, [r3, #4]
 80182c8:	2214      	movs	r2, #20
 80182ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80182cc:	4618      	mov	r0, r3
 80182ce:	f001 fc6e 	bl	8019bae <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80182d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182d4:	685b      	ldr	r3, [r3, #4]
 80182d6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80182d8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80182da:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80182de:	e064      	b.n	80183aa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	895a      	ldrh	r2, [r3, #10]
 80182e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80182e6:	1ad3      	subs	r3, r2, r3
 80182e8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	895b      	ldrh	r3, [r3, #10]
 80182ee:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80182f0:	429a      	cmp	r2, r3
 80182f2:	d906      	bls.n	8018302 <ip4_frag+0x10e>
 80182f4:	4b63      	ldr	r3, [pc, #396]	@ (8018484 <ip4_frag+0x290>)
 80182f6:	f240 322d 	movw	r2, #813	@ 0x32d
 80182fa:	4966      	ldr	r1, [pc, #408]	@ (8018494 <ip4_frag+0x2a0>)
 80182fc:	4863      	ldr	r0, [pc, #396]	@ (801848c <ip4_frag+0x298>)
 80182fe:	f001 f9b1 	bl	8019664 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018302:	8bfa      	ldrh	r2, [r7, #30]
 8018304:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018308:	4293      	cmp	r3, r2
 801830a:	bf28      	it	cs
 801830c:	4613      	movcs	r3, r2
 801830e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018312:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018316:	2b00      	cmp	r3, #0
 8018318:	d105      	bne.n	8018326 <ip4_frag+0x132>
        poff = 0;
 801831a:	2300      	movs	r3, #0
 801831c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	60fb      	str	r3, [r7, #12]
        continue;
 8018324:	e041      	b.n	80183aa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018326:	f7ff ff0d 	bl	8018144 <ip_frag_alloc_pbuf_custom_ref>
 801832a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801832c:	69bb      	ldr	r3, [r7, #24]
 801832e:	2b00      	cmp	r3, #0
 8018330:	d103      	bne.n	801833a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018332:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018334:	f7f6 fe36 	bl	800efa4 <pbuf_free>
        goto memerr;
 8018338:	e09d      	b.n	8018476 <ip4_frag+0x282>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801833a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018340:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018342:	4413      	add	r3, r2
 8018344:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8018348:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801834c:	9201      	str	r2, [sp, #4]
 801834e:	9300      	str	r3, [sp, #0]
 8018350:	4603      	mov	r3, r0
 8018352:	2241      	movs	r2, #65	@ 0x41
 8018354:	2000      	movs	r0, #0
 8018356:	f7f6 fc6b 	bl	800ec30 <pbuf_alloced_custom>
 801835a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801835c:	697b      	ldr	r3, [r7, #20]
 801835e:	2b00      	cmp	r3, #0
 8018360:	d106      	bne.n	8018370 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018362:	69b8      	ldr	r0, [r7, #24]
 8018364:	f7ff fef6 	bl	8018154 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018368:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801836a:	f7f6 fe1b 	bl	800efa4 <pbuf_free>
        goto memerr;
 801836e:	e082      	b.n	8018476 <ip4_frag+0x282>
      }
      pbuf_ref(p);
 8018370:	68f8      	ldr	r0, [r7, #12]
 8018372:	f7f6 febd 	bl	800f0f0 <pbuf_ref>
      pcr->original = p;
 8018376:	69bb      	ldr	r3, [r7, #24]
 8018378:	68fa      	ldr	r2, [r7, #12]
 801837a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801837c:	69bb      	ldr	r3, [r7, #24]
 801837e:	4a46      	ldr	r2, [pc, #280]	@ (8018498 <ip4_frag+0x2a4>)
 8018380:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018382:	6979      	ldr	r1, [r7, #20]
 8018384:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018386:	f7f6 fedb 	bl	800f140 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801838a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801838e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018392:	1ad3      	subs	r3, r2, r3
 8018394:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8018398:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801839c:	2b00      	cmp	r3, #0
 801839e:	d004      	beq.n	80183aa <ip4_frag+0x1b6>
        poff = 0;
 80183a0:	2300      	movs	r3, #0
 80183a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80183aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d196      	bne.n	80182e0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80183b2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80183b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80183b8:	4413      	add	r3, r2
 80183ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80183bc:	68bb      	ldr	r3, [r7, #8]
 80183be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80183c0:	f1a3 0213 	sub.w	r2, r3, #19
 80183c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80183c8:	429a      	cmp	r2, r3
 80183ca:	bfcc      	ite	gt
 80183cc:	2301      	movgt	r3, #1
 80183ce:	2300      	movle	r3, #0
 80183d0:	b2db      	uxtb	r3, r3
 80183d2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80183d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80183d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80183dc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80183de:	6a3b      	ldr	r3, [r7, #32]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d002      	beq.n	80183ea <ip4_frag+0x1f6>
 80183e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d003      	beq.n	80183f2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80183ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80183ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80183f0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80183f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80183f4:	4618      	mov	r0, r3
 80183f6:	f7f4 ff39 	bl	800d26c <lwip_htons>
 80183fa:	4603      	mov	r3, r0
 80183fc:	461a      	mov	r2, r3
 80183fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018400:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018402:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018404:	3314      	adds	r3, #20
 8018406:	b29b      	uxth	r3, r3
 8018408:	4618      	mov	r0, r3
 801840a:	f7f4 ff2f 	bl	800d26c <lwip_htons>
 801840e:	4603      	mov	r3, r0
 8018410:	461a      	mov	r2, r3
 8018412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018414:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018418:	2200      	movs	r2, #0
 801841a:	729a      	strb	r2, [r3, #10]
 801841c:	2200      	movs	r2, #0
 801841e:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8018420:	2114      	movs	r1, #20
 8018422:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018424:	f7f4 ffae 	bl	800d384 <inet_chksum>
 8018428:	4603      	mov	r3, r0
 801842a:	461a      	mov	r2, r3
 801842c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801842e:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018430:	68bb      	ldr	r3, [r7, #8]
 8018432:	695b      	ldr	r3, [r3, #20]
 8018434:	687a      	ldr	r2, [r7, #4]
 8018436:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018438:	68b8      	ldr	r0, [r7, #8]
 801843a:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801843c:	4b17      	ldr	r3, [pc, #92]	@ (801849c <ip4_frag+0x2a8>)
 801843e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8018440:	3301      	adds	r3, #1
 8018442:	b29a      	uxth	r2, r3
 8018444:	4b15      	ldr	r3, [pc, #84]	@ (801849c <ip4_frag+0x2a8>)
 8018446:	861a      	strh	r2, [r3, #48]	@ 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018448:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801844a:	f7f6 fdab 	bl	800efa4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801844e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018452:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018454:	1ad3      	subs	r3, r2, r3
 8018456:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801845a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801845e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018460:	4413      	add	r3, r2
 8018462:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8018466:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801846a:	2b00      	cmp	r3, #0
 801846c:	f47f af0b 	bne.w	8018286 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018470:	2300      	movs	r3, #0
 8018472:	e002      	b.n	801847a <ip4_frag+0x286>
      goto memerr;
 8018474:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018476:	f04f 33ff 	mov.w	r3, #4294967295
}
 801847a:	4618      	mov	r0, r3
 801847c:	3748      	adds	r7, #72	@ 0x48
 801847e:	46bd      	mov	sp, r7
 8018480:	bd80      	pop	{r7, pc}
 8018482:	bf00      	nop
 8018484:	0801ecd4 	.word	0x0801ecd4
 8018488:	0801eeb0 	.word	0x0801eeb0
 801848c:	0801ed1c 	.word	0x0801ed1c
 8018490:	0801eecc 	.word	0x0801eecc
 8018494:	0801eeec 	.word	0x0801eeec
 8018498:	0801818d 	.word	0x0801818d
 801849c:	2000ea4c 	.word	0x2000ea4c

080184a0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80184a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184a4:	b096      	sub	sp, #88	@ 0x58
 80184a6:	af0a      	add	r7, sp, #40	@ 0x28
 80184a8:	61f8      	str	r0, [r7, #28]
 80184aa:	61b9      	str	r1, [r7, #24]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80184ac:	2310      	movs	r3, #16
 80184ae:	85fb      	strh	r3, [r7, #46]	@ 0x2e
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80184b0:	69fb      	ldr	r3, [r7, #28]
 80184b2:	895b      	ldrh	r3, [r3, #10]
 80184b4:	2b10      	cmp	r3, #16
 80184b6:	d80c      	bhi.n	80184d2 <ethernet_input+0x32>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 80184b8:	4b7d      	ldr	r3, [pc, #500]	@ (80186b0 <ethernet_input+0x210>)
 80184ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80184bc:	3301      	adds	r3, #1
 80184be:	b29a      	uxth	r2, r3
 80184c0:	4b7b      	ldr	r3, [pc, #492]	@ (80186b0 <ethernet_input+0x210>)
 80184c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 80184c4:	4b7a      	ldr	r3, [pc, #488]	@ (80186b0 <ethernet_input+0x210>)
 80184c6:	8bdb      	ldrh	r3, [r3, #30]
 80184c8:	3301      	adds	r3, #1
 80184ca:	b29a      	uxth	r2, r3
 80184cc:	4b78      	ldr	r3, [pc, #480]	@ (80186b0 <ethernet_input+0x210>)
 80184ce:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 80184d0:	e0e4      	b.n	801869c <ethernet_input+0x1fc>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80184d2:	69fb      	ldr	r3, [r7, #28]
 80184d4:	7bdb      	ldrb	r3, [r3, #15]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d106      	bne.n	80184e8 <ethernet_input+0x48>
    p->if_idx = netif_get_index(netif);
 80184da:	69bb      	ldr	r3, [r7, #24]
 80184dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80184e0:	3301      	adds	r3, #1
 80184e2:	b2da      	uxtb	r2, r3
 80184e4:	69fb      	ldr	r3, [r7, #28]
 80184e6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80184e8:	69fb      	ldr	r3, [r7, #28]
 80184ea:	685b      	ldr	r3, [r3, #4]
 80184ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 80184ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184f0:	789b      	ldrb	r3, [r3, #2]
 80184f2:	4698      	mov	r8, r3
 80184f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184f6:	78db      	ldrb	r3, [r3, #3]
 80184f8:	4699      	mov	r9, r3
 80184fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184fc:	791b      	ldrb	r3, [r3, #4]
 80184fe:	469a      	mov	sl, r3
 8018500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018502:	795b      	ldrb	r3, [r3, #5]
 8018504:	461c      	mov	r4, r3
 8018506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018508:	799b      	ldrb	r3, [r3, #6]
 801850a:	461d      	mov	r5, r3
 801850c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801850e:	79db      	ldrb	r3, [r3, #7]
 8018510:	461e      	mov	r6, r3
 8018512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018514:	7a1b      	ldrb	r3, [r3, #8]
 8018516:	617b      	str	r3, [r7, #20]
 8018518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801851a:	7a5b      	ldrb	r3, [r3, #9]
 801851c:	613b      	str	r3, [r7, #16]
 801851e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018520:	7a9b      	ldrb	r3, [r3, #10]
 8018522:	60fb      	str	r3, [r7, #12]
 8018524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018526:	7adb      	ldrb	r3, [r3, #11]
 8018528:	60bb      	str	r3, [r7, #8]
 801852a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801852c:	7b1b      	ldrb	r3, [r3, #12]
 801852e:	607b      	str	r3, [r7, #4]
 8018530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018532:	7b5b      	ldrb	r3, [r3, #13]
 8018534:	603b      	str	r3, [r7, #0]
 8018536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018538:	89db      	ldrh	r3, [r3, #14]
 801853a:	b29b      	uxth	r3, r3
 801853c:	4618      	mov	r0, r3
 801853e:	f7f4 fe95 	bl	800d26c <lwip_htons>
 8018542:	4603      	mov	r3, r0
 8018544:	9309      	str	r3, [sp, #36]	@ 0x24
 8018546:	683a      	ldr	r2, [r7, #0]
 8018548:	9208      	str	r2, [sp, #32]
 801854a:	687a      	ldr	r2, [r7, #4]
 801854c:	9207      	str	r2, [sp, #28]
 801854e:	68ba      	ldr	r2, [r7, #8]
 8018550:	9206      	str	r2, [sp, #24]
 8018552:	68fa      	ldr	r2, [r7, #12]
 8018554:	9205      	str	r2, [sp, #20]
 8018556:	693a      	ldr	r2, [r7, #16]
 8018558:	9204      	str	r2, [sp, #16]
 801855a:	697b      	ldr	r3, [r7, #20]
 801855c:	9303      	str	r3, [sp, #12]
 801855e:	9602      	str	r6, [sp, #8]
 8018560:	9501      	str	r5, [sp, #4]
 8018562:	9400      	str	r4, [sp, #0]
 8018564:	4653      	mov	r3, sl
 8018566:	464a      	mov	r2, r9
 8018568:	4641      	mov	r1, r8
 801856a:	4852      	ldr	r0, [pc, #328]	@ (80186b4 <ethernet_input+0x214>)
 801856c:	f001 f87a 	bl	8019664 <iprintf>
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018572:	7b9a      	ldrb	r2, [r3, #14]
 8018574:	7bdb      	ldrb	r3, [r3, #15]
 8018576:	021b      	lsls	r3, r3, #8
 8018578:	4313      	orrs	r3, r2
 801857a:	84fb      	strh	r3, [r7, #38]	@ 0x26

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801857c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801857e:	789b      	ldrb	r3, [r3, #2]
 8018580:	f003 0301 	and.w	r3, r3, #1
 8018584:	2b00      	cmp	r3, #0
 8018586:	d024      	beq.n	80185d2 <ethernet_input+0x132>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801858a:	789b      	ldrb	r3, [r3, #2]
 801858c:	2b01      	cmp	r3, #1
 801858e:	d10f      	bne.n	80185b0 <ethernet_input+0x110>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018592:	78db      	ldrb	r3, [r3, #3]
 8018594:	2b00      	cmp	r3, #0
 8018596:	d11c      	bne.n	80185d2 <ethernet_input+0x132>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801859a:	791b      	ldrb	r3, [r3, #4]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801859c:	2b5e      	cmp	r3, #94	@ 0x5e
 801859e:	d118      	bne.n	80185d2 <ethernet_input+0x132>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80185a0:	69fb      	ldr	r3, [r7, #28]
 80185a2:	7b5b      	ldrb	r3, [r3, #13]
 80185a4:	f043 0310 	orr.w	r3, r3, #16
 80185a8:	b2da      	uxtb	r2, r3
 80185aa:	69fb      	ldr	r3, [r7, #28]
 80185ac:	735a      	strb	r2, [r3, #13]
 80185ae:	e010      	b.n	80185d2 <ethernet_input+0x132>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80185b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185b2:	3302      	adds	r3, #2
 80185b4:	2206      	movs	r2, #6
 80185b6:	4940      	ldr	r1, [pc, #256]	@ (80186b8 <ethernet_input+0x218>)
 80185b8:	4618      	mov	r0, r3
 80185ba:	f001 f9fb 	bl	80199b4 <memcmp>
 80185be:	4603      	mov	r3, r0
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d106      	bne.n	80185d2 <ethernet_input+0x132>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80185c4:	69fb      	ldr	r3, [r7, #28]
 80185c6:	7b5b      	ldrb	r3, [r3, #13]
 80185c8:	f043 0308 	orr.w	r3, r3, #8
 80185cc:	b2da      	uxtb	r2, r3
 80185ce:	69fb      	ldr	r3, [r7, #28]
 80185d0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80185d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80185d4:	2b08      	cmp	r3, #8
 80185d6:	d003      	beq.n	80185e0 <ethernet_input+0x140>
 80185d8:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80185dc:	d020      	beq.n	8018620 <ethernet_input+0x180>
 80185de:	e04b      	b.n	8018678 <ethernet_input+0x1d8>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80185e0:	69bb      	ldr	r3, [r7, #24]
 80185e2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80185e6:	f003 0308 	and.w	r3, r3, #8
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d053      	beq.n	8018696 <ethernet_input+0x1f6>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80185ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80185f0:	4619      	mov	r1, r3
 80185f2:	69f8      	ldr	r0, [r7, #28]
 80185f4:	f7f6 fc50 	bl	800ee98 <pbuf_remove_header>
 80185f8:	4603      	mov	r3, r0
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d00b      	beq.n	8018616 <ethernet_input+0x176>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 80185fe:	69fb      	ldr	r3, [r7, #28]
 8018600:	891b      	ldrh	r3, [r3, #8]
 8018602:	4619      	mov	r1, r3
 8018604:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018606:	461a      	mov	r2, r3
 8018608:	482c      	ldr	r0, [pc, #176]	@ (80186bc <ethernet_input+0x21c>)
 801860a:	f001 f82b 	bl	8019664 <iprintf>
                    ("ethernet_input: IPv4 packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
 801860e:	482c      	ldr	r0, [pc, #176]	@ (80186c0 <ethernet_input+0x220>)
 8018610:	f001 f828 	bl	8019664 <iprintf>
        goto free_and_return;
 8018614:	e042      	b.n	801869c <ethernet_input+0x1fc>
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 8018616:	69b9      	ldr	r1, [r7, #24]
 8018618:	69f8      	ldr	r0, [r7, #28]
 801861a:	f7fe fcd1 	bl	8016fc0 <ip4_input>
      }
      break;
 801861e:	e038      	b.n	8018692 <ethernet_input+0x1f2>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018620:	69bb      	ldr	r3, [r7, #24]
 8018622:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018626:	f003 0308 	and.w	r3, r3, #8
 801862a:	2b00      	cmp	r3, #0
 801862c:	d035      	beq.n	801869a <ethernet_input+0x1fa>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801862e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018630:	4619      	mov	r1, r3
 8018632:	69f8      	ldr	r0, [r7, #28]
 8018634:	f7f6 fc30 	bl	800ee98 <pbuf_remove_header>
 8018638:	4603      	mov	r3, r0
 801863a:	2b00      	cmp	r3, #0
 801863c:	d017      	beq.n	801866e <ethernet_input+0x1ce>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 801863e:	69fb      	ldr	r3, [r7, #28]
 8018640:	891b      	ldrh	r3, [r3, #8]
 8018642:	4619      	mov	r1, r3
 8018644:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018646:	461a      	mov	r2, r3
 8018648:	481e      	ldr	r0, [pc, #120]	@ (80186c4 <ethernet_input+0x224>)
 801864a:	f001 f80b 	bl	8019664 <iprintf>
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
 801864e:	481c      	ldr	r0, [pc, #112]	@ (80186c0 <ethernet_input+0x220>)
 8018650:	f001 f808 	bl	8019664 <iprintf>
        ETHARP_STATS_INC(etharp.lenerr);
 8018654:	4b16      	ldr	r3, [pc, #88]	@ (80186b0 <ethernet_input+0x210>)
 8018656:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8018658:	3301      	adds	r3, #1
 801865a:	b29a      	uxth	r2, r3
 801865c:	4b14      	ldr	r3, [pc, #80]	@ (80186b0 <ethernet_input+0x210>)
 801865e:	845a      	strh	r2, [r3, #34]	@ 0x22
        ETHARP_STATS_INC(etharp.drop);
 8018660:	4b13      	ldr	r3, [pc, #76]	@ (80186b0 <ethernet_input+0x210>)
 8018662:	8bdb      	ldrh	r3, [r3, #30]
 8018664:	3301      	adds	r3, #1
 8018666:	b29a      	uxth	r2, r3
 8018668:	4b11      	ldr	r3, [pc, #68]	@ (80186b0 <ethernet_input+0x210>)
 801866a:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801866c:	e016      	b.n	801869c <ethernet_input+0x1fc>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 801866e:	69b9      	ldr	r1, [r7, #24]
 8018670:	69f8      	ldr	r0, [r7, #28]
 8018672:	f7fd f9f1 	bl	8015a58 <etharp_input>
      }
      break;
 8018676:	e00c      	b.n	8018692 <ethernet_input+0x1f2>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 8018678:	4b0d      	ldr	r3, [pc, #52]	@ (80186b0 <ethernet_input+0x210>)
 801867a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801867c:	3301      	adds	r3, #1
 801867e:	b29a      	uxth	r2, r3
 8018680:	4b0b      	ldr	r3, [pc, #44]	@ (80186b0 <ethernet_input+0x210>)
 8018682:	851a      	strh	r2, [r3, #40]	@ 0x28
      ETHARP_STATS_INC(etharp.drop);
 8018684:	4b0a      	ldr	r3, [pc, #40]	@ (80186b0 <ethernet_input+0x210>)
 8018686:	8bdb      	ldrh	r3, [r3, #30]
 8018688:	3301      	adds	r3, #1
 801868a:	b29a      	uxth	r2, r3
 801868c:	4b08      	ldr	r3, [pc, #32]	@ (80186b0 <ethernet_input+0x210>)
 801868e:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018690:	e004      	b.n	801869c <ethernet_input+0x1fc>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018692:	2300      	movs	r3, #0
 8018694:	e006      	b.n	80186a4 <ethernet_input+0x204>
        goto free_and_return;
 8018696:	bf00      	nop
 8018698:	e000      	b.n	801869c <ethernet_input+0x1fc>
        goto free_and_return;
 801869a:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801869c:	69f8      	ldr	r0, [r7, #28]
 801869e:	f7f6 fc81 	bl	800efa4 <pbuf_free>
  return ERR_OK;
 80186a2:	2300      	movs	r3, #0
}
 80186a4:	4618      	mov	r0, r3
 80186a6:	3730      	adds	r7, #48	@ 0x30
 80186a8:	46bd      	mov	sp, r7
 80186aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186ae:	bf00      	nop
 80186b0:	2000ea4c 	.word	0x2000ea4c
 80186b4:	0801eefc 	.word	0x0801eefc
 80186b8:	0801f31c 	.word	0x0801f31c
 80186bc:	0801ef78 	.word	0x0801ef78
 80186c0:	0801efb4 	.word	0x0801efb4
 80186c4:	0801efd8 	.word	0x0801efd8

080186c8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80186c8:	b580      	push	{r7, lr}
 80186ca:	b086      	sub	sp, #24
 80186cc:	af00      	add	r7, sp, #0
 80186ce:	60f8      	str	r0, [r7, #12]
 80186d0:	60b9      	str	r1, [r7, #8]
 80186d2:	607a      	str	r2, [r7, #4]
 80186d4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80186d6:	8c3b      	ldrh	r3, [r7, #32]
 80186d8:	4618      	mov	r0, r3
 80186da:	f7f4 fdc7 	bl	800d26c <lwip_htons>
 80186de:	4603      	mov	r3, r0
 80186e0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80186e2:	2110      	movs	r1, #16
 80186e4:	68b8      	ldr	r0, [r7, #8]
 80186e6:	f7f6 fbc7 	bl	800ee78 <pbuf_add_header>
 80186ea:	4603      	mov	r3, r0
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d12a      	bne.n	8018746 <ethernet_output+0x7e>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80186f0:	68bb      	ldr	r3, [r7, #8]
 80186f2:	685b      	ldr	r3, [r3, #4]
 80186f4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80186f6:	693b      	ldr	r3, [r7, #16]
 80186f8:	8afa      	ldrh	r2, [r7, #22]
 80186fa:	81da      	strh	r2, [r3, #14]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80186fc:	693b      	ldr	r3, [r7, #16]
 80186fe:	3302      	adds	r3, #2
 8018700:	2206      	movs	r2, #6
 8018702:	6839      	ldr	r1, [r7, #0]
 8018704:	4618      	mov	r0, r3
 8018706:	f001 fa52 	bl	8019bae <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801870a:	693b      	ldr	r3, [r7, #16]
 801870c:	3308      	adds	r3, #8
 801870e:	2206      	movs	r2, #6
 8018710:	6879      	ldr	r1, [r7, #4]
 8018712:	4618      	mov	r0, r3
 8018714:	f001 fa4b 	bl	8019bae <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801871e:	2b06      	cmp	r3, #6
 8018720:	d006      	beq.n	8018730 <ethernet_output+0x68>
 8018722:	4b11      	ldr	r3, [pc, #68]	@ (8018768 <ethernet_output+0xa0>)
 8018724:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8018728:	4910      	ldr	r1, [pc, #64]	@ (801876c <ethernet_output+0xa4>)
 801872a:	4811      	ldr	r0, [pc, #68]	@ (8018770 <ethernet_output+0xa8>)
 801872c:	f000 ff9a 	bl	8019664 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 8018730:	68b9      	ldr	r1, [r7, #8]
 8018732:	4810      	ldr	r0, [pc, #64]	@ (8018774 <ethernet_output+0xac>)
 8018734:	f000 ff96 	bl	8019664 <iprintf>
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	699b      	ldr	r3, [r3, #24]
 801873c:	68b9      	ldr	r1, [r7, #8]
 801873e:	68f8      	ldr	r0, [r7, #12]
 8018740:	4798      	blx	r3
 8018742:	4603      	mov	r3, r0
 8018744:	e00b      	b.n	801875e <ethernet_output+0x96>
      goto pbuf_header_failed;
 8018746:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8018748:	480b      	ldr	r0, [pc, #44]	@ (8018778 <ethernet_output+0xb0>)
 801874a:	f000 fffb 	bl	8019744 <puts>
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 801874e:	4b0b      	ldr	r3, [pc, #44]	@ (801877c <ethernet_output+0xb4>)
 8018750:	895b      	ldrh	r3, [r3, #10]
 8018752:	3301      	adds	r3, #1
 8018754:	b29a      	uxth	r2, r3
 8018756:	4b09      	ldr	r3, [pc, #36]	@ (801877c <ethernet_output+0xb4>)
 8018758:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 801875a:	f06f 0301 	mvn.w	r3, #1
}
 801875e:	4618      	mov	r0, r3
 8018760:	3718      	adds	r7, #24
 8018762:	46bd      	mov	sp, r7
 8018764:	bd80      	pop	{r7, pc}
 8018766:	bf00      	nop
 8018768:	0801f01c 	.word	0x0801f01c
 801876c:	0801f054 	.word	0x0801f054
 8018770:	0801f088 	.word	0x0801f088
 8018774:	0801f0b0 	.word	0x0801f0b0
 8018778:	0801f0d4 	.word	0x0801f0d4
 801877c:	2000ea4c 	.word	0x2000ea4c

08018780 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018780:	b580      	push	{r7, lr}
 8018782:	b086      	sub	sp, #24
 8018784:	af00      	add	r7, sp, #0
 8018786:	6078      	str	r0, [r7, #4]
 8018788:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801878a:	683b      	ldr	r3, [r7, #0]
 801878c:	60bb      	str	r3, [r7, #8]
 801878e:	2304      	movs	r3, #4
 8018790:	60fb      	str	r3, [r7, #12]
 8018792:	2300      	movs	r3, #0
 8018794:	613b      	str	r3, [r7, #16]
 8018796:	2300      	movs	r3, #0
 8018798:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801879a:	f107 0308 	add.w	r3, r7, #8
 801879e:	2100      	movs	r1, #0
 80187a0:	4618      	mov	r0, r3
 80187a2:	f7f1 fe49 	bl	800a438 <osMessageCreate>
 80187a6:	4602      	mov	r2, r0
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	601a      	str	r2, [r3, #0]
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 80187ac:	4b10      	ldr	r3, [pc, #64]	@ (80187f0 <sys_mbox_new+0x70>)
 80187ae:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 80187b2:	3301      	adds	r3, #1
 80187b4:	b29a      	uxth	r2, r3
 80187b6:	4b0e      	ldr	r3, [pc, #56]	@ (80187f0 <sys_mbox_new+0x70>)
 80187b8:	f8a3 2118 	strh.w	r2, [r3, #280]	@ 0x118
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 80187bc:	4b0c      	ldr	r3, [pc, #48]	@ (80187f0 <sys_mbox_new+0x70>)
 80187be:	f8b3 211a 	ldrh.w	r2, [r3, #282]	@ 0x11a
 80187c2:	4b0b      	ldr	r3, [pc, #44]	@ (80187f0 <sys_mbox_new+0x70>)
 80187c4:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 80187c8:	429a      	cmp	r2, r3
 80187ca:	d205      	bcs.n	80187d8 <sys_mbox_new+0x58>
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 80187cc:	4b08      	ldr	r3, [pc, #32]	@ (80187f0 <sys_mbox_new+0x70>)
 80187ce:	f8b3 2118 	ldrh.w	r2, [r3, #280]	@ 0x118
 80187d2:	4b07      	ldr	r3, [pc, #28]	@ (80187f0 <sys_mbox_new+0x70>)
 80187d4:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d102      	bne.n	80187e6 <sys_mbox_new+0x66>
    return ERR_MEM;
 80187e0:	f04f 33ff 	mov.w	r3, #4294967295
 80187e4:	e000      	b.n	80187e8 <sys_mbox_new+0x68>

  return ERR_OK;
 80187e6:	2300      	movs	r3, #0
}
 80187e8:	4618      	mov	r0, r3
 80187ea:	3718      	adds	r7, #24
 80187ec:	46bd      	mov	sp, r7
 80187ee:	bd80      	pop	{r7, pc}
 80187f0:	2000ea4c 	.word	0x2000ea4c

080187f4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80187f4:	b580      	push	{r7, lr}
 80187f6:	b084      	sub	sp, #16
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	6078      	str	r0, [r7, #4]
 80187fc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	6839      	ldr	r1, [r7, #0]
 8018804:	2200      	movs	r2, #0
 8018806:	4618      	mov	r0, r3
 8018808:	f7f1 fe3e 	bl	800a488 <osMessagePut>
 801880c:	4603      	mov	r3, r0
 801880e:	2b00      	cmp	r3, #0
 8018810:	d102      	bne.n	8018818 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018812:	2300      	movs	r3, #0
 8018814:	73fb      	strb	r3, [r7, #15]
 8018816:	e009      	b.n	801882c <sys_mbox_trypost+0x38>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018818:	23ff      	movs	r3, #255	@ 0xff
 801881a:	73fb      	strb	r3, [r7, #15]

#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801881c:	4b06      	ldr	r3, [pc, #24]	@ (8018838 <sys_mbox_trypost+0x44>)
 801881e:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8018822:	3301      	adds	r3, #1
 8018824:	b29a      	uxth	r2, r3
 8018826:	4b04      	ldr	r3, [pc, #16]	@ (8018838 <sys_mbox_trypost+0x44>)
 8018828:	f8a3 211c 	strh.w	r2, [r3, #284]	@ 0x11c
#endif /* SYS_STATS */
  }

  return result;
 801882c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018830:	4618      	mov	r0, r3
 8018832:	3710      	adds	r7, #16
 8018834:	46bd      	mov	sp, r7
 8018836:	bd80      	pop	{r7, pc}
 8018838:	2000ea4c 	.word	0x2000ea4c

0801883c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801883c:	b580      	push	{r7, lr}
 801883e:	b08c      	sub	sp, #48	@ 0x30
 8018840:	af00      	add	r7, sp, #0
 8018842:	61f8      	str	r0, [r7, #28]
 8018844:	61b9      	str	r1, [r7, #24]
 8018846:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018848:	f7f1 fc34 	bl	800a0b4 <osKernelSysTick>
 801884c:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801884e:	697b      	ldr	r3, [r7, #20]
 8018850:	2b00      	cmp	r3, #0
 8018852:	d017      	beq.n	8018884 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018854:	69fb      	ldr	r3, [r7, #28]
 8018856:	6819      	ldr	r1, [r3, #0]
 8018858:	f107 0320 	add.w	r3, r7, #32
 801885c:	697a      	ldr	r2, [r7, #20]
 801885e:	4618      	mov	r0, r3
 8018860:	f7f1 fe52 	bl	800a508 <osMessageGet>

    if(event.status == osEventMessage)
 8018864:	6a3b      	ldr	r3, [r7, #32]
 8018866:	2b10      	cmp	r3, #16
 8018868:	d109      	bne.n	801887e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801886a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801886c:	461a      	mov	r2, r3
 801886e:	69bb      	ldr	r3, [r7, #24]
 8018870:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8018872:	f7f1 fc1f 	bl	800a0b4 <osKernelSysTick>
 8018876:	4602      	mov	r2, r0
 8018878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801887a:	1ad3      	subs	r3, r2, r3
 801887c:	e019      	b.n	80188b2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801887e:	f04f 33ff 	mov.w	r3, #4294967295
 8018882:	e016      	b.n	80188b2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018884:	69fb      	ldr	r3, [r7, #28]
 8018886:	6819      	ldr	r1, [r3, #0]
 8018888:	463b      	mov	r3, r7
 801888a:	f04f 32ff 	mov.w	r2, #4294967295
 801888e:	4618      	mov	r0, r3
 8018890:	f7f1 fe3a 	bl	800a508 <osMessageGet>
 8018894:	f107 0320 	add.w	r3, r7, #32
 8018898:	463a      	mov	r2, r7
 801889a:	ca07      	ldmia	r2, {r0, r1, r2}
 801889c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80188a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188a2:	461a      	mov	r2, r3
 80188a4:	69bb      	ldr	r3, [r7, #24]
 80188a6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80188a8:	f7f1 fc04 	bl	800a0b4 <osKernelSysTick>
 80188ac:	4602      	mov	r2, r0
 80188ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188b0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80188b2:	4618      	mov	r0, r3
 80188b4:	3730      	adds	r7, #48	@ 0x30
 80188b6:	46bd      	mov	sp, r7
 80188b8:	bd80      	pop	{r7, pc}

080188ba <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80188ba:	b480      	push	{r7}
 80188bc:	b083      	sub	sp, #12
 80188be:	af00      	add	r7, sp, #0
 80188c0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d101      	bne.n	80188ce <sys_mbox_valid+0x14>
    return 0;
 80188ca:	2300      	movs	r3, #0
 80188cc:	e000      	b.n	80188d0 <sys_mbox_valid+0x16>
  else
    return 1;
 80188ce:	2301      	movs	r3, #1
}
 80188d0:	4618      	mov	r0, r3
 80188d2:	370c      	adds	r7, #12
 80188d4:	46bd      	mov	sp, r7
 80188d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188da:	4770      	bx	lr

080188dc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80188dc:	b580      	push	{r7, lr}
 80188de:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80188e0:	4803      	ldr	r0, [pc, #12]	@ (80188f0 <sys_init+0x14>)
 80188e2:	f7f1 fc57 	bl	800a194 <osMutexCreate>
 80188e6:	4603      	mov	r3, r0
 80188e8:	4a02      	ldr	r2, [pc, #8]	@ (80188f4 <sys_init+0x18>)
 80188ea:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80188ec:	bf00      	nop
 80188ee:	bd80      	pop	{r7, pc}
 80188f0:	0801f32c 	.word	0x0801f32c
 80188f4:	2000ecdc 	.word	0x2000ecdc

080188f8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b084      	sub	sp, #16
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018900:	2300      	movs	r3, #0
 8018902:	60bb      	str	r3, [r7, #8]
 8018904:	2300      	movs	r3, #0
 8018906:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018908:	f107 0308 	add.w	r3, r7, #8
 801890c:	4618      	mov	r0, r3
 801890e:	f7f1 fc41 	bl	800a194 <osMutexCreate>
 8018912:	4602      	mov	r2, r0
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	2b00      	cmp	r3, #0
 801891e:	d10a      	bne.n	8018936 <sys_mutex_new+0x3e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 8018920:	4b12      	ldr	r3, [pc, #72]	@ (801896c <sys_mutex_new+0x74>)
 8018922:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8018926:	3301      	adds	r3, #1
 8018928:	b29a      	uxth	r2, r3
 801892a:	4b10      	ldr	r3, [pc, #64]	@ (801896c <sys_mutex_new+0x74>)
 801892c:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116
#endif /* SYS_STATS */
    return ERR_MEM;
 8018930:	f04f 33ff 	mov.w	r3, #4294967295
 8018934:	e016      	b.n	8018964 <sys_mutex_new+0x6c>
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 8018936:	4b0d      	ldr	r3, [pc, #52]	@ (801896c <sys_mutex_new+0x74>)
 8018938:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 801893c:	3301      	adds	r3, #1
 801893e:	b29a      	uxth	r2, r3
 8018940:	4b0a      	ldr	r3, [pc, #40]	@ (801896c <sys_mutex_new+0x74>)
 8018942:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 8018946:	4b09      	ldr	r3, [pc, #36]	@ (801896c <sys_mutex_new+0x74>)
 8018948:	f8b3 2114 	ldrh.w	r2, [r3, #276]	@ 0x114
 801894c:	4b07      	ldr	r3, [pc, #28]	@ (801896c <sys_mutex_new+0x74>)
 801894e:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8018952:	429a      	cmp	r2, r3
 8018954:	d205      	bcs.n	8018962 <sys_mutex_new+0x6a>
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 8018956:	4b05      	ldr	r3, [pc, #20]	@ (801896c <sys_mutex_new+0x74>)
 8018958:	f8b3 2112 	ldrh.w	r2, [r3, #274]	@ 0x112
 801895c:	4b03      	ldr	r3, [pc, #12]	@ (801896c <sys_mutex_new+0x74>)
 801895e:	f8a3 2114 	strh.w	r2, [r3, #276]	@ 0x114
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018962:	2300      	movs	r3, #0
}
 8018964:	4618      	mov	r0, r3
 8018966:	3710      	adds	r7, #16
 8018968:	46bd      	mov	sp, r7
 801896a:	bd80      	pop	{r7, pc}
 801896c:	2000ea4c 	.word	0x2000ea4c

08018970 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018970:	b580      	push	{r7, lr}
 8018972:	b082      	sub	sp, #8
 8018974:	af00      	add	r7, sp, #0
 8018976:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	f04f 31ff 	mov.w	r1, #4294967295
 8018980:	4618      	mov	r0, r3
 8018982:	f7f1 fc1f 	bl	800a1c4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018986:	bf00      	nop
 8018988:	3708      	adds	r7, #8
 801898a:	46bd      	mov	sp, r7
 801898c:	bd80      	pop	{r7, pc}

0801898e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801898e:	b580      	push	{r7, lr}
 8018990:	b082      	sub	sp, #8
 8018992:	af00      	add	r7, sp, #0
 8018994:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	4618      	mov	r0, r3
 801899c:	f7f1 fc60 	bl	800a260 <osMutexRelease>
}
 80189a0:	bf00      	nop
 80189a2:	3708      	adds	r7, #8
 80189a4:	46bd      	mov	sp, r7
 80189a6:	bd80      	pop	{r7, pc}

080189a8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80189a8:	b580      	push	{r7, lr}
 80189aa:	b08c      	sub	sp, #48	@ 0x30
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	60f8      	str	r0, [r7, #12]
 80189b0:	60b9      	str	r1, [r7, #8]
 80189b2:	607a      	str	r2, [r7, #4]
 80189b4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80189b6:	f107 0314 	add.w	r3, r7, #20
 80189ba:	2200      	movs	r2, #0
 80189bc:	601a      	str	r2, [r3, #0]
 80189be:	605a      	str	r2, [r3, #4]
 80189c0:	609a      	str	r2, [r3, #8]
 80189c2:	60da      	str	r2, [r3, #12]
 80189c4:	611a      	str	r2, [r3, #16]
 80189c6:	615a      	str	r2, [r3, #20]
 80189c8:	619a      	str	r2, [r3, #24]
 80189ca:	68fb      	ldr	r3, [r7, #12]
 80189cc:	617b      	str	r3, [r7, #20]
 80189ce:	68bb      	ldr	r3, [r7, #8]
 80189d0:	61bb      	str	r3, [r7, #24]
 80189d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80189d4:	b21b      	sxth	r3, r3
 80189d6:	83bb      	strh	r3, [r7, #28]
 80189d8:	683b      	ldr	r3, [r7, #0]
 80189da:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 80189dc:	f107 0314 	add.w	r3, r7, #20
 80189e0:	6879      	ldr	r1, [r7, #4]
 80189e2:	4618      	mov	r0, r3
 80189e4:	f7f1 fb76 	bl	800a0d4 <osThreadCreate>
 80189e8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80189ea:	4618      	mov	r0, r3
 80189ec:	3730      	adds	r7, #48	@ 0x30
 80189ee:	46bd      	mov	sp, r7
 80189f0:	bd80      	pop	{r7, pc}
	...

080189f4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80189f4:	b580      	push	{r7, lr}
 80189f6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80189f8:	4b04      	ldr	r3, [pc, #16]	@ (8018a0c <sys_arch_protect+0x18>)
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	f04f 31ff 	mov.w	r1, #4294967295
 8018a00:	4618      	mov	r0, r3
 8018a02:	f7f1 fbdf 	bl	800a1c4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018a06:	2301      	movs	r3, #1
}
 8018a08:	4618      	mov	r0, r3
 8018a0a:	bd80      	pop	{r7, pc}
 8018a0c:	2000ecdc 	.word	0x2000ecdc

08018a10 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b082      	sub	sp, #8
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018a18:	4b04      	ldr	r3, [pc, #16]	@ (8018a2c <sys_arch_unprotect+0x1c>)
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	f7f1 fc1f 	bl	800a260 <osMutexRelease>
}
 8018a22:	bf00      	nop
 8018a24:	3708      	adds	r7, #8
 8018a26:	46bd      	mov	sp, r7
 8018a28:	bd80      	pop	{r7, pc}
 8018a2a:	bf00      	nop
 8018a2c:	2000ecdc 	.word	0x2000ecdc

08018a30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018a30:	b580      	push	{r7, lr}
 8018a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018a34:	2200      	movs	r2, #0
 8018a36:	4912      	ldr	r1, [pc, #72]	@ (8018a80 <MX_USB_DEVICE_Init+0x50>)
 8018a38:	4812      	ldr	r0, [pc, #72]	@ (8018a84 <MX_USB_DEVICE_Init+0x54>)
 8018a3a:	f7ef ffeb 	bl	8008a14 <USBD_Init>
 8018a3e:	4603      	mov	r3, r0
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d001      	beq.n	8018a48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018a44:	f7e8 fa2c 	bl	8000ea0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018a48:	490f      	ldr	r1, [pc, #60]	@ (8018a88 <MX_USB_DEVICE_Init+0x58>)
 8018a4a:	480e      	ldr	r0, [pc, #56]	@ (8018a84 <MX_USB_DEVICE_Init+0x54>)
 8018a4c:	f7f0 f812 	bl	8008a74 <USBD_RegisterClass>
 8018a50:	4603      	mov	r3, r0
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d001      	beq.n	8018a5a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018a56:	f7e8 fa23 	bl	8000ea0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8018a5a:	490c      	ldr	r1, [pc, #48]	@ (8018a8c <MX_USB_DEVICE_Init+0x5c>)
 8018a5c:	4809      	ldr	r0, [pc, #36]	@ (8018a84 <MX_USB_DEVICE_Init+0x54>)
 8018a5e:	f7ef ff09 	bl	8008874 <USBD_CDC_RegisterInterface>
 8018a62:	4603      	mov	r3, r0
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d001      	beq.n	8018a6c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018a68:	f7e8 fa1a 	bl	8000ea0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018a6c:	4805      	ldr	r0, [pc, #20]	@ (8018a84 <MX_USB_DEVICE_Init+0x54>)
 8018a6e:	f7f0 f837 	bl	8008ae0 <USBD_Start>
 8018a72:	4603      	mov	r3, r0
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d001      	beq.n	8018a7c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018a78:	f7e8 fa12 	bl	8000ea0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018a7c:	bf00      	nop
 8018a7e:	bd80      	pop	{r7, pc}
 8018a80:	200000d0 	.word	0x200000d0
 8018a84:	2000ece0 	.word	0x2000ece0
 8018a88:	2000002c 	.word	0x2000002c
 8018a8c:	200000bc 	.word	0x200000bc

08018a90 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018a90:	b580      	push	{r7, lr}
 8018a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018a94:	2200      	movs	r2, #0
 8018a96:	4905      	ldr	r1, [pc, #20]	@ (8018aac <CDC_Init_FS+0x1c>)
 8018a98:	4805      	ldr	r0, [pc, #20]	@ (8018ab0 <CDC_Init_FS+0x20>)
 8018a9a:	f7ef ff05 	bl	80088a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018a9e:	4905      	ldr	r1, [pc, #20]	@ (8018ab4 <CDC_Init_FS+0x24>)
 8018aa0:	4803      	ldr	r0, [pc, #12]	@ (8018ab0 <CDC_Init_FS+0x20>)
 8018aa2:	f7ef ff23 	bl	80088ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018aa6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	bd80      	pop	{r7, pc}
 8018aac:	2000f7bc 	.word	0x2000f7bc
 8018ab0:	2000ece0 	.word	0x2000ece0
 8018ab4:	2000efbc 	.word	0x2000efbc

08018ab8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018ab8:	b480      	push	{r7}
 8018aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018abc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018abe:	4618      	mov	r0, r3
 8018ac0:	46bd      	mov	sp, r7
 8018ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac6:	4770      	bx	lr

08018ac8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018ac8:	b480      	push	{r7}
 8018aca:	b083      	sub	sp, #12
 8018acc:	af00      	add	r7, sp, #0
 8018ace:	4603      	mov	r3, r0
 8018ad0:	6039      	str	r1, [r7, #0]
 8018ad2:	71fb      	strb	r3, [r7, #7]
 8018ad4:	4613      	mov	r3, r2
 8018ad6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018ad8:	79fb      	ldrb	r3, [r7, #7]
 8018ada:	2b23      	cmp	r3, #35	@ 0x23
 8018adc:	d84a      	bhi.n	8018b74 <CDC_Control_FS+0xac>
 8018ade:	a201      	add	r2, pc, #4	@ (adr r2, 8018ae4 <CDC_Control_FS+0x1c>)
 8018ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ae4:	08018b75 	.word	0x08018b75
 8018ae8:	08018b75 	.word	0x08018b75
 8018aec:	08018b75 	.word	0x08018b75
 8018af0:	08018b75 	.word	0x08018b75
 8018af4:	08018b75 	.word	0x08018b75
 8018af8:	08018b75 	.word	0x08018b75
 8018afc:	08018b75 	.word	0x08018b75
 8018b00:	08018b75 	.word	0x08018b75
 8018b04:	08018b75 	.word	0x08018b75
 8018b08:	08018b75 	.word	0x08018b75
 8018b0c:	08018b75 	.word	0x08018b75
 8018b10:	08018b75 	.word	0x08018b75
 8018b14:	08018b75 	.word	0x08018b75
 8018b18:	08018b75 	.word	0x08018b75
 8018b1c:	08018b75 	.word	0x08018b75
 8018b20:	08018b75 	.word	0x08018b75
 8018b24:	08018b75 	.word	0x08018b75
 8018b28:	08018b75 	.word	0x08018b75
 8018b2c:	08018b75 	.word	0x08018b75
 8018b30:	08018b75 	.word	0x08018b75
 8018b34:	08018b75 	.word	0x08018b75
 8018b38:	08018b75 	.word	0x08018b75
 8018b3c:	08018b75 	.word	0x08018b75
 8018b40:	08018b75 	.word	0x08018b75
 8018b44:	08018b75 	.word	0x08018b75
 8018b48:	08018b75 	.word	0x08018b75
 8018b4c:	08018b75 	.word	0x08018b75
 8018b50:	08018b75 	.word	0x08018b75
 8018b54:	08018b75 	.word	0x08018b75
 8018b58:	08018b75 	.word	0x08018b75
 8018b5c:	08018b75 	.word	0x08018b75
 8018b60:	08018b75 	.word	0x08018b75
 8018b64:	08018b75 	.word	0x08018b75
 8018b68:	08018b75 	.word	0x08018b75
 8018b6c:	08018b75 	.word	0x08018b75
 8018b70:	08018b75 	.word	0x08018b75
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018b74:	bf00      	nop
  }

  return (USBD_OK);
 8018b76:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018b78:	4618      	mov	r0, r3
 8018b7a:	370c      	adds	r7, #12
 8018b7c:	46bd      	mov	sp, r7
 8018b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b82:	4770      	bx	lr

08018b84 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018b84:	b580      	push	{r7, lr}
 8018b86:	b082      	sub	sp, #8
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	6078      	str	r0, [r7, #4]
 8018b8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018b8e:	6879      	ldr	r1, [r7, #4]
 8018b90:	4805      	ldr	r0, [pc, #20]	@ (8018ba8 <CDC_Receive_FS+0x24>)
 8018b92:	f7ef feab 	bl	80088ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018b96:	4804      	ldr	r0, [pc, #16]	@ (8018ba8 <CDC_Receive_FS+0x24>)
 8018b98:	f7ef ff06 	bl	80089a8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8018b9c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018b9e:	4618      	mov	r0, r3
 8018ba0:	3708      	adds	r7, #8
 8018ba2:	46bd      	mov	sp, r7
 8018ba4:	bd80      	pop	{r7, pc}
 8018ba6:	bf00      	nop
 8018ba8:	2000ece0 	.word	0x2000ece0

08018bac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8018bac:	b580      	push	{r7, lr}
 8018bae:	b084      	sub	sp, #16
 8018bb0:	af00      	add	r7, sp, #0
 8018bb2:	6078      	str	r0, [r7, #4]
 8018bb4:	460b      	mov	r3, r1
 8018bb6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8018bb8:	2300      	movs	r3, #0
 8018bba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8018bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8018bf4 <CDC_Transmit_FS+0x48>)
 8018bbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8018bc2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8018bc4:	68bb      	ldr	r3, [r7, #8]
 8018bc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d001      	beq.n	8018bd2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8018bce:	2301      	movs	r3, #1
 8018bd0:	e00b      	b.n	8018bea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8018bd2:	887b      	ldrh	r3, [r7, #2]
 8018bd4:	461a      	mov	r2, r3
 8018bd6:	6879      	ldr	r1, [r7, #4]
 8018bd8:	4806      	ldr	r0, [pc, #24]	@ (8018bf4 <CDC_Transmit_FS+0x48>)
 8018bda:	f7ef fe65 	bl	80088a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8018bde:	4805      	ldr	r0, [pc, #20]	@ (8018bf4 <CDC_Transmit_FS+0x48>)
 8018be0:	f7ef fea2 	bl	8008928 <USBD_CDC_TransmitPacket>
 8018be4:	4603      	mov	r3, r0
 8018be6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8018be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8018bea:	4618      	mov	r0, r3
 8018bec:	3710      	adds	r7, #16
 8018bee:	46bd      	mov	sp, r7
 8018bf0:	bd80      	pop	{r7, pc}
 8018bf2:	bf00      	nop
 8018bf4:	2000ece0 	.word	0x2000ece0

08018bf8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018bf8:	b480      	push	{r7}
 8018bfa:	b087      	sub	sp, #28
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	60f8      	str	r0, [r7, #12]
 8018c00:	60b9      	str	r1, [r7, #8]
 8018c02:	4613      	mov	r3, r2
 8018c04:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018c06:	2300      	movs	r3, #0
 8018c08:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8018c0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018c0e:	4618      	mov	r0, r3
 8018c10:	371c      	adds	r7, #28
 8018c12:	46bd      	mov	sp, r7
 8018c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c18:	4770      	bx	lr
	...

08018c1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c1c:	b480      	push	{r7}
 8018c1e:	b083      	sub	sp, #12
 8018c20:	af00      	add	r7, sp, #0
 8018c22:	4603      	mov	r3, r0
 8018c24:	6039      	str	r1, [r7, #0]
 8018c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018c28:	683b      	ldr	r3, [r7, #0]
 8018c2a:	2212      	movs	r2, #18
 8018c2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018c2e:	4b03      	ldr	r3, [pc, #12]	@ (8018c3c <USBD_FS_DeviceDescriptor+0x20>)
}
 8018c30:	4618      	mov	r0, r3
 8018c32:	370c      	adds	r7, #12
 8018c34:	46bd      	mov	sp, r7
 8018c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c3a:	4770      	bx	lr
 8018c3c:	200000ec 	.word	0x200000ec

08018c40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c40:	b480      	push	{r7}
 8018c42:	b083      	sub	sp, #12
 8018c44:	af00      	add	r7, sp, #0
 8018c46:	4603      	mov	r3, r0
 8018c48:	6039      	str	r1, [r7, #0]
 8018c4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018c4c:	683b      	ldr	r3, [r7, #0]
 8018c4e:	2204      	movs	r2, #4
 8018c50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018c52:	4b03      	ldr	r3, [pc, #12]	@ (8018c60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018c54:	4618      	mov	r0, r3
 8018c56:	370c      	adds	r7, #12
 8018c58:	46bd      	mov	sp, r7
 8018c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c5e:	4770      	bx	lr
 8018c60:	20000100 	.word	0x20000100

08018c64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c64:	b580      	push	{r7, lr}
 8018c66:	b082      	sub	sp, #8
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	4603      	mov	r3, r0
 8018c6c:	6039      	str	r1, [r7, #0]
 8018c6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018c70:	79fb      	ldrb	r3, [r7, #7]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d105      	bne.n	8018c82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018c76:	683a      	ldr	r2, [r7, #0]
 8018c78:	4907      	ldr	r1, [pc, #28]	@ (8018c98 <USBD_FS_ProductStrDescriptor+0x34>)
 8018c7a:	4808      	ldr	r0, [pc, #32]	@ (8018c9c <USBD_FS_ProductStrDescriptor+0x38>)
 8018c7c:	f7f1 f8f6 	bl	8009e6c <USBD_GetString>
 8018c80:	e004      	b.n	8018c8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018c82:	683a      	ldr	r2, [r7, #0]
 8018c84:	4904      	ldr	r1, [pc, #16]	@ (8018c98 <USBD_FS_ProductStrDescriptor+0x34>)
 8018c86:	4805      	ldr	r0, [pc, #20]	@ (8018c9c <USBD_FS_ProductStrDescriptor+0x38>)
 8018c88:	f7f1 f8f0 	bl	8009e6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8018c8c:	4b02      	ldr	r3, [pc, #8]	@ (8018c98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018c8e:	4618      	mov	r0, r3
 8018c90:	3708      	adds	r7, #8
 8018c92:	46bd      	mov	sp, r7
 8018c94:	bd80      	pop	{r7, pc}
 8018c96:	bf00      	nop
 8018c98:	2000ffbc 	.word	0x2000ffbc
 8018c9c:	0801f10c 	.word	0x0801f10c

08018ca0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018ca0:	b580      	push	{r7, lr}
 8018ca2:	b082      	sub	sp, #8
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	6039      	str	r1, [r7, #0]
 8018caa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018cac:	683a      	ldr	r2, [r7, #0]
 8018cae:	4904      	ldr	r1, [pc, #16]	@ (8018cc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018cb0:	4804      	ldr	r0, [pc, #16]	@ (8018cc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018cb2:	f7f1 f8db 	bl	8009e6c <USBD_GetString>
  return USBD_StrDesc;
 8018cb6:	4b02      	ldr	r3, [pc, #8]	@ (8018cc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018cb8:	4618      	mov	r0, r3
 8018cba:	3708      	adds	r7, #8
 8018cbc:	46bd      	mov	sp, r7
 8018cbe:	bd80      	pop	{r7, pc}
 8018cc0:	2000ffbc 	.word	0x2000ffbc
 8018cc4:	0801f124 	.word	0x0801f124

08018cc8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018cc8:	b580      	push	{r7, lr}
 8018cca:	b082      	sub	sp, #8
 8018ccc:	af00      	add	r7, sp, #0
 8018cce:	4603      	mov	r3, r0
 8018cd0:	6039      	str	r1, [r7, #0]
 8018cd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018cd4:	683b      	ldr	r3, [r7, #0]
 8018cd6:	221a      	movs	r2, #26
 8018cd8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018cda:	f000 f843 	bl	8018d64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018cde:	4b02      	ldr	r3, [pc, #8]	@ (8018ce8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	3708      	adds	r7, #8
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	bd80      	pop	{r7, pc}
 8018ce8:	20000104 	.word	0x20000104

08018cec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018cec:	b580      	push	{r7, lr}
 8018cee:	b082      	sub	sp, #8
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	4603      	mov	r3, r0
 8018cf4:	6039      	str	r1, [r7, #0]
 8018cf6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018cf8:	79fb      	ldrb	r3, [r7, #7]
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d105      	bne.n	8018d0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018cfe:	683a      	ldr	r2, [r7, #0]
 8018d00:	4907      	ldr	r1, [pc, #28]	@ (8018d20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018d02:	4808      	ldr	r0, [pc, #32]	@ (8018d24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018d04:	f7f1 f8b2 	bl	8009e6c <USBD_GetString>
 8018d08:	e004      	b.n	8018d14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018d0a:	683a      	ldr	r2, [r7, #0]
 8018d0c:	4904      	ldr	r1, [pc, #16]	@ (8018d20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018d0e:	4805      	ldr	r0, [pc, #20]	@ (8018d24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018d10:	f7f1 f8ac 	bl	8009e6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8018d14:	4b02      	ldr	r3, [pc, #8]	@ (8018d20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018d16:	4618      	mov	r0, r3
 8018d18:	3708      	adds	r7, #8
 8018d1a:	46bd      	mov	sp, r7
 8018d1c:	bd80      	pop	{r7, pc}
 8018d1e:	bf00      	nop
 8018d20:	2000ffbc 	.word	0x2000ffbc
 8018d24:	0801f138 	.word	0x0801f138

08018d28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d28:	b580      	push	{r7, lr}
 8018d2a:	b082      	sub	sp, #8
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	4603      	mov	r3, r0
 8018d30:	6039      	str	r1, [r7, #0]
 8018d32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018d34:	79fb      	ldrb	r3, [r7, #7]
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d105      	bne.n	8018d46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018d3a:	683a      	ldr	r2, [r7, #0]
 8018d3c:	4907      	ldr	r1, [pc, #28]	@ (8018d5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018d3e:	4808      	ldr	r0, [pc, #32]	@ (8018d60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018d40:	f7f1 f894 	bl	8009e6c <USBD_GetString>
 8018d44:	e004      	b.n	8018d50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018d46:	683a      	ldr	r2, [r7, #0]
 8018d48:	4904      	ldr	r1, [pc, #16]	@ (8018d5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018d4a:	4805      	ldr	r0, [pc, #20]	@ (8018d60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018d4c:	f7f1 f88e 	bl	8009e6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8018d50:	4b02      	ldr	r3, [pc, #8]	@ (8018d5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018d52:	4618      	mov	r0, r3
 8018d54:	3708      	adds	r7, #8
 8018d56:	46bd      	mov	sp, r7
 8018d58:	bd80      	pop	{r7, pc}
 8018d5a:	bf00      	nop
 8018d5c:	2000ffbc 	.word	0x2000ffbc
 8018d60:	0801f144 	.word	0x0801f144

08018d64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018d64:	b580      	push	{r7, lr}
 8018d66:	b084      	sub	sp, #16
 8018d68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8018da8 <Get_SerialNum+0x44>)
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018d70:	4b0e      	ldr	r3, [pc, #56]	@ (8018dac <Get_SerialNum+0x48>)
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018d76:	4b0e      	ldr	r3, [pc, #56]	@ (8018db0 <Get_SerialNum+0x4c>)
 8018d78:	681b      	ldr	r3, [r3, #0]
 8018d7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018d7c:	68fa      	ldr	r2, [r7, #12]
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	4413      	add	r3, r2
 8018d82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d009      	beq.n	8018d9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018d8a:	2208      	movs	r2, #8
 8018d8c:	4909      	ldr	r1, [pc, #36]	@ (8018db4 <Get_SerialNum+0x50>)
 8018d8e:	68f8      	ldr	r0, [r7, #12]
 8018d90:	f000 f814 	bl	8018dbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018d94:	2204      	movs	r2, #4
 8018d96:	4908      	ldr	r1, [pc, #32]	@ (8018db8 <Get_SerialNum+0x54>)
 8018d98:	68b8      	ldr	r0, [r7, #8]
 8018d9a:	f000 f80f 	bl	8018dbc <IntToUnicode>
  }
}
 8018d9e:	bf00      	nop
 8018da0:	3710      	adds	r7, #16
 8018da2:	46bd      	mov	sp, r7
 8018da4:	bd80      	pop	{r7, pc}
 8018da6:	bf00      	nop
 8018da8:	1fff7a10 	.word	0x1fff7a10
 8018dac:	1fff7a14 	.word	0x1fff7a14
 8018db0:	1fff7a18 	.word	0x1fff7a18
 8018db4:	20000106 	.word	0x20000106
 8018db8:	20000116 	.word	0x20000116

08018dbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018dbc:	b480      	push	{r7}
 8018dbe:	b087      	sub	sp, #28
 8018dc0:	af00      	add	r7, sp, #0
 8018dc2:	60f8      	str	r0, [r7, #12]
 8018dc4:	60b9      	str	r1, [r7, #8]
 8018dc6:	4613      	mov	r3, r2
 8018dc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018dca:	2300      	movs	r3, #0
 8018dcc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018dce:	2300      	movs	r3, #0
 8018dd0:	75fb      	strb	r3, [r7, #23]
 8018dd2:	e027      	b.n	8018e24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018dd4:	68fb      	ldr	r3, [r7, #12]
 8018dd6:	0f1b      	lsrs	r3, r3, #28
 8018dd8:	2b09      	cmp	r3, #9
 8018dda:	d80b      	bhi.n	8018df4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018ddc:	68fb      	ldr	r3, [r7, #12]
 8018dde:	0f1b      	lsrs	r3, r3, #28
 8018de0:	b2da      	uxtb	r2, r3
 8018de2:	7dfb      	ldrb	r3, [r7, #23]
 8018de4:	005b      	lsls	r3, r3, #1
 8018de6:	4619      	mov	r1, r3
 8018de8:	68bb      	ldr	r3, [r7, #8]
 8018dea:	440b      	add	r3, r1
 8018dec:	3230      	adds	r2, #48	@ 0x30
 8018dee:	b2d2      	uxtb	r2, r2
 8018df0:	701a      	strb	r2, [r3, #0]
 8018df2:	e00a      	b.n	8018e0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	0f1b      	lsrs	r3, r3, #28
 8018df8:	b2da      	uxtb	r2, r3
 8018dfa:	7dfb      	ldrb	r3, [r7, #23]
 8018dfc:	005b      	lsls	r3, r3, #1
 8018dfe:	4619      	mov	r1, r3
 8018e00:	68bb      	ldr	r3, [r7, #8]
 8018e02:	440b      	add	r3, r1
 8018e04:	3237      	adds	r2, #55	@ 0x37
 8018e06:	b2d2      	uxtb	r2, r2
 8018e08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018e0a:	68fb      	ldr	r3, [r7, #12]
 8018e0c:	011b      	lsls	r3, r3, #4
 8018e0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018e10:	7dfb      	ldrb	r3, [r7, #23]
 8018e12:	005b      	lsls	r3, r3, #1
 8018e14:	3301      	adds	r3, #1
 8018e16:	68ba      	ldr	r2, [r7, #8]
 8018e18:	4413      	add	r3, r2
 8018e1a:	2200      	movs	r2, #0
 8018e1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018e1e:	7dfb      	ldrb	r3, [r7, #23]
 8018e20:	3301      	adds	r3, #1
 8018e22:	75fb      	strb	r3, [r7, #23]
 8018e24:	7dfa      	ldrb	r2, [r7, #23]
 8018e26:	79fb      	ldrb	r3, [r7, #7]
 8018e28:	429a      	cmp	r2, r3
 8018e2a:	d3d3      	bcc.n	8018dd4 <IntToUnicode+0x18>
  }
}
 8018e2c:	bf00      	nop
 8018e2e:	bf00      	nop
 8018e30:	371c      	adds	r7, #28
 8018e32:	46bd      	mov	sp, r7
 8018e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e38:	4770      	bx	lr
	...

08018e3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018e3c:	b580      	push	{r7, lr}
 8018e3e:	b08a      	sub	sp, #40	@ 0x28
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018e44:	f107 0314 	add.w	r3, r7, #20
 8018e48:	2200      	movs	r2, #0
 8018e4a:	601a      	str	r2, [r3, #0]
 8018e4c:	605a      	str	r2, [r3, #4]
 8018e4e:	609a      	str	r2, [r3, #8]
 8018e50:	60da      	str	r2, [r3, #12]
 8018e52:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8018e5c:	d13a      	bne.n	8018ed4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018e5e:	2300      	movs	r3, #0
 8018e60:	613b      	str	r3, [r7, #16]
 8018e62:	4b1e      	ldr	r3, [pc, #120]	@ (8018edc <HAL_PCD_MspInit+0xa0>)
 8018e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018e66:	4a1d      	ldr	r2, [pc, #116]	@ (8018edc <HAL_PCD_MspInit+0xa0>)
 8018e68:	f043 0301 	orr.w	r3, r3, #1
 8018e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8018e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8018edc <HAL_PCD_MspInit+0xa0>)
 8018e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018e72:	f003 0301 	and.w	r3, r3, #1
 8018e76:	613b      	str	r3, [r7, #16]
 8018e78:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018e7a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8018e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018e80:	2302      	movs	r3, #2
 8018e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018e84:	2300      	movs	r3, #0
 8018e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018e88:	2303      	movs	r3, #3
 8018e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018e8c:	230a      	movs	r3, #10
 8018e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018e90:	f107 0314 	add.w	r3, r7, #20
 8018e94:	4619      	mov	r1, r3
 8018e96:	4812      	ldr	r0, [pc, #72]	@ (8018ee0 <HAL_PCD_MspInit+0xa4>)
 8018e98:	f7ea f806 	bl	8002ea8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8018edc <HAL_PCD_MspInit+0xa0>)
 8018e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018ea0:	4a0e      	ldr	r2, [pc, #56]	@ (8018edc <HAL_PCD_MspInit+0xa0>)
 8018ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018ea6:	6353      	str	r3, [r2, #52]	@ 0x34
 8018ea8:	2300      	movs	r3, #0
 8018eaa:	60fb      	str	r3, [r7, #12]
 8018eac:	4b0b      	ldr	r3, [pc, #44]	@ (8018edc <HAL_PCD_MspInit+0xa0>)
 8018eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8018edc <HAL_PCD_MspInit+0xa0>)
 8018eb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8018eb6:	6453      	str	r3, [r2, #68]	@ 0x44
 8018eb8:	4b08      	ldr	r3, [pc, #32]	@ (8018edc <HAL_PCD_MspInit+0xa0>)
 8018eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018ebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8018ec0:	60fb      	str	r3, [r7, #12]
 8018ec2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8018ec4:	2200      	movs	r2, #0
 8018ec6:	2105      	movs	r1, #5
 8018ec8:	2043      	movs	r0, #67	@ 0x43
 8018eca:	f7e8 ff1f 	bl	8001d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018ece:	2043      	movs	r0, #67	@ 0x43
 8018ed0:	f7e8 ff38 	bl	8001d44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018ed4:	bf00      	nop
 8018ed6:	3728      	adds	r7, #40	@ 0x28
 8018ed8:	46bd      	mov	sp, r7
 8018eda:	bd80      	pop	{r7, pc}
 8018edc:	40023800 	.word	0x40023800
 8018ee0:	40020000 	.word	0x40020000

08018ee4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	b082      	sub	sp, #8
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8018ef8:	4619      	mov	r1, r3
 8018efa:	4610      	mov	r0, r2
 8018efc:	f7ef fe3d 	bl	8008b7a <USBD_LL_SetupStage>
}
 8018f00:	bf00      	nop
 8018f02:	3708      	adds	r7, #8
 8018f04:	46bd      	mov	sp, r7
 8018f06:	bd80      	pop	{r7, pc}

08018f08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b082      	sub	sp, #8
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
 8018f10:	460b      	mov	r3, r1
 8018f12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8018f1a:	78fa      	ldrb	r2, [r7, #3]
 8018f1c:	6879      	ldr	r1, [r7, #4]
 8018f1e:	4613      	mov	r3, r2
 8018f20:	00db      	lsls	r3, r3, #3
 8018f22:	4413      	add	r3, r2
 8018f24:	009b      	lsls	r3, r3, #2
 8018f26:	440b      	add	r3, r1
 8018f28:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8018f2c:	681a      	ldr	r2, [r3, #0]
 8018f2e:	78fb      	ldrb	r3, [r7, #3]
 8018f30:	4619      	mov	r1, r3
 8018f32:	f7ef fe77 	bl	8008c24 <USBD_LL_DataOutStage>
}
 8018f36:	bf00      	nop
 8018f38:	3708      	adds	r7, #8
 8018f3a:	46bd      	mov	sp, r7
 8018f3c:	bd80      	pop	{r7, pc}

08018f3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f3e:	b580      	push	{r7, lr}
 8018f40:	b082      	sub	sp, #8
 8018f42:	af00      	add	r7, sp, #0
 8018f44:	6078      	str	r0, [r7, #4]
 8018f46:	460b      	mov	r3, r1
 8018f48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8018f50:	78fa      	ldrb	r2, [r7, #3]
 8018f52:	6879      	ldr	r1, [r7, #4]
 8018f54:	4613      	mov	r3, r2
 8018f56:	00db      	lsls	r3, r3, #3
 8018f58:	4413      	add	r3, r2
 8018f5a:	009b      	lsls	r3, r3, #2
 8018f5c:	440b      	add	r3, r1
 8018f5e:	3320      	adds	r3, #32
 8018f60:	681a      	ldr	r2, [r3, #0]
 8018f62:	78fb      	ldrb	r3, [r7, #3]
 8018f64:	4619      	mov	r1, r3
 8018f66:	f7ef ff19 	bl	8008d9c <USBD_LL_DataInStage>
}
 8018f6a:	bf00      	nop
 8018f6c:	3708      	adds	r7, #8
 8018f6e:	46bd      	mov	sp, r7
 8018f70:	bd80      	pop	{r7, pc}

08018f72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f72:	b580      	push	{r7, lr}
 8018f74:	b082      	sub	sp, #8
 8018f76:	af00      	add	r7, sp, #0
 8018f78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018f80:	4618      	mov	r0, r3
 8018f82:	f7f0 f85d 	bl	8009040 <USBD_LL_SOF>
}
 8018f86:	bf00      	nop
 8018f88:	3708      	adds	r7, #8
 8018f8a:	46bd      	mov	sp, r7
 8018f8c:	bd80      	pop	{r7, pc}

08018f8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f8e:	b580      	push	{r7, lr}
 8018f90:	b084      	sub	sp, #16
 8018f92:	af00      	add	r7, sp, #0
 8018f94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018f96:	2301      	movs	r3, #1
 8018f98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	79db      	ldrb	r3, [r3, #7]
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d102      	bne.n	8018fa8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018fa2:	2300      	movs	r3, #0
 8018fa4:	73fb      	strb	r3, [r7, #15]
 8018fa6:	e008      	b.n	8018fba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	79db      	ldrb	r3, [r3, #7]
 8018fac:	2b02      	cmp	r3, #2
 8018fae:	d102      	bne.n	8018fb6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018fb0:	2301      	movs	r3, #1
 8018fb2:	73fb      	strb	r3, [r7, #15]
 8018fb4:	e001      	b.n	8018fba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018fb6:	f7e7 ff73 	bl	8000ea0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018fc0:	7bfa      	ldrb	r2, [r7, #15]
 8018fc2:	4611      	mov	r1, r2
 8018fc4:	4618      	mov	r0, r3
 8018fc6:	f7ef fff7 	bl	8008fb8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	f7ef ff9e 	bl	8008f12 <USBD_LL_Reset>
}
 8018fd6:	bf00      	nop
 8018fd8:	3710      	adds	r7, #16
 8018fda:	46bd      	mov	sp, r7
 8018fdc:	bd80      	pop	{r7, pc}
	...

08018fe0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fe0:	b580      	push	{r7, lr}
 8018fe2:	b082      	sub	sp, #8
 8018fe4:	af00      	add	r7, sp, #0
 8018fe6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018fee:	4618      	mov	r0, r3
 8018ff0:	f7ef fff2 	bl	8008fd8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	681b      	ldr	r3, [r3, #0]
 8018ff8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	687a      	ldr	r2, [r7, #4]
 8019000:	6812      	ldr	r2, [r2, #0]
 8019002:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8019006:	f043 0301 	orr.w	r3, r3, #1
 801900a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	7adb      	ldrb	r3, [r3, #11]
 8019010:	2b00      	cmp	r3, #0
 8019012:	d005      	beq.n	8019020 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019014:	4b04      	ldr	r3, [pc, #16]	@ (8019028 <HAL_PCD_SuspendCallback+0x48>)
 8019016:	691b      	ldr	r3, [r3, #16]
 8019018:	4a03      	ldr	r2, [pc, #12]	@ (8019028 <HAL_PCD_SuspendCallback+0x48>)
 801901a:	f043 0306 	orr.w	r3, r3, #6
 801901e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019020:	bf00      	nop
 8019022:	3708      	adds	r7, #8
 8019024:	46bd      	mov	sp, r7
 8019026:	bd80      	pop	{r7, pc}
 8019028:	e000ed00 	.word	0xe000ed00

0801902c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801902c:	b580      	push	{r7, lr}
 801902e:	b082      	sub	sp, #8
 8019030:	af00      	add	r7, sp, #0
 8019032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801903a:	4618      	mov	r0, r3
 801903c:	f7ef ffe8 	bl	8009010 <USBD_LL_Resume>
}
 8019040:	bf00      	nop
 8019042:	3708      	adds	r7, #8
 8019044:	46bd      	mov	sp, r7
 8019046:	bd80      	pop	{r7, pc}

08019048 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019048:	b580      	push	{r7, lr}
 801904a:	b082      	sub	sp, #8
 801904c:	af00      	add	r7, sp, #0
 801904e:	6078      	str	r0, [r7, #4]
 8019050:	460b      	mov	r3, r1
 8019052:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801905a:	78fa      	ldrb	r2, [r7, #3]
 801905c:	4611      	mov	r1, r2
 801905e:	4618      	mov	r0, r3
 8019060:	f7f0 f840 	bl	80090e4 <USBD_LL_IsoOUTIncomplete>
}
 8019064:	bf00      	nop
 8019066:	3708      	adds	r7, #8
 8019068:	46bd      	mov	sp, r7
 801906a:	bd80      	pop	{r7, pc}

0801906c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801906c:	b580      	push	{r7, lr}
 801906e:	b082      	sub	sp, #8
 8019070:	af00      	add	r7, sp, #0
 8019072:	6078      	str	r0, [r7, #4]
 8019074:	460b      	mov	r3, r1
 8019076:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801907e:	78fa      	ldrb	r2, [r7, #3]
 8019080:	4611      	mov	r1, r2
 8019082:	4618      	mov	r0, r3
 8019084:	f7ef fffc 	bl	8009080 <USBD_LL_IsoINIncomplete>
}
 8019088:	bf00      	nop
 801908a:	3708      	adds	r7, #8
 801908c:	46bd      	mov	sp, r7
 801908e:	bd80      	pop	{r7, pc}

08019090 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019090:	b580      	push	{r7, lr}
 8019092:	b082      	sub	sp, #8
 8019094:	af00      	add	r7, sp, #0
 8019096:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801909e:	4618      	mov	r0, r3
 80190a0:	f7f0 f852 	bl	8009148 <USBD_LL_DevConnected>
}
 80190a4:	bf00      	nop
 80190a6:	3708      	adds	r7, #8
 80190a8:	46bd      	mov	sp, r7
 80190aa:	bd80      	pop	{r7, pc}

080190ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80190ac:	b580      	push	{r7, lr}
 80190ae:	b082      	sub	sp, #8
 80190b0:	af00      	add	r7, sp, #0
 80190b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80190ba:	4618      	mov	r0, r3
 80190bc:	f7f0 f84f 	bl	800915e <USBD_LL_DevDisconnected>
}
 80190c0:	bf00      	nop
 80190c2:	3708      	adds	r7, #8
 80190c4:	46bd      	mov	sp, r7
 80190c6:	bd80      	pop	{r7, pc}

080190c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80190c8:	b580      	push	{r7, lr}
 80190ca:	b082      	sub	sp, #8
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	781b      	ldrb	r3, [r3, #0]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d13c      	bne.n	8019152 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80190d8:	4a20      	ldr	r2, [pc, #128]	@ (801915c <USBD_LL_Init+0x94>)
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	4a1e      	ldr	r2, [pc, #120]	@ (801915c <USBD_LL_Init+0x94>)
 80190e4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80190e8:	4b1c      	ldr	r3, [pc, #112]	@ (801915c <USBD_LL_Init+0x94>)
 80190ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80190ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80190f0:	4b1a      	ldr	r3, [pc, #104]	@ (801915c <USBD_LL_Init+0x94>)
 80190f2:	2204      	movs	r2, #4
 80190f4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80190f6:	4b19      	ldr	r3, [pc, #100]	@ (801915c <USBD_LL_Init+0x94>)
 80190f8:	2202      	movs	r2, #2
 80190fa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80190fc:	4b17      	ldr	r3, [pc, #92]	@ (801915c <USBD_LL_Init+0x94>)
 80190fe:	2200      	movs	r2, #0
 8019100:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019102:	4b16      	ldr	r3, [pc, #88]	@ (801915c <USBD_LL_Init+0x94>)
 8019104:	2202      	movs	r2, #2
 8019106:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019108:	4b14      	ldr	r3, [pc, #80]	@ (801915c <USBD_LL_Init+0x94>)
 801910a:	2200      	movs	r2, #0
 801910c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801910e:	4b13      	ldr	r3, [pc, #76]	@ (801915c <USBD_LL_Init+0x94>)
 8019110:	2200      	movs	r2, #0
 8019112:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019114:	4b11      	ldr	r3, [pc, #68]	@ (801915c <USBD_LL_Init+0x94>)
 8019116:	2200      	movs	r2, #0
 8019118:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801911a:	4b10      	ldr	r3, [pc, #64]	@ (801915c <USBD_LL_Init+0x94>)
 801911c:	2200      	movs	r2, #0
 801911e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019120:	4b0e      	ldr	r3, [pc, #56]	@ (801915c <USBD_LL_Init+0x94>)
 8019122:	2200      	movs	r2, #0
 8019124:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019126:	480d      	ldr	r0, [pc, #52]	@ (801915c <USBD_LL_Init+0x94>)
 8019128:	f7ea f873 	bl	8003212 <HAL_PCD_Init>
 801912c:	4603      	mov	r3, r0
 801912e:	2b00      	cmp	r3, #0
 8019130:	d001      	beq.n	8019136 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8019132:	f7e7 feb5 	bl	8000ea0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8019136:	2180      	movs	r1, #128	@ 0x80
 8019138:	4808      	ldr	r0, [pc, #32]	@ (801915c <USBD_LL_Init+0x94>)
 801913a:	f7eb faa0 	bl	800467e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801913e:	2240      	movs	r2, #64	@ 0x40
 8019140:	2100      	movs	r1, #0
 8019142:	4806      	ldr	r0, [pc, #24]	@ (801915c <USBD_LL_Init+0x94>)
 8019144:	f7eb fa54 	bl	80045f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8019148:	2280      	movs	r2, #128	@ 0x80
 801914a:	2101      	movs	r1, #1
 801914c:	4803      	ldr	r0, [pc, #12]	@ (801915c <USBD_LL_Init+0x94>)
 801914e:	f7eb fa4f 	bl	80045f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8019152:	2300      	movs	r3, #0
}
 8019154:	4618      	mov	r0, r3
 8019156:	3708      	adds	r7, #8
 8019158:	46bd      	mov	sp, r7
 801915a:	bd80      	pop	{r7, pc}
 801915c:	200101bc 	.word	0x200101bc

08019160 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019160:	b580      	push	{r7, lr}
 8019162:	b084      	sub	sp, #16
 8019164:	af00      	add	r7, sp, #0
 8019166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019168:	2300      	movs	r3, #0
 801916a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801916c:	2300      	movs	r3, #0
 801916e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019176:	4618      	mov	r0, r3
 8019178:	f7ea f95a 	bl	8003430 <HAL_PCD_Start>
 801917c:	4603      	mov	r3, r0
 801917e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019180:	7bfb      	ldrb	r3, [r7, #15]
 8019182:	4618      	mov	r0, r3
 8019184:	f000 f942 	bl	801940c <USBD_Get_USB_Status>
 8019188:	4603      	mov	r3, r0
 801918a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801918c:	7bbb      	ldrb	r3, [r7, #14]
}
 801918e:	4618      	mov	r0, r3
 8019190:	3710      	adds	r7, #16
 8019192:	46bd      	mov	sp, r7
 8019194:	bd80      	pop	{r7, pc}

08019196 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019196:	b580      	push	{r7, lr}
 8019198:	b084      	sub	sp, #16
 801919a:	af00      	add	r7, sp, #0
 801919c:	6078      	str	r0, [r7, #4]
 801919e:	4608      	mov	r0, r1
 80191a0:	4611      	mov	r1, r2
 80191a2:	461a      	mov	r2, r3
 80191a4:	4603      	mov	r3, r0
 80191a6:	70fb      	strb	r3, [r7, #3]
 80191a8:	460b      	mov	r3, r1
 80191aa:	70bb      	strb	r3, [r7, #2]
 80191ac:	4613      	mov	r3, r2
 80191ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191b0:	2300      	movs	r3, #0
 80191b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191b4:	2300      	movs	r3, #0
 80191b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80191be:	78bb      	ldrb	r3, [r7, #2]
 80191c0:	883a      	ldrh	r2, [r7, #0]
 80191c2:	78f9      	ldrb	r1, [r7, #3]
 80191c4:	f7ea fe2e 	bl	8003e24 <HAL_PCD_EP_Open>
 80191c8:	4603      	mov	r3, r0
 80191ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80191cc:	7bfb      	ldrb	r3, [r7, #15]
 80191ce:	4618      	mov	r0, r3
 80191d0:	f000 f91c 	bl	801940c <USBD_Get_USB_Status>
 80191d4:	4603      	mov	r3, r0
 80191d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80191d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80191da:	4618      	mov	r0, r3
 80191dc:	3710      	adds	r7, #16
 80191de:	46bd      	mov	sp, r7
 80191e0:	bd80      	pop	{r7, pc}

080191e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80191e2:	b580      	push	{r7, lr}
 80191e4:	b084      	sub	sp, #16
 80191e6:	af00      	add	r7, sp, #0
 80191e8:	6078      	str	r0, [r7, #4]
 80191ea:	460b      	mov	r3, r1
 80191ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191ee:	2300      	movs	r3, #0
 80191f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191f2:	2300      	movs	r3, #0
 80191f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80191fc:	78fa      	ldrb	r2, [r7, #3]
 80191fe:	4611      	mov	r1, r2
 8019200:	4618      	mov	r0, r3
 8019202:	f7ea fe79 	bl	8003ef8 <HAL_PCD_EP_Close>
 8019206:	4603      	mov	r3, r0
 8019208:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801920a:	7bfb      	ldrb	r3, [r7, #15]
 801920c:	4618      	mov	r0, r3
 801920e:	f000 f8fd 	bl	801940c <USBD_Get_USB_Status>
 8019212:	4603      	mov	r3, r0
 8019214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019216:	7bbb      	ldrb	r3, [r7, #14]
}
 8019218:	4618      	mov	r0, r3
 801921a:	3710      	adds	r7, #16
 801921c:	46bd      	mov	sp, r7
 801921e:	bd80      	pop	{r7, pc}

08019220 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019220:	b580      	push	{r7, lr}
 8019222:	b084      	sub	sp, #16
 8019224:	af00      	add	r7, sp, #0
 8019226:	6078      	str	r0, [r7, #4]
 8019228:	460b      	mov	r3, r1
 801922a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801922c:	2300      	movs	r3, #0
 801922e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019230:	2300      	movs	r3, #0
 8019232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801923a:	78fa      	ldrb	r2, [r7, #3]
 801923c:	4611      	mov	r1, r2
 801923e:	4618      	mov	r0, r3
 8019240:	f7ea ff31 	bl	80040a6 <HAL_PCD_EP_SetStall>
 8019244:	4603      	mov	r3, r0
 8019246:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019248:	7bfb      	ldrb	r3, [r7, #15]
 801924a:	4618      	mov	r0, r3
 801924c:	f000 f8de 	bl	801940c <USBD_Get_USB_Status>
 8019250:	4603      	mov	r3, r0
 8019252:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019254:	7bbb      	ldrb	r3, [r7, #14]
}
 8019256:	4618      	mov	r0, r3
 8019258:	3710      	adds	r7, #16
 801925a:	46bd      	mov	sp, r7
 801925c:	bd80      	pop	{r7, pc}

0801925e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801925e:	b580      	push	{r7, lr}
 8019260:	b084      	sub	sp, #16
 8019262:	af00      	add	r7, sp, #0
 8019264:	6078      	str	r0, [r7, #4]
 8019266:	460b      	mov	r3, r1
 8019268:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801926a:	2300      	movs	r3, #0
 801926c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801926e:	2300      	movs	r3, #0
 8019270:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019278:	78fa      	ldrb	r2, [r7, #3]
 801927a:	4611      	mov	r1, r2
 801927c:	4618      	mov	r0, r3
 801927e:	f7ea ff75 	bl	800416c <HAL_PCD_EP_ClrStall>
 8019282:	4603      	mov	r3, r0
 8019284:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019286:	7bfb      	ldrb	r3, [r7, #15]
 8019288:	4618      	mov	r0, r3
 801928a:	f000 f8bf 	bl	801940c <USBD_Get_USB_Status>
 801928e:	4603      	mov	r3, r0
 8019290:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019292:	7bbb      	ldrb	r3, [r7, #14]
}
 8019294:	4618      	mov	r0, r3
 8019296:	3710      	adds	r7, #16
 8019298:	46bd      	mov	sp, r7
 801929a:	bd80      	pop	{r7, pc}

0801929c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801929c:	b480      	push	{r7}
 801929e:	b085      	sub	sp, #20
 80192a0:	af00      	add	r7, sp, #0
 80192a2:	6078      	str	r0, [r7, #4]
 80192a4:	460b      	mov	r3, r1
 80192a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80192ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80192b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	da0b      	bge.n	80192d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80192b8:	78fb      	ldrb	r3, [r7, #3]
 80192ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80192be:	68f9      	ldr	r1, [r7, #12]
 80192c0:	4613      	mov	r3, r2
 80192c2:	00db      	lsls	r3, r3, #3
 80192c4:	4413      	add	r3, r2
 80192c6:	009b      	lsls	r3, r3, #2
 80192c8:	440b      	add	r3, r1
 80192ca:	3316      	adds	r3, #22
 80192cc:	781b      	ldrb	r3, [r3, #0]
 80192ce:	e00b      	b.n	80192e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80192d0:	78fb      	ldrb	r3, [r7, #3]
 80192d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80192d6:	68f9      	ldr	r1, [r7, #12]
 80192d8:	4613      	mov	r3, r2
 80192da:	00db      	lsls	r3, r3, #3
 80192dc:	4413      	add	r3, r2
 80192de:	009b      	lsls	r3, r3, #2
 80192e0:	440b      	add	r3, r1
 80192e2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80192e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80192e8:	4618      	mov	r0, r3
 80192ea:	3714      	adds	r7, #20
 80192ec:	46bd      	mov	sp, r7
 80192ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192f2:	4770      	bx	lr

080192f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b084      	sub	sp, #16
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	6078      	str	r0, [r7, #4]
 80192fc:	460b      	mov	r3, r1
 80192fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019300:	2300      	movs	r3, #0
 8019302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019304:	2300      	movs	r3, #0
 8019306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801930e:	78fa      	ldrb	r2, [r7, #3]
 8019310:	4611      	mov	r1, r2
 8019312:	4618      	mov	r0, r3
 8019314:	f7ea fd62 	bl	8003ddc <HAL_PCD_SetAddress>
 8019318:	4603      	mov	r3, r0
 801931a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801931c:	7bfb      	ldrb	r3, [r7, #15]
 801931e:	4618      	mov	r0, r3
 8019320:	f000 f874 	bl	801940c <USBD_Get_USB_Status>
 8019324:	4603      	mov	r3, r0
 8019326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019328:	7bbb      	ldrb	r3, [r7, #14]
}
 801932a:	4618      	mov	r0, r3
 801932c:	3710      	adds	r7, #16
 801932e:	46bd      	mov	sp, r7
 8019330:	bd80      	pop	{r7, pc}

08019332 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019332:	b580      	push	{r7, lr}
 8019334:	b086      	sub	sp, #24
 8019336:	af00      	add	r7, sp, #0
 8019338:	60f8      	str	r0, [r7, #12]
 801933a:	607a      	str	r2, [r7, #4]
 801933c:	603b      	str	r3, [r7, #0]
 801933e:	460b      	mov	r3, r1
 8019340:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019342:	2300      	movs	r3, #0
 8019344:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019346:	2300      	movs	r3, #0
 8019348:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8019350:	7af9      	ldrb	r1, [r7, #11]
 8019352:	683b      	ldr	r3, [r7, #0]
 8019354:	687a      	ldr	r2, [r7, #4]
 8019356:	f7ea fe6c 	bl	8004032 <HAL_PCD_EP_Transmit>
 801935a:	4603      	mov	r3, r0
 801935c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801935e:	7dfb      	ldrb	r3, [r7, #23]
 8019360:	4618      	mov	r0, r3
 8019362:	f000 f853 	bl	801940c <USBD_Get_USB_Status>
 8019366:	4603      	mov	r3, r0
 8019368:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801936a:	7dbb      	ldrb	r3, [r7, #22]
}
 801936c:	4618      	mov	r0, r3
 801936e:	3718      	adds	r7, #24
 8019370:	46bd      	mov	sp, r7
 8019372:	bd80      	pop	{r7, pc}

08019374 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019374:	b580      	push	{r7, lr}
 8019376:	b086      	sub	sp, #24
 8019378:	af00      	add	r7, sp, #0
 801937a:	60f8      	str	r0, [r7, #12]
 801937c:	607a      	str	r2, [r7, #4]
 801937e:	603b      	str	r3, [r7, #0]
 8019380:	460b      	mov	r3, r1
 8019382:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019384:	2300      	movs	r3, #0
 8019386:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019388:	2300      	movs	r3, #0
 801938a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801938c:	68fb      	ldr	r3, [r7, #12]
 801938e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8019392:	7af9      	ldrb	r1, [r7, #11]
 8019394:	683b      	ldr	r3, [r7, #0]
 8019396:	687a      	ldr	r2, [r7, #4]
 8019398:	f7ea fdf8 	bl	8003f8c <HAL_PCD_EP_Receive>
 801939c:	4603      	mov	r3, r0
 801939e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80193a0:	7dfb      	ldrb	r3, [r7, #23]
 80193a2:	4618      	mov	r0, r3
 80193a4:	f000 f832 	bl	801940c <USBD_Get_USB_Status>
 80193a8:	4603      	mov	r3, r0
 80193aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80193ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80193ae:	4618      	mov	r0, r3
 80193b0:	3718      	adds	r7, #24
 80193b2:	46bd      	mov	sp, r7
 80193b4:	bd80      	pop	{r7, pc}

080193b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80193b6:	b580      	push	{r7, lr}
 80193b8:	b082      	sub	sp, #8
 80193ba:	af00      	add	r7, sp, #0
 80193bc:	6078      	str	r0, [r7, #4]
 80193be:	460b      	mov	r3, r1
 80193c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80193c8:	78fa      	ldrb	r2, [r7, #3]
 80193ca:	4611      	mov	r1, r2
 80193cc:	4618      	mov	r0, r3
 80193ce:	f7ea fe18 	bl	8004002 <HAL_PCD_EP_GetRxCount>
 80193d2:	4603      	mov	r3, r0
}
 80193d4:	4618      	mov	r0, r3
 80193d6:	3708      	adds	r7, #8
 80193d8:	46bd      	mov	sp, r7
 80193da:	bd80      	pop	{r7, pc}

080193dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80193dc:	b480      	push	{r7}
 80193de:	b083      	sub	sp, #12
 80193e0:	af00      	add	r7, sp, #0
 80193e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80193e4:	4b03      	ldr	r3, [pc, #12]	@ (80193f4 <USBD_static_malloc+0x18>)
}
 80193e6:	4618      	mov	r0, r3
 80193e8:	370c      	adds	r7, #12
 80193ea:	46bd      	mov	sp, r7
 80193ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f0:	4770      	bx	lr
 80193f2:	bf00      	nop
 80193f4:	200106a0 	.word	0x200106a0

080193f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80193f8:	b480      	push	{r7}
 80193fa:	b083      	sub	sp, #12
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	6078      	str	r0, [r7, #4]

}
 8019400:	bf00      	nop
 8019402:	370c      	adds	r7, #12
 8019404:	46bd      	mov	sp, r7
 8019406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801940a:	4770      	bx	lr

0801940c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801940c:	b480      	push	{r7}
 801940e:	b085      	sub	sp, #20
 8019410:	af00      	add	r7, sp, #0
 8019412:	4603      	mov	r3, r0
 8019414:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019416:	2300      	movs	r3, #0
 8019418:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801941a:	79fb      	ldrb	r3, [r7, #7]
 801941c:	2b03      	cmp	r3, #3
 801941e:	d817      	bhi.n	8019450 <USBD_Get_USB_Status+0x44>
 8019420:	a201      	add	r2, pc, #4	@ (adr r2, 8019428 <USBD_Get_USB_Status+0x1c>)
 8019422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019426:	bf00      	nop
 8019428:	08019439 	.word	0x08019439
 801942c:	0801943f 	.word	0x0801943f
 8019430:	08019445 	.word	0x08019445
 8019434:	0801944b 	.word	0x0801944b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019438:	2300      	movs	r3, #0
 801943a:	73fb      	strb	r3, [r7, #15]
    break;
 801943c:	e00b      	b.n	8019456 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801943e:	2303      	movs	r3, #3
 8019440:	73fb      	strb	r3, [r7, #15]
    break;
 8019442:	e008      	b.n	8019456 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019444:	2301      	movs	r3, #1
 8019446:	73fb      	strb	r3, [r7, #15]
    break;
 8019448:	e005      	b.n	8019456 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801944a:	2303      	movs	r3, #3
 801944c:	73fb      	strb	r3, [r7, #15]
    break;
 801944e:	e002      	b.n	8019456 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019450:	2303      	movs	r3, #3
 8019452:	73fb      	strb	r3, [r7, #15]
    break;
 8019454:	bf00      	nop
  }
  return usb_status;
 8019456:	7bfb      	ldrb	r3, [r7, #15]
}
 8019458:	4618      	mov	r0, r3
 801945a:	3714      	adds	r7, #20
 801945c:	46bd      	mov	sp, r7
 801945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019462:	4770      	bx	lr

08019464 <rand>:
 8019464:	4b16      	ldr	r3, [pc, #88]	@ (80194c0 <rand+0x5c>)
 8019466:	b510      	push	{r4, lr}
 8019468:	681c      	ldr	r4, [r3, #0]
 801946a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801946c:	b9b3      	cbnz	r3, 801949c <rand+0x38>
 801946e:	2018      	movs	r0, #24
 8019470:	f000 fc14 	bl	8019c9c <malloc>
 8019474:	4602      	mov	r2, r0
 8019476:	6320      	str	r0, [r4, #48]	@ 0x30
 8019478:	b920      	cbnz	r0, 8019484 <rand+0x20>
 801947a:	4b12      	ldr	r3, [pc, #72]	@ (80194c4 <rand+0x60>)
 801947c:	4812      	ldr	r0, [pc, #72]	@ (80194c8 <rand+0x64>)
 801947e:	2152      	movs	r1, #82	@ 0x52
 8019480:	f000 fba4 	bl	8019bcc <__assert_func>
 8019484:	4911      	ldr	r1, [pc, #68]	@ (80194cc <rand+0x68>)
 8019486:	4b12      	ldr	r3, [pc, #72]	@ (80194d0 <rand+0x6c>)
 8019488:	e9c0 1300 	strd	r1, r3, [r0]
 801948c:	4b11      	ldr	r3, [pc, #68]	@ (80194d4 <rand+0x70>)
 801948e:	6083      	str	r3, [r0, #8]
 8019490:	230b      	movs	r3, #11
 8019492:	8183      	strh	r3, [r0, #12]
 8019494:	2100      	movs	r1, #0
 8019496:	2001      	movs	r0, #1
 8019498:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801949c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801949e:	480e      	ldr	r0, [pc, #56]	@ (80194d8 <rand+0x74>)
 80194a0:	690b      	ldr	r3, [r1, #16]
 80194a2:	694c      	ldr	r4, [r1, #20]
 80194a4:	4a0d      	ldr	r2, [pc, #52]	@ (80194dc <rand+0x78>)
 80194a6:	4358      	muls	r0, r3
 80194a8:	fb02 0004 	mla	r0, r2, r4, r0
 80194ac:	fba3 3202 	umull	r3, r2, r3, r2
 80194b0:	3301      	adds	r3, #1
 80194b2:	eb40 0002 	adc.w	r0, r0, r2
 80194b6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80194ba:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80194be:	bd10      	pop	{r4, pc}
 80194c0:	2000012c 	.word	0x2000012c
 80194c4:	0801f334 	.word	0x0801f334
 80194c8:	0801f34b 	.word	0x0801f34b
 80194cc:	abcd330e 	.word	0xabcd330e
 80194d0:	e66d1234 	.word	0xe66d1234
 80194d4:	0005deec 	.word	0x0005deec
 80194d8:	5851f42d 	.word	0x5851f42d
 80194dc:	4c957f2d 	.word	0x4c957f2d

080194e0 <std>:
 80194e0:	2300      	movs	r3, #0
 80194e2:	b510      	push	{r4, lr}
 80194e4:	4604      	mov	r4, r0
 80194e6:	e9c0 3300 	strd	r3, r3, [r0]
 80194ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80194ee:	6083      	str	r3, [r0, #8]
 80194f0:	8181      	strh	r1, [r0, #12]
 80194f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80194f4:	81c2      	strh	r2, [r0, #14]
 80194f6:	6183      	str	r3, [r0, #24]
 80194f8:	4619      	mov	r1, r3
 80194fa:	2208      	movs	r2, #8
 80194fc:	305c      	adds	r0, #92	@ 0x5c
 80194fe:	f000 fa83 	bl	8019a08 <memset>
 8019502:	4b0d      	ldr	r3, [pc, #52]	@ (8019538 <std+0x58>)
 8019504:	6263      	str	r3, [r4, #36]	@ 0x24
 8019506:	4b0d      	ldr	r3, [pc, #52]	@ (801953c <std+0x5c>)
 8019508:	62a3      	str	r3, [r4, #40]	@ 0x28
 801950a:	4b0d      	ldr	r3, [pc, #52]	@ (8019540 <std+0x60>)
 801950c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801950e:	4b0d      	ldr	r3, [pc, #52]	@ (8019544 <std+0x64>)
 8019510:	6323      	str	r3, [r4, #48]	@ 0x30
 8019512:	4b0d      	ldr	r3, [pc, #52]	@ (8019548 <std+0x68>)
 8019514:	6224      	str	r4, [r4, #32]
 8019516:	429c      	cmp	r4, r3
 8019518:	d006      	beq.n	8019528 <std+0x48>
 801951a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801951e:	4294      	cmp	r4, r2
 8019520:	d002      	beq.n	8019528 <std+0x48>
 8019522:	33d0      	adds	r3, #208	@ 0xd0
 8019524:	429c      	cmp	r4, r3
 8019526:	d105      	bne.n	8019534 <std+0x54>
 8019528:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801952c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019530:	f000 bb3a 	b.w	8019ba8 <__retarget_lock_init_recursive>
 8019534:	bd10      	pop	{r4, pc}
 8019536:	bf00      	nop
 8019538:	08019805 	.word	0x08019805
 801953c:	08019827 	.word	0x08019827
 8019540:	0801985f 	.word	0x0801985f
 8019544:	08019883 	.word	0x08019883
 8019548:	200108c0 	.word	0x200108c0

0801954c <stdio_exit_handler>:
 801954c:	4a02      	ldr	r2, [pc, #8]	@ (8019558 <stdio_exit_handler+0xc>)
 801954e:	4903      	ldr	r1, [pc, #12]	@ (801955c <stdio_exit_handler+0x10>)
 8019550:	4803      	ldr	r0, [pc, #12]	@ (8019560 <stdio_exit_handler+0x14>)
 8019552:	f000 b869 	b.w	8019628 <_fwalk_sglue>
 8019556:	bf00      	nop
 8019558:	20000120 	.word	0x20000120
 801955c:	0801a75d 	.word	0x0801a75d
 8019560:	20000130 	.word	0x20000130

08019564 <cleanup_stdio>:
 8019564:	6841      	ldr	r1, [r0, #4]
 8019566:	4b0c      	ldr	r3, [pc, #48]	@ (8019598 <cleanup_stdio+0x34>)
 8019568:	4299      	cmp	r1, r3
 801956a:	b510      	push	{r4, lr}
 801956c:	4604      	mov	r4, r0
 801956e:	d001      	beq.n	8019574 <cleanup_stdio+0x10>
 8019570:	f001 f8f4 	bl	801a75c <_fflush_r>
 8019574:	68a1      	ldr	r1, [r4, #8]
 8019576:	4b09      	ldr	r3, [pc, #36]	@ (801959c <cleanup_stdio+0x38>)
 8019578:	4299      	cmp	r1, r3
 801957a:	d002      	beq.n	8019582 <cleanup_stdio+0x1e>
 801957c:	4620      	mov	r0, r4
 801957e:	f001 f8ed 	bl	801a75c <_fflush_r>
 8019582:	68e1      	ldr	r1, [r4, #12]
 8019584:	4b06      	ldr	r3, [pc, #24]	@ (80195a0 <cleanup_stdio+0x3c>)
 8019586:	4299      	cmp	r1, r3
 8019588:	d004      	beq.n	8019594 <cleanup_stdio+0x30>
 801958a:	4620      	mov	r0, r4
 801958c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019590:	f001 b8e4 	b.w	801a75c <_fflush_r>
 8019594:	bd10      	pop	{r4, pc}
 8019596:	bf00      	nop
 8019598:	200108c0 	.word	0x200108c0
 801959c:	20010928 	.word	0x20010928
 80195a0:	20010990 	.word	0x20010990

080195a4 <global_stdio_init.part.0>:
 80195a4:	b510      	push	{r4, lr}
 80195a6:	4b0b      	ldr	r3, [pc, #44]	@ (80195d4 <global_stdio_init.part.0+0x30>)
 80195a8:	4c0b      	ldr	r4, [pc, #44]	@ (80195d8 <global_stdio_init.part.0+0x34>)
 80195aa:	4a0c      	ldr	r2, [pc, #48]	@ (80195dc <global_stdio_init.part.0+0x38>)
 80195ac:	601a      	str	r2, [r3, #0]
 80195ae:	4620      	mov	r0, r4
 80195b0:	2200      	movs	r2, #0
 80195b2:	2104      	movs	r1, #4
 80195b4:	f7ff ff94 	bl	80194e0 <std>
 80195b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80195bc:	2201      	movs	r2, #1
 80195be:	2109      	movs	r1, #9
 80195c0:	f7ff ff8e 	bl	80194e0 <std>
 80195c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80195c8:	2202      	movs	r2, #2
 80195ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195ce:	2112      	movs	r1, #18
 80195d0:	f7ff bf86 	b.w	80194e0 <std>
 80195d4:	200109f8 	.word	0x200109f8
 80195d8:	200108c0 	.word	0x200108c0
 80195dc:	0801954d 	.word	0x0801954d

080195e0 <__sfp_lock_acquire>:
 80195e0:	4801      	ldr	r0, [pc, #4]	@ (80195e8 <__sfp_lock_acquire+0x8>)
 80195e2:	f000 bae2 	b.w	8019baa <__retarget_lock_acquire_recursive>
 80195e6:	bf00      	nop
 80195e8:	20010a01 	.word	0x20010a01

080195ec <__sfp_lock_release>:
 80195ec:	4801      	ldr	r0, [pc, #4]	@ (80195f4 <__sfp_lock_release+0x8>)
 80195ee:	f000 badd 	b.w	8019bac <__retarget_lock_release_recursive>
 80195f2:	bf00      	nop
 80195f4:	20010a01 	.word	0x20010a01

080195f8 <__sinit>:
 80195f8:	b510      	push	{r4, lr}
 80195fa:	4604      	mov	r4, r0
 80195fc:	f7ff fff0 	bl	80195e0 <__sfp_lock_acquire>
 8019600:	6a23      	ldr	r3, [r4, #32]
 8019602:	b11b      	cbz	r3, 801960c <__sinit+0x14>
 8019604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019608:	f7ff bff0 	b.w	80195ec <__sfp_lock_release>
 801960c:	4b04      	ldr	r3, [pc, #16]	@ (8019620 <__sinit+0x28>)
 801960e:	6223      	str	r3, [r4, #32]
 8019610:	4b04      	ldr	r3, [pc, #16]	@ (8019624 <__sinit+0x2c>)
 8019612:	681b      	ldr	r3, [r3, #0]
 8019614:	2b00      	cmp	r3, #0
 8019616:	d1f5      	bne.n	8019604 <__sinit+0xc>
 8019618:	f7ff ffc4 	bl	80195a4 <global_stdio_init.part.0>
 801961c:	e7f2      	b.n	8019604 <__sinit+0xc>
 801961e:	bf00      	nop
 8019620:	08019565 	.word	0x08019565
 8019624:	200109f8 	.word	0x200109f8

08019628 <_fwalk_sglue>:
 8019628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801962c:	4607      	mov	r7, r0
 801962e:	4688      	mov	r8, r1
 8019630:	4614      	mov	r4, r2
 8019632:	2600      	movs	r6, #0
 8019634:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019638:	f1b9 0901 	subs.w	r9, r9, #1
 801963c:	d505      	bpl.n	801964a <_fwalk_sglue+0x22>
 801963e:	6824      	ldr	r4, [r4, #0]
 8019640:	2c00      	cmp	r4, #0
 8019642:	d1f7      	bne.n	8019634 <_fwalk_sglue+0xc>
 8019644:	4630      	mov	r0, r6
 8019646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801964a:	89ab      	ldrh	r3, [r5, #12]
 801964c:	2b01      	cmp	r3, #1
 801964e:	d907      	bls.n	8019660 <_fwalk_sglue+0x38>
 8019650:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019654:	3301      	adds	r3, #1
 8019656:	d003      	beq.n	8019660 <_fwalk_sglue+0x38>
 8019658:	4629      	mov	r1, r5
 801965a:	4638      	mov	r0, r7
 801965c:	47c0      	blx	r8
 801965e:	4306      	orrs	r6, r0
 8019660:	3568      	adds	r5, #104	@ 0x68
 8019662:	e7e9      	b.n	8019638 <_fwalk_sglue+0x10>

08019664 <iprintf>:
 8019664:	b40f      	push	{r0, r1, r2, r3}
 8019666:	b507      	push	{r0, r1, r2, lr}
 8019668:	4906      	ldr	r1, [pc, #24]	@ (8019684 <iprintf+0x20>)
 801966a:	ab04      	add	r3, sp, #16
 801966c:	6808      	ldr	r0, [r1, #0]
 801966e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019672:	6881      	ldr	r1, [r0, #8]
 8019674:	9301      	str	r3, [sp, #4]
 8019676:	f000 fd49 	bl	801a10c <_vfiprintf_r>
 801967a:	b003      	add	sp, #12
 801967c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019680:	b004      	add	sp, #16
 8019682:	4770      	bx	lr
 8019684:	2000012c 	.word	0x2000012c

08019688 <putchar>:
 8019688:	4b02      	ldr	r3, [pc, #8]	@ (8019694 <putchar+0xc>)
 801968a:	4601      	mov	r1, r0
 801968c:	6818      	ldr	r0, [r3, #0]
 801968e:	6882      	ldr	r2, [r0, #8]
 8019690:	f001 b900 	b.w	801a894 <_putc_r>
 8019694:	2000012c 	.word	0x2000012c

08019698 <_puts_r>:
 8019698:	6a03      	ldr	r3, [r0, #32]
 801969a:	b570      	push	{r4, r5, r6, lr}
 801969c:	6884      	ldr	r4, [r0, #8]
 801969e:	4605      	mov	r5, r0
 80196a0:	460e      	mov	r6, r1
 80196a2:	b90b      	cbnz	r3, 80196a8 <_puts_r+0x10>
 80196a4:	f7ff ffa8 	bl	80195f8 <__sinit>
 80196a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80196aa:	07db      	lsls	r3, r3, #31
 80196ac:	d405      	bmi.n	80196ba <_puts_r+0x22>
 80196ae:	89a3      	ldrh	r3, [r4, #12]
 80196b0:	0598      	lsls	r0, r3, #22
 80196b2:	d402      	bmi.n	80196ba <_puts_r+0x22>
 80196b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80196b6:	f000 fa78 	bl	8019baa <__retarget_lock_acquire_recursive>
 80196ba:	89a3      	ldrh	r3, [r4, #12]
 80196bc:	0719      	lsls	r1, r3, #28
 80196be:	d502      	bpl.n	80196c6 <_puts_r+0x2e>
 80196c0:	6923      	ldr	r3, [r4, #16]
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d135      	bne.n	8019732 <_puts_r+0x9a>
 80196c6:	4621      	mov	r1, r4
 80196c8:	4628      	mov	r0, r5
 80196ca:	f000 f91d 	bl	8019908 <__swsetup_r>
 80196ce:	b380      	cbz	r0, 8019732 <_puts_r+0x9a>
 80196d0:	f04f 35ff 	mov.w	r5, #4294967295
 80196d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80196d6:	07da      	lsls	r2, r3, #31
 80196d8:	d405      	bmi.n	80196e6 <_puts_r+0x4e>
 80196da:	89a3      	ldrh	r3, [r4, #12]
 80196dc:	059b      	lsls	r3, r3, #22
 80196de:	d402      	bmi.n	80196e6 <_puts_r+0x4e>
 80196e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80196e2:	f000 fa63 	bl	8019bac <__retarget_lock_release_recursive>
 80196e6:	4628      	mov	r0, r5
 80196e8:	bd70      	pop	{r4, r5, r6, pc}
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	da04      	bge.n	80196f8 <_puts_r+0x60>
 80196ee:	69a2      	ldr	r2, [r4, #24]
 80196f0:	429a      	cmp	r2, r3
 80196f2:	dc17      	bgt.n	8019724 <_puts_r+0x8c>
 80196f4:	290a      	cmp	r1, #10
 80196f6:	d015      	beq.n	8019724 <_puts_r+0x8c>
 80196f8:	6823      	ldr	r3, [r4, #0]
 80196fa:	1c5a      	adds	r2, r3, #1
 80196fc:	6022      	str	r2, [r4, #0]
 80196fe:	7019      	strb	r1, [r3, #0]
 8019700:	68a3      	ldr	r3, [r4, #8]
 8019702:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019706:	3b01      	subs	r3, #1
 8019708:	60a3      	str	r3, [r4, #8]
 801970a:	2900      	cmp	r1, #0
 801970c:	d1ed      	bne.n	80196ea <_puts_r+0x52>
 801970e:	2b00      	cmp	r3, #0
 8019710:	da11      	bge.n	8019736 <_puts_r+0x9e>
 8019712:	4622      	mov	r2, r4
 8019714:	210a      	movs	r1, #10
 8019716:	4628      	mov	r0, r5
 8019718:	f000 f8b7 	bl	801988a <__swbuf_r>
 801971c:	3001      	adds	r0, #1
 801971e:	d0d7      	beq.n	80196d0 <_puts_r+0x38>
 8019720:	250a      	movs	r5, #10
 8019722:	e7d7      	b.n	80196d4 <_puts_r+0x3c>
 8019724:	4622      	mov	r2, r4
 8019726:	4628      	mov	r0, r5
 8019728:	f000 f8af 	bl	801988a <__swbuf_r>
 801972c:	3001      	adds	r0, #1
 801972e:	d1e7      	bne.n	8019700 <_puts_r+0x68>
 8019730:	e7ce      	b.n	80196d0 <_puts_r+0x38>
 8019732:	3e01      	subs	r6, #1
 8019734:	e7e4      	b.n	8019700 <_puts_r+0x68>
 8019736:	6823      	ldr	r3, [r4, #0]
 8019738:	1c5a      	adds	r2, r3, #1
 801973a:	6022      	str	r2, [r4, #0]
 801973c:	220a      	movs	r2, #10
 801973e:	701a      	strb	r2, [r3, #0]
 8019740:	e7ee      	b.n	8019720 <_puts_r+0x88>
	...

08019744 <puts>:
 8019744:	4b02      	ldr	r3, [pc, #8]	@ (8019750 <puts+0xc>)
 8019746:	4601      	mov	r1, r0
 8019748:	6818      	ldr	r0, [r3, #0]
 801974a:	f7ff bfa5 	b.w	8019698 <_puts_r>
 801974e:	bf00      	nop
 8019750:	2000012c 	.word	0x2000012c

08019754 <sniprintf>:
 8019754:	b40c      	push	{r2, r3}
 8019756:	b530      	push	{r4, r5, lr}
 8019758:	4b18      	ldr	r3, [pc, #96]	@ (80197bc <sniprintf+0x68>)
 801975a:	1e0c      	subs	r4, r1, #0
 801975c:	681d      	ldr	r5, [r3, #0]
 801975e:	b09d      	sub	sp, #116	@ 0x74
 8019760:	da08      	bge.n	8019774 <sniprintf+0x20>
 8019762:	238b      	movs	r3, #139	@ 0x8b
 8019764:	602b      	str	r3, [r5, #0]
 8019766:	f04f 30ff 	mov.w	r0, #4294967295
 801976a:	b01d      	add	sp, #116	@ 0x74
 801976c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019770:	b002      	add	sp, #8
 8019772:	4770      	bx	lr
 8019774:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019778:	f8ad 3014 	strh.w	r3, [sp, #20]
 801977c:	f04f 0300 	mov.w	r3, #0
 8019780:	931b      	str	r3, [sp, #108]	@ 0x6c
 8019782:	bf14      	ite	ne
 8019784:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019788:	4623      	moveq	r3, r4
 801978a:	9304      	str	r3, [sp, #16]
 801978c:	9307      	str	r3, [sp, #28]
 801978e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019792:	9002      	str	r0, [sp, #8]
 8019794:	9006      	str	r0, [sp, #24]
 8019796:	f8ad 3016 	strh.w	r3, [sp, #22]
 801979a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801979c:	ab21      	add	r3, sp, #132	@ 0x84
 801979e:	a902      	add	r1, sp, #8
 80197a0:	4628      	mov	r0, r5
 80197a2:	9301      	str	r3, [sp, #4]
 80197a4:	f000 fb8c 	bl	8019ec0 <_svfiprintf_r>
 80197a8:	1c43      	adds	r3, r0, #1
 80197aa:	bfbc      	itt	lt
 80197ac:	238b      	movlt	r3, #139	@ 0x8b
 80197ae:	602b      	strlt	r3, [r5, #0]
 80197b0:	2c00      	cmp	r4, #0
 80197b2:	d0da      	beq.n	801976a <sniprintf+0x16>
 80197b4:	9b02      	ldr	r3, [sp, #8]
 80197b6:	2200      	movs	r2, #0
 80197b8:	701a      	strb	r2, [r3, #0]
 80197ba:	e7d6      	b.n	801976a <sniprintf+0x16>
 80197bc:	2000012c 	.word	0x2000012c

080197c0 <siprintf>:
 80197c0:	b40e      	push	{r1, r2, r3}
 80197c2:	b510      	push	{r4, lr}
 80197c4:	b09d      	sub	sp, #116	@ 0x74
 80197c6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80197c8:	9002      	str	r0, [sp, #8]
 80197ca:	9006      	str	r0, [sp, #24]
 80197cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80197d0:	480a      	ldr	r0, [pc, #40]	@ (80197fc <siprintf+0x3c>)
 80197d2:	9107      	str	r1, [sp, #28]
 80197d4:	9104      	str	r1, [sp, #16]
 80197d6:	490a      	ldr	r1, [pc, #40]	@ (8019800 <siprintf+0x40>)
 80197d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80197dc:	9105      	str	r1, [sp, #20]
 80197de:	2400      	movs	r4, #0
 80197e0:	a902      	add	r1, sp, #8
 80197e2:	6800      	ldr	r0, [r0, #0]
 80197e4:	9301      	str	r3, [sp, #4]
 80197e6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80197e8:	f000 fb6a 	bl	8019ec0 <_svfiprintf_r>
 80197ec:	9b02      	ldr	r3, [sp, #8]
 80197ee:	701c      	strb	r4, [r3, #0]
 80197f0:	b01d      	add	sp, #116	@ 0x74
 80197f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197f6:	b003      	add	sp, #12
 80197f8:	4770      	bx	lr
 80197fa:	bf00      	nop
 80197fc:	2000012c 	.word	0x2000012c
 8019800:	ffff0208 	.word	0xffff0208

08019804 <__sread>:
 8019804:	b510      	push	{r4, lr}
 8019806:	460c      	mov	r4, r1
 8019808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801980c:	f000 f984 	bl	8019b18 <_read_r>
 8019810:	2800      	cmp	r0, #0
 8019812:	bfab      	itete	ge
 8019814:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019816:	89a3      	ldrhlt	r3, [r4, #12]
 8019818:	181b      	addge	r3, r3, r0
 801981a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801981e:	bfac      	ite	ge
 8019820:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019822:	81a3      	strhlt	r3, [r4, #12]
 8019824:	bd10      	pop	{r4, pc}

08019826 <__swrite>:
 8019826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801982a:	461f      	mov	r7, r3
 801982c:	898b      	ldrh	r3, [r1, #12]
 801982e:	05db      	lsls	r3, r3, #23
 8019830:	4605      	mov	r5, r0
 8019832:	460c      	mov	r4, r1
 8019834:	4616      	mov	r6, r2
 8019836:	d505      	bpl.n	8019844 <__swrite+0x1e>
 8019838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801983c:	2302      	movs	r3, #2
 801983e:	2200      	movs	r2, #0
 8019840:	f000 f958 	bl	8019af4 <_lseek_r>
 8019844:	89a3      	ldrh	r3, [r4, #12]
 8019846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801984a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801984e:	81a3      	strh	r3, [r4, #12]
 8019850:	4632      	mov	r2, r6
 8019852:	463b      	mov	r3, r7
 8019854:	4628      	mov	r0, r5
 8019856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801985a:	f000 b96f 	b.w	8019b3c <_write_r>

0801985e <__sseek>:
 801985e:	b510      	push	{r4, lr}
 8019860:	460c      	mov	r4, r1
 8019862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019866:	f000 f945 	bl	8019af4 <_lseek_r>
 801986a:	1c43      	adds	r3, r0, #1
 801986c:	89a3      	ldrh	r3, [r4, #12]
 801986e:	bf15      	itete	ne
 8019870:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019872:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019876:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801987a:	81a3      	strheq	r3, [r4, #12]
 801987c:	bf18      	it	ne
 801987e:	81a3      	strhne	r3, [r4, #12]
 8019880:	bd10      	pop	{r4, pc}

08019882 <__sclose>:
 8019882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019886:	f000 b8c7 	b.w	8019a18 <_close_r>

0801988a <__swbuf_r>:
 801988a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801988c:	460e      	mov	r6, r1
 801988e:	4614      	mov	r4, r2
 8019890:	4605      	mov	r5, r0
 8019892:	b118      	cbz	r0, 801989c <__swbuf_r+0x12>
 8019894:	6a03      	ldr	r3, [r0, #32]
 8019896:	b90b      	cbnz	r3, 801989c <__swbuf_r+0x12>
 8019898:	f7ff feae 	bl	80195f8 <__sinit>
 801989c:	69a3      	ldr	r3, [r4, #24]
 801989e:	60a3      	str	r3, [r4, #8]
 80198a0:	89a3      	ldrh	r3, [r4, #12]
 80198a2:	071a      	lsls	r2, r3, #28
 80198a4:	d501      	bpl.n	80198aa <__swbuf_r+0x20>
 80198a6:	6923      	ldr	r3, [r4, #16]
 80198a8:	b943      	cbnz	r3, 80198bc <__swbuf_r+0x32>
 80198aa:	4621      	mov	r1, r4
 80198ac:	4628      	mov	r0, r5
 80198ae:	f000 f82b 	bl	8019908 <__swsetup_r>
 80198b2:	b118      	cbz	r0, 80198bc <__swbuf_r+0x32>
 80198b4:	f04f 37ff 	mov.w	r7, #4294967295
 80198b8:	4638      	mov	r0, r7
 80198ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198bc:	6823      	ldr	r3, [r4, #0]
 80198be:	6922      	ldr	r2, [r4, #16]
 80198c0:	1a98      	subs	r0, r3, r2
 80198c2:	6963      	ldr	r3, [r4, #20]
 80198c4:	b2f6      	uxtb	r6, r6
 80198c6:	4283      	cmp	r3, r0
 80198c8:	4637      	mov	r7, r6
 80198ca:	dc05      	bgt.n	80198d8 <__swbuf_r+0x4e>
 80198cc:	4621      	mov	r1, r4
 80198ce:	4628      	mov	r0, r5
 80198d0:	f000 ff44 	bl	801a75c <_fflush_r>
 80198d4:	2800      	cmp	r0, #0
 80198d6:	d1ed      	bne.n	80198b4 <__swbuf_r+0x2a>
 80198d8:	68a3      	ldr	r3, [r4, #8]
 80198da:	3b01      	subs	r3, #1
 80198dc:	60a3      	str	r3, [r4, #8]
 80198de:	6823      	ldr	r3, [r4, #0]
 80198e0:	1c5a      	adds	r2, r3, #1
 80198e2:	6022      	str	r2, [r4, #0]
 80198e4:	701e      	strb	r6, [r3, #0]
 80198e6:	6962      	ldr	r2, [r4, #20]
 80198e8:	1c43      	adds	r3, r0, #1
 80198ea:	429a      	cmp	r2, r3
 80198ec:	d004      	beq.n	80198f8 <__swbuf_r+0x6e>
 80198ee:	89a3      	ldrh	r3, [r4, #12]
 80198f0:	07db      	lsls	r3, r3, #31
 80198f2:	d5e1      	bpl.n	80198b8 <__swbuf_r+0x2e>
 80198f4:	2e0a      	cmp	r6, #10
 80198f6:	d1df      	bne.n	80198b8 <__swbuf_r+0x2e>
 80198f8:	4621      	mov	r1, r4
 80198fa:	4628      	mov	r0, r5
 80198fc:	f000 ff2e 	bl	801a75c <_fflush_r>
 8019900:	2800      	cmp	r0, #0
 8019902:	d0d9      	beq.n	80198b8 <__swbuf_r+0x2e>
 8019904:	e7d6      	b.n	80198b4 <__swbuf_r+0x2a>
	...

08019908 <__swsetup_r>:
 8019908:	b538      	push	{r3, r4, r5, lr}
 801990a:	4b29      	ldr	r3, [pc, #164]	@ (80199b0 <__swsetup_r+0xa8>)
 801990c:	4605      	mov	r5, r0
 801990e:	6818      	ldr	r0, [r3, #0]
 8019910:	460c      	mov	r4, r1
 8019912:	b118      	cbz	r0, 801991c <__swsetup_r+0x14>
 8019914:	6a03      	ldr	r3, [r0, #32]
 8019916:	b90b      	cbnz	r3, 801991c <__swsetup_r+0x14>
 8019918:	f7ff fe6e 	bl	80195f8 <__sinit>
 801991c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019920:	0719      	lsls	r1, r3, #28
 8019922:	d422      	bmi.n	801996a <__swsetup_r+0x62>
 8019924:	06da      	lsls	r2, r3, #27
 8019926:	d407      	bmi.n	8019938 <__swsetup_r+0x30>
 8019928:	2209      	movs	r2, #9
 801992a:	602a      	str	r2, [r5, #0]
 801992c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019930:	81a3      	strh	r3, [r4, #12]
 8019932:	f04f 30ff 	mov.w	r0, #4294967295
 8019936:	e033      	b.n	80199a0 <__swsetup_r+0x98>
 8019938:	0758      	lsls	r0, r3, #29
 801993a:	d512      	bpl.n	8019962 <__swsetup_r+0x5a>
 801993c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801993e:	b141      	cbz	r1, 8019952 <__swsetup_r+0x4a>
 8019940:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019944:	4299      	cmp	r1, r3
 8019946:	d002      	beq.n	801994e <__swsetup_r+0x46>
 8019948:	4628      	mov	r0, r5
 801994a:	f000 f95d 	bl	8019c08 <_free_r>
 801994e:	2300      	movs	r3, #0
 8019950:	6363      	str	r3, [r4, #52]	@ 0x34
 8019952:	89a3      	ldrh	r3, [r4, #12]
 8019954:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019958:	81a3      	strh	r3, [r4, #12]
 801995a:	2300      	movs	r3, #0
 801995c:	6063      	str	r3, [r4, #4]
 801995e:	6923      	ldr	r3, [r4, #16]
 8019960:	6023      	str	r3, [r4, #0]
 8019962:	89a3      	ldrh	r3, [r4, #12]
 8019964:	f043 0308 	orr.w	r3, r3, #8
 8019968:	81a3      	strh	r3, [r4, #12]
 801996a:	6923      	ldr	r3, [r4, #16]
 801996c:	b94b      	cbnz	r3, 8019982 <__swsetup_r+0x7a>
 801996e:	89a3      	ldrh	r3, [r4, #12]
 8019970:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019978:	d003      	beq.n	8019982 <__swsetup_r+0x7a>
 801997a:	4621      	mov	r1, r4
 801997c:	4628      	mov	r0, r5
 801997e:	f000 ff4d 	bl	801a81c <__smakebuf_r>
 8019982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019986:	f013 0201 	ands.w	r2, r3, #1
 801998a:	d00a      	beq.n	80199a2 <__swsetup_r+0x9a>
 801998c:	2200      	movs	r2, #0
 801998e:	60a2      	str	r2, [r4, #8]
 8019990:	6962      	ldr	r2, [r4, #20]
 8019992:	4252      	negs	r2, r2
 8019994:	61a2      	str	r2, [r4, #24]
 8019996:	6922      	ldr	r2, [r4, #16]
 8019998:	b942      	cbnz	r2, 80199ac <__swsetup_r+0xa4>
 801999a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801999e:	d1c5      	bne.n	801992c <__swsetup_r+0x24>
 80199a0:	bd38      	pop	{r3, r4, r5, pc}
 80199a2:	0799      	lsls	r1, r3, #30
 80199a4:	bf58      	it	pl
 80199a6:	6962      	ldrpl	r2, [r4, #20]
 80199a8:	60a2      	str	r2, [r4, #8]
 80199aa:	e7f4      	b.n	8019996 <__swsetup_r+0x8e>
 80199ac:	2000      	movs	r0, #0
 80199ae:	e7f7      	b.n	80199a0 <__swsetup_r+0x98>
 80199b0:	2000012c 	.word	0x2000012c

080199b4 <memcmp>:
 80199b4:	b510      	push	{r4, lr}
 80199b6:	3901      	subs	r1, #1
 80199b8:	4402      	add	r2, r0
 80199ba:	4290      	cmp	r0, r2
 80199bc:	d101      	bne.n	80199c2 <memcmp+0xe>
 80199be:	2000      	movs	r0, #0
 80199c0:	e005      	b.n	80199ce <memcmp+0x1a>
 80199c2:	7803      	ldrb	r3, [r0, #0]
 80199c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80199c8:	42a3      	cmp	r3, r4
 80199ca:	d001      	beq.n	80199d0 <memcmp+0x1c>
 80199cc:	1b18      	subs	r0, r3, r4
 80199ce:	bd10      	pop	{r4, pc}
 80199d0:	3001      	adds	r0, #1
 80199d2:	e7f2      	b.n	80199ba <memcmp+0x6>

080199d4 <memmove>:
 80199d4:	4288      	cmp	r0, r1
 80199d6:	b510      	push	{r4, lr}
 80199d8:	eb01 0402 	add.w	r4, r1, r2
 80199dc:	d902      	bls.n	80199e4 <memmove+0x10>
 80199de:	4284      	cmp	r4, r0
 80199e0:	4623      	mov	r3, r4
 80199e2:	d807      	bhi.n	80199f4 <memmove+0x20>
 80199e4:	1e43      	subs	r3, r0, #1
 80199e6:	42a1      	cmp	r1, r4
 80199e8:	d008      	beq.n	80199fc <memmove+0x28>
 80199ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80199ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80199f2:	e7f8      	b.n	80199e6 <memmove+0x12>
 80199f4:	4402      	add	r2, r0
 80199f6:	4601      	mov	r1, r0
 80199f8:	428a      	cmp	r2, r1
 80199fa:	d100      	bne.n	80199fe <memmove+0x2a>
 80199fc:	bd10      	pop	{r4, pc}
 80199fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019a02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019a06:	e7f7      	b.n	80199f8 <memmove+0x24>

08019a08 <memset>:
 8019a08:	4402      	add	r2, r0
 8019a0a:	4603      	mov	r3, r0
 8019a0c:	4293      	cmp	r3, r2
 8019a0e:	d100      	bne.n	8019a12 <memset+0xa>
 8019a10:	4770      	bx	lr
 8019a12:	f803 1b01 	strb.w	r1, [r3], #1
 8019a16:	e7f9      	b.n	8019a0c <memset+0x4>

08019a18 <_close_r>:
 8019a18:	b538      	push	{r3, r4, r5, lr}
 8019a1a:	4d06      	ldr	r5, [pc, #24]	@ (8019a34 <_close_r+0x1c>)
 8019a1c:	2300      	movs	r3, #0
 8019a1e:	4604      	mov	r4, r0
 8019a20:	4608      	mov	r0, r1
 8019a22:	602b      	str	r3, [r5, #0]
 8019a24:	f7e7 fde2 	bl	80015ec <_close>
 8019a28:	1c43      	adds	r3, r0, #1
 8019a2a:	d102      	bne.n	8019a32 <_close_r+0x1a>
 8019a2c:	682b      	ldr	r3, [r5, #0]
 8019a2e:	b103      	cbz	r3, 8019a32 <_close_r+0x1a>
 8019a30:	6023      	str	r3, [r4, #0]
 8019a32:	bd38      	pop	{r3, r4, r5, pc}
 8019a34:	200109fc 	.word	0x200109fc

08019a38 <_reclaim_reent>:
 8019a38:	4b2d      	ldr	r3, [pc, #180]	@ (8019af0 <_reclaim_reent+0xb8>)
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	4283      	cmp	r3, r0
 8019a3e:	b570      	push	{r4, r5, r6, lr}
 8019a40:	4604      	mov	r4, r0
 8019a42:	d053      	beq.n	8019aec <_reclaim_reent+0xb4>
 8019a44:	69c3      	ldr	r3, [r0, #28]
 8019a46:	b31b      	cbz	r3, 8019a90 <_reclaim_reent+0x58>
 8019a48:	68db      	ldr	r3, [r3, #12]
 8019a4a:	b163      	cbz	r3, 8019a66 <_reclaim_reent+0x2e>
 8019a4c:	2500      	movs	r5, #0
 8019a4e:	69e3      	ldr	r3, [r4, #28]
 8019a50:	68db      	ldr	r3, [r3, #12]
 8019a52:	5959      	ldr	r1, [r3, r5]
 8019a54:	b9b1      	cbnz	r1, 8019a84 <_reclaim_reent+0x4c>
 8019a56:	3504      	adds	r5, #4
 8019a58:	2d80      	cmp	r5, #128	@ 0x80
 8019a5a:	d1f8      	bne.n	8019a4e <_reclaim_reent+0x16>
 8019a5c:	69e3      	ldr	r3, [r4, #28]
 8019a5e:	4620      	mov	r0, r4
 8019a60:	68d9      	ldr	r1, [r3, #12]
 8019a62:	f000 f8d1 	bl	8019c08 <_free_r>
 8019a66:	69e3      	ldr	r3, [r4, #28]
 8019a68:	6819      	ldr	r1, [r3, #0]
 8019a6a:	b111      	cbz	r1, 8019a72 <_reclaim_reent+0x3a>
 8019a6c:	4620      	mov	r0, r4
 8019a6e:	f000 f8cb 	bl	8019c08 <_free_r>
 8019a72:	69e3      	ldr	r3, [r4, #28]
 8019a74:	689d      	ldr	r5, [r3, #8]
 8019a76:	b15d      	cbz	r5, 8019a90 <_reclaim_reent+0x58>
 8019a78:	4629      	mov	r1, r5
 8019a7a:	4620      	mov	r0, r4
 8019a7c:	682d      	ldr	r5, [r5, #0]
 8019a7e:	f000 f8c3 	bl	8019c08 <_free_r>
 8019a82:	e7f8      	b.n	8019a76 <_reclaim_reent+0x3e>
 8019a84:	680e      	ldr	r6, [r1, #0]
 8019a86:	4620      	mov	r0, r4
 8019a88:	f000 f8be 	bl	8019c08 <_free_r>
 8019a8c:	4631      	mov	r1, r6
 8019a8e:	e7e1      	b.n	8019a54 <_reclaim_reent+0x1c>
 8019a90:	6961      	ldr	r1, [r4, #20]
 8019a92:	b111      	cbz	r1, 8019a9a <_reclaim_reent+0x62>
 8019a94:	4620      	mov	r0, r4
 8019a96:	f000 f8b7 	bl	8019c08 <_free_r>
 8019a9a:	69e1      	ldr	r1, [r4, #28]
 8019a9c:	b111      	cbz	r1, 8019aa4 <_reclaim_reent+0x6c>
 8019a9e:	4620      	mov	r0, r4
 8019aa0:	f000 f8b2 	bl	8019c08 <_free_r>
 8019aa4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019aa6:	b111      	cbz	r1, 8019aae <_reclaim_reent+0x76>
 8019aa8:	4620      	mov	r0, r4
 8019aaa:	f000 f8ad 	bl	8019c08 <_free_r>
 8019aae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019ab0:	b111      	cbz	r1, 8019ab8 <_reclaim_reent+0x80>
 8019ab2:	4620      	mov	r0, r4
 8019ab4:	f000 f8a8 	bl	8019c08 <_free_r>
 8019ab8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8019aba:	b111      	cbz	r1, 8019ac2 <_reclaim_reent+0x8a>
 8019abc:	4620      	mov	r0, r4
 8019abe:	f000 f8a3 	bl	8019c08 <_free_r>
 8019ac2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8019ac4:	b111      	cbz	r1, 8019acc <_reclaim_reent+0x94>
 8019ac6:	4620      	mov	r0, r4
 8019ac8:	f000 f89e 	bl	8019c08 <_free_r>
 8019acc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8019ace:	b111      	cbz	r1, 8019ad6 <_reclaim_reent+0x9e>
 8019ad0:	4620      	mov	r0, r4
 8019ad2:	f000 f899 	bl	8019c08 <_free_r>
 8019ad6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8019ad8:	b111      	cbz	r1, 8019ae0 <_reclaim_reent+0xa8>
 8019ada:	4620      	mov	r0, r4
 8019adc:	f000 f894 	bl	8019c08 <_free_r>
 8019ae0:	6a23      	ldr	r3, [r4, #32]
 8019ae2:	b11b      	cbz	r3, 8019aec <_reclaim_reent+0xb4>
 8019ae4:	4620      	mov	r0, r4
 8019ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019aea:	4718      	bx	r3
 8019aec:	bd70      	pop	{r4, r5, r6, pc}
 8019aee:	bf00      	nop
 8019af0:	2000012c 	.word	0x2000012c

08019af4 <_lseek_r>:
 8019af4:	b538      	push	{r3, r4, r5, lr}
 8019af6:	4d07      	ldr	r5, [pc, #28]	@ (8019b14 <_lseek_r+0x20>)
 8019af8:	4604      	mov	r4, r0
 8019afa:	4608      	mov	r0, r1
 8019afc:	4611      	mov	r1, r2
 8019afe:	2200      	movs	r2, #0
 8019b00:	602a      	str	r2, [r5, #0]
 8019b02:	461a      	mov	r2, r3
 8019b04:	f7e7 fd99 	bl	800163a <_lseek>
 8019b08:	1c43      	adds	r3, r0, #1
 8019b0a:	d102      	bne.n	8019b12 <_lseek_r+0x1e>
 8019b0c:	682b      	ldr	r3, [r5, #0]
 8019b0e:	b103      	cbz	r3, 8019b12 <_lseek_r+0x1e>
 8019b10:	6023      	str	r3, [r4, #0]
 8019b12:	bd38      	pop	{r3, r4, r5, pc}
 8019b14:	200109fc 	.word	0x200109fc

08019b18 <_read_r>:
 8019b18:	b538      	push	{r3, r4, r5, lr}
 8019b1a:	4d07      	ldr	r5, [pc, #28]	@ (8019b38 <_read_r+0x20>)
 8019b1c:	4604      	mov	r4, r0
 8019b1e:	4608      	mov	r0, r1
 8019b20:	4611      	mov	r1, r2
 8019b22:	2200      	movs	r2, #0
 8019b24:	602a      	str	r2, [r5, #0]
 8019b26:	461a      	mov	r2, r3
 8019b28:	f7e7 fd27 	bl	800157a <_read>
 8019b2c:	1c43      	adds	r3, r0, #1
 8019b2e:	d102      	bne.n	8019b36 <_read_r+0x1e>
 8019b30:	682b      	ldr	r3, [r5, #0]
 8019b32:	b103      	cbz	r3, 8019b36 <_read_r+0x1e>
 8019b34:	6023      	str	r3, [r4, #0]
 8019b36:	bd38      	pop	{r3, r4, r5, pc}
 8019b38:	200109fc 	.word	0x200109fc

08019b3c <_write_r>:
 8019b3c:	b538      	push	{r3, r4, r5, lr}
 8019b3e:	4d07      	ldr	r5, [pc, #28]	@ (8019b5c <_write_r+0x20>)
 8019b40:	4604      	mov	r4, r0
 8019b42:	4608      	mov	r0, r1
 8019b44:	4611      	mov	r1, r2
 8019b46:	2200      	movs	r2, #0
 8019b48:	602a      	str	r2, [r5, #0]
 8019b4a:	461a      	mov	r2, r3
 8019b4c:	f7e7 fd32 	bl	80015b4 <_write>
 8019b50:	1c43      	adds	r3, r0, #1
 8019b52:	d102      	bne.n	8019b5a <_write_r+0x1e>
 8019b54:	682b      	ldr	r3, [r5, #0]
 8019b56:	b103      	cbz	r3, 8019b5a <_write_r+0x1e>
 8019b58:	6023      	str	r3, [r4, #0]
 8019b5a:	bd38      	pop	{r3, r4, r5, pc}
 8019b5c:	200109fc 	.word	0x200109fc

08019b60 <__libc_init_array>:
 8019b60:	b570      	push	{r4, r5, r6, lr}
 8019b62:	4d0d      	ldr	r5, [pc, #52]	@ (8019b98 <__libc_init_array+0x38>)
 8019b64:	4c0d      	ldr	r4, [pc, #52]	@ (8019b9c <__libc_init_array+0x3c>)
 8019b66:	1b64      	subs	r4, r4, r5
 8019b68:	10a4      	asrs	r4, r4, #2
 8019b6a:	2600      	movs	r6, #0
 8019b6c:	42a6      	cmp	r6, r4
 8019b6e:	d109      	bne.n	8019b84 <__libc_init_array+0x24>
 8019b70:	4d0b      	ldr	r5, [pc, #44]	@ (8019ba0 <__libc_init_array+0x40>)
 8019b72:	4c0c      	ldr	r4, [pc, #48]	@ (8019ba4 <__libc_init_array+0x44>)
 8019b74:	f000 ff76 	bl	801aa64 <_init>
 8019b78:	1b64      	subs	r4, r4, r5
 8019b7a:	10a4      	asrs	r4, r4, #2
 8019b7c:	2600      	movs	r6, #0
 8019b7e:	42a6      	cmp	r6, r4
 8019b80:	d105      	bne.n	8019b8e <__libc_init_array+0x2e>
 8019b82:	bd70      	pop	{r4, r5, r6, pc}
 8019b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8019b88:	4798      	blx	r3
 8019b8a:	3601      	adds	r6, #1
 8019b8c:	e7ee      	b.n	8019b6c <__libc_init_array+0xc>
 8019b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019b92:	4798      	blx	r3
 8019b94:	3601      	adds	r6, #1
 8019b96:	e7f2      	b.n	8019b7e <__libc_init_array+0x1e>
 8019b98:	0801f41c 	.word	0x0801f41c
 8019b9c:	0801f41c 	.word	0x0801f41c
 8019ba0:	0801f41c 	.word	0x0801f41c
 8019ba4:	0801f420 	.word	0x0801f420

08019ba8 <__retarget_lock_init_recursive>:
 8019ba8:	4770      	bx	lr

08019baa <__retarget_lock_acquire_recursive>:
 8019baa:	4770      	bx	lr

08019bac <__retarget_lock_release_recursive>:
 8019bac:	4770      	bx	lr

08019bae <memcpy>:
 8019bae:	440a      	add	r2, r1
 8019bb0:	4291      	cmp	r1, r2
 8019bb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8019bb6:	d100      	bne.n	8019bba <memcpy+0xc>
 8019bb8:	4770      	bx	lr
 8019bba:	b510      	push	{r4, lr}
 8019bbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019bc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019bc4:	4291      	cmp	r1, r2
 8019bc6:	d1f9      	bne.n	8019bbc <memcpy+0xe>
 8019bc8:	bd10      	pop	{r4, pc}
	...

08019bcc <__assert_func>:
 8019bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019bce:	4614      	mov	r4, r2
 8019bd0:	461a      	mov	r2, r3
 8019bd2:	4b09      	ldr	r3, [pc, #36]	@ (8019bf8 <__assert_func+0x2c>)
 8019bd4:	681b      	ldr	r3, [r3, #0]
 8019bd6:	4605      	mov	r5, r0
 8019bd8:	68d8      	ldr	r0, [r3, #12]
 8019bda:	b14c      	cbz	r4, 8019bf0 <__assert_func+0x24>
 8019bdc:	4b07      	ldr	r3, [pc, #28]	@ (8019bfc <__assert_func+0x30>)
 8019bde:	9100      	str	r1, [sp, #0]
 8019be0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019be4:	4906      	ldr	r1, [pc, #24]	@ (8019c00 <__assert_func+0x34>)
 8019be6:	462b      	mov	r3, r5
 8019be8:	f000 fde0 	bl	801a7ac <fiprintf>
 8019bec:	f000 feb8 	bl	801a960 <abort>
 8019bf0:	4b04      	ldr	r3, [pc, #16]	@ (8019c04 <__assert_func+0x38>)
 8019bf2:	461c      	mov	r4, r3
 8019bf4:	e7f3      	b.n	8019bde <__assert_func+0x12>
 8019bf6:	bf00      	nop
 8019bf8:	2000012c 	.word	0x2000012c
 8019bfc:	0801f3a3 	.word	0x0801f3a3
 8019c00:	0801f3b0 	.word	0x0801f3b0
 8019c04:	0801f3de 	.word	0x0801f3de

08019c08 <_free_r>:
 8019c08:	b538      	push	{r3, r4, r5, lr}
 8019c0a:	4605      	mov	r5, r0
 8019c0c:	2900      	cmp	r1, #0
 8019c0e:	d041      	beq.n	8019c94 <_free_r+0x8c>
 8019c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c14:	1f0c      	subs	r4, r1, #4
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	bfb8      	it	lt
 8019c1a:	18e4      	addlt	r4, r4, r3
 8019c1c:	f000 f8e8 	bl	8019df0 <__malloc_lock>
 8019c20:	4a1d      	ldr	r2, [pc, #116]	@ (8019c98 <_free_r+0x90>)
 8019c22:	6813      	ldr	r3, [r2, #0]
 8019c24:	b933      	cbnz	r3, 8019c34 <_free_r+0x2c>
 8019c26:	6063      	str	r3, [r4, #4]
 8019c28:	6014      	str	r4, [r2, #0]
 8019c2a:	4628      	mov	r0, r5
 8019c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019c30:	f000 b8e4 	b.w	8019dfc <__malloc_unlock>
 8019c34:	42a3      	cmp	r3, r4
 8019c36:	d908      	bls.n	8019c4a <_free_r+0x42>
 8019c38:	6820      	ldr	r0, [r4, #0]
 8019c3a:	1821      	adds	r1, r4, r0
 8019c3c:	428b      	cmp	r3, r1
 8019c3e:	bf01      	itttt	eq
 8019c40:	6819      	ldreq	r1, [r3, #0]
 8019c42:	685b      	ldreq	r3, [r3, #4]
 8019c44:	1809      	addeq	r1, r1, r0
 8019c46:	6021      	streq	r1, [r4, #0]
 8019c48:	e7ed      	b.n	8019c26 <_free_r+0x1e>
 8019c4a:	461a      	mov	r2, r3
 8019c4c:	685b      	ldr	r3, [r3, #4]
 8019c4e:	b10b      	cbz	r3, 8019c54 <_free_r+0x4c>
 8019c50:	42a3      	cmp	r3, r4
 8019c52:	d9fa      	bls.n	8019c4a <_free_r+0x42>
 8019c54:	6811      	ldr	r1, [r2, #0]
 8019c56:	1850      	adds	r0, r2, r1
 8019c58:	42a0      	cmp	r0, r4
 8019c5a:	d10b      	bne.n	8019c74 <_free_r+0x6c>
 8019c5c:	6820      	ldr	r0, [r4, #0]
 8019c5e:	4401      	add	r1, r0
 8019c60:	1850      	adds	r0, r2, r1
 8019c62:	4283      	cmp	r3, r0
 8019c64:	6011      	str	r1, [r2, #0]
 8019c66:	d1e0      	bne.n	8019c2a <_free_r+0x22>
 8019c68:	6818      	ldr	r0, [r3, #0]
 8019c6a:	685b      	ldr	r3, [r3, #4]
 8019c6c:	6053      	str	r3, [r2, #4]
 8019c6e:	4408      	add	r0, r1
 8019c70:	6010      	str	r0, [r2, #0]
 8019c72:	e7da      	b.n	8019c2a <_free_r+0x22>
 8019c74:	d902      	bls.n	8019c7c <_free_r+0x74>
 8019c76:	230c      	movs	r3, #12
 8019c78:	602b      	str	r3, [r5, #0]
 8019c7a:	e7d6      	b.n	8019c2a <_free_r+0x22>
 8019c7c:	6820      	ldr	r0, [r4, #0]
 8019c7e:	1821      	adds	r1, r4, r0
 8019c80:	428b      	cmp	r3, r1
 8019c82:	bf04      	itt	eq
 8019c84:	6819      	ldreq	r1, [r3, #0]
 8019c86:	685b      	ldreq	r3, [r3, #4]
 8019c88:	6063      	str	r3, [r4, #4]
 8019c8a:	bf04      	itt	eq
 8019c8c:	1809      	addeq	r1, r1, r0
 8019c8e:	6021      	streq	r1, [r4, #0]
 8019c90:	6054      	str	r4, [r2, #4]
 8019c92:	e7ca      	b.n	8019c2a <_free_r+0x22>
 8019c94:	bd38      	pop	{r3, r4, r5, pc}
 8019c96:	bf00      	nop
 8019c98:	20010a08 	.word	0x20010a08

08019c9c <malloc>:
 8019c9c:	4b02      	ldr	r3, [pc, #8]	@ (8019ca8 <malloc+0xc>)
 8019c9e:	4601      	mov	r1, r0
 8019ca0:	6818      	ldr	r0, [r3, #0]
 8019ca2:	f000 b825 	b.w	8019cf0 <_malloc_r>
 8019ca6:	bf00      	nop
 8019ca8:	2000012c 	.word	0x2000012c

08019cac <sbrk_aligned>:
 8019cac:	b570      	push	{r4, r5, r6, lr}
 8019cae:	4e0f      	ldr	r6, [pc, #60]	@ (8019cec <sbrk_aligned+0x40>)
 8019cb0:	460c      	mov	r4, r1
 8019cb2:	6831      	ldr	r1, [r6, #0]
 8019cb4:	4605      	mov	r5, r0
 8019cb6:	b911      	cbnz	r1, 8019cbe <sbrk_aligned+0x12>
 8019cb8:	f000 fe42 	bl	801a940 <_sbrk_r>
 8019cbc:	6030      	str	r0, [r6, #0]
 8019cbe:	4621      	mov	r1, r4
 8019cc0:	4628      	mov	r0, r5
 8019cc2:	f000 fe3d 	bl	801a940 <_sbrk_r>
 8019cc6:	1c43      	adds	r3, r0, #1
 8019cc8:	d103      	bne.n	8019cd2 <sbrk_aligned+0x26>
 8019cca:	f04f 34ff 	mov.w	r4, #4294967295
 8019cce:	4620      	mov	r0, r4
 8019cd0:	bd70      	pop	{r4, r5, r6, pc}
 8019cd2:	1cc4      	adds	r4, r0, #3
 8019cd4:	f024 0403 	bic.w	r4, r4, #3
 8019cd8:	42a0      	cmp	r0, r4
 8019cda:	d0f8      	beq.n	8019cce <sbrk_aligned+0x22>
 8019cdc:	1a21      	subs	r1, r4, r0
 8019cde:	4628      	mov	r0, r5
 8019ce0:	f000 fe2e 	bl	801a940 <_sbrk_r>
 8019ce4:	3001      	adds	r0, #1
 8019ce6:	d1f2      	bne.n	8019cce <sbrk_aligned+0x22>
 8019ce8:	e7ef      	b.n	8019cca <sbrk_aligned+0x1e>
 8019cea:	bf00      	nop
 8019cec:	20010a04 	.word	0x20010a04

08019cf0 <_malloc_r>:
 8019cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019cf4:	1ccd      	adds	r5, r1, #3
 8019cf6:	f025 0503 	bic.w	r5, r5, #3
 8019cfa:	3508      	adds	r5, #8
 8019cfc:	2d0c      	cmp	r5, #12
 8019cfe:	bf38      	it	cc
 8019d00:	250c      	movcc	r5, #12
 8019d02:	2d00      	cmp	r5, #0
 8019d04:	4606      	mov	r6, r0
 8019d06:	db01      	blt.n	8019d0c <_malloc_r+0x1c>
 8019d08:	42a9      	cmp	r1, r5
 8019d0a:	d904      	bls.n	8019d16 <_malloc_r+0x26>
 8019d0c:	230c      	movs	r3, #12
 8019d0e:	6033      	str	r3, [r6, #0]
 8019d10:	2000      	movs	r0, #0
 8019d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019d16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019dec <_malloc_r+0xfc>
 8019d1a:	f000 f869 	bl	8019df0 <__malloc_lock>
 8019d1e:	f8d8 3000 	ldr.w	r3, [r8]
 8019d22:	461c      	mov	r4, r3
 8019d24:	bb44      	cbnz	r4, 8019d78 <_malloc_r+0x88>
 8019d26:	4629      	mov	r1, r5
 8019d28:	4630      	mov	r0, r6
 8019d2a:	f7ff ffbf 	bl	8019cac <sbrk_aligned>
 8019d2e:	1c43      	adds	r3, r0, #1
 8019d30:	4604      	mov	r4, r0
 8019d32:	d158      	bne.n	8019de6 <_malloc_r+0xf6>
 8019d34:	f8d8 4000 	ldr.w	r4, [r8]
 8019d38:	4627      	mov	r7, r4
 8019d3a:	2f00      	cmp	r7, #0
 8019d3c:	d143      	bne.n	8019dc6 <_malloc_r+0xd6>
 8019d3e:	2c00      	cmp	r4, #0
 8019d40:	d04b      	beq.n	8019dda <_malloc_r+0xea>
 8019d42:	6823      	ldr	r3, [r4, #0]
 8019d44:	4639      	mov	r1, r7
 8019d46:	4630      	mov	r0, r6
 8019d48:	eb04 0903 	add.w	r9, r4, r3
 8019d4c:	f000 fdf8 	bl	801a940 <_sbrk_r>
 8019d50:	4581      	cmp	r9, r0
 8019d52:	d142      	bne.n	8019dda <_malloc_r+0xea>
 8019d54:	6821      	ldr	r1, [r4, #0]
 8019d56:	1a6d      	subs	r5, r5, r1
 8019d58:	4629      	mov	r1, r5
 8019d5a:	4630      	mov	r0, r6
 8019d5c:	f7ff ffa6 	bl	8019cac <sbrk_aligned>
 8019d60:	3001      	adds	r0, #1
 8019d62:	d03a      	beq.n	8019dda <_malloc_r+0xea>
 8019d64:	6823      	ldr	r3, [r4, #0]
 8019d66:	442b      	add	r3, r5
 8019d68:	6023      	str	r3, [r4, #0]
 8019d6a:	f8d8 3000 	ldr.w	r3, [r8]
 8019d6e:	685a      	ldr	r2, [r3, #4]
 8019d70:	bb62      	cbnz	r2, 8019dcc <_malloc_r+0xdc>
 8019d72:	f8c8 7000 	str.w	r7, [r8]
 8019d76:	e00f      	b.n	8019d98 <_malloc_r+0xa8>
 8019d78:	6822      	ldr	r2, [r4, #0]
 8019d7a:	1b52      	subs	r2, r2, r5
 8019d7c:	d420      	bmi.n	8019dc0 <_malloc_r+0xd0>
 8019d7e:	2a0b      	cmp	r2, #11
 8019d80:	d917      	bls.n	8019db2 <_malloc_r+0xc2>
 8019d82:	1961      	adds	r1, r4, r5
 8019d84:	42a3      	cmp	r3, r4
 8019d86:	6025      	str	r5, [r4, #0]
 8019d88:	bf18      	it	ne
 8019d8a:	6059      	strne	r1, [r3, #4]
 8019d8c:	6863      	ldr	r3, [r4, #4]
 8019d8e:	bf08      	it	eq
 8019d90:	f8c8 1000 	streq.w	r1, [r8]
 8019d94:	5162      	str	r2, [r4, r5]
 8019d96:	604b      	str	r3, [r1, #4]
 8019d98:	4630      	mov	r0, r6
 8019d9a:	f000 f82f 	bl	8019dfc <__malloc_unlock>
 8019d9e:	f104 000b 	add.w	r0, r4, #11
 8019da2:	1d23      	adds	r3, r4, #4
 8019da4:	f020 0007 	bic.w	r0, r0, #7
 8019da8:	1ac2      	subs	r2, r0, r3
 8019daa:	bf1c      	itt	ne
 8019dac:	1a1b      	subne	r3, r3, r0
 8019dae:	50a3      	strne	r3, [r4, r2]
 8019db0:	e7af      	b.n	8019d12 <_malloc_r+0x22>
 8019db2:	6862      	ldr	r2, [r4, #4]
 8019db4:	42a3      	cmp	r3, r4
 8019db6:	bf0c      	ite	eq
 8019db8:	f8c8 2000 	streq.w	r2, [r8]
 8019dbc:	605a      	strne	r2, [r3, #4]
 8019dbe:	e7eb      	b.n	8019d98 <_malloc_r+0xa8>
 8019dc0:	4623      	mov	r3, r4
 8019dc2:	6864      	ldr	r4, [r4, #4]
 8019dc4:	e7ae      	b.n	8019d24 <_malloc_r+0x34>
 8019dc6:	463c      	mov	r4, r7
 8019dc8:	687f      	ldr	r7, [r7, #4]
 8019dca:	e7b6      	b.n	8019d3a <_malloc_r+0x4a>
 8019dcc:	461a      	mov	r2, r3
 8019dce:	685b      	ldr	r3, [r3, #4]
 8019dd0:	42a3      	cmp	r3, r4
 8019dd2:	d1fb      	bne.n	8019dcc <_malloc_r+0xdc>
 8019dd4:	2300      	movs	r3, #0
 8019dd6:	6053      	str	r3, [r2, #4]
 8019dd8:	e7de      	b.n	8019d98 <_malloc_r+0xa8>
 8019dda:	230c      	movs	r3, #12
 8019ddc:	6033      	str	r3, [r6, #0]
 8019dde:	4630      	mov	r0, r6
 8019de0:	f000 f80c 	bl	8019dfc <__malloc_unlock>
 8019de4:	e794      	b.n	8019d10 <_malloc_r+0x20>
 8019de6:	6005      	str	r5, [r0, #0]
 8019de8:	e7d6      	b.n	8019d98 <_malloc_r+0xa8>
 8019dea:	bf00      	nop
 8019dec:	20010a08 	.word	0x20010a08

08019df0 <__malloc_lock>:
 8019df0:	4801      	ldr	r0, [pc, #4]	@ (8019df8 <__malloc_lock+0x8>)
 8019df2:	f7ff beda 	b.w	8019baa <__retarget_lock_acquire_recursive>
 8019df6:	bf00      	nop
 8019df8:	20010a00 	.word	0x20010a00

08019dfc <__malloc_unlock>:
 8019dfc:	4801      	ldr	r0, [pc, #4]	@ (8019e04 <__malloc_unlock+0x8>)
 8019dfe:	f7ff bed5 	b.w	8019bac <__retarget_lock_release_recursive>
 8019e02:	bf00      	nop
 8019e04:	20010a00 	.word	0x20010a00

08019e08 <__ssputs_r>:
 8019e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e0c:	688e      	ldr	r6, [r1, #8]
 8019e0e:	461f      	mov	r7, r3
 8019e10:	42be      	cmp	r6, r7
 8019e12:	680b      	ldr	r3, [r1, #0]
 8019e14:	4682      	mov	sl, r0
 8019e16:	460c      	mov	r4, r1
 8019e18:	4690      	mov	r8, r2
 8019e1a:	d82d      	bhi.n	8019e78 <__ssputs_r+0x70>
 8019e1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019e20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019e24:	d026      	beq.n	8019e74 <__ssputs_r+0x6c>
 8019e26:	6965      	ldr	r5, [r4, #20]
 8019e28:	6909      	ldr	r1, [r1, #16]
 8019e2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019e2e:	eba3 0901 	sub.w	r9, r3, r1
 8019e32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019e36:	1c7b      	adds	r3, r7, #1
 8019e38:	444b      	add	r3, r9
 8019e3a:	106d      	asrs	r5, r5, #1
 8019e3c:	429d      	cmp	r5, r3
 8019e3e:	bf38      	it	cc
 8019e40:	461d      	movcc	r5, r3
 8019e42:	0553      	lsls	r3, r2, #21
 8019e44:	d527      	bpl.n	8019e96 <__ssputs_r+0x8e>
 8019e46:	4629      	mov	r1, r5
 8019e48:	f7ff ff52 	bl	8019cf0 <_malloc_r>
 8019e4c:	4606      	mov	r6, r0
 8019e4e:	b360      	cbz	r0, 8019eaa <__ssputs_r+0xa2>
 8019e50:	6921      	ldr	r1, [r4, #16]
 8019e52:	464a      	mov	r2, r9
 8019e54:	f7ff feab 	bl	8019bae <memcpy>
 8019e58:	89a3      	ldrh	r3, [r4, #12]
 8019e5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019e62:	81a3      	strh	r3, [r4, #12]
 8019e64:	6126      	str	r6, [r4, #16]
 8019e66:	6165      	str	r5, [r4, #20]
 8019e68:	444e      	add	r6, r9
 8019e6a:	eba5 0509 	sub.w	r5, r5, r9
 8019e6e:	6026      	str	r6, [r4, #0]
 8019e70:	60a5      	str	r5, [r4, #8]
 8019e72:	463e      	mov	r6, r7
 8019e74:	42be      	cmp	r6, r7
 8019e76:	d900      	bls.n	8019e7a <__ssputs_r+0x72>
 8019e78:	463e      	mov	r6, r7
 8019e7a:	6820      	ldr	r0, [r4, #0]
 8019e7c:	4632      	mov	r2, r6
 8019e7e:	4641      	mov	r1, r8
 8019e80:	f7ff fda8 	bl	80199d4 <memmove>
 8019e84:	68a3      	ldr	r3, [r4, #8]
 8019e86:	1b9b      	subs	r3, r3, r6
 8019e88:	60a3      	str	r3, [r4, #8]
 8019e8a:	6823      	ldr	r3, [r4, #0]
 8019e8c:	4433      	add	r3, r6
 8019e8e:	6023      	str	r3, [r4, #0]
 8019e90:	2000      	movs	r0, #0
 8019e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e96:	462a      	mov	r2, r5
 8019e98:	f000 fd69 	bl	801a96e <_realloc_r>
 8019e9c:	4606      	mov	r6, r0
 8019e9e:	2800      	cmp	r0, #0
 8019ea0:	d1e0      	bne.n	8019e64 <__ssputs_r+0x5c>
 8019ea2:	6921      	ldr	r1, [r4, #16]
 8019ea4:	4650      	mov	r0, sl
 8019ea6:	f7ff feaf 	bl	8019c08 <_free_r>
 8019eaa:	230c      	movs	r3, #12
 8019eac:	f8ca 3000 	str.w	r3, [sl]
 8019eb0:	89a3      	ldrh	r3, [r4, #12]
 8019eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019eb6:	81a3      	strh	r3, [r4, #12]
 8019eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8019ebc:	e7e9      	b.n	8019e92 <__ssputs_r+0x8a>
	...

08019ec0 <_svfiprintf_r>:
 8019ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ec4:	4698      	mov	r8, r3
 8019ec6:	898b      	ldrh	r3, [r1, #12]
 8019ec8:	061b      	lsls	r3, r3, #24
 8019eca:	b09d      	sub	sp, #116	@ 0x74
 8019ecc:	4607      	mov	r7, r0
 8019ece:	460d      	mov	r5, r1
 8019ed0:	4614      	mov	r4, r2
 8019ed2:	d510      	bpl.n	8019ef6 <_svfiprintf_r+0x36>
 8019ed4:	690b      	ldr	r3, [r1, #16]
 8019ed6:	b973      	cbnz	r3, 8019ef6 <_svfiprintf_r+0x36>
 8019ed8:	2140      	movs	r1, #64	@ 0x40
 8019eda:	f7ff ff09 	bl	8019cf0 <_malloc_r>
 8019ede:	6028      	str	r0, [r5, #0]
 8019ee0:	6128      	str	r0, [r5, #16]
 8019ee2:	b930      	cbnz	r0, 8019ef2 <_svfiprintf_r+0x32>
 8019ee4:	230c      	movs	r3, #12
 8019ee6:	603b      	str	r3, [r7, #0]
 8019ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8019eec:	b01d      	add	sp, #116	@ 0x74
 8019eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ef2:	2340      	movs	r3, #64	@ 0x40
 8019ef4:	616b      	str	r3, [r5, #20]
 8019ef6:	2300      	movs	r3, #0
 8019ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8019efa:	2320      	movs	r3, #32
 8019efc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019f00:	f8cd 800c 	str.w	r8, [sp, #12]
 8019f04:	2330      	movs	r3, #48	@ 0x30
 8019f06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a0a4 <_svfiprintf_r+0x1e4>
 8019f0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019f0e:	f04f 0901 	mov.w	r9, #1
 8019f12:	4623      	mov	r3, r4
 8019f14:	469a      	mov	sl, r3
 8019f16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019f1a:	b10a      	cbz	r2, 8019f20 <_svfiprintf_r+0x60>
 8019f1c:	2a25      	cmp	r2, #37	@ 0x25
 8019f1e:	d1f9      	bne.n	8019f14 <_svfiprintf_r+0x54>
 8019f20:	ebba 0b04 	subs.w	fp, sl, r4
 8019f24:	d00b      	beq.n	8019f3e <_svfiprintf_r+0x7e>
 8019f26:	465b      	mov	r3, fp
 8019f28:	4622      	mov	r2, r4
 8019f2a:	4629      	mov	r1, r5
 8019f2c:	4638      	mov	r0, r7
 8019f2e:	f7ff ff6b 	bl	8019e08 <__ssputs_r>
 8019f32:	3001      	adds	r0, #1
 8019f34:	f000 80a7 	beq.w	801a086 <_svfiprintf_r+0x1c6>
 8019f38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019f3a:	445a      	add	r2, fp
 8019f3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8019f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	f000 809f 	beq.w	801a086 <_svfiprintf_r+0x1c6>
 8019f48:	2300      	movs	r3, #0
 8019f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8019f4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019f52:	f10a 0a01 	add.w	sl, sl, #1
 8019f56:	9304      	str	r3, [sp, #16]
 8019f58:	9307      	str	r3, [sp, #28]
 8019f5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019f5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8019f60:	4654      	mov	r4, sl
 8019f62:	2205      	movs	r2, #5
 8019f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f68:	484e      	ldr	r0, [pc, #312]	@ (801a0a4 <_svfiprintf_r+0x1e4>)
 8019f6a:	f7e6 f939 	bl	80001e0 <memchr>
 8019f6e:	9a04      	ldr	r2, [sp, #16]
 8019f70:	b9d8      	cbnz	r0, 8019faa <_svfiprintf_r+0xea>
 8019f72:	06d0      	lsls	r0, r2, #27
 8019f74:	bf44      	itt	mi
 8019f76:	2320      	movmi	r3, #32
 8019f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019f7c:	0711      	lsls	r1, r2, #28
 8019f7e:	bf44      	itt	mi
 8019f80:	232b      	movmi	r3, #43	@ 0x2b
 8019f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019f86:	f89a 3000 	ldrb.w	r3, [sl]
 8019f8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8019f8c:	d015      	beq.n	8019fba <_svfiprintf_r+0xfa>
 8019f8e:	9a07      	ldr	r2, [sp, #28]
 8019f90:	4654      	mov	r4, sl
 8019f92:	2000      	movs	r0, #0
 8019f94:	f04f 0c0a 	mov.w	ip, #10
 8019f98:	4621      	mov	r1, r4
 8019f9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019f9e:	3b30      	subs	r3, #48	@ 0x30
 8019fa0:	2b09      	cmp	r3, #9
 8019fa2:	d94b      	bls.n	801a03c <_svfiprintf_r+0x17c>
 8019fa4:	b1b0      	cbz	r0, 8019fd4 <_svfiprintf_r+0x114>
 8019fa6:	9207      	str	r2, [sp, #28]
 8019fa8:	e014      	b.n	8019fd4 <_svfiprintf_r+0x114>
 8019faa:	eba0 0308 	sub.w	r3, r0, r8
 8019fae:	fa09 f303 	lsl.w	r3, r9, r3
 8019fb2:	4313      	orrs	r3, r2
 8019fb4:	9304      	str	r3, [sp, #16]
 8019fb6:	46a2      	mov	sl, r4
 8019fb8:	e7d2      	b.n	8019f60 <_svfiprintf_r+0xa0>
 8019fba:	9b03      	ldr	r3, [sp, #12]
 8019fbc:	1d19      	adds	r1, r3, #4
 8019fbe:	681b      	ldr	r3, [r3, #0]
 8019fc0:	9103      	str	r1, [sp, #12]
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	bfbb      	ittet	lt
 8019fc6:	425b      	neglt	r3, r3
 8019fc8:	f042 0202 	orrlt.w	r2, r2, #2
 8019fcc:	9307      	strge	r3, [sp, #28]
 8019fce:	9307      	strlt	r3, [sp, #28]
 8019fd0:	bfb8      	it	lt
 8019fd2:	9204      	strlt	r2, [sp, #16]
 8019fd4:	7823      	ldrb	r3, [r4, #0]
 8019fd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8019fd8:	d10a      	bne.n	8019ff0 <_svfiprintf_r+0x130>
 8019fda:	7863      	ldrb	r3, [r4, #1]
 8019fdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8019fde:	d132      	bne.n	801a046 <_svfiprintf_r+0x186>
 8019fe0:	9b03      	ldr	r3, [sp, #12]
 8019fe2:	1d1a      	adds	r2, r3, #4
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	9203      	str	r2, [sp, #12]
 8019fe8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019fec:	3402      	adds	r4, #2
 8019fee:	9305      	str	r3, [sp, #20]
 8019ff0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a0b4 <_svfiprintf_r+0x1f4>
 8019ff4:	7821      	ldrb	r1, [r4, #0]
 8019ff6:	2203      	movs	r2, #3
 8019ff8:	4650      	mov	r0, sl
 8019ffa:	f7e6 f8f1 	bl	80001e0 <memchr>
 8019ffe:	b138      	cbz	r0, 801a010 <_svfiprintf_r+0x150>
 801a000:	9b04      	ldr	r3, [sp, #16]
 801a002:	eba0 000a 	sub.w	r0, r0, sl
 801a006:	2240      	movs	r2, #64	@ 0x40
 801a008:	4082      	lsls	r2, r0
 801a00a:	4313      	orrs	r3, r2
 801a00c:	3401      	adds	r4, #1
 801a00e:	9304      	str	r3, [sp, #16]
 801a010:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a014:	4824      	ldr	r0, [pc, #144]	@ (801a0a8 <_svfiprintf_r+0x1e8>)
 801a016:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a01a:	2206      	movs	r2, #6
 801a01c:	f7e6 f8e0 	bl	80001e0 <memchr>
 801a020:	2800      	cmp	r0, #0
 801a022:	d036      	beq.n	801a092 <_svfiprintf_r+0x1d2>
 801a024:	4b21      	ldr	r3, [pc, #132]	@ (801a0ac <_svfiprintf_r+0x1ec>)
 801a026:	bb1b      	cbnz	r3, 801a070 <_svfiprintf_r+0x1b0>
 801a028:	9b03      	ldr	r3, [sp, #12]
 801a02a:	3307      	adds	r3, #7
 801a02c:	f023 0307 	bic.w	r3, r3, #7
 801a030:	3308      	adds	r3, #8
 801a032:	9303      	str	r3, [sp, #12]
 801a034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a036:	4433      	add	r3, r6
 801a038:	9309      	str	r3, [sp, #36]	@ 0x24
 801a03a:	e76a      	b.n	8019f12 <_svfiprintf_r+0x52>
 801a03c:	fb0c 3202 	mla	r2, ip, r2, r3
 801a040:	460c      	mov	r4, r1
 801a042:	2001      	movs	r0, #1
 801a044:	e7a8      	b.n	8019f98 <_svfiprintf_r+0xd8>
 801a046:	2300      	movs	r3, #0
 801a048:	3401      	adds	r4, #1
 801a04a:	9305      	str	r3, [sp, #20]
 801a04c:	4619      	mov	r1, r3
 801a04e:	f04f 0c0a 	mov.w	ip, #10
 801a052:	4620      	mov	r0, r4
 801a054:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a058:	3a30      	subs	r2, #48	@ 0x30
 801a05a:	2a09      	cmp	r2, #9
 801a05c:	d903      	bls.n	801a066 <_svfiprintf_r+0x1a6>
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d0c6      	beq.n	8019ff0 <_svfiprintf_r+0x130>
 801a062:	9105      	str	r1, [sp, #20]
 801a064:	e7c4      	b.n	8019ff0 <_svfiprintf_r+0x130>
 801a066:	fb0c 2101 	mla	r1, ip, r1, r2
 801a06a:	4604      	mov	r4, r0
 801a06c:	2301      	movs	r3, #1
 801a06e:	e7f0      	b.n	801a052 <_svfiprintf_r+0x192>
 801a070:	ab03      	add	r3, sp, #12
 801a072:	9300      	str	r3, [sp, #0]
 801a074:	462a      	mov	r2, r5
 801a076:	4b0e      	ldr	r3, [pc, #56]	@ (801a0b0 <_svfiprintf_r+0x1f0>)
 801a078:	a904      	add	r1, sp, #16
 801a07a:	4638      	mov	r0, r7
 801a07c:	f3af 8000 	nop.w
 801a080:	1c42      	adds	r2, r0, #1
 801a082:	4606      	mov	r6, r0
 801a084:	d1d6      	bne.n	801a034 <_svfiprintf_r+0x174>
 801a086:	89ab      	ldrh	r3, [r5, #12]
 801a088:	065b      	lsls	r3, r3, #25
 801a08a:	f53f af2d 	bmi.w	8019ee8 <_svfiprintf_r+0x28>
 801a08e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a090:	e72c      	b.n	8019eec <_svfiprintf_r+0x2c>
 801a092:	ab03      	add	r3, sp, #12
 801a094:	9300      	str	r3, [sp, #0]
 801a096:	462a      	mov	r2, r5
 801a098:	4b05      	ldr	r3, [pc, #20]	@ (801a0b0 <_svfiprintf_r+0x1f0>)
 801a09a:	a904      	add	r1, sp, #16
 801a09c:	4638      	mov	r0, r7
 801a09e:	f000 f9bb 	bl	801a418 <_printf_i>
 801a0a2:	e7ed      	b.n	801a080 <_svfiprintf_r+0x1c0>
 801a0a4:	0801f3df 	.word	0x0801f3df
 801a0a8:	0801f3e9 	.word	0x0801f3e9
 801a0ac:	00000000 	.word	0x00000000
 801a0b0:	08019e09 	.word	0x08019e09
 801a0b4:	0801f3e5 	.word	0x0801f3e5

0801a0b8 <__sfputc_r>:
 801a0b8:	6893      	ldr	r3, [r2, #8]
 801a0ba:	3b01      	subs	r3, #1
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	b410      	push	{r4}
 801a0c0:	6093      	str	r3, [r2, #8]
 801a0c2:	da08      	bge.n	801a0d6 <__sfputc_r+0x1e>
 801a0c4:	6994      	ldr	r4, [r2, #24]
 801a0c6:	42a3      	cmp	r3, r4
 801a0c8:	db01      	blt.n	801a0ce <__sfputc_r+0x16>
 801a0ca:	290a      	cmp	r1, #10
 801a0cc:	d103      	bne.n	801a0d6 <__sfputc_r+0x1e>
 801a0ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a0d2:	f7ff bbda 	b.w	801988a <__swbuf_r>
 801a0d6:	6813      	ldr	r3, [r2, #0]
 801a0d8:	1c58      	adds	r0, r3, #1
 801a0da:	6010      	str	r0, [r2, #0]
 801a0dc:	7019      	strb	r1, [r3, #0]
 801a0de:	4608      	mov	r0, r1
 801a0e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a0e4:	4770      	bx	lr

0801a0e6 <__sfputs_r>:
 801a0e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0e8:	4606      	mov	r6, r0
 801a0ea:	460f      	mov	r7, r1
 801a0ec:	4614      	mov	r4, r2
 801a0ee:	18d5      	adds	r5, r2, r3
 801a0f0:	42ac      	cmp	r4, r5
 801a0f2:	d101      	bne.n	801a0f8 <__sfputs_r+0x12>
 801a0f4:	2000      	movs	r0, #0
 801a0f6:	e007      	b.n	801a108 <__sfputs_r+0x22>
 801a0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0fc:	463a      	mov	r2, r7
 801a0fe:	4630      	mov	r0, r6
 801a100:	f7ff ffda 	bl	801a0b8 <__sfputc_r>
 801a104:	1c43      	adds	r3, r0, #1
 801a106:	d1f3      	bne.n	801a0f0 <__sfputs_r+0xa>
 801a108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a10c <_vfiprintf_r>:
 801a10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a110:	460d      	mov	r5, r1
 801a112:	b09d      	sub	sp, #116	@ 0x74
 801a114:	4614      	mov	r4, r2
 801a116:	4698      	mov	r8, r3
 801a118:	4606      	mov	r6, r0
 801a11a:	b118      	cbz	r0, 801a124 <_vfiprintf_r+0x18>
 801a11c:	6a03      	ldr	r3, [r0, #32]
 801a11e:	b90b      	cbnz	r3, 801a124 <_vfiprintf_r+0x18>
 801a120:	f7ff fa6a 	bl	80195f8 <__sinit>
 801a124:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a126:	07d9      	lsls	r1, r3, #31
 801a128:	d405      	bmi.n	801a136 <_vfiprintf_r+0x2a>
 801a12a:	89ab      	ldrh	r3, [r5, #12]
 801a12c:	059a      	lsls	r2, r3, #22
 801a12e:	d402      	bmi.n	801a136 <_vfiprintf_r+0x2a>
 801a130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a132:	f7ff fd3a 	bl	8019baa <__retarget_lock_acquire_recursive>
 801a136:	89ab      	ldrh	r3, [r5, #12]
 801a138:	071b      	lsls	r3, r3, #28
 801a13a:	d501      	bpl.n	801a140 <_vfiprintf_r+0x34>
 801a13c:	692b      	ldr	r3, [r5, #16]
 801a13e:	b99b      	cbnz	r3, 801a168 <_vfiprintf_r+0x5c>
 801a140:	4629      	mov	r1, r5
 801a142:	4630      	mov	r0, r6
 801a144:	f7ff fbe0 	bl	8019908 <__swsetup_r>
 801a148:	b170      	cbz	r0, 801a168 <_vfiprintf_r+0x5c>
 801a14a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a14c:	07dc      	lsls	r4, r3, #31
 801a14e:	d504      	bpl.n	801a15a <_vfiprintf_r+0x4e>
 801a150:	f04f 30ff 	mov.w	r0, #4294967295
 801a154:	b01d      	add	sp, #116	@ 0x74
 801a156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a15a:	89ab      	ldrh	r3, [r5, #12]
 801a15c:	0598      	lsls	r0, r3, #22
 801a15e:	d4f7      	bmi.n	801a150 <_vfiprintf_r+0x44>
 801a160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a162:	f7ff fd23 	bl	8019bac <__retarget_lock_release_recursive>
 801a166:	e7f3      	b.n	801a150 <_vfiprintf_r+0x44>
 801a168:	2300      	movs	r3, #0
 801a16a:	9309      	str	r3, [sp, #36]	@ 0x24
 801a16c:	2320      	movs	r3, #32
 801a16e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a172:	f8cd 800c 	str.w	r8, [sp, #12]
 801a176:	2330      	movs	r3, #48	@ 0x30
 801a178:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a328 <_vfiprintf_r+0x21c>
 801a17c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a180:	f04f 0901 	mov.w	r9, #1
 801a184:	4623      	mov	r3, r4
 801a186:	469a      	mov	sl, r3
 801a188:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a18c:	b10a      	cbz	r2, 801a192 <_vfiprintf_r+0x86>
 801a18e:	2a25      	cmp	r2, #37	@ 0x25
 801a190:	d1f9      	bne.n	801a186 <_vfiprintf_r+0x7a>
 801a192:	ebba 0b04 	subs.w	fp, sl, r4
 801a196:	d00b      	beq.n	801a1b0 <_vfiprintf_r+0xa4>
 801a198:	465b      	mov	r3, fp
 801a19a:	4622      	mov	r2, r4
 801a19c:	4629      	mov	r1, r5
 801a19e:	4630      	mov	r0, r6
 801a1a0:	f7ff ffa1 	bl	801a0e6 <__sfputs_r>
 801a1a4:	3001      	adds	r0, #1
 801a1a6:	f000 80a7 	beq.w	801a2f8 <_vfiprintf_r+0x1ec>
 801a1aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a1ac:	445a      	add	r2, fp
 801a1ae:	9209      	str	r2, [sp, #36]	@ 0x24
 801a1b0:	f89a 3000 	ldrb.w	r3, [sl]
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	f000 809f 	beq.w	801a2f8 <_vfiprintf_r+0x1ec>
 801a1ba:	2300      	movs	r3, #0
 801a1bc:	f04f 32ff 	mov.w	r2, #4294967295
 801a1c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a1c4:	f10a 0a01 	add.w	sl, sl, #1
 801a1c8:	9304      	str	r3, [sp, #16]
 801a1ca:	9307      	str	r3, [sp, #28]
 801a1cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a1d0:	931a      	str	r3, [sp, #104]	@ 0x68
 801a1d2:	4654      	mov	r4, sl
 801a1d4:	2205      	movs	r2, #5
 801a1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a1da:	4853      	ldr	r0, [pc, #332]	@ (801a328 <_vfiprintf_r+0x21c>)
 801a1dc:	f7e6 f800 	bl	80001e0 <memchr>
 801a1e0:	9a04      	ldr	r2, [sp, #16]
 801a1e2:	b9d8      	cbnz	r0, 801a21c <_vfiprintf_r+0x110>
 801a1e4:	06d1      	lsls	r1, r2, #27
 801a1e6:	bf44      	itt	mi
 801a1e8:	2320      	movmi	r3, #32
 801a1ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a1ee:	0713      	lsls	r3, r2, #28
 801a1f0:	bf44      	itt	mi
 801a1f2:	232b      	movmi	r3, #43	@ 0x2b
 801a1f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a1f8:	f89a 3000 	ldrb.w	r3, [sl]
 801a1fc:	2b2a      	cmp	r3, #42	@ 0x2a
 801a1fe:	d015      	beq.n	801a22c <_vfiprintf_r+0x120>
 801a200:	9a07      	ldr	r2, [sp, #28]
 801a202:	4654      	mov	r4, sl
 801a204:	2000      	movs	r0, #0
 801a206:	f04f 0c0a 	mov.w	ip, #10
 801a20a:	4621      	mov	r1, r4
 801a20c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a210:	3b30      	subs	r3, #48	@ 0x30
 801a212:	2b09      	cmp	r3, #9
 801a214:	d94b      	bls.n	801a2ae <_vfiprintf_r+0x1a2>
 801a216:	b1b0      	cbz	r0, 801a246 <_vfiprintf_r+0x13a>
 801a218:	9207      	str	r2, [sp, #28]
 801a21a:	e014      	b.n	801a246 <_vfiprintf_r+0x13a>
 801a21c:	eba0 0308 	sub.w	r3, r0, r8
 801a220:	fa09 f303 	lsl.w	r3, r9, r3
 801a224:	4313      	orrs	r3, r2
 801a226:	9304      	str	r3, [sp, #16]
 801a228:	46a2      	mov	sl, r4
 801a22a:	e7d2      	b.n	801a1d2 <_vfiprintf_r+0xc6>
 801a22c:	9b03      	ldr	r3, [sp, #12]
 801a22e:	1d19      	adds	r1, r3, #4
 801a230:	681b      	ldr	r3, [r3, #0]
 801a232:	9103      	str	r1, [sp, #12]
 801a234:	2b00      	cmp	r3, #0
 801a236:	bfbb      	ittet	lt
 801a238:	425b      	neglt	r3, r3
 801a23a:	f042 0202 	orrlt.w	r2, r2, #2
 801a23e:	9307      	strge	r3, [sp, #28]
 801a240:	9307      	strlt	r3, [sp, #28]
 801a242:	bfb8      	it	lt
 801a244:	9204      	strlt	r2, [sp, #16]
 801a246:	7823      	ldrb	r3, [r4, #0]
 801a248:	2b2e      	cmp	r3, #46	@ 0x2e
 801a24a:	d10a      	bne.n	801a262 <_vfiprintf_r+0x156>
 801a24c:	7863      	ldrb	r3, [r4, #1]
 801a24e:	2b2a      	cmp	r3, #42	@ 0x2a
 801a250:	d132      	bne.n	801a2b8 <_vfiprintf_r+0x1ac>
 801a252:	9b03      	ldr	r3, [sp, #12]
 801a254:	1d1a      	adds	r2, r3, #4
 801a256:	681b      	ldr	r3, [r3, #0]
 801a258:	9203      	str	r2, [sp, #12]
 801a25a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a25e:	3402      	adds	r4, #2
 801a260:	9305      	str	r3, [sp, #20]
 801a262:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a338 <_vfiprintf_r+0x22c>
 801a266:	7821      	ldrb	r1, [r4, #0]
 801a268:	2203      	movs	r2, #3
 801a26a:	4650      	mov	r0, sl
 801a26c:	f7e5 ffb8 	bl	80001e0 <memchr>
 801a270:	b138      	cbz	r0, 801a282 <_vfiprintf_r+0x176>
 801a272:	9b04      	ldr	r3, [sp, #16]
 801a274:	eba0 000a 	sub.w	r0, r0, sl
 801a278:	2240      	movs	r2, #64	@ 0x40
 801a27a:	4082      	lsls	r2, r0
 801a27c:	4313      	orrs	r3, r2
 801a27e:	3401      	adds	r4, #1
 801a280:	9304      	str	r3, [sp, #16]
 801a282:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a286:	4829      	ldr	r0, [pc, #164]	@ (801a32c <_vfiprintf_r+0x220>)
 801a288:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a28c:	2206      	movs	r2, #6
 801a28e:	f7e5 ffa7 	bl	80001e0 <memchr>
 801a292:	2800      	cmp	r0, #0
 801a294:	d03f      	beq.n	801a316 <_vfiprintf_r+0x20a>
 801a296:	4b26      	ldr	r3, [pc, #152]	@ (801a330 <_vfiprintf_r+0x224>)
 801a298:	bb1b      	cbnz	r3, 801a2e2 <_vfiprintf_r+0x1d6>
 801a29a:	9b03      	ldr	r3, [sp, #12]
 801a29c:	3307      	adds	r3, #7
 801a29e:	f023 0307 	bic.w	r3, r3, #7
 801a2a2:	3308      	adds	r3, #8
 801a2a4:	9303      	str	r3, [sp, #12]
 801a2a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a2a8:	443b      	add	r3, r7
 801a2aa:	9309      	str	r3, [sp, #36]	@ 0x24
 801a2ac:	e76a      	b.n	801a184 <_vfiprintf_r+0x78>
 801a2ae:	fb0c 3202 	mla	r2, ip, r2, r3
 801a2b2:	460c      	mov	r4, r1
 801a2b4:	2001      	movs	r0, #1
 801a2b6:	e7a8      	b.n	801a20a <_vfiprintf_r+0xfe>
 801a2b8:	2300      	movs	r3, #0
 801a2ba:	3401      	adds	r4, #1
 801a2bc:	9305      	str	r3, [sp, #20]
 801a2be:	4619      	mov	r1, r3
 801a2c0:	f04f 0c0a 	mov.w	ip, #10
 801a2c4:	4620      	mov	r0, r4
 801a2c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a2ca:	3a30      	subs	r2, #48	@ 0x30
 801a2cc:	2a09      	cmp	r2, #9
 801a2ce:	d903      	bls.n	801a2d8 <_vfiprintf_r+0x1cc>
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d0c6      	beq.n	801a262 <_vfiprintf_r+0x156>
 801a2d4:	9105      	str	r1, [sp, #20]
 801a2d6:	e7c4      	b.n	801a262 <_vfiprintf_r+0x156>
 801a2d8:	fb0c 2101 	mla	r1, ip, r1, r2
 801a2dc:	4604      	mov	r4, r0
 801a2de:	2301      	movs	r3, #1
 801a2e0:	e7f0      	b.n	801a2c4 <_vfiprintf_r+0x1b8>
 801a2e2:	ab03      	add	r3, sp, #12
 801a2e4:	9300      	str	r3, [sp, #0]
 801a2e6:	462a      	mov	r2, r5
 801a2e8:	4b12      	ldr	r3, [pc, #72]	@ (801a334 <_vfiprintf_r+0x228>)
 801a2ea:	a904      	add	r1, sp, #16
 801a2ec:	4630      	mov	r0, r6
 801a2ee:	f3af 8000 	nop.w
 801a2f2:	4607      	mov	r7, r0
 801a2f4:	1c78      	adds	r0, r7, #1
 801a2f6:	d1d6      	bne.n	801a2a6 <_vfiprintf_r+0x19a>
 801a2f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a2fa:	07d9      	lsls	r1, r3, #31
 801a2fc:	d405      	bmi.n	801a30a <_vfiprintf_r+0x1fe>
 801a2fe:	89ab      	ldrh	r3, [r5, #12]
 801a300:	059a      	lsls	r2, r3, #22
 801a302:	d402      	bmi.n	801a30a <_vfiprintf_r+0x1fe>
 801a304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a306:	f7ff fc51 	bl	8019bac <__retarget_lock_release_recursive>
 801a30a:	89ab      	ldrh	r3, [r5, #12]
 801a30c:	065b      	lsls	r3, r3, #25
 801a30e:	f53f af1f 	bmi.w	801a150 <_vfiprintf_r+0x44>
 801a312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a314:	e71e      	b.n	801a154 <_vfiprintf_r+0x48>
 801a316:	ab03      	add	r3, sp, #12
 801a318:	9300      	str	r3, [sp, #0]
 801a31a:	462a      	mov	r2, r5
 801a31c:	4b05      	ldr	r3, [pc, #20]	@ (801a334 <_vfiprintf_r+0x228>)
 801a31e:	a904      	add	r1, sp, #16
 801a320:	4630      	mov	r0, r6
 801a322:	f000 f879 	bl	801a418 <_printf_i>
 801a326:	e7e4      	b.n	801a2f2 <_vfiprintf_r+0x1e6>
 801a328:	0801f3df 	.word	0x0801f3df
 801a32c:	0801f3e9 	.word	0x0801f3e9
 801a330:	00000000 	.word	0x00000000
 801a334:	0801a0e7 	.word	0x0801a0e7
 801a338:	0801f3e5 	.word	0x0801f3e5

0801a33c <_printf_common>:
 801a33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a340:	4616      	mov	r6, r2
 801a342:	4698      	mov	r8, r3
 801a344:	688a      	ldr	r2, [r1, #8]
 801a346:	690b      	ldr	r3, [r1, #16]
 801a348:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a34c:	4293      	cmp	r3, r2
 801a34e:	bfb8      	it	lt
 801a350:	4613      	movlt	r3, r2
 801a352:	6033      	str	r3, [r6, #0]
 801a354:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a358:	4607      	mov	r7, r0
 801a35a:	460c      	mov	r4, r1
 801a35c:	b10a      	cbz	r2, 801a362 <_printf_common+0x26>
 801a35e:	3301      	adds	r3, #1
 801a360:	6033      	str	r3, [r6, #0]
 801a362:	6823      	ldr	r3, [r4, #0]
 801a364:	0699      	lsls	r1, r3, #26
 801a366:	bf42      	ittt	mi
 801a368:	6833      	ldrmi	r3, [r6, #0]
 801a36a:	3302      	addmi	r3, #2
 801a36c:	6033      	strmi	r3, [r6, #0]
 801a36e:	6825      	ldr	r5, [r4, #0]
 801a370:	f015 0506 	ands.w	r5, r5, #6
 801a374:	d106      	bne.n	801a384 <_printf_common+0x48>
 801a376:	f104 0a19 	add.w	sl, r4, #25
 801a37a:	68e3      	ldr	r3, [r4, #12]
 801a37c:	6832      	ldr	r2, [r6, #0]
 801a37e:	1a9b      	subs	r3, r3, r2
 801a380:	42ab      	cmp	r3, r5
 801a382:	dc26      	bgt.n	801a3d2 <_printf_common+0x96>
 801a384:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a388:	6822      	ldr	r2, [r4, #0]
 801a38a:	3b00      	subs	r3, #0
 801a38c:	bf18      	it	ne
 801a38e:	2301      	movne	r3, #1
 801a390:	0692      	lsls	r2, r2, #26
 801a392:	d42b      	bmi.n	801a3ec <_printf_common+0xb0>
 801a394:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a398:	4641      	mov	r1, r8
 801a39a:	4638      	mov	r0, r7
 801a39c:	47c8      	blx	r9
 801a39e:	3001      	adds	r0, #1
 801a3a0:	d01e      	beq.n	801a3e0 <_printf_common+0xa4>
 801a3a2:	6823      	ldr	r3, [r4, #0]
 801a3a4:	6922      	ldr	r2, [r4, #16]
 801a3a6:	f003 0306 	and.w	r3, r3, #6
 801a3aa:	2b04      	cmp	r3, #4
 801a3ac:	bf02      	ittt	eq
 801a3ae:	68e5      	ldreq	r5, [r4, #12]
 801a3b0:	6833      	ldreq	r3, [r6, #0]
 801a3b2:	1aed      	subeq	r5, r5, r3
 801a3b4:	68a3      	ldr	r3, [r4, #8]
 801a3b6:	bf0c      	ite	eq
 801a3b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a3bc:	2500      	movne	r5, #0
 801a3be:	4293      	cmp	r3, r2
 801a3c0:	bfc4      	itt	gt
 801a3c2:	1a9b      	subgt	r3, r3, r2
 801a3c4:	18ed      	addgt	r5, r5, r3
 801a3c6:	2600      	movs	r6, #0
 801a3c8:	341a      	adds	r4, #26
 801a3ca:	42b5      	cmp	r5, r6
 801a3cc:	d11a      	bne.n	801a404 <_printf_common+0xc8>
 801a3ce:	2000      	movs	r0, #0
 801a3d0:	e008      	b.n	801a3e4 <_printf_common+0xa8>
 801a3d2:	2301      	movs	r3, #1
 801a3d4:	4652      	mov	r2, sl
 801a3d6:	4641      	mov	r1, r8
 801a3d8:	4638      	mov	r0, r7
 801a3da:	47c8      	blx	r9
 801a3dc:	3001      	adds	r0, #1
 801a3de:	d103      	bne.n	801a3e8 <_printf_common+0xac>
 801a3e0:	f04f 30ff 	mov.w	r0, #4294967295
 801a3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3e8:	3501      	adds	r5, #1
 801a3ea:	e7c6      	b.n	801a37a <_printf_common+0x3e>
 801a3ec:	18e1      	adds	r1, r4, r3
 801a3ee:	1c5a      	adds	r2, r3, #1
 801a3f0:	2030      	movs	r0, #48	@ 0x30
 801a3f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a3f6:	4422      	add	r2, r4
 801a3f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a3fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a400:	3302      	adds	r3, #2
 801a402:	e7c7      	b.n	801a394 <_printf_common+0x58>
 801a404:	2301      	movs	r3, #1
 801a406:	4622      	mov	r2, r4
 801a408:	4641      	mov	r1, r8
 801a40a:	4638      	mov	r0, r7
 801a40c:	47c8      	blx	r9
 801a40e:	3001      	adds	r0, #1
 801a410:	d0e6      	beq.n	801a3e0 <_printf_common+0xa4>
 801a412:	3601      	adds	r6, #1
 801a414:	e7d9      	b.n	801a3ca <_printf_common+0x8e>
	...

0801a418 <_printf_i>:
 801a418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a41c:	7e0f      	ldrb	r7, [r1, #24]
 801a41e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a420:	2f78      	cmp	r7, #120	@ 0x78
 801a422:	4691      	mov	r9, r2
 801a424:	4680      	mov	r8, r0
 801a426:	460c      	mov	r4, r1
 801a428:	469a      	mov	sl, r3
 801a42a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a42e:	d807      	bhi.n	801a440 <_printf_i+0x28>
 801a430:	2f62      	cmp	r7, #98	@ 0x62
 801a432:	d80a      	bhi.n	801a44a <_printf_i+0x32>
 801a434:	2f00      	cmp	r7, #0
 801a436:	f000 80d1 	beq.w	801a5dc <_printf_i+0x1c4>
 801a43a:	2f58      	cmp	r7, #88	@ 0x58
 801a43c:	f000 80b8 	beq.w	801a5b0 <_printf_i+0x198>
 801a440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a444:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a448:	e03a      	b.n	801a4c0 <_printf_i+0xa8>
 801a44a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a44e:	2b15      	cmp	r3, #21
 801a450:	d8f6      	bhi.n	801a440 <_printf_i+0x28>
 801a452:	a101      	add	r1, pc, #4	@ (adr r1, 801a458 <_printf_i+0x40>)
 801a454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a458:	0801a4b1 	.word	0x0801a4b1
 801a45c:	0801a4c5 	.word	0x0801a4c5
 801a460:	0801a441 	.word	0x0801a441
 801a464:	0801a441 	.word	0x0801a441
 801a468:	0801a441 	.word	0x0801a441
 801a46c:	0801a441 	.word	0x0801a441
 801a470:	0801a4c5 	.word	0x0801a4c5
 801a474:	0801a441 	.word	0x0801a441
 801a478:	0801a441 	.word	0x0801a441
 801a47c:	0801a441 	.word	0x0801a441
 801a480:	0801a441 	.word	0x0801a441
 801a484:	0801a5c3 	.word	0x0801a5c3
 801a488:	0801a4ef 	.word	0x0801a4ef
 801a48c:	0801a57d 	.word	0x0801a57d
 801a490:	0801a441 	.word	0x0801a441
 801a494:	0801a441 	.word	0x0801a441
 801a498:	0801a5e5 	.word	0x0801a5e5
 801a49c:	0801a441 	.word	0x0801a441
 801a4a0:	0801a4ef 	.word	0x0801a4ef
 801a4a4:	0801a441 	.word	0x0801a441
 801a4a8:	0801a441 	.word	0x0801a441
 801a4ac:	0801a585 	.word	0x0801a585
 801a4b0:	6833      	ldr	r3, [r6, #0]
 801a4b2:	1d1a      	adds	r2, r3, #4
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	6032      	str	r2, [r6, #0]
 801a4b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a4bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a4c0:	2301      	movs	r3, #1
 801a4c2:	e09c      	b.n	801a5fe <_printf_i+0x1e6>
 801a4c4:	6833      	ldr	r3, [r6, #0]
 801a4c6:	6820      	ldr	r0, [r4, #0]
 801a4c8:	1d19      	adds	r1, r3, #4
 801a4ca:	6031      	str	r1, [r6, #0]
 801a4cc:	0606      	lsls	r6, r0, #24
 801a4ce:	d501      	bpl.n	801a4d4 <_printf_i+0xbc>
 801a4d0:	681d      	ldr	r5, [r3, #0]
 801a4d2:	e003      	b.n	801a4dc <_printf_i+0xc4>
 801a4d4:	0645      	lsls	r5, r0, #25
 801a4d6:	d5fb      	bpl.n	801a4d0 <_printf_i+0xb8>
 801a4d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a4dc:	2d00      	cmp	r5, #0
 801a4de:	da03      	bge.n	801a4e8 <_printf_i+0xd0>
 801a4e0:	232d      	movs	r3, #45	@ 0x2d
 801a4e2:	426d      	negs	r5, r5
 801a4e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a4e8:	4858      	ldr	r0, [pc, #352]	@ (801a64c <_printf_i+0x234>)
 801a4ea:	230a      	movs	r3, #10
 801a4ec:	e011      	b.n	801a512 <_printf_i+0xfa>
 801a4ee:	6821      	ldr	r1, [r4, #0]
 801a4f0:	6833      	ldr	r3, [r6, #0]
 801a4f2:	0608      	lsls	r0, r1, #24
 801a4f4:	f853 5b04 	ldr.w	r5, [r3], #4
 801a4f8:	d402      	bmi.n	801a500 <_printf_i+0xe8>
 801a4fa:	0649      	lsls	r1, r1, #25
 801a4fc:	bf48      	it	mi
 801a4fe:	b2ad      	uxthmi	r5, r5
 801a500:	2f6f      	cmp	r7, #111	@ 0x6f
 801a502:	4852      	ldr	r0, [pc, #328]	@ (801a64c <_printf_i+0x234>)
 801a504:	6033      	str	r3, [r6, #0]
 801a506:	bf14      	ite	ne
 801a508:	230a      	movne	r3, #10
 801a50a:	2308      	moveq	r3, #8
 801a50c:	2100      	movs	r1, #0
 801a50e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a512:	6866      	ldr	r6, [r4, #4]
 801a514:	60a6      	str	r6, [r4, #8]
 801a516:	2e00      	cmp	r6, #0
 801a518:	db05      	blt.n	801a526 <_printf_i+0x10e>
 801a51a:	6821      	ldr	r1, [r4, #0]
 801a51c:	432e      	orrs	r6, r5
 801a51e:	f021 0104 	bic.w	r1, r1, #4
 801a522:	6021      	str	r1, [r4, #0]
 801a524:	d04b      	beq.n	801a5be <_printf_i+0x1a6>
 801a526:	4616      	mov	r6, r2
 801a528:	fbb5 f1f3 	udiv	r1, r5, r3
 801a52c:	fb03 5711 	mls	r7, r3, r1, r5
 801a530:	5dc7      	ldrb	r7, [r0, r7]
 801a532:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a536:	462f      	mov	r7, r5
 801a538:	42bb      	cmp	r3, r7
 801a53a:	460d      	mov	r5, r1
 801a53c:	d9f4      	bls.n	801a528 <_printf_i+0x110>
 801a53e:	2b08      	cmp	r3, #8
 801a540:	d10b      	bne.n	801a55a <_printf_i+0x142>
 801a542:	6823      	ldr	r3, [r4, #0]
 801a544:	07df      	lsls	r7, r3, #31
 801a546:	d508      	bpl.n	801a55a <_printf_i+0x142>
 801a548:	6923      	ldr	r3, [r4, #16]
 801a54a:	6861      	ldr	r1, [r4, #4]
 801a54c:	4299      	cmp	r1, r3
 801a54e:	bfde      	ittt	le
 801a550:	2330      	movle	r3, #48	@ 0x30
 801a552:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a556:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a55a:	1b92      	subs	r2, r2, r6
 801a55c:	6122      	str	r2, [r4, #16]
 801a55e:	f8cd a000 	str.w	sl, [sp]
 801a562:	464b      	mov	r3, r9
 801a564:	aa03      	add	r2, sp, #12
 801a566:	4621      	mov	r1, r4
 801a568:	4640      	mov	r0, r8
 801a56a:	f7ff fee7 	bl	801a33c <_printf_common>
 801a56e:	3001      	adds	r0, #1
 801a570:	d14a      	bne.n	801a608 <_printf_i+0x1f0>
 801a572:	f04f 30ff 	mov.w	r0, #4294967295
 801a576:	b004      	add	sp, #16
 801a578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a57c:	6823      	ldr	r3, [r4, #0]
 801a57e:	f043 0320 	orr.w	r3, r3, #32
 801a582:	6023      	str	r3, [r4, #0]
 801a584:	4832      	ldr	r0, [pc, #200]	@ (801a650 <_printf_i+0x238>)
 801a586:	2778      	movs	r7, #120	@ 0x78
 801a588:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a58c:	6823      	ldr	r3, [r4, #0]
 801a58e:	6831      	ldr	r1, [r6, #0]
 801a590:	061f      	lsls	r7, r3, #24
 801a592:	f851 5b04 	ldr.w	r5, [r1], #4
 801a596:	d402      	bmi.n	801a59e <_printf_i+0x186>
 801a598:	065f      	lsls	r7, r3, #25
 801a59a:	bf48      	it	mi
 801a59c:	b2ad      	uxthmi	r5, r5
 801a59e:	6031      	str	r1, [r6, #0]
 801a5a0:	07d9      	lsls	r1, r3, #31
 801a5a2:	bf44      	itt	mi
 801a5a4:	f043 0320 	orrmi.w	r3, r3, #32
 801a5a8:	6023      	strmi	r3, [r4, #0]
 801a5aa:	b11d      	cbz	r5, 801a5b4 <_printf_i+0x19c>
 801a5ac:	2310      	movs	r3, #16
 801a5ae:	e7ad      	b.n	801a50c <_printf_i+0xf4>
 801a5b0:	4826      	ldr	r0, [pc, #152]	@ (801a64c <_printf_i+0x234>)
 801a5b2:	e7e9      	b.n	801a588 <_printf_i+0x170>
 801a5b4:	6823      	ldr	r3, [r4, #0]
 801a5b6:	f023 0320 	bic.w	r3, r3, #32
 801a5ba:	6023      	str	r3, [r4, #0]
 801a5bc:	e7f6      	b.n	801a5ac <_printf_i+0x194>
 801a5be:	4616      	mov	r6, r2
 801a5c0:	e7bd      	b.n	801a53e <_printf_i+0x126>
 801a5c2:	6833      	ldr	r3, [r6, #0]
 801a5c4:	6825      	ldr	r5, [r4, #0]
 801a5c6:	6961      	ldr	r1, [r4, #20]
 801a5c8:	1d18      	adds	r0, r3, #4
 801a5ca:	6030      	str	r0, [r6, #0]
 801a5cc:	062e      	lsls	r6, r5, #24
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	d501      	bpl.n	801a5d6 <_printf_i+0x1be>
 801a5d2:	6019      	str	r1, [r3, #0]
 801a5d4:	e002      	b.n	801a5dc <_printf_i+0x1c4>
 801a5d6:	0668      	lsls	r0, r5, #25
 801a5d8:	d5fb      	bpl.n	801a5d2 <_printf_i+0x1ba>
 801a5da:	8019      	strh	r1, [r3, #0]
 801a5dc:	2300      	movs	r3, #0
 801a5de:	6123      	str	r3, [r4, #16]
 801a5e0:	4616      	mov	r6, r2
 801a5e2:	e7bc      	b.n	801a55e <_printf_i+0x146>
 801a5e4:	6833      	ldr	r3, [r6, #0]
 801a5e6:	1d1a      	adds	r2, r3, #4
 801a5e8:	6032      	str	r2, [r6, #0]
 801a5ea:	681e      	ldr	r6, [r3, #0]
 801a5ec:	6862      	ldr	r2, [r4, #4]
 801a5ee:	2100      	movs	r1, #0
 801a5f0:	4630      	mov	r0, r6
 801a5f2:	f7e5 fdf5 	bl	80001e0 <memchr>
 801a5f6:	b108      	cbz	r0, 801a5fc <_printf_i+0x1e4>
 801a5f8:	1b80      	subs	r0, r0, r6
 801a5fa:	6060      	str	r0, [r4, #4]
 801a5fc:	6863      	ldr	r3, [r4, #4]
 801a5fe:	6123      	str	r3, [r4, #16]
 801a600:	2300      	movs	r3, #0
 801a602:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a606:	e7aa      	b.n	801a55e <_printf_i+0x146>
 801a608:	6923      	ldr	r3, [r4, #16]
 801a60a:	4632      	mov	r2, r6
 801a60c:	4649      	mov	r1, r9
 801a60e:	4640      	mov	r0, r8
 801a610:	47d0      	blx	sl
 801a612:	3001      	adds	r0, #1
 801a614:	d0ad      	beq.n	801a572 <_printf_i+0x15a>
 801a616:	6823      	ldr	r3, [r4, #0]
 801a618:	079b      	lsls	r3, r3, #30
 801a61a:	d413      	bmi.n	801a644 <_printf_i+0x22c>
 801a61c:	68e0      	ldr	r0, [r4, #12]
 801a61e:	9b03      	ldr	r3, [sp, #12]
 801a620:	4298      	cmp	r0, r3
 801a622:	bfb8      	it	lt
 801a624:	4618      	movlt	r0, r3
 801a626:	e7a6      	b.n	801a576 <_printf_i+0x15e>
 801a628:	2301      	movs	r3, #1
 801a62a:	4632      	mov	r2, r6
 801a62c:	4649      	mov	r1, r9
 801a62e:	4640      	mov	r0, r8
 801a630:	47d0      	blx	sl
 801a632:	3001      	adds	r0, #1
 801a634:	d09d      	beq.n	801a572 <_printf_i+0x15a>
 801a636:	3501      	adds	r5, #1
 801a638:	68e3      	ldr	r3, [r4, #12]
 801a63a:	9903      	ldr	r1, [sp, #12]
 801a63c:	1a5b      	subs	r3, r3, r1
 801a63e:	42ab      	cmp	r3, r5
 801a640:	dcf2      	bgt.n	801a628 <_printf_i+0x210>
 801a642:	e7eb      	b.n	801a61c <_printf_i+0x204>
 801a644:	2500      	movs	r5, #0
 801a646:	f104 0619 	add.w	r6, r4, #25
 801a64a:	e7f5      	b.n	801a638 <_printf_i+0x220>
 801a64c:	0801f3f0 	.word	0x0801f3f0
 801a650:	0801f401 	.word	0x0801f401

0801a654 <__sflush_r>:
 801a654:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a65c:	0716      	lsls	r6, r2, #28
 801a65e:	4605      	mov	r5, r0
 801a660:	460c      	mov	r4, r1
 801a662:	d454      	bmi.n	801a70e <__sflush_r+0xba>
 801a664:	684b      	ldr	r3, [r1, #4]
 801a666:	2b00      	cmp	r3, #0
 801a668:	dc02      	bgt.n	801a670 <__sflush_r+0x1c>
 801a66a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	dd48      	ble.n	801a702 <__sflush_r+0xae>
 801a670:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a672:	2e00      	cmp	r6, #0
 801a674:	d045      	beq.n	801a702 <__sflush_r+0xae>
 801a676:	2300      	movs	r3, #0
 801a678:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a67c:	682f      	ldr	r7, [r5, #0]
 801a67e:	6a21      	ldr	r1, [r4, #32]
 801a680:	602b      	str	r3, [r5, #0]
 801a682:	d030      	beq.n	801a6e6 <__sflush_r+0x92>
 801a684:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a686:	89a3      	ldrh	r3, [r4, #12]
 801a688:	0759      	lsls	r1, r3, #29
 801a68a:	d505      	bpl.n	801a698 <__sflush_r+0x44>
 801a68c:	6863      	ldr	r3, [r4, #4]
 801a68e:	1ad2      	subs	r2, r2, r3
 801a690:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a692:	b10b      	cbz	r3, 801a698 <__sflush_r+0x44>
 801a694:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a696:	1ad2      	subs	r2, r2, r3
 801a698:	2300      	movs	r3, #0
 801a69a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a69c:	6a21      	ldr	r1, [r4, #32]
 801a69e:	4628      	mov	r0, r5
 801a6a0:	47b0      	blx	r6
 801a6a2:	1c43      	adds	r3, r0, #1
 801a6a4:	89a3      	ldrh	r3, [r4, #12]
 801a6a6:	d106      	bne.n	801a6b6 <__sflush_r+0x62>
 801a6a8:	6829      	ldr	r1, [r5, #0]
 801a6aa:	291d      	cmp	r1, #29
 801a6ac:	d82b      	bhi.n	801a706 <__sflush_r+0xb2>
 801a6ae:	4a2a      	ldr	r2, [pc, #168]	@ (801a758 <__sflush_r+0x104>)
 801a6b0:	40ca      	lsrs	r2, r1
 801a6b2:	07d6      	lsls	r6, r2, #31
 801a6b4:	d527      	bpl.n	801a706 <__sflush_r+0xb2>
 801a6b6:	2200      	movs	r2, #0
 801a6b8:	6062      	str	r2, [r4, #4]
 801a6ba:	04d9      	lsls	r1, r3, #19
 801a6bc:	6922      	ldr	r2, [r4, #16]
 801a6be:	6022      	str	r2, [r4, #0]
 801a6c0:	d504      	bpl.n	801a6cc <__sflush_r+0x78>
 801a6c2:	1c42      	adds	r2, r0, #1
 801a6c4:	d101      	bne.n	801a6ca <__sflush_r+0x76>
 801a6c6:	682b      	ldr	r3, [r5, #0]
 801a6c8:	b903      	cbnz	r3, 801a6cc <__sflush_r+0x78>
 801a6ca:	6560      	str	r0, [r4, #84]	@ 0x54
 801a6cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a6ce:	602f      	str	r7, [r5, #0]
 801a6d0:	b1b9      	cbz	r1, 801a702 <__sflush_r+0xae>
 801a6d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a6d6:	4299      	cmp	r1, r3
 801a6d8:	d002      	beq.n	801a6e0 <__sflush_r+0x8c>
 801a6da:	4628      	mov	r0, r5
 801a6dc:	f7ff fa94 	bl	8019c08 <_free_r>
 801a6e0:	2300      	movs	r3, #0
 801a6e2:	6363      	str	r3, [r4, #52]	@ 0x34
 801a6e4:	e00d      	b.n	801a702 <__sflush_r+0xae>
 801a6e6:	2301      	movs	r3, #1
 801a6e8:	4628      	mov	r0, r5
 801a6ea:	47b0      	blx	r6
 801a6ec:	4602      	mov	r2, r0
 801a6ee:	1c50      	adds	r0, r2, #1
 801a6f0:	d1c9      	bne.n	801a686 <__sflush_r+0x32>
 801a6f2:	682b      	ldr	r3, [r5, #0]
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	d0c6      	beq.n	801a686 <__sflush_r+0x32>
 801a6f8:	2b1d      	cmp	r3, #29
 801a6fa:	d001      	beq.n	801a700 <__sflush_r+0xac>
 801a6fc:	2b16      	cmp	r3, #22
 801a6fe:	d11e      	bne.n	801a73e <__sflush_r+0xea>
 801a700:	602f      	str	r7, [r5, #0]
 801a702:	2000      	movs	r0, #0
 801a704:	e022      	b.n	801a74c <__sflush_r+0xf8>
 801a706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a70a:	b21b      	sxth	r3, r3
 801a70c:	e01b      	b.n	801a746 <__sflush_r+0xf2>
 801a70e:	690f      	ldr	r7, [r1, #16]
 801a710:	2f00      	cmp	r7, #0
 801a712:	d0f6      	beq.n	801a702 <__sflush_r+0xae>
 801a714:	0793      	lsls	r3, r2, #30
 801a716:	680e      	ldr	r6, [r1, #0]
 801a718:	bf08      	it	eq
 801a71a:	694b      	ldreq	r3, [r1, #20]
 801a71c:	600f      	str	r7, [r1, #0]
 801a71e:	bf18      	it	ne
 801a720:	2300      	movne	r3, #0
 801a722:	eba6 0807 	sub.w	r8, r6, r7
 801a726:	608b      	str	r3, [r1, #8]
 801a728:	f1b8 0f00 	cmp.w	r8, #0
 801a72c:	dde9      	ble.n	801a702 <__sflush_r+0xae>
 801a72e:	6a21      	ldr	r1, [r4, #32]
 801a730:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a732:	4643      	mov	r3, r8
 801a734:	463a      	mov	r2, r7
 801a736:	4628      	mov	r0, r5
 801a738:	47b0      	blx	r6
 801a73a:	2800      	cmp	r0, #0
 801a73c:	dc08      	bgt.n	801a750 <__sflush_r+0xfc>
 801a73e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a746:	81a3      	strh	r3, [r4, #12]
 801a748:	f04f 30ff 	mov.w	r0, #4294967295
 801a74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a750:	4407      	add	r7, r0
 801a752:	eba8 0800 	sub.w	r8, r8, r0
 801a756:	e7e7      	b.n	801a728 <__sflush_r+0xd4>
 801a758:	20400001 	.word	0x20400001

0801a75c <_fflush_r>:
 801a75c:	b538      	push	{r3, r4, r5, lr}
 801a75e:	690b      	ldr	r3, [r1, #16]
 801a760:	4605      	mov	r5, r0
 801a762:	460c      	mov	r4, r1
 801a764:	b913      	cbnz	r3, 801a76c <_fflush_r+0x10>
 801a766:	2500      	movs	r5, #0
 801a768:	4628      	mov	r0, r5
 801a76a:	bd38      	pop	{r3, r4, r5, pc}
 801a76c:	b118      	cbz	r0, 801a776 <_fflush_r+0x1a>
 801a76e:	6a03      	ldr	r3, [r0, #32]
 801a770:	b90b      	cbnz	r3, 801a776 <_fflush_r+0x1a>
 801a772:	f7fe ff41 	bl	80195f8 <__sinit>
 801a776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d0f3      	beq.n	801a766 <_fflush_r+0xa>
 801a77e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a780:	07d0      	lsls	r0, r2, #31
 801a782:	d404      	bmi.n	801a78e <_fflush_r+0x32>
 801a784:	0599      	lsls	r1, r3, #22
 801a786:	d402      	bmi.n	801a78e <_fflush_r+0x32>
 801a788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a78a:	f7ff fa0e 	bl	8019baa <__retarget_lock_acquire_recursive>
 801a78e:	4628      	mov	r0, r5
 801a790:	4621      	mov	r1, r4
 801a792:	f7ff ff5f 	bl	801a654 <__sflush_r>
 801a796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a798:	07da      	lsls	r2, r3, #31
 801a79a:	4605      	mov	r5, r0
 801a79c:	d4e4      	bmi.n	801a768 <_fflush_r+0xc>
 801a79e:	89a3      	ldrh	r3, [r4, #12]
 801a7a0:	059b      	lsls	r3, r3, #22
 801a7a2:	d4e1      	bmi.n	801a768 <_fflush_r+0xc>
 801a7a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a7a6:	f7ff fa01 	bl	8019bac <__retarget_lock_release_recursive>
 801a7aa:	e7dd      	b.n	801a768 <_fflush_r+0xc>

0801a7ac <fiprintf>:
 801a7ac:	b40e      	push	{r1, r2, r3}
 801a7ae:	b503      	push	{r0, r1, lr}
 801a7b0:	4601      	mov	r1, r0
 801a7b2:	ab03      	add	r3, sp, #12
 801a7b4:	4805      	ldr	r0, [pc, #20]	@ (801a7cc <fiprintf+0x20>)
 801a7b6:	f853 2b04 	ldr.w	r2, [r3], #4
 801a7ba:	6800      	ldr	r0, [r0, #0]
 801a7bc:	9301      	str	r3, [sp, #4]
 801a7be:	f7ff fca5 	bl	801a10c <_vfiprintf_r>
 801a7c2:	b002      	add	sp, #8
 801a7c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a7c8:	b003      	add	sp, #12
 801a7ca:	4770      	bx	lr
 801a7cc:	2000012c 	.word	0x2000012c

0801a7d0 <__swhatbuf_r>:
 801a7d0:	b570      	push	{r4, r5, r6, lr}
 801a7d2:	460c      	mov	r4, r1
 801a7d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a7d8:	2900      	cmp	r1, #0
 801a7da:	b096      	sub	sp, #88	@ 0x58
 801a7dc:	4615      	mov	r5, r2
 801a7de:	461e      	mov	r6, r3
 801a7e0:	da0d      	bge.n	801a7fe <__swhatbuf_r+0x2e>
 801a7e2:	89a3      	ldrh	r3, [r4, #12]
 801a7e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a7e8:	f04f 0100 	mov.w	r1, #0
 801a7ec:	bf14      	ite	ne
 801a7ee:	2340      	movne	r3, #64	@ 0x40
 801a7f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a7f4:	2000      	movs	r0, #0
 801a7f6:	6031      	str	r1, [r6, #0]
 801a7f8:	602b      	str	r3, [r5, #0]
 801a7fa:	b016      	add	sp, #88	@ 0x58
 801a7fc:	bd70      	pop	{r4, r5, r6, pc}
 801a7fe:	466a      	mov	r2, sp
 801a800:	f000 f87c 	bl	801a8fc <_fstat_r>
 801a804:	2800      	cmp	r0, #0
 801a806:	dbec      	blt.n	801a7e2 <__swhatbuf_r+0x12>
 801a808:	9901      	ldr	r1, [sp, #4]
 801a80a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a80e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a812:	4259      	negs	r1, r3
 801a814:	4159      	adcs	r1, r3
 801a816:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a81a:	e7eb      	b.n	801a7f4 <__swhatbuf_r+0x24>

0801a81c <__smakebuf_r>:
 801a81c:	898b      	ldrh	r3, [r1, #12]
 801a81e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a820:	079d      	lsls	r5, r3, #30
 801a822:	4606      	mov	r6, r0
 801a824:	460c      	mov	r4, r1
 801a826:	d507      	bpl.n	801a838 <__smakebuf_r+0x1c>
 801a828:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a82c:	6023      	str	r3, [r4, #0]
 801a82e:	6123      	str	r3, [r4, #16]
 801a830:	2301      	movs	r3, #1
 801a832:	6163      	str	r3, [r4, #20]
 801a834:	b003      	add	sp, #12
 801a836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a838:	ab01      	add	r3, sp, #4
 801a83a:	466a      	mov	r2, sp
 801a83c:	f7ff ffc8 	bl	801a7d0 <__swhatbuf_r>
 801a840:	9f00      	ldr	r7, [sp, #0]
 801a842:	4605      	mov	r5, r0
 801a844:	4639      	mov	r1, r7
 801a846:	4630      	mov	r0, r6
 801a848:	f7ff fa52 	bl	8019cf0 <_malloc_r>
 801a84c:	b948      	cbnz	r0, 801a862 <__smakebuf_r+0x46>
 801a84e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a852:	059a      	lsls	r2, r3, #22
 801a854:	d4ee      	bmi.n	801a834 <__smakebuf_r+0x18>
 801a856:	f023 0303 	bic.w	r3, r3, #3
 801a85a:	f043 0302 	orr.w	r3, r3, #2
 801a85e:	81a3      	strh	r3, [r4, #12]
 801a860:	e7e2      	b.n	801a828 <__smakebuf_r+0xc>
 801a862:	89a3      	ldrh	r3, [r4, #12]
 801a864:	6020      	str	r0, [r4, #0]
 801a866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a86a:	81a3      	strh	r3, [r4, #12]
 801a86c:	9b01      	ldr	r3, [sp, #4]
 801a86e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a872:	b15b      	cbz	r3, 801a88c <__smakebuf_r+0x70>
 801a874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a878:	4630      	mov	r0, r6
 801a87a:	f000 f851 	bl	801a920 <_isatty_r>
 801a87e:	b128      	cbz	r0, 801a88c <__smakebuf_r+0x70>
 801a880:	89a3      	ldrh	r3, [r4, #12]
 801a882:	f023 0303 	bic.w	r3, r3, #3
 801a886:	f043 0301 	orr.w	r3, r3, #1
 801a88a:	81a3      	strh	r3, [r4, #12]
 801a88c:	89a3      	ldrh	r3, [r4, #12]
 801a88e:	431d      	orrs	r5, r3
 801a890:	81a5      	strh	r5, [r4, #12]
 801a892:	e7cf      	b.n	801a834 <__smakebuf_r+0x18>

0801a894 <_putc_r>:
 801a894:	b570      	push	{r4, r5, r6, lr}
 801a896:	460d      	mov	r5, r1
 801a898:	4614      	mov	r4, r2
 801a89a:	4606      	mov	r6, r0
 801a89c:	b118      	cbz	r0, 801a8a6 <_putc_r+0x12>
 801a89e:	6a03      	ldr	r3, [r0, #32]
 801a8a0:	b90b      	cbnz	r3, 801a8a6 <_putc_r+0x12>
 801a8a2:	f7fe fea9 	bl	80195f8 <__sinit>
 801a8a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a8a8:	07d8      	lsls	r0, r3, #31
 801a8aa:	d405      	bmi.n	801a8b8 <_putc_r+0x24>
 801a8ac:	89a3      	ldrh	r3, [r4, #12]
 801a8ae:	0599      	lsls	r1, r3, #22
 801a8b0:	d402      	bmi.n	801a8b8 <_putc_r+0x24>
 801a8b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a8b4:	f7ff f979 	bl	8019baa <__retarget_lock_acquire_recursive>
 801a8b8:	68a3      	ldr	r3, [r4, #8]
 801a8ba:	3b01      	subs	r3, #1
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	60a3      	str	r3, [r4, #8]
 801a8c0:	da05      	bge.n	801a8ce <_putc_r+0x3a>
 801a8c2:	69a2      	ldr	r2, [r4, #24]
 801a8c4:	4293      	cmp	r3, r2
 801a8c6:	db12      	blt.n	801a8ee <_putc_r+0x5a>
 801a8c8:	b2eb      	uxtb	r3, r5
 801a8ca:	2b0a      	cmp	r3, #10
 801a8cc:	d00f      	beq.n	801a8ee <_putc_r+0x5a>
 801a8ce:	6823      	ldr	r3, [r4, #0]
 801a8d0:	1c5a      	adds	r2, r3, #1
 801a8d2:	6022      	str	r2, [r4, #0]
 801a8d4:	701d      	strb	r5, [r3, #0]
 801a8d6:	b2ed      	uxtb	r5, r5
 801a8d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a8da:	07da      	lsls	r2, r3, #31
 801a8dc:	d405      	bmi.n	801a8ea <_putc_r+0x56>
 801a8de:	89a3      	ldrh	r3, [r4, #12]
 801a8e0:	059b      	lsls	r3, r3, #22
 801a8e2:	d402      	bmi.n	801a8ea <_putc_r+0x56>
 801a8e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a8e6:	f7ff f961 	bl	8019bac <__retarget_lock_release_recursive>
 801a8ea:	4628      	mov	r0, r5
 801a8ec:	bd70      	pop	{r4, r5, r6, pc}
 801a8ee:	4629      	mov	r1, r5
 801a8f0:	4622      	mov	r2, r4
 801a8f2:	4630      	mov	r0, r6
 801a8f4:	f7fe ffc9 	bl	801988a <__swbuf_r>
 801a8f8:	4605      	mov	r5, r0
 801a8fa:	e7ed      	b.n	801a8d8 <_putc_r+0x44>

0801a8fc <_fstat_r>:
 801a8fc:	b538      	push	{r3, r4, r5, lr}
 801a8fe:	4d07      	ldr	r5, [pc, #28]	@ (801a91c <_fstat_r+0x20>)
 801a900:	2300      	movs	r3, #0
 801a902:	4604      	mov	r4, r0
 801a904:	4608      	mov	r0, r1
 801a906:	4611      	mov	r1, r2
 801a908:	602b      	str	r3, [r5, #0]
 801a90a:	f7e6 fe7b 	bl	8001604 <_fstat>
 801a90e:	1c43      	adds	r3, r0, #1
 801a910:	d102      	bne.n	801a918 <_fstat_r+0x1c>
 801a912:	682b      	ldr	r3, [r5, #0]
 801a914:	b103      	cbz	r3, 801a918 <_fstat_r+0x1c>
 801a916:	6023      	str	r3, [r4, #0]
 801a918:	bd38      	pop	{r3, r4, r5, pc}
 801a91a:	bf00      	nop
 801a91c:	200109fc 	.word	0x200109fc

0801a920 <_isatty_r>:
 801a920:	b538      	push	{r3, r4, r5, lr}
 801a922:	4d06      	ldr	r5, [pc, #24]	@ (801a93c <_isatty_r+0x1c>)
 801a924:	2300      	movs	r3, #0
 801a926:	4604      	mov	r4, r0
 801a928:	4608      	mov	r0, r1
 801a92a:	602b      	str	r3, [r5, #0]
 801a92c:	f7e6 fe7a 	bl	8001624 <_isatty>
 801a930:	1c43      	adds	r3, r0, #1
 801a932:	d102      	bne.n	801a93a <_isatty_r+0x1a>
 801a934:	682b      	ldr	r3, [r5, #0]
 801a936:	b103      	cbz	r3, 801a93a <_isatty_r+0x1a>
 801a938:	6023      	str	r3, [r4, #0]
 801a93a:	bd38      	pop	{r3, r4, r5, pc}
 801a93c:	200109fc 	.word	0x200109fc

0801a940 <_sbrk_r>:
 801a940:	b538      	push	{r3, r4, r5, lr}
 801a942:	4d06      	ldr	r5, [pc, #24]	@ (801a95c <_sbrk_r+0x1c>)
 801a944:	2300      	movs	r3, #0
 801a946:	4604      	mov	r4, r0
 801a948:	4608      	mov	r0, r1
 801a94a:	602b      	str	r3, [r5, #0]
 801a94c:	f7e6 fe82 	bl	8001654 <_sbrk>
 801a950:	1c43      	adds	r3, r0, #1
 801a952:	d102      	bne.n	801a95a <_sbrk_r+0x1a>
 801a954:	682b      	ldr	r3, [r5, #0]
 801a956:	b103      	cbz	r3, 801a95a <_sbrk_r+0x1a>
 801a958:	6023      	str	r3, [r4, #0]
 801a95a:	bd38      	pop	{r3, r4, r5, pc}
 801a95c:	200109fc 	.word	0x200109fc

0801a960 <abort>:
 801a960:	b508      	push	{r3, lr}
 801a962:	2006      	movs	r0, #6
 801a964:	f000 f85a 	bl	801aa1c <raise>
 801a968:	2001      	movs	r0, #1
 801a96a:	f7e6 fdfb 	bl	8001564 <_exit>

0801a96e <_realloc_r>:
 801a96e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a972:	4607      	mov	r7, r0
 801a974:	4614      	mov	r4, r2
 801a976:	460d      	mov	r5, r1
 801a978:	b921      	cbnz	r1, 801a984 <_realloc_r+0x16>
 801a97a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a97e:	4611      	mov	r1, r2
 801a980:	f7ff b9b6 	b.w	8019cf0 <_malloc_r>
 801a984:	b92a      	cbnz	r2, 801a992 <_realloc_r+0x24>
 801a986:	f7ff f93f 	bl	8019c08 <_free_r>
 801a98a:	4625      	mov	r5, r4
 801a98c:	4628      	mov	r0, r5
 801a98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a992:	f000 f85f 	bl	801aa54 <_malloc_usable_size_r>
 801a996:	4284      	cmp	r4, r0
 801a998:	4606      	mov	r6, r0
 801a99a:	d802      	bhi.n	801a9a2 <_realloc_r+0x34>
 801a99c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a9a0:	d8f4      	bhi.n	801a98c <_realloc_r+0x1e>
 801a9a2:	4621      	mov	r1, r4
 801a9a4:	4638      	mov	r0, r7
 801a9a6:	f7ff f9a3 	bl	8019cf0 <_malloc_r>
 801a9aa:	4680      	mov	r8, r0
 801a9ac:	b908      	cbnz	r0, 801a9b2 <_realloc_r+0x44>
 801a9ae:	4645      	mov	r5, r8
 801a9b0:	e7ec      	b.n	801a98c <_realloc_r+0x1e>
 801a9b2:	42b4      	cmp	r4, r6
 801a9b4:	4622      	mov	r2, r4
 801a9b6:	4629      	mov	r1, r5
 801a9b8:	bf28      	it	cs
 801a9ba:	4632      	movcs	r2, r6
 801a9bc:	f7ff f8f7 	bl	8019bae <memcpy>
 801a9c0:	4629      	mov	r1, r5
 801a9c2:	4638      	mov	r0, r7
 801a9c4:	f7ff f920 	bl	8019c08 <_free_r>
 801a9c8:	e7f1      	b.n	801a9ae <_realloc_r+0x40>

0801a9ca <_raise_r>:
 801a9ca:	291f      	cmp	r1, #31
 801a9cc:	b538      	push	{r3, r4, r5, lr}
 801a9ce:	4605      	mov	r5, r0
 801a9d0:	460c      	mov	r4, r1
 801a9d2:	d904      	bls.n	801a9de <_raise_r+0x14>
 801a9d4:	2316      	movs	r3, #22
 801a9d6:	6003      	str	r3, [r0, #0]
 801a9d8:	f04f 30ff 	mov.w	r0, #4294967295
 801a9dc:	bd38      	pop	{r3, r4, r5, pc}
 801a9de:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a9e0:	b112      	cbz	r2, 801a9e8 <_raise_r+0x1e>
 801a9e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a9e6:	b94b      	cbnz	r3, 801a9fc <_raise_r+0x32>
 801a9e8:	4628      	mov	r0, r5
 801a9ea:	f000 f831 	bl	801aa50 <_getpid_r>
 801a9ee:	4622      	mov	r2, r4
 801a9f0:	4601      	mov	r1, r0
 801a9f2:	4628      	mov	r0, r5
 801a9f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a9f8:	f000 b818 	b.w	801aa2c <_kill_r>
 801a9fc:	2b01      	cmp	r3, #1
 801a9fe:	d00a      	beq.n	801aa16 <_raise_r+0x4c>
 801aa00:	1c59      	adds	r1, r3, #1
 801aa02:	d103      	bne.n	801aa0c <_raise_r+0x42>
 801aa04:	2316      	movs	r3, #22
 801aa06:	6003      	str	r3, [r0, #0]
 801aa08:	2001      	movs	r0, #1
 801aa0a:	e7e7      	b.n	801a9dc <_raise_r+0x12>
 801aa0c:	2100      	movs	r1, #0
 801aa0e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801aa12:	4620      	mov	r0, r4
 801aa14:	4798      	blx	r3
 801aa16:	2000      	movs	r0, #0
 801aa18:	e7e0      	b.n	801a9dc <_raise_r+0x12>
	...

0801aa1c <raise>:
 801aa1c:	4b02      	ldr	r3, [pc, #8]	@ (801aa28 <raise+0xc>)
 801aa1e:	4601      	mov	r1, r0
 801aa20:	6818      	ldr	r0, [r3, #0]
 801aa22:	f7ff bfd2 	b.w	801a9ca <_raise_r>
 801aa26:	bf00      	nop
 801aa28:	2000012c 	.word	0x2000012c

0801aa2c <_kill_r>:
 801aa2c:	b538      	push	{r3, r4, r5, lr}
 801aa2e:	4d07      	ldr	r5, [pc, #28]	@ (801aa4c <_kill_r+0x20>)
 801aa30:	2300      	movs	r3, #0
 801aa32:	4604      	mov	r4, r0
 801aa34:	4608      	mov	r0, r1
 801aa36:	4611      	mov	r1, r2
 801aa38:	602b      	str	r3, [r5, #0]
 801aa3a:	f7e6 fd81 	bl	8001540 <_kill>
 801aa3e:	1c43      	adds	r3, r0, #1
 801aa40:	d102      	bne.n	801aa48 <_kill_r+0x1c>
 801aa42:	682b      	ldr	r3, [r5, #0]
 801aa44:	b103      	cbz	r3, 801aa48 <_kill_r+0x1c>
 801aa46:	6023      	str	r3, [r4, #0]
 801aa48:	bd38      	pop	{r3, r4, r5, pc}
 801aa4a:	bf00      	nop
 801aa4c:	200109fc 	.word	0x200109fc

0801aa50 <_getpid_r>:
 801aa50:	f7e6 bd6e 	b.w	8001530 <_getpid>

0801aa54 <_malloc_usable_size_r>:
 801aa54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aa58:	1f18      	subs	r0, r3, #4
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	bfbc      	itt	lt
 801aa5e:	580b      	ldrlt	r3, [r1, r0]
 801aa60:	18c0      	addlt	r0, r0, r3
 801aa62:	4770      	bx	lr

0801aa64 <_init>:
 801aa64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa66:	bf00      	nop
 801aa68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aa6a:	bc08      	pop	{r3}
 801aa6c:	469e      	mov	lr, r3
 801aa6e:	4770      	bx	lr

0801aa70 <_fini>:
 801aa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa72:	bf00      	nop
 801aa74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aa76:	bc08      	pop	{r3}
 801aa78:	469e      	mov	lr, r3
 801aa7a:	4770      	bx	lr

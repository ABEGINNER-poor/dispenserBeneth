
dispenserBeneth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ca18  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000044d8  0801cba8  0801cba8  0001dba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021080  08021080  00023168  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08021080  08021080  00022080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021088  08021088  00023168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021088  08021088  00022088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802108c  0802108c  0002208c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  08021090  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00023168  2**0
                  CONTENTS
 10 .bss          0000e5e4  20000168  20000168  00023168  2**2
                  ALLOC
 11 .eth_desc     00000014  2000e74c  2000e74c  00023168  2**0
                  ALLOC
 12 .eth_buf      00000000  2000e760  2000e760  00023168  2**0
                  CONTENTS
 13 ._user_heap_stack 00000600  2000e760  2000e760  00023168  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00023168  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003af79  00000000  00000000  00023198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00009d5e  00000000  00000000  0005e111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002b28  00000000  00000000  00067e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000021be  00000000  00000000  0006a998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000371b0  00000000  00000000  0006cb56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000451d5  00000000  00000000  000a3d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f6d60  00000000  00000000  000e8edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001dfc3b  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000bbac  00000000  00000000  001dfc80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006b  00000000  00000000  001eb82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801cb90 	.word	0x0801cb90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	0801cb90 	.word	0x0801cb90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <app_business_init>:

/**
  * @brief  初始化应用层业务逻辑
  * @retval None
  */
void app_business_init(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
    // 初始化寄存器默认值
    holding_regs[REG_CURRENT_ANGLE_LOW_START] = 500;     // 40024 当前角度1低位默认500
 80005b0:	4b29      	ldr	r3, [pc, #164]	@ (8000658 <app_business_init+0xac>)
 80005b2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005b6:	861a      	strh	r2, [r3, #48]	@ 0x30
    holding_regs[REG_CURRENT_ANGLE_LOW_START+1] = 500;   // 40025 当前角度2低位默认500
 80005b8:	4b27      	ldr	r3, [pc, #156]	@ (8000658 <app_business_init+0xac>)
 80005ba:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005be:	865a      	strh	r2, [r3, #50]	@ 0x32
    holding_regs[REG_CURRENT_ANGLE_LOW_START+2] = 500;   // 40026 当前角度3低位默认500
 80005c0:	4b25      	ldr	r3, [pc, #148]	@ (8000658 <app_business_init+0xac>)
 80005c2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005c6:	869a      	strh	r2, [r3, #52]	@ 0x34
    holding_regs[REG_CURRENT_ANGLE_LOW_START+3] = 500;   // 40027 当前角度4低位默认500
 80005c8:	4b23      	ldr	r3, [pc, #140]	@ (8000658 <app_business_init+0xac>)
 80005ca:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    holding_regs[REG_CURRENT_ANGLE_LOW_START+4] = 500;   // 40028 当前角度5低位默认500
 80005d0:	4b21      	ldr	r3, [pc, #132]	@ (8000658 <app_business_init+0xac>)
 80005d2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005d6:	871a      	strh	r2, [r3, #56]	@ 0x38
    holding_regs[REG_CURRENT_ANGLE_LOW_START+5] = 500;   // 40029 当前角度6低位默认500
 80005d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000658 <app_business_init+0xac>)
 80005da:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005de:	875a      	strh	r2, [r3, #58]	@ 0x3a
    
    // 初始化泵相关寄存器
    holding_regs[REG_PUMP1_STATUS] = 1;                   // 40044 泵1状态：1=不忙
 80005e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000658 <app_business_init+0xac>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    holding_regs[REG_PUMP1_CURRENT_POSITION] = 0;        // 40045 泵1当前位置：0
 80005e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000658 <app_business_init+0xac>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    holding_regs[REG_PUMP2_STATUS] = 1;                   // 40049 泵2状态：1=不忙
 80005f0:	4b19      	ldr	r3, [pc, #100]	@ (8000658 <app_business_init+0xac>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    holding_regs[REG_PUMP2_CURRENT_POSITION] = 0;        // 40050 泵2当前位置：0
 80005f8:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <app_business_init+0xac>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    
    // 初始化业务状态变量
    last_rotation_trigger = 0;
 8000600:	4b16      	ldr	r3, [pc, #88]	@ (800065c <app_business_init+0xb0>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
    last_read_trigger = 0;
 8000606:	4b16      	ldr	r3, [pc, #88]	@ (8000660 <app_business_init+0xb4>)
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
    last_weight_control = 0;
 800060c:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <app_business_init+0xb8>)
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
    last_pump1_init_trigger = 0;
 8000612:	4b15      	ldr	r3, [pc, #84]	@ (8000668 <app_business_init+0xbc>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
    last_pump1_control_trigger = 0;
 8000618:	4b14      	ldr	r3, [pc, #80]	@ (800066c <app_business_init+0xc0>)
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
    last_pump2_init_trigger = 0;
 800061e:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <app_business_init+0xc4>)
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
    last_pump2_control_trigger = 0;
 8000624:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <app_business_init+0xc8>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
    
    // 初始化泵状态变量
    pump1_busy = 0;
 800062a:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <app_business_init+0xcc>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
    pump2_busy = 0;
 8000630:	4b12      	ldr	r3, [pc, #72]	@ (800067c <app_business_init+0xd0>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
    pump1_current_pos = 0;
 8000636:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <app_business_init+0xd4>)
 8000638:	2200      	movs	r2, #0
 800063a:	801a      	strh	r2, [r3, #0]
    pump2_current_pos = 0;
 800063c:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <app_business_init+0xd8>)
 800063e:	2200      	movs	r2, #0
 8000640:	801a      	strh	r2, [r3, #0]
    pump1_move_start_time = 0;
 8000642:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <app_business_init+0xdc>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
    pump2_move_start_time = 0;
 8000648:	4b10      	ldr	r3, [pc, #64]	@ (800068c <app_business_init+0xe0>)
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
    
    cdc_debug_print("Business logic initialized");
 800064e:	4810      	ldr	r0, [pc, #64]	@ (8000690 <app_business_init+0xe4>)
 8000650:	f000 f82c 	bl	80006ac <cdc_debug_print>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000574 	.word	0x20000574
 800065c:	20000184 	.word	0x20000184
 8000660:	20000188 	.word	0x20000188
 8000664:	2000018c 	.word	0x2000018c
 8000668:	20000190 	.word	0x20000190
 800066c:	20000194 	.word	0x20000194
 8000670:	20000198 	.word	0x20000198
 8000674:	2000019c 	.word	0x2000019c
 8000678:	20000220 	.word	0x20000220
 800067c:	20000221 	.word	0x20000221
 8000680:	20000222 	.word	0x20000222
 8000684:	20000224 	.word	0x20000224
 8000688:	20000228 	.word	0x20000228
 800068c:	2000022c 	.word	0x2000022c
 8000690:	0801cba8 	.word	0x0801cba8

08000694 <app_business_process>:

/**
  * @brief  主业务逻辑处理函数 - 每100ms调用一次
  * @retval None
  */
void app_business_process(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
    // 1. 处理舵机相关命令
    process_servo_commands();
 8000698:	f000 f828 	bl	80006ec <process_servo_commands>
    
    // 2. 处理称重相关命令
    process_weight_commands();
 800069c:	f000 f88e 	bl	80007bc <process_weight_commands>
    
    // 3. 处理泵相关命令
    process_pump_commands();
 80006a0:	f000 f8b2 	bl	8000808 <process_pump_commands>
    
    // 4. 更新传感器数据 (只读寄存器)
    update_sensor_data();
 80006a4:	f000 fa00 	bl	8000aa8 <update_sensor_data>
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <cdc_debug_print>:
/**
  * @brief  调试信息输出函数
  * @param  message: 要输出的调试信息
  * @retval None
  */
static void cdc_debug_print(const char* message) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    int len = snprintf(debug_buf, sizeof(debug_buf), "[BUSINESS] %s\r\n", message);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a0b      	ldr	r2, [pc, #44]	@ (80006e4 <cdc_debug_print+0x38>)
 80006b8:	2180      	movs	r1, #128	@ 0x80
 80006ba:	480b      	ldr	r0, [pc, #44]	@ (80006e8 <cdc_debug_print+0x3c>)
 80006bc:	f01b f920 	bl	801b900 <sniprintf>
 80006c0:	60f8      	str	r0, [r7, #12]
    if (len > 0 && len < sizeof(debug_buf)) {
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	dd08      	ble.n	80006da <cdc_debug_print+0x2e>
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80006cc:	d805      	bhi.n	80006da <cdc_debug_print+0x2e>
        CDC_Transmit_FS((uint8_t*)debug_buf, len);
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	4619      	mov	r1, r3
 80006d4:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <cdc_debug_print+0x3c>)
 80006d6:	f01a fba5 	bl	801ae24 <CDC_Transmit_FS>
    }
}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	0801cbc4 	.word	0x0801cbc4
 80006e8:	200001a0 	.word	0x200001a0

080006ec <process_servo_commands>:

/**
  * @brief  处理舵机相关命令
  * @retval None
  */
static void process_servo_commands(void) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
    // 检查转动触发 (40036)
    if (holding_regs[REG_ROTATION_TRIGGER] == 1 && last_rotation_trigger != 1) {
 80006f2:	4b2b      	ldr	r3, [pc, #172]	@ (80007a0 <process_servo_commands+0xb4>)
 80006f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d12b      	bne.n	8000754 <process_servo_commands+0x68>
 80006fc:	4b29      	ldr	r3, [pc, #164]	@ (80007a4 <process_servo_commands+0xb8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d027      	beq.n	8000754 <process_servo_commands+0x68>
        cdc_debug_print("Servo rotation triggered");
 8000704:	4828      	ldr	r0, [pc, #160]	@ (80007a8 <process_servo_commands+0xbc>)
 8000706:	f7ff ffd1 	bl	80006ac <cdc_debug_print>
        
        // 获取转动时间 (40010-40011)
        uint32_t rotation_time = (holding_regs[REG_ROTATION_TIME_HIGH] << 16) | holding_regs[REG_ROTATION_TIME_LOW];
 800070a:	4b25      	ldr	r3, [pc, #148]	@ (80007a0 <process_servo_commands+0xb4>)
 800070c:	8adb      	ldrh	r3, [r3, #22]
 800070e:	041b      	lsls	r3, r3, #16
 8000710:	4a23      	ldr	r2, [pc, #140]	@ (80007a0 <process_servo_commands+0xb4>)
 8000712:	8a92      	ldrh	r2, [r2, #20]
 8000714:	4313      	orrs	r3, r2
 8000716:	613b      	str	r3, [r7, #16]
        
        // 获取目标角度 (40012-40023)
        uint16_t target_angles[6];
        for (int i = 0; i < 6; i++) {
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	e00d      	b.n	800073a <process_servo_commands+0x4e>
            target_angles[i] = (holding_regs[REG_TARGET_ANGLE_HIGH_START + i] << 16) | 
                              holding_regs[REG_TARGET_ANGLE_LOW_START + i];
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	330c      	adds	r3, #12
 8000722:	4a1f      	ldr	r2, [pc, #124]	@ (80007a0 <process_servo_commands+0xb4>)
 8000724:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
            target_angles[i] = (holding_regs[REG_TARGET_ANGLE_HIGH_START + i] << 16) | 
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	3318      	adds	r3, #24
 800072e:	443b      	add	r3, r7
 8000730:	f823 2c14 	strh.w	r2, [r3, #-20]
        for (int i = 0; i < 6; i++) {
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	3301      	adds	r3, #1
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	2b05      	cmp	r3, #5
 800073e:	ddee      	ble.n	800071e <process_servo_commands+0x32>
            bus_servo_set_position(servo_id, target_angles[servo_id-1], rotation_time);
        }
        */
        
        // 立即置状态为2 (执行中)
        holding_regs[REG_ROTATION_TRIGGER] = 2;
 8000740:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <process_servo_commands+0xb4>)
 8000742:	2202      	movs	r2, #2
 8000744:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        last_rotation_trigger = 2;
 8000748:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <process_servo_commands+0xb8>)
 800074a:	2202      	movs	r2, #2
 800074c:	601a      	str	r2, [r3, #0]
        
        cdc_debug_print("Servo rotation command sent");
 800074e:	4817      	ldr	r0, [pc, #92]	@ (80007ac <process_servo_commands+0xc0>)
 8000750:	f7ff ffac 	bl	80006ac <cdc_debug_print>
    }
    
    // 检查读取触发 (40037)
    if (holding_regs[REG_READ_TRIGGER] == 1 && last_read_trigger != 1) {
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <process_servo_commands+0xb4>)
 8000756:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800075a:	2b01      	cmp	r3, #1
 800075c:	d110      	bne.n	8000780 <process_servo_commands+0x94>
 800075e:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <process_servo_commands+0xc4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d00c      	beq.n	8000780 <process_servo_commands+0x94>
        cdc_debug_print("Servo read triggered");
 8000766:	4813      	ldr	r0, [pc, #76]	@ (80007b4 <process_servo_commands+0xc8>)
 8000768:	f7ff ffa0 	bl	80006ac <cdc_debug_print>
            holding_regs[REG_CURRENT_ANGLE_HIGH_START + servo_id - 1] = (current_pos >> 16) & 0xFFFF;
        }
        */
        
        // 读取完成后置状态为2
        holding_regs[REG_READ_TRIGGER] = 2;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <process_servo_commands+0xb4>)
 800076e:	2202      	movs	r2, #2
 8000770:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
        last_read_trigger = 2;
 8000774:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <process_servo_commands+0xc4>)
 8000776:	2202      	movs	r2, #2
 8000778:	601a      	str	r2, [r3, #0]
        
        cdc_debug_print("Servo positions read");
 800077a:	480f      	ldr	r0, [pc, #60]	@ (80007b8 <process_servo_commands+0xcc>)
 800077c:	f7ff ff96 	bl	80006ac <cdc_debug_print>
    }
    
    // 更新上次状态
    last_rotation_trigger = holding_regs[REG_ROTATION_TRIGGER];
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <process_servo_commands+0xb4>)
 8000782:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8000786:	461a      	mov	r2, r3
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <process_servo_commands+0xb8>)
 800078a:	601a      	str	r2, [r3, #0]
    last_read_trigger = holding_regs[REG_READ_TRIGGER];
 800078c:	4b04      	ldr	r3, [pc, #16]	@ (80007a0 <process_servo_commands+0xb4>)
 800078e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8000792:	461a      	mov	r2, r3
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <process_servo_commands+0xc4>)
 8000796:	601a      	str	r2, [r3, #0]
}
 8000798:	bf00      	nop
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000574 	.word	0x20000574
 80007a4:	20000184 	.word	0x20000184
 80007a8:	0801cbd4 	.word	0x0801cbd4
 80007ac:	0801cbf0 	.word	0x0801cbf0
 80007b0:	20000188 	.word	0x20000188
 80007b4:	0801cc0c 	.word	0x0801cc0c
 80007b8:	0801cc24 	.word	0x0801cc24

080007bc <process_weight_commands>:

/**
  * @brief  处理称重相关命令
  * @retval None
  */
static void process_weight_commands(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
    // 检查称重控制位 (40040)
    if (holding_regs[REG_WEIGHT_CONTROL] == 1 && last_weight_control != 1) {
 80007c0:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <process_weight_commands+0x3c>)
 80007c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d10d      	bne.n	80007e6 <process_weight_commands+0x2a>
 80007ca:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <process_weight_commands+0x40>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d009      	beq.n	80007e6 <process_weight_commands+0x2a>
        cdc_debug_print("Weight measurement started");
 80007d2:	480b      	ldr	r0, [pc, #44]	@ (8000800 <process_weight_commands+0x44>)
 80007d4:	f7ff ff6a 	bl	80006ac <cdc_debug_print>
        
        // 置为忙状态
        holding_regs[REG_WEIGHT_CONTROL] = 2;
 80007d8:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <process_weight_commands+0x3c>)
 80007da:	2202      	movs	r2, #2
 80007dc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
        
        // 4. 称重完成，置状态为3
        holding_regs[REG_WEIGHT_CONTROL] = 3;
        */
        
        cdc_debug_print("Weight measurement in progress");
 80007e0:	4808      	ldr	r0, [pc, #32]	@ (8000804 <process_weight_commands+0x48>)
 80007e2:	f7ff ff63 	bl	80006ac <cdc_debug_print>
    }
    
    // 更新上次状态
    last_weight_control = holding_regs[REG_WEIGHT_CONTROL];
 80007e6:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <process_weight_commands+0x3c>)
 80007e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b03      	ldr	r3, [pc, #12]	@ (80007fc <process_weight_commands+0x40>)
 80007f0:	601a      	str	r2, [r3, #0]
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000574 	.word	0x20000574
 80007fc:	2000018c 	.word	0x2000018c
 8000800:	0801cc3c 	.word	0x0801cc3c
 8000804:	0801cc58 	.word	0x0801cc58

08000808 <process_pump_commands>:

/**
  * @brief  处理泵相关命令
  * @retval None
  */
static void process_pump_commands(void) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b08e      	sub	sp, #56	@ 0x38
 800080c:	af00      	add	r7, sp, #0
    // 处理泵1命令
    // 检查泵1初始化触发 (40041)
    if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && last_pump1_init_trigger != 1) {
 800080e:	4b89      	ldr	r3, [pc, #548]	@ (8000a34 <process_pump_commands+0x22c>)
 8000810:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8000814:	2b01      	cmp	r3, #1
 8000816:	d125      	bne.n	8000864 <process_pump_commands+0x5c>
 8000818:	4b87      	ldr	r3, [pc, #540]	@ (8000a38 <process_pump_commands+0x230>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d021      	beq.n	8000864 <process_pump_commands+0x5c>
        cdc_debug_print("Pump1 initialization triggered");
 8000820:	4886      	ldr	r0, [pc, #536]	@ (8000a3c <process_pump_commands+0x234>)
 8000822:	f7ff ff43 	bl	80006ac <cdc_debug_print>
        
        // 发送泵1初始化命令
        if (pump_init_device(1) == 0) {
 8000826:	2001      	movs	r0, #1
 8000828:	f000 f94c 	bl	8000ac4 <pump_init_device>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10e      	bne.n	8000850 <process_pump_commands+0x48>
            cdc_debug_print("Pump1 init command sent successfully");
 8000832:	4883      	ldr	r0, [pc, #524]	@ (8000a40 <process_pump_commands+0x238>)
 8000834:	f7ff ff3a 	bl	80006ac <cdc_debug_print>
            pump1_current_pos = 0;  // 初始化后位置归零
 8000838:	4b82      	ldr	r3, [pc, #520]	@ (8000a44 <process_pump_commands+0x23c>)
 800083a:	2200      	movs	r2, #0
 800083c:	801a      	strh	r2, [r3, #0]
            holding_regs[REG_PUMP1_CURRENT_POSITION] = 0;
 800083e:	4b7d      	ldr	r3, [pc, #500]	@ (8000a34 <process_pump_commands+0x22c>)
 8000840:	2200      	movs	r2, #0
 8000842:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
            holding_regs[REG_PUMP1_STATUS] = 1;  // 设置为不忙状态
 8000846:	4b7b      	ldr	r3, [pc, #492]	@ (8000a34 <process_pump_commands+0x22c>)
 8000848:	2201      	movs	r2, #1
 800084a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
 800084e:	e002      	b.n	8000856 <process_pump_commands+0x4e>
        } else {
            cdc_debug_print("Pump1 init command failed");
 8000850:	487d      	ldr	r0, [pc, #500]	@ (8000a48 <process_pump_commands+0x240>)
 8000852:	f7ff ff2b 	bl	80006ac <cdc_debug_print>
        }
        
        // 发送后置状态为2
        holding_regs[REG_PUMP1_INIT_TRIGGER] = 2;
 8000856:	4b77      	ldr	r3, [pc, #476]	@ (8000a34 <process_pump_commands+0x22c>)
 8000858:	2202      	movs	r2, #2
 800085a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
        last_pump1_init_trigger = 2;
 800085e:	4b76      	ldr	r3, [pc, #472]	@ (8000a38 <process_pump_commands+0x230>)
 8000860:	2202      	movs	r2, #2
 8000862:	601a      	str	r2, [r3, #0]
    }
    
    // 检查泵1控制触发 (40043)
    if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && last_pump1_control_trigger != 1) {
 8000864:	4b73      	ldr	r3, [pc, #460]	@ (8000a34 <process_pump_commands+0x22c>)
 8000866:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800086a:	2b01      	cmp	r3, #1
 800086c:	d147      	bne.n	80008fe <process_pump_commands+0xf6>
 800086e:	4b77      	ldr	r3, [pc, #476]	@ (8000a4c <process_pump_commands+0x244>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d043      	beq.n	80008fe <process_pump_commands+0xf6>
        if (!pump1_busy) {  // 只有在泵不忙时才处理移动命令
 8000876:	4b76      	ldr	r3, [pc, #472]	@ (8000a50 <process_pump_commands+0x248>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d135      	bne.n	80008ea <process_pump_commands+0xe2>
            cdc_debug_print("Pump1 control triggered");
 800087e:	4875      	ldr	r0, [pc, #468]	@ (8000a54 <process_pump_commands+0x24c>)
 8000880:	f7ff ff14 	bl	80006ac <cdc_debug_print>
            
            // 获取目标位置 (40042)
            uint16_t target_position = holding_regs[REG_PUMP1_ABS_POSITION];
 8000884:	4b6b      	ldr	r3, [pc, #428]	@ (8000a34 <process_pump_commands+0x22c>)
 8000886:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800088a:	86fb      	strh	r3, [r7, #54]	@ 0x36
            
            // 验证目标位置范围 (0-6000)
            if (target_position <= 6000) {
 800088c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800088e:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000892:	4293      	cmp	r3, r2
 8000894:	d825      	bhi.n	80008e2 <process_pump_commands+0xda>
                // 发送泵1移动命令
                if (pump_move_absolute_device(1, target_position) == 0) {
 8000896:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000898:	4619      	mov	r1, r3
 800089a:	2001      	movs	r0, #1
 800089c:	f000 f920 	bl	8000ae0 <pump_move_absolute_device>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d119      	bne.n	80008da <process_pump_commands+0xd2>
                    pump1_busy = 1;  // 设置忙状态
 80008a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000a50 <process_pump_commands+0x248>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
                    pump1_move_start_time = HAL_GetTick();  // 记录开始时间
 80008ac:	f003 f866 	bl	800397c <HAL_GetTick>
 80008b0:	4603      	mov	r3, r0
 80008b2:	4a69      	ldr	r2, [pc, #420]	@ (8000a58 <process_pump_commands+0x250>)
 80008b4:	6013      	str	r3, [r2, #0]
                    holding_regs[REG_PUMP1_STATUS] = 2;  // 设置为忙状态
 80008b6:	4b5f      	ldr	r3, [pc, #380]	@ (8000a34 <process_pump_commands+0x22c>)
 80008b8:	2202      	movs	r2, #2
 80008ba:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
                    cdc_debug_print("Pump1 move command sent successfully");
 80008be:	4867      	ldr	r0, [pc, #412]	@ (8000a5c <process_pump_commands+0x254>)
 80008c0:	f7ff fef4 	bl	80006ac <cdc_debug_print>
                    
                    // 调试信息：显示目标位置
                    char pos_msg[50];
                    snprintf(pos_msg, sizeof(pos_msg), "Pump1 moving to position: %d", target_position);
 80008c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80008c6:	4638      	mov	r0, r7
 80008c8:	4a65      	ldr	r2, [pc, #404]	@ (8000a60 <process_pump_commands+0x258>)
 80008ca:	2132      	movs	r1, #50	@ 0x32
 80008cc:	f01b f818 	bl	801b900 <sniprintf>
                    cdc_debug_print(pos_msg);
 80008d0:	463b      	mov	r3, r7
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff feea 	bl	80006ac <cdc_debug_print>
 80008d8:	e00a      	b.n	80008f0 <process_pump_commands+0xe8>
                } else {
                    cdc_debug_print("Pump1 move command failed");
 80008da:	4862      	ldr	r0, [pc, #392]	@ (8000a64 <process_pump_commands+0x25c>)
 80008dc:	f7ff fee6 	bl	80006ac <cdc_debug_print>
 80008e0:	e006      	b.n	80008f0 <process_pump_commands+0xe8>
                }
            } else {
                cdc_debug_print("Pump1 target position out of range (0-6000)");
 80008e2:	4861      	ldr	r0, [pc, #388]	@ (8000a68 <process_pump_commands+0x260>)
 80008e4:	f7ff fee2 	bl	80006ac <cdc_debug_print>
 80008e8:	e002      	b.n	80008f0 <process_pump_commands+0xe8>
            }
        } else {
            cdc_debug_print("Pump1 is busy, ignoring move command");
 80008ea:	4860      	ldr	r0, [pc, #384]	@ (8000a6c <process_pump_commands+0x264>)
 80008ec:	f7ff fede 	bl	80006ac <cdc_debug_print>
        }
        
        // 根据40042发送移动命令后置状态为2
        holding_regs[REG_PUMP1_CONTROL_TRIGGER] = 2;
 80008f0:	4b50      	ldr	r3, [pc, #320]	@ (8000a34 <process_pump_commands+0x22c>)
 80008f2:	2202      	movs	r2, #2
 80008f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        last_pump1_control_trigger = 2;
 80008f8:	4b54      	ldr	r3, [pc, #336]	@ (8000a4c <process_pump_commands+0x244>)
 80008fa:	2202      	movs	r2, #2
 80008fc:	601a      	str	r2, [r3, #0]
    }
    
    // 处理泵2命令 (类似泵1)
    // 检查泵2初始化触发 (40046)
    if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && last_pump2_init_trigger != 1) {
 80008fe:	4b4d      	ldr	r3, [pc, #308]	@ (8000a34 <process_pump_commands+0x22c>)
 8000900:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8000904:	2b01      	cmp	r3, #1
 8000906:	d125      	bne.n	8000954 <process_pump_commands+0x14c>
 8000908:	4b59      	ldr	r3, [pc, #356]	@ (8000a70 <process_pump_commands+0x268>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d021      	beq.n	8000954 <process_pump_commands+0x14c>
        cdc_debug_print("Pump2 initialization triggered");
 8000910:	4858      	ldr	r0, [pc, #352]	@ (8000a74 <process_pump_commands+0x26c>)
 8000912:	f7ff fecb 	bl	80006ac <cdc_debug_print>
        
        // 发送泵2初始化命令
        if (pump_init_device(2) == 0) {
 8000916:	2002      	movs	r0, #2
 8000918:	f000 f8d4 	bl	8000ac4 <pump_init_device>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d10e      	bne.n	8000940 <process_pump_commands+0x138>
            cdc_debug_print("Pump2 init command sent successfully");
 8000922:	4855      	ldr	r0, [pc, #340]	@ (8000a78 <process_pump_commands+0x270>)
 8000924:	f7ff fec2 	bl	80006ac <cdc_debug_print>
            pump2_current_pos = 0;  // 初始化后位置归零
 8000928:	4b54      	ldr	r3, [pc, #336]	@ (8000a7c <process_pump_commands+0x274>)
 800092a:	2200      	movs	r2, #0
 800092c:	801a      	strh	r2, [r3, #0]
            holding_regs[REG_PUMP2_CURRENT_POSITION] = 0;
 800092e:	4b41      	ldr	r3, [pc, #260]	@ (8000a34 <process_pump_commands+0x22c>)
 8000930:	2200      	movs	r2, #0
 8000932:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            holding_regs[REG_PUMP2_STATUS] = 1;  // 设置为不忙状态
 8000936:	4b3f      	ldr	r3, [pc, #252]	@ (8000a34 <process_pump_commands+0x22c>)
 8000938:	2201      	movs	r2, #1
 800093a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800093e:	e002      	b.n	8000946 <process_pump_commands+0x13e>
        } else {
            cdc_debug_print("Pump2 init command failed");
 8000940:	484f      	ldr	r0, [pc, #316]	@ (8000a80 <process_pump_commands+0x278>)
 8000942:	f7ff feb3 	bl	80006ac <cdc_debug_print>
        }
        
        // 发送后置状态为2
        holding_regs[REG_PUMP2_INIT_TRIGGER] = 2;
 8000946:	4b3b      	ldr	r3, [pc, #236]	@ (8000a34 <process_pump_commands+0x22c>)
 8000948:	2202      	movs	r2, #2
 800094a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
        last_pump2_init_trigger = 2;
 800094e:	4b48      	ldr	r3, [pc, #288]	@ (8000a70 <process_pump_commands+0x268>)
 8000950:	2202      	movs	r2, #2
 8000952:	601a      	str	r2, [r3, #0]
    }
    
    // 检查泵2控制触发 (40048)
    if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && last_pump2_control_trigger != 1) {
 8000954:	4b37      	ldr	r3, [pc, #220]	@ (8000a34 <process_pump_commands+0x22c>)
 8000956:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800095a:	2b01      	cmp	r3, #1
 800095c:	d147      	bne.n	80009ee <process_pump_commands+0x1e6>
 800095e:	4b49      	ldr	r3, [pc, #292]	@ (8000a84 <process_pump_commands+0x27c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d043      	beq.n	80009ee <process_pump_commands+0x1e6>
        if (!pump2_busy) {  // 只有在泵不忙时才处理移动命令
 8000966:	4b48      	ldr	r3, [pc, #288]	@ (8000a88 <process_pump_commands+0x280>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d135      	bne.n	80009da <process_pump_commands+0x1d2>
            cdc_debug_print("Pump2 control triggered");
 800096e:	4847      	ldr	r0, [pc, #284]	@ (8000a8c <process_pump_commands+0x284>)
 8000970:	f7ff fe9c 	bl	80006ac <cdc_debug_print>
            
            // 获取目标位置 (40047)
            uint16_t target_position = holding_regs[REG_PUMP2_ABS_POSITION];
 8000974:	4b2f      	ldr	r3, [pc, #188]	@ (8000a34 <process_pump_commands+0x22c>)
 8000976:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800097a:	86bb      	strh	r3, [r7, #52]	@ 0x34
            
            // 验证目标位置范围 (0-6000)
            if (target_position <= 6000) {
 800097c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800097e:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000982:	4293      	cmp	r3, r2
 8000984:	d825      	bhi.n	80009d2 <process_pump_commands+0x1ca>
                // 发送泵2移动命令
                if (pump_move_absolute_device(2, target_position) == 0) {
 8000986:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000988:	4619      	mov	r1, r3
 800098a:	2002      	movs	r0, #2
 800098c:	f000 f8a8 	bl	8000ae0 <pump_move_absolute_device>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d119      	bne.n	80009ca <process_pump_commands+0x1c2>
                    pump2_busy = 1;  // 设置忙状态
 8000996:	4b3c      	ldr	r3, [pc, #240]	@ (8000a88 <process_pump_commands+0x280>)
 8000998:	2201      	movs	r2, #1
 800099a:	701a      	strb	r2, [r3, #0]
                    pump2_move_start_time = HAL_GetTick();  // 记录开始时间
 800099c:	f002 ffee 	bl	800397c <HAL_GetTick>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4a3b      	ldr	r2, [pc, #236]	@ (8000a90 <process_pump_commands+0x288>)
 80009a4:	6013      	str	r3, [r2, #0]
                    holding_regs[REG_PUMP2_STATUS] = 2;  // 设置为忙状态
 80009a6:	4b23      	ldr	r3, [pc, #140]	@ (8000a34 <process_pump_commands+0x22c>)
 80009a8:	2202      	movs	r2, #2
 80009aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
                    cdc_debug_print("Pump2 move command sent successfully");
 80009ae:	4839      	ldr	r0, [pc, #228]	@ (8000a94 <process_pump_commands+0x28c>)
 80009b0:	f7ff fe7c 	bl	80006ac <cdc_debug_print>
                    
                    // 调试信息：显示目标位置
                    char pos_msg[50];
                    snprintf(pos_msg, sizeof(pos_msg), "Pump2 moving to position: %d", target_position);
 80009b4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80009b6:	4638      	mov	r0, r7
 80009b8:	4a37      	ldr	r2, [pc, #220]	@ (8000a98 <process_pump_commands+0x290>)
 80009ba:	2132      	movs	r1, #50	@ 0x32
 80009bc:	f01a ffa0 	bl	801b900 <sniprintf>
                    cdc_debug_print(pos_msg);
 80009c0:	463b      	mov	r3, r7
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fe72 	bl	80006ac <cdc_debug_print>
 80009c8:	e00a      	b.n	80009e0 <process_pump_commands+0x1d8>
                } else {
                    cdc_debug_print("Pump2 move command failed");
 80009ca:	4834      	ldr	r0, [pc, #208]	@ (8000a9c <process_pump_commands+0x294>)
 80009cc:	f7ff fe6e 	bl	80006ac <cdc_debug_print>
 80009d0:	e006      	b.n	80009e0 <process_pump_commands+0x1d8>
                }
            } else {
                cdc_debug_print("Pump2 target position out of range (0-6000)");
 80009d2:	4833      	ldr	r0, [pc, #204]	@ (8000aa0 <process_pump_commands+0x298>)
 80009d4:	f7ff fe6a 	bl	80006ac <cdc_debug_print>
 80009d8:	e002      	b.n	80009e0 <process_pump_commands+0x1d8>
            }
        } else {
            cdc_debug_print("Pump2 is busy, ignoring move command");
 80009da:	4832      	ldr	r0, [pc, #200]	@ (8000aa4 <process_pump_commands+0x29c>)
 80009dc:	f7ff fe66 	bl	80006ac <cdc_debug_print>
        }
        
        // 根据40047发送移动命令后置状态为2
        holding_regs[REG_PUMP2_CONTROL_TRIGGER] = 2;
 80009e0:	4b14      	ldr	r3, [pc, #80]	@ (8000a34 <process_pump_commands+0x22c>)
 80009e2:	2202      	movs	r2, #2
 80009e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        last_pump2_control_trigger = 2;
 80009e8:	4b26      	ldr	r3, [pc, #152]	@ (8000a84 <process_pump_commands+0x27c>)
 80009ea:	2202      	movs	r2, #2
 80009ec:	601a      	str	r2, [r3, #0]
    }
    
    // 更新泵状态（检查是否完成移动）
    pump_update_status(1);  // 更新泵1状态
 80009ee:	2001      	movs	r0, #1
 80009f0:	f000 f88a 	bl	8000b08 <pump_update_status>
    pump_update_status(2);  // 更新泵2状态
 80009f4:	2002      	movs	r0, #2
 80009f6:	f000 f887 	bl	8000b08 <pump_update_status>
    
    // 更新上次状态
    last_pump1_init_trigger = holding_regs[REG_PUMP1_INIT_TRIGGER];
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <process_pump_commands+0x22c>)
 80009fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <process_pump_commands+0x230>)
 8000a04:	601a      	str	r2, [r3, #0]
    last_pump1_control_trigger = holding_regs[REG_PUMP1_CONTROL_TRIGGER];
 8000a06:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <process_pump_commands+0x22c>)
 8000a08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <process_pump_commands+0x244>)
 8000a10:	601a      	str	r2, [r3, #0]
    last_pump2_init_trigger = holding_regs[REG_PUMP2_INIT_TRIGGER];
 8000a12:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <process_pump_commands+0x22c>)
 8000a14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <process_pump_commands+0x268>)
 8000a1c:	601a      	str	r2, [r3, #0]
    last_pump2_control_trigger = holding_regs[REG_PUMP2_CONTROL_TRIGGER];
 8000a1e:	4b05      	ldr	r3, [pc, #20]	@ (8000a34 <process_pump_commands+0x22c>)
 8000a20:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <process_pump_commands+0x27c>)
 8000a28:	601a      	str	r2, [r3, #0]
}
 8000a2a:	bf00      	nop
 8000a2c:	3738      	adds	r7, #56	@ 0x38
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000574 	.word	0x20000574
 8000a38:	20000190 	.word	0x20000190
 8000a3c:	0801cc78 	.word	0x0801cc78
 8000a40:	0801cc98 	.word	0x0801cc98
 8000a44:	20000222 	.word	0x20000222
 8000a48:	0801ccc0 	.word	0x0801ccc0
 8000a4c:	20000194 	.word	0x20000194
 8000a50:	20000220 	.word	0x20000220
 8000a54:	0801ccdc 	.word	0x0801ccdc
 8000a58:	20000228 	.word	0x20000228
 8000a5c:	0801ccf4 	.word	0x0801ccf4
 8000a60:	0801cd1c 	.word	0x0801cd1c
 8000a64:	0801cd3c 	.word	0x0801cd3c
 8000a68:	0801cd58 	.word	0x0801cd58
 8000a6c:	0801cd84 	.word	0x0801cd84
 8000a70:	20000198 	.word	0x20000198
 8000a74:	0801cdac 	.word	0x0801cdac
 8000a78:	0801cdcc 	.word	0x0801cdcc
 8000a7c:	20000224 	.word	0x20000224
 8000a80:	0801cdf4 	.word	0x0801cdf4
 8000a84:	2000019c 	.word	0x2000019c
 8000a88:	20000221 	.word	0x20000221
 8000a8c:	0801ce10 	.word	0x0801ce10
 8000a90:	2000022c 	.word	0x2000022c
 8000a94:	0801ce28 	.word	0x0801ce28
 8000a98:	0801ce50 	.word	0x0801ce50
 8000a9c:	0801ce70 	.word	0x0801ce70
 8000aa0:	0801ce8c 	.word	0x0801ce8c
 8000aa4:	0801ceb8 	.word	0x0801ceb8

08000aa8 <update_sensor_data>:

/**
  * @brief  更新传感器数据 (只读寄存器)
  * @retval None
  */
static void update_sensor_data(void) {
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
        /*
        pump_get_status_device(1);
        pump_get_status_device(2);
        */
    }
    pump_read_counter++;
 8000aac:	4b04      	ldr	r3, [pc, #16]	@ (8000ac0 <update_sensor_data+0x18>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	4a03      	ldr	r2, [pc, #12]	@ (8000ac0 <update_sensor_data+0x18>)
 8000ab4:	6013      	str	r3, [r2, #0]
        uint8_t object_detected = gpio_read_object_sensor();
        holding_regs[REG_OBJECT_DETECTION] = object_detected;
    }
    detection_read_counter++;
    */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	20000230 	.word	0x20000230

08000ac4 <pump_init_device>:
/**
  * @brief  初始化指定泵
  * @param  pump_id: 泵ID (1或2)
  * @retval 0: 成功, -1: 失败
  */
static int pump_init_device(uint8_t pump_id) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
    return pump_init(pump_id);
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f002 fa81 	bl	8002fd8 <pump_init>
 8000ad6:	4603      	mov	r3, r0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <pump_move_absolute_device>:
  * @brief  泵移动到绝对位置
  * @param  pump_id: 泵ID (1或2)
  * @param  position: 目标位置 (0-6000步)
  * @retval 0: 成功, -1: 失败
  */
static int pump_move_absolute_device(uint8_t pump_id, uint16_t position) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	460a      	mov	r2, r1
 8000aea:	71fb      	strb	r3, [r7, #7]
 8000aec:	4613      	mov	r3, r2
 8000aee:	80bb      	strh	r3, [r7, #4]
    return pump_move_absolute(pump_id, position);
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	88ba      	ldrh	r2, [r7, #4]
 8000af4:	4611      	mov	r1, r2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f002 fa80 	bl	8002ffc <pump_move_absolute>
 8000afc:	4603      	mov	r3, r0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <pump_update_status>:
/**
  * @brief  更新泵状态
  * @param  pump_id: 泵ID (1或2)
  * @retval None
  */
static void pump_update_status(uint8_t pump_id) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
    uint32_t current_time = HAL_GetTick();
 8000b12:	f002 ff33 	bl	800397c <HAL_GetTick>
 8000b16:	60f8      	str	r0, [r7, #12]
    uint32_t timeout_ms = 30000;  // 30秒超时
 8000b18:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000b1c:	60bb      	str	r3, [r7, #8]
    
    if (pump_id == 1) {
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d131      	bne.n	8000b88 <pump_update_status+0x80>
        if (pump1_busy) {
 8000b24:	4b34      	ldr	r3, [pc, #208]	@ (8000bf8 <pump_update_status+0xf0>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d061      	beq.n	8000bf0 <pump_update_status+0xe8>
            // 检查超时
            if (current_time - pump1_move_start_time > timeout_ms) {
 8000b2c:	4b33      	ldr	r3, [pc, #204]	@ (8000bfc <pump_update_status+0xf4>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	68ba      	ldr	r2, [r7, #8]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d20a      	bcs.n	8000b50 <pump_update_status+0x48>
                pump1_busy = 0;
 8000b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf8 <pump_update_status+0xf0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
                holding_regs[REG_PUMP1_STATUS] = 1;  // 超时后设置为不忙
 8000b40:	4b2f      	ldr	r3, [pc, #188]	@ (8000c00 <pump_update_status+0xf8>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
                cdc_debug_print("Pump1 movement timeout, setting to idle");
 8000b48:	482e      	ldr	r0, [pc, #184]	@ (8000c04 <pump_update_status+0xfc>)
 8000b4a:	f7ff fdaf 	bl	80006ac <cdc_debug_print>
                    cdc_debug_print("Pump2 movement completed");
                }
            }
        }
    }
 8000b4e:	e04f      	b.n	8000bf0 <pump_update_status+0xe8>
                if (current_time - pump1_move_start_time > 2000) {
 8000b50:	4b2a      	ldr	r3, [pc, #168]	@ (8000bfc <pump_update_status+0xf4>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000b5c:	d948      	bls.n	8000bf0 <pump_update_status+0xe8>
                    pump1_busy = 0;
 8000b5e:	4b26      	ldr	r3, [pc, #152]	@ (8000bf8 <pump_update_status+0xf0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
                    holding_regs[REG_PUMP1_STATUS] = 1;  // 设置为不忙
 8000b64:	4b26      	ldr	r3, [pc, #152]	@ (8000c00 <pump_update_status+0xf8>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
                    pump1_current_pos = holding_regs[REG_PUMP1_ABS_POSITION];
 8000b6c:	4b24      	ldr	r3, [pc, #144]	@ (8000c00 <pump_update_status+0xf8>)
 8000b6e:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 8000b72:	4b25      	ldr	r3, [pc, #148]	@ (8000c08 <pump_update_status+0x100>)
 8000b74:	801a      	strh	r2, [r3, #0]
                    holding_regs[REG_PUMP1_CURRENT_POSITION] = pump1_current_pos;
 8000b76:	4b24      	ldr	r3, [pc, #144]	@ (8000c08 <pump_update_status+0x100>)
 8000b78:	881a      	ldrh	r2, [r3, #0]
 8000b7a:	4b21      	ldr	r3, [pc, #132]	@ (8000c00 <pump_update_status+0xf8>)
 8000b7c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
                    cdc_debug_print("Pump1 movement completed");
 8000b80:	4822      	ldr	r0, [pc, #136]	@ (8000c0c <pump_update_status+0x104>)
 8000b82:	f7ff fd93 	bl	80006ac <cdc_debug_print>
 8000b86:	e033      	b.n	8000bf0 <pump_update_status+0xe8>
    } else if (pump_id == 2) {
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d130      	bne.n	8000bf0 <pump_update_status+0xe8>
        if (pump2_busy) {
 8000b8e:	4b20      	ldr	r3, [pc, #128]	@ (8000c10 <pump_update_status+0x108>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d02c      	beq.n	8000bf0 <pump_update_status+0xe8>
            if (current_time - pump2_move_start_time > timeout_ms) {
 8000b96:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <pump_update_status+0x10c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d20a      	bcs.n	8000bba <pump_update_status+0xb2>
                pump2_busy = 0;
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <pump_update_status+0x108>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
                holding_regs[REG_PUMP2_STATUS] = 1;  // 超时后设置为不忙
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <pump_update_status+0xf8>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
                cdc_debug_print("Pump2 movement timeout, setting to idle");
 8000bb2:	4819      	ldr	r0, [pc, #100]	@ (8000c18 <pump_update_status+0x110>)
 8000bb4:	f7ff fd7a 	bl	80006ac <cdc_debug_print>
 8000bb8:	e01a      	b.n	8000bf0 <pump_update_status+0xe8>
                if (current_time - pump2_move_start_time > 2000) {
 8000bba:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <pump_update_status+0x10c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000bc6:	d913      	bls.n	8000bf0 <pump_update_status+0xe8>
                    pump2_busy = 0;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <pump_update_status+0x108>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
                    holding_regs[REG_PUMP2_STATUS] = 1;  // 设置为不忙
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <pump_update_status+0xf8>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
                    pump2_current_pos = holding_regs[REG_PUMP2_ABS_POSITION];
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <pump_update_status+0xf8>)
 8000bd8:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <pump_update_status+0x114>)
 8000bde:	801a      	strh	r2, [r3, #0]
                    holding_regs[REG_PUMP2_CURRENT_POSITION] = pump2_current_pos;
 8000be0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <pump_update_status+0x114>)
 8000be2:	881a      	ldrh	r2, [r3, #0]
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <pump_update_status+0xf8>)
 8000be6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
                    cdc_debug_print("Pump2 movement completed");
 8000bea:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <pump_update_status+0x118>)
 8000bec:	f7ff fd5e 	bl	80006ac <cdc_debug_print>
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000220 	.word	0x20000220
 8000bfc:	20000228 	.word	0x20000228
 8000c00:	20000574 	.word	0x20000574
 8000c04:	0801cef4 	.word	0x0801cef4
 8000c08:	20000222 	.word	0x20000222
 8000c0c:	0801cf1c 	.word	0x0801cf1c
 8000c10:	20000221 	.word	0x20000221
 8000c14:	2000022c 	.word	0x2000022c
 8000c18:	0801cf38 	.word	0x0801cf38
 8000c1c:	20000224 	.word	0x20000224
 8000c20:	0801cf60 	.word	0x0801cf60

08000c24 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4a07      	ldr	r2, [pc, #28]	@ (8000c50 <vApplicationGetIdleTaskMemory+0x2c>)
 8000c34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	4a06      	ldr	r2, [pc, #24]	@ (8000c54 <vApplicationGetIdleTaskMemory+0x30>)
 8000c3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2280      	movs	r2, #128	@ 0x80
 8000c40:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c42:	bf00      	nop
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000280 	.word	0x20000280
 8000c54:	20000320 	.word	0x20000320

08000c58 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000c58:	b5b0      	push	{r4, r5, r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <MX_FREERTOS_Init+0x30>)
 8000c60:	1d3c      	adds	r4, r7, #4
 8000c62:	461d      	mov	r5, r3
 8000c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f00c f977 	bl	800cf68 <osThreadCreate>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4a03      	ldr	r2, [pc, #12]	@ (8000c8c <MX_FREERTOS_Init+0x34>)
 8000c7e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000c80:	bf00      	nop
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bdb0      	pop	{r4, r5, r7, pc}
 8000c88:	0801cf88 	.word	0x0801cf88
 8000c8c:	2000027c 	.word	0x2000027c

08000c90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c98:	f01a f806 	bl	801aca8 <MX_USB_DEVICE_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 8000c9c:	f008 fe96 	bl	80099cc <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  modbus_tcp_init();
 8000ca0:	f001 fa3e 	bl	8002120 <modbus_tcp_init>
  app_business_init();
 8000ca4:	f7ff fc82 	bl	80005ac <app_business_init>
  
  /* Infinite loop */
  for(;;)
  {
    // 每100ms执行一次业务逻辑处理
    if (business_cycle_counter % BUSINESS_PROCESS_CYCLE_MS == 0) {
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <StartDefaultTask+0x90>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <StartDefaultTask+0x94>)
 8000cae:	fba3 1302 	umull	r1, r3, r3, r2
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2164      	movs	r1, #100	@ 0x64
 8000cb6:	fb01 f303 	mul.w	r3, r1, r3
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d101      	bne.n	8000cc4 <StartDefaultTask+0x34>
      app_business_process();
 8000cc0:	f7ff fce8 	bl	8000694 <app_business_process>
    }
    
    // Keep alive 消息每1000ms（约1秒）发送一次
    if (keep_alive_counter % 1000 == 0) {
 8000cc4:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <StartDefaultTask+0x98>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <StartDefaultTask+0x9c>)
 8000cca:	fba3 1302 	umull	r1, r3, r3, r2
 8000cce:	099b      	lsrs	r3, r3, #6
 8000cd0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000cd4:	fb01 f303 	mul.w	r3, r1, r3
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d111      	bne.n	8000d02 <StartDefaultTask+0x72>
      int len = snprintf(debug_buf, sizeof(debug_buf), "Keep Alive: %lu\r\n", keep_alive_counter / 1000);
 8000cde:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <StartDefaultTask+0x98>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a12      	ldr	r2, [pc, #72]	@ (8000d2c <StartDefaultTask+0x9c>)
 8000ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce8:	099b      	lsrs	r3, r3, #6
 8000cea:	4a11      	ldr	r2, [pc, #68]	@ (8000d30 <StartDefaultTask+0xa0>)
 8000cec:	2140      	movs	r1, #64	@ 0x40
 8000cee:	4811      	ldr	r0, [pc, #68]	@ (8000d34 <StartDefaultTask+0xa4>)
 8000cf0:	f01a fe06 	bl	801b900 <sniprintf>
 8000cf4:	60f8      	str	r0, [r7, #12]
      CDC_Transmit_FS((uint8_t*)debug_buf, len);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480d      	ldr	r0, [pc, #52]	@ (8000d34 <StartDefaultTask+0xa4>)
 8000cfe:	f01a f891 	bl	801ae24 <CDC_Transmit_FS>
    }
    
    business_cycle_counter++;
 8000d02:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <StartDefaultTask+0x90>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	3301      	adds	r3, #1
 8000d08:	4a05      	ldr	r2, [pc, #20]	@ (8000d20 <StartDefaultTask+0x90>)
 8000d0a:	6013      	str	r3, [r2, #0]
    keep_alive_counter++;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <StartDefaultTask+0x98>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	4a05      	ldr	r2, [pc, #20]	@ (8000d28 <StartDefaultTask+0x98>)
 8000d14:	6013      	str	r3, [r2, #0]
    osDelay(1);  // 1ms延时
 8000d16:	2001      	movs	r0, #1
 8000d18:	f00c f972 	bl	800d000 <osDelay>
    if (business_cycle_counter % BUSINESS_PROCESS_CYCLE_MS == 0) {
 8000d1c:	e7c4      	b.n	8000ca8 <StartDefaultTask+0x18>
 8000d1e:	bf00      	nop
 8000d20:	20000234 	.word	0x20000234
 8000d24:	51eb851f 	.word	0x51eb851f
 8000d28:	20000278 	.word	0x20000278
 8000d2c:	10624dd3 	.word	0x10624dd3
 8000d30:	0801cfa4 	.word	0x0801cfa4
 8000d34:	20000238 	.word	0x20000238

08000d38 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram3;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
 8000d4c:	615a      	str	r2, [r3, #20]
 8000d4e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 8000d50:	4b26      	ldr	r3, [pc, #152]	@ (8000dec <MX_FSMC_Init+0xb4>)
 8000d52:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000d56:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000d58:	4b24      	ldr	r3, [pc, #144]	@ (8000dec <MX_FSMC_Init+0xb4>)
 8000d5a:	4a25      	ldr	r2, [pc, #148]	@ (8000df0 <MX_FSMC_Init+0xb8>)
 8000d5c:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 8000d5e:	4b23      	ldr	r3, [pc, #140]	@ (8000dec <MX_FSMC_Init+0xb4>)
 8000d60:	2204      	movs	r2, #4
 8000d62:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000d64:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <MX_FSMC_Init+0xb4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000d6a:	4b20      	ldr	r3, [pc, #128]	@ (8000dec <MX_FSMC_Init+0xb4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000d70:	4b1e      	ldr	r3, [pc, #120]	@ (8000dec <MX_FSMC_Init+0xb4>)
 8000d72:	2210      	movs	r2, #16
 8000d74:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000d76:	4b1d      	ldr	r3, [pc, #116]	@ (8000dec <MX_FSMC_Init+0xb4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dec <MX_FSMC_Init+0xb4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <MX_FSMC_Init+0xb4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000d88:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <MX_FSMC_Init+0xb4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <MX_FSMC_Init+0xb4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000d94:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <MX_FSMC_Init+0xb4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <MX_FSMC_Init+0xb4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000da0:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <MX_FSMC_Init+0xb4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000da6:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <MX_FSMC_Init+0xb4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <MX_FSMC_Init+0xb4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000db2:	230f      	movs	r3, #15
 8000db4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000db6:	230f      	movs	r3, #15
 8000db8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000dba:	23ff      	movs	r3, #255	@ 0xff
 8000dbc:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000dc2:	2310      	movs	r3, #16
 8000dc4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000dc6:	2311      	movs	r3, #17
 8000dc8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	@ (8000dec <MX_FSMC_Init+0xb4>)
 8000dd6:	f006 f9a9 	bl	800712c <HAL_SRAM_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 8000de0:	f000 f994 	bl	800110c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000de4:	bf00      	nop
 8000de6:	3720      	adds	r7, #32
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000520 	.word	0x20000520
 8000df0:	a0000104 	.word	0xa0000104

08000df4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000e08:	4b2c      	ldr	r3, [pc, #176]	@ (8000ebc <HAL_FSMC_MspInit+0xc8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d151      	bne.n	8000eb4 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8000e10:	4b2a      	ldr	r3, [pc, #168]	@ (8000ebc <HAL_FSMC_MspInit+0xc8>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	4b29      	ldr	r3, [pc, #164]	@ (8000ec0 <HAL_FSMC_MspInit+0xcc>)
 8000e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e1e:	4a28      	ldr	r2, [pc, #160]	@ (8000ec0 <HAL_FSMC_MspInit+0xcc>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6393      	str	r3, [r2, #56]	@ 0x38
 8000e26:	4b26      	ldr	r3, [pc, #152]	@ (8000ec0 <HAL_FSMC_MspInit+0xcc>)
 8000e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e32:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8000e36:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000e44:	230c      	movs	r3, #12
 8000e46:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	481d      	ldr	r0, [pc, #116]	@ (8000ec4 <HAL_FSMC_MspInit+0xd0>)
 8000e4e:	f004 f8db 	bl	8005008 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e52:	f240 433f 	movw	r3, #1087	@ 0x43f
 8000e56:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000e64:	230c      	movs	r3, #12
 8000e66:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4816      	ldr	r0, [pc, #88]	@ (8000ec8 <HAL_FSMC_MspInit+0xd4>)
 8000e6e:	f004 f8cb 	bl	8005008 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e72:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000e76:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000e84:	230c      	movs	r3, #12
 8000e86:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480f      	ldr	r0, [pc, #60]	@ (8000ecc <HAL_FSMC_MspInit+0xd8>)
 8000e8e:	f004 f8bb 	bl	8005008 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e92:	f64f 7333 	movw	r3, #65331	@ 0xff33
 8000e96:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000ea4:	230c      	movs	r3, #12
 8000ea6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4808      	ldr	r0, [pc, #32]	@ (8000ed0 <HAL_FSMC_MspInit+0xdc>)
 8000eae:	f004 f8ab 	bl	8005008 <HAL_GPIO_Init>
 8000eb2:	e000      	b.n	8000eb6 <HAL_FSMC_MspInit+0xc2>
    return;
 8000eb4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000570 	.word	0x20000570
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40021400 	.word	0x40021400
 8000ec8:	40021800 	.word	0x40021800
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40020c00 	.word	0x40020c00

08000ed4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000edc:	f7ff ff8a 	bl	8000df4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	@ 0x24
 8000eec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	4a39      	ldr	r2, [pc, #228]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000ef8:	f043 0304 	orr.w	r3, r3, #4
 8000efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efe:	4b37      	ldr	r3, [pc, #220]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
 8000f0e:	4b33      	ldr	r3, [pc, #204]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a32      	ldr	r2, [pc, #200]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000f14:	f043 0320 	orr.w	r3, r3, #32
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b30      	ldr	r3, [pc, #192]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0320 	and.w	r3, r3, #32
 8000f22:	61bb      	str	r3, [r7, #24]
 8000f24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a2b      	ldr	r2, [pc, #172]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b29      	ldr	r3, [pc, #164]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b25      	ldr	r3, [pc, #148]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a24      	ldr	r2, [pc, #144]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b22      	ldr	r3, [pc, #136]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b1e      	ldr	r3, [pc, #120]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a1d      	ldr	r2, [pc, #116]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000f68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a16      	ldr	r2, [pc, #88]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a08      	ldr	r2, [pc, #32]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000fbc:	f043 0308 	orr.w	r3, r3, #8
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <MX_GPIO_Init+0xf4>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f003 0308 	and.w	r3, r3, #8
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

}
 8000fce:	bf00      	nop
 8000fd0:	3724      	adds	r7, #36	@ 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe4:	f002 fc94 	bl	8003910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe8:	f000 f814 	bl	8001014 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fec:	f7ff ff7c 	bl	8000ee8 <MX_GPIO_Init>
  MX_FSMC_Init();
 8000ff0:	f7ff fea2 	bl	8000d38 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8000ff4:	f002 f956 	bl	80032a4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000ff8:	f002 f9a8 	bl	800334c <MX_USART6_UART_Init>
  MX_TIM7_Init();
 8000ffc:	f002 f8f4 	bl	80031e8 <MX_TIM7_Init>
  MX_USART3_UART_Init();
 8001000:	f002 f97a 	bl	80032f8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001004:	f7ff fe28 	bl	8000c58 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001008:	f00b ff97 	bl	800cf3a <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(100);
 800100c:	2064      	movs	r0, #100	@ 0x64
 800100e:	f002 fcc1 	bl	8003994 <HAL_Delay>
 8001012:	e7fb      	b.n	800100c <main+0x2c>

08001014 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b094      	sub	sp, #80	@ 0x50
 8001018:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101a:	f107 0320 	add.w	r3, r7, #32
 800101e:	2230      	movs	r2, #48	@ 0x30
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f01a fd0f 	bl	801ba46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	4b28      	ldr	r3, [pc, #160]	@ (80010e0 <SystemClock_Config+0xcc>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001040:	4a27      	ldr	r2, [pc, #156]	@ (80010e0 <SystemClock_Config+0xcc>)
 8001042:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001046:	6413      	str	r3, [r2, #64]	@ 0x40
 8001048:	4b25      	ldr	r3, [pc, #148]	@ (80010e0 <SystemClock_Config+0xcc>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <SystemClock_Config+0xd0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a21      	ldr	r2, [pc, #132]	@ (80010e4 <SystemClock_Config+0xd0>)
 800105e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <SystemClock_Config+0xd0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001070:	2301      	movs	r3, #1
 8001072:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001074:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107a:	2302      	movs	r3, #2
 800107c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800107e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001082:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001084:	2319      	movs	r3, #25
 8001086:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001088:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800108c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800108e:	2302      	movs	r3, #2
 8001090:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001092:	2307      	movs	r3, #7
 8001094:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001096:	f107 0320 	add.w	r3, r7, #32
 800109a:	4618      	mov	r0, r3
 800109c:	f005 fbbc 	bl	8006818 <HAL_RCC_OscConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010a6:	f000 f831 	bl	800110c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010aa:	230f      	movs	r3, #15
 80010ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ae:	2302      	movs	r3, #2
 80010b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010b6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	2105      	movs	r1, #5
 80010c8:	4618      	mov	r0, r3
 80010ca:	f005 fe1d 	bl	8006d08 <HAL_RCC_ClockConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010d4:	f000 f81a 	bl	800110c <Error_Handler>
  }
}
 80010d8:	bf00      	nop
 80010da:	3750      	adds	r7, #80	@ 0x50
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40007000 	.word	0x40007000

080010e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80010fa:	f002 fc2b 	bl	8003954 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40002000 	.word	0x40002000

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <Error_Handler+0x8>

08001118 <cdc_debug_log>:
#include <string.h>
#include "usbd_cdc_if.h"  // 包含CDC传输函数

// 简单的调试日志函数，输出到CDC
static void cdc_debug_log(const char* tag, const char* message)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b0a4      	sub	sp, #144	@ 0x90
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
    char debug_buf[128];
    uint32_t len = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    
    // 手动拼接字符串，避免使用sprintf
    const char* ptr;
    
    // 复制tag
    ptr = tag;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (*ptr && len < 20) {
 800112e:	e00e      	b.n	800114e <cdc_debug_log+0x36>
        debug_buf[len++] = *ptr++;
 8001130:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001134:	1c53      	adds	r3, r2, #1
 8001136:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800113a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800113e:	1c59      	adds	r1, r3, #1
 8001140:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8001144:	7812      	ldrb	r2, [r2, #0]
 8001146:	3390      	adds	r3, #144	@ 0x90
 8001148:	443b      	add	r3, r7
 800114a:	f803 2c88 	strb.w	r2, [r3, #-136]
    while (*ptr && len < 20) {
 800114e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <cdc_debug_log+0x48>
 8001158:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800115c:	2b13      	cmp	r3, #19
 800115e:	d9e7      	bls.n	8001130 <cdc_debug_log+0x18>
    }
    
    // 添加分隔符
    debug_buf[len++] = ':';
 8001160:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001164:	1c5a      	adds	r2, r3, #1
 8001166:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800116a:	3390      	adds	r3, #144	@ 0x90
 800116c:	443b      	add	r3, r7
 800116e:	223a      	movs	r2, #58	@ 0x3a
 8001170:	f803 2c88 	strb.w	r2, [r3, #-136]
    debug_buf[len++] = ' ';
 8001174:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800117e:	3390      	adds	r3, #144	@ 0x90
 8001180:	443b      	add	r3, r7
 8001182:	2220      	movs	r2, #32
 8001184:	f803 2c88 	strb.w	r2, [r3, #-136]
    
    // 复制message
    ptr = message;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (*ptr && len < 120) {
 800118e:	e00e      	b.n	80011ae <cdc_debug_log+0x96>
        debug_buf[len++] = *ptr++;
 8001190:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001194:	1c53      	adds	r3, r2, #1
 8001196:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800119a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800119e:	1c59      	adds	r1, r3, #1
 80011a0:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 80011a4:	7812      	ldrb	r2, [r2, #0]
 80011a6:	3390      	adds	r3, #144	@ 0x90
 80011a8:	443b      	add	r3, r7
 80011aa:	f803 2c88 	strb.w	r2, [r3, #-136]
    while (*ptr && len < 120) {
 80011ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <cdc_debug_log+0xa8>
 80011b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80011bc:	2b77      	cmp	r3, #119	@ 0x77
 80011be:	d9e7      	bls.n	8001190 <cdc_debug_log+0x78>
    }
    
    // 添加换行
    debug_buf[len++] = '\r';
 80011c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80011ca:	3390      	adds	r3, #144	@ 0x90
 80011cc:	443b      	add	r3, r7
 80011ce:	220d      	movs	r2, #13
 80011d0:	f803 2c88 	strb.w	r2, [r3, #-136]
    debug_buf[len++] = '\n';
 80011d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80011de:	3390      	adds	r3, #144	@ 0x90
 80011e0:	443b      	add	r3, r7
 80011e2:	220a      	movs	r2, #10
 80011e4:	f803 2c88 	strb.w	r2, [r3, #-136]
    
    // 通过CDC发送
    if (len < sizeof(debug_buf)) {
 80011e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80011ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80011ee:	d808      	bhi.n	8001202 <cdc_debug_log+0xea>
        CDC_Transmit_FS((uint8_t*)debug_buf, len);
 80011f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f019 fe11 	bl	801ae24 <CDC_Transmit_FS>
    }
}
 8001202:	bf00      	nop
 8001204:	3790      	adds	r7, #144	@ 0x90
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <int_to_str>:

// 简单的整数转字符串函数
static void int_to_str(int value, char* str, int max_len)
{
 800120c:	b480      	push	{r7}
 800120e:	b08b      	sub	sp, #44	@ 0x2c
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
    int is_negative = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
    
    if (value < 0) {
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	da04      	bge.n	8001230 <int_to_str+0x24>
        is_negative = 1;
 8001226:	2301      	movs	r3, #1
 8001228:	623b      	str	r3, [r7, #32]
        value = -value;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	425b      	negs	r3, r3
 800122e:	60fb      	str	r3, [r7, #12]
    }
    
    // 处理特殊情况0
    if (value == 0) {
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d12b      	bne.n	800128e <int_to_str+0x82>
        str[i++] = '0';
 8001236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	627a      	str	r2, [r7, #36]	@ 0x24
 800123c:	461a      	mov	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	4413      	add	r3, r2
 8001242:	2230      	movs	r2, #48	@ 0x30
 8001244:	701a      	strb	r2, [r3, #0]
        str[i] = '\0';
 8001246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	4413      	add	r3, r2
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
        return;
 8001250:	e05c      	b.n	800130c <int_to_str+0x100>
    }
    
    // 转换数字
    while (value > 0 && i < max_len - 2) {
        str[i++] = '0' + (value % 10);
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	4b30      	ldr	r3, [pc, #192]	@ (8001318 <int_to_str+0x10c>)
 8001256:	fb83 1302 	smull	r1, r3, r3, r2
 800125a:	1099      	asrs	r1, r3, #2
 800125c:	17d3      	asrs	r3, r2, #31
 800125e:	1ac9      	subs	r1, r1, r3
 8001260:	460b      	mov	r3, r1
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	1ad1      	subs	r1, r2, r3
 800126a:	b2ca      	uxtb	r2, r1
 800126c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126e:	1c59      	adds	r1, r3, #1
 8001270:	6279      	str	r1, [r7, #36]	@ 0x24
 8001272:	4619      	mov	r1, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	440b      	add	r3, r1
 8001278:	3230      	adds	r2, #48	@ 0x30
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	701a      	strb	r2, [r3, #0]
        value /= 10;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4a25      	ldr	r2, [pc, #148]	@ (8001318 <int_to_str+0x10c>)
 8001282:	fb82 1203 	smull	r1, r2, r2, r3
 8001286:	1092      	asrs	r2, r2, #2
 8001288:	17db      	asrs	r3, r3, #31
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	60fb      	str	r3, [r7, #12]
    while (value > 0 && i < max_len - 2) {
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2b00      	cmp	r3, #0
 8001292:	dd04      	ble.n	800129e <int_to_str+0x92>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b02      	subs	r3, #2
 8001298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800129a:	429a      	cmp	r2, r3
 800129c:	dbd9      	blt.n	8001252 <int_to_str+0x46>
    }
    
    // 添加负号
    if (is_negative && i < max_len - 1) {
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00c      	beq.n	80012be <int_to_str+0xb2>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012aa:	429a      	cmp	r2, r3
 80012ac:	da07      	bge.n	80012be <int_to_str+0xb2>
        str[i++] = '-';
 80012ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80012b4:	461a      	mov	r2, r3
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	4413      	add	r3, r2
 80012ba:	222d      	movs	r2, #45	@ 0x2d
 80012bc:	701a      	strb	r2, [r3, #0]
    }
    
    str[i] = '\0';
 80012be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c0:	68ba      	ldr	r2, [r7, #8]
 80012c2:	4413      	add	r3, r2
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
    
    // 反转字符串
    int start = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
    int end = i - 1;
 80012cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ce:	3b01      	subs	r3, #1
 80012d0:	61bb      	str	r3, [r7, #24]
    while (start < end) {
 80012d2:	e017      	b.n	8001304 <int_to_str+0xf8>
        char temp = str[start];
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	4413      	add	r3, r2
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	75fb      	strb	r3, [r7, #23]
        str[start] = str[end];
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	441a      	add	r2, r3
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	68b9      	ldr	r1, [r7, #8]
 80012e8:	440b      	add	r3, r1
 80012ea:	7812      	ldrb	r2, [r2, #0]
 80012ec:	701a      	strb	r2, [r3, #0]
        str[end] = temp;
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	4413      	add	r3, r2
 80012f4:	7dfa      	ldrb	r2, [r7, #23]
 80012f6:	701a      	strb	r2, [r3, #0]
        start++;
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	3301      	adds	r3, #1
 80012fc:	61fb      	str	r3, [r7, #28]
        end--;
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	3b01      	subs	r3, #1
 8001302:	61bb      	str	r3, [r7, #24]
    while (start < end) {
 8001304:	69fa      	ldr	r2, [r7, #28]
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	429a      	cmp	r2, r3
 800130a:	dbe3      	blt.n	80012d4 <int_to_str+0xc8>
    }
}
 800130c:	372c      	adds	r7, #44	@ 0x2c
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	66666667 	.word	0x66666667

0800131c <hex_to_str>:

// 十六进制转换函数
static void hex_to_str(uint8_t value, char* str)
{
 800131c:	b4b0      	push	{r4, r5, r7}
 800131e:	b089      	sub	sp, #36	@ 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
    const char hex_chars[] = "0123456789ABCDEF";
 8001328:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <hex_to_str+0x54>)
 800132a:	f107 040c 	add.w	r4, r7, #12
 800132e:	461d      	mov	r5, r3
 8001330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001334:	682b      	ldr	r3, [r5, #0]
 8001336:	7023      	strb	r3, [r4, #0]
    str[0] = hex_chars[value >> 4];
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	b2db      	uxtb	r3, r3
 800133e:	3320      	adds	r3, #32
 8001340:	443b      	add	r3, r7
 8001342:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	701a      	strb	r2, [r3, #0]
    str[1] = hex_chars[value & 0x0F];
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 020f 	and.w	r2, r3, #15
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	3220      	adds	r2, #32
 8001356:	443a      	add	r2, r7
 8001358:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800135c:	701a      	strb	r2, [r3, #0]
    str[2] = '\0';
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	3302      	adds	r3, #2
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
}
 8001366:	bf00      	nop
 8001368:	3724      	adds	r7, #36	@ 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	bcb0      	pop	{r4, r5, r7}
 800136e:	4770      	bx	lr
 8001370:	0801cfb8 	.word	0x0801cfb8

08001374 <dump_data>:

// 数据转储函数 - 显示接收到的原始数据
static void dump_data(const uint8_t* data, uint16_t len)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b0a8      	sub	sp, #160	@ 0xa0
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
    char dump_buf[128];
    char hex_str[3];
    uint16_t dump_len = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    
    // 添加前缀
    const char* prefix = "Data: ";
 8001386:	4b3d      	ldr	r3, [pc, #244]	@ (800147c <dump_data+0x108>)
 8001388:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    strcpy(dump_buf, prefix);
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001394:	4618      	mov	r0, r3
 8001396:	f01a fc38 	bl	801bc0a <strcpy>
    dump_len = strlen(prefix);
 800139a:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800139e:	f7fe ff17 	bl	80001d0 <strlen>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    
    // 最多显示前16字节的数据
    uint16_t max_bytes = (len > 16) ? 16 : len;
 80013a8:	887b      	ldrh	r3, [r7, #2]
 80013aa:	2b10      	cmp	r3, #16
 80013ac:	bf28      	it	cs
 80013ae:	2310      	movcs	r3, #16
 80013b0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    
    for (uint16_t i = 0; i < max_bytes && dump_len < 120; i++) {
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 80013ba:	e032      	b.n	8001422 <dump_data+0xae>
        hex_to_str(data[i], hex_str);
 80013bc:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	4413      	add	r3, r2
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	f107 020c 	add.w	r2, r7, #12
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ffa5 	bl	800131c <hex_to_str>
        if (dump_len + 3 < sizeof(dump_buf)) {
 80013d2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80013d6:	3303      	adds	r3, #3
 80013d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80013da:	d81d      	bhi.n	8001418 <dump_data+0xa4>
            dump_buf[dump_len++] = hex_str[0];
 80013dc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 80013e6:	7b3a      	ldrb	r2, [r7, #12]
 80013e8:	33a0      	adds	r3, #160	@ 0xa0
 80013ea:	443b      	add	r3, r7
 80013ec:	f803 2c90 	strb.w	r2, [r3, #-144]
            dump_buf[dump_len++] = hex_str[1];
 80013f0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 80013fa:	7b7a      	ldrb	r2, [r7, #13]
 80013fc:	33a0      	adds	r3, #160	@ 0xa0
 80013fe:	443b      	add	r3, r7
 8001400:	f803 2c90 	strb.w	r2, [r3, #-144]
            dump_buf[dump_len++] = ' ';
 8001404:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 800140e:	33a0      	adds	r3, #160	@ 0xa0
 8001410:	443b      	add	r3, r7
 8001412:	2220      	movs	r2, #32
 8001414:	f803 2c90 	strb.w	r2, [r3, #-144]
    for (uint16_t i = 0; i < max_bytes && dump_len < 120; i++) {
 8001418:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800141c:	3301      	adds	r3, #1
 800141e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 8001422:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 8001426:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800142a:	429a      	cmp	r2, r3
 800142c:	d203      	bcs.n	8001436 <dump_data+0xc2>
 800142e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001432:	2b77      	cmp	r3, #119	@ 0x77
 8001434:	d9c2      	bls.n	80013bc <dump_data+0x48>
        }
    }
    
    if (len > 16) {
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	2b10      	cmp	r3, #16
 800143a:	d90e      	bls.n	800145a <dump_data+0xe6>
        const char* more = "...";
 800143c:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <dump_data+0x10c>)
 800143e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        strcat(dump_buf, more);
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800144a:	4618      	mov	r0, r3
 800144c:	f01a fb03 	bl	801ba56 <strcat>
        dump_len += 3;
 8001450:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001454:	3303      	adds	r3, #3
 8001456:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    }
    
    dump_buf[dump_len] = '\0';
 800145a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800145e:	33a0      	adds	r3, #160	@ 0xa0
 8001460:	443b      	add	r3, r7
 8001462:	2200      	movs	r2, #0
 8001464:	f803 2c90 	strb.w	r2, [r3, #-144]
    cdc_debug_log("MODBUS_TCP", dump_buf);
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	4619      	mov	r1, r3
 800146e:	4805      	ldr	r0, [pc, #20]	@ (8001484 <dump_data+0x110>)
 8001470:	f7ff fe52 	bl	8001118 <cdc_debug_log>
}
 8001474:	bf00      	nop
 8001476:	37a0      	adds	r7, #160	@ 0xa0
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	0801cfcc 	.word	0x0801cfcc
 8001480:	0801cfd4 	.word	0x0801cfd4
 8001484:	0801cfd8 	.word	0x0801cfd8

08001488 <process_modbus_request>:
// Holding Registers数组（根据PDF初始化默认值）
uint16_t holding_regs[100]; // 100个寄存器足够使用

// 处理单个Modbus TCP请求
static err_t process_modbus_request(struct tcp_pcb *tpcb, uint8_t* buf, uint16_t offset)
{
 8001488:	b5b0      	push	{r4, r5, r7, lr}
 800148a:	f5ad 6d9e 	sub.w	sp, sp, #1264	@ 0x4f0
 800148e:	af00      	add	r7, sp, #0
 8001490:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001494:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8001498:	6018      	str	r0, [r3, #0]
 800149a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800149e:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 80014a2:	6019      	str	r1, [r3, #0]
 80014a4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80014a8:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80014ac:	801a      	strh	r2, [r3, #0]
    // 解析Modbus TCP帧头
    uint16_t trans_id = (buf[offset] << 8) | buf[offset+1];     // 事务ID
 80014ae:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80014b2:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80014bc:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80014d0:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 80014dc:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 80014e0:	6809      	ldr	r1, [r1, #0]
 80014e2:	440b      	add	r3, r1
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	f8a7 34e4 	strh.w	r3, [r7, #1252]	@ 0x4e4
    uint16_t protocol_id = (buf[offset+2] << 8) | buf[offset+3];  // 协议ID (应该是0)
 80014f0:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80014f4:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	3302      	adds	r3, #2
 80014fc:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001500:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	4413      	add	r3, r2
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b21b      	sxth	r3, r3
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	b21a      	sxth	r2, r3
 8001510:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001514:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	3303      	adds	r3, #3
 800151c:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8001520:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8001524:	6809      	ldr	r1, [r1, #0]
 8001526:	440b      	add	r3, r1
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b21b      	sxth	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b21b      	sxth	r3, r3
 8001530:	f8a7 34e2 	strh.w	r3, [r7, #1250]	@ 0x4e2
    uint16_t length = (buf[offset+4] << 8) | buf[offset+5];       // 长度字段
 8001534:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001538:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	3304      	adds	r3, #4
 8001540:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001544:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8001548:	6812      	ldr	r2, [r2, #0]
 800154a:	4413      	add	r3, r2
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	b21b      	sxth	r3, r3
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	b21a      	sxth	r2, r3
 8001554:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001558:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	3305      	adds	r3, #5
 8001560:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8001564:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8001568:	6809      	ldr	r1, [r1, #0]
 800156a:	440b      	add	r3, r1
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b21b      	sxth	r3, r3
 8001570:	4313      	orrs	r3, r2
 8001572:	b21b      	sxth	r3, r3
 8001574:	f8a7 34e0 	strh.w	r3, [r7, #1248]	@ 0x4e0
    
    // 验证协议ID
    if (protocol_id != 0) {
 8001578:	f8b7 34e2 	ldrh.w	r3, [r7, #1250]	@ 0x4e2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d007      	beq.n	8001590 <process_modbus_request+0x108>
        cdc_debug_log("MODBUS_TCP", "Invalid protocol ID");
 8001580:	49d7      	ldr	r1, [pc, #860]	@ (80018e0 <process_modbus_request+0x458>)
 8001582:	48d8      	ldr	r0, [pc, #864]	@ (80018e4 <process_modbus_request+0x45c>)
 8001584:	f7ff fdc8 	bl	8001118 <cdc_debug_log>
        return ERR_VAL;
 8001588:	f06f 0305 	mvn.w	r3, #5
 800158c:	f000 bdb5 	b.w	80020fa <process_modbus_request+0xc72>
    }
    
    // 验证最小长度（至少要有单元ID和功能码）
    if (length < 2) {
 8001590:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 8001594:	2b01      	cmp	r3, #1
 8001596:	d807      	bhi.n	80015a8 <process_modbus_request+0x120>
        cdc_debug_log("MODBUS_TCP", "Invalid length field");
 8001598:	49d3      	ldr	r1, [pc, #844]	@ (80018e8 <process_modbus_request+0x460>)
 800159a:	48d2      	ldr	r0, [pc, #840]	@ (80018e4 <process_modbus_request+0x45c>)
 800159c:	f7ff fdbc 	bl	8001118 <cdc_debug_log>
        return ERR_VAL;
 80015a0:	f06f 0305 	mvn.w	r3, #5
 80015a4:	f000 bda9 	b.w	80020fa <process_modbus_request+0xc72>
    }

    uint8_t unit_id = buf[offset+6];                       // 单元ID
 80015a8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80015ac:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	3306      	adds	r3, #6
 80015b4:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80015b8:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	f887 34df 	strb.w	r3, [r7, #1247]	@ 0x4df
    uint8_t fc = buf[offset+7];                            // 函数码
 80015c6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80015ca:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	3307      	adds	r3, #7
 80015d2:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80015d6:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	4413      	add	r3, r2
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	f887 34de 	strb.w	r3, [r7, #1246]	@ 0x4de

    // 添加调试信息
    char frame_info[80];
    strcpy(frame_info, "Frame: TID=");
 80015e4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80015e8:	4ac0      	ldr	r2, [pc, #768]	@ (80018ec <process_modbus_request+0x464>)
 80015ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80015ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int_to_str(trans_id, frame_info + strlen(frame_info), 10);
 80015f0:	f8b7 44e4 	ldrh.w	r4, [r7, #1252]	@ 0x4e4
 80015f4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe fde9 	bl	80001d0 <strlen>
 80015fe:	4602      	mov	r2, r0
 8001600:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001604:	4413      	add	r3, r2
 8001606:	220a      	movs	r2, #10
 8001608:	4619      	mov	r1, r3
 800160a:	4620      	mov	r0, r4
 800160c:	f7ff fdfe 	bl	800120c <int_to_str>
    const char* len_prefix = " Len=";
 8001610:	4bb7      	ldr	r3, [pc, #732]	@ (80018f0 <process_modbus_request+0x468>)
 8001612:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
    strcat(frame_info, len_prefix);
 8001616:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800161a:	f8d7 14d8 	ldr.w	r1, [r7, #1240]	@ 0x4d8
 800161e:	4618      	mov	r0, r3
 8001620:	f01a fa19 	bl	801ba56 <strcat>
    int_to_str(length, frame_info + strlen(frame_info), 10);
 8001624:	f8b7 44e0 	ldrh.w	r4, [r7, #1248]	@ 0x4e0
 8001628:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe fdcf 	bl	80001d0 <strlen>
 8001632:	4602      	mov	r2, r0
 8001634:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001638:	4413      	add	r3, r2
 800163a:	220a      	movs	r2, #10
 800163c:	4619      	mov	r1, r3
 800163e:	4620      	mov	r0, r4
 8001640:	f7ff fde4 	bl	800120c <int_to_str>
    const char* fc_prefix = " FC=";
 8001644:	4bab      	ldr	r3, [pc, #684]	@ (80018f4 <process_modbus_request+0x46c>)
 8001646:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
    strcat(frame_info, fc_prefix);
 800164a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800164e:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	@ 0x4d4
 8001652:	4618      	mov	r0, r3
 8001654:	f01a f9ff 	bl	801ba56 <strcat>
    int_to_str(fc, frame_info + strlen(frame_info), 10);
 8001658:	f897 44de 	ldrb.w	r4, [r7, #1246]	@ 0x4de
 800165c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fdb5 	bl	80001d0 <strlen>
 8001666:	4602      	mov	r2, r0
 8001668:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800166c:	4413      	add	r3, r2
 800166e:	220a      	movs	r2, #10
 8001670:	4619      	mov	r1, r3
 8001672:	4620      	mov	r0, r4
 8001674:	f7ff fdca 	bl	800120c <int_to_str>
    cdc_debug_log("MODBUS_TCP", frame_info);
 8001678:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800167c:	4619      	mov	r1, r3
 800167e:	4899      	ldr	r0, [pc, #612]	@ (80018e4 <process_modbus_request+0x45c>)
 8001680:	f7ff fd4a 	bl	8001118 <cdc_debug_log>

    uint8_t reply[1024];
    reply[0] = buf[offset]; reply[1] = buf[offset+1]; // 事务ID
 8001684:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001688:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001692:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	4413      	add	r3, r2
 800169a:	781a      	ldrb	r2, [r3, #0]
 800169c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80016a0:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80016a4:	701a      	strb	r2, [r3, #0]
 80016a6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80016aa:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80016b6:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	4413      	add	r3, r2
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80016c4:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80016c8:	705a      	strb	r2, [r3, #1]
    reply[2] = 0; reply[3] = 0;           // 协议ID (0)
 80016ca:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80016ce:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80016d2:	2200      	movs	r2, #0
 80016d4:	709a      	strb	r2, [r3, #2]
 80016d6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80016da:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80016de:	2200      	movs	r2, #0
 80016e0:	70da      	strb	r2, [r3, #3]
    reply[6] = unit_id;                   // 单元ID
 80016e2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80016e6:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80016ea:	f897 24df 	ldrb.w	r2, [r7, #1247]	@ 0x4df
 80016ee:	719a      	strb	r2, [r3, #6]
    uint16_t reply_data_len = 0;          // 数据部分长度（不包含单元ID）
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee

    if (fc == FC_READ_HOLDING) {
 80016f6:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	f040 8145 	bne.w	800198a <process_modbus_request+0x502>
        cdc_debug_log("MODBUS_TCP", "Processing read holding");
 8001700:	497d      	ldr	r1, [pc, #500]	@ (80018f8 <process_modbus_request+0x470>)
 8001702:	4878      	ldr	r0, [pc, #480]	@ (80018e4 <process_modbus_request+0x45c>)
 8001704:	f7ff fd08 	bl	8001118 <cdc_debug_log>
        
        // 检查数据长度是否足够
        if (length < 6) { // 单元ID + 功能码 + 起始地址 + 数量 = 1+1+2+2 = 6
 8001708:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 800170c:	2b05      	cmp	r3, #5
 800170e:	d817      	bhi.n	8001740 <process_modbus_request+0x2b8>
            cdc_debug_log("MODBUS_TCP", "Read request too short");
 8001710:	497a      	ldr	r1, [pc, #488]	@ (80018fc <process_modbus_request+0x474>)
 8001712:	4874      	ldr	r0, [pc, #464]	@ (80018e4 <process_modbus_request+0x45c>)
 8001714:	f7ff fd00 	bl	8001118 <cdc_debug_log>
            reply[7] = fc + 0x80;  // 异常函数码
 8001718:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 800171c:	3b80      	subs	r3, #128	@ 0x80
 800171e:	b2da      	uxtb	r2, r3
 8001720:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001724:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001728:	71da      	strb	r2, [r3, #7]
            reply[8] = 0x03;       // 异常代码：非法数据值
 800172a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800172e:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001732:	2203      	movs	r2, #3
 8001734:	721a      	strb	r2, [r3, #8]
            reply_data_len = 2;
 8001736:	2302      	movs	r3, #2
 8001738:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 800173c:	f000 bc0e 	b.w	8001f5c <process_modbus_request+0xad4>
        } else {
            uint16_t addr = (buf[offset+8] << 8) | buf[offset+9]; // 起始地址
 8001740:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001744:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	3308      	adds	r3, #8
 800174c:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001750:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	4413      	add	r3, r2
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b21b      	sxth	r3, r3
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	b21a      	sxth	r2, r3
 8001760:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001764:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	3309      	adds	r3, #9
 800176c:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8001770:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8001774:	6809      	ldr	r1, [r1, #0]
 8001776:	440b      	add	r3, r1
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b21b      	sxth	r3, r3
 800177c:	4313      	orrs	r3, r2
 800177e:	b21b      	sxth	r3, r3
 8001780:	f8a7 34b6 	strh.w	r3, [r7, #1206]	@ 0x4b6
            uint16_t qty = (buf[offset+10] << 8) | buf[offset+11]; // 数量
 8001784:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001788:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	330a      	adds	r3, #10
 8001790:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001794:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	4413      	add	r3, r2
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b21b      	sxth	r3, r3
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80017a8:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	330b      	adds	r3, #11
 80017b0:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 80017b4:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 80017b8:	6809      	ldr	r1, [r1, #0]
 80017ba:	440b      	add	r3, r1
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b21b      	sxth	r3, r3
 80017c0:	4313      	orrs	r3, r2
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	f8a7 34b4 	strh.w	r3, [r7, #1204]	@ 0x4b4
            
            char addr_info[50];
            strcpy(addr_info, "Read addr=");
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001900 <process_modbus_request+0x478>)
 80017ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80017d0:	c303      	stmia	r3!, {r0, r1}
 80017d2:	801a      	strh	r2, [r3, #0]
 80017d4:	3302      	adds	r3, #2
 80017d6:	0c12      	lsrs	r2, r2, #16
 80017d8:	701a      	strb	r2, [r3, #0]
            int_to_str(addr, addr_info + strlen(addr_info), 10);
 80017da:	f8b7 44b6 	ldrh.w	r4, [r7, #1206]	@ 0x4b6
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fcf4 	bl	80001d0 <strlen>
 80017e8:	4602      	mov	r2, r0
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4413      	add	r3, r2
 80017f0:	220a      	movs	r2, #10
 80017f2:	4619      	mov	r1, r3
 80017f4:	4620      	mov	r0, r4
 80017f6:	f7ff fd09 	bl	800120c <int_to_str>
            const char* qty_prefix = " qty=";
 80017fa:	4b42      	ldr	r3, [pc, #264]	@ (8001904 <process_modbus_request+0x47c>)
 80017fc:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
            strcat(addr_info, qty_prefix);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	@ 0x4b0
 8001808:	4618      	mov	r0, r3
 800180a:	f01a f924 	bl	801ba56 <strcat>
            int_to_str(qty, addr_info + strlen(addr_info), 10);
 800180e:	f8b7 44b4 	ldrh.w	r4, [r7, #1204]	@ 0x4b4
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fcda 	bl	80001d0 <strlen>
 800181c:	4602      	mov	r2, r0
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4413      	add	r3, r2
 8001824:	220a      	movs	r2, #10
 8001826:	4619      	mov	r1, r3
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff fcef 	bl	800120c <int_to_str>
            cdc_debug_log("MODBUS_TCP", addr_info);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	482b      	ldr	r0, [pc, #172]	@ (80018e4 <process_modbus_request+0x45c>)
 8001836:	f7ff fc6f 	bl	8001118 <cdc_debug_log>
            
            // 验证数量范围
            if (qty == 0 || qty > 125) { // Modbus标准限制单次最多读125个寄存器
 800183a:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <process_modbus_request+0x3c2>
 8001842:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 8001846:	2b7d      	cmp	r3, #125	@ 0x7d
 8001848:	d916      	bls.n	8001878 <process_modbus_request+0x3f0>
                cdc_debug_log("MODBUS_TCP", "Invalid quantity");
 800184a:	492f      	ldr	r1, [pc, #188]	@ (8001908 <process_modbus_request+0x480>)
 800184c:	4825      	ldr	r0, [pc, #148]	@ (80018e4 <process_modbus_request+0x45c>)
 800184e:	f7ff fc63 	bl	8001118 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 8001852:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8001856:	3b80      	subs	r3, #128	@ 0x80
 8001858:	b2da      	uxtb	r2, r3
 800185a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800185e:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001862:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x03;       // 异常代码：非法数据值
 8001864:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001868:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800186c:	2203      	movs	r2, #3
 800186e:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8001870:	2302      	movs	r3, #2
 8001872:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8001876:	e371      	b.n	8001f5c <process_modbus_request+0xad4>
            } else if (addr + qty > 100) { // 错误：越界，现在只有100个寄存器
 8001878:	f8b7 24b6 	ldrh.w	r2, [r7, #1206]	@ 0x4b6
 800187c:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 8001880:	4413      	add	r3, r2
 8001882:	2b64      	cmp	r3, #100	@ 0x64
 8001884:	dd16      	ble.n	80018b4 <process_modbus_request+0x42c>
                cdc_debug_log("MODBUS_TCP", "Address out of bounds");
 8001886:	4921      	ldr	r1, [pc, #132]	@ (800190c <process_modbus_request+0x484>)
 8001888:	4816      	ldr	r0, [pc, #88]	@ (80018e4 <process_modbus_request+0x45c>)
 800188a:	f7ff fc45 	bl	8001118 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 800188e:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8001892:	3b80      	subs	r3, #128	@ 0x80
 8001894:	b2da      	uxtb	r2, r3
 8001896:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800189a:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800189e:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x02;       // 异常代码：非法数据地址
 80018a0:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80018a4:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80018a8:	2202      	movs	r2, #2
 80018aa:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 80018ac:	2302      	movs	r3, #2
 80018ae:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 80018b2:	e353      	b.n	8001f5c <process_modbus_request+0xad4>
            } else {
                reply[7] = fc;              // 函数码
 80018b4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80018b8:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80018bc:	f897 24de 	ldrb.w	r2, [r7, #1246]	@ 0x4de
 80018c0:	71da      	strb	r2, [r3, #7]
                reply[8] = qty * 2;         // 字节数
 80018c2:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80018d0:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80018d4:	721a      	strb	r2, [r3, #8]
                for (uint16_t i = 0; i < qty; i++) {
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8a7 34ec 	strh.w	r3, [r7, #1260]	@ 0x4ec
 80018dc:	e043      	b.n	8001966 <process_modbus_request+0x4de>
 80018de:	bf00      	nop
 80018e0:	0801cfe4 	.word	0x0801cfe4
 80018e4:	0801cfd8 	.word	0x0801cfd8
 80018e8:	0801cff8 	.word	0x0801cff8
 80018ec:	0801d010 	.word	0x0801d010
 80018f0:	0801d01c 	.word	0x0801d01c
 80018f4:	0801d024 	.word	0x0801d024
 80018f8:	0801d02c 	.word	0x0801d02c
 80018fc:	0801d044 	.word	0x0801d044
 8001900:	0801d05c 	.word	0x0801d05c
 8001904:	0801d068 	.word	0x0801d068
 8001908:	0801d070 	.word	0x0801d070
 800190c:	0801d084 	.word	0x0801d084
                    reply[9 + i*2] = holding_regs[addr + i] >> 8;
 8001910:	f8b7 24b6 	ldrh.w	r2, [r7, #1206]	@ 0x4b6
 8001914:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8001918:	4413      	add	r3, r2
 800191a:	4abe      	ldr	r2, [pc, #760]	@ (8001c14 <process_modbus_request+0x78c>)
 800191c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	b29a      	uxth	r2, r3
 8001924:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	3309      	adds	r3, #9
 800192c:	b2d1      	uxtb	r1, r2
 800192e:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001932:	f5a2 6293 	sub.w	r2, r2, #1176	@ 0x498
 8001936:	54d1      	strb	r1, [r2, r3]
                    reply[10 + i*2] = holding_regs[addr + i] & 0xFF;
 8001938:	f8b7 24b6 	ldrh.w	r2, [r7, #1206]	@ 0x4b6
 800193c:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8001940:	4413      	add	r3, r2
 8001942:	4ab4      	ldr	r2, [pc, #720]	@ (8001c14 <process_modbus_request+0x78c>)
 8001944:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001948:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 800194c:	3305      	adds	r3, #5
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	b2d1      	uxtb	r1, r2
 8001952:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001956:	f5a2 6293 	sub.w	r2, r2, #1176	@ 0x498
 800195a:	54d1      	strb	r1, [r2, r3]
                for (uint16_t i = 0; i < qty; i++) {
 800195c:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8001960:	3301      	adds	r3, #1
 8001962:	f8a7 34ec 	strh.w	r3, [r7, #1260]	@ 0x4ec
 8001966:	f8b7 24ec 	ldrh.w	r2, [r7, #1260]	@ 0x4ec
 800196a:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 800196e:	429a      	cmp	r2, r3
 8001970:	d3ce      	bcc.n	8001910 <process_modbus_request+0x488>
                }
                reply_data_len = 2 + qty * 2; // 单元ID + 函数码 + 字节数 + 数据
 8001972:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 8001976:	3301      	adds	r3, #1
 8001978:	b29b      	uxth	r3, r3
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
                cdc_debug_log("MODBUS_TCP", "Read success");
 8001980:	49a5      	ldr	r1, [pc, #660]	@ (8001c18 <process_modbus_request+0x790>)
 8001982:	48a6      	ldr	r0, [pc, #664]	@ (8001c1c <process_modbus_request+0x794>)
 8001984:	f7ff fbc8 	bl	8001118 <cdc_debug_log>
 8001988:	e2e8      	b.n	8001f5c <process_modbus_request+0xad4>
            }
        }
    } else if (fc == FC_WRITE_SINGLE) {
 800198a:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 800198e:	2b06      	cmp	r3, #6
 8001990:	f040 811c 	bne.w	8001bcc <process_modbus_request+0x744>
        cdc_debug_log("MODBUS_TCP", "Processing write single");
 8001994:	49a2      	ldr	r1, [pc, #648]	@ (8001c20 <process_modbus_request+0x798>)
 8001996:	48a1      	ldr	r0, [pc, #644]	@ (8001c1c <process_modbus_request+0x794>)
 8001998:	f7ff fbbe 	bl	8001118 <cdc_debug_log>
        
        // 检查数据长度是否足够：单元ID + 功能码 + 地址 + 值 = 1+1+2+2 = 6
        if (length < 6) {
 800199c:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d816      	bhi.n	80019d2 <process_modbus_request+0x54a>
            cdc_debug_log("MODBUS_TCP", "Write single request too short");
 80019a4:	499f      	ldr	r1, [pc, #636]	@ (8001c24 <process_modbus_request+0x79c>)
 80019a6:	489d      	ldr	r0, [pc, #628]	@ (8001c1c <process_modbus_request+0x794>)
 80019a8:	f7ff fbb6 	bl	8001118 <cdc_debug_log>
            reply[7] = fc + 0x80;  // 异常函数码
 80019ac:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80019b0:	3b80      	subs	r3, #128	@ 0x80
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80019b8:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80019bc:	71da      	strb	r2, [r3, #7]
            reply[8] = 0x03;       // 异常代码：非法数据值
 80019be:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80019c2:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80019c6:	2203      	movs	r2, #3
 80019c8:	721a      	strb	r2, [r3, #8]
            reply_data_len = 2;
 80019ca:	2302      	movs	r3, #2
 80019cc:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 80019d0:	e2c4      	b.n	8001f5c <process_modbus_request+0xad4>
        } else {
            uint16_t addr = (buf[offset+8] << 8) | buf[offset+9];   // 寄存器地址
 80019d2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80019d6:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	3308      	adds	r3, #8
 80019de:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80019e2:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	4413      	add	r3, r2
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80019f6:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	3309      	adds	r3, #9
 80019fe:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8001a02:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8001a06:	6809      	ldr	r1, [r1, #0]
 8001a08:	440b      	add	r3, r1
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
            uint16_t value = (buf[offset+10] << 8) | buf[offset+11]; // 要写入的值
 8001a16:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001a1a:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	330a      	adds	r3, #10
 8001a22:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001a26:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	b21a      	sxth	r2, r3
 8001a36:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001a3a:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	330b      	adds	r3, #11
 8001a42:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8001a46:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8001a4a:	6809      	ldr	r1, [r1, #0]
 8001a4c:	440b      	add	r3, r1
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	4313      	orrs	r3, r2
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	f8a7 34c2 	strh.w	r3, [r7, #1218]	@ 0x4c2
            
            char write_info[60];
            strcpy(write_info, "Write addr=");
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4a72      	ldr	r2, [pc, #456]	@ (8001c28 <process_modbus_request+0x7a0>)
 8001a60:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            int_to_str(addr, write_info + strlen(write_info), 10);
 8001a66:	f8b7 44c4 	ldrh.w	r4, [r7, #1220]	@ 0x4c4
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fbae 	bl	80001d0 <strlen>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4413      	add	r3, r2
 8001a7c:	220a      	movs	r2, #10
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4620      	mov	r0, r4
 8001a82:	f7ff fbc3 	bl	800120c <int_to_str>
            const char* val_prefix = " val=0x";
 8001a86:	4b69      	ldr	r3, [pc, #420]	@ (8001c2c <process_modbus_request+0x7a4>)
 8001a88:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
            strcat(write_info, val_prefix);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	@ 0x4bc
 8001a94:	4618      	mov	r0, r3
 8001a96:	f019 ffde 	bl	801ba56 <strcat>
            // 简单的十六进制转换
            char hex_str[5];
            hex_str[4] = '\0';
 8001a9a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001a9e:	f5a3 6394 	sub.w	r3, r3, #1184	@ 0x4a0
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	711a      	strb	r2, [r3, #4]
            for (int j = 3; j >= 0; j--) {
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 8001aac:	e027      	b.n	8001afe <process_modbus_request+0x676>
                int nibble = (value >> (j * 4)) & 0xF;
 8001aae:	f8b7 24c2 	ldrh.w	r2, [r7, #1218]	@ 0x4c2
 8001ab2:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	fa42 f303 	asr.w	r3, r2, r3
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	f8c7 34b8 	str.w	r3, [r7, #1208]	@ 0x4b8
                hex_str[3-j] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10);
 8001ac4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8001ac8:	2b09      	cmp	r3, #9
 8001aca:	dc05      	bgt.n	8001ad8 <process_modbus_request+0x650>
 8001acc:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	3330      	adds	r3, #48	@ 0x30
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	e004      	b.n	8001ae2 <process_modbus_request+0x65a>
 8001ad8:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	3337      	adds	r3, #55	@ 0x37
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	@ 0x4e8
 8001ae6:	f1c2 0203 	rsb	r2, r2, #3
 8001aea:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8001aee:	f5a1 6194 	sub.w	r1, r1, #1184	@ 0x4a0
 8001af2:	548b      	strb	r3, [r1, r2]
            for (int j = 3; j >= 0; j--) {
 8001af4:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 8001af8:	3b01      	subs	r3, #1
 8001afa:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 8001afe:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	dad3      	bge.n	8001aae <process_modbus_request+0x626>
            }
            strcat(write_info, hex_str);
 8001b06:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f019 ffa0 	bl	801ba56 <strcat>
            cdc_debug_log("MODBUS_TCP", write_info);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	483f      	ldr	r0, [pc, #252]	@ (8001c1c <process_modbus_request+0x794>)
 8001b1e:	f7ff fafb 	bl	8001118 <cdc_debug_log>
            
            // 验证地址范围
            if (addr >= 100) {
 8001b22:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8001b26:	2b63      	cmp	r3, #99	@ 0x63
 8001b28:	d916      	bls.n	8001b58 <process_modbus_request+0x6d0>
                cdc_debug_log("MODBUS_TCP", "Write address out of bounds");
 8001b2a:	4941      	ldr	r1, [pc, #260]	@ (8001c30 <process_modbus_request+0x7a8>)
 8001b2c:	483b      	ldr	r0, [pc, #236]	@ (8001c1c <process_modbus_request+0x794>)
 8001b2e:	f7ff faf3 	bl	8001118 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 8001b32:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8001b36:	3b80      	subs	r3, #128	@ 0x80
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001b3e:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001b42:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x02;       // 异常代码：非法数据地址
 8001b44:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001b48:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8001b50:	2302      	movs	r3, #2
 8001b52:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8001b56:	e201      	b.n	8001f5c <process_modbus_request+0xad4>
            } else {
                // 写入寄存器
                holding_regs[addr] = value;
 8001b58:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8001b5c:	492d      	ldr	r1, [pc, #180]	@ (8001c14 <process_modbus_request+0x78c>)
 8001b5e:	f8b7 24c2 	ldrh.w	r2, [r7, #1218]	@ 0x4c2
 8001b62:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                
                // 回显请求（标准Modbus写单个寄存器响应）
                reply[7] = fc;                           // 函数码
 8001b66:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001b6a:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001b6e:	f897 24de 	ldrb.w	r2, [r7, #1246]	@ 0x4de
 8001b72:	71da      	strb	r2, [r3, #7]
                reply[8] = (addr >> 8) & 0xFF;          // 地址高字节
 8001b74:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001b82:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001b86:	721a      	strb	r2, [r3, #8]
                reply[9] = addr & 0xFF;                 // 地址低字节
 8001b88:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001b92:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001b96:	725a      	strb	r2, [r3, #9]
                reply[10] = (value >> 8) & 0xFF;        // 值高字节
 8001b98:	f8b7 34c2 	ldrh.w	r3, [r7, #1218]	@ 0x4c2
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001ba6:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001baa:	729a      	strb	r2, [r3, #10]
                reply[11] = value & 0xFF;               // 值低字节
 8001bac:	f8b7 34c2 	ldrh.w	r3, [r7, #1218]	@ 0x4c2
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001bb6:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001bba:	72da      	strb	r2, [r3, #11]
                reply_data_len = 5; // 功能码 + 地址 + 值 = 1+2+2 = 5
 8001bbc:	2305      	movs	r3, #5
 8001bbe:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
                cdc_debug_log("MODBUS_TCP", "Write single success");
 8001bc2:	491c      	ldr	r1, [pc, #112]	@ (8001c34 <process_modbus_request+0x7ac>)
 8001bc4:	4815      	ldr	r0, [pc, #84]	@ (8001c1c <process_modbus_request+0x794>)
 8001bc6:	f7ff faa7 	bl	8001118 <cdc_debug_log>
 8001bca:	e1c7      	b.n	8001f5c <process_modbus_request+0xad4>
            }
        }
    } else if (fc == FC_WRITE_MULTIPLE) {
 8001bcc:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8001bd0:	2b10      	cmp	r3, #16
 8001bd2:	f040 81ad 	bne.w	8001f30 <process_modbus_request+0xaa8>
        cdc_debug_log("MODBUS_TCP", "Processing write multiple");
 8001bd6:	4918      	ldr	r1, [pc, #96]	@ (8001c38 <process_modbus_request+0x7b0>)
 8001bd8:	4810      	ldr	r0, [pc, #64]	@ (8001c1c <process_modbus_request+0x794>)
 8001bda:	f7ff fa9d 	bl	8001118 <cdc_debug_log>
        
        // 检查数据长度是否足够：单元ID + 功能码 + 起始地址 + 数量 + 字节数 = 1+1+2+2+1 = 7
        if (length < 7) {
 8001bde:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d82c      	bhi.n	8001c40 <process_modbus_request+0x7b8>
            cdc_debug_log("MODBUS_TCP", "Write multiple request too short");
 8001be6:	4915      	ldr	r1, [pc, #84]	@ (8001c3c <process_modbus_request+0x7b4>)
 8001be8:	480c      	ldr	r0, [pc, #48]	@ (8001c1c <process_modbus_request+0x794>)
 8001bea:	f7ff fa95 	bl	8001118 <cdc_debug_log>
            reply[7] = fc + 0x80;  // 异常函数码
 8001bee:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8001bf2:	3b80      	subs	r3, #128	@ 0x80
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001bfa:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001bfe:	71da      	strb	r2, [r3, #7]
            reply[8] = 0x03;       // 异常代码：非法数据值
 8001c00:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001c04:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001c08:	2203      	movs	r2, #3
 8001c0a:	721a      	strb	r2, [r3, #8]
            reply_data_len = 2;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8001c12:	e1a3      	b.n	8001f5c <process_modbus_request+0xad4>
 8001c14:	20000574 	.word	0x20000574
 8001c18:	0801d09c 	.word	0x0801d09c
 8001c1c:	0801cfd8 	.word	0x0801cfd8
 8001c20:	0801d0ac 	.word	0x0801d0ac
 8001c24:	0801d0c4 	.word	0x0801d0c4
 8001c28:	0801d0e4 	.word	0x0801d0e4
 8001c2c:	0801d0f0 	.word	0x0801d0f0
 8001c30:	0801d0f8 	.word	0x0801d0f8
 8001c34:	0801d114 	.word	0x0801d114
 8001c38:	0801d12c 	.word	0x0801d12c
 8001c3c:	0801d148 	.word	0x0801d148
        } else {
            uint16_t addr = (buf[offset+8] << 8) | buf[offset+9];   // 起始地址
 8001c40:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001c44:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	3308      	adds	r3, #8
 8001c4c:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001c50:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	021b      	lsls	r3, r3, #8
 8001c5e:	b21a      	sxth	r2, r3
 8001c60:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001c64:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	3309      	adds	r3, #9
 8001c6c:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8001c70:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8001c74:	6809      	ldr	r1, [r1, #0]
 8001c76:	440b      	add	r3, r1
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	f8a7 34d2 	strh.w	r3, [r7, #1234]	@ 0x4d2
            uint16_t qty = (buf[offset+10] << 8) | buf[offset+11];  // 寄存器数量
 8001c84:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001c88:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	330a      	adds	r3, #10
 8001c90:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001c94:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001ca8:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	330b      	adds	r3, #11
 8001cb0:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8001cb4:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8001cb8:	6809      	ldr	r1, [r1, #0]
 8001cba:	440b      	add	r3, r1
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	b21b      	sxth	r3, r3
 8001cc4:	f8a7 34d0 	strh.w	r3, [r7, #1232]	@ 0x4d0
            uint8_t byte_count = buf[offset+12];                    // 字节数
 8001cc8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001ccc:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	330c      	adds	r3, #12
 8001cd4:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001cd8:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
            
            char write_info[60];
            strcpy(write_info, "Write mult addr=");
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4a89      	ldr	r2, [pc, #548]	@ (8001f10 <process_modbus_request+0xa88>)
 8001cec:	461c      	mov	r4, r3
 8001cee:	4615      	mov	r5, r2
 8001cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf4:	682b      	ldr	r3, [r5, #0]
 8001cf6:	7023      	strb	r3, [r4, #0]
            int_to_str(addr, write_info + strlen(write_info), 10);
 8001cf8:	f8b7 44d2 	ldrh.w	r4, [r7, #1234]	@ 0x4d2
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fa65 	bl	80001d0 <strlen>
 8001d06:	4602      	mov	r2, r0
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4413      	add	r3, r2
 8001d0e:	220a      	movs	r2, #10
 8001d10:	4619      	mov	r1, r3
 8001d12:	4620      	mov	r0, r4
 8001d14:	f7ff fa7a 	bl	800120c <int_to_str>
            const char* qty_prefix = " qty=";
 8001d18:	4b7e      	ldr	r3, [pc, #504]	@ (8001f14 <process_modbus_request+0xa8c>)
 8001d1a:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
            strcat(write_info, qty_prefix);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	@ 0x4c8
 8001d26:	4618      	mov	r0, r3
 8001d28:	f019 fe95 	bl	801ba56 <strcat>
            int_to_str(qty, write_info + strlen(write_info), 10);
 8001d2c:	f8b7 44d0 	ldrh.w	r4, [r7, #1232]	@ 0x4d0
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fa4b 	bl	80001d0 <strlen>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	4413      	add	r3, r2
 8001d42:	220a      	movs	r2, #10
 8001d44:	4619      	mov	r1, r3
 8001d46:	4620      	mov	r0, r4
 8001d48:	f7ff fa60 	bl	800120c <int_to_str>
            cdc_debug_log("MODBUS_TCP", write_info);
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4619      	mov	r1, r3
 8001d52:	4871      	ldr	r0, [pc, #452]	@ (8001f18 <process_modbus_request+0xa90>)
 8001d54:	f7ff f9e0 	bl	8001118 <cdc_debug_log>
            
            // 验证参数
            if (qty == 0 || qty > 123 || byte_count != qty * 2) { // Modbus标准限制
 8001d58:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00a      	beq.n	8001d76 <process_modbus_request+0x8ee>
 8001d60:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8001d64:	2b7b      	cmp	r3, #123	@ 0x7b
 8001d66:	d806      	bhi.n	8001d76 <process_modbus_request+0x8ee>
 8001d68:	f897 24cf 	ldrb.w	r2, [r7, #1231]	@ 0x4cf
 8001d6c:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d016      	beq.n	8001da4 <process_modbus_request+0x91c>
                cdc_debug_log("MODBUS_TCP", "Invalid write multiple parameters");
 8001d76:	4969      	ldr	r1, [pc, #420]	@ (8001f1c <process_modbus_request+0xa94>)
 8001d78:	4867      	ldr	r0, [pc, #412]	@ (8001f18 <process_modbus_request+0xa90>)
 8001d7a:	f7ff f9cd 	bl	8001118 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 8001d7e:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8001d82:	3b80      	subs	r3, #128	@ 0x80
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001d8a:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001d8e:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x03;       // 异常代码：非法数据值
 8001d90:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001d94:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001d98:	2203      	movs	r2, #3
 8001d9a:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8001da2:	e0db      	b.n	8001f5c <process_modbus_request+0xad4>
            } else if (addr + qty > 100) { // 地址越界检查
 8001da4:	f8b7 24d2 	ldrh.w	r2, [r7, #1234]	@ 0x4d2
 8001da8:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8001dac:	4413      	add	r3, r2
 8001dae:	2b64      	cmp	r3, #100	@ 0x64
 8001db0:	dd16      	ble.n	8001de0 <process_modbus_request+0x958>
                cdc_debug_log("MODBUS_TCP", "Write multiple address out of bounds");
 8001db2:	495b      	ldr	r1, [pc, #364]	@ (8001f20 <process_modbus_request+0xa98>)
 8001db4:	4858      	ldr	r0, [pc, #352]	@ (8001f18 <process_modbus_request+0xa90>)
 8001db6:	f7ff f9af 	bl	8001118 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 8001dba:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8001dbe:	3b80      	subs	r3, #128	@ 0x80
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001dc6:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001dca:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x02;       // 异常代码：非法数据地址
 8001dcc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001dd0:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8001dde:	e0bd      	b.n	8001f5c <process_modbus_request+0xad4>
            } else if (length < 7 + byte_count) { // 检查是否有足够的数据
 8001de0:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 8001de4:	1d9a      	adds	r2, r3, #6
 8001de6:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 8001dea:	429a      	cmp	r2, r3
 8001dec:	db16      	blt.n	8001e1c <process_modbus_request+0x994>
                cdc_debug_log("MODBUS_TCP", "Write multiple data incomplete");
 8001dee:	494d      	ldr	r1, [pc, #308]	@ (8001f24 <process_modbus_request+0xa9c>)
 8001df0:	4849      	ldr	r0, [pc, #292]	@ (8001f18 <process_modbus_request+0xa90>)
 8001df2:	f7ff f991 	bl	8001118 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 8001df6:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8001dfa:	3b80      	subs	r3, #128	@ 0x80
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001e02:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001e06:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x03;       // 异常代码：非法数据值
 8001e08:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001e0c:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001e10:	2203      	movs	r2, #3
 8001e12:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8001e14:	2302      	movs	r3, #2
 8001e16:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8001e1a:	e09f      	b.n	8001f5c <process_modbus_request+0xad4>
            } else {
                // 写入多个寄存器
                for (uint16_t i = 0; i < qty; i++) {
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f8a7 34e6 	strh.w	r3, [r7, #1254]	@ 0x4e6
 8001e22:	e03c      	b.n	8001e9e <process_modbus_request+0xa16>
                    uint16_t value = (buf[offset+13+i*2] << 8) | buf[offset+14+i*2];
 8001e24:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001e28:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	f103 020d 	add.w	r2, r3, #13
 8001e32:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001e40:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	b21b      	sxth	r3, r3
 8001e4c:	021b      	lsls	r3, r3, #8
 8001e4e:	b21a      	sxth	r2, r3
 8001e50:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001e54:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	f103 010e 	add.w	r1, r3, #14
 8001e5e:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	440b      	add	r3, r1
 8001e66:	4619      	mov	r1, r3
 8001e68:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001e6c:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	440b      	add	r3, r1
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	b21b      	sxth	r3, r3
 8001e7c:	f8a7 34c6 	strh.w	r3, [r7, #1222]	@ 0x4c6
                    holding_regs[addr + i] = value;
 8001e80:	f8b7 24d2 	ldrh.w	r2, [r7, #1234]	@ 0x4d2
 8001e84:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 8001e88:	4413      	add	r3, r2
 8001e8a:	4927      	ldr	r1, [pc, #156]	@ (8001f28 <process_modbus_request+0xaa0>)
 8001e8c:	f8b7 24c6 	ldrh.w	r2, [r7, #1222]	@ 0x4c6
 8001e90:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (uint16_t i = 0; i < qty; i++) {
 8001e94:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 8001e98:	3301      	adds	r3, #1
 8001e9a:	f8a7 34e6 	strh.w	r3, [r7, #1254]	@ 0x4e6
 8001e9e:	f8b7 24e6 	ldrh.w	r2, [r7, #1254]	@ 0x4e6
 8001ea2:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d3bc      	bcc.n	8001e24 <process_modbus_request+0x99c>
                }
                
                // 响应：功能码 + 起始地址 + 寄存器数量
                reply[7] = fc;                          // 函数码
 8001eaa:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001eae:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001eb2:	f897 24de 	ldrb.w	r2, [r7, #1246]	@ 0x4de
 8001eb6:	71da      	strb	r2, [r3, #7]
                reply[8] = (addr >> 8) & 0xFF;         // 起始地址高字节
 8001eb8:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001ec6:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001eca:	721a      	strb	r2, [r3, #8]
                reply[9] = addr & 0xFF;                // 起始地址低字节
 8001ecc:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001ed6:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001eda:	725a      	strb	r2, [r3, #9]
                reply[10] = (qty >> 8) & 0xFF;         // 数量高字节
 8001edc:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001eea:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001eee:	729a      	strb	r2, [r3, #10]
                reply[11] = qty & 0xFF;                // 数量低字节
 8001ef0:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001efa:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001efe:	72da      	strb	r2, [r3, #11]
                reply_data_len = 5; // 功能码 + 地址 + 数量 = 1+2+2 = 5
 8001f00:	2305      	movs	r3, #5
 8001f02:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
                cdc_debug_log("MODBUS_TCP", "Write multiple success");
 8001f06:	4909      	ldr	r1, [pc, #36]	@ (8001f2c <process_modbus_request+0xaa4>)
 8001f08:	4803      	ldr	r0, [pc, #12]	@ (8001f18 <process_modbus_request+0xa90>)
 8001f0a:	f7ff f905 	bl	8001118 <cdc_debug_log>
 8001f0e:	e025      	b.n	8001f5c <process_modbus_request+0xad4>
 8001f10:	0801d16c 	.word	0x0801d16c
 8001f14:	0801d068 	.word	0x0801d068
 8001f18:	0801cfd8 	.word	0x0801cfd8
 8001f1c:	0801d180 	.word	0x0801d180
 8001f20:	0801d1a4 	.word	0x0801d1a4
 8001f24:	0801d1cc 	.word	0x0801d1cc
 8001f28:	20000574 	.word	0x20000574
 8001f2c:	0801d1ec 	.word	0x0801d1ec
            }
        }
    } else {
        // 其他功能码暂时返回不支持
        cdc_debug_log("MODBUS_TCP", "Unsupported function code");
 8001f30:	4974      	ldr	r1, [pc, #464]	@ (8002104 <process_modbus_request+0xc7c>)
 8001f32:	4875      	ldr	r0, [pc, #468]	@ (8002108 <process_modbus_request+0xc80>)
 8001f34:	f7ff f8f0 	bl	8001118 <cdc_debug_log>
        reply[7] = fc + 0x80;  // 异常函数码
 8001f38:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8001f3c:	3b80      	subs	r3, #128	@ 0x80
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001f44:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001f48:	71da      	strb	r2, [r3, #7]
        reply[8] = 0x01;       // 异常代码：非法函数码
 8001f4a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001f4e:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001f52:	2201      	movs	r2, #1
 8001f54:	721a      	strb	r2, [r3, #8]
        reply_data_len = 2;
 8001f56:	2302      	movs	r3, #2
 8001f58:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
    }

    // 设置长度字段 (包含单元ID + 数据部分)
    uint16_t total_length = reply_data_len + 1; // +1 for unit_id
 8001f5c:	f8b7 34ee 	ldrh.w	r3, [r7, #1262]	@ 0x4ee
 8001f60:	3301      	adds	r3, #1
 8001f62:	f8a7 34ae 	strh.w	r3, [r7, #1198]	@ 0x4ae
    reply[4] = (total_length >> 8) & 0xFF; 
 8001f66:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	@ 0x4ae
 8001f6a:	0a1b      	lsrs	r3, r3, #8
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001f74:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001f78:	711a      	strb	r2, [r3, #4]
    reply[5] = total_length & 0xFF;
 8001f7a:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	@ 0x4ae
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001f84:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8001f88:	715a      	strb	r2, [r3, #5]
    
    cdc_debug_log("MODBUS_TCP", "Sending reply");
 8001f8a:	4960      	ldr	r1, [pc, #384]	@ (800210c <process_modbus_request+0xc84>)
 8001f8c:	485e      	ldr	r0, [pc, #376]	@ (8002108 <process_modbus_request+0xc80>)
 8001f8e:	f7ff f8c3 	bl	8001118 <cdc_debug_log>
    
    // 发送完整的TCP帧 (6字节头 + 数据部分)
    uint16_t total_frame_len = 6 + total_length;
 8001f92:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	@ 0x4ae
 8001f96:	3306      	adds	r3, #6
 8001f98:	f8a7 34ac 	strh.w	r3, [r7, #1196]	@ 0x4ac
    
    // 检查TCP发送缓冲区是否有足够空间
    u16_t available_space = tcp_sndbuf(tpcb);
 8001f9c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001fa0:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8001faa:	f8a7 34aa 	strh.w	r3, [r7, #1194]	@ 0x4aa
    if (available_space < total_frame_len) {
 8001fae:	f8b7 24aa 	ldrh.w	r2, [r7, #1194]	@ 0x4aa
 8001fb2:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	@ 0x4ac
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d223      	bcs.n	8002002 <process_modbus_request+0xb7a>
        char space_msg[50];
        strcpy(space_msg, "TCP buffer low: available=");
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4a54      	ldr	r2, [pc, #336]	@ (8002110 <process_modbus_request+0xc88>)
 8001fc0:	461c      	mov	r4, r3
 8001fc2:	4615      	mov	r5, r2
 8001fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fcc:	c403      	stmia	r4!, {r0, r1}
 8001fce:	8022      	strh	r2, [r4, #0]
 8001fd0:	3402      	adds	r4, #2
 8001fd2:	0c13      	lsrs	r3, r2, #16
 8001fd4:	7023      	strb	r3, [r4, #0]
        int_to_str(available_space, space_msg + strlen(space_msg), 10);
 8001fd6:	f8b7 44aa 	ldrh.w	r4, [r7, #1194]	@ 0x4aa
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe f8f6 	bl	80001d0 <strlen>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	4413      	add	r3, r2
 8001fec:	220a      	movs	r2, #10
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	f7ff f90b 	bl	800120c <int_to_str>
        cdc_debug_log("MODBUS_TCP", space_msg);
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4842      	ldr	r0, [pc, #264]	@ (8002108 <process_modbus_request+0xc80>)
 8001ffe:	f7ff f88b 	bl	8001118 <cdc_debug_log>
        // 仍然尝试发送，但记录警告
    }
    
    err_t write_err = tcp_write(tpcb, reply, total_frame_len, TCP_WRITE_FLAG_COPY);
 8002002:	f8b7 24ac 	ldrh.w	r2, [r7, #1196]	@ 0x4ac
 8002006:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800200a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800200e:	f2a3 40e4 	subw	r0, r3, #1252	@ 0x4e4
 8002012:	2301      	movs	r3, #1
 8002014:	6800      	ldr	r0, [r0, #0]
 8002016:	f014 f979 	bl	801630c <tcp_write>
 800201a:	4603      	mov	r3, r0
 800201c:	f887 34a9 	strb.w	r3, [r7, #1193]	@ 0x4a9
    if (write_err != ERR_OK) {
 8002020:	f997 34a9 	ldrsb.w	r3, [r7, #1193]	@ 0x4a9
 8002024:	2b00      	cmp	r3, #0
 8002026:	d02f      	beq.n	8002088 <process_modbus_request+0xc00>
        char write_err_msg[40];
        strcpy(write_err_msg, "TCP write failed err=");
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4a39      	ldr	r2, [pc, #228]	@ (8002114 <process_modbus_request+0xc8c>)
 800202e:	461c      	mov	r4, r3
 8002030:	4615      	mov	r5, r2
 8002032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002036:	e895 0003 	ldmia.w	r5, {r0, r1}
 800203a:	6020      	str	r0, [r4, #0]
 800203c:	3404      	adds	r4, #4
 800203e:	8021      	strh	r1, [r4, #0]
        int_to_str(write_err, write_err_msg + strlen(write_err_msg), 10);
 8002040:	f997 44a9 	ldrsb.w	r4, [r7, #1193]	@ 0x4a9
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe f8c1 	bl	80001d0 <strlen>
 800204e:	4602      	mov	r2, r0
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	4413      	add	r3, r2
 8002056:	220a      	movs	r2, #10
 8002058:	4619      	mov	r1, r3
 800205a:	4620      	mov	r0, r4
 800205c:	f7ff f8d6 	bl	800120c <int_to_str>
        cdc_debug_log("MODBUS_TCP", write_err_msg);
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	4619      	mov	r1, r3
 8002066:	4828      	ldr	r0, [pc, #160]	@ (8002108 <process_modbus_request+0xc80>)
 8002068:	f7ff f856 	bl	8001118 <cdc_debug_log>
        
        // 如果发送缓冲区满了，强制输出
        if (write_err == ERR_MEM) {
 800206c:	f997 34a9 	ldrsb.w	r3, [r7, #1193]	@ 0x4a9
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d106      	bne.n	8002084 <process_modbus_request+0xbfc>
            tcp_output(tpcb);
 8002076:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800207a:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	f014 ff2e 	bl	8016ee0 <tcp_output>
        }
        return ERR_OK; // 即使写入失败也返回OK，避免连接中断
 8002084:	2300      	movs	r3, #0
 8002086:	e038      	b.n	80020fa <process_modbus_request+0xc72>
    }
    
    err_t output_err = tcp_output(tpcb);
 8002088:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800208c:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	f014 ff25 	bl	8016ee0 <tcp_output>
 8002096:	4603      	mov	r3, r0
 8002098:	f887 34a8 	strb.w	r3, [r7, #1192]	@ 0x4a8
    if (output_err != ERR_OK) {
 800209c:	f997 34a8 	ldrsb.w	r3, [r7, #1192]	@ 0x4a8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d025      	beq.n	80020f0 <process_modbus_request+0xc68>
        char output_err_msg[40];
        strcpy(output_err_msg, "TCP output failed err=");
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002118 <process_modbus_request+0xc90>)
 80020aa:	461c      	mov	r4, r3
 80020ac:	4615      	mov	r5, r2
 80020ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020b6:	6020      	str	r0, [r4, #0]
 80020b8:	3404      	adds	r4, #4
 80020ba:	8021      	strh	r1, [r4, #0]
 80020bc:	3402      	adds	r4, #2
 80020be:	0c0b      	lsrs	r3, r1, #16
 80020c0:	7023      	strb	r3, [r4, #0]
        int_to_str(output_err, output_err_msg + strlen(output_err_msg), 10);
 80020c2:	f997 44a8 	ldrsb.w	r4, [r7, #1192]	@ 0x4a8
 80020c6:	f107 0314 	add.w	r3, r7, #20
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe f880 	bl	80001d0 <strlen>
 80020d0:	4602      	mov	r2, r0
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	4413      	add	r3, r2
 80020d8:	220a      	movs	r2, #10
 80020da:	4619      	mov	r1, r3
 80020dc:	4620      	mov	r0, r4
 80020de:	f7ff f895 	bl	800120c <int_to_str>
        cdc_debug_log("MODBUS_TCP", output_err_msg);
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	4619      	mov	r1, r3
 80020e8:	4807      	ldr	r0, [pc, #28]	@ (8002108 <process_modbus_request+0xc80>)
 80020ea:	f7ff f815 	bl	8001118 <cdc_debug_log>
 80020ee:	e003      	b.n	80020f8 <process_modbus_request+0xc70>
    } else {
        cdc_debug_log("MODBUS_TCP", "Reply sent successfully");
 80020f0:	490a      	ldr	r1, [pc, #40]	@ (800211c <process_modbus_request+0xc94>)
 80020f2:	4805      	ldr	r0, [pc, #20]	@ (8002108 <process_modbus_request+0xc80>)
 80020f4:	f7ff f810 	bl	8001118 <cdc_debug_log>
    }
    
    return ERR_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	f507 679e 	add.w	r7, r7, #1264	@ 0x4f0
 8002100:	46bd      	mov	sp, r7
 8002102:	bdb0      	pop	{r4, r5, r7, pc}
 8002104:	0801d204 	.word	0x0801d204
 8002108:	0801cfd8 	.word	0x0801cfd8
 800210c:	0801d220 	.word	0x0801d220
 8002110:	0801d230 	.word	0x0801d230
 8002114:	0801d24c 	.word	0x0801d24c
 8002118:	0801d264 	.word	0x0801d264
 800211c:	0801d27c 	.word	0x0801d27c

08002120 <modbus_tcp_init>:

// 初始化TCP Server
void modbus_tcp_init(void) {
 8002120:	b5b0      	push	{r4, r5, r7, lr}
 8002122:	b0ac      	sub	sp, #176	@ 0xb0
 8002124:	af00      	add	r7, sp, #0
    // 首先清零所有寄存器
    for (int i = 0; i < 100; i++) {
 8002126:	2300      	movs	r3, #0
 8002128:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800212c:	e00a      	b.n	8002144 <modbus_tcp_init+0x24>
        holding_regs[i] = 0;
 800212e:	4a8f      	ldr	r2, [pc, #572]	@ (800236c <modbus_tcp_init+0x24c>)
 8002130:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002134:	2100      	movs	r1, #0
 8002136:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 100; i++) {
 800213a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800213e:	3301      	adds	r3, #1
 8002140:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002148:	2b63      	cmp	r3, #99	@ 0x63
 800214a:	ddf0      	ble.n	800212e <modbus_tcp_init+0xe>
    }
    

    
    cdc_debug_log("MODBUS_TCP", "Clearing and initializing registers");
 800214c:	4988      	ldr	r1, [pc, #544]	@ (8002370 <modbus_tcp_init+0x250>)
 800214e:	4889      	ldr	r0, [pc, #548]	@ (8002374 <modbus_tcp_init+0x254>)
 8002150:	f7fe ffe2 	bl	8001118 <cdc_debug_log>
    
    // 验证寄存器初始值并输出调试信息
    char reg_info[80];
    for (int i = 0; i < 4; i++) {
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800215a:	e09f      	b.n	800229c <modbus_tcp_init+0x17c>
        strcpy(reg_info, "Reg[");
 800215c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002160:	4a85      	ldr	r2, [pc, #532]	@ (8002378 <modbus_tcp_init+0x258>)
 8002162:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002166:	6018      	str	r0, [r3, #0]
 8002168:	3304      	adds	r3, #4
 800216a:	7019      	strb	r1, [r3, #0]
        int_to_str(i, reg_info + strlen(reg_info), 10);
 800216c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe f82d 	bl	80001d0 <strlen>
 8002176:	4602      	mov	r2, r0
 8002178:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800217c:	4413      	add	r3, r2
 800217e:	220a      	movs	r2, #10
 8002180:	4619      	mov	r1, r3
 8002182:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8002186:	f7ff f841 	bl	800120c <int_to_str>
        strcat(reg_info, "]=0x");
 800218a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe f81e 	bl	80001d0 <strlen>
 8002194:	4603      	mov	r3, r0
 8002196:	461a      	mov	r2, r3
 8002198:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800219c:	4413      	add	r3, r2
 800219e:	4a77      	ldr	r2, [pc, #476]	@ (800237c <modbus_tcp_init+0x25c>)
 80021a0:	6810      	ldr	r0, [r2, #0]
 80021a2:	6018      	str	r0, [r3, #0]
 80021a4:	7912      	ldrb	r2, [r2, #4]
 80021a6:	711a      	strb	r2, [r3, #4]
        // 简单的十六进制转换
        uint16_t val = holding_regs[i];
 80021a8:	4a70      	ldr	r2, [pc, #448]	@ (800236c <modbus_tcp_init+0x24c>)
 80021aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021b2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
        char hex_str[5];
        hex_str[4] = '\0';
 80021b6:	2300      	movs	r3, #0
 80021b8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        for (int j = 3; j >= 0; j--) {
 80021bc:	2303      	movs	r3, #3
 80021be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80021c2:	e026      	b.n	8002212 <modbus_tcp_init+0xf2>
            int nibble = (val >> (j * 4)) & 0xF;
 80021c4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 80021c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	fa42 f303 	asr.w	r3, r2, r3
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            hex_str[3-j] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10);
 80021da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021de:	2b09      	cmp	r3, #9
 80021e0:	dc05      	bgt.n	80021ee <modbus_tcp_init+0xce>
 80021e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	3330      	adds	r3, #48	@ 0x30
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	e004      	b.n	80021f8 <modbus_tcp_init+0xd8>
 80021ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	3337      	adds	r3, #55	@ 0x37
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80021fc:	f1c2 0203 	rsb	r2, r2, #3
 8002200:	32b0      	adds	r2, #176	@ 0xb0
 8002202:	443a      	add	r2, r7
 8002204:	f802 3c78 	strb.w	r3, [r2, #-120]
        for (int j = 3; j >= 0; j--) {
 8002208:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800220c:	3b01      	subs	r3, #1
 800220e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002216:	2b00      	cmp	r3, #0
 8002218:	dad4      	bge.n	80021c4 <modbus_tcp_init+0xa4>
        }
        strcat(reg_info, hex_str);
 800221a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800221e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f019 fc16 	bl	801ba56 <strcat>
        strcat(reg_info, " (");
 800222a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800222e:	4618      	mov	r0, r3
 8002230:	f7fd ffce 	bl	80001d0 <strlen>
 8002234:	4603      	mov	r3, r0
 8002236:	461a      	mov	r2, r3
 8002238:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800223c:	4413      	add	r3, r2
 800223e:	4a50      	ldr	r2, [pc, #320]	@ (8002380 <modbus_tcp_init+0x260>)
 8002240:	8811      	ldrh	r1, [r2, #0]
 8002242:	7892      	ldrb	r2, [r2, #2]
 8002244:	8019      	strh	r1, [r3, #0]
 8002246:	709a      	strb	r2, [r3, #2]
        int_to_str(val, reg_info + strlen(reg_info), 10);
 8002248:	f8b7 4096 	ldrh.w	r4, [r7, #150]	@ 0x96
 800224c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002250:	4618      	mov	r0, r3
 8002252:	f7fd ffbd 	bl	80001d0 <strlen>
 8002256:	4602      	mov	r2, r0
 8002258:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800225c:	4413      	add	r3, r2
 800225e:	220a      	movs	r2, #10
 8002260:	4619      	mov	r1, r3
 8002262:	4620      	mov	r0, r4
 8002264:	f7fe ffd2 	bl	800120c <int_to_str>
        strcat(reg_info, ")");
 8002268:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800226c:	4618      	mov	r0, r3
 800226e:	f7fd ffaf 	bl	80001d0 <strlen>
 8002272:	4603      	mov	r3, r0
 8002274:	461a      	mov	r2, r3
 8002276:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800227a:	4413      	add	r3, r2
 800227c:	4941      	ldr	r1, [pc, #260]	@ (8002384 <modbus_tcp_init+0x264>)
 800227e:	461a      	mov	r2, r3
 8002280:	460b      	mov	r3, r1
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	8013      	strh	r3, [r2, #0]
        cdc_debug_log("MODBUS_TCP", reg_info);
 8002286:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800228a:	4619      	mov	r1, r3
 800228c:	4839      	ldr	r0, [pc, #228]	@ (8002374 <modbus_tcp_init+0x254>)
 800228e:	f7fe ff43 	bl	8001118 <cdc_debug_log>
    for (int i = 0; i < 4; i++) {
 8002292:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002296:	3301      	adds	r3, #1
 8002298:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800229c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	f77f af5b 	ble.w	800215c <modbus_tcp_init+0x3c>
    }
    
    cdc_debug_log("MODBUS_TCP", "Register initialization verified");
 80022a6:	4938      	ldr	r1, [pc, #224]	@ (8002388 <modbus_tcp_init+0x268>)
 80022a8:	4832      	ldr	r0, [pc, #200]	@ (8002374 <modbus_tcp_init+0x254>)
 80022aa:	f7fe ff35 	bl	8001118 <cdc_debug_log>
    
    struct tcp_pcb *tpcb = tcp_new();
 80022ae:	f011 f92b 	bl	8013508 <tcp_new>
 80022b2:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    if (tpcb == NULL) {
 80022b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d104      	bne.n	80022c8 <modbus_tcp_init+0x1a8>
        cdc_debug_log("MODBUS_TCP", "Failed to create TCP PCB");
 80022be:	4933      	ldr	r1, [pc, #204]	@ (800238c <modbus_tcp_init+0x26c>)
 80022c0:	482c      	ldr	r0, [pc, #176]	@ (8002374 <modbus_tcp_init+0x254>)
 80022c2:	f7fe ff29 	bl	8001118 <cdc_debug_log>
        return;
 80022c6:	e04e      	b.n	8002366 <modbus_tcp_init+0x246>
    }
    
    err_t bind_err = tcp_bind(tpcb, IP_ADDR_ANY, 502); // Modbus TCP端口502
 80022c8:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 80022cc:	4930      	ldr	r1, [pc, #192]	@ (8002390 <modbus_tcp_init+0x270>)
 80022ce:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80022d2:	f010 f873 	bl	80123bc <tcp_bind>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    if (bind_err != ERR_OK) {
 80022dc:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d027      	beq.n	8002334 <modbus_tcp_init+0x214>
        char err_msg[50];
        const char* prefix = "TCP bind failed: ";
 80022e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002394 <modbus_tcp_init+0x274>)
 80022e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        strcpy(err_msg, prefix);
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80022f0:	4618      	mov	r0, r3
 80022f2:	f019 fc8a 	bl	801bc0a <strcpy>
        int_to_str(bind_err, err_msg + strlen(prefix), sizeof(err_msg) - strlen(prefix));
 80022f6:	f997 409f 	ldrsb.w	r4, [r7, #159]	@ 0x9f
 80022fa:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80022fe:	f7fd ff67 	bl	80001d0 <strlen>
 8002302:	4602      	mov	r2, r0
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	189d      	adds	r5, r3, r2
 8002308:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800230c:	f7fd ff60 	bl	80001d0 <strlen>
 8002310:	4603      	mov	r3, r0
 8002312:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
 8002316:	461a      	mov	r2, r3
 8002318:	4629      	mov	r1, r5
 800231a:	4620      	mov	r0, r4
 800231c:	f7fe ff76 	bl	800120c <int_to_str>
        cdc_debug_log("MODBUS_TCP", err_msg);
 8002320:	1d3b      	adds	r3, r7, #4
 8002322:	4619      	mov	r1, r3
 8002324:	4813      	ldr	r0, [pc, #76]	@ (8002374 <modbus_tcp_init+0x254>)
 8002326:	f7fe fef7 	bl	8001118 <cdc_debug_log>
        tcp_close(tpcb);
 800232a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800232e:	f00f ff4f 	bl	80121d0 <tcp_close>
 8002332:	e018      	b.n	8002366 <modbus_tcp_init+0x246>
        return;
    }
    
    tpcb = tcp_listen(tpcb);
 8002334:	21ff      	movs	r1, #255	@ 0xff
 8002336:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800233a:	f010 f8f7 	bl	801252c <tcp_listen_with_backlog>
 800233e:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    if (tpcb == NULL) {
 8002342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d104      	bne.n	8002354 <modbus_tcp_init+0x234>
        cdc_debug_log("MODBUS_TCP", "Failed to set TCP to listen mode");
 800234a:	4913      	ldr	r1, [pc, #76]	@ (8002398 <modbus_tcp_init+0x278>)
 800234c:	4809      	ldr	r0, [pc, #36]	@ (8002374 <modbus_tcp_init+0x254>)
 800234e:	f7fe fee3 	bl	8001118 <cdc_debug_log>
        return;
 8002352:	e008      	b.n	8002366 <modbus_tcp_init+0x246>
    }
    
    tcp_accept(tpcb, modbus_tcp_accept);
 8002354:	4911      	ldr	r1, [pc, #68]	@ (800239c <modbus_tcp_init+0x27c>)
 8002356:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800235a:	f011 f943 	bl	80135e4 <tcp_accept>
    cdc_debug_log("MODBUS_TCP", "TCP server started on port 502");
 800235e:	4910      	ldr	r1, [pc, #64]	@ (80023a0 <modbus_tcp_init+0x280>)
 8002360:	4804      	ldr	r0, [pc, #16]	@ (8002374 <modbus_tcp_init+0x254>)
 8002362:	f7fe fed9 	bl	8001118 <cdc_debug_log>
}
 8002366:	37b0      	adds	r7, #176	@ 0xb0
 8002368:	46bd      	mov	sp, r7
 800236a:	bdb0      	pop	{r4, r5, r7, pc}
 800236c:	20000574 	.word	0x20000574
 8002370:	0801d294 	.word	0x0801d294
 8002374:	0801cfd8 	.word	0x0801cfd8
 8002378:	0801d2b8 	.word	0x0801d2b8
 800237c:	0801d2c0 	.word	0x0801d2c0
 8002380:	0801d2c8 	.word	0x0801d2c8
 8002384:	0801d2cc 	.word	0x0801d2cc
 8002388:	0801d2d0 	.word	0x0801d2d0
 800238c:	0801d2f4 	.word	0x0801d2f4
 8002390:	08020f84 	.word	0x08020f84
 8002394:	0801d310 	.word	0x0801d310
 8002398:	0801d324 	.word	0x0801d324
 800239c:	08002475 	.word	0x08002475
 80023a0:	0801d348 	.word	0x0801d348

080023a4 <modbus_tcp_sent>:

// 发送确认回调
err_t modbus_tcp_sent(void *arg, struct tcp_pcb *tpcb, u16_t len) {
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b08f      	sub	sp, #60	@ 0x3c
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	4613      	mov	r3, r2
 80023b0:	80fb      	strh	r3, [r7, #6]
    // 简单记录发送确认
    char sent_msg[40];
    strcpy(sent_msg, "TCP sent ");
 80023b2:	f107 0310 	add.w	r3, r7, #16
 80023b6:	4a17      	ldr	r2, [pc, #92]	@ (8002414 <modbus_tcp_sent+0x70>)
 80023b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80023ba:	c303      	stmia	r3!, {r0, r1}
 80023bc:	801a      	strh	r2, [r3, #0]
    int_to_str(len, sent_msg + strlen(sent_msg), 10);
 80023be:	88fc      	ldrh	r4, [r7, #6]
 80023c0:	f107 0310 	add.w	r3, r7, #16
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fd ff03 	bl	80001d0 <strlen>
 80023ca:	4602      	mov	r2, r0
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	4413      	add	r3, r2
 80023d2:	220a      	movs	r2, #10
 80023d4:	4619      	mov	r1, r3
 80023d6:	4620      	mov	r0, r4
 80023d8:	f7fe ff18 	bl	800120c <int_to_str>
    strcat(sent_msg, " bytes");
 80023dc:	f107 0310 	add.w	r3, r7, #16
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fd fef5 	bl	80001d0 <strlen>
 80023e6:	4603      	mov	r3, r0
 80023e8:	461a      	mov	r2, r3
 80023ea:	f107 0310 	add.w	r3, r7, #16
 80023ee:	4413      	add	r3, r2
 80023f0:	4a09      	ldr	r2, [pc, #36]	@ (8002418 <modbus_tcp_sent+0x74>)
 80023f2:	6810      	ldr	r0, [r2, #0]
 80023f4:	6018      	str	r0, [r3, #0]
 80023f6:	8891      	ldrh	r1, [r2, #4]
 80023f8:	7992      	ldrb	r2, [r2, #6]
 80023fa:	8099      	strh	r1, [r3, #4]
 80023fc:	719a      	strb	r2, [r3, #6]
    cdc_debug_log("MODBUS_TCP", sent_msg);
 80023fe:	f107 0310 	add.w	r3, r7, #16
 8002402:	4619      	mov	r1, r3
 8002404:	4805      	ldr	r0, [pc, #20]	@ (800241c <modbus_tcp_sent+0x78>)
 8002406:	f7fe fe87 	bl	8001118 <cdc_debug_log>
    return ERR_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	373c      	adds	r7, #60	@ 0x3c
 8002410:	46bd      	mov	sp, r7
 8002412:	bd90      	pop	{r4, r7, pc}
 8002414:	0801d368 	.word	0x0801d368
 8002418:	0801d374 	.word	0x0801d374
 800241c:	0801cfd8 	.word	0x0801cfd8

08002420 <modbus_tcp_error>:

// 连接错误回调
void modbus_tcp_error(void *arg, err_t err) {
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b08d      	sub	sp, #52	@ 0x34
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	70fb      	strb	r3, [r7, #3]
    char err_msg[40];
    strcpy(err_msg, "TCP error: ");
 800242c:	f107 0308 	add.w	r3, r7, #8
 8002430:	4a0e      	ldr	r2, [pc, #56]	@ (800246c <modbus_tcp_error+0x4c>)
 8002432:	ca07      	ldmia	r2, {r0, r1, r2}
 8002434:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int_to_str(err, err_msg + strlen(err_msg), 10);
 8002438:	f997 4003 	ldrsb.w	r4, [r7, #3]
 800243c:	f107 0308 	add.w	r3, r7, #8
 8002440:	4618      	mov	r0, r3
 8002442:	f7fd fec5 	bl	80001d0 <strlen>
 8002446:	4602      	mov	r2, r0
 8002448:	f107 0308 	add.w	r3, r7, #8
 800244c:	4413      	add	r3, r2
 800244e:	220a      	movs	r2, #10
 8002450:	4619      	mov	r1, r3
 8002452:	4620      	mov	r0, r4
 8002454:	f7fe feda 	bl	800120c <int_to_str>
    cdc_debug_log("MODBUS_TCP", err_msg);
 8002458:	f107 0308 	add.w	r3, r7, #8
 800245c:	4619      	mov	r1, r3
 800245e:	4804      	ldr	r0, [pc, #16]	@ (8002470 <modbus_tcp_error+0x50>)
 8002460:	f7fe fe5a 	bl	8001118 <cdc_debug_log>
}
 8002464:	bf00      	nop
 8002466:	3734      	adds	r7, #52	@ 0x34
 8002468:	46bd      	mov	sp, r7
 800246a:	bd90      	pop	{r4, r7, pc}
 800246c:	0801d37c 	.word	0x0801d37c
 8002470:	0801cfd8 	.word	0x0801cfd8

08002474 <modbus_tcp_accept>:

// Accept回调
err_t modbus_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	4613      	mov	r3, r2
 8002480:	71fb      	strb	r3, [r7, #7]
    if (err != ERR_OK || newpcb == NULL) {
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d102      	bne.n	8002490 <modbus_tcp_accept+0x1c>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d106      	bne.n	800249e <modbus_tcp_accept+0x2a>
        cdc_debug_log("MODBUS_TCP", "Accept failed");
 8002490:	4911      	ldr	r1, [pc, #68]	@ (80024d8 <modbus_tcp_accept+0x64>)
 8002492:	4812      	ldr	r0, [pc, #72]	@ (80024dc <modbus_tcp_accept+0x68>)
 8002494:	f7fe fe40 	bl	8001118 <cdc_debug_log>
        return err;
 8002498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249c:	e017      	b.n	80024ce <modbus_tcp_accept+0x5a>
    }
    
    cdc_debug_log("MODBUS_TCP", "Client connected");
 800249e:	4910      	ldr	r1, [pc, #64]	@ (80024e0 <modbus_tcp_accept+0x6c>)
 80024a0:	480e      	ldr	r0, [pc, #56]	@ (80024dc <modbus_tcp_accept+0x68>)
 80024a2:	f7fe fe39 	bl	8001118 <cdc_debug_log>
    
    // 设置连接参数
    tcp_setprio(newpcb, TCP_PRIO_MIN);
 80024a6:	2101      	movs	r1, #1
 80024a8:	68b8      	ldr	r0, [r7, #8]
 80024aa:	f010 fe3b 	bl	8013124 <tcp_setprio>
    tcp_recv(newpcb, modbus_tcp_recv);
 80024ae:	490d      	ldr	r1, [pc, #52]	@ (80024e4 <modbus_tcp_accept+0x70>)
 80024b0:	68b8      	ldr	r0, [r7, #8]
 80024b2:	f011 f831 	bl	8013518 <tcp_recv>
    tcp_sent(newpcb, modbus_tcp_sent);  // 添加发送确认回调
 80024b6:	490c      	ldr	r1, [pc, #48]	@ (80024e8 <modbus_tcp_accept+0x74>)
 80024b8:	68b8      	ldr	r0, [r7, #8]
 80024ba:	f011 f84f 	bl	801355c <tcp_sent>
    tcp_err(newpcb, modbus_tcp_error);
 80024be:	490b      	ldr	r1, [pc, #44]	@ (80024ec <modbus_tcp_accept+0x78>)
 80024c0:	68b8      	ldr	r0, [r7, #8]
 80024c2:	f011 f86d 	bl	80135a0 <tcp_err>
    
    // 设置保活参数，防止连接超时
    tcp_keepalive(newpcb);
 80024c6:	68b8      	ldr	r0, [r7, #8]
 80024c8:	f015 fb72 	bl	8017bb0 <tcp_keepalive>
    
    return ERR_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	0801d388 	.word	0x0801d388
 80024dc:	0801cfd8 	.word	0x0801cfd8
 80024e0:	0801d398 	.word	0x0801d398
 80024e4:	080024f1 	.word	0x080024f1
 80024e8:	080023a5 	.word	0x080023a5
 80024ec:	08002421 	.word	0x08002421

080024f0 <modbus_tcp_recv>:

// Recv回调：处理Modbus请求
err_t modbus_tcp_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err) {
 80024f0:	b5b0      	push	{r4, r5, r7, lr}
 80024f2:	f5ad 6d9c 	sub.w	sp, sp, #1248	@ 0x4e0
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	f507 649c 	add.w	r4, r7, #1248	@ 0x4e0
 80024fc:	f2a4 44d4 	subw	r4, r4, #1236	@ 0x4d4
 8002500:	6020      	str	r0, [r4, #0]
 8002502:	f507 609c 	add.w	r0, r7, #1248	@ 0x4e0
 8002506:	f5a0 609b 	sub.w	r0, r0, #1240	@ 0x4d8
 800250a:	6001      	str	r1, [r0, #0]
 800250c:	f507 619c 	add.w	r1, r7, #1248	@ 0x4e0
 8002510:	f2a1 41dc 	subw	r1, r1, #1244	@ 0x4dc
 8002514:	600a      	str	r2, [r1, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800251c:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 8002520:	701a      	strb	r2, [r3, #0]
    if (err != ERR_OK) {
 8002522:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002526:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 800252a:	f993 3000 	ldrsb.w	r3, [r3]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d018      	beq.n	8002564 <modbus_tcp_recv+0x74>
        cdc_debug_log("MODBUS_TCP", "Receive error");
 8002532:	49bf      	ldr	r1, [pc, #764]	@ (8002830 <modbus_tcp_recv+0x340>)
 8002534:	48bf      	ldr	r0, [pc, #764]	@ (8002834 <modbus_tcp_recv+0x344>)
 8002536:	f7fe fdef 	bl	8001118 <cdc_debug_log>
        if (p != NULL) {
 800253a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800253e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d006      	beq.n	8002556 <modbus_tcp_recv+0x66>
            pbuf_free(p);
 8002548:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800254c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	f00f f993 	bl	801187c <pbuf_free>
        }
        return err;
 8002556:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800255a:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 800255e:	f993 3000 	ldrsb.w	r3, [r3]
 8002562:	e15f      	b.n	8002824 <modbus_tcp_recv+0x334>
    }
    
    if (p == NULL) { // 连接关闭
 8002564:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002568:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10c      	bne.n	800258c <modbus_tcp_recv+0x9c>
        cdc_debug_log("MODBUS_TCP", "Client disconnected");
 8002572:	49b1      	ldr	r1, [pc, #708]	@ (8002838 <modbus_tcp_recv+0x348>)
 8002574:	48af      	ldr	r0, [pc, #700]	@ (8002834 <modbus_tcp_recv+0x344>)
 8002576:	f7fe fdcf 	bl	8001118 <cdc_debug_log>
        tcp_close(tpcb);
 800257a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800257e:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	f00f fe24 	bl	80121d0 <tcp_close>
        return ERR_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	e14b      	b.n	8002824 <modbus_tcp_recv+0x334>
    }

    // 获取数据长度并通知TCP栈已接收
    uint16_t data_len = p->tot_len;
 800258c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002590:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	891b      	ldrh	r3, [r3, #8]
 8002598:	f8a7 34da 	strh.w	r3, [r7, #1242]	@ 0x4da
    tcp_recved(tpcb, data_len); // 重要：通知LwIP已处理数据
 800259c:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	@ 0x4da
 80025a0:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80025a4:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80025a8:	4611      	mov	r1, r2
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	f010 f8d4 	bl	8012758 <tcp_recved>
    
    // 添加更详细的接收数据信息
    char recv_info[60];
    const char* prefix = "Received data len=";
 80025b0:	4ba2      	ldr	r3, [pc, #648]	@ (800283c <modbus_tcp_recv+0x34c>)
 80025b2:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
    strcpy(recv_info, prefix);
 80025b6:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80025ba:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	@ 0x4d4
 80025be:	4618      	mov	r0, r3
 80025c0:	f019 fb23 	bl	801bc0a <strcpy>
    int_to_str(data_len, recv_info + strlen(prefix), sizeof(recv_info) - strlen(prefix));
 80025c4:	f8b7 44da 	ldrh.w	r4, [r7, #1242]	@ 0x4da
 80025c8:	f8d7 04d4 	ldr.w	r0, [r7, #1236]	@ 0x4d4
 80025cc:	f7fd fe00 	bl	80001d0 <strlen>
 80025d0:	4602      	mov	r2, r0
 80025d2:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80025d6:	189d      	adds	r5, r3, r2
 80025d8:	f8d7 04d4 	ldr.w	r0, [r7, #1236]	@ 0x4d4
 80025dc:	f7fd fdf8 	bl	80001d0 <strlen>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 80025e6:	461a      	mov	r2, r3
 80025e8:	4629      	mov	r1, r5
 80025ea:	4620      	mov	r0, r4
 80025ec:	f7fe fe0e 	bl	800120c <int_to_str>
    cdc_debug_log("MODBUS_TCP", recv_info);
 80025f0:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80025f4:	4619      	mov	r1, r3
 80025f6:	488f      	ldr	r0, [pc, #572]	@ (8002834 <modbus_tcp_recv+0x344>)
 80025f8:	f7fe fd8e 	bl	8001118 <cdc_debug_log>

    uint8_t buf[1024];
    uint16_t len = pbuf_copy_partial(p, buf, data_len, 0);
 80025fc:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	@ 0x4da
 8002600:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8002604:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002608:	f2a3 40dc 	subw	r0, r3, #1244	@ 0x4dc
 800260c:	2300      	movs	r3, #0
 800260e:	6800      	ldr	r0, [r0, #0]
 8002610:	f00f fb2a 	bl	8011c68 <pbuf_copy_partial>
 8002614:	4603      	mov	r3, r0
 8002616:	f8a7 34d2 	strh.w	r3, [r7, #1234]	@ 0x4d2
    pbuf_free(p);
 800261a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800261e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	f00f f92a 	bl	801187c <pbuf_free>

    // 转储接收到的原始数据用于调试
    dump_data(buf, len);
 8002628:	f8b7 24d2 	ldrh.w	r2, [r7, #1234]	@ 0x4d2
 800262c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002630:	4611      	mov	r1, r2
 8002632:	4618      	mov	r0, r3
 8002634:	f7fe fe9e 	bl	8001374 <dump_data>

    // 检查最小帧长度
    if (len < 8) { // Modbus TCP最小长度: 6字节头 + 2字节最小数据
 8002638:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 800263c:	2b07      	cmp	r3, #7
 800263e:	d806      	bhi.n	800264e <modbus_tcp_recv+0x15e>
        cdc_debug_log("MODBUS_TCP", "Frame too short");
 8002640:	497f      	ldr	r1, [pc, #508]	@ (8002840 <modbus_tcp_recv+0x350>)
 8002642:	487c      	ldr	r0, [pc, #496]	@ (8002834 <modbus_tcp_recv+0x344>)
 8002644:	f7fe fd68 	bl	8001118 <cdc_debug_log>
        return ERR_VAL;
 8002648:	f06f 0305 	mvn.w	r3, #5
 800264c:	e0ea      	b.n	8002824 <modbus_tcp_recv+0x334>
    }

    // 处理可能包含多个Modbus请求的数据包
    uint16_t offset = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de
    uint16_t processed_frames = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	f8a7 34dc 	strh.w	r3, [r7, #1244]	@ 0x4dc
    
    while (offset < len && processed_frames < 10) { // 最多处理10个帧，防止无限循环
 800265a:	e092      	b.n	8002782 <modbus_tcp_recv+0x292>
        // 检查是否还有足够的数据读取帧头
        if (offset + 6 > len) {
 800265c:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 8002660:	1d5a      	adds	r2, r3, #5
 8002662:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8002666:	429a      	cmp	r2, r3
 8002668:	db04      	blt.n	8002674 <modbus_tcp_recv+0x184>
            cdc_debug_log("MODBUS_TCP", "No more complete frames");
 800266a:	4976      	ldr	r1, [pc, #472]	@ (8002844 <modbus_tcp_recv+0x354>)
 800266c:	4871      	ldr	r0, [pc, #452]	@ (8002834 <modbus_tcp_recv+0x344>)
 800266e:	f7fe fd53 	bl	8001118 <cdc_debug_log>
            break;
 8002672:	e093      	b.n	800279c <modbus_tcp_recv+0x2ac>
        }
        
        // 获取长度字段
        uint16_t frame_length = (buf[offset+4] << 8) | buf[offset+5];
 8002674:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 8002678:	3304      	adds	r3, #4
 800267a:	f507 629c 	add.w	r2, r7, #1248	@ 0x4e0
 800267e:	f5a2 628b 	sub.w	r2, r2, #1112	@ 0x458
 8002682:	5cd3      	ldrb	r3, [r2, r3]
 8002684:	b21b      	sxth	r3, r3
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	b21a      	sxth	r2, r3
 800268a:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 800268e:	3305      	adds	r3, #5
 8002690:	f507 619c 	add.w	r1, r7, #1248	@ 0x4e0
 8002694:	f5a1 618b 	sub.w	r1, r1, #1112	@ 0x458
 8002698:	5ccb      	ldrb	r3, [r1, r3]
 800269a:	b21b      	sxth	r3, r3
 800269c:	4313      	orrs	r3, r2
 800269e:	b21b      	sxth	r3, r3
 80026a0:	f8a7 34d0 	strh.w	r3, [r7, #1232]	@ 0x4d0
        uint16_t total_frame_size = 6 + frame_length; // 6字节头 + 数据部分
 80026a4:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 80026a8:	3306      	adds	r3, #6
 80026aa:	f8a7 34ce 	strh.w	r3, [r7, #1230]	@ 0x4ce
        
        // 检查是否有完整的帧
        if (offset + total_frame_size > len) {
 80026ae:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 80026b2:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	@ 0x4ce
 80026b6:	441a      	add	r2, r3
 80026b8:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 80026bc:	429a      	cmp	r2, r3
 80026be:	dd21      	ble.n	8002704 <modbus_tcp_recv+0x214>
            char incomplete_msg[60];
            strcpy(incomplete_msg, "Incomplete frame at offset=");
 80026c0:	f107 0310 	add.w	r3, r7, #16
 80026c4:	4a60      	ldr	r2, [pc, #384]	@ (8002848 <modbus_tcp_recv+0x358>)
 80026c6:	461c      	mov	r4, r3
 80026c8:	4615      	mov	r5, r2
 80026ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            int_to_str(offset, incomplete_msg + strlen(incomplete_msg), 10);
 80026d6:	f8b7 44de 	ldrh.w	r4, [r7, #1246]	@ 0x4de
 80026da:	f107 0310 	add.w	r3, r7, #16
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fd fd76 	bl	80001d0 <strlen>
 80026e4:	4602      	mov	r2, r0
 80026e6:	f107 0310 	add.w	r3, r7, #16
 80026ea:	4413      	add	r3, r2
 80026ec:	220a      	movs	r2, #10
 80026ee:	4619      	mov	r1, r3
 80026f0:	4620      	mov	r0, r4
 80026f2:	f7fe fd8b 	bl	800120c <int_to_str>
            cdc_debug_log("MODBUS_TCP", incomplete_msg);
 80026f6:	f107 0310 	add.w	r3, r7, #16
 80026fa:	4619      	mov	r1, r3
 80026fc:	484d      	ldr	r0, [pc, #308]	@ (8002834 <modbus_tcp_recv+0x344>)
 80026fe:	f7fe fd0b 	bl	8001118 <cdc_debug_log>
            break;
 8002702:	e04b      	b.n	800279c <modbus_tcp_recv+0x2ac>
        }
        
        // 处理这个帧
        char frame_msg[50];
        strcpy(frame_msg, "Processing frame ");
 8002704:	f107 0310 	add.w	r3, r7, #16
 8002708:	4a50      	ldr	r2, [pc, #320]	@ (800284c <modbus_tcp_recv+0x35c>)
 800270a:	461c      	mov	r4, r3
 800270c:	4615      	mov	r5, r2
 800270e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002712:	682b      	ldr	r3, [r5, #0]
 8002714:	8023      	strh	r3, [r4, #0]
        int_to_str(processed_frames + 1, frame_msg + strlen(frame_msg), 10);
 8002716:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 800271a:	1c5c      	adds	r4, r3, #1
 800271c:	f107 0310 	add.w	r3, r7, #16
 8002720:	4618      	mov	r0, r3
 8002722:	f7fd fd55 	bl	80001d0 <strlen>
 8002726:	4602      	mov	r2, r0
 8002728:	f107 0310 	add.w	r3, r7, #16
 800272c:	4413      	add	r3, r2
 800272e:	220a      	movs	r2, #10
 8002730:	4619      	mov	r1, r3
 8002732:	4620      	mov	r0, r4
 8002734:	f7fe fd6a 	bl	800120c <int_to_str>
        cdc_debug_log("MODBUS_TCP", frame_msg);
 8002738:	f107 0310 	add.w	r3, r7, #16
 800273c:	4619      	mov	r1, r3
 800273e:	483d      	ldr	r0, [pc, #244]	@ (8002834 <modbus_tcp_recv+0x344>)
 8002740:	f7fe fcea 	bl	8001118 <cdc_debug_log>
        
        process_modbus_request(tpcb, buf, offset);
 8002744:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 8002748:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800274c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002750:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	f7fe fe97 	bl	8001488 <process_modbus_request>
        
        // 移动到下一个帧
        offset += total_frame_size;
 800275a:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 800275e:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	@ 0x4ce
 8002762:	4413      	add	r3, r2
 8002764:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de
        processed_frames++;
 8002768:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 800276c:	3301      	adds	r3, #1
 800276e:	f8a7 34dc 	strh.w	r3, [r7, #1244]	@ 0x4dc
        
        // 如果只有一个标准的12字节请求，直接退出
        if (len == 12 && processed_frames == 1) {
 8002772:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8002776:	2b0c      	cmp	r3, #12
 8002778:	d103      	bne.n	8002782 <modbus_tcp_recv+0x292>
 800277a:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 800277e:	2b01      	cmp	r3, #1
 8002780:	d00b      	beq.n	800279a <modbus_tcp_recv+0x2aa>
    while (offset < len && processed_frames < 10) { // 最多处理10个帧，防止无限循环
 8002782:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 8002786:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 800278a:	429a      	cmp	r2, r3
 800278c:	d206      	bcs.n	800279c <modbus_tcp_recv+0x2ac>
 800278e:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 8002792:	2b09      	cmp	r3, #9
 8002794:	f67f af62 	bls.w	800265c <modbus_tcp_recv+0x16c>
 8002798:	e000      	b.n	800279c <modbus_tcp_recv+0x2ac>
            break;
 800279a:	bf00      	nop
        }
    }
    
    char summary_msg[60];
    strcpy(summary_msg, "Processed ");
 800279c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80027a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002850 <modbus_tcp_recv+0x360>)
 80027a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80027a4:	c303      	stmia	r3!, {r0, r1}
 80027a6:	801a      	strh	r2, [r3, #0]
 80027a8:	3302      	adds	r3, #2
 80027aa:	0c12      	lsrs	r2, r2, #16
 80027ac:	701a      	strb	r2, [r3, #0]
    int_to_str(processed_frames, summary_msg + strlen(summary_msg), 10);
 80027ae:	f8b7 44dc 	ldrh.w	r4, [r7, #1244]	@ 0x4dc
 80027b2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fd fd0a 	bl	80001d0 <strlen>
 80027bc:	4602      	mov	r2, r0
 80027be:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80027c2:	4413      	add	r3, r2
 80027c4:	220a      	movs	r2, #10
 80027c6:	4619      	mov	r1, r3
 80027c8:	4620      	mov	r0, r4
 80027ca:	f7fe fd1f 	bl	800120c <int_to_str>
    const char* frames_suffix = " frames from ";
 80027ce:	4b21      	ldr	r3, [pc, #132]	@ (8002854 <modbus_tcp_recv+0x364>)
 80027d0:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
    strcat(summary_msg, frames_suffix);
 80027d4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80027d8:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	@ 0x4c8
 80027dc:	4618      	mov	r0, r3
 80027de:	f019 f93a 	bl	801ba56 <strcat>
    int_to_str(len, summary_msg + strlen(summary_msg), 10);
 80027e2:	f8b7 44d2 	ldrh.w	r4, [r7, #1234]	@ 0x4d2
 80027e6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fd fcf0 	bl	80001d0 <strlen>
 80027f0:	4602      	mov	r2, r0
 80027f2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80027f6:	4413      	add	r3, r2
 80027f8:	220a      	movs	r2, #10
 80027fa:	4619      	mov	r1, r3
 80027fc:	4620      	mov	r0, r4
 80027fe:	f7fe fd05 	bl	800120c <int_to_str>
    const char* bytes_suffix = " bytes";
 8002802:	4b15      	ldr	r3, [pc, #84]	@ (8002858 <modbus_tcp_recv+0x368>)
 8002804:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
    strcat(summary_msg, bytes_suffix);
 8002808:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800280c:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	@ 0x4c4
 8002810:	4618      	mov	r0, r3
 8002812:	f019 f920 	bl	801ba56 <strcat>
    cdc_debug_log("MODBUS_TCP", summary_msg);
 8002816:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800281a:	4619      	mov	r1, r3
 800281c:	4805      	ldr	r0, [pc, #20]	@ (8002834 <modbus_tcp_recv+0x344>)
 800281e:	f7fe fc7b 	bl	8001118 <cdc_debug_log>

    return ERR_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f507 679c 	add.w	r7, r7, #1248	@ 0x4e0
 800282a:	46bd      	mov	sp, r7
 800282c:	bdb0      	pop	{r4, r5, r7, pc}
 800282e:	bf00      	nop
 8002830:	0801d3ac 	.word	0x0801d3ac
 8002834:	0801cfd8 	.word	0x0801cfd8
 8002838:	0801d3bc 	.word	0x0801d3bc
 800283c:	0801d3d0 	.word	0x0801d3d0
 8002840:	0801d3e4 	.word	0x0801d3e4
 8002844:	0801d3f4 	.word	0x0801d3f4
 8002848:	0801d40c 	.word	0x0801d40c
 800284c:	0801d428 	.word	0x0801d428
 8002850:	0801d43c 	.word	0x0801d43c
 8002854:	0801d448 	.word	0x0801d448
 8002858:	0801d374 	.word	0x0801d374

0800285c <HAL_ETH_MspInit>:
  *   - Peripheral's GPIO Configuration  
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b092      	sub	sp, #72	@ 0x48
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a84      	ldr	r2, [pc, #528]	@ (8002a8c <HAL_ETH_MspInit+0x230>)
 800287a:	4293      	cmp	r3, r2
 800287c:	f040 8101 	bne.w	8002a82 <HAL_ETH_MspInit+0x226>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002880:	2300      	movs	r3, #0
 8002882:	633b      	str	r3, [r7, #48]	@ 0x30
 8002884:	4b82      	ldr	r3, [pc, #520]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 8002886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002888:	4a81      	ldr	r2, [pc, #516]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 800288a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800288e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002890:	4b7f      	ldr	r3, [pc, #508]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002898:	633b      	str	r3, [r7, #48]	@ 0x30
 800289a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800289c:	2300      	movs	r3, #0
 800289e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028a0:	4b7b      	ldr	r3, [pc, #492]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 80028a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a4:	4a7a      	ldr	r2, [pc, #488]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 80028a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ac:	4b78      	ldr	r3, [pc, #480]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 80028ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b8:	2300      	movs	r3, #0
 80028ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028bc:	4b74      	ldr	r3, [pc, #464]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c0:	4a73      	ldr	r2, [pc, #460]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 80028c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80028c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c8:	4b71      	ldr	r3, [pc, #452]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 80028ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_ETHMAC_CLK_ENABLE();
 80028d4:	2300      	movs	r3, #0
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028d8:	4b6d      	ldr	r3, [pc, #436]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028dc:	4a6c      	ldr	r2, [pc, #432]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 80028de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_ETHMACTX_CLK_ENABLE();
 80028f0:	2300      	movs	r3, #0
 80028f2:	623b      	str	r3, [r7, #32]
 80028f4:	4b66      	ldr	r3, [pc, #408]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f8:	4a65      	ldr	r2, [pc, #404]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 80028fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002900:	4b63      	ldr	r3, [pc, #396]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002904:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002908:	623b      	str	r3, [r7, #32]
 800290a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHMACRX_CLK_ENABLE();
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
 8002910:	4b5f      	ldr	r3, [pc, #380]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002914:	4a5e      	ldr	r2, [pc, #376]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 8002916:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800291a:	6313      	str	r3, [r2, #48]	@ 0x30
 800291c:	4b5c      	ldr	r3, [pc, #368]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002920:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	69fb      	ldr	r3, [r7, #28]
    
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002928:	2300      	movs	r3, #0
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	4b58      	ldr	r3, [pc, #352]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002930:	4a57      	ldr	r2, [pc, #348]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6313      	str	r3, [r2, #48]	@ 0x30
 8002938:	4b55      	ldr	r3, [pc, #340]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	4b51      	ldr	r3, [pc, #324]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 800294a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294c:	4a50      	ldr	r2, [pc, #320]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 800294e:	f043 0302 	orr.w	r3, r3, #2
 8002952:	6313      	str	r3, [r2, #48]	@ 0x30
 8002954:	4b4e      	ldr	r3, [pc, #312]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	4b4a      	ldr	r3, [pc, #296]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 8002966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002968:	4a49      	ldr	r2, [pc, #292]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002970:	4b47      	ldr	r3, [pc, #284]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 8002972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	4b43      	ldr	r3, [pc, #268]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002984:	4a42      	ldr	r2, [pc, #264]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 8002986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800298a:	6313      	str	r3, [r2, #48]	@ 0x30
 800298c:	4b40      	ldr	r3, [pc, #256]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002998:	2300      	movs	r3, #0
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	4b3c      	ldr	r3, [pc, #240]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 800299e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a0:	4a3b      	ldr	r2, [pc, #236]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 80029a2:	f043 0308 	orr.w	r3, r3, #8
 80029a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a8:	4b39      	ldr	r3, [pc, #228]	@ (8002a90 <HAL_ETH_MspInit+0x234>)
 80029aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    PD3      ------> ETH_RESET
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80029b4:	2302      	movs	r3, #2
 80029b6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c0:	2303      	movs	r3, #3
 80029c2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029c4:	230b      	movs	r3, #11
 80029c6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029cc:	4619      	mov	r1, r3
 80029ce:	4831      	ldr	r0, [pc, #196]	@ (8002a94 <HAL_ETH_MspInit+0x238>)
 80029d0:	f002 fb1a 	bl	8005008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80029d4:	2386      	movs	r3, #134	@ 0x86
 80029d6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e0:	2303      	movs	r3, #3
 80029e2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029e4:	230b      	movs	r3, #11
 80029e6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029ec:	4619      	mov	r1, r3
 80029ee:	482a      	ldr	r0, [pc, #168]	@ (8002a98 <HAL_ETH_MspInit+0x23c>)
 80029f0:	f002 fb0a 	bl	8005008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80029f4:	2330      	movs	r3, #48	@ 0x30
 80029f6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a00:	2303      	movs	r3, #3
 8002a02:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a04:	230b      	movs	r3, #11
 8002a06:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a08:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4821      	ldr	r0, [pc, #132]	@ (8002a94 <HAL_ETH_MspInit+0x238>)
 8002a10:	f002 fafa 	bl	8005008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002a14:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8002a18:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a22:	2303      	movs	r3, #3
 8002a24:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a26:	230b      	movs	r3, #11
 8002a28:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a2a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a2e:	4619      	mov	r1, r3
 8002a30:	481a      	ldr	r0, [pc, #104]	@ (8002a9c <HAL_ETH_MspInit+0x240>)
 8002a32:	f002 fae9 	bl	8005008 <HAL_GPIO_Init>

    /* Configure ETH_RESET Pin (PD3) */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a36:	2308      	movs	r3, #8
 8002a38:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a42:	2300      	movs	r3, #0
 8002a44:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a46:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4814      	ldr	r0, [pc, #80]	@ (8002aa0 <HAL_ETH_MspInit+0x244>)
 8002a4e:	f002 fadb 	bl	8005008 <HAL_GPIO_Init>
    
    /* Reset PHY */

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2108      	movs	r1, #8
 8002a56:	4812      	ldr	r0, [pc, #72]	@ (8002aa0 <HAL_ETH_MspInit+0x244>)
 8002a58:	f002 fc72 	bl	8005340 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002a5c:	200a      	movs	r0, #10
 8002a5e:	f000 ff99 	bl	8003994 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8002a62:	2201      	movs	r2, #1
 8002a64:	2108      	movs	r1, #8
 8002a66:	480e      	ldr	r0, [pc, #56]	@ (8002aa0 <HAL_ETH_MspInit+0x244>)
 8002a68:	f002 fc6a 	bl	8005340 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 8002a6c:	2064      	movs	r0, #100	@ 0x64
 8002a6e:	f000 ff91 	bl	8003994 <HAL_Delay>

    /* USER CODE BEGIN ETH_MspInit 1 */
    /* Configure ETH interrupt */
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 8002a72:	2200      	movs	r2, #0
 8002a74:	2106      	movs	r1, #6
 8002a76:	203d      	movs	r0, #61	@ 0x3d
 8002a78:	f001 f868 	bl	8003b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8002a7c:	203d      	movs	r0, #61	@ 0x3d
 8002a7e:	f001 f881 	bl	8003b84 <HAL_NVIC_EnableIRQ>
    /* USER CODE END ETH_MspInit 1 */
  }
}
 8002a82:	bf00      	nop
 8002a84:	3748      	adds	r7, #72	@ 0x48
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40028000 	.word	0x40028000
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40020800 	.word	0x40020800
 8002a98:	40020000 	.word	0x40020000
 8002a9c:	40021800 	.word	0x40021800
 8002aa0:	40020c00 	.word	0x40020c00

08002aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	4b12      	ldr	r3, [pc, #72]	@ (8002af8 <HAL_MspInit+0x54>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab2:	4a11      	ldr	r2, [pc, #68]	@ (8002af8 <HAL_MspInit+0x54>)
 8002ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aba:	4b0f      	ldr	r3, [pc, #60]	@ (8002af8 <HAL_MspInit+0x54>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ac2:	607b      	str	r3, [r7, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	4b0b      	ldr	r3, [pc, #44]	@ (8002af8 <HAL_MspInit+0x54>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	4a0a      	ldr	r2, [pc, #40]	@ (8002af8 <HAL_MspInit+0x54>)
 8002ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ad6:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <HAL_MspInit+0x54>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	210f      	movs	r1, #15
 8002ae6:	f06f 0001 	mvn.w	r0, #1
 8002aea:	f001 f82f 	bl	8003b4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800

08002afc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08e      	sub	sp, #56	@ 0x38
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	4b33      	ldr	r3, [pc, #204]	@ (8002be0 <HAL_InitTick+0xe4>)
 8002b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b14:	4a32      	ldr	r2, [pc, #200]	@ (8002be0 <HAL_InitTick+0xe4>)
 8002b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b1c:	4b30      	ldr	r3, [pc, #192]	@ (8002be0 <HAL_InitTick+0xe4>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b28:	f107 0210 	add.w	r2, r7, #16
 8002b2c:	f107 0314 	add.w	r3, r7, #20
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f004 fac8 	bl	80070c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d103      	bne.n	8002b4a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b42:	f004 fa99 	bl	8007078 <HAL_RCC_GetPCLK1Freq>
 8002b46:	6378      	str	r0, [r7, #52]	@ 0x34
 8002b48:	e004      	b.n	8002b54 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002b4a:	f004 fa95 	bl	8007078 <HAL_RCC_GetPCLK1Freq>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b56:	4a23      	ldr	r2, [pc, #140]	@ (8002be4 <HAL_InitTick+0xe8>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	0c9b      	lsrs	r3, r3, #18
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002b62:	4b21      	ldr	r3, [pc, #132]	@ (8002be8 <HAL_InitTick+0xec>)
 8002b64:	4a21      	ldr	r2, [pc, #132]	@ (8002bec <HAL_InitTick+0xf0>)
 8002b66:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8002b68:	4b1f      	ldr	r3, [pc, #124]	@ (8002be8 <HAL_InitTick+0xec>)
 8002b6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b6e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002b70:	4a1d      	ldr	r2, [pc, #116]	@ (8002be8 <HAL_InitTick+0xec>)
 8002b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b74:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8002b76:	4b1c      	ldr	r3, [pc, #112]	@ (8002be8 <HAL_InitTick+0xec>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002be8 <HAL_InitTick+0xec>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b82:	4b19      	ldr	r3, [pc, #100]	@ (8002be8 <HAL_InitTick+0xec>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8002b88:	4817      	ldr	r0, [pc, #92]	@ (8002be8 <HAL_InitTick+0xec>)
 8002b8a:	f004 fb17 	bl	80071bc <HAL_TIM_Base_Init>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002b94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d11b      	bne.n	8002bd4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8002b9c:	4812      	ldr	r0, [pc, #72]	@ (8002be8 <HAL_InitTick+0xec>)
 8002b9e:	f004 fb5d 	bl	800725c <HAL_TIM_Base_Start_IT>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002ba8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d111      	bne.n	8002bd4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002bb0:	202d      	movs	r0, #45	@ 0x2d
 8002bb2:	f000 ffe7 	bl	8003b84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b0f      	cmp	r3, #15
 8002bba:	d808      	bhi.n	8002bce <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	202d      	movs	r0, #45	@ 0x2d
 8002bc2:	f000 ffc3 	bl	8003b4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf0 <HAL_InitTick+0xf4>)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	e002      	b.n	8002bd4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002bd4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3738      	adds	r7, #56	@ 0x38
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40023800 	.word	0x40023800
 8002be4:	431bde83 	.word	0x431bde83
 8002be8:	2000063c 	.word	0x2000063c
 8002bec:	40002000 	.word	0x40002000
 8002bf0:	20000004 	.word	0x20000004

08002bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bf8:	bf00      	nop
 8002bfa:	e7fd      	b.n	8002bf8 <NMI_Handler+0x4>

08002bfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c00:	bf00      	nop
 8002c02:	e7fd      	b.n	8002c00 <HardFault_Handler+0x4>

08002c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c08:	bf00      	nop
 8002c0a:	e7fd      	b.n	8002c08 <MemManage_Handler+0x4>

08002c0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c10:	bf00      	nop
 8002c12:	e7fd      	b.n	8002c10 <BusFault_Handler+0x4>

08002c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <UsageFault_Handler+0x4>

08002c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002c30:	4802      	ldr	r0, [pc, #8]	@ (8002c3c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002c32:	f004 fb83 	bl	800733c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	2000063c 	.word	0x2000063c

08002c40 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002c44:	4802      	ldr	r0, [pc, #8]	@ (8002c50 <TIM7_IRQHandler+0x10>)
 8002c46:	f004 fb79 	bl	800733c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000688 	.word	0x20000688

08002c54 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002c54:	b5b0      	push	{r4, r5, r7, lr}
 8002c56:	b0ae      	sub	sp, #184	@ 0xb8
 8002c58:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN ETH_IRQn 0 */
  uint32_t dma_status = ETH->DMASR;
 8002c5a:	4b27      	ldr	r3, [pc, #156]	@ (8002cf8 <ETH_IRQHandler+0xa4>)
 8002c5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  char debug_msg[128];
  
  snprintf(debug_msg, sizeof(debug_msg), 
           "ETH_IRQ: DMASR=0x%08lX, NIS=%lu, AIS=%lu, RS=%lu, TS=%lu", 
           dma_status,
           (dma_status & ETH_DMASR_NIS) ? 1UL : 0UL,  // Normal interrupt
 8002c66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c6a:	0c1b      	lsrs	r3, r3, #16
  snprintf(debug_msg, sizeof(debug_msg), 
 8002c6c:	f003 0301 	and.w	r3, r3, #1
           (dma_status & ETH_DMASR_AIS) ? 1UL : 0UL,  // Abnormal interrupt  
 8002c70:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002c74:	0bd2      	lsrs	r2, r2, #15
  snprintf(debug_msg, sizeof(debug_msg), 
 8002c76:	f002 0201 	and.w	r2, r2, #1
           (dma_status & ETH_DMASR_RS) ? 1UL : 0UL,   // Receive status
 8002c7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c7e:	0989      	lsrs	r1, r1, #6
  snprintf(debug_msg, sizeof(debug_msg), 
 8002c80:	f001 0101 	and.w	r1, r1, #1
 8002c84:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002c88:	f000 0001 	and.w	r0, r0, #1
 8002c8c:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002c90:	9003      	str	r0, [sp, #12]
 8002c92:	9102      	str	r1, [sp, #8]
 8002c94:	9201      	str	r2, [sp, #4]
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c9c:	4a17      	ldr	r2, [pc, #92]	@ (8002cfc <ETH_IRQHandler+0xa8>)
 8002c9e:	2180      	movs	r1, #128	@ 0x80
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f018 fe2d 	bl	801b900 <sniprintf>
           (dma_status & ETH_DMASR_TS) ? 1UL : 0UL);  // Transmit status
  
  CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 8002ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd fa90 	bl	80001d0 <strlen>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f018 f8b2 	bl	801ae24 <CDC_Transmit_FS>
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002cc0:	480f      	ldr	r0, [pc, #60]	@ (8002d00 <ETH_IRQHandler+0xac>)
 8002cc2:	f001 fafb 	bl	80042bc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */
  char completion_msg[] = "[ETH_IRQ] IRQ Handler completed\r\n";
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d04 <ETH_IRQHandler+0xb0>)
 8002cc8:	463c      	mov	r4, r7
 8002cca:	461d      	mov	r5, r3
 8002ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cd4:	682b      	ldr	r3, [r5, #0]
 8002cd6:	8023      	strh	r3, [r4, #0]
  CDC_Transmit_FS((uint8_t*)completion_msg, strlen(completion_msg));
 8002cd8:	463b      	mov	r3, r7
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fa78 	bl	80001d0 <strlen>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	463b      	mov	r3, r7
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f018 f89b 	bl	801ae24 <CDC_Transmit_FS>
  /* USER CODE END ETH_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	37a8      	adds	r7, #168	@ 0xa8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40028000 	.word	0x40028000
 8002cfc:	0801d458 	.word	0x0801d458
 8002d00:	2000530c 	.word	0x2000530c
 8002d04:	0801d494 	.word	0x0801d494

08002d08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002d0c:	4802      	ldr	r0, [pc, #8]	@ (8002d18 <OTG_FS_IRQHandler+0x10>)
 8002d0e:	f002 fc74 	bl	80055fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	2000defc 	.word	0x2000defc

08002d1c <send_command>:
#include "usart.h"  // STM32 USART头文件
#include "main.h"   // HAL头文件
#include "usbd_cdc_if.h"  // 用于调试输出

// 发送命令并读取响应 - STM32 USART3版本
int send_command(int pump_id, const char* cmd, char* response, size_t resp_size) {
 8002d1c:	b590      	push	{r4, r7, lr}
 8002d1e:	b0e9      	sub	sp, #420	@ 0x1a4
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	f507 74cc 	add.w	r4, r7, #408	@ 0x198
 8002d26:	f5a4 74c6 	sub.w	r4, r4, #396	@ 0x18c
 8002d2a:	6020      	str	r0, [r4, #0]
 8002d2c:	f507 70cc 	add.w	r0, r7, #408	@ 0x198
 8002d30:	f5a0 70c8 	sub.w	r0, r0, #400	@ 0x190
 8002d34:	6001      	str	r1, [r0, #0]
 8002d36:	f507 71cc 	add.w	r1, r7, #408	@ 0x198
 8002d3a:	f5a1 71ca 	sub.w	r1, r1, #404	@ 0x194
 8002d3e:	600a      	str	r2, [r1, #0]
 8002d40:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8002d44:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 8002d48:	6013      	str	r3, [r2, #0]
    char debug_msg[128];
    char pump_address;
    HAL_StatusTypeDef status;
    
    // 根据pump_id选择地址
    if (pump_id == 1) {
 8002d4a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002d4e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d103      	bne.n	8002d60 <send_command+0x44>
        pump_address = '1';  // 泵1地址为'1'
 8002d58:	2331      	movs	r3, #49	@ 0x31
 8002d5a:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
 8002d5e:	e025      	b.n	8002dac <send_command+0x90>
    } else if (pump_id == 2) {
 8002d60:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002d64:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d103      	bne.n	8002d76 <send_command+0x5a>
        pump_address = '2';  // 泵2地址为'2'
 8002d6e:	2332      	movs	r3, #50	@ 0x32
 8002d70:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
 8002d74:	e01a      	b.n	8002dac <send_command+0x90>
    } else {
        snprintf(debug_msg, sizeof(debug_msg), "Invalid pump_id: %d\r\n", pump_id);
 8002d76:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002d7a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002d7e:	f107 0010 	add.w	r0, r7, #16
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a8c      	ldr	r2, [pc, #560]	@ (8002fb8 <send_command+0x29c>)
 8002d86:	2180      	movs	r1, #128	@ 0x80
 8002d88:	f018 fdba 	bl	801b900 <sniprintf>
        CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 8002d8c:	f107 0310 	add.w	r3, r7, #16
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fd fa1d 	bl	80001d0 <strlen>
 8002d96:	4603      	mov	r3, r0
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	f107 0310 	add.w	r3, r7, #16
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f018 f83f 	bl	801ae24 <CDC_Transmit_FS>
        return -1;
 8002da6:	f04f 33ff 	mov.w	r3, #4294967295
 8002daa:	e0ff      	b.n	8002fac <send_command+0x290>
    }
    
    // 格式化命令: /地址命令CR
    snprintf(buffer, sizeof(buffer), "/%c%s\r", pump_address, cmd);
 8002dac:	f897 2197 	ldrb.w	r2, [r7, #407]	@ 0x197
 8002db0:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8002db4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002db8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	4a7e      	ldr	r2, [pc, #504]	@ (8002fbc <send_command+0x2a0>)
 8002dc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002dc8:	f018 fd9a 	bl	801b900 <sniprintf>
    
    // 调试信息
    snprintf(debug_msg, sizeof(debug_msg), "Pump%d TX: %s", pump_id, buffer);
 8002dcc:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002dd0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002dd4:	f107 0010 	add.w	r0, r7, #16
 8002dd8:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8002ddc:	9200      	str	r2, [sp, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a77      	ldr	r2, [pc, #476]	@ (8002fc0 <send_command+0x2a4>)
 8002de2:	2180      	movs	r1, #128	@ 0x80
 8002de4:	f018 fd8c 	bl	801b900 <sniprintf>
    CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 8002de8:	f107 0310 	add.w	r3, r7, #16
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fd f9ef 	bl	80001d0 <strlen>
 8002df2:	4603      	mov	r3, r0
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	f107 0310 	add.w	r3, r7, #16
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f018 f811 	bl	801ae24 <CDC_Transmit_FS>
    
    // 通过USART3发送命令
    status = HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 1000);
 8002e02:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fd f9e2 	bl	80001d0 <strlen>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002e14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e18:	486a      	ldr	r0, [pc, #424]	@ (8002fc4 <send_command+0x2a8>)
 8002e1a:	f004 fd2d 	bl	8007878 <HAL_UART_Transmit>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f887 3196 	strb.w	r3, [r7, #406]	@ 0x196
    if (status != HAL_OK) {
 8002e24:	f897 3196 	ldrb.w	r3, [r7, #406]	@ 0x196
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d01d      	beq.n	8002e68 <send_command+0x14c>
        snprintf(debug_msg, sizeof(debug_msg), "Pump%d UART TX failed: %d\r\n", pump_id, status);
 8002e2c:	f897 2196 	ldrb.w	r2, [r7, #406]	@ 0x196
 8002e30:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002e34:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002e38:	f107 0010 	add.w	r0, r7, #16
 8002e3c:	9200      	str	r2, [sp, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a61      	ldr	r2, [pc, #388]	@ (8002fc8 <send_command+0x2ac>)
 8002e42:	2180      	movs	r1, #128	@ 0x80
 8002e44:	f018 fd5c 	bl	801b900 <sniprintf>
        CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 8002e48:	f107 0310 	add.w	r3, r7, #16
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fd f9bf 	bl	80001d0 <strlen>
 8002e52:	4603      	mov	r3, r0
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	f107 0310 	add.w	r3, r7, #16
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f017 ffe1 	bl	801ae24 <CDC_Transmit_FS>
        return -1;
 8002e62:	f04f 33ff 	mov.w	r3, #4294967295
 8002e66:	e0a1      	b.n	8002fac <send_command+0x290>
    }
    
    // 读取响应（如果需要）
    if (response && resp_size > 0) {
 8002e68:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002e6c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 8099 	beq.w	8002faa <send_command+0x28e>
 8002e78:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002e7c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8091 	beq.w	8002faa <send_command+0x28e>
        memset(response, 0, resp_size);
 8002e88:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002e8c:	f5a3 72cc 	sub.w	r2, r3, #408	@ 0x198
 8002e90:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002e94:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	f018 fdd2 	bl	801ba46 <memset>
        
        // 等待响应，超时时间1秒
        status = HAL_UART_Receive(&huart3, (uint8_t*)response, resp_size - 1, 1000);
 8002ea2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002ea6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002eb6:	f5a3 71ca 	sub.w	r1, r3, #404	@ 0x194
 8002eba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ebe:	6809      	ldr	r1, [r1, #0]
 8002ec0:	4840      	ldr	r0, [pc, #256]	@ (8002fc4 <send_command+0x2a8>)
 8002ec2:	f004 fd64 	bl	800798e <HAL_UART_Receive>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	f887 3196 	strb.w	r3, [r7, #406]	@ 0x196
        if (status == HAL_OK) {
 8002ecc:	f897 3196 	ldrb.w	r3, [r7, #406]	@ 0x196
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d12d      	bne.n	8002f30 <send_command+0x214>
            // 找到实际接收到的数据长度
            size_t actual_len = strlen(response);
 8002ed4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002ed8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	f7fd f977 	bl	80001d0 <strlen>
 8002ee2:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
            if (actual_len > 0) {
 8002ee6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d05d      	beq.n	8002faa <send_command+0x28e>
                // 调试信息：显示响应
                snprintf(debug_msg, sizeof(debug_msg), "Pump%d RX: %s", pump_id, response);
 8002eee:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002ef2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002ef6:	f107 0010 	add.w	r0, r7, #16
 8002efa:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8002efe:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	9200      	str	r2, [sp, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a30      	ldr	r2, [pc, #192]	@ (8002fcc <send_command+0x2b0>)
 8002f0a:	2180      	movs	r1, #128	@ 0x80
 8002f0c:	f018 fcf8 	bl	801b900 <sniprintf>
                CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 8002f10:	f107 0310 	add.w	r3, r7, #16
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fd f95b 	bl	80001d0 <strlen>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	f107 0310 	add.w	r3, r7, #16
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f017 ff7d 	bl	801ae24 <CDC_Transmit_FS>
                return actual_len;
 8002f2a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002f2e:	e03d      	b.n	8002fac <send_command+0x290>
            }
        } else if (status == HAL_TIMEOUT) {
 8002f30:	f897 3196 	ldrb.w	r3, [r7, #406]	@ 0x196
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d11a      	bne.n	8002f6e <send_command+0x252>
            snprintf(debug_msg, sizeof(debug_msg), "Pump%d UART RX timeout\r\n", pump_id);
 8002f38:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002f3c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002f40:	f107 0010 	add.w	r0, r7, #16
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a22      	ldr	r2, [pc, #136]	@ (8002fd0 <send_command+0x2b4>)
 8002f48:	2180      	movs	r1, #128	@ 0x80
 8002f4a:	f018 fcd9 	bl	801b900 <sniprintf>
            CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 8002f4e:	f107 0310 	add.w	r3, r7, #16
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd f93c 	bl	80001d0 <strlen>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	f107 0310 	add.w	r3, r7, #16
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f017 ff5e 	bl	801ae24 <CDC_Transmit_FS>
            return -2;  // 超时错误码
 8002f68:	f06f 0301 	mvn.w	r3, #1
 8002f6c:	e01e      	b.n	8002fac <send_command+0x290>
        } else {
            snprintf(debug_msg, sizeof(debug_msg), "Pump%d UART RX failed: %d\r\n", pump_id, status);
 8002f6e:	f897 2196 	ldrb.w	r2, [r7, #406]	@ 0x196
 8002f72:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8002f76:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002f7a:	f107 0010 	add.w	r0, r7, #16
 8002f7e:	9200      	str	r2, [sp, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a14      	ldr	r2, [pc, #80]	@ (8002fd4 <send_command+0x2b8>)
 8002f84:	2180      	movs	r1, #128	@ 0x80
 8002f86:	f018 fcbb 	bl	801b900 <sniprintf>
            CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 8002f8a:	f107 0310 	add.w	r3, r7, #16
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fd f91e 	bl	80001d0 <strlen>
 8002f94:	4603      	mov	r3, r0
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	f107 0310 	add.w	r3, r7, #16
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f017 ff40 	bl	801ae24 <CDC_Transmit_FS>
            return -1;
 8002fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa8:	e000      	b.n	8002fac <send_command+0x290>
        }
    }
    
    return 0;  // 成功发送，无需响应
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	f507 77ce 	add.w	r7, r7, #412	@ 0x19c
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd90      	pop	{r4, r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	0801d4b8 	.word	0x0801d4b8
 8002fbc:	0801d4d0 	.word	0x0801d4d0
 8002fc0:	0801d4d8 	.word	0x0801d4d8
 8002fc4:	20000718 	.word	0x20000718
 8002fc8:	0801d4e8 	.word	0x0801d4e8
 8002fcc:	0801d504 	.word	0x0801d504
 8002fd0:	0801d514 	.word	0x0801d514
 8002fd4:	0801d530 	.word	0x0801d530

08002fd8 <pump_init>:

// 初始化泵
int pump_init(int pump_id) {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
    return send_command(pump_id, CMD_INIT, NULL, 0);
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	4904      	ldr	r1, [pc, #16]	@ (8002ff8 <pump_init+0x20>)
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff fe98 	bl	8002d1c <send_command>
 8002fec:	4603      	mov	r3, r0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	0801d54c 	.word	0x0801d54c

08002ffc <pump_move_absolute>:

// 绝对位置移动
int pump_move_absolute(int pump_id, int position) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	@ 0x28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), CMD_ABS_MOVE, position);
 8003006:	f107 0008 	add.w	r0, r7, #8
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	4a07      	ldr	r2, [pc, #28]	@ (800302c <pump_move_absolute+0x30>)
 800300e:	2120      	movs	r1, #32
 8003010:	f018 fc76 	bl	801b900 <sniprintf>
    return send_command(pump_id, cmd, NULL, 0);
 8003014:	f107 0108 	add.w	r1, r7, #8
 8003018:	2300      	movs	r3, #0
 800301a:	2200      	movs	r2, #0
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff fe7d 	bl	8002d1c <send_command>
 8003022:	4603      	mov	r3, r0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3728      	adds	r7, #40	@ 0x28
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	0801d550 	.word	0x0801d550

08003030 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return 1;
 8003034:	2301      	movs	r3, #1
}
 8003036:	4618      	mov	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <_kill>:

int _kill(int pid, int sig)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800304a:	4b05      	ldr	r3, [pc, #20]	@ (8003060 <_kill+0x20>)
 800304c:	2216      	movs	r2, #22
 800304e:	601a      	str	r2, [r3, #0]
  return -1;
 8003050:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	2000e73c 	.word	0x2000e73c

08003064 <_exit>:

void _exit (int status)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800306c:	f04f 31ff 	mov.w	r1, #4294967295
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff ffe5 	bl	8003040 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003076:	bf00      	nop
 8003078:	e7fd      	b.n	8003076 <_exit+0x12>

0800307a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	e00a      	b.n	80030a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800308c:	f3af 8000 	nop.w
 8003090:	4601      	mov	r1, r0
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	60ba      	str	r2, [r7, #8]
 8003098:	b2ca      	uxtb	r2, r1
 800309a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	3301      	adds	r3, #1
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	dbf0      	blt.n	800308c <_read+0x12>
  }

  return len;
 80030aa:	687b      	ldr	r3, [r7, #4]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	e009      	b.n	80030da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	60ba      	str	r2, [r7, #8]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	3301      	adds	r3, #1
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	429a      	cmp	r2, r3
 80030e0:	dbf1      	blt.n	80030c6 <_write+0x12>
  }
  return len;
 80030e2:	687b      	ldr	r3, [r7, #4]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <_close>:

int _close(int file)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003114:	605a      	str	r2, [r3, #4]
  return 0;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <_isatty>:

int _isatty(int file)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800312c:	2301      	movs	r3, #1
}
 800312e:	4618      	mov	r0, r3
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800313a:	b480      	push	{r7}
 800313c:	b085      	sub	sp, #20
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800315c:	4a14      	ldr	r2, [pc, #80]	@ (80031b0 <_sbrk+0x5c>)
 800315e:	4b15      	ldr	r3, [pc, #84]	@ (80031b4 <_sbrk+0x60>)
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003168:	4b13      	ldr	r3, [pc, #76]	@ (80031b8 <_sbrk+0x64>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d102      	bne.n	8003176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003170:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <_sbrk+0x64>)
 8003172:	4a12      	ldr	r2, [pc, #72]	@ (80031bc <_sbrk+0x68>)
 8003174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003176:	4b10      	ldr	r3, [pc, #64]	@ (80031b8 <_sbrk+0x64>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	429a      	cmp	r2, r3
 8003182:	d205      	bcs.n	8003190 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003184:	4b0e      	ldr	r3, [pc, #56]	@ (80031c0 <_sbrk+0x6c>)
 8003186:	220c      	movs	r2, #12
 8003188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800318a:	f04f 33ff 	mov.w	r3, #4294967295
 800318e:	e009      	b.n	80031a4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003190:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <_sbrk+0x64>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003196:	4b08      	ldr	r3, [pc, #32]	@ (80031b8 <_sbrk+0x64>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	4a06      	ldr	r2, [pc, #24]	@ (80031b8 <_sbrk+0x64>)
 80031a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031a2:	68fb      	ldr	r3, [r7, #12]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	371c      	adds	r7, #28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	20020000 	.word	0x20020000
 80031b4:	00000400 	.word	0x00000400
 80031b8:	20000684 	.word	0x20000684
 80031bc:	2000e760 	.word	0x2000e760
 80031c0:	2000e73c 	.word	0x2000e73c

080031c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031c8:	4b06      	ldr	r3, [pc, #24]	@ (80031e4 <SystemInit+0x20>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ce:	4a05      	ldr	r2, [pc, #20]	@ (80031e4 <SystemInit+0x20>)
 80031d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ee:	463b      	mov	r3, r7
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80031f6:	4b15      	ldr	r3, [pc, #84]	@ (800324c <MX_TIM7_Init+0x64>)
 80031f8:	4a15      	ldr	r2, [pc, #84]	@ (8003250 <MX_TIM7_Init+0x68>)
 80031fa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 80031fc:	4b13      	ldr	r3, [pc, #76]	@ (800324c <MX_TIM7_Init+0x64>)
 80031fe:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003202:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003204:	4b11      	ldr	r3, [pc, #68]	@ (800324c <MX_TIM7_Init+0x64>)
 8003206:	2200      	movs	r2, #0
 8003208:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800320a:	4b10      	ldr	r3, [pc, #64]	@ (800324c <MX_TIM7_Init+0x64>)
 800320c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003210:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003212:	4b0e      	ldr	r3, [pc, #56]	@ (800324c <MX_TIM7_Init+0x64>)
 8003214:	2200      	movs	r2, #0
 8003216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003218:	480c      	ldr	r0, [pc, #48]	@ (800324c <MX_TIM7_Init+0x64>)
 800321a:	f003 ffcf 	bl	80071bc <HAL_TIM_Base_Init>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003224:	f7fd ff72 	bl	800110c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003228:	2300      	movs	r3, #0
 800322a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800322c:	2300      	movs	r3, #0
 800322e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003230:	463b      	mov	r3, r7
 8003232:	4619      	mov	r1, r3
 8003234:	4805      	ldr	r0, [pc, #20]	@ (800324c <MX_TIM7_Init+0x64>)
 8003236:	f004 fa3f 	bl	80076b8 <HAL_TIMEx_MasterConfigSynchronization>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003240:	f7fd ff64 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003244:	bf00      	nop
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20000688 	.word	0x20000688
 8003250:	40001400 	.word	0x40001400

08003254 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0e      	ldr	r2, [pc, #56]	@ (800329c <HAL_TIM_Base_MspInit+0x48>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d115      	bne.n	8003292 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	4b0d      	ldr	r3, [pc, #52]	@ (80032a0 <HAL_TIM_Base_MspInit+0x4c>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	4a0c      	ldr	r2, [pc, #48]	@ (80032a0 <HAL_TIM_Base_MspInit+0x4c>)
 8003270:	f043 0320 	orr.w	r3, r3, #32
 8003274:	6413      	str	r3, [r2, #64]	@ 0x40
 8003276:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <HAL_TIM_Base_MspInit+0x4c>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003282:	2200      	movs	r2, #0
 8003284:	2105      	movs	r1, #5
 8003286:	2037      	movs	r0, #55	@ 0x37
 8003288:	f000 fc60 	bl	8003b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800328c:	2037      	movs	r0, #55	@ 0x37
 800328e:	f000 fc79 	bl	8003b84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003292:	bf00      	nop
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40001400 	.word	0x40001400
 80032a0:	40023800 	.word	0x40023800

080032a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032a8:	4b11      	ldr	r3, [pc, #68]	@ (80032f0 <MX_USART1_UART_Init+0x4c>)
 80032aa:	4a12      	ldr	r2, [pc, #72]	@ (80032f4 <MX_USART1_UART_Init+0x50>)
 80032ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80032ae:	4b10      	ldr	r3, [pc, #64]	@ (80032f0 <MX_USART1_UART_Init+0x4c>)
 80032b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032b6:	4b0e      	ldr	r3, [pc, #56]	@ (80032f0 <MX_USART1_UART_Init+0x4c>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032bc:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <MX_USART1_UART_Init+0x4c>)
 80032be:	2200      	movs	r2, #0
 80032c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032c2:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <MX_USART1_UART_Init+0x4c>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032c8:	4b09      	ldr	r3, [pc, #36]	@ (80032f0 <MX_USART1_UART_Init+0x4c>)
 80032ca:	220c      	movs	r2, #12
 80032cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032ce:	4b08      	ldr	r3, [pc, #32]	@ (80032f0 <MX_USART1_UART_Init+0x4c>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032d4:	4b06      	ldr	r3, [pc, #24]	@ (80032f0 <MX_USART1_UART_Init+0x4c>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032da:	4805      	ldr	r0, [pc, #20]	@ (80032f0 <MX_USART1_UART_Init+0x4c>)
 80032dc:	f004 fa7c 	bl	80077d8 <HAL_UART_Init>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80032e6:	f7fd ff11 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200006d0 	.word	0x200006d0
 80032f4:	40011000 	.word	0x40011000

080032f8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80032fc:	4b11      	ldr	r3, [pc, #68]	@ (8003344 <MX_USART3_UART_Init+0x4c>)
 80032fe:	4a12      	ldr	r2, [pc, #72]	@ (8003348 <MX_USART3_UART_Init+0x50>)
 8003300:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003302:	4b10      	ldr	r3, [pc, #64]	@ (8003344 <MX_USART3_UART_Init+0x4c>)
 8003304:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003308:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800330a:	4b0e      	ldr	r3, [pc, #56]	@ (8003344 <MX_USART3_UART_Init+0x4c>)
 800330c:	2200      	movs	r2, #0
 800330e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003310:	4b0c      	ldr	r3, [pc, #48]	@ (8003344 <MX_USART3_UART_Init+0x4c>)
 8003312:	2200      	movs	r2, #0
 8003314:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003316:	4b0b      	ldr	r3, [pc, #44]	@ (8003344 <MX_USART3_UART_Init+0x4c>)
 8003318:	2200      	movs	r2, #0
 800331a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800331c:	4b09      	ldr	r3, [pc, #36]	@ (8003344 <MX_USART3_UART_Init+0x4c>)
 800331e:	220c      	movs	r2, #12
 8003320:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003322:	4b08      	ldr	r3, [pc, #32]	@ (8003344 <MX_USART3_UART_Init+0x4c>)
 8003324:	2200      	movs	r2, #0
 8003326:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003328:	4b06      	ldr	r3, [pc, #24]	@ (8003344 <MX_USART3_UART_Init+0x4c>)
 800332a:	2200      	movs	r2, #0
 800332c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800332e:	4805      	ldr	r0, [pc, #20]	@ (8003344 <MX_USART3_UART_Init+0x4c>)
 8003330:	f004 fa52 	bl	80077d8 <HAL_UART_Init>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800333a:	f7fd fee7 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800333e:	bf00      	nop
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000718 	.word	0x20000718
 8003348:	40004800 	.word	0x40004800

0800334c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003350:	4b11      	ldr	r3, [pc, #68]	@ (8003398 <MX_USART6_UART_Init+0x4c>)
 8003352:	4a12      	ldr	r2, [pc, #72]	@ (800339c <MX_USART6_UART_Init+0x50>)
 8003354:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003356:	4b10      	ldr	r3, [pc, #64]	@ (8003398 <MX_USART6_UART_Init+0x4c>)
 8003358:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800335c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800335e:	4b0e      	ldr	r3, [pc, #56]	@ (8003398 <MX_USART6_UART_Init+0x4c>)
 8003360:	2200      	movs	r2, #0
 8003362:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003364:	4b0c      	ldr	r3, [pc, #48]	@ (8003398 <MX_USART6_UART_Init+0x4c>)
 8003366:	2200      	movs	r2, #0
 8003368:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800336a:	4b0b      	ldr	r3, [pc, #44]	@ (8003398 <MX_USART6_UART_Init+0x4c>)
 800336c:	2200      	movs	r2, #0
 800336e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003370:	4b09      	ldr	r3, [pc, #36]	@ (8003398 <MX_USART6_UART_Init+0x4c>)
 8003372:	220c      	movs	r2, #12
 8003374:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003376:	4b08      	ldr	r3, [pc, #32]	@ (8003398 <MX_USART6_UART_Init+0x4c>)
 8003378:	2200      	movs	r2, #0
 800337a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800337c:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <MX_USART6_UART_Init+0x4c>)
 800337e:	2200      	movs	r2, #0
 8003380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003382:	4805      	ldr	r0, [pc, #20]	@ (8003398 <MX_USART6_UART_Init+0x4c>)
 8003384:	f004 fa28 	bl	80077d8 <HAL_UART_Init>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800338e:	f7fd febd 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000760 	.word	0x20000760
 800339c:	40011400 	.word	0x40011400

080033a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08e      	sub	sp, #56	@ 0x38
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a4c      	ldr	r2, [pc, #304]	@ (80034f0 <HAL_UART_MspInit+0x150>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d12d      	bne.n	800341e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	623b      	str	r3, [r7, #32]
 80033c6:	4b4b      	ldr	r3, [pc, #300]	@ (80034f4 <HAL_UART_MspInit+0x154>)
 80033c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ca:	4a4a      	ldr	r2, [pc, #296]	@ (80034f4 <HAL_UART_MspInit+0x154>)
 80033cc:	f043 0310 	orr.w	r3, r3, #16
 80033d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80033d2:	4b48      	ldr	r3, [pc, #288]	@ (80034f4 <HAL_UART_MspInit+0x154>)
 80033d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	623b      	str	r3, [r7, #32]
 80033dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	4b44      	ldr	r3, [pc, #272]	@ (80034f4 <HAL_UART_MspInit+0x154>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e6:	4a43      	ldr	r2, [pc, #268]	@ (80034f4 <HAL_UART_MspInit+0x154>)
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ee:	4b41      	ldr	r3, [pc, #260]	@ (80034f4 <HAL_UART_MspInit+0x154>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	61fb      	str	r3, [r7, #28]
 80033f8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80033fa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003400:	2302      	movs	r3, #2
 8003402:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003404:	2300      	movs	r3, #0
 8003406:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003408:	2303      	movs	r3, #3
 800340a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800340c:	2307      	movs	r3, #7
 800340e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003410:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003414:	4619      	mov	r1, r3
 8003416:	4838      	ldr	r0, [pc, #224]	@ (80034f8 <HAL_UART_MspInit+0x158>)
 8003418:	f001 fdf6 	bl	8005008 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800341c:	e063      	b.n	80034e6 <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART3)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a36      	ldr	r2, [pc, #216]	@ (80034fc <HAL_UART_MspInit+0x15c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d12d      	bne.n	8003484 <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003428:	2300      	movs	r3, #0
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	4b31      	ldr	r3, [pc, #196]	@ (80034f4 <HAL_UART_MspInit+0x154>)
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	4a30      	ldr	r2, [pc, #192]	@ (80034f4 <HAL_UART_MspInit+0x154>)
 8003432:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003436:	6413      	str	r3, [r2, #64]	@ 0x40
 8003438:	4b2e      	ldr	r3, [pc, #184]	@ (80034f4 <HAL_UART_MspInit+0x154>)
 800343a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	4b2a      	ldr	r3, [pc, #168]	@ (80034f4 <HAL_UART_MspInit+0x154>)
 800344a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344c:	4a29      	ldr	r2, [pc, #164]	@ (80034f4 <HAL_UART_MspInit+0x154>)
 800344e:	f043 0302 	orr.w	r3, r3, #2
 8003452:	6313      	str	r3, [r2, #48]	@ 0x30
 8003454:	4b27      	ldr	r3, [pc, #156]	@ (80034f4 <HAL_UART_MspInit+0x154>)
 8003456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003460:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003464:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346a:	2300      	movs	r3, #0
 800346c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800346e:	2303      	movs	r3, #3
 8003470:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003472:	2307      	movs	r3, #7
 8003474:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800347a:	4619      	mov	r1, r3
 800347c:	4820      	ldr	r0, [pc, #128]	@ (8003500 <HAL_UART_MspInit+0x160>)
 800347e:	f001 fdc3 	bl	8005008 <HAL_GPIO_Init>
}
 8003482:	e030      	b.n	80034e6 <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART6)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1e      	ldr	r2, [pc, #120]	@ (8003504 <HAL_UART_MspInit+0x164>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d12b      	bne.n	80034e6 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART6_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	4b18      	ldr	r3, [pc, #96]	@ (80034f4 <HAL_UART_MspInit+0x154>)
 8003494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003496:	4a17      	ldr	r2, [pc, #92]	@ (80034f4 <HAL_UART_MspInit+0x154>)
 8003498:	f043 0320 	orr.w	r3, r3, #32
 800349c:	6453      	str	r3, [r2, #68]	@ 0x44
 800349e:	4b15      	ldr	r3, [pc, #84]	@ (80034f4 <HAL_UART_MspInit+0x154>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	4b11      	ldr	r3, [pc, #68]	@ (80034f4 <HAL_UART_MspInit+0x154>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b2:	4a10      	ldr	r2, [pc, #64]	@ (80034f4 <HAL_UART_MspInit+0x154>)
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ba:	4b0e      	ldr	r3, [pc, #56]	@ (80034f4 <HAL_UART_MspInit+0x154>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034c6:	23c0      	movs	r3, #192	@ 0xc0
 80034c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ca:	2302      	movs	r3, #2
 80034cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d2:	2303      	movs	r3, #3
 80034d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80034d6:	2308      	movs	r3, #8
 80034d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034de:	4619      	mov	r1, r3
 80034e0:	4809      	ldr	r0, [pc, #36]	@ (8003508 <HAL_UART_MspInit+0x168>)
 80034e2:	f001 fd91 	bl	8005008 <HAL_GPIO_Init>
}
 80034e6:	bf00      	nop
 80034e8:	3738      	adds	r7, #56	@ 0x38
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40011000 	.word	0x40011000
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40020000 	.word	0x40020000
 80034fc:	40004800 	.word	0x40004800
 8003500:	40020400 	.word	0x40020400
 8003504:	40011400 	.word	0x40011400
 8003508:	40020800 	.word	0x40020800

0800350c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800350c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003544 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003510:	f7ff fe58 	bl	80031c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003514:	480c      	ldr	r0, [pc, #48]	@ (8003548 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003516:	490d      	ldr	r1, [pc, #52]	@ (800354c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003518:	4a0d      	ldr	r2, [pc, #52]	@ (8003550 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800351a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800351c:	e002      	b.n	8003524 <LoopCopyDataInit>

0800351e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800351e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003522:	3304      	adds	r3, #4

08003524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003528:	d3f9      	bcc.n	800351e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800352a:	4a0a      	ldr	r2, [pc, #40]	@ (8003554 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800352c:	4c0a      	ldr	r4, [pc, #40]	@ (8003558 <LoopFillZerobss+0x22>)
  movs r3, #0
 800352e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003530:	e001      	b.n	8003536 <LoopFillZerobss>

08003532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003534:	3204      	adds	r2, #4

08003536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003538:	d3fb      	bcc.n	8003532 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800353a:	f018 fb3f 	bl	801bbbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800353e:	f7fd fd4f 	bl	8000fe0 <main>
  bx  lr    
 8003542:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003544:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800354c:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8003550:	08021090 	.word	0x08021090
  ldr r2, =_sbss
 8003554:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8003558:	2000e74c 	.word	0x2000e74c

0800355c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800355c:	e7fe      	b.n	800355c <ADC_IRQHandler>

0800355e <eth_chip_regster_bus_io>:
  * @param       ioctx�������豸IO����
  * @retval      ETH_CHIP_STATUS_OK��OK
  *              ETH_CHIP_STATUS_ERROR��ȱ�ٹ���
  */
int32_t  eth_chip_regster_bus_io(eth_chip_object_t *pobj, eth_chip_ioc_tx_t *ioctx)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
    if (!pobj || !ioctx->readreg || !ioctx->writereg || !ioctx->gettick)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <eth_chip_regster_bus_io+0x28>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d007      	beq.n	8003586 <eth_chip_regster_bus_io+0x28>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <eth_chip_regster_bus_io+0x28>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d102      	bne.n	800358c <eth_chip_regster_bus_io+0x2e>
    {
        return ETH_CHIP_STATUS_ERROR;
 8003586:	f04f 33ff 	mov.w	r3, #4294967295
 800358a:	e014      	b.n	80035b6 <eth_chip_regster_bus_io+0x58>
    }

    pobj->io.init = ioctx->init;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	609a      	str	r2, [r3, #8]
    pobj->io.deinit = ioctx->deinit;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	60da      	str	r2, [r3, #12]
    pobj->io.readreg = ioctx->readreg;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	615a      	str	r2, [r3, #20]
    pobj->io.writereg = ioctx->writereg;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	611a      	str	r2, [r3, #16]
    pobj->io.gettick = ioctx->gettick;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	619a      	str	r2, [r3, #24]

    return ETH_CHIP_STATUS_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <eth_chip_init>:
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д��Ĵ���
                 ETH_CHIP_STATUS_RESET_TIMEOUT���޷�ִ��������λ
  */
int32_t eth_chip_init(eth_chip_object_t *pobj)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	2300      	movs	r3, #0
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]
    int32_t status = ETH_CHIP_STATUS_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	613b      	str	r3, [r7, #16]
        LAN8720A    Register 2    0x0007
                    Register 3    0xC0F0

        RTL8201BL   Register 2    0x0000
                    Register 3    0x8201 */
    pobj->io.readreg(addr, PHY_REGISTER2, &regvalue);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f107 0208 	add.w	r2, r7, #8
 80035e4:	2102      	movs	r1, #2
 80035e6:	6978      	ldr	r0, [r7, #20]
 80035e8:	4798      	blx	r3

    switch (regvalue)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b1c      	cmp	r3, #28
 80035ee:	d02d      	beq.n	800364c <eth_chip_init+0x88>
 80035f0:	2b1c      	cmp	r3, #28
 80035f2:	d847      	bhi.n	8003684 <eth_chip_init+0xc0>
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <eth_chip_init+0x3a>
 80035f8:	2b07      	cmp	r3, #7
 80035fa:	d036      	beq.n	800366a <eth_chip_init+0xa6>
 80035fc:	e042      	b.n	8003684 <eth_chip_init+0xc0>
    {
        case YT8512C_AND_RTL8201BL_PHYREGISTER2:
            pobj->io.readreg(addr, PHY_REGISTER3, &regvalue);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f107 0208 	add.w	r2, r7, #8
 8003606:	2103      	movs	r1, #3
 8003608:	6978      	ldr	r0, [r7, #20]
 800360a:	4798      	blx	r3

            if (regvalue == 0x128)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 8003612:	d10e      	bne.n	8003632 <eth_chip_init+0x6e>
            {
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x11);
 8003614:	4b6a      	ldr	r3, [pc, #424]	@ (80037c0 <eth_chip_init+0x1fc>)
 8003616:	2211      	movs	r2, #17
 8003618:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x4010);
 800361a:	4b6a      	ldr	r3, [pc, #424]	@ (80037c4 <eth_chip_init+0x200>)
 800361c:	f244 0210 	movw	r2, #16400	@ 0x4010
 8003620:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x2000);
 8003622:	4b69      	ldr	r3, [pc, #420]	@ (80037c8 <eth_chip_init+0x204>)
 8003624:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003628:	801a      	strh	r2, [r3, #0]
                PHY_TYPE = YT8512C;
 800362a:	4b68      	ldr	r3, [pc, #416]	@ (80037cc <eth_chip_init+0x208>)
 800362c:	2202      	movs	r2, #2
 800362e:	601a      	str	r2, [r3, #0]
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x10);
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0022);
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0004);
                PHY_TYPE = RTL8201;
            }
            break;
 8003630:	e028      	b.n	8003684 <eth_chip_init+0xc0>
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x10);
 8003632:	4b63      	ldr	r3, [pc, #396]	@ (80037c0 <eth_chip_init+0x1fc>)
 8003634:	2210      	movs	r2, #16
 8003636:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0022);
 8003638:	4b62      	ldr	r3, [pc, #392]	@ (80037c4 <eth_chip_init+0x200>)
 800363a:	2222      	movs	r2, #34	@ 0x22
 800363c:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0004);
 800363e:	4b62      	ldr	r3, [pc, #392]	@ (80037c8 <eth_chip_init+0x204>)
 8003640:	2204      	movs	r2, #4
 8003642:	801a      	strh	r2, [r3, #0]
                PHY_TYPE = RTL8201;
 8003644:	4b61      	ldr	r3, [pc, #388]	@ (80037cc <eth_chip_init+0x208>)
 8003646:	2203      	movs	r2, #3
 8003648:	601a      	str	r2, [r3, #0]
            break;
 800364a:	e01b      	b.n	8003684 <eth_chip_init+0xc0>
        case SR8201F_PHYREGISTER2:
            ETH_CHIP_PHYSCSR  = ((uint16_t)0x00);
 800364c:	4b5c      	ldr	r3, [pc, #368]	@ (80037c0 <eth_chip_init+0x1fc>)
 800364e:	2200      	movs	r2, #0
 8003650:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_SPEED_STATUS = ((uint16_t)0x2020);
 8003652:	4b5c      	ldr	r3, [pc, #368]	@ (80037c4 <eth_chip_init+0x200>)
 8003654:	f242 0220 	movw	r2, #8224	@ 0x2020
 8003658:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0100);
 800365a:	4b5b      	ldr	r3, [pc, #364]	@ (80037c8 <eth_chip_init+0x204>)
 800365c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003660:	801a      	strh	r2, [r3, #0]
            PHY_TYPE = SR8201F;
 8003662:	4b5a      	ldr	r3, [pc, #360]	@ (80037cc <eth_chip_init+0x208>)
 8003664:	2201      	movs	r2, #1
 8003666:	601a      	str	r2, [r3, #0]
            break;
 8003668:	e00c      	b.n	8003684 <eth_chip_init+0xc0>
        case LAN8720A_PHYREGISTER2:
            ETH_CHIP_PHYSCSR  = ((uint16_t)0x1F);
 800366a:	4b55      	ldr	r3, [pc, #340]	@ (80037c0 <eth_chip_init+0x1fc>)
 800366c:	221f      	movs	r2, #31
 800366e:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0004);
 8003670:	4b54      	ldr	r3, [pc, #336]	@ (80037c4 <eth_chip_init+0x200>)
 8003672:	2204      	movs	r2, #4
 8003674:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0010);
 8003676:	4b54      	ldr	r3, [pc, #336]	@ (80037c8 <eth_chip_init+0x204>)
 8003678:	2210      	movs	r2, #16
 800367a:	801a      	strh	r2, [r3, #0]
            PHY_TYPE = LAN8720;
 800367c:	4b53      	ldr	r3, [pc, #332]	@ (80037cc <eth_chip_init+0x208>)
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
            break;
 8003682:	bf00      	nop
    }
#endif

    if (pobj->is_initialized == 0)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d17e      	bne.n	800378a <eth_chip_init+0x1c6>
    {
        if (pobj->io.init != 0)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <eth_chip_init+0xd6>
        {
            /* MDCʱ�� */
            pobj->io.init();
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4798      	blx	r3
        }

        /* ����PHY��ַΪ32 */
        pobj->devaddr = ETH_CHIP_MAX_DEV_ADDR + 1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	601a      	str	r2, [r3, #0]

        /* ��ҪΪ�˲���PHY��ַ */
        for (addr = 0; addr <= ETH_CHIP_MAX_DEV_ADDR; addr ++)
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	e01e      	b.n	80036e4 <eth_chip_init+0x120>
        {
            if (pobj->io.readreg(addr, ETH_CHIP_PHYSCSR, &regvalue) < 0)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	4a45      	ldr	r2, [pc, #276]	@ (80037c0 <eth_chip_init+0x1fc>)
 80036ac:	8812      	ldrh	r2, [r2, #0]
 80036ae:	4611      	mov	r1, r2
 80036b0:	f107 0208 	add.w	r2, r7, #8
 80036b4:	6978      	ldr	r0, [r7, #20]
 80036b6:	4798      	blx	r3
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	da03      	bge.n	80036c6 <eth_chip_init+0x102>
            {
                status = ETH_CHIP_STATUS_READ_ERROR;
 80036be:	f06f 0304 	mvn.w	r3, #4
 80036c2:	613b      	str	r3, [r7, #16]
                /* �޷���ȡ����豸��ַ������һ����ַ */
                continue;
 80036c4:	e00b      	b.n	80036de <eth_chip_init+0x11a>
            }
            /* �Ѿ��ҵ�PHY��ַ�� */
            if ((regvalue & ETH_CHIP_PHY_COUNT) == addr)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f003 031f 	and.w	r3, r3, #31
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d105      	bne.n	80036de <eth_chip_init+0x11a>
            {
                pobj->devaddr = addr;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	601a      	str	r2, [r3, #0]
                status = ETH_CHIP_STATUS_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	613b      	str	r3, [r7, #16]
                break;
 80036dc:	e005      	b.n	80036ea <eth_chip_init+0x126>
        for (addr = 0; addr <= ETH_CHIP_MAX_DEV_ADDR; addr ++)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	3301      	adds	r3, #1
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2b1f      	cmp	r3, #31
 80036e8:	d9dd      	bls.n	80036a6 <eth_chip_init+0xe2>
            }
        }

        /* �ж����PHY��ַ�Ƿ����32��2^5��*/
        if (pobj->devaddr > ETH_CHIP_MAX_DEV_ADDR)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b1f      	cmp	r3, #31
 80036f0:	d902      	bls.n	80036f8 <eth_chip_init+0x134>
        {
            status = ETH_CHIP_STATUS_ADDRESS_ERROR;
 80036f2:	f06f 0302 	mvn.w	r3, #2
 80036f6:	613b      	str	r3, [r7, #16]
        }

        /* ���PHY��ַ��Ч */
        if (status == ETH_CHIP_STATUS_OK)
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d145      	bne.n	800378a <eth_chip_init+0x1c6>
        {
            /* ����������λ  */
            if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, ETH_CHIP_BCR_SOFT_RESET) >= 0)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6810      	ldr	r0, [r2, #0]
 8003706:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800370a:	2100      	movs	r1, #0
 800370c:	4798      	blx	r3
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	db37      	blt.n	8003784 <eth_chip_init+0x1c0>
            {
                /* ��ȡ��������״̬ */
                if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &regvalue) >= 0)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6810      	ldr	r0, [r2, #0]
 800371c:	f107 0208 	add.w	r2, r7, #8
 8003720:	2100      	movs	r1, #0
 8003722:	4798      	blx	r3
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	db28      	blt.n	800377c <eth_chip_init+0x1b8>
                {
                    tickstart = pobj->io.gettick();
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	4798      	blx	r3
 8003730:	4603      	mov	r3, r0
 8003732:	60fb      	str	r3, [r7, #12]

                    /* �ȴ�������λ��ɻ�ʱ  */
                    while (regvalue & ETH_CHIP_BCR_SOFT_RESET)
 8003734:	e01c      	b.n	8003770 <eth_chip_init+0x1ac>
                    {
                        if ((pobj->io.gettick() - tickstart) <= ETH_CHIP_SW_RESET_TO)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	4798      	blx	r3
 800373c:	4603      	mov	r3, r0
 800373e:	461a      	mov	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003748:	d80e      	bhi.n	8003768 <eth_chip_init+0x1a4>
                        {
                            if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &regvalue) < 0)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6810      	ldr	r0, [r2, #0]
 8003752:	f107 0208 	add.w	r2, r7, #8
 8003756:	2100      	movs	r1, #0
 8003758:	4798      	blx	r3
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	da07      	bge.n	8003770 <eth_chip_init+0x1ac>
                            {
                                status = ETH_CHIP_STATUS_READ_ERROR;
 8003760:	f06f 0304 	mvn.w	r3, #4
 8003764:	613b      	str	r3, [r7, #16]
                                break;
 8003766:	e010      	b.n	800378a <eth_chip_init+0x1c6>
                            }
                        }
                        else
                        {
                            status = ETH_CHIP_STATUS_RESET_TIMEOUT;
 8003768:	f06f 0301 	mvn.w	r3, #1
 800376c:	613b      	str	r3, [r7, #16]
                            break;
 800376e:	e00c      	b.n	800378a <eth_chip_init+0x1c6>
                    while (regvalue & ETH_CHIP_BCR_SOFT_RESET)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1dd      	bne.n	8003736 <eth_chip_init+0x172>
 800377a:	e006      	b.n	800378a <eth_chip_init+0x1c6>
                        }
                    }
                }
                else
                {
                    status = ETH_CHIP_STATUS_READ_ERROR;
 800377c:	f06f 0304 	mvn.w	r3, #4
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	e002      	b.n	800378a <eth_chip_init+0x1c6>
                }
            }
            else
            {
                status = ETH_CHIP_STATUS_WRITE_ERROR;
 8003784:	f06f 0303 	mvn.w	r3, #3
 8003788:	613b      	str	r3, [r7, #16]
            }
        }
    }

    /* ���������ʼ����ɣ����� */
    if (status == ETH_CHIP_STATUS_OK)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d112      	bne.n	80037b6 <eth_chip_init+0x1f2>
    {
        tickstart =  pobj->io.gettick();
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	4798      	blx	r3
 8003796:	4603      	mov	r3, r0
 8003798:	60fb      	str	r3, [r7, #12]

        /* �ȴ�2s���г�ʼ�� */
        while ((pobj->io.gettick() - tickstart) <= ETH_CHIP_INIT_TO)
 800379a:	bf00      	nop
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	4798      	blx	r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	461a      	mov	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80037ae:	d9f5      	bls.n	800379c <eth_chip_init+0x1d8>
        {
        }
        pobj->is_initialized = 1;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	605a      	str	r2, [r3, #4]
    }

    return status;
 80037b6:	693b      	ldr	r3, [r7, #16]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	200007ac 	.word	0x200007ac
 80037c4:	200007ae 	.word	0x200007ae
 80037c8:	200007b0 	.word	0x200007b0
 80037cc:	200007a8 	.word	0x200007a8

080037d0 <eth_chip_disable_power_down_mode>:
  * @retval      ETH_CHIP_STATUS_OK���رճɹ�
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д�Ĵ���
  */
int32_t eth_chip_disable_power_down_mode(eth_chip_object_t *pobj)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	60bb      	str	r3, [r7, #8]
    int32_t status = ETH_CHIP_STATUS_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]

    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &readval) >= 0)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6810      	ldr	r0, [r2, #0]
 80037e8:	f107 0208 	add.w	r2, r7, #8
 80037ec:	2100      	movs	r1, #0
 80037ee:	4798      	blx	r3
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	db11      	blt.n	800381a <eth_chip_disable_power_down_mode+0x4a>
    {
        readval &= ~ETH_CHIP_BCR_POWER_DOWN;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037fc:	60bb      	str	r3, [r7, #8]

        /* ����µ�ģʽ */
        if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, readval) < 0)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6810      	ldr	r0, [r2, #0]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	2100      	movs	r1, #0
 800380a:	4798      	blx	r3
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	da06      	bge.n	8003820 <eth_chip_disable_power_down_mode+0x50>
        {
            status =  ETH_CHIP_STATUS_WRITE_ERROR;
 8003812:	f06f 0303 	mvn.w	r3, #3
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	e002      	b.n	8003820 <eth_chip_disable_power_down_mode+0x50>
        }
    }
    else
    {
        status = ETH_CHIP_STATUS_READ_ERROR;
 800381a:	f06f 0304 	mvn.w	r3, #4
 800381e:	60fb      	str	r3, [r7, #12]
    }

    return status;
 8003820:	68fb      	ldr	r3, [r7, #12]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <eth_chip_start_auto_nego>:
  * @retval      ETH_CHIP_STATUS_OK���رճɹ�
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д�Ĵ���
  */
int32_t eth_chip_start_auto_nego(eth_chip_object_t *pobj)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b084      	sub	sp, #16
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 8003832:	2300      	movs	r3, #0
 8003834:	60bb      	str	r3, [r7, #8]
    int32_t status = ETH_CHIP_STATUS_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]

    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &readval) >= 0)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6810      	ldr	r0, [r2, #0]
 8003842:	f107 0208 	add.w	r2, r7, #8
 8003846:	2100      	movs	r1, #0
 8003848:	4798      	blx	r3
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	db11      	blt.n	8003874 <eth_chip_start_auto_nego+0x4a>
    {
        readval |= ETH_CHIP_BCR_AUTONEGO_EN;
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003856:	60bb      	str	r3, [r7, #8]

        /* �����Զ�Э�� */
        if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, readval) < 0)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6810      	ldr	r0, [r2, #0]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	2100      	movs	r1, #0
 8003864:	4798      	blx	r3
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	da06      	bge.n	800387a <eth_chip_start_auto_nego+0x50>
        {
            status =  ETH_CHIP_STATUS_WRITE_ERROR;
 800386c:	f06f 0303 	mvn.w	r3, #3
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	e002      	b.n	800387a <eth_chip_start_auto_nego+0x50>
        }
    }
    else
    {
        status = ETH_CHIP_STATUS_READ_ERROR;
 8003874:	f06f 0304 	mvn.w	r3, #4
 8003878:	60fb      	str	r3, [r7, #12]
    }

    return status;
 800387a:	68fb      	ldr	r3, [r7, #12]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <eth_chip_get_link_state>:
                 ETH_CHIP_STATUS_10MBITS_FULLDUPLEX��10M��ȫ˫��
                 ETH_CHIP_STATUS_10MBITS_HALFDUPLEX ��10M����˫��
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
  */
int32_t eth_chip_get_link_state(eth_chip_object_t *pobj)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]

    /* ������⹦�ܼĴ�������ֵ */
    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_PHYSCSR, &readval) < 0)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6810      	ldr	r0, [r2, #0]
 8003898:	4a1a      	ldr	r2, [pc, #104]	@ (8003904 <eth_chip_get_link_state+0x80>)
 800389a:	8812      	ldrh	r2, [r2, #0]
 800389c:	4611      	mov	r1, r2
 800389e:	f107 020c 	add.w	r2, r7, #12
 80038a2:	4798      	blx	r3
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	da02      	bge.n	80038b0 <eth_chip_get_link_state+0x2c>
    {
        return ETH_CHIP_STATUS_READ_ERROR;
 80038aa:	f06f 0304 	mvn.w	r3, #4
 80038ae:	e024      	b.n	80038fa <eth_chip_get_link_state+0x76>
    }

    if (((readval & ETH_CHIP_SPEED_STATUS) != ETH_CHIP_SPEED_STATUS) && ((readval & ETH_CHIP_DUPLEX_STATUS) != 0))
 80038b0:	4b15      	ldr	r3, [pc, #84]	@ (8003908 <eth_chip_get_link_state+0x84>)
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4013      	ands	r3, r2
 80038ba:	4a13      	ldr	r2, [pc, #76]	@ (8003908 <eth_chip_get_link_state+0x84>)
 80038bc:	8812      	ldrh	r2, [r2, #0]
 80038be:	4293      	cmp	r3, r2
 80038c0:	d008      	beq.n	80038d4 <eth_chip_get_link_state+0x50>
 80038c2:	4b12      	ldr	r3, [pc, #72]	@ (800390c <eth_chip_get_link_state+0x88>)
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4013      	ands	r3, r2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <eth_chip_get_link_state+0x50>
    {
        return ETH_CHIP_STATUS_100MBITS_FULLDUPLEX;
 80038d0:	2302      	movs	r3, #2
 80038d2:	e012      	b.n	80038fa <eth_chip_get_link_state+0x76>
    }
    else if (((readval & ETH_CHIP_SPEED_STATUS) != ETH_CHIP_SPEED_STATUS))
 80038d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003908 <eth_chip_get_link_state+0x84>)
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4013      	ands	r3, r2
 80038de:	4a0a      	ldr	r2, [pc, #40]	@ (8003908 <eth_chip_get_link_state+0x84>)
 80038e0:	8812      	ldrh	r2, [r2, #0]
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d001      	beq.n	80038ea <eth_chip_get_link_state+0x66>
    {
        return ETH_CHIP_STATUS_100MBITS_HALFDUPLEX;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e007      	b.n	80038fa <eth_chip_get_link_state+0x76>
    }
    else if (((readval & ETH_CHIP_BCR_DUPLEX_MODE) != ETH_CHIP_BCR_DUPLEX_MODE))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <eth_chip_get_link_state+0x74>
    {
        return ETH_CHIP_STATUS_10MBITS_FULLDUPLEX;
 80038f4:	2304      	movs	r3, #4
 80038f6:	e000      	b.n	80038fa <eth_chip_get_link_state+0x76>
    }
    else
    {
        return ETH_CHIP_STATUS_10MBITS_HALFDUPLEX;
 80038f8:	2305      	movs	r3, #5
    }
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	200007ac 	.word	0x200007ac
 8003908:	200007ae 	.word	0x200007ae
 800390c:	200007b0 	.word	0x200007b0

08003910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003914:	4b0e      	ldr	r3, [pc, #56]	@ (8003950 <HAL_Init+0x40>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a0d      	ldr	r2, [pc, #52]	@ (8003950 <HAL_Init+0x40>)
 800391a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800391e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003920:	4b0b      	ldr	r3, [pc, #44]	@ (8003950 <HAL_Init+0x40>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a0a      	ldr	r2, [pc, #40]	@ (8003950 <HAL_Init+0x40>)
 8003926:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800392a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800392c:	4b08      	ldr	r3, [pc, #32]	@ (8003950 <HAL_Init+0x40>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a07      	ldr	r2, [pc, #28]	@ (8003950 <HAL_Init+0x40>)
 8003932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003938:	2003      	movs	r0, #3
 800393a:	f000 f8fc 	bl	8003b36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800393e:	200f      	movs	r0, #15
 8003940:	f7ff f8dc 	bl	8002afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003944:	f7ff f8ae 	bl	8002aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40023c00 	.word	0x40023c00

08003954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003958:	4b06      	ldr	r3, [pc, #24]	@ (8003974 <HAL_IncTick+0x20>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	4b06      	ldr	r3, [pc, #24]	@ (8003978 <HAL_IncTick+0x24>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4413      	add	r3, r2
 8003964:	4a04      	ldr	r2, [pc, #16]	@ (8003978 <HAL_IncTick+0x24>)
 8003966:	6013      	str	r3, [r2, #0]
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000008 	.word	0x20000008
 8003978:	200007b4 	.word	0x200007b4

0800397c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return uwTick;
 8003980:	4b03      	ldr	r3, [pc, #12]	@ (8003990 <HAL_GetTick+0x14>)
 8003982:	681b      	ldr	r3, [r3, #0]
}
 8003984:	4618      	mov	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	200007b4 	.word	0x200007b4

08003994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800399c:	f7ff ffee 	bl	800397c <HAL_GetTick>
 80039a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ac:	d005      	beq.n	80039ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ae:	4b0a      	ldr	r3, [pc, #40]	@ (80039d8 <HAL_Delay+0x44>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039ba:	bf00      	nop
 80039bc:	f7ff ffde 	bl	800397c <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d8f7      	bhi.n	80039bc <HAL_Delay+0x28>
  {
  }
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000008 	.word	0x20000008

080039dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003a20 <__NVIC_SetPriorityGrouping+0x44>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039f8:	4013      	ands	r3, r2
 80039fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a0e:	4a04      	ldr	r2, [pc, #16]	@ (8003a20 <__NVIC_SetPriorityGrouping+0x44>)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	60d3      	str	r3, [r2, #12]
}
 8003a14:	bf00      	nop
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	e000ed00 	.word	0xe000ed00

08003a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a28:	4b04      	ldr	r3, [pc, #16]	@ (8003a3c <__NVIC_GetPriorityGrouping+0x18>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	0a1b      	lsrs	r3, r3, #8
 8003a2e:	f003 0307 	and.w	r3, r3, #7
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	e000ed00 	.word	0xe000ed00

08003a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	db0b      	blt.n	8003a6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	f003 021f 	and.w	r2, r3, #31
 8003a58:	4907      	ldr	r1, [pc, #28]	@ (8003a78 <__NVIC_EnableIRQ+0x38>)
 8003a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	2001      	movs	r0, #1
 8003a62:	fa00 f202 	lsl.w	r2, r0, r2
 8003a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	e000e100 	.word	0xe000e100

08003a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	6039      	str	r1, [r7, #0]
 8003a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	db0a      	blt.n	8003aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	490c      	ldr	r1, [pc, #48]	@ (8003ac8 <__NVIC_SetPriority+0x4c>)
 8003a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9a:	0112      	lsls	r2, r2, #4
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003aa4:	e00a      	b.n	8003abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	4908      	ldr	r1, [pc, #32]	@ (8003acc <__NVIC_SetPriority+0x50>)
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	3b04      	subs	r3, #4
 8003ab4:	0112      	lsls	r2, r2, #4
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	440b      	add	r3, r1
 8003aba:	761a      	strb	r2, [r3, #24]
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	e000e100 	.word	0xe000e100
 8003acc:	e000ed00 	.word	0xe000ed00

08003ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b089      	sub	sp, #36	@ 0x24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f1c3 0307 	rsb	r3, r3, #7
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	bf28      	it	cs
 8003aee:	2304      	movcs	r3, #4
 8003af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	3304      	adds	r3, #4
 8003af6:	2b06      	cmp	r3, #6
 8003af8:	d902      	bls.n	8003b00 <NVIC_EncodePriority+0x30>
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	3b03      	subs	r3, #3
 8003afe:	e000      	b.n	8003b02 <NVIC_EncodePriority+0x32>
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b04:	f04f 32ff 	mov.w	r2, #4294967295
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43da      	mvns	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	401a      	ands	r2, r3
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b18:	f04f 31ff 	mov.w	r1, #4294967295
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b22:	43d9      	mvns	r1, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b28:	4313      	orrs	r3, r2
         );
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3724      	adds	r7, #36	@ 0x24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff ff4c 	bl	80039dc <__NVIC_SetPriorityGrouping>
}
 8003b44:	bf00      	nop
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b5e:	f7ff ff61 	bl	8003a24 <__NVIC_GetPriorityGrouping>
 8003b62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	68b9      	ldr	r1, [r7, #8]
 8003b68:	6978      	ldr	r0, [r7, #20]
 8003b6a:	f7ff ffb1 	bl	8003ad0 <NVIC_EncodePriority>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b74:	4611      	mov	r1, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff ff80 	bl	8003a7c <__NVIC_SetPriority>
}
 8003b7c:	bf00      	nop
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff ff54 	bl	8003a40 <__NVIC_EnableIRQ>
}
 8003b98:	bf00      	nop
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e08a      	b.n	8003cc8 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d106      	bne.n	8003bca <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7fe fe49 	bl	800285c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	4b40      	ldr	r3, [pc, #256]	@ (8003cd0 <HAL_ETH_Init+0x130>)
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd2:	4a3f      	ldr	r2, [pc, #252]	@ (8003cd0 <HAL_ETH_Init+0x130>)
 8003bd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bda:	4b3d      	ldr	r3, [pc, #244]	@ (8003cd0 <HAL_ETH_Init+0x130>)
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003be6:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd4 <HAL_ETH_Init+0x134>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	4a3a      	ldr	r2, [pc, #232]	@ (8003cd4 <HAL_ETH_Init+0x134>)
 8003bec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003bf0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003bf2:	4b38      	ldr	r3, [pc, #224]	@ (8003cd4 <HAL_ETH_Init+0x134>)
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	4936      	ldr	r1, [pc, #216]	@ (8003cd4 <HAL_ETH_Init+0x134>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003c00:	4b34      	ldr	r3, [pc, #208]	@ (8003cd4 <HAL_ETH_Init+0x134>)
 8003c02:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6812      	ldr	r2, [r2, #0]
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c1c:	f7ff feae 	bl	800397c <HAL_GetTick>
 8003c20:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c22:	e011      	b.n	8003c48 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003c24:	f7ff feaa 	bl	800397c <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003c32:	d909      	bls.n	8003c48 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2204      	movs	r2, #4
 8003c38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	22e0      	movs	r2, #224	@ 0xe0
 8003c40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e03f      	b.n	8003cc8 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e4      	bne.n	8003c24 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 ff16 	bl	8004a8c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 ffc1 	bl	8004be8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f001 f817 	bl	8004c9a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	461a      	mov	r2, r3
 8003c72:	2100      	movs	r1, #0
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 ff7f 	bl	8004b78 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003c88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c9a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003c9e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003cb2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40013800 	.word	0x40013800

08003cd8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ce6:	2b10      	cmp	r3, #16
 8003ce8:	d161      	bne.n	8003dae <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2204      	movs	r2, #4
 8003cfc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f9f4 	bl	80040ec <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	f7ff fe41 	bl	8003994 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d2c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d30:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	f043 0302 	orr.w	r3, r3, #2
 8003d44:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d48:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fd3b 	bl	80047c6 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0208 	orr.w	r2, r2, #8
 8003d5e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d68:	2001      	movs	r0, #1
 8003d6a:	f7ff fe13 	bl	8003994 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0204 	orr.w	r2, r2, #4
 8003d84:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6812      	ldr	r2, [r2, #0]
 8003d94:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8003d98:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8003d9c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003da0:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2240      	movs	r2, #64	@ 0x40
 8003da6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	e000      	b.n	8003db0 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
  }
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dc6:	2b40      	cmp	r3, #64	@ 0x40
 8003dc8:	d170      	bne.n	8003eac <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6812      	ldr	r2, [r2, #0]
 8003de0:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8003de4:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8003de8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003dec:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e04:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	f023 0302 	bic.w	r3, r3, #2
 8003e18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e1c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0204 	bic.w	r2, r2, #4
 8003e2c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e36:	2001      	movs	r0, #1
 8003e38:	f7ff fdac 	bl	8003994 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 fcbe 	bl	80047c6 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0208 	bic.w	r2, r2, #8
 8003e58:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e62:	2001      	movs	r0, #1
 8003e64:	f7ff fd96 	bl	8003994 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	e00e      	b.n	8003e94 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	3212      	adds	r2, #18
 8003e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e80:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	3301      	adds	r3, #1
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d9ed      	bls.n	8003e76 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2210      	movs	r2, #16
 8003ea4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	e000      	b.n	8003eae <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
  }
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b082      	sub	sp, #8
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d109      	bne.n	8003eda <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ecc:	f043 0201 	orr.w	r2, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e045      	b.n	8003f66 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ee0:	2b40      	cmp	r3, #64	@ 0x40
 8003ee2:	d13f      	bne.n	8003f64 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003eec:	2201      	movs	r2, #1
 8003eee:	6839      	ldr	r1, [r7, #0]
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 ff41 	bl	8004d78 <ETH_Prepare_Tx_Descriptors>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d009      	beq.n	8003f10 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f02:	f043 0202 	orr.w	r2, r3, #2
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e02a      	b.n	8003f66 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8003f10:	f3bf 8f4f 	dsb	sy
}
 8003f14:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d904      	bls.n	8003f32 <HAL_ETH_Transmit_IT+0x7c>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2c:	1f1a      	subs	r2, r3, #4
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00d      	beq.n	8003f60 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	2304      	movs	r3, #4
 8003f50:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	e000      	b.n	8003f66 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
  }
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b088      	sub	sp, #32
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8c:	f043 0201 	orr.w	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e0a4      	b.n	80040e4 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fa0:	2b40      	cmp	r3, #64	@ 0x40
 8003fa2:	d001      	beq.n	8003fa8 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e09d      	b.n	80040e4 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fac:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	3212      	adds	r2, #18
 8003fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fbe:	f1c3 0304 	rsb	r3, r3, #4
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003fc4:	e066      	b.n	8004094 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d007      	beq.n	8003fe2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	69da      	ldr	r2, [r3, #28]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	699a      	ldr	r2, [r3, #24]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d103      	bne.n	8003ff6 <HAL_ETH_ReadData+0x88>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d03c      	beq.n	8004070 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d005      	beq.n	800400e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	0c1b      	lsrs	r3, r3, #16
 8004014:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004018:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800402e:	2301      	movs	r3, #1
 8004030:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800404a:	461a      	mov	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	b29b      	uxth	r3, r3
 8004050:	f006 ff0e 	bl	800ae70 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	441a      	add	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	2200      	movs	r2, #0
 800406e:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	3301      	adds	r3, #1
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d902      	bls.n	8004082 <HAL_ETH_ReadData+0x114>
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	3b04      	subs	r3, #4
 8004080:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	3212      	adds	r2, #18
 8004088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800408c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	3301      	adds	r3, #1
 8004092:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8004098:	2b00      	cmp	r3, #0
 800409a:	db06      	blt.n	80040aa <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d202      	bcs.n	80040aa <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80040a4:	7cfb      	ldrb	r3, [r7, #19]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d08d      	beq.n	8003fc6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	441a      	add	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f814 	bl	80040ec <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80040ca:	7cfb      	ldrb	r3, [r7, #19]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d108      	bne.n	80040e2 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	e000      	b.n	80040e4 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3720      	adds	r7, #32
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80040f8:	2301      	movs	r3, #1
 80040fa:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004100:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	3212      	adds	r2, #18
 8004108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800410c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004112:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004114:	e044      	b.n	80041a0 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d112      	bne.n	8004144 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800411e:	f107 0308 	add.w	r3, r7, #8
 8004122:	4618      	mov	r0, r3
 8004124:	f006 fe74 	bl	800ae10 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d102      	bne.n	8004134 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	74fb      	strb	r3, [r7, #19]
 8004132:	e007      	b.n	8004144 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	461a      	mov	r2, r3
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	461a      	mov	r2, r3
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004144:	7cfb      	ldrb	r3, [r7, #19]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d02a      	beq.n	80041a0 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414e:	2b00      	cmp	r3, #0
 8004150:	d108      	bne.n	8004164 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800415a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	6053      	str	r3, [r2, #4]
 8004162:	e005      	b.n	8004170 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	3301      	adds	r3, #1
 8004180:	61fb      	str	r3, [r7, #28]
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	2b03      	cmp	r3, #3
 8004186:	d902      	bls.n	800418e <ETH_UpdateDescriptor+0xa2>
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	3b04      	subs	r3, #4
 800418c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69fa      	ldr	r2, [r7, #28]
 8004192:	3212      	adds	r2, #18
 8004194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004198:	617b      	str	r3, [r7, #20]
      desccount--;
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	3b01      	subs	r3, #1
 800419e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <ETH_UpdateDescriptor+0xc0>
 80041a6:	7cfb      	ldrb	r3, [r7, #19]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1b4      	bne.n	8004116 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d01a      	beq.n	80041ec <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	3303      	adds	r3, #3
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80041c0:	f3bf 8f5f 	dmb	sy
}
 80041c4:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6919      	ldr	r1, [r3, #16]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	18ca      	adds	r2, r1, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041de:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80041ec:	bf00      	nop
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3318      	adds	r3, #24
 8004200:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004206:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800420e:	2301      	movs	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004212:	e047      	b.n	80042a4 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8004214:	2301      	movs	r3, #1
 8004216:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	3b01      	subs	r3, #1
 800421c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	3304      	adds	r3, #4
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10a      	bne.n	8004244 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	3301      	adds	r3, #1
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	2b03      	cmp	r3, #3
 8004238:	d902      	bls.n	8004240 <HAL_ETH_ReleaseTxPacket+0x4c>
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	3b04      	subs	r3, #4
 800423e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004244:	7bbb      	ldrb	r3, [r7, #14]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d02c      	beq.n	80042a4 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68d9      	ldr	r1, [r3, #12]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	440b      	add	r3, r1
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	db1f      	blt.n	80042a0 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	3304      	adds	r3, #4
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4618      	mov	r0, r3
 800426e:	f006 fe3f 	bl	800aef0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	3304      	adds	r3, #4
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	2200      	movs	r2, #0
 800427e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	3301      	adds	r3, #1
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	2b03      	cmp	r3, #3
 800428a:	d902      	bls.n	8004292 <HAL_ETH_ReleaseTxPacket+0x9e>
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	3b04      	subs	r3, #4
 8004290:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800429e:	e001      	b.n	80042a4 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_ETH_ReleaseTxPacket+0xbc>
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1b1      	bne.n	8004214 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ca:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80042e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004414 <HAL_ETH_IRQHandler+0x158>)
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00e      	beq.n	8004312 <HAL_ETH_IRQHandler+0x56>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d009      	beq.n	8004312 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004306:	461a      	mov	r2, r3
 8004308:	4b43      	ldr	r3, [pc, #268]	@ (8004418 <HAL_ETH_IRQHandler+0x15c>)
 800430a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f005 fee5 	bl	800a0dc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00f      	beq.n	800433c <HAL_ETH_IRQHandler+0x80>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800432e:	461a      	mov	r2, r3
 8004330:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004334:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f005 fee0 	bl	800a0fc <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d042      	beq.n	80043cc <HAL_ETH_IRQHandler+0x110>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d03d      	beq.n	80043cc <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004356:	f043 0208 	orr.w	r2, r3, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d01a      	beq.n	80043a0 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004372:	695a      	ldr	r2, [r3, #20]
 8004374:	4b29      	ldr	r3, [pc, #164]	@ (800441c <HAL_ETH_IRQHandler+0x160>)
 8004376:	4013      	ands	r3, r2
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8004390:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004394:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	22e0      	movs	r2, #224	@ 0xe0
 800439a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800439e:	e012      	b.n	80043c6 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	f248 6380 	movw	r3, #34432	@ 0x8680
 80043ae:	4013      	ands	r3, r2
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043be:	461a      	mov	r2, r3
 80043c0:	f248 6380 	movw	r3, #34432	@ 0x8680
 80043c4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f005 fea8 	bl	800a11c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00e      	beq.n	80043f4 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f81a 	bl	8004420 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d006      	beq.n	800440c <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80043fe:	4b05      	ldr	r3, [pc, #20]	@ (8004414 <HAL_ETH_IRQHandler+0x158>)
 8004400:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004404:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f814 	bl	8004434 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800440c:	bf00      	nop
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40013c00 	.word	0x40013c00
 8004418:	00010040 	.word	0x00010040
 800441c:	007e2000 	.word	0x007e2000

08004420 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f003 031c 	and.w	r3, r3, #28
 8004464:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	02db      	lsls	r3, r3, #11
 800446a:	b29b      	uxth	r3, r3
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	019b      	lsls	r3, r3, #6
 8004476:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f023 0302 	bic.w	r3, r3, #2
 8004486:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004498:	f7ff fa70 	bl	800397c <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800449e:	e00d      	b.n	80044bc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80044a0:	f7ff fa6c 	bl	800397c <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ae:	d301      	bcc.n	80044b4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e010      	b.n	80044d6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1ec      	bne.n	80044a0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b086      	sub	sp, #24
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
 80044ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f003 031c 	and.w	r3, r3, #28
 80044fa:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	02db      	lsls	r3, r3, #11
 8004500:	b29b      	uxth	r3, r3
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	019b      	lsls	r3, r3, #6
 800450c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f043 0302 	orr.w	r3, r3, #2
 800451c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004538:	f7ff fa20 	bl	800397c <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800453e:	e00d      	b.n	800455c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004540:	f7ff fa1c 	bl	800397c <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800454e:	d301      	bcc.n	8004554 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e009      	b.n	8004568 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1ec      	bne.n	8004540 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0e6      	b.n	8004752 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0310 	and.w	r3, r3, #16
 800458e:	2b00      	cmp	r3, #0
 8004590:	bf14      	ite	ne
 8004592:	2301      	movne	r3, #1
 8004594:	2300      	moveq	r3, #0
 8004596:	b2db      	uxtb	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bf0c      	ite	eq
 80045bc:	2301      	moveq	r3, #1
 80045be:	2300      	movne	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	bf14      	ite	ne
 80045d8:	2301      	movne	r3, #1
 80045da:	2300      	moveq	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bf0c      	ite	eq
 80045f2:	2301      	moveq	r3, #1
 80045f4:	2300      	movne	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf14      	ite	ne
 800460c:	2301      	movne	r3, #1
 800460e:	2300      	moveq	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800463e:	2b00      	cmp	r3, #0
 8004640:	bf0c      	ite	eq
 8004642:	2301      	moveq	r3, #1
 8004644:	2300      	movne	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004658:	2b00      	cmp	r3, #0
 800465a:	bf0c      	ite	eq
 800465c:	2301      	moveq	r3, #1
 800465e:	2300      	movne	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004672:	2b00      	cmp	r3, #0
 8004674:	bf14      	ite	ne
 8004676:	2301      	movne	r3, #1
 8004678:	2300      	moveq	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800469a:	2b00      	cmp	r3, #0
 800469c:	bf14      	ite	ne
 800469e:	2301      	movne	r3, #1
 80046a0:	2300      	moveq	r3, #0
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bf14      	ite	ne
 80046b8:	2301      	movne	r3, #1
 80046ba:	2300      	moveq	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	461a      	mov	r2, r3
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bf14      	ite	ne
 80046d2:	2301      	movne	r3, #1
 80046d4:	2300      	moveq	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	bf0c      	ite	eq
 80046ee:	2301      	moveq	r3, #1
 80046f0:	2300      	movne	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	0c1b      	lsrs	r3, r3, #16
 8004712:	b29a      	uxth	r2, r3
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b00      	cmp	r3, #0
 8004724:	bf14      	ite	ne
 8004726:	2301      	movne	r3, #1
 8004728:	2300      	moveq	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800473e:	2b00      	cmp	r3, #0
 8004740:	bf14      	ite	ne
 8004742:	2301      	movne	r3, #1
 8004744:	2300      	moveq	r3, #0
 8004746:	b2db      	uxtb	r3, r3
 8004748:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e00b      	b.n	800478a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004778:	2b10      	cmp	r3, #16
 800477a:	d105      	bne.n	8004788 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800477c:	6839      	ldr	r1, [r7, #0]
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f846 	bl	8004810 <ETH_SetMACConfig>

    return HAL_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	e000      	b.n	800478a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
  }
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80047e8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80047f6:	2001      	movs	r0, #1
 80047f8:	f7ff f8cc 	bl	8003994 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004806:	6193      	str	r3, [r2, #24]
}
 8004808:	bf00      	nop
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4b53      	ldr	r3, [pc, #332]	@ (8004974 <ETH_SetMACConfig+0x164>)
 8004826:	4013      	ands	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	7b9b      	ldrb	r3, [r3, #14]
 800482e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	7c12      	ldrb	r2, [r2, #16]
 8004834:	2a00      	cmp	r2, #0
 8004836:	d102      	bne.n	800483e <ETH_SetMACConfig+0x2e>
 8004838:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800483c:	e000      	b.n	8004840 <ETH_SetMACConfig+0x30>
 800483e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004840:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	7c52      	ldrb	r2, [r2, #17]
 8004846:	2a00      	cmp	r2, #0
 8004848:	d102      	bne.n	8004850 <ETH_SetMACConfig+0x40>
 800484a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800484e:	e000      	b.n	8004852 <ETH_SetMACConfig+0x42>
 8004850:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004852:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004858:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	7fdb      	ldrb	r3, [r3, #31]
 800485e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004860:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004866:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	7f92      	ldrb	r2, [r2, #30]
 800486c:	2a00      	cmp	r2, #0
 800486e:	d102      	bne.n	8004876 <ETH_SetMACConfig+0x66>
 8004870:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004874:	e000      	b.n	8004878 <ETH_SetMACConfig+0x68>
 8004876:	2200      	movs	r2, #0
                        macconf->Speed |
 8004878:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	7f1b      	ldrb	r3, [r3, #28]
 800487e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004880:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004886:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	791b      	ldrb	r3, [r3, #4]
 800488c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800488e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004896:	2a00      	cmp	r2, #0
 8004898:	d102      	bne.n	80048a0 <ETH_SetMACConfig+0x90>
 800489a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800489e:	e000      	b.n	80048a2 <ETH_SetMACConfig+0x92>
 80048a0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80048a2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	7bdb      	ldrb	r3, [r3, #15]
 80048a8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80048aa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80048b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048b8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80048ba:	4313      	orrs	r3, r2
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80048d2:	2001      	movs	r0, #1
 80048d4:	f7ff f85e 	bl	8003994 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80048ee:	4013      	ands	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048f6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80048fe:	2a00      	cmp	r2, #0
 8004900:	d101      	bne.n	8004906 <ETH_SetMACConfig+0xf6>
 8004902:	2280      	movs	r2, #128	@ 0x80
 8004904:	e000      	b.n	8004908 <ETH_SetMACConfig+0xf8>
 8004906:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004908:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800490e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004916:	2a01      	cmp	r2, #1
 8004918:	d101      	bne.n	800491e <ETH_SetMACConfig+0x10e>
 800491a:	2208      	movs	r2, #8
 800491c:	e000      	b.n	8004920 <ETH_SetMACConfig+0x110>
 800491e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004920:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004928:	2a01      	cmp	r2, #1
 800492a:	d101      	bne.n	8004930 <ETH_SetMACConfig+0x120>
 800492c:	2204      	movs	r2, #4
 800492e:	e000      	b.n	8004932 <ETH_SetMACConfig+0x122>
 8004930:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004932:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800493a:	2a01      	cmp	r2, #1
 800493c:	d101      	bne.n	8004942 <ETH_SetMACConfig+0x132>
 800493e:	2202      	movs	r2, #2
 8004940:	e000      	b.n	8004944 <ETH_SetMACConfig+0x134>
 8004942:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004944:	4313      	orrs	r3, r2
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800495c:	2001      	movs	r0, #1
 800495e:	f7ff f819 	bl	8003994 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	619a      	str	r2, [r3, #24]
}
 800496a:	bf00      	nop
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	fd20810f 	.word	0xfd20810f

08004978 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4b3d      	ldr	r3, [pc, #244]	@ (8004a88 <ETH_SetDMAConfig+0x110>)
 8004992:	4013      	ands	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	7b1b      	ldrb	r3, [r3, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d102      	bne.n	80049a4 <ETH_SetDMAConfig+0x2c>
 800499e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80049a2:	e000      	b.n	80049a6 <ETH_SetDMAConfig+0x2e>
 80049a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	7b5b      	ldrb	r3, [r3, #13]
 80049aa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80049ac:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	7f52      	ldrb	r2, [r2, #29]
 80049b2:	2a00      	cmp	r2, #0
 80049b4:	d102      	bne.n	80049bc <ETH_SetDMAConfig+0x44>
 80049b6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80049ba:	e000      	b.n	80049be <ETH_SetDMAConfig+0x46>
 80049bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80049be:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	7b9b      	ldrb	r3, [r3, #14]
 80049c4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80049c6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80049cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	7f1b      	ldrb	r3, [r3, #28]
 80049d2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80049d4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	7f9b      	ldrb	r3, [r3, #30]
 80049da:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80049dc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80049e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80049ea:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80049ec:	4313      	orrs	r3, r2
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049fc:	461a      	mov	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a0e:	2001      	movs	r0, #1
 8004a10:	f7fe ffc0 	bl	8003994 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	791b      	ldrb	r3, [r3, #4]
 8004a26:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004a2c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004a32:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004a38:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a40:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004a42:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a48:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004a4a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004a50:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004a5e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	f7fe ff91 	bl	8003994 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6013      	str	r3, [r2, #0]
}
 8004a80:	bf00      	nop
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	f8de3f23 	.word	0xf8de3f23

08004a8c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b0a6      	sub	sp, #152	@ 0x98
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004a94:	2301      	movs	r3, #1
 8004a96:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004abc:	2301      	movs	r3, #1
 8004abe:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004adc:	2300      	movs	r3, #0
 8004ade:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004aee:	2300      	movs	r3, #0
 8004af0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004af4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004af8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004afa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004b00:	2300      	movs	r3, #0
 8004b02:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004b06:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7ff fe7f 	bl	8004810 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004b12:	2301      	movs	r3, #1
 8004b14:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004b16:	2301      	movs	r3, #1
 8004b18:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004b20:	2301      	movs	r3, #1
 8004b22:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004b24:	2300      	movs	r3, #0
 8004b26:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004b34:	2300      	movs	r3, #0
 8004b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004b42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b46:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004b48:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004b4c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004b4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b52:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004b54:	2301      	movs	r3, #1
 8004b56:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004b62:	f107 0308 	add.w	r3, r7, #8
 8004b66:	4619      	mov	r1, r3
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff ff05 	bl	8004978 <ETH_SetDMAConfig>
}
 8004b6e:	bf00      	nop
 8004b70:	3798      	adds	r7, #152	@ 0x98
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
	...

08004b78 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3305      	adds	r3, #5
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	021b      	lsls	r3, r3, #8
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	3204      	adds	r2, #4
 8004b90:	7812      	ldrb	r2, [r2, #0]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	4b11      	ldr	r3, [pc, #68]	@ (8004be0 <ETH_MACAddressConfig+0x68>)
 8004b9a:	4413      	add	r3, r2
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3303      	adds	r3, #3
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	061a      	lsls	r2, r3, #24
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3302      	adds	r3, #2
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	041b      	lsls	r3, r3, #16
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	021b      	lsls	r3, r3, #8
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	7812      	ldrb	r2, [r2, #0]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	4b06      	ldr	r3, [pc, #24]	@ (8004be4 <ETH_MACAddressConfig+0x6c>)
 8004bca:	4413      	add	r3, r2
 8004bcc:	461a      	mov	r2, r3
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	6013      	str	r3, [r2, #0]
}
 8004bd2:	bf00      	nop
 8004bd4:	371c      	adds	r7, #28
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	40028040 	.word	0x40028040
 8004be4:	40028044 	.word	0x40028044

08004be8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	e03e      	b.n	8004c74 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68d9      	ldr	r1, [r3, #12]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	440b      	add	r3, r1
 8004c06:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2200      	movs	r2, #0
 8004c12:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2200      	movs	r2, #0
 8004c18:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	3206      	adds	r2, #6
 8004c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d80c      	bhi.n	8004c58 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68d9      	ldr	r1, [r3, #12]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	4613      	mov	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	440b      	add	r3, r1
 8004c50:	461a      	mov	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	60da      	str	r2, [r3, #12]
 8004c56:	e004      	b.n	8004c62 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3301      	adds	r3, #1
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d9bd      	bls.n	8004bf6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c8c:	611a      	str	r2, [r3, #16]
}
 8004c8e:	bf00      	nop
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b085      	sub	sp, #20
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	e048      	b.n	8004d3a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6919      	ldr	r1, [r3, #16]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	440b      	add	r3, r1
 8004cb8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004ce4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	3212      	adds	r2, #18
 8004d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d80c      	bhi.n	8004d2a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6919      	ldr	r1, [r3, #16]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	440b      	add	r3, r1
 8004d22:	461a      	mov	r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	60da      	str	r2, [r3, #12]
 8004d28:	e004      	b.n	8004d34 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	3301      	adds	r3, #1
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d9b3      	bls.n	8004ca8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d6a:	60da      	str	r2, [r3, #12]
}
 8004d6c:	bf00      	nop
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b091      	sub	sp, #68	@ 0x44
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3318      	adds	r3, #24
 8004d88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004da2:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004daa:	2300      	movs	r3, #0
 8004dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004db6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dba:	d007      	beq.n	8004dcc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e115      	b.n	8004ffc <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8004dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dde:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8004de8:	f023 031f 	bic.w	r3, r3, #31
 8004dec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dee:	6852      	ldr	r2, [r2, #4]
 8004df0:	431a      	orrs	r2, r3
 8004df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d008      	beq.n	8004e14 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e12:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0320 	and.w	r3, r3, #32
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d008      	beq.n	8004e32 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e30:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d005      	beq.n	8004e4a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e48:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e54:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004e56:	e084      	b.n	8004f62 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e62:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d006      	beq.n	8004e78 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	e005      	b.n	8004e84 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e82:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e86:	3301      	adds	r3, #1
 8004e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d902      	bls.n	8004e96 <ETH_Prepare_Tx_Descriptors+0x11e>
 8004e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e92:	3b04      	subs	r3, #4
 8004e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e9e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004eac:	d007      	beq.n	8004ebe <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d029      	beq.n	8004f12 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004ecc:	2300      	movs	r3, #0
 8004ece:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ed0:	e019      	b.n	8004f06 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8004ed2:	f3bf 8f5f 	dmb	sy
}
 8004ed6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee2:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d902      	bls.n	8004ef6 <ETH_Prepare_Tx_Descriptors+0x17e>
 8004ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ef2:	3b04      	subs	r3, #4
 8004ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004efe:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f02:	3301      	adds	r3, #1
 8004f04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d3e1      	bcc.n	8004ed2 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e074      	b.n	8004ffc <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8004f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f20:	3301      	adds	r3, #1
 8004f22:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f32:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8004f3c:	f023 031f 	bic.w	r3, r3, #31
 8004f40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f42:	6852      	ldr	r2, [r2, #4]
 8004f44:	431a      	orrs	r2, r3
 8004f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f48:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8004f50:	f3bf 8f5f 	dmb	sy
}
 8004f54:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f60:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f47f af76 	bne.w	8004e58 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d006      	beq.n	8004f80 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	e005      	b.n	8004f8c <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f96:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9a:	6a3a      	ldr	r2, [r7, #32]
 8004f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa0:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8004fa2:	f3bf 8f5f 	dmb	sy
}
 8004fa6:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb2:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004fc8:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004fca:	f3ef 8310 	mrs	r3, PRIMASK
 8004fce:	613b      	str	r3, [r7, #16]
  return(result);
 8004fd0:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004fd2:	61fb      	str	r3, [r7, #28]
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f383 8810 	msr	PRIMASK, r3
}
 8004fde:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe6:	4413      	add	r3, r2
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	629a      	str	r2, [r3, #40]	@ 0x28
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	f383 8810 	msr	PRIMASK, r3
}
 8004ff8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3744      	adds	r7, #68	@ 0x44
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005008:	b480      	push	{r7}
 800500a:	b089      	sub	sp, #36	@ 0x24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005012:	2300      	movs	r3, #0
 8005014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005016:	2300      	movs	r3, #0
 8005018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800501a:	2300      	movs	r3, #0
 800501c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800501e:	2300      	movs	r3, #0
 8005020:	61fb      	str	r3, [r7, #28]
 8005022:	e16b      	b.n	80052fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005024:	2201      	movs	r2, #1
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4013      	ands	r3, r2
 8005036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	429a      	cmp	r2, r3
 800503e:	f040 815a 	bne.w	80052f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	2b01      	cmp	r3, #1
 800504c:	d005      	beq.n	800505a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005056:	2b02      	cmp	r3, #2
 8005058:	d130      	bne.n	80050bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	2203      	movs	r2, #3
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	43db      	mvns	r3, r3
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	4013      	ands	r3, r2
 8005070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	4313      	orrs	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005090:	2201      	movs	r2, #1
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	43db      	mvns	r3, r3
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	4013      	ands	r3, r2
 800509e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	091b      	lsrs	r3, r3, #4
 80050a6:	f003 0201 	and.w	r2, r3, #1
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	fa02 f303 	lsl.w	r3, r2, r3
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d017      	beq.n	80050f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	2203      	movs	r2, #3
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	43db      	mvns	r3, r3
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	4013      	ands	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f003 0303 	and.w	r3, r3, #3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d123      	bne.n	800514c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	08da      	lsrs	r2, r3, #3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3208      	adds	r2, #8
 800510c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005110:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	220f      	movs	r2, #15
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	43db      	mvns	r3, r3
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	4013      	ands	r3, r2
 8005126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4313      	orrs	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	08da      	lsrs	r2, r3, #3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3208      	adds	r2, #8
 8005146:	69b9      	ldr	r1, [r7, #24]
 8005148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	2203      	movs	r2, #3
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	43db      	mvns	r3, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4013      	ands	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f003 0203 	and.w	r2, r3, #3
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4313      	orrs	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 80b4 	beq.w	80052f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	4b60      	ldr	r3, [pc, #384]	@ (8005314 <HAL_GPIO_Init+0x30c>)
 8005194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005196:	4a5f      	ldr	r2, [pc, #380]	@ (8005314 <HAL_GPIO_Init+0x30c>)
 8005198:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800519c:	6453      	str	r3, [r2, #68]	@ 0x44
 800519e:	4b5d      	ldr	r3, [pc, #372]	@ (8005314 <HAL_GPIO_Init+0x30c>)
 80051a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051aa:	4a5b      	ldr	r2, [pc, #364]	@ (8005318 <HAL_GPIO_Init+0x310>)
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	089b      	lsrs	r3, r3, #2
 80051b0:	3302      	adds	r3, #2
 80051b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	220f      	movs	r2, #15
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	43db      	mvns	r3, r3
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	4013      	ands	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a52      	ldr	r2, [pc, #328]	@ (800531c <HAL_GPIO_Init+0x314>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d02b      	beq.n	800522e <HAL_GPIO_Init+0x226>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a51      	ldr	r2, [pc, #324]	@ (8005320 <HAL_GPIO_Init+0x318>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d025      	beq.n	800522a <HAL_GPIO_Init+0x222>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a50      	ldr	r2, [pc, #320]	@ (8005324 <HAL_GPIO_Init+0x31c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d01f      	beq.n	8005226 <HAL_GPIO_Init+0x21e>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a4f      	ldr	r2, [pc, #316]	@ (8005328 <HAL_GPIO_Init+0x320>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d019      	beq.n	8005222 <HAL_GPIO_Init+0x21a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a4e      	ldr	r2, [pc, #312]	@ (800532c <HAL_GPIO_Init+0x324>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d013      	beq.n	800521e <HAL_GPIO_Init+0x216>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a4d      	ldr	r2, [pc, #308]	@ (8005330 <HAL_GPIO_Init+0x328>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00d      	beq.n	800521a <HAL_GPIO_Init+0x212>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a4c      	ldr	r2, [pc, #304]	@ (8005334 <HAL_GPIO_Init+0x32c>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d007      	beq.n	8005216 <HAL_GPIO_Init+0x20e>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a4b      	ldr	r2, [pc, #300]	@ (8005338 <HAL_GPIO_Init+0x330>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d101      	bne.n	8005212 <HAL_GPIO_Init+0x20a>
 800520e:	2307      	movs	r3, #7
 8005210:	e00e      	b.n	8005230 <HAL_GPIO_Init+0x228>
 8005212:	2308      	movs	r3, #8
 8005214:	e00c      	b.n	8005230 <HAL_GPIO_Init+0x228>
 8005216:	2306      	movs	r3, #6
 8005218:	e00a      	b.n	8005230 <HAL_GPIO_Init+0x228>
 800521a:	2305      	movs	r3, #5
 800521c:	e008      	b.n	8005230 <HAL_GPIO_Init+0x228>
 800521e:	2304      	movs	r3, #4
 8005220:	e006      	b.n	8005230 <HAL_GPIO_Init+0x228>
 8005222:	2303      	movs	r3, #3
 8005224:	e004      	b.n	8005230 <HAL_GPIO_Init+0x228>
 8005226:	2302      	movs	r3, #2
 8005228:	e002      	b.n	8005230 <HAL_GPIO_Init+0x228>
 800522a:	2301      	movs	r3, #1
 800522c:	e000      	b.n	8005230 <HAL_GPIO_Init+0x228>
 800522e:	2300      	movs	r3, #0
 8005230:	69fa      	ldr	r2, [r7, #28]
 8005232:	f002 0203 	and.w	r2, r2, #3
 8005236:	0092      	lsls	r2, r2, #2
 8005238:	4093      	lsls	r3, r2
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4313      	orrs	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005240:	4935      	ldr	r1, [pc, #212]	@ (8005318 <HAL_GPIO_Init+0x310>)
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	089b      	lsrs	r3, r3, #2
 8005246:	3302      	adds	r3, #2
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800524e:	4b3b      	ldr	r3, [pc, #236]	@ (800533c <HAL_GPIO_Init+0x334>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	43db      	mvns	r3, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4013      	ands	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005272:	4a32      	ldr	r2, [pc, #200]	@ (800533c <HAL_GPIO_Init+0x334>)
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005278:	4b30      	ldr	r3, [pc, #192]	@ (800533c <HAL_GPIO_Init+0x334>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	43db      	mvns	r3, r3
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	4013      	ands	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800529c:	4a27      	ldr	r2, [pc, #156]	@ (800533c <HAL_GPIO_Init+0x334>)
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052a2:	4b26      	ldr	r3, [pc, #152]	@ (800533c <HAL_GPIO_Init+0x334>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	43db      	mvns	r3, r3
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	4013      	ands	r3, r2
 80052b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052c6:	4a1d      	ldr	r2, [pc, #116]	@ (800533c <HAL_GPIO_Init+0x334>)
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052cc:	4b1b      	ldr	r3, [pc, #108]	@ (800533c <HAL_GPIO_Init+0x334>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	43db      	mvns	r3, r3
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	4013      	ands	r3, r2
 80052da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052f0:	4a12      	ldr	r2, [pc, #72]	@ (800533c <HAL_GPIO_Init+0x334>)
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	3301      	adds	r3, #1
 80052fa:	61fb      	str	r3, [r7, #28]
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	2b0f      	cmp	r3, #15
 8005300:	f67f ae90 	bls.w	8005024 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005304:	bf00      	nop
 8005306:	bf00      	nop
 8005308:	3724      	adds	r7, #36	@ 0x24
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40023800 	.word	0x40023800
 8005318:	40013800 	.word	0x40013800
 800531c:	40020000 	.word	0x40020000
 8005320:	40020400 	.word	0x40020400
 8005324:	40020800 	.word	0x40020800
 8005328:	40020c00 	.word	0x40020c00
 800532c:	40021000 	.word	0x40021000
 8005330:	40021400 	.word	0x40021400
 8005334:	40021800 	.word	0x40021800
 8005338:	40021c00 	.word	0x40021c00
 800533c:	40013c00 	.word	0x40013c00

08005340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	460b      	mov	r3, r1
 800534a:	807b      	strh	r3, [r7, #2]
 800534c:	4613      	mov	r3, r2
 800534e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005350:	787b      	ldrb	r3, [r7, #1]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005356:	887a      	ldrh	r2, [r7, #2]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800535c:	e003      	b.n	8005366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800535e:	887b      	ldrh	r3, [r7, #2]
 8005360:	041a      	lsls	r2, r3, #16
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	619a      	str	r2, [r3, #24]
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b086      	sub	sp, #24
 8005376:	af02      	add	r7, sp, #8
 8005378:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e101      	b.n	8005588 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f015 fe88 	bl	801b0b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2203      	movs	r2, #3
 80053a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053b2:	d102      	bne.n	80053ba <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f003 f893 	bl	80084ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	7c1a      	ldrb	r2, [r3, #16]
 80053cc:	f88d 2000 	strb.w	r2, [sp]
 80053d0:	3304      	adds	r3, #4
 80053d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053d4:	f002 ff72 	bl	80082bc <USB_CoreInit>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d005      	beq.n	80053ea <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2202      	movs	r2, #2
 80053e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e0ce      	b.n	8005588 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2100      	movs	r1, #0
 80053f0:	4618      	mov	r0, r3
 80053f2:	f003 f88b 	bl	800850c <USB_SetCurrentMode>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d005      	beq.n	8005408 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e0bf      	b.n	8005588 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005408:	2300      	movs	r3, #0
 800540a:	73fb      	strb	r3, [r7, #15]
 800540c:	e04a      	b.n	80054a4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800540e:	7bfa      	ldrb	r2, [r7, #15]
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	440b      	add	r3, r1
 800541c:	3315      	adds	r3, #21
 800541e:	2201      	movs	r2, #1
 8005420:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005422:	7bfa      	ldrb	r2, [r7, #15]
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	440b      	add	r3, r1
 8005430:	3314      	adds	r3, #20
 8005432:	7bfa      	ldrb	r2, [r7, #15]
 8005434:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005436:	7bfa      	ldrb	r2, [r7, #15]
 8005438:	7bfb      	ldrb	r3, [r7, #15]
 800543a:	b298      	uxth	r0, r3
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	4413      	add	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	440b      	add	r3, r1
 8005448:	332e      	adds	r3, #46	@ 0x2e
 800544a:	4602      	mov	r2, r0
 800544c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800544e:	7bfa      	ldrb	r2, [r7, #15]
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	3318      	adds	r3, #24
 800545e:	2200      	movs	r2, #0
 8005460:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005462:	7bfa      	ldrb	r2, [r7, #15]
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	4613      	mov	r3, r2
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	440b      	add	r3, r1
 8005470:	331c      	adds	r3, #28
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005476:	7bfa      	ldrb	r2, [r7, #15]
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	4613      	mov	r3, r2
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	440b      	add	r3, r1
 8005484:	3320      	adds	r3, #32
 8005486:	2200      	movs	r2, #0
 8005488:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800548a:	7bfa      	ldrb	r2, [r7, #15]
 800548c:	6879      	ldr	r1, [r7, #4]
 800548e:	4613      	mov	r3, r2
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	440b      	add	r3, r1
 8005498:	3324      	adds	r3, #36	@ 0x24
 800549a:	2200      	movs	r2, #0
 800549c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800549e:	7bfb      	ldrb	r3, [r7, #15]
 80054a0:	3301      	adds	r3, #1
 80054a2:	73fb      	strb	r3, [r7, #15]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	791b      	ldrb	r3, [r3, #4]
 80054a8:	7bfa      	ldrb	r2, [r7, #15]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d3af      	bcc.n	800540e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054ae:	2300      	movs	r3, #0
 80054b0:	73fb      	strb	r3, [r7, #15]
 80054b2:	e044      	b.n	800553e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80054b4:	7bfa      	ldrb	r2, [r7, #15]
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	4613      	mov	r3, r2
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80054c6:	2200      	movs	r2, #0
 80054c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80054ca:	7bfa      	ldrb	r2, [r7, #15]
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	4613      	mov	r3, r2
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	440b      	add	r3, r1
 80054d8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80054dc:	7bfa      	ldrb	r2, [r7, #15]
 80054de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054e0:	7bfa      	ldrb	r2, [r7, #15]
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	4613      	mov	r3, r2
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	4413      	add	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	440b      	add	r3, r1
 80054ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80054f6:	7bfa      	ldrb	r2, [r7, #15]
 80054f8:	6879      	ldr	r1, [r7, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	440b      	add	r3, r1
 8005504:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800550c:	7bfa      	ldrb	r2, [r7, #15]
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	4613      	mov	r3, r2
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	4413      	add	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	440b      	add	r3, r1
 800551a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005522:	7bfa      	ldrb	r2, [r7, #15]
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	3301      	adds	r3, #1
 800553c:	73fb      	strb	r3, [r7, #15]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	791b      	ldrb	r3, [r3, #4]
 8005542:	7bfa      	ldrb	r2, [r7, #15]
 8005544:	429a      	cmp	r2, r3
 8005546:	d3b5      	bcc.n	80054b4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	7c1a      	ldrb	r2, [r3, #16]
 8005550:	f88d 2000 	strb.w	r2, [sp]
 8005554:	3304      	adds	r3, #4
 8005556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005558:	f003 f824 	bl	80085a4 <USB_DevInit>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d005      	beq.n	800556e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2202      	movs	r2, #2
 8005566:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e00c      	b.n	8005588 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4618      	mov	r0, r3
 8005582:	f004 f86e 	bl	8009662 <USB_DevDisconnect>

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_PCD_Start+0x1c>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e022      	b.n	80055f2 <HAL_PCD_Start+0x62>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d009      	beq.n	80055d4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d105      	bne.n	80055d4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4618      	mov	r0, r3
 80055da:	f002 ff75 	bl	80084c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f004 f81c 	bl	8009620 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80055fa:	b590      	push	{r4, r7, lr}
 80055fc:	b08d      	sub	sp, #52	@ 0x34
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4618      	mov	r0, r3
 8005612:	f004 f8da 	bl	80097ca <USB_GetMode>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	f040 848c 	bne.w	8005f36 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f004 f83e 	bl	80096a4 <USB_ReadInterrupts>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 8482 	beq.w	8005f34 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	0a1b      	lsrs	r3, r3, #8
 800563a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f004 f82b 	bl	80096a4 <USB_ReadInterrupts>
 800564e:	4603      	mov	r3, r0
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b02      	cmp	r3, #2
 8005656:	d107      	bne.n	8005668 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f002 0202 	and.w	r2, r2, #2
 8005666:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4618      	mov	r0, r3
 800566e:	f004 f819 	bl	80096a4 <USB_ReadInterrupts>
 8005672:	4603      	mov	r3, r0
 8005674:	f003 0310 	and.w	r3, r3, #16
 8005678:	2b10      	cmp	r3, #16
 800567a:	d161      	bne.n	8005740 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699a      	ldr	r2, [r3, #24]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0210 	bic.w	r2, r2, #16
 800568a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	f003 020f 	and.w	r2, r3, #15
 8005698:	4613      	mov	r3, r2
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	4413      	add	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	4413      	add	r3, r2
 80056a8:	3304      	adds	r3, #4
 80056aa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80056b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056b6:	d124      	bne.n	8005702 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80056be:	4013      	ands	r3, r2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d035      	beq.n	8005730 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	091b      	lsrs	r3, r3, #4
 80056cc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80056ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	461a      	mov	r2, r3
 80056d6:	6a38      	ldr	r0, [r7, #32]
 80056d8:	f003 fe50 	bl	800937c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	68da      	ldr	r2, [r3, #12]
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	091b      	lsrs	r3, r3, #4
 80056e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056e8:	441a      	add	r2, r3
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	695a      	ldr	r2, [r3, #20]
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	091b      	lsrs	r3, r3, #4
 80056f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056fa:	441a      	add	r2, r3
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	615a      	str	r2, [r3, #20]
 8005700:	e016      	b.n	8005730 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005708:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800570c:	d110      	bne.n	8005730 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005714:	2208      	movs	r2, #8
 8005716:	4619      	mov	r1, r3
 8005718:	6a38      	ldr	r0, [r7, #32]
 800571a:	f003 fe2f 	bl	800937c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	695a      	ldr	r2, [r3, #20]
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	091b      	lsrs	r3, r3, #4
 8005726:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800572a:	441a      	add	r2, r3
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699a      	ldr	r2, [r3, #24]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0210 	orr.w	r2, r2, #16
 800573e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f003 ffad 	bl	80096a4 <USB_ReadInterrupts>
 800574a:	4603      	mov	r3, r0
 800574c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005750:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005754:	f040 80a7 	bne.w	80058a6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4618      	mov	r0, r3
 8005762:	f003 ffb2 	bl	80096ca <USB_ReadDevAllOutEpInterrupt>
 8005766:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005768:	e099      	b.n	800589e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800576a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 808e 	beq.w	8005892 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800577c:	b2d2      	uxtb	r2, r2
 800577e:	4611      	mov	r1, r2
 8005780:	4618      	mov	r0, r3
 8005782:	f003 ffd6 	bl	8009732 <USB_ReadDevOutEPInterrupt>
 8005786:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00c      	beq.n	80057ac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800579e:	461a      	mov	r2, r3
 80057a0:	2301      	movs	r3, #1
 80057a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80057a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fea4 	bl	80064f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00c      	beq.n	80057d0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c2:	461a      	mov	r2, r3
 80057c4:	2308      	movs	r3, #8
 80057c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80057c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 ff7a 	bl	80066c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d008      	beq.n	80057ec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057e6:	461a      	mov	r2, r3
 80057e8:	2310      	movs	r3, #16
 80057ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d030      	beq.n	8005858 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057fe:	2b80      	cmp	r3, #128	@ 0x80
 8005800:	d109      	bne.n	8005816 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005810:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005814:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005818:	4613      	mov	r3, r2
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	4413      	add	r3, r2
 8005828:	3304      	adds	r3, #4
 800582a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	78db      	ldrb	r3, [r3, #3]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d108      	bne.n	8005846 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2200      	movs	r2, #0
 8005838:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800583a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583c:	b2db      	uxtb	r3, r3
 800583e:	4619      	mov	r1, r3
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f015 fd3d 	bl	801b2c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005852:	461a      	mov	r2, r3
 8005854:	2302      	movs	r3, #2
 8005856:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b00      	cmp	r3, #0
 8005860:	d008      	beq.n	8005874 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586e:	461a      	mov	r2, r3
 8005870:	2320      	movs	r3, #32
 8005872:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d009      	beq.n	8005892 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800587e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	4413      	add	r3, r2
 8005886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800588a:	461a      	mov	r2, r3
 800588c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005890:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005894:	3301      	adds	r3, #1
 8005896:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589a:	085b      	lsrs	r3, r3, #1
 800589c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800589e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f47f af62 	bne.w	800576a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f003 fefa 	bl	80096a4 <USB_ReadInterrupts>
 80058b0:	4603      	mov	r3, r0
 80058b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058ba:	f040 80db 	bne.w	8005a74 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f003 ff1b 	bl	80096fe <USB_ReadDevAllInEpInterrupt>
 80058c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80058ce:	e0cd      	b.n	8005a6c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80058d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 80c2 	beq.w	8005a60 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	4611      	mov	r1, r2
 80058e6:	4618      	mov	r0, r3
 80058e8:	f003 ff41 	bl	800976e <USB_ReadDevInEPInterrupt>
 80058ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d057      	beq.n	80059a8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80058f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	2201      	movs	r2, #1
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800590c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	43db      	mvns	r3, r3
 8005912:	69f9      	ldr	r1, [r7, #28]
 8005914:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005918:	4013      	ands	r3, r2
 800591a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800591c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005928:	461a      	mov	r2, r3
 800592a:	2301      	movs	r3, #1
 800592c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	799b      	ldrb	r3, [r3, #6]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d132      	bne.n	800599c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800593a:	4613      	mov	r3, r2
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	4413      	add	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	440b      	add	r3, r1
 8005944:	3320      	adds	r3, #32
 8005946:	6819      	ldr	r1, [r3, #0]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800594c:	4613      	mov	r3, r2
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	4413      	add	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4403      	add	r3, r0
 8005956:	331c      	adds	r3, #28
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4419      	add	r1, r3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005960:	4613      	mov	r3, r2
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	4413      	add	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4403      	add	r3, r0
 800596a:	3320      	adds	r3, #32
 800596c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	2b00      	cmp	r3, #0
 8005972:	d113      	bne.n	800599c <HAL_PCD_IRQHandler+0x3a2>
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005978:	4613      	mov	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	3324      	adds	r3, #36	@ 0x24
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d108      	bne.n	800599c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005994:	461a      	mov	r2, r3
 8005996:	2101      	movs	r1, #1
 8005998:	f003 ff48 	bl	800982c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800599c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	4619      	mov	r1, r3
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f015 fc07 	bl	801b1b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d008      	beq.n	80059c4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80059b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059be:	461a      	mov	r2, r3
 80059c0:	2308      	movs	r3, #8
 80059c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f003 0310 	and.w	r3, r3, #16
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d008      	beq.n	80059e0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80059ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059da:	461a      	mov	r2, r3
 80059dc:	2310      	movs	r3, #16
 80059de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d008      	beq.n	80059fc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059f6:	461a      	mov	r2, r3
 80059f8:	2340      	movs	r3, #64	@ 0x40
 80059fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d023      	beq.n	8005a4e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005a06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a08:	6a38      	ldr	r0, [r7, #32]
 8005a0a:	f002 ff2f 	bl	800886c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a10:	4613      	mov	r3, r2
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	4413      	add	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	3310      	adds	r3, #16
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	3304      	adds	r3, #4
 8005a20:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	78db      	ldrb	r3, [r3, #3]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d108      	bne.n	8005a3c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	4619      	mov	r1, r3
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f015 fc54 	bl	801b2e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a48:	461a      	mov	r2, r3
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005a58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fcbd 	bl	80063da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a62:	3301      	adds	r3, #1
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a68:	085b      	lsrs	r3, r3, #1
 8005a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f47f af2e 	bne.w	80058d0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f003 fe13 	bl	80096a4 <USB_ReadInterrupts>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a88:	d122      	bne.n	8005ad0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a98:	f023 0301 	bic.w	r3, r3, #1
 8005a9c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d108      	bne.n	8005aba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fea4 	bl	8006800 <HAL_PCDEx_LPM_Callback>
 8005ab8:	e002      	b.n	8005ac0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f015 fbf2 	bl	801b2a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695a      	ldr	r2, [r3, #20]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f003 fde5 	bl	80096a4 <USB_ReadInterrupts>
 8005ada:	4603      	mov	r3, r0
 8005adc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ae0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ae4:	d112      	bne.n	8005b0c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d102      	bne.n	8005afc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f015 fbae 	bl	801b258 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695a      	ldr	r2, [r3, #20]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005b0a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f003 fdc7 	bl	80096a4 <USB_ReadInterrupts>
 8005b16:	4603      	mov	r3, r0
 8005b18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b20:	f040 80b7 	bne.w	8005c92 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	69fa      	ldr	r2, [r7, #28]
 8005b2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b32:	f023 0301 	bic.w	r3, r3, #1
 8005b36:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2110      	movs	r1, #16
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f002 fe94 	bl	800886c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b44:	2300      	movs	r3, #0
 8005b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b48:	e046      	b.n	8005bd8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b56:	461a      	mov	r2, r3
 8005b58:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b5c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b6e:	0151      	lsls	r1, r2, #5
 8005b70:	69fa      	ldr	r2, [r7, #28]
 8005b72:	440a      	add	r2, r1
 8005b74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b78:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b90:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ba2:	0151      	lsls	r1, r2, #5
 8005ba4:	69fa      	ldr	r2, [r7, #28]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005bb0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bc2:	0151      	lsls	r1, r2, #5
 8005bc4:	69fa      	ldr	r2, [r7, #28]
 8005bc6:	440a      	add	r2, r1
 8005bc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bcc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005bd0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	791b      	ldrb	r3, [r3, #4]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d3b2      	bcc.n	8005b4a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	69fa      	ldr	r2, [r7, #28]
 8005bee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bf2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005bf6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	7bdb      	ldrb	r3, [r3, #15]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d016      	beq.n	8005c2e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c10:	f043 030b 	orr.w	r3, r3, #11
 8005c14:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c20:	69fa      	ldr	r2, [r7, #28]
 8005c22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c26:	f043 030b 	orr.w	r3, r3, #11
 8005c2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c2c:	e015      	b.n	8005c5a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c3c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005c40:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005c44:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c54:	f043 030b 	orr.w	r3, r3, #11
 8005c58:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69fa      	ldr	r2, [r7, #28]
 8005c64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c68:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005c6c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6818      	ldr	r0, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	f003 fdd5 	bl	800982c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695a      	ldr	r2, [r3, #20]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005c90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f003 fd04 	bl	80096a4 <USB_ReadInterrupts>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ca6:	d123      	bne.n	8005cf0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f003 fd9a 	bl	80097e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f002 fe51 	bl	800895e <USB_GetDevSpeed>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681c      	ldr	r4, [r3, #0]
 8005cc8:	f001 f9ca 	bl	8007060 <HAL_RCC_GetHCLKFreq>
 8005ccc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f002 fb55 	bl	8008384 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f015 fa93 	bl	801b206 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695a      	ldr	r2, [r3, #20]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005cee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f003 fcd5 	bl	80096a4 <USB_ReadInterrupts>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d10a      	bne.n	8005d1a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f015 fa70 	bl	801b1ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	695a      	ldr	r2, [r3, #20]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f002 0208 	and.w	r2, r2, #8
 8005d18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f003 fcc0 	bl	80096a4 <USB_ReadInterrupts>
 8005d24:	4603      	mov	r3, r0
 8005d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d2a:	2b80      	cmp	r3, #128	@ 0x80
 8005d2c:	d123      	bne.n	8005d76 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d3e:	e014      	b.n	8005d6a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005d40:	6879      	ldr	r1, [r7, #4]
 8005d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d44:	4613      	mov	r3, r2
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	4413      	add	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	440b      	add	r3, r1
 8005d4e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d105      	bne.n	8005d64 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fb0a 	bl	8006378 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d66:	3301      	adds	r3, #1
 8005d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	791b      	ldrb	r3, [r3, #4]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d3e4      	bcc.n	8005d40 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f003 fc92 	bl	80096a4 <USB_ReadInterrupts>
 8005d80:	4603      	mov	r3, r0
 8005d82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d8a:	d13c      	bne.n	8005e06 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d90:	e02b      	b.n	8005dea <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005da2:	6879      	ldr	r1, [r7, #4]
 8005da4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005da6:	4613      	mov	r3, r2
 8005da8:	00db      	lsls	r3, r3, #3
 8005daa:	4413      	add	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	440b      	add	r3, r1
 8005db0:	3318      	adds	r3, #24
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d115      	bne.n	8005de4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005db8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	da12      	bge.n	8005de4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	3317      	adds	r3, #23
 8005dce:	2201      	movs	r2, #1
 8005dd0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 faca 	bl	8006378 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de6:	3301      	adds	r3, #1
 8005de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	791b      	ldrb	r3, [r3, #4]
 8005dee:	461a      	mov	r2, r3
 8005df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d3cd      	bcc.n	8005d92 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695a      	ldr	r2, [r3, #20]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f003 fc4a 	bl	80096a4 <USB_ReadInterrupts>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e1a:	d156      	bne.n	8005eca <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e20:	e045      	b.n	8005eae <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e32:	6879      	ldr	r1, [r7, #4]
 8005e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e36:	4613      	mov	r3, r2
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	4413      	add	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	440b      	add	r3, r1
 8005e40:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d12e      	bne.n	8005ea8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005e4a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	da2b      	bge.n	8005ea8 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	0c1a      	lsrs	r2, r3, #16
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005e5a:	4053      	eors	r3, r2
 8005e5c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d121      	bne.n	8005ea8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e68:	4613      	mov	r3, r2
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	440b      	add	r3, r1
 8005e72:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005e76:	2201      	movs	r2, #1
 8005e78:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10a      	bne.n	8005ea8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	69fa      	ldr	r2, [r7, #28]
 8005e9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ea0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ea4:	6053      	str	r3, [r2, #4]
            break;
 8005ea6:	e008      	b.n	8005eba <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eaa:	3301      	adds	r3, #1
 8005eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	791b      	ldrb	r3, [r3, #4]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d3b3      	bcc.n	8005e22 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695a      	ldr	r2, [r3, #20]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f003 fbe8 	bl	80096a4 <USB_ReadInterrupts>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ede:	d10a      	bne.n	8005ef6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f015 fa11 	bl	801b308 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695a      	ldr	r2, [r3, #20]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005ef4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f003 fbd2 	bl	80096a4 <USB_ReadInterrupts>
 8005f00:	4603      	mov	r3, r0
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d115      	bne.n	8005f36 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f015 fa01 	bl	801b324 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6859      	ldr	r1, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	605a      	str	r2, [r3, #4]
 8005f32:	e000      	b.n	8005f36 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005f34:	bf00      	nop
    }
  }
}
 8005f36:	3734      	adds	r7, #52	@ 0x34
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd90      	pop	{r4, r7, pc}

08005f3c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d101      	bne.n	8005f56 <HAL_PCD_SetAddress+0x1a>
 8005f52:	2302      	movs	r3, #2
 8005f54:	e012      	b.n	8005f7c <HAL_PCD_SetAddress+0x40>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	78fa      	ldrb	r2, [r7, #3]
 8005f62:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	78fa      	ldrb	r2, [r7, #3]
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f003 fb31 	bl	80095d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	4608      	mov	r0, r1
 8005f8e:	4611      	mov	r1, r2
 8005f90:	461a      	mov	r2, r3
 8005f92:	4603      	mov	r3, r0
 8005f94:	70fb      	strb	r3, [r7, #3]
 8005f96:	460b      	mov	r3, r1
 8005f98:	803b      	strh	r3, [r7, #0]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005fa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	da0f      	bge.n	8005fca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005faa:	78fb      	ldrb	r3, [r7, #3]
 8005fac:	f003 020f 	and.w	r2, r3, #15
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	3310      	adds	r3, #16
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	705a      	strb	r2, [r3, #1]
 8005fc8:	e00f      	b.n	8005fea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	f003 020f 	and.w	r2, r3, #15
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	4413      	add	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	4413      	add	r3, r2
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005fea:	78fb      	ldrb	r3, [r7, #3]
 8005fec:	f003 030f 	and.w	r3, r3, #15
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005ff6:	883b      	ldrh	r3, [r7, #0]
 8005ff8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	78ba      	ldrb	r2, [r7, #2]
 8006004:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d004      	beq.n	8006018 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006018:	78bb      	ldrb	r3, [r7, #2]
 800601a:	2b02      	cmp	r3, #2
 800601c:	d102      	bne.n	8006024 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800602a:	2b01      	cmp	r3, #1
 800602c:	d101      	bne.n	8006032 <HAL_PCD_EP_Open+0xae>
 800602e:	2302      	movs	r3, #2
 8006030:	e00e      	b.n	8006050 <HAL_PCD_EP_Open+0xcc>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68f9      	ldr	r1, [r7, #12]
 8006040:	4618      	mov	r0, r3
 8006042:	f002 fcb1 	bl	80089a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800604e:	7afb      	ldrb	r3, [r7, #11]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006064:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006068:	2b00      	cmp	r3, #0
 800606a:	da0f      	bge.n	800608c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	f003 020f 	and.w	r2, r3, #15
 8006072:	4613      	mov	r3, r2
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	4413      	add	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	3310      	adds	r3, #16
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	4413      	add	r3, r2
 8006080:	3304      	adds	r3, #4
 8006082:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2201      	movs	r2, #1
 8006088:	705a      	strb	r2, [r3, #1]
 800608a:	e00f      	b.n	80060ac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	f003 020f 	and.w	r2, r3, #15
 8006092:	4613      	mov	r3, r2
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	4413      	add	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	4413      	add	r3, r2
 80060a2:	3304      	adds	r3, #4
 80060a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	f003 030f 	and.w	r3, r3, #15
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d101      	bne.n	80060c6 <HAL_PCD_EP_Close+0x6e>
 80060c2:	2302      	movs	r3, #2
 80060c4:	e00e      	b.n	80060e4 <HAL_PCD_EP_Close+0x8c>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68f9      	ldr	r1, [r7, #12]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f002 fcef 	bl	8008ab8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	607a      	str	r2, [r7, #4]
 80060f6:	603b      	str	r3, [r7, #0]
 80060f8:	460b      	mov	r3, r1
 80060fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060fc:	7afb      	ldrb	r3, [r7, #11]
 80060fe:	f003 020f 	and.w	r2, r3, #15
 8006102:	4613      	mov	r3, r2
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	4413      	add	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4413      	add	r3, r2
 8006112:	3304      	adds	r3, #4
 8006114:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2200      	movs	r2, #0
 8006126:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2200      	movs	r2, #0
 800612c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800612e:	7afb      	ldrb	r3, [r7, #11]
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	b2da      	uxtb	r2, r3
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	799b      	ldrb	r3, [r3, #6]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d102      	bne.n	8006148 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6818      	ldr	r0, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	799b      	ldrb	r3, [r3, #6]
 8006150:	461a      	mov	r2, r3
 8006152:	6979      	ldr	r1, [r7, #20]
 8006154:	f002 fd8c 	bl	8008c70 <USB_EPStartXfer>

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3718      	adds	r7, #24
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	460b      	mov	r3, r1
 800616c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800616e:	78fb      	ldrb	r3, [r7, #3]
 8006170:	f003 020f 	and.w	r2, r3, #15
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	4613      	mov	r3, r2
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	4413      	add	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	440b      	add	r3, r1
 8006180:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006184:	681b      	ldr	r3, [r3, #0]
}
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b086      	sub	sp, #24
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	607a      	str	r2, [r7, #4]
 800619c:	603b      	str	r3, [r7, #0]
 800619e:	460b      	mov	r3, r1
 80061a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061a2:	7afb      	ldrb	r3, [r7, #11]
 80061a4:	f003 020f 	and.w	r2, r3, #15
 80061a8:	4613      	mov	r3, r2
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	3310      	adds	r3, #16
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	4413      	add	r3, r2
 80061b6:	3304      	adds	r3, #4
 80061b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2200      	movs	r2, #0
 80061ca:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2201      	movs	r2, #1
 80061d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061d2:	7afb      	ldrb	r3, [r7, #11]
 80061d4:	f003 030f 	and.w	r3, r3, #15
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	799b      	ldrb	r3, [r3, #6]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d102      	bne.n	80061ec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6818      	ldr	r0, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	799b      	ldrb	r3, [r3, #6]
 80061f4:	461a      	mov	r2, r3
 80061f6:	6979      	ldr	r1, [r7, #20]
 80061f8:	f002 fd3a 	bl	8008c70 <USB_EPStartXfer>

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	460b      	mov	r3, r1
 8006210:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006212:	78fb      	ldrb	r3, [r7, #3]
 8006214:	f003 030f 	and.w	r3, r3, #15
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	7912      	ldrb	r2, [r2, #4]
 800621c:	4293      	cmp	r3, r2
 800621e:	d901      	bls.n	8006224 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e04f      	b.n	80062c4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006228:	2b00      	cmp	r3, #0
 800622a:	da0f      	bge.n	800624c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	f003 020f 	and.w	r2, r3, #15
 8006232:	4613      	mov	r3, r2
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	4413      	add	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	3310      	adds	r3, #16
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	4413      	add	r3, r2
 8006240:	3304      	adds	r3, #4
 8006242:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2201      	movs	r2, #1
 8006248:	705a      	strb	r2, [r3, #1]
 800624a:	e00d      	b.n	8006268 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800624c:	78fa      	ldrb	r2, [r7, #3]
 800624e:	4613      	mov	r3, r2
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	4413      	add	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	4413      	add	r3, r2
 800625e:	3304      	adds	r3, #4
 8006260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2201      	movs	r2, #1
 800626c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	b2da      	uxtb	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <HAL_PCD_EP_SetStall+0x82>
 8006284:	2302      	movs	r3, #2
 8006286:	e01d      	b.n	80062c4 <HAL_PCD_EP_SetStall+0xbe>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68f9      	ldr	r1, [r7, #12]
 8006296:	4618      	mov	r0, r3
 8006298:	f003 f8c8 	bl	800942c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	f003 030f 	and.w	r3, r3, #15
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d109      	bne.n	80062ba <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	7999      	ldrb	r1, [r3, #6]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80062b4:	461a      	mov	r2, r3
 80062b6:	f003 fab9 	bl	800982c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	460b      	mov	r3, r1
 80062d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80062d8:	78fb      	ldrb	r3, [r7, #3]
 80062da:	f003 030f 	and.w	r3, r3, #15
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	7912      	ldrb	r2, [r2, #4]
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d901      	bls.n	80062ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e042      	b.n	8006370 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80062ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	da0f      	bge.n	8006312 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062f2:	78fb      	ldrb	r3, [r7, #3]
 80062f4:	f003 020f 	and.w	r2, r3, #15
 80062f8:	4613      	mov	r3, r2
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	4413      	add	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	3310      	adds	r3, #16
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	4413      	add	r3, r2
 8006306:	3304      	adds	r3, #4
 8006308:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2201      	movs	r2, #1
 800630e:	705a      	strb	r2, [r3, #1]
 8006310:	e00f      	b.n	8006332 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006312:	78fb      	ldrb	r3, [r7, #3]
 8006314:	f003 020f 	and.w	r2, r3, #15
 8006318:	4613      	mov	r3, r2
 800631a:	00db      	lsls	r3, r3, #3
 800631c:	4413      	add	r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	4413      	add	r3, r2
 8006328:	3304      	adds	r3, #4
 800632a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	f003 030f 	and.w	r3, r3, #15
 800633e:	b2da      	uxtb	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <HAL_PCD_EP_ClrStall+0x86>
 800634e:	2302      	movs	r3, #2
 8006350:	e00e      	b.n	8006370 <HAL_PCD_EP_ClrStall+0xa4>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68f9      	ldr	r1, [r7, #12]
 8006360:	4618      	mov	r0, r3
 8006362:	f003 f8d1 	bl	8009508 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006388:	2b00      	cmp	r3, #0
 800638a:	da0c      	bge.n	80063a6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800638c:	78fb      	ldrb	r3, [r7, #3]
 800638e:	f003 020f 	and.w	r2, r3, #15
 8006392:	4613      	mov	r3, r2
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	3310      	adds	r3, #16
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	4413      	add	r3, r2
 80063a0:	3304      	adds	r3, #4
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	e00c      	b.n	80063c0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063a6:	78fb      	ldrb	r3, [r7, #3]
 80063a8:	f003 020f 	and.w	r2, r3, #15
 80063ac:	4613      	mov	r3, r2
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	4413      	add	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	4413      	add	r3, r2
 80063bc:	3304      	adds	r3, #4
 80063be:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68f9      	ldr	r1, [r7, #12]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f002 fef0 	bl	80091ac <USB_EPStopXfer>
 80063cc:	4603      	mov	r3, r0
 80063ce:	72fb      	strb	r3, [r7, #11]

  return ret;
 80063d0:	7afb      	ldrb	r3, [r7, #11]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b08a      	sub	sp, #40	@ 0x28
 80063de:	af02      	add	r7, sp, #8
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	4613      	mov	r3, r2
 80063f2:	00db      	lsls	r3, r3, #3
 80063f4:	4413      	add	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	3310      	adds	r3, #16
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	4413      	add	r3, r2
 80063fe:	3304      	adds	r3, #4
 8006400:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	695a      	ldr	r2, [r3, #20]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	429a      	cmp	r2, r3
 800640c:	d901      	bls.n	8006412 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e06b      	b.n	80064ea <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	691a      	ldr	r2, [r3, #16]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	69fa      	ldr	r2, [r7, #28]
 8006424:	429a      	cmp	r2, r3
 8006426:	d902      	bls.n	800642e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	3303      	adds	r3, #3
 8006432:	089b      	lsrs	r3, r3, #2
 8006434:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006436:	e02a      	b.n	800648e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	691a      	ldr	r2, [r3, #16]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	69fa      	ldr	r2, [r7, #28]
 800644a:	429a      	cmp	r2, r3
 800644c:	d902      	bls.n	8006454 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	3303      	adds	r3, #3
 8006458:	089b      	lsrs	r3, r3, #2
 800645a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	68d9      	ldr	r1, [r3, #12]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	b2da      	uxtb	r2, r3
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	4603      	mov	r3, r0
 8006470:	6978      	ldr	r0, [r7, #20]
 8006472:	f002 ff45 	bl	8009300 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	441a      	add	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	695a      	ldr	r2, [r3, #20]
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	441a      	add	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	4413      	add	r3, r2
 8006496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d809      	bhi.n	80064b8 <PCD_WriteEmptyTxFifo+0xde>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	695a      	ldr	r2, [r3, #20]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d203      	bcs.n	80064b8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1bf      	bne.n	8006438 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	691a      	ldr	r2, [r3, #16]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d811      	bhi.n	80064e8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	2201      	movs	r2, #1
 80064cc:	fa02 f303 	lsl.w	r3, r2, r3
 80064d0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	43db      	mvns	r3, r3
 80064de:	6939      	ldr	r1, [r7, #16]
 80064e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064e4:	4013      	ands	r3, r2
 80064e6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3720      	adds	r7, #32
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b088      	sub	sp, #32
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	333c      	adds	r3, #60	@ 0x3c
 800650c:	3304      	adds	r3, #4
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	799b      	ldrb	r3, [r3, #6]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d17b      	bne.n	8006622 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b00      	cmp	r3, #0
 8006532:	d015      	beq.n	8006560 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	4a61      	ldr	r2, [pc, #388]	@ (80066bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006538:	4293      	cmp	r3, r2
 800653a:	f240 80b9 	bls.w	80066b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 80b3 	beq.w	80066b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006556:	461a      	mov	r2, r3
 8006558:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800655c:	6093      	str	r3, [r2, #8]
 800655e:	e0a7      	b.n	80066b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f003 0320 	and.w	r3, r3, #32
 8006566:	2b00      	cmp	r3, #0
 8006568:	d009      	beq.n	800657e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006576:	461a      	mov	r2, r3
 8006578:	2320      	movs	r3, #32
 800657a:	6093      	str	r3, [r2, #8]
 800657c:	e098      	b.n	80066b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006584:	2b00      	cmp	r3, #0
 8006586:	f040 8093 	bne.w	80066b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	4a4b      	ldr	r2, [pc, #300]	@ (80066bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d90f      	bls.n	80065b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065a8:	461a      	mov	r2, r3
 80065aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065ae:	6093      	str	r3, [r2, #8]
 80065b0:	e07e      	b.n	80066b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	4613      	mov	r3, r2
 80065b6:	00db      	lsls	r3, r3, #3
 80065b8:	4413      	add	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	4413      	add	r3, r2
 80065c4:	3304      	adds	r3, #4
 80065c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a1a      	ldr	r2, [r3, #32]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	0159      	lsls	r1, r3, #5
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	440b      	add	r3, r1
 80065d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065de:	1ad2      	subs	r2, r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d114      	bne.n	8006614 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d109      	bne.n	8006606 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6818      	ldr	r0, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80065fc:	461a      	mov	r2, r3
 80065fe:	2101      	movs	r1, #1
 8006600:	f003 f914 	bl	800982c <USB_EP0_OutStart>
 8006604:	e006      	b.n	8006614 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	441a      	add	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	b2db      	uxtb	r3, r3
 8006618:	4619      	mov	r1, r3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f014 fdb0 	bl	801b180 <HAL_PCD_DataOutStageCallback>
 8006620:	e046      	b.n	80066b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	4a26      	ldr	r2, [pc, #152]	@ (80066c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d124      	bne.n	8006674 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00a      	beq.n	800664a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006640:	461a      	mov	r2, r3
 8006642:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006646:	6093      	str	r3, [r2, #8]
 8006648:	e032      	b.n	80066b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b00      	cmp	r3, #0
 8006652:	d008      	beq.n	8006666 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	4413      	add	r3, r2
 800665c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006660:	461a      	mov	r2, r3
 8006662:	2320      	movs	r3, #32
 8006664:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	b2db      	uxtb	r3, r3
 800666a:	4619      	mov	r1, r3
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f014 fd87 	bl	801b180 <HAL_PCD_DataOutStageCallback>
 8006672:	e01d      	b.n	80066b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d114      	bne.n	80066a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	4613      	mov	r3, r2
 8006680:	00db      	lsls	r3, r3, #3
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	440b      	add	r3, r1
 8006688:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d108      	bne.n	80066a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800669c:	461a      	mov	r2, r3
 800669e:	2100      	movs	r1, #0
 80066a0:	f003 f8c4 	bl	800982c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	4619      	mov	r1, r3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f014 fd68 	bl	801b180 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3720      	adds	r7, #32
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	4f54300a 	.word	0x4f54300a
 80066c0:	4f54310a 	.word	0x4f54310a

080066c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	333c      	adds	r3, #60	@ 0x3c
 80066dc:	3304      	adds	r3, #4
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4a15      	ldr	r2, [pc, #84]	@ (800674c <PCD_EP_OutSetupPacket_int+0x88>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d90e      	bls.n	8006718 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006700:	2b00      	cmp	r3, #0
 8006702:	d009      	beq.n	8006718 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	4413      	add	r3, r2
 800670c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006710:	461a      	mov	r2, r3
 8006712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006716:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f014 fd1f 	bl	801b15c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	4a0a      	ldr	r2, [pc, #40]	@ (800674c <PCD_EP_OutSetupPacket_int+0x88>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d90c      	bls.n	8006740 <PCD_EP_OutSetupPacket_int+0x7c>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	799b      	ldrb	r3, [r3, #6]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d108      	bne.n	8006740 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6818      	ldr	r0, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006738:	461a      	mov	r2, r3
 800673a:	2101      	movs	r1, #1
 800673c:	f003 f876 	bl	800982c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	4f54300a 	.word	0x4f54300a

08006750 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	460b      	mov	r3, r1
 800675a:	70fb      	strb	r3, [r7, #3]
 800675c:	4613      	mov	r3, r2
 800675e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006766:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d107      	bne.n	800677e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800676e:	883b      	ldrh	r3, [r7, #0]
 8006770:	0419      	lsls	r1, r3, #16
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	430a      	orrs	r2, r1
 800677a:	629a      	str	r2, [r3, #40]	@ 0x28
 800677c:	e028      	b.n	80067d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006784:	0c1b      	lsrs	r3, r3, #16
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	4413      	add	r3, r2
 800678a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800678c:	2300      	movs	r3, #0
 800678e:	73fb      	strb	r3, [r7, #15]
 8006790:	e00d      	b.n	80067ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	7bfb      	ldrb	r3, [r7, #15]
 8006798:	3340      	adds	r3, #64	@ 0x40
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	0c1b      	lsrs	r3, r3, #16
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	4413      	add	r3, r2
 80067a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
 80067aa:	3301      	adds	r3, #1
 80067ac:	73fb      	strb	r3, [r7, #15]
 80067ae:	7bfa      	ldrb	r2, [r7, #15]
 80067b0:	78fb      	ldrb	r3, [r7, #3]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d3ec      	bcc.n	8006792 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80067b8:	883b      	ldrh	r3, [r7, #0]
 80067ba:	0418      	lsls	r0, r3, #16
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6819      	ldr	r1, [r3, #0]
 80067c0:	78fb      	ldrb	r3, [r7, #3]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	4302      	orrs	r2, r0
 80067c8:	3340      	adds	r3, #64	@ 0x40
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	440b      	add	r3, r1
 80067ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	460b      	mov	r3, r1
 80067e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	887a      	ldrh	r2, [r7, #2]
 80067f0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e267      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d075      	beq.n	8006922 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006836:	4b88      	ldr	r3, [pc, #544]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 030c 	and.w	r3, r3, #12
 800683e:	2b04      	cmp	r3, #4
 8006840:	d00c      	beq.n	800685c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006842:	4b85      	ldr	r3, [pc, #532]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800684a:	2b08      	cmp	r3, #8
 800684c:	d112      	bne.n	8006874 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800684e:	4b82      	ldr	r3, [pc, #520]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006856:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800685a:	d10b      	bne.n	8006874 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800685c:	4b7e      	ldr	r3, [pc, #504]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d05b      	beq.n	8006920 <HAL_RCC_OscConfig+0x108>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d157      	bne.n	8006920 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e242      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800687c:	d106      	bne.n	800688c <HAL_RCC_OscConfig+0x74>
 800687e:	4b76      	ldr	r3, [pc, #472]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a75      	ldr	r2, [pc, #468]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	e01d      	b.n	80068c8 <HAL_RCC_OscConfig+0xb0>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006894:	d10c      	bne.n	80068b0 <HAL_RCC_OscConfig+0x98>
 8006896:	4b70      	ldr	r3, [pc, #448]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a6f      	ldr	r2, [pc, #444]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 800689c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068a0:	6013      	str	r3, [r2, #0]
 80068a2:	4b6d      	ldr	r3, [pc, #436]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a6c      	ldr	r2, [pc, #432]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 80068a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	e00b      	b.n	80068c8 <HAL_RCC_OscConfig+0xb0>
 80068b0:	4b69      	ldr	r3, [pc, #420]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a68      	ldr	r2, [pc, #416]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 80068b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068ba:	6013      	str	r3, [r2, #0]
 80068bc:	4b66      	ldr	r3, [pc, #408]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a65      	ldr	r2, [pc, #404]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 80068c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d013      	beq.n	80068f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d0:	f7fd f854 	bl	800397c <HAL_GetTick>
 80068d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068d6:	e008      	b.n	80068ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068d8:	f7fd f850 	bl	800397c <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b64      	cmp	r3, #100	@ 0x64
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e207      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ea:	4b5b      	ldr	r3, [pc, #364]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0f0      	beq.n	80068d8 <HAL_RCC_OscConfig+0xc0>
 80068f6:	e014      	b.n	8006922 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068f8:	f7fd f840 	bl	800397c <HAL_GetTick>
 80068fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006900:	f7fd f83c 	bl	800397c <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b64      	cmp	r3, #100	@ 0x64
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e1f3      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006912:	4b51      	ldr	r3, [pc, #324]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1f0      	bne.n	8006900 <HAL_RCC_OscConfig+0xe8>
 800691e:	e000      	b.n	8006922 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d063      	beq.n	80069f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800692e:	4b4a      	ldr	r3, [pc, #296]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f003 030c 	and.w	r3, r3, #12
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00b      	beq.n	8006952 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800693a:	4b47      	ldr	r3, [pc, #284]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006942:	2b08      	cmp	r3, #8
 8006944:	d11c      	bne.n	8006980 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006946:	4b44      	ldr	r3, [pc, #272]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d116      	bne.n	8006980 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006952:	4b41      	ldr	r3, [pc, #260]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d005      	beq.n	800696a <HAL_RCC_OscConfig+0x152>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d001      	beq.n	800696a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e1c7      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800696a:	4b3b      	ldr	r3, [pc, #236]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	4937      	ldr	r1, [pc, #220]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 800697a:	4313      	orrs	r3, r2
 800697c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800697e:	e03a      	b.n	80069f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d020      	beq.n	80069ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006988:	4b34      	ldr	r3, [pc, #208]	@ (8006a5c <HAL_RCC_OscConfig+0x244>)
 800698a:	2201      	movs	r2, #1
 800698c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698e:	f7fc fff5 	bl	800397c <HAL_GetTick>
 8006992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006994:	e008      	b.n	80069a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006996:	f7fc fff1 	bl	800397c <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d901      	bls.n	80069a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e1a8      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d0f0      	beq.n	8006996 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069b4:	4b28      	ldr	r3, [pc, #160]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	00db      	lsls	r3, r3, #3
 80069c2:	4925      	ldr	r1, [pc, #148]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	600b      	str	r3, [r1, #0]
 80069c8:	e015      	b.n	80069f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069ca:	4b24      	ldr	r3, [pc, #144]	@ (8006a5c <HAL_RCC_OscConfig+0x244>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d0:	f7fc ffd4 	bl	800397c <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069d8:	f7fc ffd0 	bl	800397c <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e187      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1f0      	bne.n	80069d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0308 	and.w	r3, r3, #8
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d036      	beq.n	8006a70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d016      	beq.n	8006a38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a0a:	4b15      	ldr	r3, [pc, #84]	@ (8006a60 <HAL_RCC_OscConfig+0x248>)
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a10:	f7fc ffb4 	bl	800397c <HAL_GetTick>
 8006a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a18:	f7fc ffb0 	bl	800397c <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e167      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0f0      	beq.n	8006a18 <HAL_RCC_OscConfig+0x200>
 8006a36:	e01b      	b.n	8006a70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a38:	4b09      	ldr	r3, [pc, #36]	@ (8006a60 <HAL_RCC_OscConfig+0x248>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a3e:	f7fc ff9d 	bl	800397c <HAL_GetTick>
 8006a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a44:	e00e      	b.n	8006a64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a46:	f7fc ff99 	bl	800397c <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d907      	bls.n	8006a64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e150      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
 8006a58:	40023800 	.word	0x40023800
 8006a5c:	42470000 	.word	0x42470000
 8006a60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a64:	4b88      	ldr	r3, [pc, #544]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006a66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a68:	f003 0302 	and.w	r3, r3, #2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1ea      	bne.n	8006a46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 8097 	beq.w	8006bac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a82:	4b81      	ldr	r3, [pc, #516]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10f      	bne.n	8006aae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60bb      	str	r3, [r7, #8]
 8006a92:	4b7d      	ldr	r3, [pc, #500]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a96:	4a7c      	ldr	r2, [pc, #496]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a9e:	4b7a      	ldr	r3, [pc, #488]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006aa6:	60bb      	str	r3, [r7, #8]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aae:	4b77      	ldr	r3, [pc, #476]	@ (8006c8c <HAL_RCC_OscConfig+0x474>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d118      	bne.n	8006aec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006aba:	4b74      	ldr	r3, [pc, #464]	@ (8006c8c <HAL_RCC_OscConfig+0x474>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a73      	ldr	r2, [pc, #460]	@ (8006c8c <HAL_RCC_OscConfig+0x474>)
 8006ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ac6:	f7fc ff59 	bl	800397c <HAL_GetTick>
 8006aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006acc:	e008      	b.n	8006ae0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ace:	f7fc ff55 	bl	800397c <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e10c      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ae0:	4b6a      	ldr	r3, [pc, #424]	@ (8006c8c <HAL_RCC_OscConfig+0x474>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d0f0      	beq.n	8006ace <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d106      	bne.n	8006b02 <HAL_RCC_OscConfig+0x2ea>
 8006af4:	4b64      	ldr	r3, [pc, #400]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af8:	4a63      	ldr	r2, [pc, #396]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006afa:	f043 0301 	orr.w	r3, r3, #1
 8006afe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b00:	e01c      	b.n	8006b3c <HAL_RCC_OscConfig+0x324>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	2b05      	cmp	r3, #5
 8006b08:	d10c      	bne.n	8006b24 <HAL_RCC_OscConfig+0x30c>
 8006b0a:	4b5f      	ldr	r3, [pc, #380]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b0e:	4a5e      	ldr	r2, [pc, #376]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006b10:	f043 0304 	orr.w	r3, r3, #4
 8006b14:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b16:	4b5c      	ldr	r3, [pc, #368]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b1a:	4a5b      	ldr	r2, [pc, #364]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006b1c:	f043 0301 	orr.w	r3, r3, #1
 8006b20:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b22:	e00b      	b.n	8006b3c <HAL_RCC_OscConfig+0x324>
 8006b24:	4b58      	ldr	r3, [pc, #352]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b28:	4a57      	ldr	r2, [pc, #348]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006b2a:	f023 0301 	bic.w	r3, r3, #1
 8006b2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b30:	4b55      	ldr	r3, [pc, #340]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b34:	4a54      	ldr	r2, [pc, #336]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006b36:	f023 0304 	bic.w	r3, r3, #4
 8006b3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d015      	beq.n	8006b70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b44:	f7fc ff1a 	bl	800397c <HAL_GetTick>
 8006b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b4a:	e00a      	b.n	8006b62 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b4c:	f7fc ff16 	bl	800397c <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e0cb      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b62:	4b49      	ldr	r3, [pc, #292]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0ee      	beq.n	8006b4c <HAL_RCC_OscConfig+0x334>
 8006b6e:	e014      	b.n	8006b9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b70:	f7fc ff04 	bl	800397c <HAL_GetTick>
 8006b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b76:	e00a      	b.n	8006b8e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b78:	f7fc ff00 	bl	800397c <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e0b5      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b8e:	4b3e      	ldr	r3, [pc, #248]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1ee      	bne.n	8006b78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b9a:	7dfb      	ldrb	r3, [r7, #23]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d105      	bne.n	8006bac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ba0:	4b39      	ldr	r3, [pc, #228]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba4:	4a38      	ldr	r2, [pc, #224]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006ba6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006baa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 80a1 	beq.w	8006cf8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bb6:	4b34      	ldr	r3, [pc, #208]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f003 030c 	and.w	r3, r3, #12
 8006bbe:	2b08      	cmp	r3, #8
 8006bc0:	d05c      	beq.n	8006c7c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d141      	bne.n	8006c4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bca:	4b31      	ldr	r3, [pc, #196]	@ (8006c90 <HAL_RCC_OscConfig+0x478>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd0:	f7fc fed4 	bl	800397c <HAL_GetTick>
 8006bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bd6:	e008      	b.n	8006bea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bd8:	f7fc fed0 	bl	800397c <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d901      	bls.n	8006bea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e087      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bea:	4b27      	ldr	r3, [pc, #156]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1f0      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	69da      	ldr	r2, [r3, #28]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c04:	019b      	lsls	r3, r3, #6
 8006c06:	431a      	orrs	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0c:	085b      	lsrs	r3, r3, #1
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	041b      	lsls	r3, r3, #16
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c18:	061b      	lsls	r3, r3, #24
 8006c1a:	491b      	ldr	r1, [pc, #108]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c20:	4b1b      	ldr	r3, [pc, #108]	@ (8006c90 <HAL_RCC_OscConfig+0x478>)
 8006c22:	2201      	movs	r2, #1
 8006c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c26:	f7fc fea9 	bl	800397c <HAL_GetTick>
 8006c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c2c:	e008      	b.n	8006c40 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c2e:	f7fc fea5 	bl	800397c <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d901      	bls.n	8006c40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e05c      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c40:	4b11      	ldr	r3, [pc, #68]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d0f0      	beq.n	8006c2e <HAL_RCC_OscConfig+0x416>
 8006c4c:	e054      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c4e:	4b10      	ldr	r3, [pc, #64]	@ (8006c90 <HAL_RCC_OscConfig+0x478>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c54:	f7fc fe92 	bl	800397c <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c5c:	f7fc fe8e 	bl	800397c <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e045      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c6e:	4b06      	ldr	r3, [pc, #24]	@ (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f0      	bne.n	8006c5c <HAL_RCC_OscConfig+0x444>
 8006c7a:	e03d      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d107      	bne.n	8006c94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e038      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
 8006c88:	40023800 	.word	0x40023800
 8006c8c:	40007000 	.word	0x40007000
 8006c90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c94:	4b1b      	ldr	r3, [pc, #108]	@ (8006d04 <HAL_RCC_OscConfig+0x4ec>)
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d028      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d121      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d11a      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006cca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d111      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cda:	085b      	lsrs	r3, r3, #1
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d107      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d001      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e000      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	40023800 	.word	0x40023800

08006d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e0cc      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d1c:	4b68      	ldr	r3, [pc, #416]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d90c      	bls.n	8006d44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d2a:	4b65      	ldr	r3, [pc, #404]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d32:	4b63      	ldr	r3, [pc, #396]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d001      	beq.n	8006d44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e0b8      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d020      	beq.n	8006d92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d005      	beq.n	8006d68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d5c:	4b59      	ldr	r3, [pc, #356]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	4a58      	ldr	r2, [pc, #352]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006d66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0308 	and.w	r3, r3, #8
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d005      	beq.n	8006d80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d74:	4b53      	ldr	r3, [pc, #332]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	4a52      	ldr	r2, [pc, #328]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d80:	4b50      	ldr	r3, [pc, #320]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	494d      	ldr	r1, [pc, #308]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d044      	beq.n	8006e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d107      	bne.n	8006db6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006da6:	4b47      	ldr	r3, [pc, #284]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d119      	bne.n	8006de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e07f      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d003      	beq.n	8006dc6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d107      	bne.n	8006dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dc6:	4b3f      	ldr	r3, [pc, #252]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d109      	bne.n	8006de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e06f      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e067      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006de6:	4b37      	ldr	r3, [pc, #220]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f023 0203 	bic.w	r2, r3, #3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	4934      	ldr	r1, [pc, #208]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006df8:	f7fc fdc0 	bl	800397c <HAL_GetTick>
 8006dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dfe:	e00a      	b.n	8006e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e00:	f7fc fdbc 	bl	800397c <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e04f      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e16:	4b2b      	ldr	r3, [pc, #172]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f003 020c 	and.w	r2, r3, #12
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d1eb      	bne.n	8006e00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e28:	4b25      	ldr	r3, [pc, #148]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0307 	and.w	r3, r3, #7
 8006e30:	683a      	ldr	r2, [r7, #0]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d20c      	bcs.n	8006e50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e36:	4b22      	ldr	r3, [pc, #136]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	b2d2      	uxtb	r2, r2
 8006e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e3e:	4b20      	ldr	r3, [pc, #128]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0307 	and.w	r3, r3, #7
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d001      	beq.n	8006e50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e032      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d008      	beq.n	8006e6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e5c:	4b19      	ldr	r3, [pc, #100]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	4916      	ldr	r1, [pc, #88]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0308 	and.w	r3, r3, #8
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d009      	beq.n	8006e8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e7a:	4b12      	ldr	r3, [pc, #72]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	490e      	ldr	r1, [pc, #56]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e8e:	f000 f821 	bl	8006ed4 <HAL_RCC_GetSysClockFreq>
 8006e92:	4602      	mov	r2, r0
 8006e94:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	091b      	lsrs	r3, r3, #4
 8006e9a:	f003 030f 	and.w	r3, r3, #15
 8006e9e:	490a      	ldr	r1, [pc, #40]	@ (8006ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8006ea0:	5ccb      	ldrb	r3, [r1, r3]
 8006ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea6:	4a09      	ldr	r2, [pc, #36]	@ (8006ecc <HAL_RCC_ClockConfig+0x1c4>)
 8006ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006eaa:	4b09      	ldr	r3, [pc, #36]	@ (8006ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fb fe24 	bl	8002afc <HAL_InitTick>

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	40023c00 	.word	0x40023c00
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	08020e50 	.word	0x08020e50
 8006ecc:	20000000 	.word	0x20000000
 8006ed0:	20000004 	.word	0x20000004

08006ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ed8:	b090      	sub	sp, #64	@ 0x40
 8006eda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eec:	4b59      	ldr	r3, [pc, #356]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x180>)
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f003 030c 	and.w	r3, r3, #12
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d00d      	beq.n	8006f14 <HAL_RCC_GetSysClockFreq+0x40>
 8006ef8:	2b08      	cmp	r3, #8
 8006efa:	f200 80a1 	bhi.w	8007040 <HAL_RCC_GetSysClockFreq+0x16c>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <HAL_RCC_GetSysClockFreq+0x34>
 8006f02:	2b04      	cmp	r3, #4
 8006f04:	d003      	beq.n	8006f0e <HAL_RCC_GetSysClockFreq+0x3a>
 8006f06:	e09b      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f08:	4b53      	ldr	r3, [pc, #332]	@ (8007058 <HAL_RCC_GetSysClockFreq+0x184>)
 8006f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006f0c:	e09b      	b.n	8007046 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f0e:	4b53      	ldr	r3, [pc, #332]	@ (800705c <HAL_RCC_GetSysClockFreq+0x188>)
 8006f10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006f12:	e098      	b.n	8007046 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f14:	4b4f      	ldr	r3, [pc, #316]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f1e:	4b4d      	ldr	r3, [pc, #308]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d028      	beq.n	8006f7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f2a:	4b4a      	ldr	r3, [pc, #296]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	099b      	lsrs	r3, r3, #6
 8006f30:	2200      	movs	r2, #0
 8006f32:	623b      	str	r3, [r7, #32]
 8006f34:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	4b47      	ldr	r3, [pc, #284]	@ (800705c <HAL_RCC_GetSysClockFreq+0x188>)
 8006f40:	fb03 f201 	mul.w	r2, r3, r1
 8006f44:	2300      	movs	r3, #0
 8006f46:	fb00 f303 	mul.w	r3, r0, r3
 8006f4a:	4413      	add	r3, r2
 8006f4c:	4a43      	ldr	r2, [pc, #268]	@ (800705c <HAL_RCC_GetSysClockFreq+0x188>)
 8006f4e:	fba0 1202 	umull	r1, r2, r0, r2
 8006f52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f54:	460a      	mov	r2, r1
 8006f56:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006f58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f5a:	4413      	add	r3, r2
 8006f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f60:	2200      	movs	r2, #0
 8006f62:	61bb      	str	r3, [r7, #24]
 8006f64:	61fa      	str	r2, [r7, #28]
 8006f66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006f6e:	f7f9 f987 	bl	8000280 <__aeabi_uldivmod>
 8006f72:	4602      	mov	r2, r0
 8006f74:	460b      	mov	r3, r1
 8006f76:	4613      	mov	r3, r2
 8006f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f7a:	e053      	b.n	8007024 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f7c:	4b35      	ldr	r3, [pc, #212]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	099b      	lsrs	r3, r3, #6
 8006f82:	2200      	movs	r2, #0
 8006f84:	613b      	str	r3, [r7, #16]
 8006f86:	617a      	str	r2, [r7, #20]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006f8e:	f04f 0b00 	mov.w	fp, #0
 8006f92:	4652      	mov	r2, sl
 8006f94:	465b      	mov	r3, fp
 8006f96:	f04f 0000 	mov.w	r0, #0
 8006f9a:	f04f 0100 	mov.w	r1, #0
 8006f9e:	0159      	lsls	r1, r3, #5
 8006fa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fa4:	0150      	lsls	r0, r2, #5
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	ebb2 080a 	subs.w	r8, r2, sl
 8006fae:	eb63 090b 	sbc.w	r9, r3, fp
 8006fb2:	f04f 0200 	mov.w	r2, #0
 8006fb6:	f04f 0300 	mov.w	r3, #0
 8006fba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006fbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006fc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006fc6:	ebb2 0408 	subs.w	r4, r2, r8
 8006fca:	eb63 0509 	sbc.w	r5, r3, r9
 8006fce:	f04f 0200 	mov.w	r2, #0
 8006fd2:	f04f 0300 	mov.w	r3, #0
 8006fd6:	00eb      	lsls	r3, r5, #3
 8006fd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fdc:	00e2      	lsls	r2, r4, #3
 8006fde:	4614      	mov	r4, r2
 8006fe0:	461d      	mov	r5, r3
 8006fe2:	eb14 030a 	adds.w	r3, r4, sl
 8006fe6:	603b      	str	r3, [r7, #0]
 8006fe8:	eb45 030b 	adc.w	r3, r5, fp
 8006fec:	607b      	str	r3, [r7, #4]
 8006fee:	f04f 0200 	mov.w	r2, #0
 8006ff2:	f04f 0300 	mov.w	r3, #0
 8006ff6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	028b      	lsls	r3, r1, #10
 8006ffe:	4621      	mov	r1, r4
 8007000:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007004:	4621      	mov	r1, r4
 8007006:	028a      	lsls	r2, r1, #10
 8007008:	4610      	mov	r0, r2
 800700a:	4619      	mov	r1, r3
 800700c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800700e:	2200      	movs	r2, #0
 8007010:	60bb      	str	r3, [r7, #8]
 8007012:	60fa      	str	r2, [r7, #12]
 8007014:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007018:	f7f9 f932 	bl	8000280 <__aeabi_uldivmod>
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	4613      	mov	r3, r2
 8007022:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007024:	4b0b      	ldr	r3, [pc, #44]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x180>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	0c1b      	lsrs	r3, r3, #16
 800702a:	f003 0303 	and.w	r3, r3, #3
 800702e:	3301      	adds	r3, #1
 8007030:	005b      	lsls	r3, r3, #1
 8007032:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007034:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007038:	fbb2 f3f3 	udiv	r3, r2, r3
 800703c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800703e:	e002      	b.n	8007046 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007040:	4b05      	ldr	r3, [pc, #20]	@ (8007058 <HAL_RCC_GetSysClockFreq+0x184>)
 8007042:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007048:	4618      	mov	r0, r3
 800704a:	3740      	adds	r7, #64	@ 0x40
 800704c:	46bd      	mov	sp, r7
 800704e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007052:	bf00      	nop
 8007054:	40023800 	.word	0x40023800
 8007058:	00f42400 	.word	0x00f42400
 800705c:	017d7840 	.word	0x017d7840

08007060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007064:	4b03      	ldr	r3, [pc, #12]	@ (8007074 <HAL_RCC_GetHCLKFreq+0x14>)
 8007066:	681b      	ldr	r3, [r3, #0]
}
 8007068:	4618      	mov	r0, r3
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20000000 	.word	0x20000000

08007078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800707c:	f7ff fff0 	bl	8007060 <HAL_RCC_GetHCLKFreq>
 8007080:	4602      	mov	r2, r0
 8007082:	4b05      	ldr	r3, [pc, #20]	@ (8007098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	0a9b      	lsrs	r3, r3, #10
 8007088:	f003 0307 	and.w	r3, r3, #7
 800708c:	4903      	ldr	r1, [pc, #12]	@ (800709c <HAL_RCC_GetPCLK1Freq+0x24>)
 800708e:	5ccb      	ldrb	r3, [r1, r3]
 8007090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007094:	4618      	mov	r0, r3
 8007096:	bd80      	pop	{r7, pc}
 8007098:	40023800 	.word	0x40023800
 800709c:	08020e60 	.word	0x08020e60

080070a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80070a4:	f7ff ffdc 	bl	8007060 <HAL_RCC_GetHCLKFreq>
 80070a8:	4602      	mov	r2, r0
 80070aa:	4b05      	ldr	r3, [pc, #20]	@ (80070c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	0b5b      	lsrs	r3, r3, #13
 80070b0:	f003 0307 	and.w	r3, r3, #7
 80070b4:	4903      	ldr	r1, [pc, #12]	@ (80070c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070b6:	5ccb      	ldrb	r3, [r1, r3]
 80070b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070bc:	4618      	mov	r0, r3
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	40023800 	.word	0x40023800
 80070c4:	08020e60 	.word	0x08020e60

080070c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	220f      	movs	r2, #15
 80070d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80070d8:	4b12      	ldr	r3, [pc, #72]	@ (8007124 <HAL_RCC_GetClockConfig+0x5c>)
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f003 0203 	and.w	r2, r3, #3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80070e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007124 <HAL_RCC_GetClockConfig+0x5c>)
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80070f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007124 <HAL_RCC_GetClockConfig+0x5c>)
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80070fc:	4b09      	ldr	r3, [pc, #36]	@ (8007124 <HAL_RCC_GetClockConfig+0x5c>)
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	08db      	lsrs	r3, r3, #3
 8007102:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800710a:	4b07      	ldr	r3, [pc, #28]	@ (8007128 <HAL_RCC_GetClockConfig+0x60>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0207 	and.w	r2, r3, #7
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	601a      	str	r2, [r3, #0]
}
 8007116:	bf00      	nop
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	40023800 	.word	0x40023800
 8007128:	40023c00 	.word	0x40023c00

0800712c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e038      	b.n	80071b4 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d106      	bne.n	800715c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f7f9 febc 	bl	8000ed4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	3308      	adds	r3, #8
 8007164:	4619      	mov	r1, r3
 8007166:	4610      	mov	r0, r2
 8007168:	f000 ffd8 	bl	800811c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6818      	ldr	r0, [r3, #0]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	461a      	mov	r2, r3
 8007176:	68b9      	ldr	r1, [r7, #8]
 8007178:	f001 f83a 	bl	80081f0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6858      	ldr	r0, [r3, #4]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	689a      	ldr	r2, [r3, #8]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007188:	6879      	ldr	r1, [r7, #4]
 800718a:	f001 f85f 	bl	800824c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	6892      	ldr	r2, [r2, #8]
 8007196:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	6892      	ldr	r2, [r2, #8]
 80071a2:	f041 0101 	orr.w	r1, r1, #1
 80071a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e041      	b.n	8007252 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d106      	bne.n	80071e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7fc f836 	bl	8003254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2202      	movs	r2, #2
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	3304      	adds	r3, #4
 80071f8:	4619      	mov	r1, r3
 80071fa:	4610      	mov	r0, r2
 80071fc:	f000 f9b6 	bl	800756c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b01      	cmp	r3, #1
 800726e:	d001      	beq.n	8007274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e04e      	b.n	8007312 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2202      	movs	r2, #2
 8007278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68da      	ldr	r2, [r3, #12]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f042 0201 	orr.w	r2, r2, #1
 800728a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a23      	ldr	r2, [pc, #140]	@ (8007320 <HAL_TIM_Base_Start_IT+0xc4>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d022      	beq.n	80072dc <HAL_TIM_Base_Start_IT+0x80>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800729e:	d01d      	beq.n	80072dc <HAL_TIM_Base_Start_IT+0x80>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a1f      	ldr	r2, [pc, #124]	@ (8007324 <HAL_TIM_Base_Start_IT+0xc8>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d018      	beq.n	80072dc <HAL_TIM_Base_Start_IT+0x80>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a1e      	ldr	r2, [pc, #120]	@ (8007328 <HAL_TIM_Base_Start_IT+0xcc>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d013      	beq.n	80072dc <HAL_TIM_Base_Start_IT+0x80>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a1c      	ldr	r2, [pc, #112]	@ (800732c <HAL_TIM_Base_Start_IT+0xd0>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d00e      	beq.n	80072dc <HAL_TIM_Base_Start_IT+0x80>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a1b      	ldr	r2, [pc, #108]	@ (8007330 <HAL_TIM_Base_Start_IT+0xd4>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d009      	beq.n	80072dc <HAL_TIM_Base_Start_IT+0x80>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a19      	ldr	r2, [pc, #100]	@ (8007334 <HAL_TIM_Base_Start_IT+0xd8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d004      	beq.n	80072dc <HAL_TIM_Base_Start_IT+0x80>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a18      	ldr	r2, [pc, #96]	@ (8007338 <HAL_TIM_Base_Start_IT+0xdc>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d111      	bne.n	8007300 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2b06      	cmp	r3, #6
 80072ec:	d010      	beq.n	8007310 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f042 0201 	orr.w	r2, r2, #1
 80072fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072fe:	e007      	b.n	8007310 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0201 	orr.w	r2, r2, #1
 800730e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	40010000 	.word	0x40010000
 8007324:	40000400 	.word	0x40000400
 8007328:	40000800 	.word	0x40000800
 800732c:	40000c00 	.word	0x40000c00
 8007330:	40010400 	.word	0x40010400
 8007334:	40014000 	.word	0x40014000
 8007338:	40001800 	.word	0x40001800

0800733c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d020      	beq.n	80073a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b00      	cmp	r3, #0
 8007366:	d01b      	beq.n	80073a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f06f 0202 	mvn.w	r2, #2
 8007370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	f003 0303 	and.w	r3, r3, #3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f8d2 	bl	8007530 <HAL_TIM_IC_CaptureCallback>
 800738c:	e005      	b.n	800739a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f8c4 	bl	800751c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f8d5 	bl	8007544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f003 0304 	and.w	r3, r3, #4
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d020      	beq.n	80073ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f003 0304 	and.w	r3, r3, #4
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d01b      	beq.n	80073ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f06f 0204 	mvn.w	r2, #4
 80073bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2202      	movs	r2, #2
 80073c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f8ac 	bl	8007530 <HAL_TIM_IC_CaptureCallback>
 80073d8:	e005      	b.n	80073e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f89e 	bl	800751c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f8af 	bl	8007544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f003 0308 	and.w	r3, r3, #8
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d020      	beq.n	8007438 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f003 0308 	and.w	r3, r3, #8
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d01b      	beq.n	8007438 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f06f 0208 	mvn.w	r2, #8
 8007408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2204      	movs	r2, #4
 800740e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	f003 0303 	and.w	r3, r3, #3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f886 	bl	8007530 <HAL_TIM_IC_CaptureCallback>
 8007424:	e005      	b.n	8007432 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f878 	bl	800751c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f889 	bl	8007544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f003 0310 	and.w	r3, r3, #16
 800743e:	2b00      	cmp	r3, #0
 8007440:	d020      	beq.n	8007484 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f003 0310 	and.w	r3, r3, #16
 8007448:	2b00      	cmp	r3, #0
 800744a:	d01b      	beq.n	8007484 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f06f 0210 	mvn.w	r2, #16
 8007454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2208      	movs	r2, #8
 800745a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f860 	bl	8007530 <HAL_TIM_IC_CaptureCallback>
 8007470:	e005      	b.n	800747e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f852 	bl	800751c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f863 	bl	8007544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00c      	beq.n	80074a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d007      	beq.n	80074a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f06f 0201 	mvn.w	r2, #1
 80074a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7f9 fe20 	bl	80010e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00c      	beq.n	80074cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d007      	beq.n	80074cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80074c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f97c 	bl	80077c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00c      	beq.n	80074f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d007      	beq.n	80074f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80074e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f834 	bl	8007558 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f003 0320 	and.w	r3, r3, #32
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00c      	beq.n	8007514 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f003 0320 	and.w	r3, r3, #32
 8007500:	2b00      	cmp	r3, #0
 8007502:	d007      	beq.n	8007514 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f06f 0220 	mvn.w	r2, #32
 800750c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f94e 	bl	80077b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007514:	bf00      	nop
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a43      	ldr	r2, [pc, #268]	@ (800768c <TIM_Base_SetConfig+0x120>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d013      	beq.n	80075ac <TIM_Base_SetConfig+0x40>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800758a:	d00f      	beq.n	80075ac <TIM_Base_SetConfig+0x40>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a40      	ldr	r2, [pc, #256]	@ (8007690 <TIM_Base_SetConfig+0x124>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d00b      	beq.n	80075ac <TIM_Base_SetConfig+0x40>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a3f      	ldr	r2, [pc, #252]	@ (8007694 <TIM_Base_SetConfig+0x128>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d007      	beq.n	80075ac <TIM_Base_SetConfig+0x40>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a3e      	ldr	r2, [pc, #248]	@ (8007698 <TIM_Base_SetConfig+0x12c>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d003      	beq.n	80075ac <TIM_Base_SetConfig+0x40>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a3d      	ldr	r2, [pc, #244]	@ (800769c <TIM_Base_SetConfig+0x130>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d108      	bne.n	80075be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a32      	ldr	r2, [pc, #200]	@ (800768c <TIM_Base_SetConfig+0x120>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d02b      	beq.n	800761e <TIM_Base_SetConfig+0xb2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075cc:	d027      	beq.n	800761e <TIM_Base_SetConfig+0xb2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a2f      	ldr	r2, [pc, #188]	@ (8007690 <TIM_Base_SetConfig+0x124>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d023      	beq.n	800761e <TIM_Base_SetConfig+0xb2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a2e      	ldr	r2, [pc, #184]	@ (8007694 <TIM_Base_SetConfig+0x128>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d01f      	beq.n	800761e <TIM_Base_SetConfig+0xb2>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007698 <TIM_Base_SetConfig+0x12c>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d01b      	beq.n	800761e <TIM_Base_SetConfig+0xb2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a2c      	ldr	r2, [pc, #176]	@ (800769c <TIM_Base_SetConfig+0x130>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d017      	beq.n	800761e <TIM_Base_SetConfig+0xb2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a2b      	ldr	r2, [pc, #172]	@ (80076a0 <TIM_Base_SetConfig+0x134>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d013      	beq.n	800761e <TIM_Base_SetConfig+0xb2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a2a      	ldr	r2, [pc, #168]	@ (80076a4 <TIM_Base_SetConfig+0x138>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d00f      	beq.n	800761e <TIM_Base_SetConfig+0xb2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a29      	ldr	r2, [pc, #164]	@ (80076a8 <TIM_Base_SetConfig+0x13c>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d00b      	beq.n	800761e <TIM_Base_SetConfig+0xb2>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a28      	ldr	r2, [pc, #160]	@ (80076ac <TIM_Base_SetConfig+0x140>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d007      	beq.n	800761e <TIM_Base_SetConfig+0xb2>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a27      	ldr	r2, [pc, #156]	@ (80076b0 <TIM_Base_SetConfig+0x144>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d003      	beq.n	800761e <TIM_Base_SetConfig+0xb2>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a26      	ldr	r2, [pc, #152]	@ (80076b4 <TIM_Base_SetConfig+0x148>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d108      	bne.n	8007630 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	4313      	orrs	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	4313      	orrs	r3, r2
 800763c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	689a      	ldr	r2, [r3, #8]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a0e      	ldr	r2, [pc, #56]	@ (800768c <TIM_Base_SetConfig+0x120>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d003      	beq.n	800765e <TIM_Base_SetConfig+0xf2>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a10      	ldr	r2, [pc, #64]	@ (800769c <TIM_Base_SetConfig+0x130>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d103      	bne.n	8007666 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	691a      	ldr	r2, [r3, #16]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f043 0204 	orr.w	r2, r3, #4
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	601a      	str	r2, [r3, #0]
}
 800767e:	bf00      	nop
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	40010000 	.word	0x40010000
 8007690:	40000400 	.word	0x40000400
 8007694:	40000800 	.word	0x40000800
 8007698:	40000c00 	.word	0x40000c00
 800769c:	40010400 	.word	0x40010400
 80076a0:	40014000 	.word	0x40014000
 80076a4:	40014400 	.word	0x40014400
 80076a8:	40014800 	.word	0x40014800
 80076ac:	40001800 	.word	0x40001800
 80076b0:	40001c00 	.word	0x40001c00
 80076b4:	40002000 	.word	0x40002000

080076b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d101      	bne.n	80076d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076cc:	2302      	movs	r3, #2
 80076ce:	e05a      	b.n	8007786 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2202      	movs	r2, #2
 80076dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	4313      	orrs	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a21      	ldr	r2, [pc, #132]	@ (8007794 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d022      	beq.n	800775a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800771c:	d01d      	beq.n	800775a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a1d      	ldr	r2, [pc, #116]	@ (8007798 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d018      	beq.n	800775a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a1b      	ldr	r2, [pc, #108]	@ (800779c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d013      	beq.n	800775a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a1a      	ldr	r2, [pc, #104]	@ (80077a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d00e      	beq.n	800775a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a18      	ldr	r2, [pc, #96]	@ (80077a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d009      	beq.n	800775a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a17      	ldr	r2, [pc, #92]	@ (80077a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d004      	beq.n	800775a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a15      	ldr	r2, [pc, #84]	@ (80077ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d10c      	bne.n	8007774 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007760:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	4313      	orrs	r3, r2
 800776a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	40010000 	.word	0x40010000
 8007798:	40000400 	.word	0x40000400
 800779c:	40000800 	.word	0x40000800
 80077a0:	40000c00 	.word	0x40000c00
 80077a4:	40010400 	.word	0x40010400
 80077a8:	40014000 	.word	0x40014000
 80077ac:	40001800 	.word	0x40001800

080077b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e042      	b.n	8007870 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d106      	bne.n	8007804 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7fb fdce 	bl	80033a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2224      	movs	r2, #36	@ 0x24
 8007808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68da      	ldr	r2, [r3, #12]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800781a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fa09 	bl	8007c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	691a      	ldr	r2, [r3, #16]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	695a      	ldr	r2, [r3, #20]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007840:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68da      	ldr	r2, [r3, #12]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007850:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2220      	movs	r2, #32
 800785c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08a      	sub	sp, #40	@ 0x28
 800787c:	af02      	add	r7, sp, #8
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	603b      	str	r3, [r7, #0]
 8007884:	4613      	mov	r3, r2
 8007886:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007888:	2300      	movs	r3, #0
 800788a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b20      	cmp	r3, #32
 8007896:	d175      	bne.n	8007984 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <HAL_UART_Transmit+0x2c>
 800789e:	88fb      	ldrh	r3, [r7, #6]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d101      	bne.n	80078a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e06e      	b.n	8007986 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2221      	movs	r2, #33	@ 0x21
 80078b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078b6:	f7fc f861 	bl	800397c <HAL_GetTick>
 80078ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	88fa      	ldrh	r2, [r7, #6]
 80078c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	88fa      	ldrh	r2, [r7, #6]
 80078c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078d0:	d108      	bne.n	80078e4 <HAL_UART_Transmit+0x6c>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d104      	bne.n	80078e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80078da:	2300      	movs	r3, #0
 80078dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	61bb      	str	r3, [r7, #24]
 80078e2:	e003      	b.n	80078ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078e8:	2300      	movs	r3, #0
 80078ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078ec:	e02e      	b.n	800794c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2200      	movs	r2, #0
 80078f6:	2180      	movs	r1, #128	@ 0x80
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 f8df 	bl	8007abc <UART_WaitOnFlagUntilTimeout>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d005      	beq.n	8007910 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2220      	movs	r2, #32
 8007908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e03a      	b.n	8007986 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10b      	bne.n	800792e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007924:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	3302      	adds	r3, #2
 800792a:	61bb      	str	r3, [r7, #24]
 800792c:	e007      	b.n	800793e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	781a      	ldrb	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	3301      	adds	r3, #1
 800793c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007942:	b29b      	uxth	r3, r3
 8007944:	3b01      	subs	r3, #1
 8007946:	b29a      	uxth	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007950:	b29b      	uxth	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1cb      	bne.n	80078ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2200      	movs	r2, #0
 800795e:	2140      	movs	r1, #64	@ 0x40
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 f8ab 	bl	8007abc <UART_WaitOnFlagUntilTimeout>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d005      	beq.n	8007978 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2220      	movs	r2, #32
 8007970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e006      	b.n	8007986 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2220      	movs	r2, #32
 800797c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	e000      	b.n	8007986 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007984:	2302      	movs	r3, #2
  }
}
 8007986:	4618      	mov	r0, r3
 8007988:	3720      	adds	r7, #32
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b08a      	sub	sp, #40	@ 0x28
 8007992:	af02      	add	r7, sp, #8
 8007994:	60f8      	str	r0, [r7, #12]
 8007996:	60b9      	str	r1, [r7, #8]
 8007998:	603b      	str	r3, [r7, #0]
 800799a:	4613      	mov	r3, r2
 800799c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	f040 8081 	bne.w	8007ab2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <HAL_UART_Receive+0x2e>
 80079b6:	88fb      	ldrh	r3, [r7, #6]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d101      	bne.n	80079c0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e079      	b.n	8007ab4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2222      	movs	r2, #34	@ 0x22
 80079ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079d4:	f7fb ffd2 	bl	800397c <HAL_GetTick>
 80079d8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	88fa      	ldrh	r2, [r7, #6]
 80079de:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	88fa      	ldrh	r2, [r7, #6]
 80079e4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ee:	d108      	bne.n	8007a02 <HAL_UART_Receive+0x74>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d104      	bne.n	8007a02 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80079f8:	2300      	movs	r3, #0
 80079fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	61bb      	str	r3, [r7, #24]
 8007a00:	e003      	b.n	8007a0a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a06:	2300      	movs	r3, #0
 8007a08:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007a0a:	e047      	b.n	8007a9c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	2200      	movs	r2, #0
 8007a14:	2120      	movs	r1, #32
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 f850 	bl	8007abc <UART_WaitOnFlagUntilTimeout>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d005      	beq.n	8007a2e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2220      	movs	r2, #32
 8007a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e042      	b.n	8007ab4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10c      	bne.n	8007a4e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	3302      	adds	r3, #2
 8007a4a:	61bb      	str	r3, [r7, #24]
 8007a4c:	e01f      	b.n	8007a8e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a56:	d007      	beq.n	8007a68 <HAL_UART_Receive+0xda>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10a      	bne.n	8007a76 <HAL_UART_Receive+0xe8>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d106      	bne.n	8007a76 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	701a      	strb	r2, [r3, #0]
 8007a74:	e008      	b.n	8007a88 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	3b01      	subs	r3, #1
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1b2      	bne.n	8007a0c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2220      	movs	r2, #32
 8007aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	e000      	b.n	8007ab4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007ab2:	2302      	movs	r3, #2
  }
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3720      	adds	r7, #32
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	603b      	str	r3, [r7, #0]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007acc:	e03b      	b.n	8007b46 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad4:	d037      	beq.n	8007b46 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ad6:	f7fb ff51 	bl	800397c <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	6a3a      	ldr	r2, [r7, #32]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d302      	bcc.n	8007aec <UART_WaitOnFlagUntilTimeout+0x30>
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e03a      	b.n	8007b66 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	f003 0304 	and.w	r3, r3, #4
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d023      	beq.n	8007b46 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2b80      	cmp	r3, #128	@ 0x80
 8007b02:	d020      	beq.n	8007b46 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2b40      	cmp	r3, #64	@ 0x40
 8007b08:	d01d      	beq.n	8007b46 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0308 	and.w	r3, r3, #8
 8007b14:	2b08      	cmp	r3, #8
 8007b16:	d116      	bne.n	8007b46 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007b18:	2300      	movs	r3, #0
 8007b1a:	617b      	str	r3, [r7, #20]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	617b      	str	r3, [r7, #20]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	617b      	str	r3, [r7, #20]
 8007b2c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f000 f81d 	bl	8007b6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2208      	movs	r2, #8
 8007b38:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e00f      	b.n	8007b66 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	4013      	ands	r3, r2
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	bf0c      	ite	eq
 8007b56:	2301      	moveq	r3, #1
 8007b58:	2300      	movne	r3, #0
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	79fb      	ldrb	r3, [r7, #7]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d0b4      	beq.n	8007ace <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3718      	adds	r7, #24
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b095      	sub	sp, #84	@ 0x54
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	330c      	adds	r3, #12
 8007b7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b80:	e853 3f00 	ldrex	r3, [r3]
 8007b84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	330c      	adds	r3, #12
 8007b94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b96:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b9e:	e841 2300 	strex	r3, r2, [r1]
 8007ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1e5      	bne.n	8007b76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3314      	adds	r3, #20
 8007bb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	e853 3f00 	ldrex	r3, [r3]
 8007bb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	f023 0301 	bic.w	r3, r3, #1
 8007bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3314      	adds	r3, #20
 8007bc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bd2:	e841 2300 	strex	r3, r2, [r1]
 8007bd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1e5      	bne.n	8007baa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d119      	bne.n	8007c1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	330c      	adds	r3, #12
 8007bec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	e853 3f00 	ldrex	r3, [r3]
 8007bf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f023 0310 	bic.w	r3, r3, #16
 8007bfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	330c      	adds	r3, #12
 8007c04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c06:	61ba      	str	r2, [r7, #24]
 8007c08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0a:	6979      	ldr	r1, [r7, #20]
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	613b      	str	r3, [r7, #16]
   return(result);
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e5      	bne.n	8007be6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007c28:	bf00      	nop
 8007c2a:	3754      	adds	r7, #84	@ 0x54
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c38:	b0c0      	sub	sp, #256	@ 0x100
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c50:	68d9      	ldr	r1, [r3, #12]
 8007c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	ea40 0301 	orr.w	r3, r0, r1
 8007c5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	431a      	orrs	r2, r3
 8007c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007c8c:	f021 010c 	bic.w	r1, r1, #12
 8007c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c9a:	430b      	orrs	r3, r1
 8007c9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cae:	6999      	ldr	r1, [r3, #24]
 8007cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	ea40 0301 	orr.w	r3, r0, r1
 8007cba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	4b8f      	ldr	r3, [pc, #572]	@ (8007f00 <UART_SetConfig+0x2cc>)
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d005      	beq.n	8007cd4 <UART_SetConfig+0xa0>
 8007cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	4b8d      	ldr	r3, [pc, #564]	@ (8007f04 <UART_SetConfig+0x2d0>)
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d104      	bne.n	8007cde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cd4:	f7ff f9e4 	bl	80070a0 <HAL_RCC_GetPCLK2Freq>
 8007cd8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007cdc:	e003      	b.n	8007ce6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cde:	f7ff f9cb 	bl	8007078 <HAL_RCC_GetPCLK1Freq>
 8007ce2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cea:	69db      	ldr	r3, [r3, #28]
 8007cec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cf0:	f040 810c 	bne.w	8007f0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007cfe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007d02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007d06:	4622      	mov	r2, r4
 8007d08:	462b      	mov	r3, r5
 8007d0a:	1891      	adds	r1, r2, r2
 8007d0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007d0e:	415b      	adcs	r3, r3
 8007d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007d16:	4621      	mov	r1, r4
 8007d18:	eb12 0801 	adds.w	r8, r2, r1
 8007d1c:	4629      	mov	r1, r5
 8007d1e:	eb43 0901 	adc.w	r9, r3, r1
 8007d22:	f04f 0200 	mov.w	r2, #0
 8007d26:	f04f 0300 	mov.w	r3, #0
 8007d2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d36:	4690      	mov	r8, r2
 8007d38:	4699      	mov	r9, r3
 8007d3a:	4623      	mov	r3, r4
 8007d3c:	eb18 0303 	adds.w	r3, r8, r3
 8007d40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d44:	462b      	mov	r3, r5
 8007d46:	eb49 0303 	adc.w	r3, r9, r3
 8007d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007d5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007d62:	460b      	mov	r3, r1
 8007d64:	18db      	adds	r3, r3, r3
 8007d66:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d68:	4613      	mov	r3, r2
 8007d6a:	eb42 0303 	adc.w	r3, r2, r3
 8007d6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007d74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007d78:	f7f8 fa82 	bl	8000280 <__aeabi_uldivmod>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4b61      	ldr	r3, [pc, #388]	@ (8007f08 <UART_SetConfig+0x2d4>)
 8007d82:	fba3 2302 	umull	r2, r3, r3, r2
 8007d86:	095b      	lsrs	r3, r3, #5
 8007d88:	011c      	lsls	r4, r3, #4
 8007d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007d98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007d9c:	4642      	mov	r2, r8
 8007d9e:	464b      	mov	r3, r9
 8007da0:	1891      	adds	r1, r2, r2
 8007da2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007da4:	415b      	adcs	r3, r3
 8007da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007da8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007dac:	4641      	mov	r1, r8
 8007dae:	eb12 0a01 	adds.w	sl, r2, r1
 8007db2:	4649      	mov	r1, r9
 8007db4:	eb43 0b01 	adc.w	fp, r3, r1
 8007db8:	f04f 0200 	mov.w	r2, #0
 8007dbc:	f04f 0300 	mov.w	r3, #0
 8007dc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007dc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007dc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dcc:	4692      	mov	sl, r2
 8007dce:	469b      	mov	fp, r3
 8007dd0:	4643      	mov	r3, r8
 8007dd2:	eb1a 0303 	adds.w	r3, sl, r3
 8007dd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007dda:	464b      	mov	r3, r9
 8007ddc:	eb4b 0303 	adc.w	r3, fp, r3
 8007de0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007df0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007df4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	18db      	adds	r3, r3, r3
 8007dfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dfe:	4613      	mov	r3, r2
 8007e00:	eb42 0303 	adc.w	r3, r2, r3
 8007e04:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007e0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007e0e:	f7f8 fa37 	bl	8000280 <__aeabi_uldivmod>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	4611      	mov	r1, r2
 8007e18:	4b3b      	ldr	r3, [pc, #236]	@ (8007f08 <UART_SetConfig+0x2d4>)
 8007e1a:	fba3 2301 	umull	r2, r3, r3, r1
 8007e1e:	095b      	lsrs	r3, r3, #5
 8007e20:	2264      	movs	r2, #100	@ 0x64
 8007e22:	fb02 f303 	mul.w	r3, r2, r3
 8007e26:	1acb      	subs	r3, r1, r3
 8007e28:	00db      	lsls	r3, r3, #3
 8007e2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007e2e:	4b36      	ldr	r3, [pc, #216]	@ (8007f08 <UART_SetConfig+0x2d4>)
 8007e30:	fba3 2302 	umull	r2, r3, r3, r2
 8007e34:	095b      	lsrs	r3, r3, #5
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007e3c:	441c      	add	r4, r3
 8007e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e42:	2200      	movs	r2, #0
 8007e44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007e4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007e50:	4642      	mov	r2, r8
 8007e52:	464b      	mov	r3, r9
 8007e54:	1891      	adds	r1, r2, r2
 8007e56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007e58:	415b      	adcs	r3, r3
 8007e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007e60:	4641      	mov	r1, r8
 8007e62:	1851      	adds	r1, r2, r1
 8007e64:	6339      	str	r1, [r7, #48]	@ 0x30
 8007e66:	4649      	mov	r1, r9
 8007e68:	414b      	adcs	r3, r1
 8007e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e6c:	f04f 0200 	mov.w	r2, #0
 8007e70:	f04f 0300 	mov.w	r3, #0
 8007e74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007e78:	4659      	mov	r1, fp
 8007e7a:	00cb      	lsls	r3, r1, #3
 8007e7c:	4651      	mov	r1, sl
 8007e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e82:	4651      	mov	r1, sl
 8007e84:	00ca      	lsls	r2, r1, #3
 8007e86:	4610      	mov	r0, r2
 8007e88:	4619      	mov	r1, r3
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	4642      	mov	r2, r8
 8007e8e:	189b      	adds	r3, r3, r2
 8007e90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e94:	464b      	mov	r3, r9
 8007e96:	460a      	mov	r2, r1
 8007e98:	eb42 0303 	adc.w	r3, r2, r3
 8007e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007eac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007eb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	18db      	adds	r3, r3, r3
 8007eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007eba:	4613      	mov	r3, r2
 8007ebc:	eb42 0303 	adc.w	r3, r2, r3
 8007ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ec2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007ec6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007eca:	f7f8 f9d9 	bl	8000280 <__aeabi_uldivmod>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8007f08 <UART_SetConfig+0x2d4>)
 8007ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ed8:	095b      	lsrs	r3, r3, #5
 8007eda:	2164      	movs	r1, #100	@ 0x64
 8007edc:	fb01 f303 	mul.w	r3, r1, r3
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	3332      	adds	r3, #50	@ 0x32
 8007ee6:	4a08      	ldr	r2, [pc, #32]	@ (8007f08 <UART_SetConfig+0x2d4>)
 8007ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8007eec:	095b      	lsrs	r3, r3, #5
 8007eee:	f003 0207 	and.w	r2, r3, #7
 8007ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4422      	add	r2, r4
 8007efa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007efc:	e106      	b.n	800810c <UART_SetConfig+0x4d8>
 8007efe:	bf00      	nop
 8007f00:	40011000 	.word	0x40011000
 8007f04:	40011400 	.word	0x40011400
 8007f08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f10:	2200      	movs	r2, #0
 8007f12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f16:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007f1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007f1e:	4642      	mov	r2, r8
 8007f20:	464b      	mov	r3, r9
 8007f22:	1891      	adds	r1, r2, r2
 8007f24:	6239      	str	r1, [r7, #32]
 8007f26:	415b      	adcs	r3, r3
 8007f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f2e:	4641      	mov	r1, r8
 8007f30:	1854      	adds	r4, r2, r1
 8007f32:	4649      	mov	r1, r9
 8007f34:	eb43 0501 	adc.w	r5, r3, r1
 8007f38:	f04f 0200 	mov.w	r2, #0
 8007f3c:	f04f 0300 	mov.w	r3, #0
 8007f40:	00eb      	lsls	r3, r5, #3
 8007f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f46:	00e2      	lsls	r2, r4, #3
 8007f48:	4614      	mov	r4, r2
 8007f4a:	461d      	mov	r5, r3
 8007f4c:	4643      	mov	r3, r8
 8007f4e:	18e3      	adds	r3, r4, r3
 8007f50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f54:	464b      	mov	r3, r9
 8007f56:	eb45 0303 	adc.w	r3, r5, r3
 8007f5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f6e:	f04f 0200 	mov.w	r2, #0
 8007f72:	f04f 0300 	mov.w	r3, #0
 8007f76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	008b      	lsls	r3, r1, #2
 8007f7e:	4621      	mov	r1, r4
 8007f80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f84:	4621      	mov	r1, r4
 8007f86:	008a      	lsls	r2, r1, #2
 8007f88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007f8c:	f7f8 f978 	bl	8000280 <__aeabi_uldivmod>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	4b60      	ldr	r3, [pc, #384]	@ (8008118 <UART_SetConfig+0x4e4>)
 8007f96:	fba3 2302 	umull	r2, r3, r3, r2
 8007f9a:	095b      	lsrs	r3, r3, #5
 8007f9c:	011c      	lsls	r4, r3, #4
 8007f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007fa8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007fac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007fb0:	4642      	mov	r2, r8
 8007fb2:	464b      	mov	r3, r9
 8007fb4:	1891      	adds	r1, r2, r2
 8007fb6:	61b9      	str	r1, [r7, #24]
 8007fb8:	415b      	adcs	r3, r3
 8007fba:	61fb      	str	r3, [r7, #28]
 8007fbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fc0:	4641      	mov	r1, r8
 8007fc2:	1851      	adds	r1, r2, r1
 8007fc4:	6139      	str	r1, [r7, #16]
 8007fc6:	4649      	mov	r1, r9
 8007fc8:	414b      	adcs	r3, r1
 8007fca:	617b      	str	r3, [r7, #20]
 8007fcc:	f04f 0200 	mov.w	r2, #0
 8007fd0:	f04f 0300 	mov.w	r3, #0
 8007fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fd8:	4659      	mov	r1, fp
 8007fda:	00cb      	lsls	r3, r1, #3
 8007fdc:	4651      	mov	r1, sl
 8007fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fe2:	4651      	mov	r1, sl
 8007fe4:	00ca      	lsls	r2, r1, #3
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	4619      	mov	r1, r3
 8007fea:	4603      	mov	r3, r0
 8007fec:	4642      	mov	r2, r8
 8007fee:	189b      	adds	r3, r3, r2
 8007ff0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ff4:	464b      	mov	r3, r9
 8007ff6:	460a      	mov	r2, r1
 8007ff8:	eb42 0303 	adc.w	r3, r2, r3
 8007ffc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	67bb      	str	r3, [r7, #120]	@ 0x78
 800800a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800800c:	f04f 0200 	mov.w	r2, #0
 8008010:	f04f 0300 	mov.w	r3, #0
 8008014:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008018:	4649      	mov	r1, r9
 800801a:	008b      	lsls	r3, r1, #2
 800801c:	4641      	mov	r1, r8
 800801e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008022:	4641      	mov	r1, r8
 8008024:	008a      	lsls	r2, r1, #2
 8008026:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800802a:	f7f8 f929 	bl	8000280 <__aeabi_uldivmod>
 800802e:	4602      	mov	r2, r0
 8008030:	460b      	mov	r3, r1
 8008032:	4611      	mov	r1, r2
 8008034:	4b38      	ldr	r3, [pc, #224]	@ (8008118 <UART_SetConfig+0x4e4>)
 8008036:	fba3 2301 	umull	r2, r3, r3, r1
 800803a:	095b      	lsrs	r3, r3, #5
 800803c:	2264      	movs	r2, #100	@ 0x64
 800803e:	fb02 f303 	mul.w	r3, r2, r3
 8008042:	1acb      	subs	r3, r1, r3
 8008044:	011b      	lsls	r3, r3, #4
 8008046:	3332      	adds	r3, #50	@ 0x32
 8008048:	4a33      	ldr	r2, [pc, #204]	@ (8008118 <UART_SetConfig+0x4e4>)
 800804a:	fba2 2303 	umull	r2, r3, r2, r3
 800804e:	095b      	lsrs	r3, r3, #5
 8008050:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008054:	441c      	add	r4, r3
 8008056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800805a:	2200      	movs	r2, #0
 800805c:	673b      	str	r3, [r7, #112]	@ 0x70
 800805e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008060:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008064:	4642      	mov	r2, r8
 8008066:	464b      	mov	r3, r9
 8008068:	1891      	adds	r1, r2, r2
 800806a:	60b9      	str	r1, [r7, #8]
 800806c:	415b      	adcs	r3, r3
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008074:	4641      	mov	r1, r8
 8008076:	1851      	adds	r1, r2, r1
 8008078:	6039      	str	r1, [r7, #0]
 800807a:	4649      	mov	r1, r9
 800807c:	414b      	adcs	r3, r1
 800807e:	607b      	str	r3, [r7, #4]
 8008080:	f04f 0200 	mov.w	r2, #0
 8008084:	f04f 0300 	mov.w	r3, #0
 8008088:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800808c:	4659      	mov	r1, fp
 800808e:	00cb      	lsls	r3, r1, #3
 8008090:	4651      	mov	r1, sl
 8008092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008096:	4651      	mov	r1, sl
 8008098:	00ca      	lsls	r2, r1, #3
 800809a:	4610      	mov	r0, r2
 800809c:	4619      	mov	r1, r3
 800809e:	4603      	mov	r3, r0
 80080a0:	4642      	mov	r2, r8
 80080a2:	189b      	adds	r3, r3, r2
 80080a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80080a6:	464b      	mov	r3, r9
 80080a8:	460a      	mov	r2, r1
 80080aa:	eb42 0303 	adc.w	r3, r2, r3
 80080ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80080b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80080ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80080bc:	f04f 0200 	mov.w	r2, #0
 80080c0:	f04f 0300 	mov.w	r3, #0
 80080c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80080c8:	4649      	mov	r1, r9
 80080ca:	008b      	lsls	r3, r1, #2
 80080cc:	4641      	mov	r1, r8
 80080ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080d2:	4641      	mov	r1, r8
 80080d4:	008a      	lsls	r2, r1, #2
 80080d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80080da:	f7f8 f8d1 	bl	8000280 <__aeabi_uldivmod>
 80080de:	4602      	mov	r2, r0
 80080e0:	460b      	mov	r3, r1
 80080e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008118 <UART_SetConfig+0x4e4>)
 80080e4:	fba3 1302 	umull	r1, r3, r3, r2
 80080e8:	095b      	lsrs	r3, r3, #5
 80080ea:	2164      	movs	r1, #100	@ 0x64
 80080ec:	fb01 f303 	mul.w	r3, r1, r3
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	011b      	lsls	r3, r3, #4
 80080f4:	3332      	adds	r3, #50	@ 0x32
 80080f6:	4a08      	ldr	r2, [pc, #32]	@ (8008118 <UART_SetConfig+0x4e4>)
 80080f8:	fba2 2303 	umull	r2, r3, r2, r3
 80080fc:	095b      	lsrs	r3, r3, #5
 80080fe:	f003 020f 	and.w	r2, r3, #15
 8008102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4422      	add	r2, r4
 800810a:	609a      	str	r2, [r3, #8]
}
 800810c:	bf00      	nop
 800810e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008112:	46bd      	mov	sp, r7
 8008114:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008118:	51eb851f 	.word	0x51eb851f

0800811c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 800811c:	b480      	push	{r7}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	6812      	ldr	r2, [r2, #0]
 8008134:	f023 0101 	bic.w	r1, r3, #1
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	2b08      	cmp	r3, #8
 8008144:	d102      	bne.n	800814c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008146:	2340      	movs	r3, #64	@ 0x40
 8008148:	617b      	str	r3, [r7, #20]
 800814a:	e001      	b.n	8008150 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800814c:	2300      	movs	r3, #0
 800814e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800815c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008162:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008168:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800816e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8008174:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800817a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8008180:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8008186:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 800818c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8008192:	4313      	orrs	r3, r2
 8008194:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	4313      	orrs	r3, r2
 800819e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80081aa:	4b10      	ldr	r3, [pc, #64]	@ (80081ec <FSMC_NORSRAM_Init+0xd0>)
 80081ac:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80081b4:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80081bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	43db      	mvns	r3, r3
 80081cc:	ea02 0103 	and.w	r1, r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	4319      	orrs	r1, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	371c      	adds	r7, #28
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	0008fb7f 	.word	0x0008fb7f

080081f0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8008206:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 800820e:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8008216:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	3b01      	subs	r3, #1
 800821e:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8008220:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	3b02      	subs	r3, #2
 8008228:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 800822a:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8008236:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
 8008258:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008260:	d11d      	bne.n	800829e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800826a:	4b13      	ldr	r3, [pc, #76]	@ (80082b8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800826c:	4013      	ands	r3, r2
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	6811      	ldr	r1, [r2, #0]
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	6852      	ldr	r2, [r2, #4]
 8008276:	0112      	lsls	r2, r2, #4
 8008278:	4311      	orrs	r1, r2
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	6892      	ldr	r2, [r2, #8]
 800827e:	0212      	lsls	r2, r2, #8
 8008280:	4311      	orrs	r1, r2
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	6992      	ldr	r2, [r2, #24]
 8008286:	4311      	orrs	r1, r2
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	68d2      	ldr	r2, [r2, #12]
 800828c:	0412      	lsls	r2, r2, #16
 800828e:	430a      	orrs	r2, r1
 8008290:	ea43 0102 	orr.w	r1, r3, r2
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800829c:	e005      	b.n	80082aa <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80082a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr
 80082b8:	cff00000 	.word	0xcff00000

080082bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082bc:	b084      	sub	sp, #16
 80082be:	b580      	push	{r7, lr}
 80082c0:	b084      	sub	sp, #16
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	f107 001c 	add.w	r0, r7, #28
 80082ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082ce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d123      	bne.n	800831e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80082ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80082fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008302:	2b01      	cmp	r3, #1
 8008304:	d105      	bne.n	8008312 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f001 fae8 	bl	80098e8 <USB_CoreReset>
 8008318:	4603      	mov	r3, r0
 800831a:	73fb      	strb	r3, [r7, #15]
 800831c:	e01b      	b.n	8008356 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f001 fadc 	bl	80098e8 <USB_CoreReset>
 8008330:	4603      	mov	r3, r0
 8008332:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008334:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008338:	2b00      	cmp	r3, #0
 800833a:	d106      	bne.n	800834a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008340:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	639a      	str	r2, [r3, #56]	@ 0x38
 8008348:	e005      	b.n	8008356 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800834e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008356:	7fbb      	ldrb	r3, [r7, #30]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d10b      	bne.n	8008374 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	f043 0206 	orr.w	r2, r3, #6
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f043 0220 	orr.w	r2, r3, #32
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008374:	7bfb      	ldrb	r3, [r7, #15]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008380:	b004      	add	sp, #16
 8008382:	4770      	bx	lr

08008384 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008384:	b480      	push	{r7}
 8008386:	b087      	sub	sp, #28
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	4613      	mov	r3, r2
 8008390:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008392:	79fb      	ldrb	r3, [r7, #7]
 8008394:	2b02      	cmp	r3, #2
 8008396:	d165      	bne.n	8008464 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	4a41      	ldr	r2, [pc, #260]	@ (80084a0 <USB_SetTurnaroundTime+0x11c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d906      	bls.n	80083ae <USB_SetTurnaroundTime+0x2a>
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	4a40      	ldr	r2, [pc, #256]	@ (80084a4 <USB_SetTurnaroundTime+0x120>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d202      	bcs.n	80083ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80083a8:	230f      	movs	r3, #15
 80083aa:	617b      	str	r3, [r7, #20]
 80083ac:	e062      	b.n	8008474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	4a3c      	ldr	r2, [pc, #240]	@ (80084a4 <USB_SetTurnaroundTime+0x120>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d306      	bcc.n	80083c4 <USB_SetTurnaroundTime+0x40>
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	4a3b      	ldr	r2, [pc, #236]	@ (80084a8 <USB_SetTurnaroundTime+0x124>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d202      	bcs.n	80083c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80083be:	230e      	movs	r3, #14
 80083c0:	617b      	str	r3, [r7, #20]
 80083c2:	e057      	b.n	8008474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	4a38      	ldr	r2, [pc, #224]	@ (80084a8 <USB_SetTurnaroundTime+0x124>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d306      	bcc.n	80083da <USB_SetTurnaroundTime+0x56>
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	4a37      	ldr	r2, [pc, #220]	@ (80084ac <USB_SetTurnaroundTime+0x128>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d202      	bcs.n	80083da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80083d4:	230d      	movs	r3, #13
 80083d6:	617b      	str	r3, [r7, #20]
 80083d8:	e04c      	b.n	8008474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	4a33      	ldr	r2, [pc, #204]	@ (80084ac <USB_SetTurnaroundTime+0x128>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d306      	bcc.n	80083f0 <USB_SetTurnaroundTime+0x6c>
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	4a32      	ldr	r2, [pc, #200]	@ (80084b0 <USB_SetTurnaroundTime+0x12c>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d802      	bhi.n	80083f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80083ea:	230c      	movs	r3, #12
 80083ec:	617b      	str	r3, [r7, #20]
 80083ee:	e041      	b.n	8008474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	4a2f      	ldr	r2, [pc, #188]	@ (80084b0 <USB_SetTurnaroundTime+0x12c>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d906      	bls.n	8008406 <USB_SetTurnaroundTime+0x82>
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	4a2e      	ldr	r2, [pc, #184]	@ (80084b4 <USB_SetTurnaroundTime+0x130>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d802      	bhi.n	8008406 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008400:	230b      	movs	r3, #11
 8008402:	617b      	str	r3, [r7, #20]
 8008404:	e036      	b.n	8008474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	4a2a      	ldr	r2, [pc, #168]	@ (80084b4 <USB_SetTurnaroundTime+0x130>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d906      	bls.n	800841c <USB_SetTurnaroundTime+0x98>
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	4a29      	ldr	r2, [pc, #164]	@ (80084b8 <USB_SetTurnaroundTime+0x134>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d802      	bhi.n	800841c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008416:	230a      	movs	r3, #10
 8008418:	617b      	str	r3, [r7, #20]
 800841a:	e02b      	b.n	8008474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	4a26      	ldr	r2, [pc, #152]	@ (80084b8 <USB_SetTurnaroundTime+0x134>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d906      	bls.n	8008432 <USB_SetTurnaroundTime+0xae>
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	4a25      	ldr	r2, [pc, #148]	@ (80084bc <USB_SetTurnaroundTime+0x138>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d202      	bcs.n	8008432 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800842c:	2309      	movs	r3, #9
 800842e:	617b      	str	r3, [r7, #20]
 8008430:	e020      	b.n	8008474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	4a21      	ldr	r2, [pc, #132]	@ (80084bc <USB_SetTurnaroundTime+0x138>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d306      	bcc.n	8008448 <USB_SetTurnaroundTime+0xc4>
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	4a20      	ldr	r2, [pc, #128]	@ (80084c0 <USB_SetTurnaroundTime+0x13c>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d802      	bhi.n	8008448 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008442:	2308      	movs	r3, #8
 8008444:	617b      	str	r3, [r7, #20]
 8008446:	e015      	b.n	8008474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	4a1d      	ldr	r2, [pc, #116]	@ (80084c0 <USB_SetTurnaroundTime+0x13c>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d906      	bls.n	800845e <USB_SetTurnaroundTime+0xda>
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	4a1c      	ldr	r2, [pc, #112]	@ (80084c4 <USB_SetTurnaroundTime+0x140>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d202      	bcs.n	800845e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008458:	2307      	movs	r3, #7
 800845a:	617b      	str	r3, [r7, #20]
 800845c:	e00a      	b.n	8008474 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800845e:	2306      	movs	r3, #6
 8008460:	617b      	str	r3, [r7, #20]
 8008462:	e007      	b.n	8008474 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008464:	79fb      	ldrb	r3, [r7, #7]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d102      	bne.n	8008470 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800846a:	2309      	movs	r3, #9
 800846c:	617b      	str	r3, [r7, #20]
 800846e:	e001      	b.n	8008474 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008470:	2309      	movs	r3, #9
 8008472:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	68da      	ldr	r2, [r3, #12]
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	029b      	lsls	r3, r3, #10
 8008488:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800848c:	431a      	orrs	r2, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	371c      	adds	r7, #28
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	00d8acbf 	.word	0x00d8acbf
 80084a4:	00e4e1c0 	.word	0x00e4e1c0
 80084a8:	00f42400 	.word	0x00f42400
 80084ac:	01067380 	.word	0x01067380
 80084b0:	011a499f 	.word	0x011a499f
 80084b4:	01312cff 	.word	0x01312cff
 80084b8:	014ca43f 	.word	0x014ca43f
 80084bc:	016e3600 	.word	0x016e3600
 80084c0:	01a6ab1f 	.word	0x01a6ab1f
 80084c4:	01e84800 	.word	0x01e84800

080084c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f043 0201 	orr.w	r2, r3, #1
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	370c      	adds	r7, #12
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b083      	sub	sp, #12
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f023 0201 	bic.w	r2, r3, #1
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	460b      	mov	r3, r1
 8008516:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008528:	78fb      	ldrb	r3, [r7, #3]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d115      	bne.n	800855a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800853a:	200a      	movs	r0, #10
 800853c:	f7fb fa2a 	bl	8003994 <HAL_Delay>
      ms += 10U;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	330a      	adds	r3, #10
 8008544:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f001 f93f 	bl	80097ca <USB_GetMode>
 800854c:	4603      	mov	r3, r0
 800854e:	2b01      	cmp	r3, #1
 8008550:	d01e      	beq.n	8008590 <USB_SetCurrentMode+0x84>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2bc7      	cmp	r3, #199	@ 0xc7
 8008556:	d9f0      	bls.n	800853a <USB_SetCurrentMode+0x2e>
 8008558:	e01a      	b.n	8008590 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800855a:	78fb      	ldrb	r3, [r7, #3]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d115      	bne.n	800858c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800856c:	200a      	movs	r0, #10
 800856e:	f7fb fa11 	bl	8003994 <HAL_Delay>
      ms += 10U;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	330a      	adds	r3, #10
 8008576:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f001 f926 	bl	80097ca <USB_GetMode>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <USB_SetCurrentMode+0x84>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2bc7      	cmp	r3, #199	@ 0xc7
 8008588:	d9f0      	bls.n	800856c <USB_SetCurrentMode+0x60>
 800858a:	e001      	b.n	8008590 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e005      	b.n	800859c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2bc8      	cmp	r3, #200	@ 0xc8
 8008594:	d101      	bne.n	800859a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e000      	b.n	800859c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085a4:	b084      	sub	sp, #16
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b086      	sub	sp, #24
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80085b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80085be:	2300      	movs	r3, #0
 80085c0:	613b      	str	r3, [r7, #16]
 80085c2:	e009      	b.n	80085d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	3340      	adds	r3, #64	@ 0x40
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4413      	add	r3, r2
 80085ce:	2200      	movs	r2, #0
 80085d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	3301      	adds	r3, #1
 80085d6:	613b      	str	r3, [r7, #16]
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	2b0e      	cmp	r3, #14
 80085dc:	d9f2      	bls.n	80085c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80085de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d11c      	bne.n	8008620 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085f4:	f043 0302 	orr.w	r3, r3, #2
 80085f8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800860a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008616:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	639a      	str	r2, [r3, #56]	@ 0x38
 800861e:	e00b      	b.n	8008638 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008624:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008630:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800863e:	461a      	mov	r2, r3
 8008640:	2300      	movs	r3, #0
 8008642:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008644:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008648:	2b01      	cmp	r3, #1
 800864a:	d10d      	bne.n	8008668 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800864c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008650:	2b00      	cmp	r3, #0
 8008652:	d104      	bne.n	800865e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008654:	2100      	movs	r1, #0
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f968 	bl	800892c <USB_SetDevSpeed>
 800865c:	e008      	b.n	8008670 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800865e:	2101      	movs	r1, #1
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f963 	bl	800892c <USB_SetDevSpeed>
 8008666:	e003      	b.n	8008670 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008668:	2103      	movs	r1, #3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f95e 	bl	800892c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008670:	2110      	movs	r1, #16
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f8fa 	bl	800886c <USB_FlushTxFifo>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f924 	bl	80088d0 <USB_FlushRxFifo>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008698:	461a      	mov	r2, r3
 800869a:	2300      	movs	r3, #0
 800869c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086a4:	461a      	mov	r2, r3
 80086a6:	2300      	movs	r3, #0
 80086a8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086b0:	461a      	mov	r2, r3
 80086b2:	2300      	movs	r3, #0
 80086b4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086b6:	2300      	movs	r3, #0
 80086b8:	613b      	str	r3, [r7, #16]
 80086ba:	e043      	b.n	8008744 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	015a      	lsls	r2, r3, #5
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	4413      	add	r3, r2
 80086c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086d2:	d118      	bne.n	8008706 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10a      	bne.n	80086f0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	015a      	lsls	r2, r3, #5
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	4413      	add	r3, r2
 80086e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086e6:	461a      	mov	r2, r3
 80086e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80086ec:	6013      	str	r3, [r2, #0]
 80086ee:	e013      	b.n	8008718 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086fc:	461a      	mov	r2, r3
 80086fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008702:	6013      	str	r3, [r2, #0]
 8008704:	e008      	b.n	8008718 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	4413      	add	r3, r2
 800870e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008712:	461a      	mov	r2, r3
 8008714:	2300      	movs	r3, #0
 8008716:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	4413      	add	r3, r2
 8008720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008724:	461a      	mov	r2, r3
 8008726:	2300      	movs	r3, #0
 8008728:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	015a      	lsls	r2, r3, #5
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	4413      	add	r3, r2
 8008732:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008736:	461a      	mov	r2, r3
 8008738:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800873c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	3301      	adds	r3, #1
 8008742:	613b      	str	r3, [r7, #16]
 8008744:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008748:	461a      	mov	r2, r3
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	4293      	cmp	r3, r2
 800874e:	d3b5      	bcc.n	80086bc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008750:	2300      	movs	r3, #0
 8008752:	613b      	str	r3, [r7, #16]
 8008754:	e043      	b.n	80087de <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	015a      	lsls	r2, r3, #5
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	4413      	add	r3, r2
 800875e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008768:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800876c:	d118      	bne.n	80087a0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10a      	bne.n	800878a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	015a      	lsls	r2, r3, #5
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	4413      	add	r3, r2
 800877c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008780:	461a      	mov	r2, r3
 8008782:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	e013      	b.n	80087b2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	4413      	add	r3, r2
 8008792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008796:	461a      	mov	r2, r3
 8008798:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800879c:	6013      	str	r3, [r2, #0]
 800879e:	e008      	b.n	80087b2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087ac:	461a      	mov	r2, r3
 80087ae:	2300      	movs	r3, #0
 80087b0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	015a      	lsls	r2, r3, #5
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	4413      	add	r3, r2
 80087ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087be:	461a      	mov	r2, r3
 80087c0:	2300      	movs	r3, #0
 80087c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087d0:	461a      	mov	r2, r3
 80087d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80087d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	3301      	adds	r3, #1
 80087dc:	613b      	str	r3, [r7, #16]
 80087de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80087e2:	461a      	mov	r2, r3
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d3b5      	bcc.n	8008756 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087fc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800880a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800880c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008810:	2b00      	cmp	r3, #0
 8008812:	d105      	bne.n	8008820 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	f043 0210 	orr.w	r2, r3, #16
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	699a      	ldr	r2, [r3, #24]
 8008824:	4b10      	ldr	r3, [pc, #64]	@ (8008868 <USB_DevInit+0x2c4>)
 8008826:	4313      	orrs	r3, r2
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800882c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008830:	2b00      	cmp	r3, #0
 8008832:	d005      	beq.n	8008840 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	f043 0208 	orr.w	r2, r3, #8
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008840:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008844:	2b01      	cmp	r3, #1
 8008846:	d107      	bne.n	8008858 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008850:	f043 0304 	orr.w	r3, r3, #4
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008858:	7dfb      	ldrb	r3, [r7, #23]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3718      	adds	r7, #24
 800885e:	46bd      	mov	sp, r7
 8008860:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008864:	b004      	add	sp, #16
 8008866:	4770      	bx	lr
 8008868:	803c3800 	.word	0x803c3800

0800886c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008876:	2300      	movs	r3, #0
 8008878:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3301      	adds	r3, #1
 800887e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008886:	d901      	bls.n	800888c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e01b      	b.n	80088c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	daf2      	bge.n	800887a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	019b      	lsls	r3, r3, #6
 800889c:	f043 0220 	orr.w	r2, r3, #32
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3301      	adds	r3, #1
 80088a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088b0:	d901      	bls.n	80088b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e006      	b.n	80088c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	f003 0320 	and.w	r3, r3, #32
 80088be:	2b20      	cmp	r3, #32
 80088c0:	d0f0      	beq.n	80088a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088d8:	2300      	movs	r3, #0
 80088da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	3301      	adds	r3, #1
 80088e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088e8:	d901      	bls.n	80088ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e018      	b.n	8008920 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	daf2      	bge.n	80088dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80088f6:	2300      	movs	r3, #0
 80088f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2210      	movs	r2, #16
 80088fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	3301      	adds	r3, #1
 8008904:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800890c:	d901      	bls.n	8008912 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e006      	b.n	8008920 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	f003 0310 	and.w	r3, r3, #16
 800891a:	2b10      	cmp	r3, #16
 800891c:	d0f0      	beq.n	8008900 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3714      	adds	r7, #20
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	78fb      	ldrb	r3, [r7, #3]
 8008946:	68f9      	ldr	r1, [r7, #12]
 8008948:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800894c:	4313      	orrs	r3, r2
 800894e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800895e:	b480      	push	{r7}
 8008960:	b087      	sub	sp, #28
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f003 0306 	and.w	r3, r3, #6
 8008976:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d102      	bne.n	8008984 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800897e:	2300      	movs	r3, #0
 8008980:	75fb      	strb	r3, [r7, #23]
 8008982:	e00a      	b.n	800899a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2b02      	cmp	r3, #2
 8008988:	d002      	beq.n	8008990 <USB_GetDevSpeed+0x32>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2b06      	cmp	r3, #6
 800898e:	d102      	bne.n	8008996 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008990:	2302      	movs	r3, #2
 8008992:	75fb      	strb	r3, [r7, #23]
 8008994:	e001      	b.n	800899a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008996:	230f      	movs	r3, #15
 8008998:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800899a:	7dfb      	ldrb	r3, [r7, #23]
}
 800899c:	4618      	mov	r0, r3
 800899e:	371c      	adds	r7, #28
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	785b      	ldrb	r3, [r3, #1]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d13a      	bne.n	8008a3a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ca:	69da      	ldr	r2, [r3, #28]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	f003 030f 	and.w	r3, r3, #15
 80089d4:	2101      	movs	r1, #1
 80089d6:	fa01 f303 	lsl.w	r3, r1, r3
 80089da:	b29b      	uxth	r3, r3
 80089dc:	68f9      	ldr	r1, [r7, #12]
 80089de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089e2:	4313      	orrs	r3, r2
 80089e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	015a      	lsls	r2, r3, #5
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	4413      	add	r3, r2
 80089ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d155      	bne.n	8008aa8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	791b      	ldrb	r3, [r3, #4]
 8008a16:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a18:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	059b      	lsls	r3, r3, #22
 8008a1e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a20:	4313      	orrs	r3, r2
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	0151      	lsls	r1, r2, #5
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	440a      	add	r2, r1
 8008a2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	e036      	b.n	8008aa8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a40:	69da      	ldr	r2, [r3, #28]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	f003 030f 	and.w	r3, r3, #15
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a50:	041b      	lsls	r3, r3, #16
 8008a52:	68f9      	ldr	r1, [r7, #12]
 8008a54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	015a      	lsls	r2, r3, #5
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	4413      	add	r3, r2
 8008a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d11a      	bne.n	8008aa8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	791b      	ldrb	r3, [r3, #4]
 8008a8c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a8e:	430b      	orrs	r3, r1
 8008a90:	4313      	orrs	r3, r2
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	0151      	lsls	r1, r2, #5
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	440a      	add	r2, r1
 8008a9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008aa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008aa6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
	...

08008ab8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	785b      	ldrb	r3, [r3, #1]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d161      	bne.n	8008b98 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	015a      	lsls	r2, r3, #5
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	4413      	add	r3, r2
 8008adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008aea:	d11f      	bne.n	8008b2c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	0151      	lsls	r1, r2, #5
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	440a      	add	r2, r1
 8008b02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b06:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008b0a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	015a      	lsls	r2, r3, #5
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	0151      	lsls	r1, r2, #5
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	440a      	add	r2, r1
 8008b22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	f003 030f 	and.w	r3, r3, #15
 8008b3c:	2101      	movs	r1, #1
 8008b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	43db      	mvns	r3, r3
 8008b46:	68f9      	ldr	r1, [r7, #12]
 8008b48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b4c:	4013      	ands	r3, r2
 8008b4e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b56:	69da      	ldr	r2, [r3, #28]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	f003 030f 	and.w	r3, r3, #15
 8008b60:	2101      	movs	r1, #1
 8008b62:	fa01 f303 	lsl.w	r3, r1, r3
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	43db      	mvns	r3, r3
 8008b6a:	68f9      	ldr	r1, [r7, #12]
 8008b6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b70:	4013      	ands	r3, r2
 8008b72:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	015a      	lsls	r2, r3, #5
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	0159      	lsls	r1, r3, #5
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	440b      	add	r3, r1
 8008b8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b8e:	4619      	mov	r1, r3
 8008b90:	4b35      	ldr	r3, [pc, #212]	@ (8008c68 <USB_DeactivateEndpoint+0x1b0>)
 8008b92:	4013      	ands	r3, r2
 8008b94:	600b      	str	r3, [r1, #0]
 8008b96:	e060      	b.n	8008c5a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	015a      	lsls	r2, r3, #5
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008baa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008bae:	d11f      	bne.n	8008bf0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	015a      	lsls	r2, r3, #5
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	0151      	lsls	r1, r2, #5
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	440a      	add	r2, r1
 8008bc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008bce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	0151      	lsls	r1, r2, #5
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	440a      	add	r2, r1
 8008be6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008bee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bf6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	f003 030f 	and.w	r3, r3, #15
 8008c00:	2101      	movs	r1, #1
 8008c02:	fa01 f303 	lsl.w	r3, r1, r3
 8008c06:	041b      	lsls	r3, r3, #16
 8008c08:	43db      	mvns	r3, r3
 8008c0a:	68f9      	ldr	r1, [r7, #12]
 8008c0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c10:	4013      	ands	r3, r2
 8008c12:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c1a:	69da      	ldr	r2, [r3, #28]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	f003 030f 	and.w	r3, r3, #15
 8008c24:	2101      	movs	r1, #1
 8008c26:	fa01 f303 	lsl.w	r3, r1, r3
 8008c2a:	041b      	lsls	r3, r3, #16
 8008c2c:	43db      	mvns	r3, r3
 8008c2e:	68f9      	ldr	r1, [r7, #12]
 8008c30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c34:	4013      	ands	r3, r2
 8008c36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	015a      	lsls	r2, r3, #5
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	4413      	add	r3, r2
 8008c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	0159      	lsls	r1, r3, #5
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	440b      	add	r3, r1
 8008c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c52:	4619      	mov	r1, r3
 8008c54:	4b05      	ldr	r3, [pc, #20]	@ (8008c6c <USB_DeactivateEndpoint+0x1b4>)
 8008c56:	4013      	ands	r3, r2
 8008c58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr
 8008c68:	ec337800 	.word	0xec337800
 8008c6c:	eff37800 	.word	0xeff37800

08008c70 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b08a      	sub	sp, #40	@ 0x28
 8008c74:	af02      	add	r7, sp, #8
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	785b      	ldrb	r3, [r3, #1]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	f040 817f 	bne.w	8008f90 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d132      	bne.n	8008d00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	015a      	lsls	r2, r3, #5
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	0151      	lsls	r1, r2, #5
 8008cac:	69fa      	ldr	r2, [r7, #28]
 8008cae:	440a      	add	r2, r1
 8008cb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cb4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008cb8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008cbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	015a      	lsls	r2, r3, #5
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	0151      	lsls	r1, r2, #5
 8008cd0:	69fa      	ldr	r2, [r7, #28]
 8008cd2:	440a      	add	r2, r1
 8008cd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008cdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	0151      	lsls	r1, r2, #5
 8008cf0:	69fa      	ldr	r2, [r7, #28]
 8008cf2:	440a      	add	r2, r1
 8008cf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cf8:	0cdb      	lsrs	r3, r3, #19
 8008cfa:	04db      	lsls	r3, r3, #19
 8008cfc:	6113      	str	r3, [r2, #16]
 8008cfe:	e097      	b.n	8008e30 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	0151      	lsls	r1, r2, #5
 8008d12:	69fa      	ldr	r2, [r7, #28]
 8008d14:	440a      	add	r2, r1
 8008d16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d1a:	0cdb      	lsrs	r3, r3, #19
 8008d1c:	04db      	lsls	r3, r3, #19
 8008d1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	015a      	lsls	r2, r3, #5
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	4413      	add	r3, r2
 8008d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	69ba      	ldr	r2, [r7, #24]
 8008d30:	0151      	lsls	r1, r2, #5
 8008d32:	69fa      	ldr	r2, [r7, #28]
 8008d34:	440a      	add	r2, r1
 8008d36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d3a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008d3e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008d42:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d11a      	bne.n	8008d80 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	691a      	ldr	r2, [r3, #16]
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d903      	bls.n	8008d5e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	689a      	ldr	r2, [r3, #8]
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	015a      	lsls	r2, r3, #5
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	4413      	add	r3, r2
 8008d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	0151      	lsls	r1, r2, #5
 8008d70:	69fa      	ldr	r2, [r7, #28]
 8008d72:	440a      	add	r2, r1
 8008d74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d7c:	6113      	str	r3, [r2, #16]
 8008d7e:	e044      	b.n	8008e0a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	691a      	ldr	r2, [r3, #16]
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	4413      	add	r3, r2
 8008d8a:	1e5a      	subs	r2, r3, #1
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d94:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	015a      	lsls	r2, r3, #5
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008da2:	691a      	ldr	r2, [r3, #16]
 8008da4:	8afb      	ldrh	r3, [r7, #22]
 8008da6:	04d9      	lsls	r1, r3, #19
 8008da8:	4ba4      	ldr	r3, [pc, #656]	@ (800903c <USB_EPStartXfer+0x3cc>)
 8008daa:	400b      	ands	r3, r1
 8008dac:	69b9      	ldr	r1, [r7, #24]
 8008dae:	0148      	lsls	r0, r1, #5
 8008db0:	69f9      	ldr	r1, [r7, #28]
 8008db2:	4401      	add	r1, r0
 8008db4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008db8:	4313      	orrs	r3, r2
 8008dba:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	791b      	ldrb	r3, [r3, #4]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d122      	bne.n	8008e0a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	015a      	lsls	r2, r3, #5
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	69ba      	ldr	r2, [r7, #24]
 8008dd4:	0151      	lsls	r1, r2, #5
 8008dd6:	69fa      	ldr	r2, [r7, #28]
 8008dd8:	440a      	add	r2, r1
 8008dda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dde:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008de2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	015a      	lsls	r2, r3, #5
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	4413      	add	r3, r2
 8008dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008df0:	691a      	ldr	r2, [r3, #16]
 8008df2:	8afb      	ldrh	r3, [r7, #22]
 8008df4:	075b      	lsls	r3, r3, #29
 8008df6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008dfa:	69b9      	ldr	r1, [r7, #24]
 8008dfc:	0148      	lsls	r0, r1, #5
 8008dfe:	69f9      	ldr	r1, [r7, #28]
 8008e00:	4401      	add	r1, r0
 8008e02:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008e06:	4313      	orrs	r3, r2
 8008e08:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	015a      	lsls	r2, r3, #5
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	4413      	add	r3, r2
 8008e12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e16:	691a      	ldr	r2, [r3, #16]
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e20:	69b9      	ldr	r1, [r7, #24]
 8008e22:	0148      	lsls	r0, r1, #5
 8008e24:	69f9      	ldr	r1, [r7, #28]
 8008e26:	4401      	add	r1, r0
 8008e28:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008e30:	79fb      	ldrb	r3, [r7, #7]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d14b      	bne.n	8008ece <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	69db      	ldr	r3, [r3, #28]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d009      	beq.n	8008e52 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	015a      	lsls	r2, r3, #5
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	4413      	add	r3, r2
 8008e46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	69db      	ldr	r3, [r3, #28]
 8008e50:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	791b      	ldrb	r3, [r3, #4]
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d128      	bne.n	8008eac <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d110      	bne.n	8008e8c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	015a      	lsls	r2, r3, #5
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	4413      	add	r3, r2
 8008e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	69ba      	ldr	r2, [r7, #24]
 8008e7a:	0151      	lsls	r1, r2, #5
 8008e7c:	69fa      	ldr	r2, [r7, #28]
 8008e7e:	440a      	add	r2, r1
 8008e80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008e88:	6013      	str	r3, [r2, #0]
 8008e8a:	e00f      	b.n	8008eac <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	015a      	lsls	r2, r3, #5
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	4413      	add	r3, r2
 8008e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	69ba      	ldr	r2, [r7, #24]
 8008e9c:	0151      	lsls	r1, r2, #5
 8008e9e:	69fa      	ldr	r2, [r7, #28]
 8008ea0:	440a      	add	r2, r1
 8008ea2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ea6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008eaa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	015a      	lsls	r2, r3, #5
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	69ba      	ldr	r2, [r7, #24]
 8008ebc:	0151      	lsls	r1, r2, #5
 8008ebe:	69fa      	ldr	r2, [r7, #28]
 8008ec0:	440a      	add	r2, r1
 8008ec2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ec6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008eca:	6013      	str	r3, [r2, #0]
 8008ecc:	e166      	b.n	800919c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	015a      	lsls	r2, r3, #5
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	69ba      	ldr	r2, [r7, #24]
 8008ede:	0151      	lsls	r1, r2, #5
 8008ee0:	69fa      	ldr	r2, [r7, #28]
 8008ee2:	440a      	add	r2, r1
 8008ee4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ee8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008eec:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	791b      	ldrb	r3, [r3, #4]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d015      	beq.n	8008f22 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 814e 	beq.w	800919c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	f003 030f 	and.w	r3, r3, #15
 8008f10:	2101      	movs	r1, #1
 8008f12:	fa01 f303 	lsl.w	r3, r1, r3
 8008f16:	69f9      	ldr	r1, [r7, #28]
 8008f18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	634b      	str	r3, [r1, #52]	@ 0x34
 8008f20:	e13c      	b.n	800919c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d110      	bne.n	8008f54 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	015a      	lsls	r2, r3, #5
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	69ba      	ldr	r2, [r7, #24]
 8008f42:	0151      	lsls	r1, r2, #5
 8008f44:	69fa      	ldr	r2, [r7, #28]
 8008f46:	440a      	add	r2, r1
 8008f48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008f50:	6013      	str	r3, [r2, #0]
 8008f52:	e00f      	b.n	8008f74 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	015a      	lsls	r2, r3, #5
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	69ba      	ldr	r2, [r7, #24]
 8008f64:	0151      	lsls	r1, r2, #5
 8008f66:	69fa      	ldr	r2, [r7, #28]
 8008f68:	440a      	add	r2, r1
 8008f6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f72:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	68d9      	ldr	r1, [r3, #12]
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	781a      	ldrb	r2, [r3, #0]
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	b298      	uxth	r0, r3
 8008f82:	79fb      	ldrb	r3, [r7, #7]
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	4603      	mov	r3, r0
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f000 f9b9 	bl	8009300 <USB_WritePacket>
 8008f8e:	e105      	b.n	800919c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	015a      	lsls	r2, r3, #5
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	4413      	add	r3, r2
 8008f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	69ba      	ldr	r2, [r7, #24]
 8008fa0:	0151      	lsls	r1, r2, #5
 8008fa2:	69fa      	ldr	r2, [r7, #28]
 8008fa4:	440a      	add	r2, r1
 8008fa6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008faa:	0cdb      	lsrs	r3, r3, #19
 8008fac:	04db      	lsls	r3, r3, #19
 8008fae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	015a      	lsls	r2, r3, #5
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	69ba      	ldr	r2, [r7, #24]
 8008fc0:	0151      	lsls	r1, r2, #5
 8008fc2:	69fa      	ldr	r2, [r7, #28]
 8008fc4:	440a      	add	r2, r1
 8008fc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008fce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008fd2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d132      	bne.n	8009040 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d003      	beq.n	8008fea <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	689a      	ldr	r2, [r3, #8]
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	689a      	ldr	r2, [r3, #8]
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	015a      	lsls	r2, r3, #5
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ffe:	691a      	ldr	r2, [r3, #16]
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	6a1b      	ldr	r3, [r3, #32]
 8009004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009008:	69b9      	ldr	r1, [r7, #24]
 800900a:	0148      	lsls	r0, r1, #5
 800900c:	69f9      	ldr	r1, [r7, #28]
 800900e:	4401      	add	r1, r0
 8009010:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009014:	4313      	orrs	r3, r2
 8009016:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	4413      	add	r3, r2
 8009020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	69ba      	ldr	r2, [r7, #24]
 8009028:	0151      	lsls	r1, r2, #5
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	440a      	add	r2, r1
 800902e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009032:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009036:	6113      	str	r3, [r2, #16]
 8009038:	e062      	b.n	8009100 <USB_EPStartXfer+0x490>
 800903a:	bf00      	nop
 800903c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d123      	bne.n	8009090 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	4413      	add	r3, r2
 8009050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009054:	691a      	ldr	r2, [r3, #16]
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800905e:	69b9      	ldr	r1, [r7, #24]
 8009060:	0148      	lsls	r0, r1, #5
 8009062:	69f9      	ldr	r1, [r7, #28]
 8009064:	4401      	add	r1, r0
 8009066:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800906a:	4313      	orrs	r3, r2
 800906c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	015a      	lsls	r2, r3, #5
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	4413      	add	r3, r2
 8009076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	69ba      	ldr	r2, [r7, #24]
 800907e:	0151      	lsls	r1, r2, #5
 8009080:	69fa      	ldr	r2, [r7, #28]
 8009082:	440a      	add	r2, r1
 8009084:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009088:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800908c:	6113      	str	r3, [r2, #16]
 800908e:	e037      	b.n	8009100 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	691a      	ldr	r2, [r3, #16]
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	4413      	add	r3, r2
 800909a:	1e5a      	subs	r2, r3, #1
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80090a4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	8afa      	ldrh	r2, [r7, #22]
 80090ac:	fb03 f202 	mul.w	r2, r3, r2
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090c0:	691a      	ldr	r2, [r3, #16]
 80090c2:	8afb      	ldrh	r3, [r7, #22]
 80090c4:	04d9      	lsls	r1, r3, #19
 80090c6:	4b38      	ldr	r3, [pc, #224]	@ (80091a8 <USB_EPStartXfer+0x538>)
 80090c8:	400b      	ands	r3, r1
 80090ca:	69b9      	ldr	r1, [r7, #24]
 80090cc:	0148      	lsls	r0, r1, #5
 80090ce:	69f9      	ldr	r1, [r7, #28]
 80090d0:	4401      	add	r1, r0
 80090d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80090d6:	4313      	orrs	r3, r2
 80090d8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	015a      	lsls	r2, r3, #5
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	4413      	add	r3, r2
 80090e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090e6:	691a      	ldr	r2, [r3, #16]
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	6a1b      	ldr	r3, [r3, #32]
 80090ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090f0:	69b9      	ldr	r1, [r7, #24]
 80090f2:	0148      	lsls	r0, r1, #5
 80090f4:	69f9      	ldr	r1, [r7, #28]
 80090f6:	4401      	add	r1, r0
 80090f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80090fc:	4313      	orrs	r3, r2
 80090fe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009100:	79fb      	ldrb	r3, [r7, #7]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d10d      	bne.n	8009122 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d009      	beq.n	8009122 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	68d9      	ldr	r1, [r3, #12]
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	4413      	add	r3, r2
 800911a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800911e:	460a      	mov	r2, r1
 8009120:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	791b      	ldrb	r3, [r3, #4]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d128      	bne.n	800917c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009136:	2b00      	cmp	r3, #0
 8009138:	d110      	bne.n	800915c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	015a      	lsls	r2, r3, #5
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	4413      	add	r3, r2
 8009142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	69ba      	ldr	r2, [r7, #24]
 800914a:	0151      	lsls	r1, r2, #5
 800914c:	69fa      	ldr	r2, [r7, #28]
 800914e:	440a      	add	r2, r1
 8009150:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009154:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009158:	6013      	str	r3, [r2, #0]
 800915a:	e00f      	b.n	800917c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	015a      	lsls	r2, r3, #5
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	4413      	add	r3, r2
 8009164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	69ba      	ldr	r2, [r7, #24]
 800916c:	0151      	lsls	r1, r2, #5
 800916e:	69fa      	ldr	r2, [r7, #28]
 8009170:	440a      	add	r2, r1
 8009172:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009176:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800917a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	015a      	lsls	r2, r3, #5
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	4413      	add	r3, r2
 8009184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	69ba      	ldr	r2, [r7, #24]
 800918c:	0151      	lsls	r1, r2, #5
 800918e:	69fa      	ldr	r2, [r7, #28]
 8009190:	440a      	add	r2, r1
 8009192:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009196:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800919a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3720      	adds	r7, #32
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	1ff80000 	.word	0x1ff80000

080091ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b087      	sub	sp, #28
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80091b6:	2300      	movs	r3, #0
 80091b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	785b      	ldrb	r3, [r3, #1]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d14a      	bne.n	8009260 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	015a      	lsls	r2, r3, #5
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	4413      	add	r3, r2
 80091d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091e2:	f040 8086 	bne.w	80092f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	7812      	ldrb	r2, [r2, #0]
 80091fa:	0151      	lsls	r1, r2, #5
 80091fc:	693a      	ldr	r2, [r7, #16]
 80091fe:	440a      	add	r2, r1
 8009200:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009204:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009208:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	4413      	add	r3, r2
 8009214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	7812      	ldrb	r2, [r2, #0]
 800921e:	0151      	lsls	r1, r2, #5
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	440a      	add	r2, r1
 8009224:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009228:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800922c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	3301      	adds	r3, #1
 8009232:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f242 7210 	movw	r2, #10000	@ 0x2710
 800923a:	4293      	cmp	r3, r2
 800923c:	d902      	bls.n	8009244 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	75fb      	strb	r3, [r7, #23]
          break;
 8009242:	e056      	b.n	80092f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	015a      	lsls	r2, r3, #5
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	4413      	add	r3, r2
 800924e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009258:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800925c:	d0e7      	beq.n	800922e <USB_EPStopXfer+0x82>
 800925e:	e048      	b.n	80092f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	015a      	lsls	r2, r3, #5
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	4413      	add	r3, r2
 800926a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009274:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009278:	d13b      	bne.n	80092f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	015a      	lsls	r2, r3, #5
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	4413      	add	r3, r2
 8009284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	7812      	ldrb	r2, [r2, #0]
 800928e:	0151      	lsls	r1, r2, #5
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	440a      	add	r2, r1
 8009294:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009298:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800929c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	7812      	ldrb	r2, [r2, #0]
 80092b2:	0151      	lsls	r1, r2, #5
 80092b4:	693a      	ldr	r2, [r7, #16]
 80092b6:	440a      	add	r2, r1
 80092b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80092c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3301      	adds	r3, #1
 80092c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d902      	bls.n	80092d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	75fb      	strb	r3, [r7, #23]
          break;
 80092d6:	e00c      	b.n	80092f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	015a      	lsls	r2, r3, #5
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	4413      	add	r3, r2
 80092e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092f0:	d0e7      	beq.n	80092c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80092f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	371c      	adds	r7, #28
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009300:	b480      	push	{r7}
 8009302:	b089      	sub	sp, #36	@ 0x24
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	4611      	mov	r1, r2
 800930c:	461a      	mov	r2, r3
 800930e:	460b      	mov	r3, r1
 8009310:	71fb      	strb	r3, [r7, #7]
 8009312:	4613      	mov	r3, r2
 8009314:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800931e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009322:	2b00      	cmp	r3, #0
 8009324:	d123      	bne.n	800936e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009326:	88bb      	ldrh	r3, [r7, #4]
 8009328:	3303      	adds	r3, #3
 800932a:	089b      	lsrs	r3, r3, #2
 800932c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800932e:	2300      	movs	r3, #0
 8009330:	61bb      	str	r3, [r7, #24]
 8009332:	e018      	b.n	8009366 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009334:	79fb      	ldrb	r3, [r7, #7]
 8009336:	031a      	lsls	r2, r3, #12
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	4413      	add	r3, r2
 800933c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009340:	461a      	mov	r2, r3
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	3301      	adds	r3, #1
 800934c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	3301      	adds	r3, #1
 8009352:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	3301      	adds	r3, #1
 8009358:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	3301      	adds	r3, #1
 800935e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	3301      	adds	r3, #1
 8009364:	61bb      	str	r3, [r7, #24]
 8009366:	69ba      	ldr	r2, [r7, #24]
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	429a      	cmp	r2, r3
 800936c:	d3e2      	bcc.n	8009334 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3724      	adds	r7, #36	@ 0x24
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800937c:	b480      	push	{r7}
 800937e:	b08b      	sub	sp, #44	@ 0x2c
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	4613      	mov	r3, r2
 8009388:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009392:	88fb      	ldrh	r3, [r7, #6]
 8009394:	089b      	lsrs	r3, r3, #2
 8009396:	b29b      	uxth	r3, r3
 8009398:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800939a:	88fb      	ldrh	r3, [r7, #6]
 800939c:	f003 0303 	and.w	r3, r3, #3
 80093a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80093a2:	2300      	movs	r3, #0
 80093a4:	623b      	str	r3, [r7, #32]
 80093a6:	e014      	b.n	80093d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80093b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b6:	3301      	adds	r3, #1
 80093b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80093ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093bc:	3301      	adds	r3, #1
 80093be:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80093c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c2:	3301      	adds	r3, #1
 80093c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80093c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c8:	3301      	adds	r3, #1
 80093ca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	3301      	adds	r3, #1
 80093d0:	623b      	str	r3, [r7, #32]
 80093d2:	6a3a      	ldr	r2, [r7, #32]
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d3e6      	bcc.n	80093a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80093da:	8bfb      	ldrh	r3, [r7, #30]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d01e      	beq.n	800941e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093ea:	461a      	mov	r2, r3
 80093ec:	f107 0310 	add.w	r3, r7, #16
 80093f0:	6812      	ldr	r2, [r2, #0]
 80093f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	6a3b      	ldr	r3, [r7, #32]
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	00db      	lsls	r3, r3, #3
 80093fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009400:	b2da      	uxtb	r2, r3
 8009402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009404:	701a      	strb	r2, [r3, #0]
      i++;
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	3301      	adds	r3, #1
 800940a:	623b      	str	r3, [r7, #32]
      pDest++;
 800940c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940e:	3301      	adds	r3, #1
 8009410:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009412:	8bfb      	ldrh	r3, [r7, #30]
 8009414:	3b01      	subs	r3, #1
 8009416:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009418:	8bfb      	ldrh	r3, [r7, #30]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1ea      	bne.n	80093f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800941e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009420:	4618      	mov	r0, r3
 8009422:	372c      	adds	r7, #44	@ 0x2c
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	785b      	ldrb	r3, [r3, #1]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d12c      	bne.n	80094a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	015a      	lsls	r2, r3, #5
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	4413      	add	r3, r2
 8009450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	db12      	blt.n	8009480 <USB_EPSetStall+0x54>
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00f      	beq.n	8009480 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	015a      	lsls	r2, r3, #5
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4413      	add	r3, r2
 8009468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	0151      	lsls	r1, r2, #5
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	440a      	add	r2, r1
 8009476:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800947a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800947e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	015a      	lsls	r2, r3, #5
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	4413      	add	r3, r2
 8009488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	0151      	lsls	r1, r2, #5
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	440a      	add	r2, r1
 8009496:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800949a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800949e:	6013      	str	r3, [r2, #0]
 80094a0:	e02b      	b.n	80094fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	015a      	lsls	r2, r3, #5
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	4413      	add	r3, r2
 80094aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	db12      	blt.n	80094da <USB_EPSetStall+0xae>
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00f      	beq.n	80094da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	015a      	lsls	r2, r3, #5
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	0151      	lsls	r1, r2, #5
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	440a      	add	r2, r1
 80094d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80094d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	015a      	lsls	r2, r3, #5
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	4413      	add	r3, r2
 80094e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	0151      	lsls	r1, r2, #5
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	440a      	add	r2, r1
 80094f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80094f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3714      	adds	r7, #20
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	785b      	ldrb	r3, [r3, #1]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d128      	bne.n	8009576 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	015a      	lsls	r2, r3, #5
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	4413      	add	r3, r2
 800952c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	0151      	lsls	r1, r2, #5
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	440a      	add	r2, r1
 800953a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800953e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009542:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	791b      	ldrb	r3, [r3, #4]
 8009548:	2b03      	cmp	r3, #3
 800954a:	d003      	beq.n	8009554 <USB_EPClearStall+0x4c>
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	791b      	ldrb	r3, [r3, #4]
 8009550:	2b02      	cmp	r3, #2
 8009552:	d138      	bne.n	80095c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	4413      	add	r3, r2
 800955c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	0151      	lsls	r1, r2, #5
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	440a      	add	r2, r1
 800956a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800956e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009572:	6013      	str	r3, [r2, #0]
 8009574:	e027      	b.n	80095c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	015a      	lsls	r2, r3, #5
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	4413      	add	r3, r2
 800957e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	0151      	lsls	r1, r2, #5
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	440a      	add	r2, r1
 800958c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009590:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009594:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	791b      	ldrb	r3, [r3, #4]
 800959a:	2b03      	cmp	r3, #3
 800959c:	d003      	beq.n	80095a6 <USB_EPClearStall+0x9e>
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	791b      	ldrb	r3, [r3, #4]
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d10f      	bne.n	80095c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	015a      	lsls	r2, r3, #5
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	4413      	add	r3, r2
 80095ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	0151      	lsls	r1, r2, #5
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	440a      	add	r2, r1
 80095bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80095f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80095f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	78fb      	ldrb	r3, [r7, #3]
 8009602:	011b      	lsls	r3, r3, #4
 8009604:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009608:	68f9      	ldr	r1, [r7, #12]
 800960a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800960e:	4313      	orrs	r3, r2
 8009610:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800963a:	f023 0303 	bic.w	r3, r3, #3
 800963e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800964e:	f023 0302 	bic.w	r3, r3, #2
 8009652:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009662:	b480      	push	{r7}
 8009664:	b085      	sub	sp, #20
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800967c:	f023 0303 	bic.w	r3, r3, #3
 8009680:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009690:	f043 0302 	orr.w	r3, r3, #2
 8009694:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3714      	adds	r7, #20
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	695b      	ldr	r3, [r3, #20]
 80096b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	4013      	ands	r3, r2
 80096ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80096bc:	68fb      	ldr	r3, [r7, #12]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b085      	sub	sp, #20
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096e6:	69db      	ldr	r3, [r3, #28]
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	4013      	ands	r3, r2
 80096ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	0c1b      	lsrs	r3, r3, #16
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80096fe:	b480      	push	{r7}
 8009700:	b085      	sub	sp, #20
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009710:	699b      	ldr	r3, [r3, #24]
 8009712:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	4013      	ands	r3, r2
 8009720:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	b29b      	uxth	r3, r3
}
 8009726:	4618      	mov	r0, r3
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009732:	b480      	push	{r7}
 8009734:	b085      	sub	sp, #20
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	460b      	mov	r3, r1
 800973c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009742:	78fb      	ldrb	r3, [r7, #3]
 8009744:	015a      	lsls	r2, r3, #5
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	4413      	add	r3, r2
 800974a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	68ba      	ldr	r2, [r7, #8]
 800975c:	4013      	ands	r3, r2
 800975e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009760:	68bb      	ldr	r3, [r7, #8]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3714      	adds	r7, #20
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800976e:	b480      	push	{r7}
 8009770:	b087      	sub	sp, #28
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	460b      	mov	r3, r1
 8009778:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800978e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009790:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009792:	78fb      	ldrb	r3, [r7, #3]
 8009794:	f003 030f 	and.w	r3, r3, #15
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	fa22 f303 	lsr.w	r3, r2, r3
 800979e:	01db      	lsls	r3, r3, #7
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80097a8:	78fb      	ldrb	r3, [r7, #3]
 80097aa:	015a      	lsls	r2, r3, #5
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	4013      	ands	r3, r2
 80097ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80097bc:	68bb      	ldr	r3, [r7, #8]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	371c      	adds	r7, #28
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr

080097ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80097ca:	b480      	push	{r7}
 80097cc:	b083      	sub	sp, #12
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	695b      	ldr	r3, [r3, #20]
 80097d6:	f003 0301 	and.w	r3, r3, #1
}
 80097da:	4618      	mov	r0, r3
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr

080097e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80097e6:	b480      	push	{r7}
 80097e8:	b085      	sub	sp, #20
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009800:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009804:	f023 0307 	bic.w	r3, r3, #7
 8009808:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800981c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800982c:	b480      	push	{r7}
 800982e:	b087      	sub	sp, #28
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	460b      	mov	r3, r1
 8009836:	607a      	str	r2, [r7, #4]
 8009838:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	333c      	adds	r3, #60	@ 0x3c
 8009842:	3304      	adds	r3, #4
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	4a26      	ldr	r2, [pc, #152]	@ (80098e4 <USB_EP0_OutStart+0xb8>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d90a      	bls.n	8009866 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800985c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009860:	d101      	bne.n	8009866 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	e037      	b.n	80098d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800986c:	461a      	mov	r2, r3
 800986e:	2300      	movs	r3, #0
 8009870:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009880:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009884:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	697a      	ldr	r2, [r7, #20]
 8009890:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009894:	f043 0318 	orr.w	r3, r3, #24
 8009898:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	697a      	ldr	r2, [r7, #20]
 80098a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098a8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80098ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80098ae:	7afb      	ldrb	r3, [r7, #11]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d10f      	bne.n	80098d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ba:	461a      	mov	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	697a      	ldr	r2, [r7, #20]
 80098ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098ce:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80098d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	371c      	adds	r7, #28
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	4f54300a 	.word	0x4f54300a

080098e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098f0:	2300      	movs	r3, #0
 80098f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	3301      	adds	r3, #1
 80098f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009900:	d901      	bls.n	8009906 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009902:	2303      	movs	r3, #3
 8009904:	e022      	b.n	800994c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	2b00      	cmp	r3, #0
 800990c:	daf2      	bge.n	80098f4 <USB_CoreReset+0xc>

  count = 10U;
 800990e:	230a      	movs	r3, #10
 8009910:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8009912:	e002      	b.n	800991a <USB_CoreReset+0x32>
  {
    count--;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	3b01      	subs	r3, #1
 8009918:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d1f9      	bne.n	8009914 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	f043 0201 	orr.w	r2, r3, #1
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	3301      	adds	r3, #1
 8009930:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009938:	d901      	bls.n	800993e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800993a:	2303      	movs	r3, #3
 800993c:	e006      	b.n	800994c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	f003 0301 	and.w	r3, r3, #1
 8009946:	2b01      	cmp	r3, #1
 8009948:	d0f0      	beq.n	800992c <USB_CoreReset+0x44>

  return HAL_OK;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3714      	adds	r7, #20
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <lwip_cdc_debug_printf>:
  * @brief  Send debug message via CDC
  * @param  msg: debug message string
  * @retval None
  */
static void lwip_cdc_debug_printf(const char *msg)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  uint8_t len = strlen(msg);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7f6 fc35 	bl	80001d0 <strlen>
 8009966:	4603      	mov	r3, r0
 8009968:	73fb      	strb	r3, [r7, #15]
  if (len > 0)
 800996a:	7bfb      	ldrb	r3, [r7, #15]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d008      	beq.n	8009982 <lwip_cdc_debug_printf+0x2a>
  {
    CDC_Transmit_FS((uint8_t*)msg, len);
 8009970:	7bfb      	ldrb	r3, [r7, #15]
 8009972:	b29b      	uxth	r3, r3
 8009974:	4619      	mov	r1, r3
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f011 fa54 	bl	801ae24 <CDC_Transmit_FS>
    HAL_Delay(1); // Small delay to ensure transmission
 800997c:	2001      	movs	r0, #1
 800997e:	f7fa f809 	bl	8003994 <HAL_Delay>
  }
}
 8009982:	bf00      	nop
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
	...

0800998c <lwip_cdc_debug_log>:
  * @param  prefix: message prefix
  * @param  msg: debug message string
  * @retval None
  */
static void lwip_cdc_debug_log(const char *prefix, const char *msg)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b0a6      	sub	sp, #152	@ 0x98
 8009990:	af02      	add	r7, sp, #8
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  char debug_buf[128];
  uint32_t tick = HAL_GetTick();
 8009996:	f7f9 fff1 	bl	800397c <HAL_GetTick>
 800999a:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
  snprintf(debug_buf, sizeof(debug_buf), "[%lu] %s: %s\r\n", tick, prefix, msg);
 800999e:	f107 000c 	add.w	r0, r7, #12
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	9301      	str	r3, [sp, #4]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099ae:	4a06      	ldr	r2, [pc, #24]	@ (80099c8 <lwip_cdc_debug_log+0x3c>)
 80099b0:	2180      	movs	r1, #128	@ 0x80
 80099b2:	f011 ffa5 	bl	801b900 <sniprintf>
  lwip_cdc_debug_printf(debug_buf);
 80099b6:	f107 030c 	add.w	r3, r7, #12
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7ff ffcc 	bl	8009958 <lwip_cdc_debug_printf>
}
 80099c0:	bf00      	nop
 80099c2:	3790      	adds	r7, #144	@ 0x90
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	0801d578 	.word	0x0801d578

080099cc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80099cc:	b5b0      	push	{r4, r5, r7, lr}
 80099ce:	b0ac      	sub	sp, #176	@ 0xb0
 80099d0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80099d2:	4bac      	ldr	r3, [pc, #688]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 80099d4:	22c0      	movs	r2, #192	@ 0xc0
 80099d6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80099d8:	4baa      	ldr	r3, [pc, #680]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 80099da:	22a8      	movs	r2, #168	@ 0xa8
 80099dc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 80099de:	4ba9      	ldr	r3, [pc, #676]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 80099e0:	220a      	movs	r2, #10
 80099e2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 88;
 80099e4:	4ba7      	ldr	r3, [pc, #668]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 80099e6:	2258      	movs	r2, #88	@ 0x58
 80099e8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80099ea:	4ba7      	ldr	r3, [pc, #668]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 80099ec:	22ff      	movs	r2, #255	@ 0xff
 80099ee:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80099f0:	4ba5      	ldr	r3, [pc, #660]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 80099f2:	22ff      	movs	r2, #255	@ 0xff
 80099f4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80099f6:	4ba4      	ldr	r3, [pc, #656]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 80099f8:	22ff      	movs	r2, #255	@ 0xff
 80099fa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80099fc:	4ba2      	ldr	r3, [pc, #648]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8009a02:	4ba2      	ldr	r3, [pc, #648]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8009a08:	4ba0      	ldr	r3, [pc, #640]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8009a0e:	4b9f      	ldr	r3, [pc, #636]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009a10:	2200      	movs	r2, #0
 8009a12:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8009a14:	4b9d      	ldr	r3, [pc, #628]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
  char ip_msg[128];
  snprintf(ip_msg, sizeof(ip_msg), "IP: %d.%d.%d.%d", IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009a1a:	4b9a      	ldr	r3, [pc, #616]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	461c      	mov	r4, r3
 8009a20:	4b98      	ldr	r3, [pc, #608]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 8009a22:	785b      	ldrb	r3, [r3, #1]
 8009a24:	461a      	mov	r2, r3
 8009a26:	4b97      	ldr	r3, [pc, #604]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 8009a28:	789b      	ldrb	r3, [r3, #2]
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	4b95      	ldr	r3, [pc, #596]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 8009a2e:	78db      	ldrb	r3, [r3, #3]
 8009a30:	f107 0020 	add.w	r0, r7, #32
 8009a34:	9302      	str	r3, [sp, #8]
 8009a36:	9101      	str	r1, [sp, #4]
 8009a38:	9200      	str	r2, [sp, #0]
 8009a3a:	4623      	mov	r3, r4
 8009a3c:	4a94      	ldr	r2, [pc, #592]	@ (8009c90 <MX_LWIP_Init+0x2c4>)
 8009a3e:	2180      	movs	r1, #128	@ 0x80
 8009a40:	f011 ff5e 	bl	801b900 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 8009a44:	f107 0320 	add.w	r3, r7, #32
 8009a48:	4619      	mov	r1, r3
 8009a4a:	4892      	ldr	r0, [pc, #584]	@ (8009c94 <MX_LWIP_Init+0x2c8>)
 8009a4c:	f7ff ff9e 	bl	800998c <lwip_cdc_debug_log>
  
  snprintf(ip_msg, sizeof(ip_msg), "Netmask: %d.%d.%d.%d", NETMASK_ADDRESS[0], NETMASK_ADDRESS[1], NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009a50:	4b8d      	ldr	r3, [pc, #564]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	461c      	mov	r4, r3
 8009a56:	4b8c      	ldr	r3, [pc, #560]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 8009a58:	785b      	ldrb	r3, [r3, #1]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	4b8a      	ldr	r3, [pc, #552]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 8009a5e:	789b      	ldrb	r3, [r3, #2]
 8009a60:	4619      	mov	r1, r3
 8009a62:	4b89      	ldr	r3, [pc, #548]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 8009a64:	78db      	ldrb	r3, [r3, #3]
 8009a66:	f107 0020 	add.w	r0, r7, #32
 8009a6a:	9302      	str	r3, [sp, #8]
 8009a6c:	9101      	str	r1, [sp, #4]
 8009a6e:	9200      	str	r2, [sp, #0]
 8009a70:	4623      	mov	r3, r4
 8009a72:	4a89      	ldr	r2, [pc, #548]	@ (8009c98 <MX_LWIP_Init+0x2cc>)
 8009a74:	2180      	movs	r1, #128	@ 0x80
 8009a76:	f011 ff43 	bl	801b900 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 8009a7a:	f107 0320 	add.w	r3, r7, #32
 8009a7e:	4619      	mov	r1, r3
 8009a80:	4884      	ldr	r0, [pc, #528]	@ (8009c94 <MX_LWIP_Init+0x2c8>)
 8009a82:	f7ff ff83 	bl	800998c <lwip_cdc_debug_log>
  
  snprintf(ip_msg, sizeof(ip_msg), "Gateway: %d.%d.%d.%d", GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009a86:	4b81      	ldr	r3, [pc, #516]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	461c      	mov	r4, r3
 8009a8c:	4b7f      	ldr	r3, [pc, #508]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009a8e:	785b      	ldrb	r3, [r3, #1]
 8009a90:	461a      	mov	r2, r3
 8009a92:	4b7e      	ldr	r3, [pc, #504]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009a94:	789b      	ldrb	r3, [r3, #2]
 8009a96:	4619      	mov	r1, r3
 8009a98:	4b7c      	ldr	r3, [pc, #496]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009a9a:	78db      	ldrb	r3, [r3, #3]
 8009a9c:	f107 0020 	add.w	r0, r7, #32
 8009aa0:	9302      	str	r3, [sp, #8]
 8009aa2:	9101      	str	r1, [sp, #4]
 8009aa4:	9200      	str	r2, [sp, #0]
 8009aa6:	4623      	mov	r3, r4
 8009aa8:	4a7c      	ldr	r2, [pc, #496]	@ (8009c9c <MX_LWIP_Init+0x2d0>)
 8009aaa:	2180      	movs	r1, #128	@ 0x80
 8009aac:	f011 ff28 	bl	801b900 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 8009ab0:	f107 0320 	add.w	r3, r7, #32
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	4877      	ldr	r0, [pc, #476]	@ (8009c94 <MX_LWIP_Init+0x2c8>)
 8009ab8:	f7ff ff68 	bl	800998c <lwip_cdc_debug_log>
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009abc:	2100      	movs	r1, #0
 8009abe:	2000      	movs	r0, #0
 8009ac0:	f006 fad2 	bl	8010068 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009ac4:	4b6f      	ldr	r3, [pc, #444]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	061a      	lsls	r2, r3, #24
 8009aca:	4b6e      	ldr	r3, [pc, #440]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 8009acc:	785b      	ldrb	r3, [r3, #1]
 8009ace:	041b      	lsls	r3, r3, #16
 8009ad0:	431a      	orrs	r2, r3
 8009ad2:	4b6c      	ldr	r3, [pc, #432]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 8009ad4:	789b      	ldrb	r3, [r3, #2]
 8009ad6:	021b      	lsls	r3, r3, #8
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	4a6a      	ldr	r2, [pc, #424]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 8009adc:	78d2      	ldrb	r2, [r2, #3]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	061a      	lsls	r2, r3, #24
 8009ae2:	4b68      	ldr	r3, [pc, #416]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	0619      	lsls	r1, r3, #24
 8009ae8:	4b66      	ldr	r3, [pc, #408]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 8009aea:	785b      	ldrb	r3, [r3, #1]
 8009aec:	041b      	lsls	r3, r3, #16
 8009aee:	4319      	orrs	r1, r3
 8009af0:	4b64      	ldr	r3, [pc, #400]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 8009af2:	789b      	ldrb	r3, [r3, #2]
 8009af4:	021b      	lsls	r3, r3, #8
 8009af6:	430b      	orrs	r3, r1
 8009af8:	4962      	ldr	r1, [pc, #392]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 8009afa:	78c9      	ldrb	r1, [r1, #3]
 8009afc:	430b      	orrs	r3, r1
 8009afe:	021b      	lsls	r3, r3, #8
 8009b00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009b04:	431a      	orrs	r2, r3
 8009b06:	4b5f      	ldr	r3, [pc, #380]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	0619      	lsls	r1, r3, #24
 8009b0c:	4b5d      	ldr	r3, [pc, #372]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 8009b0e:	785b      	ldrb	r3, [r3, #1]
 8009b10:	041b      	lsls	r3, r3, #16
 8009b12:	4319      	orrs	r1, r3
 8009b14:	4b5b      	ldr	r3, [pc, #364]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 8009b16:	789b      	ldrb	r3, [r3, #2]
 8009b18:	021b      	lsls	r3, r3, #8
 8009b1a:	430b      	orrs	r3, r1
 8009b1c:	4959      	ldr	r1, [pc, #356]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 8009b1e:	78c9      	ldrb	r1, [r1, #3]
 8009b20:	430b      	orrs	r3, r1
 8009b22:	0a1b      	lsrs	r3, r3, #8
 8009b24:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009b28:	431a      	orrs	r2, r3
 8009b2a:	4b56      	ldr	r3, [pc, #344]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	0619      	lsls	r1, r3, #24
 8009b30:	4b54      	ldr	r3, [pc, #336]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 8009b32:	785b      	ldrb	r3, [r3, #1]
 8009b34:	041b      	lsls	r3, r3, #16
 8009b36:	4319      	orrs	r1, r3
 8009b38:	4b52      	ldr	r3, [pc, #328]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 8009b3a:	789b      	ldrb	r3, [r3, #2]
 8009b3c:	021b      	lsls	r3, r3, #8
 8009b3e:	430b      	orrs	r3, r1
 8009b40:	4950      	ldr	r1, [pc, #320]	@ (8009c84 <MX_LWIP_Init+0x2b8>)
 8009b42:	78c9      	ldrb	r1, [r1, #3]
 8009b44:	430b      	orrs	r3, r1
 8009b46:	0e1b      	lsrs	r3, r3, #24
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	4a55      	ldr	r2, [pc, #340]	@ (8009ca0 <MX_LWIP_Init+0x2d4>)
 8009b4c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009b4e:	4b4e      	ldr	r3, [pc, #312]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	061a      	lsls	r2, r3, #24
 8009b54:	4b4c      	ldr	r3, [pc, #304]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 8009b56:	785b      	ldrb	r3, [r3, #1]
 8009b58:	041b      	lsls	r3, r3, #16
 8009b5a:	431a      	orrs	r2, r3
 8009b5c:	4b4a      	ldr	r3, [pc, #296]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 8009b5e:	789b      	ldrb	r3, [r3, #2]
 8009b60:	021b      	lsls	r3, r3, #8
 8009b62:	4313      	orrs	r3, r2
 8009b64:	4a48      	ldr	r2, [pc, #288]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 8009b66:	78d2      	ldrb	r2, [r2, #3]
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	061a      	lsls	r2, r3, #24
 8009b6c:	4b46      	ldr	r3, [pc, #280]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	0619      	lsls	r1, r3, #24
 8009b72:	4b45      	ldr	r3, [pc, #276]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 8009b74:	785b      	ldrb	r3, [r3, #1]
 8009b76:	041b      	lsls	r3, r3, #16
 8009b78:	4319      	orrs	r1, r3
 8009b7a:	4b43      	ldr	r3, [pc, #268]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 8009b7c:	789b      	ldrb	r3, [r3, #2]
 8009b7e:	021b      	lsls	r3, r3, #8
 8009b80:	430b      	orrs	r3, r1
 8009b82:	4941      	ldr	r1, [pc, #260]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 8009b84:	78c9      	ldrb	r1, [r1, #3]
 8009b86:	430b      	orrs	r3, r1
 8009b88:	021b      	lsls	r3, r3, #8
 8009b8a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009b8e:	431a      	orrs	r2, r3
 8009b90:	4b3d      	ldr	r3, [pc, #244]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	0619      	lsls	r1, r3, #24
 8009b96:	4b3c      	ldr	r3, [pc, #240]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 8009b98:	785b      	ldrb	r3, [r3, #1]
 8009b9a:	041b      	lsls	r3, r3, #16
 8009b9c:	4319      	orrs	r1, r3
 8009b9e:	4b3a      	ldr	r3, [pc, #232]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 8009ba0:	789b      	ldrb	r3, [r3, #2]
 8009ba2:	021b      	lsls	r3, r3, #8
 8009ba4:	430b      	orrs	r3, r1
 8009ba6:	4938      	ldr	r1, [pc, #224]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 8009ba8:	78c9      	ldrb	r1, [r1, #3]
 8009baa:	430b      	orrs	r3, r1
 8009bac:	0a1b      	lsrs	r3, r3, #8
 8009bae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009bb2:	431a      	orrs	r2, r3
 8009bb4:	4b34      	ldr	r3, [pc, #208]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	0619      	lsls	r1, r3, #24
 8009bba:	4b33      	ldr	r3, [pc, #204]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 8009bbc:	785b      	ldrb	r3, [r3, #1]
 8009bbe:	041b      	lsls	r3, r3, #16
 8009bc0:	4319      	orrs	r1, r3
 8009bc2:	4b31      	ldr	r3, [pc, #196]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 8009bc4:	789b      	ldrb	r3, [r3, #2]
 8009bc6:	021b      	lsls	r3, r3, #8
 8009bc8:	430b      	orrs	r3, r1
 8009bca:	492f      	ldr	r1, [pc, #188]	@ (8009c88 <MX_LWIP_Init+0x2bc>)
 8009bcc:	78c9      	ldrb	r1, [r1, #3]
 8009bce:	430b      	orrs	r3, r1
 8009bd0:	0e1b      	lsrs	r3, r3, #24
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	4a33      	ldr	r2, [pc, #204]	@ (8009ca4 <MX_LWIP_Init+0x2d8>)
 8009bd6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009bd8:	4b2c      	ldr	r3, [pc, #176]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	061a      	lsls	r2, r3, #24
 8009bde:	4b2b      	ldr	r3, [pc, #172]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009be0:	785b      	ldrb	r3, [r3, #1]
 8009be2:	041b      	lsls	r3, r3, #16
 8009be4:	431a      	orrs	r2, r3
 8009be6:	4b29      	ldr	r3, [pc, #164]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009be8:	789b      	ldrb	r3, [r3, #2]
 8009bea:	021b      	lsls	r3, r3, #8
 8009bec:	4313      	orrs	r3, r2
 8009bee:	4a27      	ldr	r2, [pc, #156]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009bf0:	78d2      	ldrb	r2, [r2, #3]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	061a      	lsls	r2, r3, #24
 8009bf6:	4b25      	ldr	r3, [pc, #148]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	0619      	lsls	r1, r3, #24
 8009bfc:	4b23      	ldr	r3, [pc, #140]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009bfe:	785b      	ldrb	r3, [r3, #1]
 8009c00:	041b      	lsls	r3, r3, #16
 8009c02:	4319      	orrs	r1, r3
 8009c04:	4b21      	ldr	r3, [pc, #132]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009c06:	789b      	ldrb	r3, [r3, #2]
 8009c08:	021b      	lsls	r3, r3, #8
 8009c0a:	430b      	orrs	r3, r1
 8009c0c:	491f      	ldr	r1, [pc, #124]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009c0e:	78c9      	ldrb	r1, [r1, #3]
 8009c10:	430b      	orrs	r3, r1
 8009c12:	021b      	lsls	r3, r3, #8
 8009c14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009c18:	431a      	orrs	r2, r3
 8009c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	0619      	lsls	r1, r3, #24
 8009c20:	4b1a      	ldr	r3, [pc, #104]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009c22:	785b      	ldrb	r3, [r3, #1]
 8009c24:	041b      	lsls	r3, r3, #16
 8009c26:	4319      	orrs	r1, r3
 8009c28:	4b18      	ldr	r3, [pc, #96]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009c2a:	789b      	ldrb	r3, [r3, #2]
 8009c2c:	021b      	lsls	r3, r3, #8
 8009c2e:	430b      	orrs	r3, r1
 8009c30:	4916      	ldr	r1, [pc, #88]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009c32:	78c9      	ldrb	r1, [r1, #3]
 8009c34:	430b      	orrs	r3, r1
 8009c36:	0a1b      	lsrs	r3, r3, #8
 8009c38:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009c3c:	431a      	orrs	r2, r3
 8009c3e:	4b13      	ldr	r3, [pc, #76]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	0619      	lsls	r1, r3, #24
 8009c44:	4b11      	ldr	r3, [pc, #68]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009c46:	785b      	ldrb	r3, [r3, #1]
 8009c48:	041b      	lsls	r3, r3, #16
 8009c4a:	4319      	orrs	r1, r3
 8009c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009c4e:	789b      	ldrb	r3, [r3, #2]
 8009c50:	021b      	lsls	r3, r3, #8
 8009c52:	430b      	orrs	r3, r1
 8009c54:	490d      	ldr	r1, [pc, #52]	@ (8009c8c <MX_LWIP_Init+0x2c0>)
 8009c56:	78c9      	ldrb	r1, [r1, #3]
 8009c58:	430b      	orrs	r3, r1
 8009c5a:	0e1b      	lsrs	r3, r3, #24
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	4a12      	ldr	r2, [pc, #72]	@ (8009ca8 <MX_LWIP_Init+0x2dc>)
 8009c60:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009c62:	4b12      	ldr	r3, [pc, #72]	@ (8009cac <MX_LWIP_Init+0x2e0>)
 8009c64:	9302      	str	r3, [sp, #8]
 8009c66:	4b12      	ldr	r3, [pc, #72]	@ (8009cb0 <MX_LWIP_Init+0x2e4>)
 8009c68:	9301      	str	r3, [sp, #4]
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ca8 <MX_LWIP_Init+0x2dc>)
 8009c70:	4a0c      	ldr	r2, [pc, #48]	@ (8009ca4 <MX_LWIP_Init+0x2d8>)
 8009c72:	490b      	ldr	r1, [pc, #44]	@ (8009ca0 <MX_LWIP_Init+0x2d4>)
 8009c74:	480f      	ldr	r0, [pc, #60]	@ (8009cb4 <MX_LWIP_Init+0x2e8>)
 8009c76:	f006 ffc1 	bl	8010bfc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009c7a:	480e      	ldr	r0, [pc, #56]	@ (8009cb4 <MX_LWIP_Init+0x2e8>)
 8009c7c:	f007 f970 	bl	8010f60 <netif_set_default>
 8009c80:	e01a      	b.n	8009cb8 <MX_LWIP_Init+0x2ec>
 8009c82:	bf00      	nop
 8009c84:	200007f8 	.word	0x200007f8
 8009c88:	200007fc 	.word	0x200007fc
 8009c8c:	20000800 	.word	0x20000800
 8009c90:	0801d7a0 	.word	0x0801d7a0
 8009c94:	0801d7b0 	.word	0x0801d7b0
 8009c98:	0801d7bc 	.word	0x0801d7bc
 8009c9c:	0801d7d4 	.word	0x0801d7d4
 8009ca0:	200007ec 	.word	0x200007ec
 8009ca4:	200007f0 	.word	0x200007f0
 8009ca8:	200007f4 	.word	0x200007f4
 8009cac:	0800ffa5 	.word	0x0800ffa5
 8009cb0:	0800a7f9 	.word	0x0800a7f9
 8009cb4:	200007b8 	.word	0x200007b8

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8009cb8:	4812      	ldr	r0, [pc, #72]	@ (8009d04 <MX_LWIP_Init+0x338>)
 8009cba:	f007 f961 	bl	8010f80 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009cbe:	4912      	ldr	r1, [pc, #72]	@ (8009d08 <MX_LWIP_Init+0x33c>)
 8009cc0:	4810      	ldr	r0, [pc, #64]	@ (8009d04 <MX_LWIP_Init+0x338>)
 8009cc2:	f007 fa2d 	bl	8011120 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  lwip_cdc_debug_log("LWIP_INIT", "Creating Ethernet link handler thread");
 8009cc6:	4911      	ldr	r1, [pc, #68]	@ (8009d0c <MX_LWIP_Init+0x340>)
 8009cc8:	4811      	ldr	r0, [pc, #68]	@ (8009d10 <MX_LWIP_Init+0x344>)
 8009cca:	f7ff fe5f 	bl	800998c <lwip_cdc_debug_log>
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8009cce:	4b11      	ldr	r3, [pc, #68]	@ (8009d14 <MX_LWIP_Init+0x348>)
 8009cd0:	1d3c      	adds	r4, r7, #4
 8009cd2:	461d      	mov	r5, r3
 8009cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009cd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009cdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8009ce0:	1d3b      	adds	r3, r7, #4
 8009ce2:	4908      	ldr	r1, [pc, #32]	@ (8009d04 <MX_LWIP_Init+0x338>)
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f003 f93f 	bl	800cf68 <osThreadCreate>
  lwip_cdc_debug_log("LWIP_INIT", "Ethernet link handler thread created");
 8009cea:	490b      	ldr	r1, [pc, #44]	@ (8009d18 <MX_LWIP_Init+0x34c>)
 8009cec:	4808      	ldr	r0, [pc, #32]	@ (8009d10 <MX_LWIP_Init+0x344>)
 8009cee:	f7ff fe4d 	bl	800998c <lwip_cdc_debug_log>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */
  lwip_cdc_debug_log("LWIP_INIT", "LwIP initialization completed successfully");
 8009cf2:	490a      	ldr	r1, [pc, #40]	@ (8009d1c <MX_LWIP_Init+0x350>)
 8009cf4:	4806      	ldr	r0, [pc, #24]	@ (8009d10 <MX_LWIP_Init+0x344>)
 8009cf6:	f7ff fe49 	bl	800998c <lwip_cdc_debug_log>
/* USER CODE END 3 */
}
 8009cfa:	bf00      	nop
 8009cfc:	37a0      	adds	r7, #160	@ 0xa0
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bdb0      	pop	{r4, r5, r7, pc}
 8009d02:	bf00      	nop
 8009d04:	200007b8 	.word	0x200007b8
 8009d08:	08009d21 	.word	0x08009d21
 8009d0c:	0801d7ec 	.word	0x0801d7ec
 8009d10:	0801d7b0 	.word	0x0801d7b0
 8009d14:	0801d870 	.word	0x0801d870
 8009d18:	0801d814 	.word	0x0801d814
 8009d1c:	0801d83c 	.word	0x0801d83c

08009d20 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b0a2      	sub	sp, #136	@ 0x88
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009d2e:	f003 0301 	and.w	r3, r3, #1
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d016      	beq.n	8009d66 <ethernet_link_status_updated+0x46>
  {
/* USER CODE BEGIN 5 */
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is UP");
 8009d38:	490f      	ldr	r1, [pc, #60]	@ (8009d78 <ethernet_link_status_updated+0x58>)
 8009d3a:	4810      	ldr	r0, [pc, #64]	@ (8009d7c <ethernet_link_status_updated+0x5c>)
 8009d3c:	f7ff fe26 	bl	800998c <lwip_cdc_debug_log>
    
    char status_msg[128];
    snprintf(status_msg, sizeof(status_msg), "Interface UP - IP: %s", ip4addr_ntoa(netif_ip4_addr(netif)));
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	3304      	adds	r3, #4
 8009d44:	4618      	mov	r0, r3
 8009d46:	f00f fef5 	bl	8019b34 <ip4addr_ntoa>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	f107 0008 	add.w	r0, r7, #8
 8009d50:	4a0b      	ldr	r2, [pc, #44]	@ (8009d80 <ethernet_link_status_updated+0x60>)
 8009d52:	2180      	movs	r1, #128	@ 0x80
 8009d54:	f011 fdd4 	bl	801b900 <sniprintf>
    lwip_cdc_debug_log("LINK_STATUS", status_msg);
 8009d58:	f107 0308 	add.w	r3, r7, #8
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4807      	ldr	r0, [pc, #28]	@ (8009d7c <ethernet_link_status_updated+0x5c>)
 8009d60:	f7ff fe14 	bl	800998c <lwip_cdc_debug_log>
  {
/* USER CODE BEGIN 6 */
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is DOWN");
/* USER CODE END 6 */
  }
}
 8009d64:	e003      	b.n	8009d6e <ethernet_link_status_updated+0x4e>
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is DOWN");
 8009d66:	4907      	ldr	r1, [pc, #28]	@ (8009d84 <ethernet_link_status_updated+0x64>)
 8009d68:	4804      	ldr	r0, [pc, #16]	@ (8009d7c <ethernet_link_status_updated+0x5c>)
 8009d6a:	f7ff fe0f 	bl	800998c <lwip_cdc_debug_log>
}
 8009d6e:	bf00      	nop
 8009d70:	3788      	adds	r7, #136	@ 0x88
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	0801d88c 	.word	0x0801d88c
 8009d7c:	0801d8a4 	.word	0x0801d8a4
 8009d80:	0801d8b0 	.word	0x0801d8b0
 8009d84:	0801d8c8 	.word	0x0801d8c8

08009d88 <cdc_debug_printf>:
  * @brief  Send debug message via CDC
  * @param  msg: debug message string
  * @retval None
  */
static void cdc_debug_printf(const char *msg)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  uint8_t len = strlen(msg);
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f7f6 fa1d 	bl	80001d0 <strlen>
 8009d96:	4603      	mov	r3, r0
 8009d98:	73fb      	strb	r3, [r7, #15]
  if (len > 0)
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d008      	beq.n	8009db2 <cdc_debug_printf+0x2a>
  {
    CDC_Transmit_FS((uint8_t*)msg, len);
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	4619      	mov	r1, r3
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f011 f83c 	bl	801ae24 <CDC_Transmit_FS>
    HAL_Delay(1); // Small delay to ensure transmission
 8009dac:	2001      	movs	r0, #1
 8009dae:	f7f9 fdf1 	bl	8003994 <HAL_Delay>
  }
}
 8009db2:	bf00      	nop
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
	...

08009dbc <cdc_debug_log>:
  * @param  prefix: message prefix
  * @param  msg: debug message string
  * @retval None
  */
static void cdc_debug_log(const char *prefix, const char *msg)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b0a6      	sub	sp, #152	@ 0x98
 8009dc0:	af02      	add	r7, sp, #8
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  char debug_buf[128];
  uint32_t tick = HAL_GetTick();
 8009dc6:	f7f9 fdd9 	bl	800397c <HAL_GetTick>
 8009dca:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
  snprintf(debug_buf, sizeof(debug_buf), "[%lu] %s: %s\r\n", tick, prefix, msg);
 8009dce:	f107 000c 	add.w	r0, r7, #12
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	9301      	str	r3, [sp, #4]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009dde:	4a06      	ldr	r2, [pc, #24]	@ (8009df8 <cdc_debug_log+0x3c>)
 8009de0:	2180      	movs	r1, #128	@ 0x80
 8009de2:	f011 fd8d 	bl	801b900 <sniprintf>
  cdc_debug_printf(debug_buf);
 8009de6:	f107 030c 	add.w	r3, r7, #12
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7ff ffcc 	bl	8009d88 <cdc_debug_printf>
}
 8009df0:	bf00      	nop
 8009df2:	3790      	adds	r7, #144	@ 0x90
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	0801d8e4 	.word	0x0801d8e4

08009dfc <debug_eth_dma_descriptors>:
/**
  * @brief  Debug ETH DMA descriptors
  * @retval None
  */
static void debug_eth_dma_descriptors(void)
{
 8009dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dfe:	b0cf      	sub	sp, #316	@ 0x13c
 8009e00:	af06      	add	r7, sp, #24
  char debug_msg[256];
  
  cdc_debug_log("DMA_DESC", "=== RX Descriptors Status ===");
 8009e02:	495d      	ldr	r1, [pc, #372]	@ (8009f78 <debug_eth_dma_descriptors+0x17c>)
 8009e04:	485d      	ldr	r0, [pc, #372]	@ (8009f7c <debug_eth_dma_descriptors+0x180>)
 8009e06:	f7ff ffd9 	bl	8009dbc <cdc_debug_log>
  // 检查RX描述符状态
  for(int i = 0; i < ETH_RX_DESC_CNT; i++) {
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8009e10:	e048      	b.n	8009ea4 <debug_eth_dma_descriptors+0xa8>
    uint32_t desc0 = DMARxDscrTab[i].DESC0;
 8009e12:	495b      	ldr	r1, [pc, #364]	@ (8009f80 <debug_eth_dma_descriptors+0x184>)
 8009e14:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8009e18:	4613      	mov	r3, r2
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	4413      	add	r3, r2
 8009e1e:	00db      	lsls	r3, r3, #3
 8009e20:	440b      	add	r3, r1
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    uint32_t desc2 = DMARxDscrTab[i].DESC2;
 8009e28:	4955      	ldr	r1, [pc, #340]	@ (8009f80 <debug_eth_dma_descriptors+0x184>)
 8009e2a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8009e2e:	4613      	mov	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	00db      	lsls	r3, r3, #3
 8009e36:	440b      	add	r3, r1
 8009e38:	3308      	adds	r3, #8
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    
    snprintf(debug_msg, sizeof(debug_msg),
             "RX[%d]: OWN=%lu ES=%lu FS=%lu LS=%lu FL=%lu Buf1=0x%08lX",
             i, 
             (desc0 & ETH_DMARXDESC_OWN) ? 1UL : 0UL,      // Owner bit
 8009e40:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009e44:	0fdb      	lsrs	r3, r3, #31
             (desc0 & ETH_DMARXDESC_ES) ? 1UL : 0UL,       // Error Summary
 8009e46:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8009e4a:	0bd2      	lsrs	r2, r2, #15
    snprintf(debug_msg, sizeof(debug_msg),
 8009e4c:	f002 0201 	and.w	r2, r2, #1
             (desc0 & ETH_DMARXDESC_FS) ? 1UL : 0UL,       // First Segment
 8009e50:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8009e54:	0a49      	lsrs	r1, r1, #9
    snprintf(debug_msg, sizeof(debug_msg),
 8009e56:	f001 0101 	and.w	r1, r1, #1
             (desc0 & ETH_DMARXDESC_LS) ? 1UL : 0UL,       // Last Segment
 8009e5a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8009e5e:	0a00      	lsrs	r0, r0, #8
    snprintf(debug_msg, sizeof(debug_msg),
 8009e60:	f000 0001 	and.w	r0, r0, #1
             (desc0 & ETH_DMARXDESC_FL) >> 16,             // Frame Length
 8009e64:	f8d7 4108 	ldr.w	r4, [r7, #264]	@ 0x108
 8009e68:	0c24      	lsrs	r4, r4, #16
    snprintf(debug_msg, sizeof(debug_msg),
 8009e6a:	f3c4 040d 	ubfx	r4, r4, #0, #14
 8009e6e:	1d3e      	adds	r6, r7, #4
 8009e70:	f8d7 5104 	ldr.w	r5, [r7, #260]	@ 0x104
 8009e74:	9505      	str	r5, [sp, #20]
 8009e76:	9404      	str	r4, [sp, #16]
 8009e78:	9003      	str	r0, [sp, #12]
 8009e7a:	9102      	str	r1, [sp, #8]
 8009e7c:	9201      	str	r2, [sp, #4]
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009e84:	4a3f      	ldr	r2, [pc, #252]	@ (8009f84 <debug_eth_dma_descriptors+0x188>)
 8009e86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	f011 fd38 	bl	801b900 <sniprintf>
             desc2);                                        // Buffer1 Address
    cdc_debug_log("DMA_DESC", debug_msg);
 8009e90:	1d3b      	adds	r3, r7, #4
 8009e92:	4619      	mov	r1, r3
 8009e94:	4839      	ldr	r0, [pc, #228]	@ (8009f7c <debug_eth_dma_descriptors+0x180>)
 8009e96:	f7ff ff91 	bl	8009dbc <cdc_debug_log>
  for(int i = 0; i < ETH_RX_DESC_CNT; i++) {
 8009e9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8009ea4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009ea8:	2b03      	cmp	r3, #3
 8009eaa:	d9b2      	bls.n	8009e12 <debug_eth_dma_descriptors+0x16>
  }
  
  cdc_debug_log("DMA_DESC", "=== TX Descriptors Status ===");
 8009eac:	4936      	ldr	r1, [pc, #216]	@ (8009f88 <debug_eth_dma_descriptors+0x18c>)
 8009eae:	4833      	ldr	r0, [pc, #204]	@ (8009f7c <debug_eth_dma_descriptors+0x180>)
 8009eb0:	f7ff ff84 	bl	8009dbc <cdc_debug_log>
  // 检查TX描述符状态
  for(int i = 0; i < ETH_TX_DESC_CNT; i++) {
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8009eba:	e053      	b.n	8009f64 <debug_eth_dma_descriptors+0x168>
    uint32_t desc0 = DMATxDscrTab[i].DESC0;
 8009ebc:	4933      	ldr	r1, [pc, #204]	@ (8009f8c <debug_eth_dma_descriptors+0x190>)
 8009ebe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4413      	add	r3, r2
 8009ec8:	00db      	lsls	r3, r3, #3
 8009eca:	440b      	add	r3, r1
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    uint32_t desc1 = DMATxDscrTab[i].DESC1;
 8009ed2:	492e      	ldr	r1, [pc, #184]	@ (8009f8c <debug_eth_dma_descriptors+0x190>)
 8009ed4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8009ed8:	4613      	mov	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4413      	add	r3, r2
 8009ede:	00db      	lsls	r3, r3, #3
 8009ee0:	440b      	add	r3, r1
 8009ee2:	3304      	adds	r3, #4
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    uint32_t desc2 = DMATxDscrTab[i].DESC2;
 8009eea:	4928      	ldr	r1, [pc, #160]	@ (8009f8c <debug_eth_dma_descriptors+0x190>)
 8009eec:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8009ef0:	4613      	mov	r3, r2
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	4413      	add	r3, r2
 8009ef6:	00db      	lsls	r3, r3, #3
 8009ef8:	440b      	add	r3, r1
 8009efa:	3308      	adds	r3, #8
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    
    snprintf(debug_msg, sizeof(debug_msg),
             "TX[%d]: OWN=%lu ES=%lu FS=%lu LS=%lu TBS1=%lu Buf1=0x%08lX",
             i,
             (desc0 & ETH_DMATXDESC_OWN) ? 1UL : 0UL,      // Owner bit
 8009f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f06:	0fdb      	lsrs	r3, r3, #31
             (desc0 & ETH_DMATXDESC_ES) ? 1UL : 0UL,       // Error Summary
 8009f08:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8009f0c:	0bd2      	lsrs	r2, r2, #15
    snprintf(debug_msg, sizeof(debug_msg),
 8009f0e:	f002 0201 	and.w	r2, r2, #1
             (desc0 & ETH_DMATXDESC_FS) ? 1UL : 0UL,       // First Segment
 8009f12:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8009f16:	0f09      	lsrs	r1, r1, #28
    snprintf(debug_msg, sizeof(debug_msg),
 8009f18:	f001 0101 	and.w	r1, r1, #1
             (desc0 & ETH_DMATXDESC_LS) ? 1UL : 0UL,       // Last Segment
 8009f1c:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8009f20:	0f40      	lsrs	r0, r0, #29
    snprintf(debug_msg, sizeof(debug_msg),
 8009f22:	f000 0001 	and.w	r0, r0, #1
 8009f26:	f8d7 4110 	ldr.w	r4, [r7, #272]	@ 0x110
 8009f2a:	f3c4 040c 	ubfx	r4, r4, #0, #13
 8009f2e:	1d3e      	adds	r6, r7, #4
 8009f30:	f8d7 510c 	ldr.w	r5, [r7, #268]	@ 0x10c
 8009f34:	9505      	str	r5, [sp, #20]
 8009f36:	9404      	str	r4, [sp, #16]
 8009f38:	9003      	str	r0, [sp, #12]
 8009f3a:	9102      	str	r1, [sp, #8]
 8009f3c:	9201      	str	r2, [sp, #4]
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009f44:	4a12      	ldr	r2, [pc, #72]	@ (8009f90 <debug_eth_dma_descriptors+0x194>)
 8009f46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f011 fcd8 	bl	801b900 <sniprintf>
             desc1 & ETH_DMATXDESC_TBS1,                   // Transmit Buffer1 Size
             desc2);                                        // Buffer1 Address
    cdc_debug_log("DMA_DESC", debug_msg);
 8009f50:	1d3b      	adds	r3, r7, #4
 8009f52:	4619      	mov	r1, r3
 8009f54:	4809      	ldr	r0, [pc, #36]	@ (8009f7c <debug_eth_dma_descriptors+0x180>)
 8009f56:	f7ff ff31 	bl	8009dbc <cdc_debug_log>
  for(int i = 0; i < ETH_TX_DESC_CNT; i++) {
 8009f5a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009f5e:	3301      	adds	r3, #1
 8009f60:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8009f64:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009f68:	2b03      	cmp	r3, #3
 8009f6a:	d9a7      	bls.n	8009ebc <debug_eth_dma_descriptors+0xc0>
  }
}
 8009f6c:	bf00      	nop
 8009f6e:	bf00      	nop
 8009f70:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f78:	0801d9c4 	.word	0x0801d9c4
 8009f7c:	0801d9e4 	.word	0x0801d9e4
 8009f80:	20005190 	.word	0x20005190
 8009f84:	0801d9f0 	.word	0x0801d9f0
 8009f88:	0801da2c 	.word	0x0801da2c
 8009f8c:	20005230 	.word	0x20005230
 8009f90:	0801da4c 	.word	0x0801da4c

08009f94 <debug_eth_dma_registers>:
/**
  * @brief  Debug ETH DMA registers
  * @retval None
  */
static void debug_eth_dma_registers(void)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b0a0      	sub	sp, #128	@ 0x80
 8009f98:	af00      	add	r7, sp, #0
  char debug_msg[128];
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_BMR=0x%08lX", ETH->DMABMR);
 8009f9a:	4b25      	ldr	r3, [pc, #148]	@ (800a030 <debug_eth_dma_registers+0x9c>)
 8009f9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4638      	mov	r0, r7
 8009fa4:	4a23      	ldr	r2, [pc, #140]	@ (800a034 <debug_eth_dma_registers+0xa0>)
 8009fa6:	2180      	movs	r1, #128	@ 0x80
 8009fa8:	f011 fcaa 	bl	801b900 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 8009fac:	463b      	mov	r3, r7
 8009fae:	4619      	mov	r1, r3
 8009fb0:	4821      	ldr	r0, [pc, #132]	@ (800a038 <debug_eth_dma_registers+0xa4>)
 8009fb2:	f7ff ff03 	bl	8009dbc <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_SR=0x%08lX", ETH->DMASR);
 8009fb6:	4b1e      	ldr	r3, [pc, #120]	@ (800a030 <debug_eth_dma_registers+0x9c>)
 8009fb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fbc:	695b      	ldr	r3, [r3, #20]
 8009fbe:	4638      	mov	r0, r7
 8009fc0:	4a1e      	ldr	r2, [pc, #120]	@ (800a03c <debug_eth_dma_registers+0xa8>)
 8009fc2:	2180      	movs	r1, #128	@ 0x80
 8009fc4:	f011 fc9c 	bl	801b900 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 8009fc8:	463b      	mov	r3, r7
 8009fca:	4619      	mov	r1, r3
 8009fcc:	481a      	ldr	r0, [pc, #104]	@ (800a038 <debug_eth_dma_registers+0xa4>)
 8009fce:	f7ff fef5 	bl	8009dbc <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_IER=0x%08lX", ETH->DMAIER);
 8009fd2:	4b17      	ldr	r3, [pc, #92]	@ (800a030 <debug_eth_dma_registers+0x9c>)
 8009fd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fd8:	69db      	ldr	r3, [r3, #28]
 8009fda:	4638      	mov	r0, r7
 8009fdc:	4a18      	ldr	r2, [pc, #96]	@ (800a040 <debug_eth_dma_registers+0xac>)
 8009fde:	2180      	movs	r1, #128	@ 0x80
 8009fe0:	f011 fc8e 	bl	801b900 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 8009fe4:	463b      	mov	r3, r7
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	4813      	ldr	r0, [pc, #76]	@ (800a038 <debug_eth_dma_registers+0xa4>)
 8009fea:	f7ff fee7 	bl	8009dbc <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_RDLAR=0x%08lX", ETH->DMARDLAR);
 8009fee:	4b10      	ldr	r3, [pc, #64]	@ (800a030 <debug_eth_dma_registers+0x9c>)
 8009ff0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	4638      	mov	r0, r7
 8009ff8:	4a12      	ldr	r2, [pc, #72]	@ (800a044 <debug_eth_dma_registers+0xb0>)
 8009ffa:	2180      	movs	r1, #128	@ 0x80
 8009ffc:	f011 fc80 	bl	801b900 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800a000:	463b      	mov	r3, r7
 800a002:	4619      	mov	r1, r3
 800a004:	480c      	ldr	r0, [pc, #48]	@ (800a038 <debug_eth_dma_registers+0xa4>)
 800a006:	f7ff fed9 	bl	8009dbc <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_TDLAR=0x%08lX", ETH->DMATDLAR);
 800a00a:	4b09      	ldr	r3, [pc, #36]	@ (800a030 <debug_eth_dma_registers+0x9c>)
 800a00c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	4638      	mov	r0, r7
 800a014:	4a0c      	ldr	r2, [pc, #48]	@ (800a048 <debug_eth_dma_registers+0xb4>)
 800a016:	2180      	movs	r1, #128	@ 0x80
 800a018:	f011 fc72 	bl	801b900 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800a01c:	463b      	mov	r3, r7
 800a01e:	4619      	mov	r1, r3
 800a020:	4805      	ldr	r0, [pc, #20]	@ (800a038 <debug_eth_dma_registers+0xa4>)
 800a022:	f7ff fecb 	bl	8009dbc <cdc_debug_log>
}
 800a026:	bf00      	nop
 800a028:	3780      	adds	r7, #128	@ 0x80
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	40028000 	.word	0x40028000
 800a034:	0801da88 	.word	0x0801da88
 800a038:	0801da98 	.word	0x0801da98
 800a03c:	0801daa0 	.word	0x0801daa0
 800a040:	0801dab0 	.word	0x0801dab0
 800a044:	0801dac0 	.word	0x0801dac0
 800a048:	0801dad4 	.word	0x0801dad4

0800a04c <debug_eth_config>:
/**
  * @brief  Debug ETH configuration and status
  * @retval None
  */
static void debug_eth_config(void)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b0a2      	sub	sp, #136	@ 0x88
 800a050:	af02      	add	r7, sp, #8
  char debug_msg[128];
  
  // MAC configuration
  snprintf(debug_msg, sizeof(debug_msg), "MAC_CR=0x%08lX", ETH->MACCR);
 800a052:	4b1c      	ldr	r3, [pc, #112]	@ (800a0c4 <debug_eth_config+0x78>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4638      	mov	r0, r7
 800a058:	4a1b      	ldr	r2, [pc, #108]	@ (800a0c8 <debug_eth_config+0x7c>)
 800a05a:	2180      	movs	r1, #128	@ 0x80
 800a05c:	f011 fc50 	bl	801b900 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 800a060:	463b      	mov	r3, r7
 800a062:	4619      	mov	r1, r3
 800a064:	4819      	ldr	r0, [pc, #100]	@ (800a0cc <debug_eth_config+0x80>)
 800a066:	f7ff fea9 	bl	8009dbc <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "MAC_FCR=0x%08lX", ETH->MACFCR);
 800a06a:	4b16      	ldr	r3, [pc, #88]	@ (800a0c4 <debug_eth_config+0x78>)
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	4638      	mov	r0, r7
 800a070:	4a17      	ldr	r2, [pc, #92]	@ (800a0d0 <debug_eth_config+0x84>)
 800a072:	2180      	movs	r1, #128	@ 0x80
 800a074:	f011 fc44 	bl	801b900 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 800a078:	463b      	mov	r3, r7
 800a07a:	4619      	mov	r1, r3
 800a07c:	4813      	ldr	r0, [pc, #76]	@ (800a0cc <debug_eth_config+0x80>)
 800a07e:	f7ff fe9d 	bl	8009dbc <cdc_debug_log>
  
  // DMA configuration  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_OMR=0x%08lX", ETH->DMAOMR);
 800a082:	4b10      	ldr	r3, [pc, #64]	@ (800a0c4 <debug_eth_config+0x78>)
 800a084:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a088:	699b      	ldr	r3, [r3, #24]
 800a08a:	4638      	mov	r0, r7
 800a08c:	4a11      	ldr	r2, [pc, #68]	@ (800a0d4 <debug_eth_config+0x88>)
 800a08e:	2180      	movs	r1, #128	@ 0x80
 800a090:	f011 fc36 	bl	801b900 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 800a094:	463b      	mov	r3, r7
 800a096:	4619      	mov	r1, r3
 800a098:	480c      	ldr	r0, [pc, #48]	@ (800a0cc <debug_eth_config+0x80>)
 800a09a:	f7ff fe8f 	bl	8009dbc <cdc_debug_log>
  
  // Debug descriptor counts
  snprintf(debug_msg, sizeof(debug_msg), "RX_DESC_CNT=%d, TX_DESC_CNT=%d, RX_BUF_CNT=%d", 
 800a09e:	4638      	mov	r0, r7
 800a0a0:	230c      	movs	r3, #12
 800a0a2:	9301      	str	r3, [sp, #4]
 800a0a4:	2304      	movs	r3, #4
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	2304      	movs	r3, #4
 800a0aa:	4a0b      	ldr	r2, [pc, #44]	@ (800a0d8 <debug_eth_config+0x8c>)
 800a0ac:	2180      	movs	r1, #128	@ 0x80
 800a0ae:	f011 fc27 	bl	801b900 <sniprintf>
           ETH_RX_DESC_CNT, ETH_TX_DESC_CNT, ETH_RX_BUFFER_CNT);
  cdc_debug_log("ETH_CFG", debug_msg);
 800a0b2:	463b      	mov	r3, r7
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	4805      	ldr	r0, [pc, #20]	@ (800a0cc <debug_eth_config+0x80>)
 800a0b8:	f7ff fe80 	bl	8009dbc <cdc_debug_log>
}
 800a0bc:	bf00      	nop
 800a0be:	3780      	adds	r7, #128	@ 0x80
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	40028000 	.word	0x40028000
 800a0c8:	0801dae8 	.word	0x0801dae8
 800a0cc:	0801daf8 	.word	0x0801daf8
 800a0d0:	0801db00 	.word	0x0801db00
 800a0d4:	0801db10 	.word	0x0801db10
 800a0d8:	0801db20 	.word	0x0801db20

0800a0dc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800a0e4:	4b04      	ldr	r3, [pc, #16]	@ (800a0f8 <HAL_ETH_RxCpltCallback+0x1c>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f003 f8b9 	bl	800d260 <osSemaphoreRelease>
}
 800a0ee:	bf00      	nop
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	20005304 	.word	0x20005304

0800a0fc <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800a104:	4b04      	ldr	r3, [pc, #16]	@ (800a118 <HAL_ETH_TxCpltCallback+0x1c>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4618      	mov	r0, r3
 800a10a:	f003 f8a9 	bl	800d260 <osSemaphoreRelease>
}
 800a10e:	bf00      	nop
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	20005308 	.word	0x20005308

0800a11c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f7fa fb41 	bl	80047ac <HAL_ETH_GetDMAError>
 800a12a:	4603      	mov	r3, r0
 800a12c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a130:	2b80      	cmp	r3, #128	@ 0x80
 800a132:	d104      	bne.n	800a13e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800a134:	4b04      	ldr	r3, [pc, #16]	@ (800a148 <HAL_ETH_ErrorCallback+0x2c>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4618      	mov	r0, r3
 800a13a:	f003 f891 	bl	800d260 <osSemaphoreRelease>
  }
}
 800a13e:	bf00      	nop
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	20005304 	.word	0x20005304

0800a14c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a14c:	b5b0      	push	{r4, r5, r7, lr}
 800a14e:	b0ce      	sub	sp, #312	@ 0x138
 800a150:	af02      	add	r7, sp, #8
 800a152:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a156:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a15a:	6018      	str	r0, [r3, #0]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a15c:	2300      	movs	r3, #0
 800a15e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  ETH_MACConfigTypeDef macConfig;
/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a162:	4bba      	ldr	r3, [pc, #744]	@ (800a44c <low_level_init+0x300>)
 800a164:	4aba      	ldr	r2, [pc, #744]	@ (800a450 <low_level_init+0x304>)
 800a166:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a168:	2300      	movs	r3, #0
 800a16a:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
  MACAddr[1] = 0x80;
 800a16e:	2380      	movs	r3, #128	@ 0x80
 800a170:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
  MACAddr[2] = 0xE1;
 800a174:	23e1      	movs	r3, #225	@ 0xe1
 800a176:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
  MACAddr[3] = 0x00;
 800a17a:	2300      	movs	r3, #0
 800a17c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
  MACAddr[4] = 0x00;
 800a180:	2300      	movs	r3, #0
 800a182:	f887 30b8 	strb.w	r3, [r7, #184]	@ 0xb8
  MACAddr[5] = 0x00;
 800a186:	2300      	movs	r3, #0
 800a188:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
  heth.Init.MACAddr = &MACAddr[0];
 800a18c:	4aaf      	ldr	r2, [pc, #700]	@ (800a44c <low_level_init+0x300>)
 800a18e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800a192:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a194:	4bad      	ldr	r3, [pc, #692]	@ (800a44c <low_level_init+0x300>)
 800a196:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800a19a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a19c:	4bab      	ldr	r3, [pc, #684]	@ (800a44c <low_level_init+0x300>)
 800a19e:	4aad      	ldr	r2, [pc, #692]	@ (800a454 <low_level_init+0x308>)
 800a1a0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a1a2:	4baa      	ldr	r3, [pc, #680]	@ (800a44c <low_level_init+0x300>)
 800a1a4:	4aac      	ldr	r2, [pc, #688]	@ (800a458 <low_level_init+0x30c>)
 800a1a6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a1a8:	4ba8      	ldr	r3, [pc, #672]	@ (800a44c <low_level_init+0x300>)
 800a1aa:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a1ae:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a1b0:	48a6      	ldr	r0, [pc, #664]	@ (800a44c <low_level_init+0x300>)
 800a1b2:	f7f9 fcf5 	bl	8003ba0 <HAL_ETH_Init>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a1bc:	2238      	movs	r2, #56	@ 0x38
 800a1be:	2100      	movs	r1, #0
 800a1c0:	48a6      	ldr	r0, [pc, #664]	@ (800a45c <low_level_init+0x310>)
 800a1c2:	f011 fc40 	bl	801ba46 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a1c6:	4ba5      	ldr	r3, [pc, #660]	@ (800a45c <low_level_init+0x310>)
 800a1c8:	2221      	movs	r2, #33	@ 0x21
 800a1ca:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a1cc:	4ba3      	ldr	r3, [pc, #652]	@ (800a45c <low_level_init+0x310>)
 800a1ce:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800a1d2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a1d4:	4ba1      	ldr	r3, [pc, #644]	@ (800a45c <low_level_init+0x310>)
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a1da:	48a1      	ldr	r0, [pc, #644]	@ (800a460 <low_level_init+0x314>)
 800a1dc:	f006 fbc8 	bl	8010970 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a1e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a1e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2206      	movs	r2, #6
 800a1ec:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a1f0:	4b96      	ldr	r3, [pc, #600]	@ (800a44c <low_level_init+0x300>)
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	781a      	ldrb	r2, [r3, #0]
 800a1f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a1fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a204:	4b91      	ldr	r3, [pc, #580]	@ (800a44c <low_level_init+0x300>)
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	785a      	ldrb	r2, [r3, #1]
 800a20a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a20e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a218:	4b8c      	ldr	r3, [pc, #560]	@ (800a44c <low_level_init+0x300>)
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	789a      	ldrb	r2, [r3, #2]
 800a21e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a222:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a22c:	4b87      	ldr	r3, [pc, #540]	@ (800a44c <low_level_init+0x300>)
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	78da      	ldrb	r2, [r3, #3]
 800a232:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a236:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a240:	4b82      	ldr	r3, [pc, #520]	@ (800a44c <low_level_init+0x300>)
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	791a      	ldrb	r2, [r3, #4]
 800a246:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a24a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a254:	4b7d      	ldr	r3, [pc, #500]	@ (800a44c <low_level_init+0x300>)
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	795a      	ldrb	r2, [r3, #5]
 800a25a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a25e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a268:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a26c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800a276:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a278:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a27c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a286:	f043 030a 	orr.w	r3, r3, #10
 800a28a:	b2da      	uxtb	r2, r3
 800a28c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a290:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800a29a:	2300      	movs	r3, #0
 800a29c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 800a2a6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800a2aa:	2101      	movs	r1, #1
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f002 ff57 	bl	800d160 <osSemaphoreCreate>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	4a6b      	ldr	r2, [pc, #428]	@ (800a464 <low_level_init+0x318>)
 800a2b6:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a2be:	2300      	movs	r3, #0
 800a2c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800a2c4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800a2c8:	2101      	movs	r1, #1
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f002 ff48 	bl	800d160 <osSemaphoreCreate>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	4a65      	ldr	r2, [pc, #404]	@ (800a468 <low_level_init+0x31c>)
 800a2d4:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 800a2d6:	4b63      	ldr	r3, [pc, #396]	@ (800a464 <low_level_init+0x318>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2100      	movs	r1, #0
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f002 ff71 	bl	800d1c4 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800a2e2:	4b61      	ldr	r3, [pc, #388]	@ (800a468 <low_level_init+0x31c>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f002 ff6b 	bl	800d1c4 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a2ee:	4b5f      	ldr	r3, [pc, #380]	@ (800a46c <low_level_init+0x320>)
 800a2f0:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 800a2f4:	461d      	mov	r5, r3
 800a2f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a2fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800a302:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a306:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a30a:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 800a30e:	6819      	ldr	r1, [r3, #0]
 800a310:	4610      	mov	r0, r2
 800a312:	f002 fe29 	bl	800cf68 <osThreadCreate>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 800a316:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	f040 8158 	bne.w	800a5d0 <low_level_init+0x484>
  {
/* USER CODE BEGIN low_level_init Code 2 for User BSP */
    cdc_debug_log("PHY_INIT", "Starting PHY chip initialization");
 800a320:	4953      	ldr	r1, [pc, #332]	@ (800a470 <low_level_init+0x324>)
 800a322:	4854      	ldr	r0, [pc, #336]	@ (800a474 <low_level_init+0x328>)
 800a324:	f7ff fd4a 	bl	8009dbc <cdc_debug_log>
    
    /* Set up PHY chip IO context */
    PHYchip_io_ctx.init = PHY_IO_Init;
 800a328:	4b53      	ldr	r3, [pc, #332]	@ (800a478 <low_level_init+0x32c>)
 800a32a:	4a54      	ldr	r2, [pc, #336]	@ (800a47c <low_level_init+0x330>)
 800a32c:	601a      	str	r2, [r3, #0]
    PHYchip_io_ctx.deinit = PHY_IO_DeInit;
 800a32e:	4b52      	ldr	r3, [pc, #328]	@ (800a478 <low_level_init+0x32c>)
 800a330:	4a53      	ldr	r2, [pc, #332]	@ (800a480 <low_level_init+0x334>)
 800a332:	605a      	str	r2, [r3, #4]
    PHYchip_io_ctx.readreg = PHY_IO_ReadReg;
 800a334:	4b50      	ldr	r3, [pc, #320]	@ (800a478 <low_level_init+0x32c>)
 800a336:	4a53      	ldr	r2, [pc, #332]	@ (800a484 <low_level_init+0x338>)
 800a338:	60da      	str	r2, [r3, #12]
    PHYchip_io_ctx.writereg = PHY_IO_WriteReg;
 800a33a:	4b4f      	ldr	r3, [pc, #316]	@ (800a478 <low_level_init+0x32c>)
 800a33c:	4a52      	ldr	r2, [pc, #328]	@ (800a488 <low_level_init+0x33c>)
 800a33e:	609a      	str	r2, [r3, #8]
    PHYchip_io_ctx.gettick = PHY_IO_GetTick;
 800a340:	4b4d      	ldr	r3, [pc, #308]	@ (800a478 <low_level_init+0x32c>)
 800a342:	4a52      	ldr	r2, [pc, #328]	@ (800a48c <low_level_init+0x340>)
 800a344:	611a      	str	r2, [r3, #16]

    /* Register PHY chip IO functions */
    if (eth_chip_regster_bus_io(&PHYchip, &PHYchip_io_ctx) != ETH_CHIP_STATUS_OK)
 800a346:	494c      	ldr	r1, [pc, #304]	@ (800a478 <low_level_init+0x32c>)
 800a348:	4851      	ldr	r0, [pc, #324]	@ (800a490 <low_level_init+0x344>)
 800a34a:	f7f9 f908 	bl	800355e <eth_chip_regster_bus_io>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d005      	beq.n	800a360 <low_level_init+0x214>
    {
      cdc_debug_log("PHY_INIT", "Failed to register PHY IO functions");
 800a354:	494f      	ldr	r1, [pc, #316]	@ (800a494 <low_level_init+0x348>)
 800a356:	4847      	ldr	r0, [pc, #284]	@ (800a474 <low_level_init+0x328>)
 800a358:	f7ff fd30 	bl	8009dbc <cdc_debug_log>
      Error_Handler();
 800a35c:	f7f6 fed6 	bl	800110c <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "PHY IO functions registered successfully");
 800a360:	494d      	ldr	r1, [pc, #308]	@ (800a498 <low_level_init+0x34c>)
 800a362:	4844      	ldr	r0, [pc, #272]	@ (800a474 <low_level_init+0x328>)
 800a364:	f7ff fd2a 	bl	8009dbc <cdc_debug_log>

    /* Initialize PHY chip */
    if (eth_chip_init(&PHYchip) != ETH_CHIP_STATUS_OK)
 800a368:	4849      	ldr	r0, [pc, #292]	@ (800a490 <low_level_init+0x344>)
 800a36a:	f7f9 f92b 	bl	80035c4 <eth_chip_init>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d005      	beq.n	800a380 <low_level_init+0x234>
    {
      cdc_debug_log("PHY_INIT", "PHY chip initialization failed");
 800a374:	4949      	ldr	r1, [pc, #292]	@ (800a49c <low_level_init+0x350>)
 800a376:	483f      	ldr	r0, [pc, #252]	@ (800a474 <low_level_init+0x328>)
 800a378:	f7ff fd20 	bl	8009dbc <cdc_debug_log>
      Error_Handler();
 800a37c:	f7f6 fec6 	bl	800110c <Error_Handler>
    }
    
    char phy_addr_msg[64];
    snprintf(phy_addr_msg, sizeof(phy_addr_msg), "PHY chip initialized, address: %lu", PHYchip.devaddr);
 800a380:	4b43      	ldr	r3, [pc, #268]	@ (800a490 <low_level_init+0x344>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f107 0008 	add.w	r0, r7, #8
 800a388:	4a45      	ldr	r2, [pc, #276]	@ (800a4a0 <low_level_init+0x354>)
 800a38a:	2140      	movs	r1, #64	@ 0x40
 800a38c:	f011 fab8 	bl	801b900 <sniprintf>
    cdc_debug_log("PHY_INIT", phy_addr_msg);
 800a390:	f107 0308 	add.w	r3, r7, #8
 800a394:	4619      	mov	r1, r3
 800a396:	4837      	ldr	r0, [pc, #220]	@ (800a474 <low_level_init+0x328>)
 800a398:	f7ff fd10 	bl	8009dbc <cdc_debug_log>

    /* Disable PHY power down mode */
    if (eth_chip_disable_power_down_mode(&PHYchip) != ETH_CHIP_STATUS_OK)
 800a39c:	483c      	ldr	r0, [pc, #240]	@ (800a490 <low_level_init+0x344>)
 800a39e:	f7f9 fa17 	bl	80037d0 <eth_chip_disable_power_down_mode>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d005      	beq.n	800a3b4 <low_level_init+0x268>
    {
      cdc_debug_log("PHY_INIT", "Failed to disable PHY power down mode");
 800a3a8:	493e      	ldr	r1, [pc, #248]	@ (800a4a4 <low_level_init+0x358>)
 800a3aa:	4832      	ldr	r0, [pc, #200]	@ (800a474 <low_level_init+0x328>)
 800a3ac:	f7ff fd06 	bl	8009dbc <cdc_debug_log>
      Error_Handler();
 800a3b0:	f7f6 feac 	bl	800110c <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "PHY power down mode disabled");
 800a3b4:	493c      	ldr	r1, [pc, #240]	@ (800a4a8 <low_level_init+0x35c>)
 800a3b6:	482f      	ldr	r0, [pc, #188]	@ (800a474 <low_level_init+0x328>)
 800a3b8:	f7ff fd00 	bl	8009dbc <cdc_debug_log>

    /* 启动自动协商 */
    if (eth_chip_start_auto_nego(&PHYchip) != ETH_CHIP_STATUS_OK)
 800a3bc:	4834      	ldr	r0, [pc, #208]	@ (800a490 <low_level_init+0x344>)
 800a3be:	f7f9 fa34 	bl	800382a <eth_chip_start_auto_nego>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d005      	beq.n	800a3d4 <low_level_init+0x288>
    {
      cdc_debug_log("PHY_INIT", "Failed to start auto-negotiation");
 800a3c8:	4938      	ldr	r1, [pc, #224]	@ (800a4ac <low_level_init+0x360>)
 800a3ca:	482a      	ldr	r0, [pc, #168]	@ (800a474 <low_level_init+0x328>)
 800a3cc:	f7ff fcf6 	bl	8009dbc <cdc_debug_log>
      Error_Handler();
 800a3d0:	f7f6 fe9c 	bl	800110c <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "Auto-negotiation started successfully");
 800a3d4:	4936      	ldr	r1, [pc, #216]	@ (800a4b0 <low_level_init+0x364>)
 800a3d6:	4827      	ldr	r0, [pc, #156]	@ (800a474 <low_level_init+0x328>)
 800a3d8:	f7ff fcf0 	bl	8009dbc <cdc_debug_log>

    /* 等待自动协商完成 */
    uint32_t autoneg_timeout = 0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    int32_t nego_state;
    do {
      HAL_Delay(100);
 800a3e2:	2064      	movs	r0, #100	@ 0x64
 800a3e4:	f7f9 fad6 	bl	8003994 <HAL_Delay>
      nego_state = eth_chip_get_link_state(&PHYchip);
 800a3e8:	4829      	ldr	r0, [pc, #164]	@ (800a490 <low_level_init+0x344>)
 800a3ea:	f7f9 fa4b 	bl	8003884 <eth_chip_get_link_state>
 800a3ee:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
      autoneg_timeout++;
 800a3f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
      
      if (autoneg_timeout % 10 == 0) {
 800a3fc:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800a400:	4b2c      	ldr	r3, [pc, #176]	@ (800a4b4 <low_level_init+0x368>)
 800a402:	fba3 2301 	umull	r2, r3, r3, r1
 800a406:	08da      	lsrs	r2, r3, #3
 800a408:	4613      	mov	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4413      	add	r3, r2
 800a40e:	005b      	lsls	r3, r3, #1
 800a410:	1aca      	subs	r2, r1, r3
 800a412:	2a00      	cmp	r2, #0
 800a414:	d110      	bne.n	800a438 <low_level_init+0x2ec>
        char timeout_msg[64];
        snprintf(timeout_msg, sizeof(timeout_msg), "Auto-nego timeout: %lu, state: %ld", autoneg_timeout, nego_state);
 800a416:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800a41a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a424:	4a24      	ldr	r2, [pc, #144]	@ (800a4b8 <low_level_init+0x36c>)
 800a426:	2140      	movs	r1, #64	@ 0x40
 800a428:	f011 fa6a 	bl	801b900 <sniprintf>
        cdc_debug_log("PHY_INIT", timeout_msg);
 800a42c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a430:	4619      	mov	r1, r3
 800a432:	4810      	ldr	r0, [pc, #64]	@ (800a474 <low_level_init+0x328>)
 800a434:	f7ff fcc2 	bl	8009dbc <cdc_debug_log>
      }
      
      /* 超时保护 */
      if (autoneg_timeout > 50) { // 5秒超时
 800a438:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a43c:	2b32      	cmp	r3, #50	@ 0x32
 800a43e:	d93f      	bls.n	800a4c0 <low_level_init+0x374>
        cdc_debug_log("PHY_INIT", "Auto-negotiation timeout, using current state");
 800a440:	491e      	ldr	r1, [pc, #120]	@ (800a4bc <low_level_init+0x370>)
 800a442:	480c      	ldr	r0, [pc, #48]	@ (800a474 <low_level_init+0x328>)
 800a444:	f7ff fcba 	bl	8009dbc <cdc_debug_log>
        break;
 800a448:	e043      	b.n	800a4d2 <low_level_init+0x386>
 800a44a:	bf00      	nop
 800a44c:	2000530c 	.word	0x2000530c
 800a450:	40028000 	.word	0x40028000
 800a454:	20005230 	.word	0x20005230
 800a458:	20005190 	.word	0x20005190
 800a45c:	200053bc 	.word	0x200053bc
 800a460:	08020e68 	.word	0x08020e68
 800a464:	20005304 	.word	0x20005304
 800a468:	20005308 	.word	0x20005308
 800a46c:	0801de50 	.word	0x0801de50
 800a470:	0801db50 	.word	0x0801db50
 800a474:	0801db74 	.word	0x0801db74
 800a478:	200052f0 	.word	0x200052f0
 800a47c:	0800a8a5 	.word	0x0800a8a5
 800a480:	0800a8d1 	.word	0x0800a8d1
 800a484:	0800a8f9 	.word	0x0800a8f9
 800a488:	0800a951 	.word	0x0800a951
 800a48c:	0800a9ad 	.word	0x0800a9ad
 800a490:	200052d0 	.word	0x200052d0
 800a494:	0801db80 	.word	0x0801db80
 800a498:	0801dba4 	.word	0x0801dba4
 800a49c:	0801dbd0 	.word	0x0801dbd0
 800a4a0:	0801dbf0 	.word	0x0801dbf0
 800a4a4:	0801dc14 	.word	0x0801dc14
 800a4a8:	0801dc3c 	.word	0x0801dc3c
 800a4ac:	0801dc5c 	.word	0x0801dc5c
 800a4b0:	0801dc80 	.word	0x0801dc80
 800a4b4:	cccccccd 	.word	0xcccccccd
 800a4b8:	0801dca8 	.word	0x0801dca8
 800a4bc:	0801dccc 	.word	0x0801dccc
      }
    } while (nego_state == ETH_CHIP_STATUS_AUTONEGO_NOTDONE || nego_state == ETH_CHIP_STATUS_READ_ERROR);
 800a4c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800a4c4:	2b06      	cmp	r3, #6
 800a4c6:	d08c      	beq.n	800a3e2 <low_level_init+0x296>
 800a4c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800a4cc:	f113 0f05 	cmn.w	r3, #5
 800a4d0:	d087      	beq.n	800a3e2 <low_level_init+0x296>

    /* Get PHY link state and configure ETH accordingly */
    phy_link_state = eth_chip_get_link_state(&PHYchip);
 800a4d2:	4843      	ldr	r0, [pc, #268]	@ (800a5e0 <low_level_init+0x494>)
 800a4d4:	f7f9 f9d6 	bl	8003884 <eth_chip_get_link_state>
 800a4d8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
    
    char link_msg[64];
    snprintf(link_msg, sizeof(link_msg), "Initial PHY link state: %ld", phy_link_state);
 800a4dc:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800a4e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a4e4:	4a3f      	ldr	r2, [pc, #252]	@ (800a5e4 <low_level_init+0x498>)
 800a4e6:	2140      	movs	r1, #64	@ 0x40
 800a4e8:	f011 fa0a 	bl	801b900 <sniprintf>
    cdc_debug_log("PHY_INIT", link_msg);
 800a4ec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	483d      	ldr	r0, [pc, #244]	@ (800a5e8 <low_level_init+0x49c>)
 800a4f4:	f7ff fc62 	bl	8009dbc <cdc_debug_log>
    
    if (phy_link_state != ETH_CHIP_STATUS_READ_ERROR)
 800a4f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a4fc:	f113 0f05 	cmn.w	r3, #5
 800a500:	d053      	beq.n	800a5aa <low_level_init+0x45e>
    {
      /* Get current MAC configuration */
      HAL_ETH_GetMACConfig(&heth, &macConfig);
 800a502:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800a506:	4619      	mov	r1, r3
 800a508:	4838      	ldr	r0, [pc, #224]	@ (800a5ec <low_level_init+0x4a0>)
 800a50a:	f7fa f831 	bl	8004570 <HAL_ETH_GetMACConfig>
      
      switch (phy_link_state)
 800a50e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a512:	3b02      	subs	r3, #2
 800a514:	2b03      	cmp	r3, #3
 800a516:	d83b      	bhi.n	800a590 <low_level_init+0x444>
 800a518:	a201      	add	r2, pc, #4	@ (adr r2, 800a520 <low_level_init+0x3d4>)
 800a51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a51e:	bf00      	nop
 800a520:	0800a531 	.word	0x0800a531
 800a524:	0800a54b 	.word	0x0800a54b
 800a528:	0800a563 	.word	0x0800a563
 800a52c:	0800a57b 	.word	0x0800a57b
      {
        case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800a530:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a534:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 800a538:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a53c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 100M Full Duplex");
 800a540:	492b      	ldr	r1, [pc, #172]	@ (800a5f0 <low_level_init+0x4a4>)
 800a542:	4829      	ldr	r0, [pc, #164]	@ (800a5e8 <low_level_init+0x49c>)
 800a544:	f7ff fc3a 	bl	8009dbc <cdc_debug_log>
          break;
 800a548:	e02f      	b.n	800a5aa <low_level_init+0x45e>
        case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
          macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800a54a:	2300      	movs	r3, #0
 800a54c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 800a550:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a554:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 100M Half Duplex");
 800a558:	4926      	ldr	r1, [pc, #152]	@ (800a5f4 <low_level_init+0x4a8>)
 800a55a:	4823      	ldr	r0, [pc, #140]	@ (800a5e8 <low_level_init+0x49c>)
 800a55c:	f7ff fc2e 	bl	8009dbc <cdc_debug_log>
          break;
 800a560:	e023      	b.n	800a5aa <low_level_init+0x45e>
        case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800a562:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a566:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_10M;
 800a56a:	2300      	movs	r3, #0
 800a56c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 10M Full Duplex");
 800a570:	4921      	ldr	r1, [pc, #132]	@ (800a5f8 <low_level_init+0x4ac>)
 800a572:	481d      	ldr	r0, [pc, #116]	@ (800a5e8 <low_level_init+0x49c>)
 800a574:	f7ff fc22 	bl	8009dbc <cdc_debug_log>
          break;
 800a578:	e017      	b.n	800a5aa <low_level_init+0x45e>
        case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
          macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800a57a:	2300      	movs	r3, #0
 800a57c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_10M;
 800a580:	2300      	movs	r3, #0
 800a582:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 10M Half Duplex");
 800a586:	491d      	ldr	r1, [pc, #116]	@ (800a5fc <low_level_init+0x4b0>)
 800a588:	4817      	ldr	r0, [pc, #92]	@ (800a5e8 <low_level_init+0x49c>)
 800a58a:	f7ff fc17 	bl	8009dbc <cdc_debug_log>
          break;
 800a58e:	e00c      	b.n	800a5aa <low_level_init+0x45e>
        default:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800a590:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a594:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 800a598:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a59c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Default: 100M Full Duplex");
 800a5a0:	4917      	ldr	r1, [pc, #92]	@ (800a600 <low_level_init+0x4b4>)
 800a5a2:	4811      	ldr	r0, [pc, #68]	@ (800a5e8 <low_level_init+0x49c>)
 800a5a4:	f7ff fc0a 	bl	8009dbc <cdc_debug_log>
          break;
 800a5a8:	bf00      	nop

    }

    /* 重要：在启动ETH中断之前，不要调用HAL_ETH_Start_IT！
     * 信号量必须先创建，否则会在中断回调中造成HardFault */
    cdc_debug_log("PHY_INIT", "PHY configuration completed, deferring ETH start until after semaphore creation");
 800a5aa:	4916      	ldr	r1, [pc, #88]	@ (800a604 <low_level_init+0x4b8>)
 800a5ac:	480e      	ldr	r0, [pc, #56]	@ (800a5e8 <low_level_init+0x49c>)
 800a5ae:	f7ff fc05 	bl	8009dbc <cdc_debug_log>
    
    /* Debug ETH configuration after initialization */
    cdc_debug_log("ETH_INIT", "=== ETH Initialization Debug ===");
 800a5b2:	4915      	ldr	r1, [pc, #84]	@ (800a608 <low_level_init+0x4bc>)
 800a5b4:	4815      	ldr	r0, [pc, #84]	@ (800a60c <low_level_init+0x4c0>)
 800a5b6:	f7ff fc01 	bl	8009dbc <cdc_debug_log>
    debug_eth_config();
 800a5ba:	f7ff fd47 	bl	800a04c <debug_eth_config>
    debug_eth_dma_registers();
 800a5be:	f7ff fce9 	bl	8009f94 <debug_eth_dma_registers>
    debug_eth_dma_descriptors();
 800a5c2:	f7ff fc1b 	bl	8009dfc <debug_eth_dma_descriptors>
    cdc_debug_log("ETH_INIT", "=== ETH Debug Complete ===");
 800a5c6:	4912      	ldr	r1, [pc, #72]	@ (800a610 <low_level_init+0x4c4>)
 800a5c8:	4810      	ldr	r0, [pc, #64]	@ (800a60c <low_level_init+0x4c0>)
 800a5ca:	f7ff fbf7 	bl	8009dbc <cdc_debug_log>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a5ce:	e001      	b.n	800a5d4 <low_level_init+0x488>
    Error_Handler();
 800a5d0:	f7f6 fd9c 	bl	800110c <Error_Handler>
}
 800a5d4:	bf00      	nop
 800a5d6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bdb0      	pop	{r4, r5, r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	200052d0 	.word	0x200052d0
 800a5e4:	0801dcfc 	.word	0x0801dcfc
 800a5e8:	0801db74 	.word	0x0801db74
 800a5ec:	2000530c 	.word	0x2000530c
 800a5f0:	0801dd18 	.word	0x0801dd18
 800a5f4:	0801dd38 	.word	0x0801dd38
 800a5f8:	0801dd58 	.word	0x0801dd58
 800a5fc:	0801dd74 	.word	0x0801dd74
 800a600:	0801dd90 	.word	0x0801dd90
 800a604:	0801ddac 	.word	0x0801ddac
 800a608:	0801ddfc 	.word	0x0801ddfc
 800a60c:	0801de20 	.word	0x0801de20
 800a610:	0801de2c 	.word	0x0801de2c

0800a614 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b092      	sub	sp, #72	@ 0x48
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a61e:	2300      	movs	r3, #0
 800a620:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800a622:	2300      	movs	r3, #0
 800a624:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800a626:	2300      	movs	r3, #0
 800a628:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a62c:	f107 030c 	add.w	r3, r7, #12
 800a630:	2230      	movs	r2, #48	@ 0x30
 800a632:	2100      	movs	r1, #0
 800a634:	4618      	mov	r0, r3
 800a636:	f011 fa06 	bl	801ba46 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a63a:	f107 030c 	add.w	r3, r7, #12
 800a63e:	2230      	movs	r2, #48	@ 0x30
 800a640:	2100      	movs	r1, #0
 800a642:	4618      	mov	r0, r3
 800a644:	f011 f9ff 	bl	801ba46 <memset>

  for(q = p; q != NULL; q = q->next)
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a64c:	e045      	b.n	800a6da <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a64e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a650:	2b03      	cmp	r3, #3
 800a652:	d902      	bls.n	800a65a <low_level_output+0x46>
      return ERR_IF;
 800a654:	f06f 030b 	mvn.w	r3, #11
 800a658:	e07f      	b.n	800a75a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800a65a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a65c:	6859      	ldr	r1, [r3, #4]
 800a65e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a660:	4613      	mov	r3, r2
 800a662:	005b      	lsls	r3, r3, #1
 800a664:	4413      	add	r3, r2
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	3348      	adds	r3, #72	@ 0x48
 800a66a:	443b      	add	r3, r7
 800a66c:	3b3c      	subs	r3, #60	@ 0x3c
 800a66e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a672:	895b      	ldrh	r3, [r3, #10]
 800a674:	4619      	mov	r1, r3
 800a676:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a678:	4613      	mov	r3, r2
 800a67a:	005b      	lsls	r3, r3, #1
 800a67c:	4413      	add	r3, r2
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	3348      	adds	r3, #72	@ 0x48
 800a682:	443b      	add	r3, r7
 800a684:	3b38      	subs	r3, #56	@ 0x38
 800a686:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d011      	beq.n	800a6b2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a68e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a690:	1e5a      	subs	r2, r3, #1
 800a692:	f107 000c 	add.w	r0, r7, #12
 800a696:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a698:	460b      	mov	r3, r1
 800a69a:	005b      	lsls	r3, r3, #1
 800a69c:	440b      	add	r3, r1
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	18c1      	adds	r1, r0, r3
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	005b      	lsls	r3, r3, #1
 800a6a6:	4413      	add	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	3348      	adds	r3, #72	@ 0x48
 800a6ac:	443b      	add	r3, r7
 800a6ae:	3b34      	subs	r3, #52	@ 0x34
 800a6b0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a6b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d109      	bne.n	800a6ce <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800a6ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6bc:	4613      	mov	r3, r2
 800a6be:	005b      	lsls	r3, r3, #1
 800a6c0:	4413      	add	r3, r2
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	3348      	adds	r3, #72	@ 0x48
 800a6c6:	443b      	add	r3, r7
 800a6c8:	3b34      	subs	r3, #52	@ 0x34
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a6ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800a6d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d1b6      	bne.n	800a64e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	891b      	ldrh	r3, [r3, #8]
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	4b1f      	ldr	r3, [pc, #124]	@ (800a764 <low_level_output+0x150>)
 800a6e8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a6ea:	4a1e      	ldr	r2, [pc, #120]	@ (800a764 <low_level_output+0x150>)
 800a6ec:	f107 030c 	add.w	r3, r7, #12
 800a6f0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800a6f2:	4a1c      	ldr	r2, [pc, #112]	@ (800a764 <low_level_output+0x150>)
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800a6f8:	6838      	ldr	r0, [r7, #0]
 800a6fa:	f007 f965 	bl	80119c8 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800a6fe:	4919      	ldr	r1, [pc, #100]	@ (800a764 <low_level_output+0x150>)
 800a700:	4819      	ldr	r0, [pc, #100]	@ (800a768 <low_level_output+0x154>)
 800a702:	f7f9 fbd8 	bl	8003eb6 <HAL_ETH_Transmit_IT>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d103      	bne.n	800a714 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800a70c:	2300      	movs	r3, #0
 800a70e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a712:	e01b      	b.n	800a74c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800a714:	4814      	ldr	r0, [pc, #80]	@ (800a768 <low_level_output+0x154>)
 800a716:	f7fa f83c 	bl	8004792 <HAL_ETH_GetError>
 800a71a:	4603      	mov	r3, r0
 800a71c:	f003 0302 	and.w	r3, r3, #2
 800a720:	2b00      	cmp	r3, #0
 800a722:	d00d      	beq.n	800a740 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800a724:	4b11      	ldr	r3, [pc, #68]	@ (800a76c <low_level_output+0x158>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800a72c:	4618      	mov	r0, r3
 800a72e:	f002 fd49 	bl	800d1c4 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 800a732:	480d      	ldr	r0, [pc, #52]	@ (800a768 <low_level_output+0x154>)
 800a734:	f7f9 fd5e 	bl	80041f4 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800a738:	23fe      	movs	r3, #254	@ 0xfe
 800a73a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a73e:	e005      	b.n	800a74c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800a740:	6838      	ldr	r0, [r7, #0]
 800a742:	f007 f89b 	bl	801187c <pbuf_free>
        errval =  ERR_IF;
 800a746:	23f4      	movs	r3, #244	@ 0xf4
 800a748:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800a74c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a750:	f113 0f02 	cmn.w	r3, #2
 800a754:	d0d3      	beq.n	800a6fe <low_level_output+0xea>

  return errval;
 800a756:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3748      	adds	r7, #72	@ 0x48
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	200053bc 	.word	0x200053bc
 800a768:	2000530c 	.word	0x2000530c
 800a76c:	20005308 	.word	0x20005308

0800a770 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a778:	2300      	movs	r3, #0
 800a77a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800a77c:	4b07      	ldr	r3, [pc, #28]	@ (800a79c <low_level_input+0x2c>)
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d105      	bne.n	800a790 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800a784:	f107 030c 	add.w	r3, r7, #12
 800a788:	4619      	mov	r1, r3
 800a78a:	4805      	ldr	r0, [pc, #20]	@ (800a7a0 <low_level_input+0x30>)
 800a78c:	f7f9 fbef 	bl	8003f6e <HAL_ETH_ReadData>
  }

  return p;
 800a790:	68fb      	ldr	r3, [r7, #12]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	2000518c 	.word	0x2000518c
 800a7a0:	2000530c 	.word	0x2000530c

0800a7a4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a7b4:	4b0f      	ldr	r3, [pc, #60]	@ (800a7f4 <ethernetif_input+0x50>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f04f 31ff 	mov.w	r1, #4294967295
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f002 fd01 	bl	800d1c4 <osSemaphoreWait>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d1f5      	bne.n	800a7b4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800a7c8:	68b8      	ldr	r0, [r7, #8]
 800a7ca:	f7ff ffd1 	bl	800a770 <low_level_input>
 800a7ce:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00a      	beq.n	800a7ec <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	68b9      	ldr	r1, [r7, #8]
 800a7dc:	68f8      	ldr	r0, [r7, #12]
 800a7de:	4798      	blx	r3
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d002      	beq.n	800a7ec <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f007 f848 	bl	801187c <pbuf_free>
          }
        }
      } while(p!=NULL);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1ea      	bne.n	800a7c8 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a7f2:	e7df      	b.n	800a7b4 <ethernetif_input+0x10>
 800a7f4:	20005304 	.word	0x20005304

0800a7f8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d106      	bne.n	800a814 <ethernetif_init+0x1c>
 800a806:	4b0e      	ldr	r3, [pc, #56]	@ (800a840 <ethernetif_init+0x48>)
 800a808:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 800a80c:	490d      	ldr	r1, [pc, #52]	@ (800a844 <ethernetif_init+0x4c>)
 800a80e:	480e      	ldr	r0, [pc, #56]	@ (800a848 <ethernetif_init+0x50>)
 800a810:	f011 f864 	bl	801b8dc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2273      	movs	r2, #115	@ 0x73
 800a818:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2274      	movs	r2, #116	@ 0x74
 800a820:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4a09      	ldr	r2, [pc, #36]	@ (800a84c <ethernetif_init+0x54>)
 800a828:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a08      	ldr	r2, [pc, #32]	@ (800a850 <ethernetif_init+0x58>)
 800a82e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f7ff fc8b 	bl	800a14c <low_level_init>

  return ERR_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	0801de6c 	.word	0x0801de6c
 800a844:	0801de88 	.word	0x0801de88
 800a848:	0801de98 	.word	0x0801de98
 800a84c:	08018c6d 	.word	0x08018c6d
 800a850:	0800a615 	.word	0x0800a615

0800a854 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a860:	68f9      	ldr	r1, [r7, #12]
 800a862:	4809      	ldr	r0, [pc, #36]	@ (800a888 <pbuf_free_custom+0x34>)
 800a864:	f006 f974 	bl	8010b50 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800a868:	4b08      	ldr	r3, [pc, #32]	@ (800a88c <pbuf_free_custom+0x38>)
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d107      	bne.n	800a880 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800a870:	4b06      	ldr	r3, [pc, #24]	@ (800a88c <pbuf_free_custom+0x38>)
 800a872:	2200      	movs	r2, #0
 800a874:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800a876:	4b06      	ldr	r3, [pc, #24]	@ (800a890 <pbuf_free_custom+0x3c>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f002 fcf0 	bl	800d260 <osSemaphoreRelease>
  }
}
 800a880:	bf00      	nop
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	08020e68 	.word	0x08020e68
 800a88c:	2000518c 	.word	0x2000518c
 800a890:	20005304 	.word	0x20005304

0800a894 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a898:	f7f9 f870 	bl	800397c <HAL_GetTick>
 800a89c:	4603      	mov	r3, r0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	bd80      	pop	{r7, pc}
	...

0800a8a4 <PHY_IO_Init>:
/**
  * @brief  Initialize the PHY interface
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_Init(void)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	af00      	add	r7, sp, #0
  /* 基本的PHY硬件初始化已经由HAL_ETH_Init处理 */
  /* 这里进行PHY芯片特定的初始化 */
  cdc_debug_log("PHY_IO", "PHY_IO_Init called - performing PHY-specific initialization");
 800a8a8:	4906      	ldr	r1, [pc, #24]	@ (800a8c4 <PHY_IO_Init+0x20>)
 800a8aa:	4807      	ldr	r0, [pc, #28]	@ (800a8c8 <PHY_IO_Init+0x24>)
 800a8ac:	f7ff fa86 	bl	8009dbc <cdc_debug_log>
  
  /* 等待PHY准备就绪 */
  HAL_Delay(10);
 800a8b0:	200a      	movs	r0, #10
 800a8b2:	f7f9 f86f 	bl	8003994 <HAL_Delay>
  
  cdc_debug_log("PHY_IO", "PHY_IO_Init completed successfully");
 800a8b6:	4905      	ldr	r1, [pc, #20]	@ (800a8cc <PHY_IO_Init+0x28>)
 800a8b8:	4803      	ldr	r0, [pc, #12]	@ (800a8c8 <PHY_IO_Init+0x24>)
 800a8ba:	f7ff fa7f 	bl	8009dbc <cdc_debug_log>
  return 0;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	0801dec0 	.word	0x0801dec0
 800a8c8:	0801defc 	.word	0x0801defc
 800a8cc:	0801df04 	.word	0x0801df04

0800a8d0 <PHY_IO_DeInit>:
/**
  * @brief  De-Initialize the PHY interface
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_DeInit(void)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	af00      	add	r7, sp, #0
  cdc_debug_log("PHY_IO", "PHY_IO_DeInit called - performing PHY-specific cleanup");
 800a8d4:	4905      	ldr	r1, [pc, #20]	@ (800a8ec <PHY_IO_DeInit+0x1c>)
 800a8d6:	4806      	ldr	r0, [pc, #24]	@ (800a8f0 <PHY_IO_DeInit+0x20>)
 800a8d8:	f7ff fa70 	bl	8009dbc <cdc_debug_log>
  
  /* 可以在这里添加特定的PHY去初始化操作 */
  /* 例如：使能省电模式 */
  
  cdc_debug_log("PHY_IO", "PHY_IO_DeInit completed");
 800a8dc:	4905      	ldr	r1, [pc, #20]	@ (800a8f4 <PHY_IO_DeInit+0x24>)
 800a8de:	4804      	ldr	r0, [pc, #16]	@ (800a8f0 <PHY_IO_DeInit+0x20>)
 800a8e0:	f7ff fa6c 	bl	8009dbc <cdc_debug_log>
  return 0;
 800a8e4:	2300      	movs	r3, #0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	0801df28 	.word	0x0801df28
 800a8f0:	0801defc 	.word	0x0801defc
 800a8f4:	0801df60 	.word	0x0801df60

0800a8f8 <PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: Pointer to register value
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b096      	sub	sp, #88	@ 0x58
 800a8fc:	af02      	add	r7, sp, #8
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	607a      	str	r2, [r7, #4]
  if (HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	68ba      	ldr	r2, [r7, #8]
 800a908:	68f9      	ldr	r1, [r7, #12]
 800a90a:	480e      	ldr	r0, [pc, #56]	@ (800a944 <PHY_IO_ReadReg+0x4c>)
 800a90c:	f7f9 fd9c 	bl	8004448 <HAL_ETH_ReadPHYRegister>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d011      	beq.n	800a93a <PHY_IO_ReadReg+0x42>
  {
    char error_msg[64];
    snprintf(error_msg, sizeof(error_msg), "Read failed - Addr:0x%02lX Reg:0x%02lX", DevAddr, RegAddr);
 800a916:	f107 0010 	add.w	r0, r7, #16
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	4a09      	ldr	r2, [pc, #36]	@ (800a948 <PHY_IO_ReadReg+0x50>)
 800a922:	2140      	movs	r1, #64	@ 0x40
 800a924:	f010 ffec 	bl	801b900 <sniprintf>
    cdc_debug_log("PHY_IO", error_msg);
 800a928:	f107 0310 	add.w	r3, r7, #16
 800a92c:	4619      	mov	r1, r3
 800a92e:	4807      	ldr	r0, [pc, #28]	@ (800a94c <PHY_IO_ReadReg+0x54>)
 800a930:	f7ff fa44 	bl	8009dbc <cdc_debug_log>
    return -1;
 800a934:	f04f 33ff 	mov.w	r3, #4294967295
 800a938:	e000      	b.n	800a93c <PHY_IO_ReadReg+0x44>
  }
  return 0;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3750      	adds	r7, #80	@ 0x50
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	2000530c 	.word	0x2000530c
 800a948:	0801df78 	.word	0x0801df78
 800a94c:	0801defc 	.word	0x0801defc

0800a950 <PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Register value to write
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b096      	sub	sp, #88	@ 0x58
 800a954:	af02      	add	r7, sp, #8
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	607a      	str	r2, [r7, #4]
  if (HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	68ba      	ldr	r2, [r7, #8]
 800a960:	68f9      	ldr	r1, [r7, #12]
 800a962:	480f      	ldr	r0, [pc, #60]	@ (800a9a0 <PHY_IO_WriteReg+0x50>)
 800a964:	f7f9 fdbb 	bl	80044de <HAL_ETH_WritePHYRegister>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d013      	beq.n	800a996 <PHY_IO_WriteReg+0x46>
  {
    char error_msg[64];
    snprintf(error_msg, sizeof(error_msg), "Write failed - Addr:0x%02lX Reg:0x%02lX Val:0x%04lX", DevAddr, RegAddr, RegVal);
 800a96e:	f107 0010 	add.w	r0, r7, #16
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	9301      	str	r3, [sp, #4]
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	9300      	str	r3, [sp, #0]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	4a09      	ldr	r2, [pc, #36]	@ (800a9a4 <PHY_IO_WriteReg+0x54>)
 800a97e:	2140      	movs	r1, #64	@ 0x40
 800a980:	f010 ffbe 	bl	801b900 <sniprintf>
    cdc_debug_log("PHY_IO", error_msg);
 800a984:	f107 0310 	add.w	r3, r7, #16
 800a988:	4619      	mov	r1, r3
 800a98a:	4807      	ldr	r0, [pc, #28]	@ (800a9a8 <PHY_IO_WriteReg+0x58>)
 800a98c:	f7ff fa16 	bl	8009dbc <cdc_debug_log>
    return -1;
 800a990:	f04f 33ff 	mov.w	r3, #4294967295
 800a994:	e000      	b.n	800a998 <PHY_IO_WriteReg+0x48>
  }
  return 0;
 800a996:	2300      	movs	r3, #0
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3750      	adds	r7, #80	@ 0x50
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	2000530c 	.word	0x2000530c
 800a9a4:	0801dfa0 	.word	0x0801dfa0
 800a9a8:	0801defc 	.word	0x0801defc

0800a9ac <PHY_IO_GetTick>:
/**
  * @brief  Get system tick for timing
  * @retval Current tick value
  */
static int32_t PHY_IO_GetTick(void)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a9b0:	f7f8 ffe4 	bl	800397c <HAL_GetTick>
 800a9b4:	4603      	mov	r3, r0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	bd80      	pop	{r7, pc}
	...

0800a9bc <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b0b0      	sub	sp, #192	@ 0xc0
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link init */
  struct netif *netif = (struct netif *) argument;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  int32_t phy_link_state;
  ETH_MACConfigTypeDef macConfig;
  uint32_t linkchanged = 0, linkup = 0;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t link_check_counter = 0;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  
  cdc_debug_log("LINK_THREAD", "Ethernet link monitoring started");
 800a9dc:	49be      	ldr	r1, [pc, #760]	@ (800acd8 <ethernet_link_thread+0x31c>)
 800a9de:	48bf      	ldr	r0, [pc, #764]	@ (800acdc <ethernet_link_thread+0x320>)
 800a9e0:	f7ff f9ec 	bl	8009dbc <cdc_debug_log>

  for(;;)
  {

/* USER CODE BEGIN ETH link Thread core code for User BSP */
    link_check_counter++;
 800a9e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    
    /* Only log every 50th check to avoid flooding (approximately every 5 seconds) */
    if (link_check_counter % 50 == 0)
 800a9ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a9f2:	4bbb      	ldr	r3, [pc, #748]	@ (800ace0 <ethernet_link_thread+0x324>)
 800a9f4:	fba3 1302 	umull	r1, r3, r3, r2
 800a9f8:	091b      	lsrs	r3, r3, #4
 800a9fa:	2132      	movs	r1, #50	@ 0x32
 800a9fc:	fb01 f303 	mul.w	r3, r1, r3
 800aa00:	1ad3      	subs	r3, r2, r3
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d10d      	bne.n	800aa22 <ethernet_link_thread+0x66>
    {
      char counter_msg[32];
      snprintf(counter_msg, sizeof(counter_msg), "Link check #%lu", link_check_counter);
 800aa06:	f107 0008 	add.w	r0, r7, #8
 800aa0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aa0e:	4ab5      	ldr	r2, [pc, #724]	@ (800ace4 <ethernet_link_thread+0x328>)
 800aa10:	2120      	movs	r1, #32
 800aa12:	f010 ff75 	bl	801b900 <sniprintf>
      cdc_debug_log("LINK_THREAD", counter_msg);
 800aa16:	f107 0308 	add.w	r3, r7, #8
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	48af      	ldr	r0, [pc, #700]	@ (800acdc <ethernet_link_thread+0x320>)
 800aa1e:	f7ff f9cd 	bl	8009dbc <cdc_debug_log>
    }
    
    phy_link_state = eth_chip_get_link_state(&PHYchip);
 800aa22:	48b1      	ldr	r0, [pc, #708]	@ (800ace8 <ethernet_link_thread+0x32c>)
 800aa24:	f7f8 ff2e 	bl	8003884 <eth_chip_get_link_state>
 800aa28:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    
    if (phy_link_state != ETH_CHIP_STATUS_READ_ERROR && phy_link_state != ETH_CHIP_STATUS_LINK_DOWN)
 800aa2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa30:	f113 0f05 	cmn.w	r3, #5
 800aa34:	f000 8111 	beq.w	800ac5a <ethernet_link_thread+0x29e>
 800aa38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	f000 810c 	beq.w	800ac5a <ethernet_link_thread+0x29e>
    {
      /* PHY link is up */
      switch (phy_link_state)
 800aa42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa46:	3b02      	subs	r3, #2
 800aa48:	2b04      	cmp	r3, #4
 800aa4a:	d874      	bhi.n	800ab36 <ethernet_link_thread+0x17a>
 800aa4c:	a201      	add	r2, pc, #4	@ (adr r2, 800aa54 <ethernet_link_thread+0x98>)
 800aa4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa52:	bf00      	nop
 800aa54:	0800aa69 	.word	0x0800aa69
 800aa58:	0800aa91 	.word	0x0800aa91
 800aa5c:	0800aab9 	.word	0x0800aab9
 800aa60:	0800aae1 	.word	0x0800aae1
 800aa64:	0800ab09 	.word	0x0800ab09
      {
        case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 100M Full Duplex");
 800aa68:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aa6c:	4b9c      	ldr	r3, [pc, #624]	@ (800ace0 <ethernet_link_thread+0x324>)
 800aa6e:	fba3 1302 	umull	r1, r3, r3, r2
 800aa72:	091b      	lsrs	r3, r3, #4
 800aa74:	2132      	movs	r1, #50	@ 0x32
 800aa76:	fb01 f303 	mul.w	r3, r1, r3
 800aa7a:	1ad3      	subs	r3, r2, r3
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d103      	bne.n	800aa88 <ethernet_link_thread+0xcc>
 800aa80:	499a      	ldr	r1, [pc, #616]	@ (800acec <ethernet_link_thread+0x330>)
 800aa82:	4896      	ldr	r0, [pc, #600]	@ (800acdc <ethernet_link_thread+0x320>)
 800aa84:	f7ff f99a 	bl	8009dbc <cdc_debug_log>
          linkup = 1;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800aa8e:	e066      	b.n	800ab5e <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 100M Half Duplex");
 800aa90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aa94:	4b92      	ldr	r3, [pc, #584]	@ (800ace0 <ethernet_link_thread+0x324>)
 800aa96:	fba3 1302 	umull	r1, r3, r3, r2
 800aa9a:	091b      	lsrs	r3, r3, #4
 800aa9c:	2132      	movs	r1, #50	@ 0x32
 800aa9e:	fb01 f303 	mul.w	r3, r1, r3
 800aaa2:	1ad3      	subs	r3, r2, r3
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d103      	bne.n	800aab0 <ethernet_link_thread+0xf4>
 800aaa8:	4991      	ldr	r1, [pc, #580]	@ (800acf0 <ethernet_link_thread+0x334>)
 800aaaa:	488c      	ldr	r0, [pc, #560]	@ (800acdc <ethernet_link_thread+0x320>)
 800aaac:	f7ff f986 	bl	8009dbc <cdc_debug_log>
          linkup = 1;
 800aab0:	2301      	movs	r3, #1
 800aab2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800aab6:	e052      	b.n	800ab5e <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 10M Full Duplex");
 800aab8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aabc:	4b88      	ldr	r3, [pc, #544]	@ (800ace0 <ethernet_link_thread+0x324>)
 800aabe:	fba3 1302 	umull	r1, r3, r3, r2
 800aac2:	091b      	lsrs	r3, r3, #4
 800aac4:	2132      	movs	r1, #50	@ 0x32
 800aac6:	fb01 f303 	mul.w	r3, r1, r3
 800aaca:	1ad3      	subs	r3, r2, r3
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d103      	bne.n	800aad8 <ethernet_link_thread+0x11c>
 800aad0:	4988      	ldr	r1, [pc, #544]	@ (800acf4 <ethernet_link_thread+0x338>)
 800aad2:	4882      	ldr	r0, [pc, #520]	@ (800acdc <ethernet_link_thread+0x320>)
 800aad4:	f7ff f972 	bl	8009dbc <cdc_debug_log>
          linkup = 1;
 800aad8:	2301      	movs	r3, #1
 800aada:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800aade:	e03e      	b.n	800ab5e <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 10M Half Duplex");
 800aae0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aae4:	4b7e      	ldr	r3, [pc, #504]	@ (800ace0 <ethernet_link_thread+0x324>)
 800aae6:	fba3 1302 	umull	r1, r3, r3, r2
 800aaea:	091b      	lsrs	r3, r3, #4
 800aaec:	2132      	movs	r1, #50	@ 0x32
 800aaee:	fb01 f303 	mul.w	r3, r1, r3
 800aaf2:	1ad3      	subs	r3, r2, r3
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d103      	bne.n	800ab00 <ethernet_link_thread+0x144>
 800aaf8:	497f      	ldr	r1, [pc, #508]	@ (800acf8 <ethernet_link_thread+0x33c>)
 800aafa:	4878      	ldr	r0, [pc, #480]	@ (800acdc <ethernet_link_thread+0x320>)
 800aafc:	f7ff f95e 	bl	8009dbc <cdc_debug_log>
          linkup = 1;
 800ab00:	2301      	movs	r3, #1
 800ab02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800ab06:	e02a      	b.n	800ab5e <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_AUTONEGO_NOTDONE:
          if (link_check_counter % 50 == 0) {
 800ab08:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ab0c:	4b74      	ldr	r3, [pc, #464]	@ (800ace0 <ethernet_link_thread+0x324>)
 800ab0e:	fba3 1302 	umull	r1, r3, r3, r2
 800ab12:	091b      	lsrs	r3, r3, #4
 800ab14:	2132      	movs	r1, #50	@ 0x32
 800ab16:	fb01 f303 	mul.w	r3, r1, r3
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d106      	bne.n	800ab2e <ethernet_link_thread+0x172>
            cdc_debug_log("LINK_THREAD", "Auto-negotiation in progress, restarting...");
 800ab20:	4976      	ldr	r1, [pc, #472]	@ (800acfc <ethernet_link_thread+0x340>)
 800ab22:	486e      	ldr	r0, [pc, #440]	@ (800acdc <ethernet_link_thread+0x320>)
 800ab24:	f7ff f94a 	bl	8009dbc <cdc_debug_log>
            eth_chip_start_auto_nego(&PHYchip);
 800ab28:	486f      	ldr	r0, [pc, #444]	@ (800ace8 <ethernet_link_thread+0x32c>)
 800ab2a:	f7f8 fe7e 	bl	800382a <eth_chip_start_auto_nego>
          }
          linkup = 0;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800ab34:	e013      	b.n	800ab5e <ethernet_link_thread+0x1a2>
        default:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: Unknown state");
 800ab36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ab3a:	4b69      	ldr	r3, [pc, #420]	@ (800ace0 <ethernet_link_thread+0x324>)
 800ab3c:	fba3 1302 	umull	r1, r3, r3, r2
 800ab40:	091b      	lsrs	r3, r3, #4
 800ab42:	2132      	movs	r1, #50	@ 0x32
 800ab44:	fb01 f303 	mul.w	r3, r1, r3
 800ab48:	1ad3      	subs	r3, r2, r3
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d103      	bne.n	800ab56 <ethernet_link_thread+0x19a>
 800ab4e:	496c      	ldr	r1, [pc, #432]	@ (800ad00 <ethernet_link_thread+0x344>)
 800ab50:	4862      	ldr	r0, [pc, #392]	@ (800acdc <ethernet_link_thread+0x320>)
 800ab52:	f7ff f933 	bl	8009dbc <cdc_debug_log>
          linkup = 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800ab5c:	bf00      	nop
      }
      
      if (linkup && !netif_is_link_up(netif))
 800ab5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f000 8113 	beq.w	800ad8e <ethernet_link_thread+0x3d2>
 800ab68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ab6c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ab70:	f003 0304 	and.w	r3, r3, #4
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f040 810a 	bne.w	800ad8e <ethernet_link_thread+0x3d2>
      {
        cdc_debug_log("LINK_THREAD", "Link UP detected - configuring interface");
 800ab7a:	4962      	ldr	r1, [pc, #392]	@ (800ad04 <ethernet_link_thread+0x348>)
 800ab7c:	4857      	ldr	r0, [pc, #348]	@ (800acdc <ethernet_link_thread+0x320>)
 800ab7e:	f7ff f91d 	bl	8009dbc <cdc_debug_log>
        
        /* Get current MAC configuration */
        HAL_ETH_GetMACConfig(&heth, &macConfig);
 800ab82:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800ab86:	4619      	mov	r1, r3
 800ab88:	485f      	ldr	r0, [pc, #380]	@ (800ad08 <ethernet_link_thread+0x34c>)
 800ab8a:	f7f9 fcf1 	bl	8004570 <HAL_ETH_GetMACConfig>
        
        /* Configure ETH DupLex and Speed based on PHY state */
        switch (phy_link_state)
 800ab8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab92:	3b02      	subs	r3, #2
 800ab94:	2b03      	cmp	r3, #3
 800ab96:	d833      	bhi.n	800ac00 <ethernet_link_thread+0x244>
 800ab98:	a201      	add	r2, pc, #4	@ (adr r2, 800aba0 <ethernet_link_thread+0x1e4>)
 800ab9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab9e:	bf00      	nop
 800aba0:	0800abb1 	.word	0x0800abb1
 800aba4:	0800abc7 	.word	0x0800abc7
 800aba8:	0800abdb 	.word	0x0800abdb
 800abac:	0800abef 	.word	0x0800abef
        {
          case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
            macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800abb0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800abb4:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_100M;
 800abb6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800abba:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 100M Full Duplex");
 800abbc:	4953      	ldr	r1, [pc, #332]	@ (800ad0c <ethernet_link_thread+0x350>)
 800abbe:	4847      	ldr	r0, [pc, #284]	@ (800acdc <ethernet_link_thread+0x320>)
 800abc0:	f7ff f8fc 	bl	8009dbc <cdc_debug_log>
            break;
 800abc4:	e01c      	b.n	800ac00 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
            macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800abc6:	2300      	movs	r3, #0
 800abc8:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_100M;
 800abca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800abce:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 100M Half Duplex");
 800abd0:	494f      	ldr	r1, [pc, #316]	@ (800ad10 <ethernet_link_thread+0x354>)
 800abd2:	4842      	ldr	r0, [pc, #264]	@ (800acdc <ethernet_link_thread+0x320>)
 800abd4:	f7ff f8f2 	bl	8009dbc <cdc_debug_log>
            break;
 800abd8:	e012      	b.n	800ac00 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
            macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800abda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800abde:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_10M;
 800abe0:	2300      	movs	r3, #0
 800abe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 10M Full Duplex");
 800abe4:	494b      	ldr	r1, [pc, #300]	@ (800ad14 <ethernet_link_thread+0x358>)
 800abe6:	483d      	ldr	r0, [pc, #244]	@ (800acdc <ethernet_link_thread+0x320>)
 800abe8:	f7ff f8e8 	bl	8009dbc <cdc_debug_log>
            break;
 800abec:	e008      	b.n	800ac00 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
            macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800abee:	2300      	movs	r3, #0
 800abf0:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_10M;
 800abf2:	2300      	movs	r3, #0
 800abf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 10M Half Duplex");
 800abf6:	4948      	ldr	r1, [pc, #288]	@ (800ad18 <ethernet_link_thread+0x35c>)
 800abf8:	4838      	ldr	r0, [pc, #224]	@ (800acdc <ethernet_link_thread+0x320>)
 800abfa:	f7ff f8df 	bl	8009dbc <cdc_debug_log>
            break;
 800abfe:	bf00      	nop
        }
        
        /* Apply the new MAC configuration */
        if (HAL_ETH_SetMACConfig(&heth, &macConfig) != HAL_OK)
 800ac00:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800ac04:	4619      	mov	r1, r3
 800ac06:	4840      	ldr	r0, [pc, #256]	@ (800ad08 <ethernet_link_thread+0x34c>)
 800ac08:	f7f9 fda9 	bl	800475e <HAL_ETH_SetMACConfig>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d004      	beq.n	800ac1c <ethernet_link_thread+0x260>
        {
          cdc_debug_log("LINK_THREAD", "Failed to set MAC configuration");
 800ac12:	4942      	ldr	r1, [pc, #264]	@ (800ad1c <ethernet_link_thread+0x360>)
 800ac14:	4831      	ldr	r0, [pc, #196]	@ (800acdc <ethernet_link_thread+0x320>)
 800ac16:	f7ff f8d1 	bl	8009dbc <cdc_debug_log>
 800ac1a:	e003      	b.n	800ac24 <ethernet_link_thread+0x268>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "MAC configuration updated successfully");
 800ac1c:	4940      	ldr	r1, [pc, #256]	@ (800ad20 <ethernet_link_thread+0x364>)
 800ac1e:	482f      	ldr	r0, [pc, #188]	@ (800acdc <ethernet_link_thread+0x320>)
 800ac20:	f7ff f8cc 	bl	8009dbc <cdc_debug_log>
        }
        
        /* Start ETH if not already started */
        if (HAL_ETH_Start_IT(&heth) != HAL_OK)
 800ac24:	4838      	ldr	r0, [pc, #224]	@ (800ad08 <ethernet_link_thread+0x34c>)
 800ac26:	f7f9 f857 	bl	8003cd8 <HAL_ETH_Start_IT>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d004      	beq.n	800ac3a <ethernet_link_thread+0x27e>
        {
          cdc_debug_log("LINK_THREAD", "Failed to start ETH");
 800ac30:	493c      	ldr	r1, [pc, #240]	@ (800ad24 <ethernet_link_thread+0x368>)
 800ac32:	482a      	ldr	r0, [pc, #168]	@ (800acdc <ethernet_link_thread+0x320>)
 800ac34:	f7ff f8c2 	bl	8009dbc <cdc_debug_log>
 800ac38:	e003      	b.n	800ac42 <ethernet_link_thread+0x286>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "ETH started successfully");
 800ac3a:	493b      	ldr	r1, [pc, #236]	@ (800ad28 <ethernet_link_thread+0x36c>)
 800ac3c:	4827      	ldr	r0, [pc, #156]	@ (800acdc <ethernet_link_thread+0x320>)
 800ac3e:	f7ff f8bd 	bl	8009dbc <cdc_debug_log>
        }
        
        /* Notify link up */
        netif_set_link_up(netif);
 800ac42:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800ac46:	f006 fa07 	bl	8011058 <netif_set_link_up>
        cdc_debug_log("LINK_THREAD", "Network interface link set to UP");
 800ac4a:	4938      	ldr	r1, [pc, #224]	@ (800ad2c <ethernet_link_thread+0x370>)
 800ac4c:	4823      	ldr	r0, [pc, #140]	@ (800acdc <ethernet_link_thread+0x320>)
 800ac4e:	f7ff f8b5 	bl	8009dbc <cdc_debug_log>
        linkchanged = 1;
 800ac52:	2301      	movs	r3, #1
 800ac54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      if (linkup && !netif_is_link_up(netif))
 800ac58:	e099      	b.n	800ad8e <ethernet_link_thread+0x3d2>
      }
    }
    else
    {
      /* PHY link is down */
      if (netif_is_link_up(netif))
 800ac5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ac5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ac62:	089b      	lsrs	r3, r3, #2
 800ac64:	f003 0301 	and.w	r3, r3, #1
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d01e      	beq.n	800acac <ethernet_link_thread+0x2f0>
      {
        cdc_debug_log("LINK_THREAD", "Link DOWN detected - stopping interface");
 800ac6e:	4930      	ldr	r1, [pc, #192]	@ (800ad30 <ethernet_link_thread+0x374>)
 800ac70:	481a      	ldr	r0, [pc, #104]	@ (800acdc <ethernet_link_thread+0x320>)
 800ac72:	f7ff f8a3 	bl	8009dbc <cdc_debug_log>
        
        /* Stop ETH */
        if (HAL_ETH_Stop_IT(&heth) != HAL_OK)
 800ac76:	4824      	ldr	r0, [pc, #144]	@ (800ad08 <ethernet_link_thread+0x34c>)
 800ac78:	f7f9 f89e 	bl	8003db8 <HAL_ETH_Stop_IT>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d004      	beq.n	800ac8c <ethernet_link_thread+0x2d0>
        {
          cdc_debug_log("LINK_THREAD", "Failed to stop ETH");
 800ac82:	492c      	ldr	r1, [pc, #176]	@ (800ad34 <ethernet_link_thread+0x378>)
 800ac84:	4815      	ldr	r0, [pc, #84]	@ (800acdc <ethernet_link_thread+0x320>)
 800ac86:	f7ff f899 	bl	8009dbc <cdc_debug_log>
 800ac8a:	e003      	b.n	800ac94 <ethernet_link_thread+0x2d8>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "ETH stopped successfully");
 800ac8c:	492a      	ldr	r1, [pc, #168]	@ (800ad38 <ethernet_link_thread+0x37c>)
 800ac8e:	4813      	ldr	r0, [pc, #76]	@ (800acdc <ethernet_link_thread+0x320>)
 800ac90:	f7ff f894 	bl	8009dbc <cdc_debug_log>
        }
        
        /* Notify link down */
        netif_set_link_down(netif);
 800ac94:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800ac98:	f006 fa12 	bl	80110c0 <netif_set_link_down>
        cdc_debug_log("LINK_THREAD", "Network interface link set to DOWN");
 800ac9c:	4927      	ldr	r1, [pc, #156]	@ (800ad3c <ethernet_link_thread+0x380>)
 800ac9e:	480f      	ldr	r0, [pc, #60]	@ (800acdc <ethernet_link_thread+0x320>)
 800aca0:	f7ff f88c 	bl	8009dbc <cdc_debug_log>
        linkchanged = 1;
 800aca4:	2301      	movs	r3, #1
 800aca6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800acaa:	e06c      	b.n	800ad86 <ethernet_link_thread+0x3ca>
      }
      else if (link_check_counter % 50 == 0)
 800acac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800acb0:	4b0b      	ldr	r3, [pc, #44]	@ (800ace0 <ethernet_link_thread+0x324>)
 800acb2:	fba3 1302 	umull	r1, r3, r3, r2
 800acb6:	091b      	lsrs	r3, r3, #4
 800acb8:	2132      	movs	r1, #50	@ 0x32
 800acba:	fb01 f303 	mul.w	r3, r1, r3
 800acbe:	1ad3      	subs	r3, r2, r3
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d160      	bne.n	800ad86 <ethernet_link_thread+0x3ca>
      {
        if (phy_link_state == ETH_CHIP_STATUS_READ_ERROR)
 800acc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800acc8:	f113 0f05 	cmn.w	r3, #5
 800accc:	d13a      	bne.n	800ad44 <ethernet_link_thread+0x388>
        {
          cdc_debug_log("LINK_THREAD", "PHY read error detected");
 800acce:	491c      	ldr	r1, [pc, #112]	@ (800ad40 <ethernet_link_thread+0x384>)
 800acd0:	4802      	ldr	r0, [pc, #8]	@ (800acdc <ethernet_link_thread+0x320>)
 800acd2:	f7ff f873 	bl	8009dbc <cdc_debug_log>
 800acd6:	e056      	b.n	800ad86 <ethernet_link_thread+0x3ca>
 800acd8:	0801dfd4 	.word	0x0801dfd4
 800acdc:	0801dff8 	.word	0x0801dff8
 800ace0:	51eb851f 	.word	0x51eb851f
 800ace4:	0801e004 	.word	0x0801e004
 800ace8:	200052d0 	.word	0x200052d0
 800acec:	0801e014 	.word	0x0801e014
 800acf0:	0801e02c 	.word	0x0801e02c
 800acf4:	0801e044 	.word	0x0801e044
 800acf8:	0801e05c 	.word	0x0801e05c
 800acfc:	0801e074 	.word	0x0801e074
 800ad00:	0801e0a0 	.word	0x0801e0a0
 800ad04:	0801e0b4 	.word	0x0801e0b4
 800ad08:	2000530c 	.word	0x2000530c
 800ad0c:	0801e0e0 	.word	0x0801e0e0
 800ad10:	0801e100 	.word	0x0801e100
 800ad14:	0801e120 	.word	0x0801e120
 800ad18:	0801e140 	.word	0x0801e140
 800ad1c:	0801e160 	.word	0x0801e160
 800ad20:	0801e180 	.word	0x0801e180
 800ad24:	0801e1a8 	.word	0x0801e1a8
 800ad28:	0801e1bc 	.word	0x0801e1bc
 800ad2c:	0801e1d8 	.word	0x0801e1d8
 800ad30:	0801e1fc 	.word	0x0801e1fc
 800ad34:	0801e224 	.word	0x0801e224
 800ad38:	0801e238 	.word	0x0801e238
 800ad3c:	0801e254 	.word	0x0801e254
 800ad40:	0801e278 	.word	0x0801e278
        }
        else if (phy_link_state == ETH_CHIP_STATUS_LINK_DOWN)
 800ad44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d10e      	bne.n	800ad6a <ethernet_link_thread+0x3ae>
        {
          cdc_debug_log("LINK_THREAD", "Link is down, restarting auto-negotiation");
 800ad4c:	4926      	ldr	r1, [pc, #152]	@ (800ade8 <ethernet_link_thread+0x42c>)
 800ad4e:	4827      	ldr	r0, [pc, #156]	@ (800adec <ethernet_link_thread+0x430>)
 800ad50:	f7ff f834 	bl	8009dbc <cdc_debug_log>
          /* 尝试重新启动自动协商 */
          if (eth_chip_start_auto_nego(&PHYchip) == ETH_CHIP_STATUS_OK)
 800ad54:	4826      	ldr	r0, [pc, #152]	@ (800adf0 <ethernet_link_thread+0x434>)
 800ad56:	f7f8 fd68 	bl	800382a <eth_chip_start_auto_nego>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d112      	bne.n	800ad86 <ethernet_link_thread+0x3ca>
          {
            cdc_debug_log("LINK_THREAD", "Auto-negotiation restarted");
 800ad60:	4924      	ldr	r1, [pc, #144]	@ (800adf4 <ethernet_link_thread+0x438>)
 800ad62:	4822      	ldr	r0, [pc, #136]	@ (800adec <ethernet_link_thread+0x430>)
 800ad64:	f7ff f82a 	bl	8009dbc <cdc_debug_log>
 800ad68:	e00d      	b.n	800ad86 <ethernet_link_thread+0x3ca>
          }
        }
        else
        {
          char state_msg[64];
          snprintf(state_msg, sizeof(state_msg), "Unknown PHY state: %ld", phy_link_state);
 800ad6a:	f107 0008 	add.w	r0, r7, #8
 800ad6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad72:	4a21      	ldr	r2, [pc, #132]	@ (800adf8 <ethernet_link_thread+0x43c>)
 800ad74:	2140      	movs	r1, #64	@ 0x40
 800ad76:	f010 fdc3 	bl	801b900 <sniprintf>
          cdc_debug_log("LINK_THREAD", state_msg);
 800ad7a:	f107 0308 	add.w	r3, r7, #8
 800ad7e:	4619      	mov	r1, r3
 800ad80:	481a      	ldr	r0, [pc, #104]	@ (800adec <ethernet_link_thread+0x430>)
 800ad82:	f7ff f81b 	bl	8009dbc <cdc_debug_log>
        }
      }
      linkup = 0;
 800ad86:	2300      	movs	r3, #0
 800ad88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ad8c:	e000      	b.n	800ad90 <ethernet_link_thread+0x3d4>
      if (linkup && !netif_is_link_up(netif))
 800ad8e:	bf00      	nop
    }
    
    /* Reset link change flag */
    if (linkchanged)
 800ad90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00c      	beq.n	800adb2 <ethernet_link_thread+0x3f6>
    {
      linkchanged = 0;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      /* Debug DMA status after link change */
      cdc_debug_log("LINK_THREAD", "=== DMA Status After Link Change ===");
 800ad9e:	4917      	ldr	r1, [pc, #92]	@ (800adfc <ethernet_link_thread+0x440>)
 800ada0:	4812      	ldr	r0, [pc, #72]	@ (800adec <ethernet_link_thread+0x430>)
 800ada2:	f7ff f80b 	bl	8009dbc <cdc_debug_log>
      debug_eth_dma_registers();
 800ada6:	f7ff f8f5 	bl	8009f94 <debug_eth_dma_registers>
      cdc_debug_log("LINK_THREAD", "=== DMA Debug Complete ===");
 800adaa:	4915      	ldr	r1, [pc, #84]	@ (800ae00 <ethernet_link_thread+0x444>)
 800adac:	480f      	ldr	r0, [pc, #60]	@ (800adec <ethernet_link_thread+0x430>)
 800adae:	f7ff f805 	bl	8009dbc <cdc_debug_log>
    }
    
    /* Periodic DMA debug every 100 cycles (approximately 10 seconds) */
    if (link_check_counter % 100 == 0)
 800adb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800adb6:	4b13      	ldr	r3, [pc, #76]	@ (800ae04 <ethernet_link_thread+0x448>)
 800adb8:	fba3 1302 	umull	r1, r3, r3, r2
 800adbc:	095b      	lsrs	r3, r3, #5
 800adbe:	2164      	movs	r1, #100	@ 0x64
 800adc0:	fb01 f303 	mul.w	r3, r1, r3
 800adc4:	1ad3      	subs	r3, r2, r3
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d109      	bne.n	800adde <ethernet_link_thread+0x422>
    {
      cdc_debug_log("LINK_THREAD", "=== Periodic DMA Status Check ===");
 800adca:	490f      	ldr	r1, [pc, #60]	@ (800ae08 <ethernet_link_thread+0x44c>)
 800adcc:	4807      	ldr	r0, [pc, #28]	@ (800adec <ethernet_link_thread+0x430>)
 800adce:	f7fe fff5 	bl	8009dbc <cdc_debug_log>
      debug_eth_dma_registers();
 800add2:	f7ff f8df 	bl	8009f94 <debug_eth_dma_registers>
      cdc_debug_log("LINK_THREAD", "=== Periodic Debug Complete ===");
 800add6:	490d      	ldr	r1, [pc, #52]	@ (800ae0c <ethernet_link_thread+0x450>)
 800add8:	4804      	ldr	r0, [pc, #16]	@ (800adec <ethernet_link_thread+0x430>)
 800adda:	f7fe ffef 	bl	8009dbc <cdc_debug_log>
    }
/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800adde:	2064      	movs	r0, #100	@ 0x64
 800ade0:	f002 f90e 	bl	800d000 <osDelay>
    link_check_counter++;
 800ade4:	e5fe      	b.n	800a9e4 <ethernet_link_thread+0x28>
 800ade6:	bf00      	nop
 800ade8:	0801e290 	.word	0x0801e290
 800adec:	0801dff8 	.word	0x0801dff8
 800adf0:	200052d0 	.word	0x200052d0
 800adf4:	0801e2bc 	.word	0x0801e2bc
 800adf8:	0801e2d8 	.word	0x0801e2d8
 800adfc:	0801e2f0 	.word	0x0801e2f0
 800ae00:	0801e318 	.word	0x0801e318
 800ae04:	51eb851f 	.word	0x51eb851f
 800ae08:	0801e334 	.word	0x0801e334
 800ae0c:	0801e358 	.word	0x0801e358

0800ae10 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b086      	sub	sp, #24
 800ae14:	af02      	add	r7, sp, #8
 800ae16:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800ae18:	4812      	ldr	r0, [pc, #72]	@ (800ae64 <HAL_ETH_RxAllocateCallback+0x54>)
 800ae1a:	f005 fe25 	bl	8010a68 <memp_malloc_pool>
 800ae1e:	60f8      	str	r0, [r7, #12]
  if (p)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d014      	beq.n	800ae50 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f103 0220 	add.w	r2, r3, #32
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	4a0d      	ldr	r2, [pc, #52]	@ (800ae68 <HAL_ETH_RxAllocateCallback+0x58>)
 800ae34:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800ae3e:	9201      	str	r2, [sp, #4]
 800ae40:	9300      	str	r3, [sp, #0]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2241      	movs	r2, #65	@ 0x41
 800ae46:	2100      	movs	r1, #0
 800ae48:	2000      	movs	r0, #0
 800ae4a:	f006 fb5d 	bl	8011508 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800ae4e:	e005      	b.n	800ae5c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800ae50:	4b06      	ldr	r3, [pc, #24]	@ (800ae6c <HAL_ETH_RxAllocateCallback+0x5c>)
 800ae52:	2201      	movs	r2, #1
 800ae54:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	601a      	str	r2, [r3, #0]
}
 800ae5c:	bf00      	nop
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	08020e68 	.word	0x08020e68
 800ae68:	0800a855 	.word	0x0800a855
 800ae6c:	2000518c 	.word	0x2000518c

0800ae70 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b089      	sub	sp, #36	@ 0x24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
 800ae7c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ae86:	2300      	movs	r3, #0
 800ae88:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	3b20      	subs	r3, #32
 800ae8e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	2200      	movs	r2, #0
 800ae94:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	887a      	ldrh	r2, [r7, #2]
 800aea0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d103      	bne.n	800aeb2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	69fa      	ldr	r2, [r7, #28]
 800aeae:	601a      	str	r2, [r3, #0]
 800aeb0:	e003      	b.n	800aeba <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	69fa      	ldr	r2, [r7, #28]
 800aeb8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	69fa      	ldr	r2, [r7, #28]
 800aebe:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	61fb      	str	r3, [r7, #28]
 800aec6:	e009      	b.n	800aedc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	891a      	ldrh	r2, [r3, #8]
 800aecc:	887b      	ldrh	r3, [r7, #2]
 800aece:	4413      	add	r3, r2
 800aed0:	b29a      	uxth	r2, r3
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800aed6:	69fb      	ldr	r3, [r7, #28]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	61fb      	str	r3, [r7, #28]
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1f2      	bne.n	800aec8 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800aee2:	bf00      	nop
 800aee4:	bf00      	nop
 800aee6:	3724      	adds	r7, #36	@ 0x24
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f006 fcbf 	bl	801187c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800aefe:	bf00      	nop
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
	...

0800af08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	460b      	mov	r3, r1
 800af12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800af14:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800af18:	f010 fb9c 	bl	801b654 <USBD_static_malloc>
 800af1c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d109      	bne.n	800af38 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	32b0      	adds	r2, #176	@ 0xb0
 800af2e:	2100      	movs	r1, #0
 800af30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800af34:	2302      	movs	r3, #2
 800af36:	e0d4      	b.n	800b0e2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800af38:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800af3c:	2100      	movs	r1, #0
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f010 fd81 	bl	801ba46 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	32b0      	adds	r2, #176	@ 0xb0
 800af4e:	68f9      	ldr	r1, [r7, #12]
 800af50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	32b0      	adds	r2, #176	@ 0xb0
 800af5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	7c1b      	ldrb	r3, [r3, #16]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d138      	bne.n	800afe2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800af70:	4b5e      	ldr	r3, [pc, #376]	@ (800b0ec <USBD_CDC_Init+0x1e4>)
 800af72:	7819      	ldrb	r1, [r3, #0]
 800af74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af78:	2202      	movs	r2, #2
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f010 fa47 	bl	801b40e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800af80:	4b5a      	ldr	r3, [pc, #360]	@ (800b0ec <USBD_CDC_Init+0x1e4>)
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	f003 020f 	and.w	r2, r3, #15
 800af88:	6879      	ldr	r1, [r7, #4]
 800af8a:	4613      	mov	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4413      	add	r3, r2
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	440b      	add	r3, r1
 800af94:	3323      	adds	r3, #35	@ 0x23
 800af96:	2201      	movs	r2, #1
 800af98:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800af9a:	4b55      	ldr	r3, [pc, #340]	@ (800b0f0 <USBD_CDC_Init+0x1e8>)
 800af9c:	7819      	ldrb	r1, [r3, #0]
 800af9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800afa2:	2202      	movs	r2, #2
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f010 fa32 	bl	801b40e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800afaa:	4b51      	ldr	r3, [pc, #324]	@ (800b0f0 <USBD_CDC_Init+0x1e8>)
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	f003 020f 	and.w	r2, r3, #15
 800afb2:	6879      	ldr	r1, [r7, #4]
 800afb4:	4613      	mov	r3, r2
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	4413      	add	r3, r2
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	440b      	add	r3, r1
 800afbe:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800afc2:	2201      	movs	r2, #1
 800afc4:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800afc6:	4b4b      	ldr	r3, [pc, #300]	@ (800b0f4 <USBD_CDC_Init+0x1ec>)
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	f003 020f 	and.w	r2, r3, #15
 800afce:	6879      	ldr	r1, [r7, #4]
 800afd0:	4613      	mov	r3, r2
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4413      	add	r3, r2
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	440b      	add	r3, r1
 800afda:	331c      	adds	r3, #28
 800afdc:	2210      	movs	r2, #16
 800afde:	601a      	str	r2, [r3, #0]
 800afe0:	e035      	b.n	800b04e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800afe2:	4b42      	ldr	r3, [pc, #264]	@ (800b0ec <USBD_CDC_Init+0x1e4>)
 800afe4:	7819      	ldrb	r1, [r3, #0]
 800afe6:	2340      	movs	r3, #64	@ 0x40
 800afe8:	2202      	movs	r2, #2
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f010 fa0f 	bl	801b40e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aff0:	4b3e      	ldr	r3, [pc, #248]	@ (800b0ec <USBD_CDC_Init+0x1e4>)
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	f003 020f 	and.w	r2, r3, #15
 800aff8:	6879      	ldr	r1, [r7, #4]
 800affa:	4613      	mov	r3, r2
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	4413      	add	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	440b      	add	r3, r1
 800b004:	3323      	adds	r3, #35	@ 0x23
 800b006:	2201      	movs	r2, #1
 800b008:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b00a:	4b39      	ldr	r3, [pc, #228]	@ (800b0f0 <USBD_CDC_Init+0x1e8>)
 800b00c:	7819      	ldrb	r1, [r3, #0]
 800b00e:	2340      	movs	r3, #64	@ 0x40
 800b010:	2202      	movs	r2, #2
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f010 f9fb 	bl	801b40e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b018:	4b35      	ldr	r3, [pc, #212]	@ (800b0f0 <USBD_CDC_Init+0x1e8>)
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	f003 020f 	and.w	r2, r3, #15
 800b020:	6879      	ldr	r1, [r7, #4]
 800b022:	4613      	mov	r3, r2
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	4413      	add	r3, r2
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	440b      	add	r3, r1
 800b02c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b030:	2201      	movs	r2, #1
 800b032:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b034:	4b2f      	ldr	r3, [pc, #188]	@ (800b0f4 <USBD_CDC_Init+0x1ec>)
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	f003 020f 	and.w	r2, r3, #15
 800b03c:	6879      	ldr	r1, [r7, #4]
 800b03e:	4613      	mov	r3, r2
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	4413      	add	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	440b      	add	r3, r1
 800b048:	331c      	adds	r3, #28
 800b04a:	2210      	movs	r2, #16
 800b04c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b04e:	4b29      	ldr	r3, [pc, #164]	@ (800b0f4 <USBD_CDC_Init+0x1ec>)
 800b050:	7819      	ldrb	r1, [r3, #0]
 800b052:	2308      	movs	r3, #8
 800b054:	2203      	movs	r2, #3
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f010 f9d9 	bl	801b40e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b05c:	4b25      	ldr	r3, [pc, #148]	@ (800b0f4 <USBD_CDC_Init+0x1ec>)
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	f003 020f 	and.w	r2, r3, #15
 800b064:	6879      	ldr	r1, [r7, #4]
 800b066:	4613      	mov	r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4413      	add	r3, r2
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	440b      	add	r3, r1
 800b070:	3323      	adds	r3, #35	@ 0x23
 800b072:	2201      	movs	r2, #1
 800b074:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2200      	movs	r2, #0
 800b07a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b084:	687a      	ldr	r2, [r7, #4]
 800b086:	33b0      	adds	r3, #176	@ 0xb0
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	4413      	add	r3, r2
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2200      	movs	r2, #0
 800b096:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d101      	bne.n	800b0b0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	e018      	b.n	800b0e2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	7c1b      	ldrb	r3, [r3, #16]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d10a      	bne.n	800b0ce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b0b8:	4b0d      	ldr	r3, [pc, #52]	@ (800b0f0 <USBD_CDC_Init+0x1e8>)
 800b0ba:	7819      	ldrb	r1, [r3, #0]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f010 fa90 	bl	801b5ec <USBD_LL_PrepareReceive>
 800b0cc:	e008      	b.n	800b0e0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b0ce:	4b08      	ldr	r3, [pc, #32]	@ (800b0f0 <USBD_CDC_Init+0x1e8>)
 800b0d0:	7819      	ldrb	r1, [r3, #0]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0d8:	2340      	movs	r3, #64	@ 0x40
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f010 fa86 	bl	801b5ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	20000093 	.word	0x20000093
 800b0f0:	20000094 	.word	0x20000094
 800b0f4:	20000095 	.word	0x20000095

0800b0f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	460b      	mov	r3, r1
 800b102:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b104:	4b3a      	ldr	r3, [pc, #232]	@ (800b1f0 <USBD_CDC_DeInit+0xf8>)
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	4619      	mov	r1, r3
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f010 f9a5 	bl	801b45a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b110:	4b37      	ldr	r3, [pc, #220]	@ (800b1f0 <USBD_CDC_DeInit+0xf8>)
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	f003 020f 	and.w	r2, r3, #15
 800b118:	6879      	ldr	r1, [r7, #4]
 800b11a:	4613      	mov	r3, r2
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	4413      	add	r3, r2
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	440b      	add	r3, r1
 800b124:	3323      	adds	r3, #35	@ 0x23
 800b126:	2200      	movs	r2, #0
 800b128:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b12a:	4b32      	ldr	r3, [pc, #200]	@ (800b1f4 <USBD_CDC_DeInit+0xfc>)
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	4619      	mov	r1, r3
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f010 f992 	bl	801b45a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b136:	4b2f      	ldr	r3, [pc, #188]	@ (800b1f4 <USBD_CDC_DeInit+0xfc>)
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	f003 020f 	and.w	r2, r3, #15
 800b13e:	6879      	ldr	r1, [r7, #4]
 800b140:	4613      	mov	r3, r2
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	4413      	add	r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	440b      	add	r3, r1
 800b14a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b14e:	2200      	movs	r2, #0
 800b150:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b152:	4b29      	ldr	r3, [pc, #164]	@ (800b1f8 <USBD_CDC_DeInit+0x100>)
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	4619      	mov	r1, r3
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f010 f97e 	bl	801b45a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b15e:	4b26      	ldr	r3, [pc, #152]	@ (800b1f8 <USBD_CDC_DeInit+0x100>)
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	f003 020f 	and.w	r2, r3, #15
 800b166:	6879      	ldr	r1, [r7, #4]
 800b168:	4613      	mov	r3, r2
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	4413      	add	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	440b      	add	r3, r1
 800b172:	3323      	adds	r3, #35	@ 0x23
 800b174:	2200      	movs	r2, #0
 800b176:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b178:	4b1f      	ldr	r3, [pc, #124]	@ (800b1f8 <USBD_CDC_DeInit+0x100>)
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	f003 020f 	and.w	r2, r3, #15
 800b180:	6879      	ldr	r1, [r7, #4]
 800b182:	4613      	mov	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	4413      	add	r3, r2
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	440b      	add	r3, r1
 800b18c:	331c      	adds	r3, #28
 800b18e:	2200      	movs	r2, #0
 800b190:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	32b0      	adds	r2, #176	@ 0xb0
 800b19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d01f      	beq.n	800b1e4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	33b0      	adds	r3, #176	@ 0xb0
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	4413      	add	r3, r2
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	32b0      	adds	r2, #176	@ 0xb0
 800b1c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f010 fa52 	bl	801b670 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	32b0      	adds	r2, #176	@ 0xb0
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	20000093 	.word	0x20000093
 800b1f4:	20000094 	.word	0x20000094
 800b1f8:	20000095 	.word	0x20000095

0800b1fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	32b0      	adds	r2, #176	@ 0xb0
 800b210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b214:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b216:	2300      	movs	r3, #0
 800b218:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b21a:	2300      	movs	r3, #0
 800b21c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b21e:	2300      	movs	r3, #0
 800b220:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d101      	bne.n	800b22c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b228:	2303      	movs	r3, #3
 800b22a:	e0bf      	b.n	800b3ac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b234:	2b00      	cmp	r3, #0
 800b236:	d050      	beq.n	800b2da <USBD_CDC_Setup+0xde>
 800b238:	2b20      	cmp	r3, #32
 800b23a:	f040 80af 	bne.w	800b39c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	88db      	ldrh	r3, [r3, #6]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d03a      	beq.n	800b2bc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	b25b      	sxtb	r3, r3
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	da1b      	bge.n	800b288 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	33b0      	adds	r3, #176	@ 0xb0
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4413      	add	r3, r2
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	683a      	ldr	r2, [r7, #0]
 800b264:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b266:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b268:	683a      	ldr	r2, [r7, #0]
 800b26a:	88d2      	ldrh	r2, [r2, #6]
 800b26c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	88db      	ldrh	r3, [r3, #6]
 800b272:	2b07      	cmp	r3, #7
 800b274:	bf28      	it	cs
 800b276:	2307      	movcs	r3, #7
 800b278:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	89fa      	ldrh	r2, [r7, #14]
 800b27e:	4619      	mov	r1, r3
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f001 fda9 	bl	800cdd8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b286:	e090      	b.n	800b3aa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	785a      	ldrb	r2, [r3, #1]
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	88db      	ldrh	r3, [r3, #6]
 800b296:	2b3f      	cmp	r3, #63	@ 0x3f
 800b298:	d803      	bhi.n	800b2a2 <USBD_CDC_Setup+0xa6>
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	88db      	ldrh	r3, [r3, #6]
 800b29e:	b2da      	uxtb	r2, r3
 800b2a0:	e000      	b.n	800b2a4 <USBD_CDC_Setup+0xa8>
 800b2a2:	2240      	movs	r2, #64	@ 0x40
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b2aa:	6939      	ldr	r1, [r7, #16]
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f001 fdbe 	bl	800ce36 <USBD_CtlPrepareRx>
      break;
 800b2ba:	e076      	b.n	800b3aa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	33b0      	adds	r3, #176	@ 0xb0
 800b2c6:	009b      	lsls	r3, r3, #2
 800b2c8:	4413      	add	r3, r2
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	683a      	ldr	r2, [r7, #0]
 800b2d0:	7850      	ldrb	r0, [r2, #1]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	6839      	ldr	r1, [r7, #0]
 800b2d6:	4798      	blx	r3
      break;
 800b2d8:	e067      	b.n	800b3aa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	785b      	ldrb	r3, [r3, #1]
 800b2de:	2b0b      	cmp	r3, #11
 800b2e0:	d851      	bhi.n	800b386 <USBD_CDC_Setup+0x18a>
 800b2e2:	a201      	add	r2, pc, #4	@ (adr r2, 800b2e8 <USBD_CDC_Setup+0xec>)
 800b2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e8:	0800b319 	.word	0x0800b319
 800b2ec:	0800b395 	.word	0x0800b395
 800b2f0:	0800b387 	.word	0x0800b387
 800b2f4:	0800b387 	.word	0x0800b387
 800b2f8:	0800b387 	.word	0x0800b387
 800b2fc:	0800b387 	.word	0x0800b387
 800b300:	0800b387 	.word	0x0800b387
 800b304:	0800b387 	.word	0x0800b387
 800b308:	0800b387 	.word	0x0800b387
 800b30c:	0800b387 	.word	0x0800b387
 800b310:	0800b343 	.word	0x0800b343
 800b314:	0800b36d 	.word	0x0800b36d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	2b03      	cmp	r3, #3
 800b322:	d107      	bne.n	800b334 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b324:	f107 030a 	add.w	r3, r7, #10
 800b328:	2202      	movs	r2, #2
 800b32a:	4619      	mov	r1, r3
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f001 fd53 	bl	800cdd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b332:	e032      	b.n	800b39a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b334:	6839      	ldr	r1, [r7, #0]
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f001 fcd1 	bl	800ccde <USBD_CtlError>
            ret = USBD_FAIL;
 800b33c:	2303      	movs	r3, #3
 800b33e:	75fb      	strb	r3, [r7, #23]
          break;
 800b340:	e02b      	b.n	800b39a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	2b03      	cmp	r3, #3
 800b34c:	d107      	bne.n	800b35e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b34e:	f107 030d 	add.w	r3, r7, #13
 800b352:	2201      	movs	r2, #1
 800b354:	4619      	mov	r1, r3
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f001 fd3e 	bl	800cdd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b35c:	e01d      	b.n	800b39a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f001 fcbc 	bl	800ccde <USBD_CtlError>
            ret = USBD_FAIL;
 800b366:	2303      	movs	r3, #3
 800b368:	75fb      	strb	r3, [r7, #23]
          break;
 800b36a:	e016      	b.n	800b39a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b372:	b2db      	uxtb	r3, r3
 800b374:	2b03      	cmp	r3, #3
 800b376:	d00f      	beq.n	800b398 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b378:	6839      	ldr	r1, [r7, #0]
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f001 fcaf 	bl	800ccde <USBD_CtlError>
            ret = USBD_FAIL;
 800b380:	2303      	movs	r3, #3
 800b382:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b384:	e008      	b.n	800b398 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b386:	6839      	ldr	r1, [r7, #0]
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f001 fca8 	bl	800ccde <USBD_CtlError>
          ret = USBD_FAIL;
 800b38e:	2303      	movs	r3, #3
 800b390:	75fb      	strb	r3, [r7, #23]
          break;
 800b392:	e002      	b.n	800b39a <USBD_CDC_Setup+0x19e>
          break;
 800b394:	bf00      	nop
 800b396:	e008      	b.n	800b3aa <USBD_CDC_Setup+0x1ae>
          break;
 800b398:	bf00      	nop
      }
      break;
 800b39a:	e006      	b.n	800b3aa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b39c:	6839      	ldr	r1, [r7, #0]
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f001 fc9d 	bl	800ccde <USBD_CtlError>
      ret = USBD_FAIL;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	75fb      	strb	r3, [r7, #23]
      break;
 800b3a8:	bf00      	nop
  }

  return (uint8_t)ret;
 800b3aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3718      	adds	r7, #24
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	460b      	mov	r3, r1
 800b3be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b3c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	32b0      	adds	r2, #176	@ 0xb0
 800b3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d101      	bne.n	800b3de <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b3da:	2303      	movs	r3, #3
 800b3dc:	e065      	b.n	800b4aa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	32b0      	adds	r2, #176	@ 0xb0
 800b3e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b3ee:	78fb      	ldrb	r3, [r7, #3]
 800b3f0:	f003 020f 	and.w	r2, r3, #15
 800b3f4:	6879      	ldr	r1, [r7, #4]
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	4413      	add	r3, r2
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	440b      	add	r3, r1
 800b400:	3314      	adds	r3, #20
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d02f      	beq.n	800b468 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b408:	78fb      	ldrb	r3, [r7, #3]
 800b40a:	f003 020f 	and.w	r2, r3, #15
 800b40e:	6879      	ldr	r1, [r7, #4]
 800b410:	4613      	mov	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	4413      	add	r3, r2
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	440b      	add	r3, r1
 800b41a:	3314      	adds	r3, #20
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	78fb      	ldrb	r3, [r7, #3]
 800b420:	f003 010f 	and.w	r1, r3, #15
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	460b      	mov	r3, r1
 800b428:	00db      	lsls	r3, r3, #3
 800b42a:	440b      	add	r3, r1
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	4403      	add	r3, r0
 800b430:	331c      	adds	r3, #28
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	fbb2 f1f3 	udiv	r1, r2, r3
 800b438:	fb01 f303 	mul.w	r3, r1, r3
 800b43c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d112      	bne.n	800b468 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b442:	78fb      	ldrb	r3, [r7, #3]
 800b444:	f003 020f 	and.w	r2, r3, #15
 800b448:	6879      	ldr	r1, [r7, #4]
 800b44a:	4613      	mov	r3, r2
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	4413      	add	r3, r2
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	440b      	add	r3, r1
 800b454:	3314      	adds	r3, #20
 800b456:	2200      	movs	r2, #0
 800b458:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b45a:	78f9      	ldrb	r1, [r7, #3]
 800b45c:	2300      	movs	r3, #0
 800b45e:	2200      	movs	r2, #0
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f010 f8a2 	bl	801b5aa <USBD_LL_Transmit>
 800b466:	e01f      	b.n	800b4a8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	2200      	movs	r2, #0
 800b46c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	33b0      	adds	r3, #176	@ 0xb0
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	4413      	add	r3, r2
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	691b      	ldr	r3, [r3, #16]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d010      	beq.n	800b4a8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	33b0      	adds	r3, #176	@ 0xb0
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	4413      	add	r3, r2
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	691b      	ldr	r3, [r3, #16]
 800b498:	68ba      	ldr	r2, [r7, #8]
 800b49a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b49e:	68ba      	ldr	r2, [r7, #8]
 800b4a0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b4a4:	78fa      	ldrb	r2, [r7, #3]
 800b4a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b084      	sub	sp, #16
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	32b0      	adds	r2, #176	@ 0xb0
 800b4c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	32b0      	adds	r2, #176	@ 0xb0
 800b4d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d101      	bne.n	800b4e4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b4e0:	2303      	movs	r3, #3
 800b4e2:	e01a      	b.n	800b51a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b4e4:	78fb      	ldrb	r3, [r7, #3]
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f010 f8a0 	bl	801b62e <USBD_LL_GetRxDataSize>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	33b0      	adds	r3, #176	@ 0xb0
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	4413      	add	r3, r2
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b514:	4611      	mov	r1, r2
 800b516:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b518:	2300      	movs	r3, #0
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b084      	sub	sp, #16
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	32b0      	adds	r2, #176	@ 0xb0
 800b534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b538:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d101      	bne.n	800b544 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b540:	2303      	movs	r3, #3
 800b542:	e024      	b.n	800b58e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	33b0      	adds	r3, #176	@ 0xb0
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	4413      	add	r3, r2
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d019      	beq.n	800b58c <USBD_CDC_EP0_RxReady+0x6a>
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b55e:	2bff      	cmp	r3, #255	@ 0xff
 800b560:	d014      	beq.n	800b58c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	33b0      	adds	r3, #176	@ 0xb0
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	4413      	add	r3, r2
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	68fa      	ldr	r2, [r7, #12]
 800b576:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b57a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b582:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	22ff      	movs	r2, #255	@ 0xff
 800b588:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b58c:	2300      	movs	r3, #0
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
	...

0800b598 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b086      	sub	sp, #24
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b5a0:	2182      	movs	r1, #130	@ 0x82
 800b5a2:	4818      	ldr	r0, [pc, #96]	@ (800b604 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b5a4:	f000 fd62 	bl	800c06c <USBD_GetEpDesc>
 800b5a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b5aa:	2101      	movs	r1, #1
 800b5ac:	4815      	ldr	r0, [pc, #84]	@ (800b604 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b5ae:	f000 fd5d 	bl	800c06c <USBD_GetEpDesc>
 800b5b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b5b4:	2181      	movs	r1, #129	@ 0x81
 800b5b6:	4813      	ldr	r0, [pc, #76]	@ (800b604 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b5b8:	f000 fd58 	bl	800c06c <USBD_GetEpDesc>
 800b5bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d002      	beq.n	800b5ca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	2210      	movs	r2, #16
 800b5c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d006      	beq.n	800b5de <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b5d8:	711a      	strb	r2, [r3, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d006      	beq.n	800b5f2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b5ec:	711a      	strb	r2, [r3, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2243      	movs	r2, #67	@ 0x43
 800b5f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b5f8:	4b02      	ldr	r3, [pc, #8]	@ (800b604 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3718      	adds	r7, #24
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	20000050 	.word	0x20000050

0800b608 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b086      	sub	sp, #24
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b610:	2182      	movs	r1, #130	@ 0x82
 800b612:	4818      	ldr	r0, [pc, #96]	@ (800b674 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b614:	f000 fd2a 	bl	800c06c <USBD_GetEpDesc>
 800b618:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b61a:	2101      	movs	r1, #1
 800b61c:	4815      	ldr	r0, [pc, #84]	@ (800b674 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b61e:	f000 fd25 	bl	800c06c <USBD_GetEpDesc>
 800b622:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b624:	2181      	movs	r1, #129	@ 0x81
 800b626:	4813      	ldr	r0, [pc, #76]	@ (800b674 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b628:	f000 fd20 	bl	800c06c <USBD_GetEpDesc>
 800b62c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d002      	beq.n	800b63a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	2210      	movs	r2, #16
 800b638:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d006      	beq.n	800b64e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	2200      	movs	r2, #0
 800b644:	711a      	strb	r2, [r3, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	f042 0202 	orr.w	r2, r2, #2
 800b64c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d006      	beq.n	800b662 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	711a      	strb	r2, [r3, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	f042 0202 	orr.w	r2, r2, #2
 800b660:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2243      	movs	r2, #67	@ 0x43
 800b666:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b668:	4b02      	ldr	r3, [pc, #8]	@ (800b674 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3718      	adds	r7, #24
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	20000050 	.word	0x20000050

0800b678 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b086      	sub	sp, #24
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b680:	2182      	movs	r1, #130	@ 0x82
 800b682:	4818      	ldr	r0, [pc, #96]	@ (800b6e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b684:	f000 fcf2 	bl	800c06c <USBD_GetEpDesc>
 800b688:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b68a:	2101      	movs	r1, #1
 800b68c:	4815      	ldr	r0, [pc, #84]	@ (800b6e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b68e:	f000 fced 	bl	800c06c <USBD_GetEpDesc>
 800b692:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b694:	2181      	movs	r1, #129	@ 0x81
 800b696:	4813      	ldr	r0, [pc, #76]	@ (800b6e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b698:	f000 fce8 	bl	800c06c <USBD_GetEpDesc>
 800b69c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d002      	beq.n	800b6aa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	2210      	movs	r2, #16
 800b6a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d006      	beq.n	800b6be <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6b8:	711a      	strb	r2, [r3, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d006      	beq.n	800b6d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6cc:	711a      	strb	r2, [r3, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2243      	movs	r2, #67	@ 0x43
 800b6d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b6d8:	4b02      	ldr	r3, [pc, #8]	@ (800b6e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3718      	adds	r7, #24
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	20000050 	.word	0x20000050

0800b6e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	220a      	movs	r2, #10
 800b6f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b6f6:	4b03      	ldr	r3, [pc, #12]	@ (800b704 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr
 800b704:	2000000c 	.word	0x2000000c

0800b708 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d101      	bne.n	800b71c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b718:	2303      	movs	r3, #3
 800b71a:	e009      	b.n	800b730 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	33b0      	adds	r3, #176	@ 0xb0
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	4413      	add	r3, r2
 800b72a:	683a      	ldr	r2, [r7, #0]
 800b72c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b72e:	2300      	movs	r3, #0
}
 800b730:	4618      	mov	r0, r3
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b087      	sub	sp, #28
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	32b0      	adds	r2, #176	@ 0xb0
 800b752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b756:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d101      	bne.n	800b762 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b75e:	2303      	movs	r3, #3
 800b760:	e008      	b.n	800b774 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	68ba      	ldr	r2, [r7, #8]
 800b766:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b772:	2300      	movs	r3, #0
}
 800b774:	4618      	mov	r0, r3
 800b776:	371c      	adds	r7, #28
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	32b0      	adds	r2, #176	@ 0xb0
 800b794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b798:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d101      	bne.n	800b7a4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b7a0:	2303      	movs	r3, #3
 800b7a2:	e004      	b.n	800b7ae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	683a      	ldr	r2, [r7, #0]
 800b7a8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3714      	adds	r7, #20
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
	...

0800b7bc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	32b0      	adds	r2, #176	@ 0xb0
 800b7ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d101      	bne.n	800b7e2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b7de:	2303      	movs	r3, #3
 800b7e0:	e025      	b.n	800b82e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d11f      	bne.n	800b82c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b7f4:	4b10      	ldr	r3, [pc, #64]	@ (800b838 <USBD_CDC_TransmitPacket+0x7c>)
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	f003 020f 	and.w	r2, r3, #15
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	4613      	mov	r3, r2
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	4413      	add	r3, r2
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	4403      	add	r3, r0
 800b80e:	3314      	adds	r3, #20
 800b810:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b812:	4b09      	ldr	r3, [pc, #36]	@ (800b838 <USBD_CDC_TransmitPacket+0x7c>)
 800b814:	7819      	ldrb	r1, [r3, #0]
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f00f fec1 	bl	801b5aa <USBD_LL_Transmit>

    ret = USBD_OK;
 800b828:	2300      	movs	r3, #0
 800b82a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b82c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	20000093 	.word	0x20000093

0800b83c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	32b0      	adds	r2, #176	@ 0xb0
 800b84e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b852:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	32b0      	adds	r2, #176	@ 0xb0
 800b85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d101      	bne.n	800b86a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b866:	2303      	movs	r3, #3
 800b868:	e018      	b.n	800b89c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	7c1b      	ldrb	r3, [r3, #16]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10a      	bne.n	800b888 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b872:	4b0c      	ldr	r3, [pc, #48]	@ (800b8a4 <USBD_CDC_ReceivePacket+0x68>)
 800b874:	7819      	ldrb	r1, [r3, #0]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b87c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f00f feb3 	bl	801b5ec <USBD_LL_PrepareReceive>
 800b886:	e008      	b.n	800b89a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b888:	4b06      	ldr	r3, [pc, #24]	@ (800b8a4 <USBD_CDC_ReceivePacket+0x68>)
 800b88a:	7819      	ldrb	r1, [r3, #0]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b892:	2340      	movs	r3, #64	@ 0x40
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f00f fea9 	bl	801b5ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b89a:	2300      	movs	r3, #0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3710      	adds	r7, #16
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	20000094 	.word	0x20000094

0800b8a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b086      	sub	sp, #24
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d101      	bne.n	800b8c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	e01f      	b.n	800b900 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d003      	beq.n	800b8e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	68ba      	ldr	r2, [r7, #8]
 800b8e2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	79fa      	ldrb	r2, [r7, #7]
 800b8f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f00f fd23 	bl	801b340 <USBD_LL_Init>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b8fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800b900:	4618      	mov	r0, r3
 800b902:	3718      	adds	r7, #24
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b912:	2300      	movs	r3, #0
 800b914:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d101      	bne.n	800b920 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b91c:	2303      	movs	r3, #3
 800b91e:	e025      	b.n	800b96c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	683a      	ldr	r2, [r7, #0]
 800b924:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	32ae      	adds	r2, #174	@ 0xae
 800b932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d00f      	beq.n	800b95c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	32ae      	adds	r2, #174	@ 0xae
 800b946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b94c:	f107 020e 	add.w	r2, r7, #14
 800b950:	4610      	mov	r0, r2
 800b952:	4798      	blx	r3
 800b954:	4602      	mov	r2, r0
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b962:	1c5a      	adds	r2, r3, #1
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3710      	adds	r7, #16
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f00f fd2b 	bl	801b3d8 <USBD_LL_Start>
 800b982:	4603      	mov	r3, r0
}
 800b984:	4618      	mov	r0, r3
 800b986:	3708      	adds	r7, #8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b994:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b996:	4618      	mov	r0, r3
 800b998:	370c      	adds	r7, #12
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr

0800b9a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b084      	sub	sp, #16
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d009      	beq.n	800b9d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	78fa      	ldrb	r2, [r7, #3]
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	4798      	blx	r3
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b084      	sub	sp, #16
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	78fa      	ldrb	r2, [r7, #3]
 800b9f4:	4611      	mov	r1, r2
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	4798      	blx	r3
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d001      	beq.n	800ba04 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ba00:	2303      	movs	r3, #3
 800ba02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b084      	sub	sp, #16
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
 800ba16:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ba1e:	6839      	ldr	r1, [r7, #0]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f001 f922 	bl	800cc6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ba34:	461a      	mov	r2, r3
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ba42:	f003 031f 	and.w	r3, r3, #31
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	d01a      	beq.n	800ba80 <USBD_LL_SetupStage+0x72>
 800ba4a:	2b02      	cmp	r3, #2
 800ba4c:	d822      	bhi.n	800ba94 <USBD_LL_SetupStage+0x86>
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d002      	beq.n	800ba58 <USBD_LL_SetupStage+0x4a>
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d00a      	beq.n	800ba6c <USBD_LL_SetupStage+0x5e>
 800ba56:	e01d      	b.n	800ba94 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ba5e:	4619      	mov	r1, r3
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 fb77 	bl	800c154 <USBD_StdDevReq>
 800ba66:	4603      	mov	r3, r0
 800ba68:	73fb      	strb	r3, [r7, #15]
      break;
 800ba6a:	e020      	b.n	800baae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ba72:	4619      	mov	r1, r3
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 fbdf 	bl	800c238 <USBD_StdItfReq>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba7e:	e016      	b.n	800baae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ba86:	4619      	mov	r1, r3
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 fc41 	bl	800c310 <USBD_StdEPReq>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	73fb      	strb	r3, [r7, #15]
      break;
 800ba92:	e00c      	b.n	800baae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ba9a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	4619      	mov	r1, r3
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f00f fcf8 	bl	801b498 <USBD_LL_StallEP>
 800baa8:	4603      	mov	r3, r0
 800baaa:	73fb      	strb	r3, [r7, #15]
      break;
 800baac:	bf00      	nop
  }

  return ret;
 800baae:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b086      	sub	sp, #24
 800babc:	af00      	add	r7, sp, #0
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	460b      	mov	r3, r1
 800bac2:	607a      	str	r2, [r7, #4]
 800bac4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bac6:	2300      	movs	r3, #0
 800bac8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800baca:	7afb      	ldrb	r3, [r7, #11]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d177      	bne.n	800bbc0 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bad6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bade:	2b03      	cmp	r3, #3
 800bae0:	f040 80a1 	bne.w	800bc26 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	693a      	ldr	r2, [r7, #16]
 800baea:	8992      	ldrh	r2, [r2, #12]
 800baec:	4293      	cmp	r3, r2
 800baee:	d91c      	bls.n	800bb2a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	693a      	ldr	r2, [r7, #16]
 800baf6:	8992      	ldrh	r2, [r2, #12]
 800baf8:	1a9a      	subs	r2, r3, r2
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	693a      	ldr	r2, [r7, #16]
 800bb04:	8992      	ldrh	r2, [r2, #12]
 800bb06:	441a      	add	r2, r3
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	6919      	ldr	r1, [r3, #16]
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	899b      	ldrh	r3, [r3, #12]
 800bb14:	461a      	mov	r2, r3
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	bf38      	it	cc
 800bb1e:	4613      	movcc	r3, r2
 800bb20:	461a      	mov	r2, r3
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f001 f9a8 	bl	800ce78 <USBD_CtlContinueRx>
 800bb28:	e07d      	b.n	800bc26 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb30:	f003 031f 	and.w	r3, r3, #31
 800bb34:	2b02      	cmp	r3, #2
 800bb36:	d014      	beq.n	800bb62 <USBD_LL_DataOutStage+0xaa>
 800bb38:	2b02      	cmp	r3, #2
 800bb3a:	d81d      	bhi.n	800bb78 <USBD_LL_DataOutStage+0xc0>
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d002      	beq.n	800bb46 <USBD_LL_DataOutStage+0x8e>
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d003      	beq.n	800bb4c <USBD_LL_DataOutStage+0x94>
 800bb44:	e018      	b.n	800bb78 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bb46:	2300      	movs	r3, #0
 800bb48:	75bb      	strb	r3, [r7, #22]
            break;
 800bb4a:	e018      	b.n	800bb7e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	4619      	mov	r1, r3
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	f000 fa6e 	bl	800c038 <USBD_CoreFindIF>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	75bb      	strb	r3, [r7, #22]
            break;
 800bb60:	e00d      	b.n	800bb7e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	68f8      	ldr	r0, [r7, #12]
 800bb6e:	f000 fa70 	bl	800c052 <USBD_CoreFindEP>
 800bb72:	4603      	mov	r3, r0
 800bb74:	75bb      	strb	r3, [r7, #22]
            break;
 800bb76:	e002      	b.n	800bb7e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	75bb      	strb	r3, [r7, #22]
            break;
 800bb7c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bb7e:	7dbb      	ldrb	r3, [r7, #22]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d119      	bne.n	800bbb8 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	2b03      	cmp	r3, #3
 800bb8e:	d113      	bne.n	800bbb8 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bb90:	7dba      	ldrb	r2, [r7, #22]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	32ae      	adds	r2, #174	@ 0xae
 800bb96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb9a:	691b      	ldr	r3, [r3, #16]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d00b      	beq.n	800bbb8 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800bba0:	7dba      	ldrb	r2, [r7, #22]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bba8:	7dba      	ldrb	r2, [r7, #22]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	32ae      	adds	r2, #174	@ 0xae
 800bbae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbb2:	691b      	ldr	r3, [r3, #16]
 800bbb4:	68f8      	ldr	r0, [r7, #12]
 800bbb6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bbb8:	68f8      	ldr	r0, [r7, #12]
 800bbba:	f001 f96e 	bl	800ce9a <USBD_CtlSendStatus>
 800bbbe:	e032      	b.n	800bc26 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bbc0:	7afb      	ldrb	r3, [r7, #11]
 800bbc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	4619      	mov	r1, r3
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f000 fa41 	bl	800c052 <USBD_CoreFindEP>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bbd4:	7dbb      	ldrb	r3, [r7, #22]
 800bbd6:	2bff      	cmp	r3, #255	@ 0xff
 800bbd8:	d025      	beq.n	800bc26 <USBD_LL_DataOutStage+0x16e>
 800bbda:	7dbb      	ldrb	r3, [r7, #22]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d122      	bne.n	800bc26 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	2b03      	cmp	r3, #3
 800bbea:	d117      	bne.n	800bc1c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bbec:	7dba      	ldrb	r2, [r7, #22]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	32ae      	adds	r2, #174	@ 0xae
 800bbf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbf6:	699b      	ldr	r3, [r3, #24]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00f      	beq.n	800bc1c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800bbfc:	7dba      	ldrb	r2, [r7, #22]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bc04:	7dba      	ldrb	r2, [r7, #22]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	32ae      	adds	r2, #174	@ 0xae
 800bc0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc0e:	699b      	ldr	r3, [r3, #24]
 800bc10:	7afa      	ldrb	r2, [r7, #11]
 800bc12:	4611      	mov	r1, r2
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	4798      	blx	r3
 800bc18:	4603      	mov	r3, r0
 800bc1a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bc1c:	7dfb      	ldrb	r3, [r7, #23]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d001      	beq.n	800bc26 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800bc22:	7dfb      	ldrb	r3, [r7, #23]
 800bc24:	e000      	b.n	800bc28 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800bc26:	2300      	movs	r3, #0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3718      	adds	r7, #24
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	460b      	mov	r3, r1
 800bc3a:	607a      	str	r2, [r7, #4]
 800bc3c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800bc3e:	7afb      	ldrb	r3, [r7, #11]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d178      	bne.n	800bd36 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	3314      	adds	r3, #20
 800bc48:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bc50:	2b02      	cmp	r3, #2
 800bc52:	d163      	bne.n	800bd1c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	693a      	ldr	r2, [r7, #16]
 800bc5a:	8992      	ldrh	r2, [r2, #12]
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d91c      	bls.n	800bc9a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	693a      	ldr	r2, [r7, #16]
 800bc66:	8992      	ldrh	r2, [r2, #12]
 800bc68:	1a9a      	subs	r2, r3, r2
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	693a      	ldr	r2, [r7, #16]
 800bc74:	8992      	ldrh	r2, [r2, #12]
 800bc76:	441a      	add	r2, r3
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	6919      	ldr	r1, [r3, #16]
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	461a      	mov	r2, r3
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	f001 f8c4 	bl	800ce14 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	2200      	movs	r2, #0
 800bc90:	2100      	movs	r1, #0
 800bc92:	68f8      	ldr	r0, [r7, #12]
 800bc94:	f00f fcaa 	bl	801b5ec <USBD_LL_PrepareReceive>
 800bc98:	e040      	b.n	800bd1c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	899b      	ldrh	r3, [r3, #12]
 800bc9e:	461a      	mov	r2, r3
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d11c      	bne.n	800bce2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	693a      	ldr	r2, [r7, #16]
 800bcae:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d316      	bcc.n	800bce2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d20f      	bcs.n	800bce2 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	68f8      	ldr	r0, [r7, #12]
 800bcc8:	f001 f8a4 	bl	800ce14 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	2100      	movs	r1, #0
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	f00f fc86 	bl	801b5ec <USBD_LL_PrepareReceive>
 800bce0:	e01c      	b.n	800bd1c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	2b03      	cmp	r3, #3
 800bcec:	d10f      	bne.n	800bd0e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d009      	beq.n	800bd0e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	68f8      	ldr	r0, [r7, #12]
 800bd0c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd0e:	2180      	movs	r1, #128	@ 0x80
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	f00f fbc1 	bl	801b498 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f001 f8d2 	bl	800cec0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d03a      	beq.n	800bd9c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800bd26:	68f8      	ldr	r0, [r7, #12]
 800bd28:	f7ff fe30 	bl	800b98c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bd34:	e032      	b.n	800bd9c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bd36:	7afb      	ldrb	r3, [r7, #11]
 800bd38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	4619      	mov	r1, r3
 800bd40:	68f8      	ldr	r0, [r7, #12]
 800bd42:	f000 f986 	bl	800c052 <USBD_CoreFindEP>
 800bd46:	4603      	mov	r3, r0
 800bd48:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd4a:	7dfb      	ldrb	r3, [r7, #23]
 800bd4c:	2bff      	cmp	r3, #255	@ 0xff
 800bd4e:	d025      	beq.n	800bd9c <USBD_LL_DataInStage+0x16c>
 800bd50:	7dfb      	ldrb	r3, [r7, #23]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d122      	bne.n	800bd9c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	2b03      	cmp	r3, #3
 800bd60:	d11c      	bne.n	800bd9c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bd62:	7dfa      	ldrb	r2, [r7, #23]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	32ae      	adds	r2, #174	@ 0xae
 800bd68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd6c:	695b      	ldr	r3, [r3, #20]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d014      	beq.n	800bd9c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800bd72:	7dfa      	ldrb	r2, [r7, #23]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bd7a:	7dfa      	ldrb	r2, [r7, #23]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	32ae      	adds	r2, #174	@ 0xae
 800bd80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd84:	695b      	ldr	r3, [r3, #20]
 800bd86:	7afa      	ldrb	r2, [r7, #11]
 800bd88:	4611      	mov	r1, r2
 800bd8a:	68f8      	ldr	r0, [r7, #12]
 800bd8c:	4798      	blx	r3
 800bd8e:	4603      	mov	r3, r0
 800bd90:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bd92:	7dbb      	ldrb	r3, [r7, #22]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d001      	beq.n	800bd9c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800bd98:	7dbb      	ldrb	r3, [r7, #22]
 800bd9a:	e000      	b.n	800bd9e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3718      	adds	r7, #24
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b084      	sub	sp, #16
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d014      	beq.n	800be0c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00e      	beq.n	800be0c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	6852      	ldr	r2, [r2, #4]
 800bdfa:	b2d2      	uxtb	r2, r2
 800bdfc:	4611      	mov	r1, r2
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	4798      	blx	r3
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d001      	beq.n	800be0c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800be08:	2303      	movs	r3, #3
 800be0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be0c:	2340      	movs	r3, #64	@ 0x40
 800be0e:	2200      	movs	r2, #0
 800be10:	2100      	movs	r1, #0
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f00f fafb 	bl	801b40e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2201      	movs	r2, #1
 800be1c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2240      	movs	r2, #64	@ 0x40
 800be24:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be28:	2340      	movs	r3, #64	@ 0x40
 800be2a:	2200      	movs	r2, #0
 800be2c:	2180      	movs	r1, #128	@ 0x80
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f00f faed 	bl	801b40e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2201      	movs	r2, #1
 800be38:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2240      	movs	r2, #64	@ 0x40
 800be40:	841a      	strh	r2, [r3, #32]

  return ret;
 800be42:	7bfb      	ldrb	r3, [r7, #15]
}
 800be44:	4618      	mov	r0, r3
 800be46:	3710      	adds	r7, #16
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	460b      	mov	r3, r1
 800be56:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	78fa      	ldrb	r2, [r7, #3]
 800be5c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800be5e:	2300      	movs	r3, #0
}
 800be60:	4618      	mov	r0, r3
 800be62:	370c      	adds	r7, #12
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	2b04      	cmp	r3, #4
 800be7e:	d006      	beq.n	800be8e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be86:	b2da      	uxtb	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2204      	movs	r2, #4
 800be92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	2b04      	cmp	r3, #4
 800beb6:	d106      	bne.n	800bec6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bebe:	b2da      	uxtb	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	370c      	adds	r7, #12
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	2b03      	cmp	r3, #3
 800bee6:	d110      	bne.n	800bf0a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00b      	beq.n	800bf0a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bef8:	69db      	ldr	r3, [r3, #28]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d005      	beq.n	800bf0a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf04:	69db      	ldr	r3, [r3, #28]
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bf0a:	2300      	movs	r3, #0
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	32ae      	adds	r2, #174	@ 0xae
 800bf2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d101      	bne.n	800bf36 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bf32:	2303      	movs	r3, #3
 800bf34:	e01c      	b.n	800bf70 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	2b03      	cmp	r3, #3
 800bf40:	d115      	bne.n	800bf6e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	32ae      	adds	r2, #174	@ 0xae
 800bf4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf50:	6a1b      	ldr	r3, [r3, #32]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00b      	beq.n	800bf6e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	32ae      	adds	r2, #174	@ 0xae
 800bf60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf64:	6a1b      	ldr	r3, [r3, #32]
 800bf66:	78fa      	ldrb	r2, [r7, #3]
 800bf68:	4611      	mov	r1, r2
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf6e:	2300      	movs	r3, #0
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	460b      	mov	r3, r1
 800bf82:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	32ae      	adds	r2, #174	@ 0xae
 800bf8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d101      	bne.n	800bf9a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bf96:	2303      	movs	r3, #3
 800bf98:	e01c      	b.n	800bfd4 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	2b03      	cmp	r3, #3
 800bfa4:	d115      	bne.n	800bfd2 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	32ae      	adds	r2, #174	@ 0xae
 800bfb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d00b      	beq.n	800bfd2 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	32ae      	adds	r2, #174	@ 0xae
 800bfc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfca:	78fa      	ldrb	r2, [r7, #3]
 800bfcc:	4611      	mov	r1, r2
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bfd2:	2300      	movs	r3, #0
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3708      	adds	r7, #8
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bfe4:	2300      	movs	r3, #0
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	370c      	adds	r7, #12
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr

0800bff2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bff2:	b580      	push	{r7, lr}
 800bff4:	b084      	sub	sp, #16
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bffa:	2300      	movs	r3, #0
 800bffc:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2201      	movs	r2, #1
 800c002:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d00e      	beq.n	800c02e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	6852      	ldr	r2, [r2, #4]
 800c01c:	b2d2      	uxtb	r2, r2
 800c01e:	4611      	mov	r1, r2
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	4798      	blx	r3
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d001      	beq.n	800c02e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c02a:	2303      	movs	r3, #3
 800c02c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	460b      	mov	r3, r1
 800c042:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c044:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c046:	4618      	mov	r0, r3
 800c048:	370c      	adds	r7, #12
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr

0800c052 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c052:	b480      	push	{r7}
 800c054:	b083      	sub	sp, #12
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
 800c05a:	460b      	mov	r3, r1
 800c05c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c05e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c060:	4618      	mov	r0, r3
 800c062:	370c      	adds	r7, #12
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr

0800c06c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b086      	sub	sp, #24
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	460b      	mov	r3, r1
 800c076:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c080:	2300      	movs	r3, #0
 800c082:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	885b      	ldrh	r3, [r3, #2]
 800c088:	b29b      	uxth	r3, r3
 800c08a:	68fa      	ldr	r2, [r7, #12]
 800c08c:	7812      	ldrb	r2, [r2, #0]
 800c08e:	4293      	cmp	r3, r2
 800c090:	d91f      	bls.n	800c0d2 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c098:	e013      	b.n	800c0c2 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c09a:	f107 030a 	add.w	r3, r7, #10
 800c09e:	4619      	mov	r1, r3
 800c0a0:	6978      	ldr	r0, [r7, #20]
 800c0a2:	f000 f81b 	bl	800c0dc <USBD_GetNextDesc>
 800c0a6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	785b      	ldrb	r3, [r3, #1]
 800c0ac:	2b05      	cmp	r3, #5
 800c0ae:	d108      	bne.n	800c0c2 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	789b      	ldrb	r3, [r3, #2]
 800c0b8:	78fa      	ldrb	r2, [r7, #3]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d008      	beq.n	800c0d0 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	885b      	ldrh	r3, [r3, #2]
 800c0c6:	b29a      	uxth	r2, r3
 800c0c8:	897b      	ldrh	r3, [r7, #10]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d8e5      	bhi.n	800c09a <USBD_GetEpDesc+0x2e>
 800c0ce:	e000      	b.n	800c0d2 <USBD_GetEpDesc+0x66>
          break;
 800c0d0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c0d2:	693b      	ldr	r3, [r7, #16]
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3718      	adds	r7, #24
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	881b      	ldrh	r3, [r3, #0]
 800c0ee:	68fa      	ldr	r2, [r7, #12]
 800c0f0:	7812      	ldrb	r2, [r2, #0]
 800c0f2:	4413      	add	r3, r2
 800c0f4:	b29a      	uxth	r2, r3
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	461a      	mov	r2, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	4413      	add	r3, r2
 800c104:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c106:	68fb      	ldr	r3, [r7, #12]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3714      	adds	r7, #20
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c114:	b480      	push	{r7}
 800c116:	b087      	sub	sp, #28
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	3301      	adds	r3, #1
 800c12a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c132:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c136:	021b      	lsls	r3, r3, #8
 800c138:	b21a      	sxth	r2, r3
 800c13a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c13e:	4313      	orrs	r3, r2
 800c140:	b21b      	sxth	r3, r3
 800c142:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c144:	89fb      	ldrh	r3, [r7, #14]
}
 800c146:	4618      	mov	r0, r3
 800c148:	371c      	adds	r7, #28
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr
	...

0800c154 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c15e:	2300      	movs	r3, #0
 800c160:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c16a:	2b40      	cmp	r3, #64	@ 0x40
 800c16c:	d005      	beq.n	800c17a <USBD_StdDevReq+0x26>
 800c16e:	2b40      	cmp	r3, #64	@ 0x40
 800c170:	d857      	bhi.n	800c222 <USBD_StdDevReq+0xce>
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00f      	beq.n	800c196 <USBD_StdDevReq+0x42>
 800c176:	2b20      	cmp	r3, #32
 800c178:	d153      	bne.n	800c222 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	32ae      	adds	r2, #174	@ 0xae
 800c184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	6839      	ldr	r1, [r7, #0]
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	4798      	blx	r3
 800c190:	4603      	mov	r3, r0
 800c192:	73fb      	strb	r3, [r7, #15]
      break;
 800c194:	e04a      	b.n	800c22c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	785b      	ldrb	r3, [r3, #1]
 800c19a:	2b09      	cmp	r3, #9
 800c19c:	d83b      	bhi.n	800c216 <USBD_StdDevReq+0xc2>
 800c19e:	a201      	add	r2, pc, #4	@ (adr r2, 800c1a4 <USBD_StdDevReq+0x50>)
 800c1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a4:	0800c1f9 	.word	0x0800c1f9
 800c1a8:	0800c20d 	.word	0x0800c20d
 800c1ac:	0800c217 	.word	0x0800c217
 800c1b0:	0800c203 	.word	0x0800c203
 800c1b4:	0800c217 	.word	0x0800c217
 800c1b8:	0800c1d7 	.word	0x0800c1d7
 800c1bc:	0800c1cd 	.word	0x0800c1cd
 800c1c0:	0800c217 	.word	0x0800c217
 800c1c4:	0800c1ef 	.word	0x0800c1ef
 800c1c8:	0800c1e1 	.word	0x0800c1e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c1cc:	6839      	ldr	r1, [r7, #0]
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 fa3e 	bl	800c650 <USBD_GetDescriptor>
          break;
 800c1d4:	e024      	b.n	800c220 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c1d6:	6839      	ldr	r1, [r7, #0]
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 fba3 	bl	800c924 <USBD_SetAddress>
          break;
 800c1de:	e01f      	b.n	800c220 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c1e0:	6839      	ldr	r1, [r7, #0]
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 fbe2 	bl	800c9ac <USBD_SetConfig>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	73fb      	strb	r3, [r7, #15]
          break;
 800c1ec:	e018      	b.n	800c220 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c1ee:	6839      	ldr	r1, [r7, #0]
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 fc85 	bl	800cb00 <USBD_GetConfig>
          break;
 800c1f6:	e013      	b.n	800c220 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c1f8:	6839      	ldr	r1, [r7, #0]
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 fcb6 	bl	800cb6c <USBD_GetStatus>
          break;
 800c200:	e00e      	b.n	800c220 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c202:	6839      	ldr	r1, [r7, #0]
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 fce5 	bl	800cbd4 <USBD_SetFeature>
          break;
 800c20a:	e009      	b.n	800c220 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c20c:	6839      	ldr	r1, [r7, #0]
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 fd09 	bl	800cc26 <USBD_ClrFeature>
          break;
 800c214:	e004      	b.n	800c220 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c216:	6839      	ldr	r1, [r7, #0]
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f000 fd60 	bl	800ccde <USBD_CtlError>
          break;
 800c21e:	bf00      	nop
      }
      break;
 800c220:	e004      	b.n	800c22c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c222:	6839      	ldr	r1, [r7, #0]
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 fd5a 	bl	800ccde <USBD_CtlError>
      break;
 800c22a:	bf00      	nop
  }

  return ret;
 800c22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3710      	adds	r7, #16
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop

0800c238 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c242:	2300      	movs	r3, #0
 800c244:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c24e:	2b40      	cmp	r3, #64	@ 0x40
 800c250:	d005      	beq.n	800c25e <USBD_StdItfReq+0x26>
 800c252:	2b40      	cmp	r3, #64	@ 0x40
 800c254:	d852      	bhi.n	800c2fc <USBD_StdItfReq+0xc4>
 800c256:	2b00      	cmp	r3, #0
 800c258:	d001      	beq.n	800c25e <USBD_StdItfReq+0x26>
 800c25a:	2b20      	cmp	r3, #32
 800c25c:	d14e      	bne.n	800c2fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c264:	b2db      	uxtb	r3, r3
 800c266:	3b01      	subs	r3, #1
 800c268:	2b02      	cmp	r3, #2
 800c26a:	d840      	bhi.n	800c2ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	889b      	ldrh	r3, [r3, #4]
 800c270:	b2db      	uxtb	r3, r3
 800c272:	2b01      	cmp	r3, #1
 800c274:	d836      	bhi.n	800c2e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	889b      	ldrh	r3, [r3, #4]
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	4619      	mov	r1, r3
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f7ff feda 	bl	800c038 <USBD_CoreFindIF>
 800c284:	4603      	mov	r3, r0
 800c286:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c288:	7bbb      	ldrb	r3, [r7, #14]
 800c28a:	2bff      	cmp	r3, #255	@ 0xff
 800c28c:	d01d      	beq.n	800c2ca <USBD_StdItfReq+0x92>
 800c28e:	7bbb      	ldrb	r3, [r7, #14]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d11a      	bne.n	800c2ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c294:	7bba      	ldrb	r2, [r7, #14]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	32ae      	adds	r2, #174	@ 0xae
 800c29a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c29e:	689b      	ldr	r3, [r3, #8]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d00f      	beq.n	800c2c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c2a4:	7bba      	ldrb	r2, [r7, #14]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c2ac:	7bba      	ldrb	r2, [r7, #14]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	32ae      	adds	r2, #174	@ 0xae
 800c2b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	6839      	ldr	r1, [r7, #0]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	4798      	blx	r3
 800c2be:	4603      	mov	r3, r0
 800c2c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c2c2:	e004      	b.n	800c2ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c2c4:	2303      	movs	r3, #3
 800c2c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c2c8:	e001      	b.n	800c2ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c2ca:	2303      	movs	r3, #3
 800c2cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	88db      	ldrh	r3, [r3, #6]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d110      	bne.n	800c2f8 <USBD_StdItfReq+0xc0>
 800c2d6:	7bfb      	ldrb	r3, [r7, #15]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d10d      	bne.n	800c2f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 fddc 	bl	800ce9a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c2e2:	e009      	b.n	800c2f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c2e4:	6839      	ldr	r1, [r7, #0]
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 fcf9 	bl	800ccde <USBD_CtlError>
          break;
 800c2ec:	e004      	b.n	800c2f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c2ee:	6839      	ldr	r1, [r7, #0]
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fcf4 	bl	800ccde <USBD_CtlError>
          break;
 800c2f6:	e000      	b.n	800c2fa <USBD_StdItfReq+0xc2>
          break;
 800c2f8:	bf00      	nop
      }
      break;
 800c2fa:	e004      	b.n	800c306 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fced 	bl	800ccde <USBD_CtlError>
      break;
 800c304:	bf00      	nop
  }

  return ret;
 800c306:	7bfb      	ldrb	r3, [r7, #15]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c31a:	2300      	movs	r3, #0
 800c31c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	889b      	ldrh	r3, [r3, #4]
 800c322:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c32c:	2b40      	cmp	r3, #64	@ 0x40
 800c32e:	d007      	beq.n	800c340 <USBD_StdEPReq+0x30>
 800c330:	2b40      	cmp	r3, #64	@ 0x40
 800c332:	f200 8181 	bhi.w	800c638 <USBD_StdEPReq+0x328>
 800c336:	2b00      	cmp	r3, #0
 800c338:	d02a      	beq.n	800c390 <USBD_StdEPReq+0x80>
 800c33a:	2b20      	cmp	r3, #32
 800c33c:	f040 817c 	bne.w	800c638 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c340:	7bbb      	ldrb	r3, [r7, #14]
 800c342:	4619      	mov	r1, r3
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7ff fe84 	bl	800c052 <USBD_CoreFindEP>
 800c34a:	4603      	mov	r3, r0
 800c34c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c34e:	7b7b      	ldrb	r3, [r7, #13]
 800c350:	2bff      	cmp	r3, #255	@ 0xff
 800c352:	f000 8176 	beq.w	800c642 <USBD_StdEPReq+0x332>
 800c356:	7b7b      	ldrb	r3, [r7, #13]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f040 8172 	bne.w	800c642 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800c35e:	7b7a      	ldrb	r2, [r7, #13]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c366:	7b7a      	ldrb	r2, [r7, #13]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	32ae      	adds	r2, #174	@ 0xae
 800c36c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c370:	689b      	ldr	r3, [r3, #8]
 800c372:	2b00      	cmp	r3, #0
 800c374:	f000 8165 	beq.w	800c642 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c378:	7b7a      	ldrb	r2, [r7, #13]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	32ae      	adds	r2, #174	@ 0xae
 800c37e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	6839      	ldr	r1, [r7, #0]
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	4798      	blx	r3
 800c38a:	4603      	mov	r3, r0
 800c38c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c38e:	e158      	b.n	800c642 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	785b      	ldrb	r3, [r3, #1]
 800c394:	2b03      	cmp	r3, #3
 800c396:	d008      	beq.n	800c3aa <USBD_StdEPReq+0x9a>
 800c398:	2b03      	cmp	r3, #3
 800c39a:	f300 8147 	bgt.w	800c62c <USBD_StdEPReq+0x31c>
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	f000 809b 	beq.w	800c4da <USBD_StdEPReq+0x1ca>
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d03c      	beq.n	800c422 <USBD_StdEPReq+0x112>
 800c3a8:	e140      	b.n	800c62c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	2b02      	cmp	r3, #2
 800c3b4:	d002      	beq.n	800c3bc <USBD_StdEPReq+0xac>
 800c3b6:	2b03      	cmp	r3, #3
 800c3b8:	d016      	beq.n	800c3e8 <USBD_StdEPReq+0xd8>
 800c3ba:	e02c      	b.n	800c416 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3bc:	7bbb      	ldrb	r3, [r7, #14]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00d      	beq.n	800c3de <USBD_StdEPReq+0xce>
 800c3c2:	7bbb      	ldrb	r3, [r7, #14]
 800c3c4:	2b80      	cmp	r3, #128	@ 0x80
 800c3c6:	d00a      	beq.n	800c3de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c3c8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f00f f863 	bl	801b498 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3d2:	2180      	movs	r1, #128	@ 0x80
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f00f f85f 	bl	801b498 <USBD_LL_StallEP>
 800c3da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c3dc:	e020      	b.n	800c420 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c3de:	6839      	ldr	r1, [r7, #0]
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f000 fc7c 	bl	800ccde <USBD_CtlError>
              break;
 800c3e6:	e01b      	b.n	800c420 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	885b      	ldrh	r3, [r3, #2]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d10e      	bne.n	800c40e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c3f0:	7bbb      	ldrb	r3, [r7, #14]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d00b      	beq.n	800c40e <USBD_StdEPReq+0xfe>
 800c3f6:	7bbb      	ldrb	r3, [r7, #14]
 800c3f8:	2b80      	cmp	r3, #128	@ 0x80
 800c3fa:	d008      	beq.n	800c40e <USBD_StdEPReq+0xfe>
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	88db      	ldrh	r3, [r3, #6]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d104      	bne.n	800c40e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c404:	7bbb      	ldrb	r3, [r7, #14]
 800c406:	4619      	mov	r1, r3
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f00f f845 	bl	801b498 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 fd43 	bl	800ce9a <USBD_CtlSendStatus>

              break;
 800c414:	e004      	b.n	800c420 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c416:	6839      	ldr	r1, [r7, #0]
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 fc60 	bl	800ccde <USBD_CtlError>
              break;
 800c41e:	bf00      	nop
          }
          break;
 800c420:	e109      	b.n	800c636 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d002      	beq.n	800c434 <USBD_StdEPReq+0x124>
 800c42e:	2b03      	cmp	r3, #3
 800c430:	d016      	beq.n	800c460 <USBD_StdEPReq+0x150>
 800c432:	e04b      	b.n	800c4cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c434:	7bbb      	ldrb	r3, [r7, #14]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00d      	beq.n	800c456 <USBD_StdEPReq+0x146>
 800c43a:	7bbb      	ldrb	r3, [r7, #14]
 800c43c:	2b80      	cmp	r3, #128	@ 0x80
 800c43e:	d00a      	beq.n	800c456 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c440:	7bbb      	ldrb	r3, [r7, #14]
 800c442:	4619      	mov	r1, r3
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f00f f827 	bl	801b498 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c44a:	2180      	movs	r1, #128	@ 0x80
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f00f f823 	bl	801b498 <USBD_LL_StallEP>
 800c452:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c454:	e040      	b.n	800c4d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c456:	6839      	ldr	r1, [r7, #0]
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f000 fc40 	bl	800ccde <USBD_CtlError>
              break;
 800c45e:	e03b      	b.n	800c4d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	885b      	ldrh	r3, [r3, #2]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d136      	bne.n	800c4d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c468:	7bbb      	ldrb	r3, [r7, #14]
 800c46a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d004      	beq.n	800c47c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c472:	7bbb      	ldrb	r3, [r7, #14]
 800c474:	4619      	mov	r1, r3
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f00f f82d 	bl	801b4d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 fd0c 	bl	800ce9a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c482:	7bbb      	ldrb	r3, [r7, #14]
 800c484:	4619      	mov	r1, r3
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f7ff fde3 	bl	800c052 <USBD_CoreFindEP>
 800c48c:	4603      	mov	r3, r0
 800c48e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c490:	7b7b      	ldrb	r3, [r7, #13]
 800c492:	2bff      	cmp	r3, #255	@ 0xff
 800c494:	d01f      	beq.n	800c4d6 <USBD_StdEPReq+0x1c6>
 800c496:	7b7b      	ldrb	r3, [r7, #13]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d11c      	bne.n	800c4d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c49c:	7b7a      	ldrb	r2, [r7, #13]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c4a4:	7b7a      	ldrb	r2, [r7, #13]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	32ae      	adds	r2, #174	@ 0xae
 800c4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ae:	689b      	ldr	r3, [r3, #8]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d010      	beq.n	800c4d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c4b4:	7b7a      	ldrb	r2, [r7, #13]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	32ae      	adds	r2, #174	@ 0xae
 800c4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	6839      	ldr	r1, [r7, #0]
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	4798      	blx	r3
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c4ca:	e004      	b.n	800c4d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c4cc:	6839      	ldr	r1, [r7, #0]
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fc05 	bl	800ccde <USBD_CtlError>
              break;
 800c4d4:	e000      	b.n	800c4d8 <USBD_StdEPReq+0x1c8>
              break;
 800c4d6:	bf00      	nop
          }
          break;
 800c4d8:	e0ad      	b.n	800c636 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	2b02      	cmp	r3, #2
 800c4e4:	d002      	beq.n	800c4ec <USBD_StdEPReq+0x1dc>
 800c4e6:	2b03      	cmp	r3, #3
 800c4e8:	d033      	beq.n	800c552 <USBD_StdEPReq+0x242>
 800c4ea:	e099      	b.n	800c620 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4ec:	7bbb      	ldrb	r3, [r7, #14]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d007      	beq.n	800c502 <USBD_StdEPReq+0x1f2>
 800c4f2:	7bbb      	ldrb	r3, [r7, #14]
 800c4f4:	2b80      	cmp	r3, #128	@ 0x80
 800c4f6:	d004      	beq.n	800c502 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c4f8:	6839      	ldr	r1, [r7, #0]
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 fbef 	bl	800ccde <USBD_CtlError>
                break;
 800c500:	e093      	b.n	800c62a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c502:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c506:	2b00      	cmp	r3, #0
 800c508:	da0b      	bge.n	800c522 <USBD_StdEPReq+0x212>
 800c50a:	7bbb      	ldrb	r3, [r7, #14]
 800c50c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c510:	4613      	mov	r3, r2
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	4413      	add	r3, r2
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	3310      	adds	r3, #16
 800c51a:	687a      	ldr	r2, [r7, #4]
 800c51c:	4413      	add	r3, r2
 800c51e:	3304      	adds	r3, #4
 800c520:	e00b      	b.n	800c53a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c522:	7bbb      	ldrb	r3, [r7, #14]
 800c524:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c528:	4613      	mov	r3, r2
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	4413      	add	r3, r2
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	4413      	add	r3, r2
 800c538:	3304      	adds	r3, #4
 800c53a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	2200      	movs	r2, #0
 800c540:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	330e      	adds	r3, #14
 800c546:	2202      	movs	r2, #2
 800c548:	4619      	mov	r1, r3
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 fc44 	bl	800cdd8 <USBD_CtlSendData>
              break;
 800c550:	e06b      	b.n	800c62a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c552:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c556:	2b00      	cmp	r3, #0
 800c558:	da11      	bge.n	800c57e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c55a:	7bbb      	ldrb	r3, [r7, #14]
 800c55c:	f003 020f 	and.w	r2, r3, #15
 800c560:	6879      	ldr	r1, [r7, #4]
 800c562:	4613      	mov	r3, r2
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	4413      	add	r3, r2
 800c568:	009b      	lsls	r3, r3, #2
 800c56a:	440b      	add	r3, r1
 800c56c:	3323      	adds	r3, #35	@ 0x23
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d117      	bne.n	800c5a4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c574:	6839      	ldr	r1, [r7, #0]
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 fbb1 	bl	800ccde <USBD_CtlError>
                  break;
 800c57c:	e055      	b.n	800c62a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c57e:	7bbb      	ldrb	r3, [r7, #14]
 800c580:	f003 020f 	and.w	r2, r3, #15
 800c584:	6879      	ldr	r1, [r7, #4]
 800c586:	4613      	mov	r3, r2
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	4413      	add	r3, r2
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	440b      	add	r3, r1
 800c590:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d104      	bne.n	800c5a4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c59a:	6839      	ldr	r1, [r7, #0]
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 fb9e 	bl	800ccde <USBD_CtlError>
                  break;
 800c5a2:	e042      	b.n	800c62a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	da0b      	bge.n	800c5c4 <USBD_StdEPReq+0x2b4>
 800c5ac:	7bbb      	ldrb	r3, [r7, #14]
 800c5ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c5b2:	4613      	mov	r3, r2
 800c5b4:	009b      	lsls	r3, r3, #2
 800c5b6:	4413      	add	r3, r2
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	3310      	adds	r3, #16
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	4413      	add	r3, r2
 800c5c0:	3304      	adds	r3, #4
 800c5c2:	e00b      	b.n	800c5dc <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c5c4:	7bbb      	ldrb	r3, [r7, #14]
 800c5c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5ca:	4613      	mov	r3, r2
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	4413      	add	r3, r2
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	4413      	add	r3, r2
 800c5da:	3304      	adds	r3, #4
 800c5dc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c5de:	7bbb      	ldrb	r3, [r7, #14]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d002      	beq.n	800c5ea <USBD_StdEPReq+0x2da>
 800c5e4:	7bbb      	ldrb	r3, [r7, #14]
 800c5e6:	2b80      	cmp	r3, #128	@ 0x80
 800c5e8:	d103      	bne.n	800c5f2 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	739a      	strb	r2, [r3, #14]
 800c5f0:	e00e      	b.n	800c610 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c5f2:	7bbb      	ldrb	r3, [r7, #14]
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f00e ff8c 	bl	801b514 <USBD_LL_IsStallEP>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d003      	beq.n	800c60a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	2201      	movs	r2, #1
 800c606:	739a      	strb	r2, [r3, #14]
 800c608:	e002      	b.n	800c610 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	2200      	movs	r2, #0
 800c60e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	330e      	adds	r3, #14
 800c614:	2202      	movs	r2, #2
 800c616:	4619      	mov	r1, r3
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f000 fbdd 	bl	800cdd8 <USBD_CtlSendData>
              break;
 800c61e:	e004      	b.n	800c62a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800c620:	6839      	ldr	r1, [r7, #0]
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 fb5b 	bl	800ccde <USBD_CtlError>
              break;
 800c628:	bf00      	nop
          }
          break;
 800c62a:	e004      	b.n	800c636 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800c62c:	6839      	ldr	r1, [r7, #0]
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 fb55 	bl	800ccde <USBD_CtlError>
          break;
 800c634:	bf00      	nop
      }
      break;
 800c636:	e005      	b.n	800c644 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800c638:	6839      	ldr	r1, [r7, #0]
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 fb4f 	bl	800ccde <USBD_CtlError>
      break;
 800c640:	e000      	b.n	800c644 <USBD_StdEPReq+0x334>
      break;
 800c642:	bf00      	nop
  }

  return ret;
 800c644:	7bfb      	ldrb	r3, [r7, #15]
}
 800c646:	4618      	mov	r0, r3
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
	...

0800c650 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c65a:	2300      	movs	r3, #0
 800c65c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c65e:	2300      	movs	r3, #0
 800c660:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c662:	2300      	movs	r3, #0
 800c664:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	885b      	ldrh	r3, [r3, #2]
 800c66a:	0a1b      	lsrs	r3, r3, #8
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	3b01      	subs	r3, #1
 800c670:	2b06      	cmp	r3, #6
 800c672:	f200 8128 	bhi.w	800c8c6 <USBD_GetDescriptor+0x276>
 800c676:	a201      	add	r2, pc, #4	@ (adr r2, 800c67c <USBD_GetDescriptor+0x2c>)
 800c678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c67c:	0800c699 	.word	0x0800c699
 800c680:	0800c6b1 	.word	0x0800c6b1
 800c684:	0800c6f1 	.word	0x0800c6f1
 800c688:	0800c8c7 	.word	0x0800c8c7
 800c68c:	0800c8c7 	.word	0x0800c8c7
 800c690:	0800c867 	.word	0x0800c867
 800c694:	0800c893 	.word	0x0800c893
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	7c12      	ldrb	r2, [r2, #16]
 800c6a4:	f107 0108 	add.w	r1, r7, #8
 800c6a8:	4610      	mov	r0, r2
 800c6aa:	4798      	blx	r3
 800c6ac:	60f8      	str	r0, [r7, #12]
      break;
 800c6ae:	e112      	b.n	800c8d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	7c1b      	ldrb	r3, [r3, #16]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d10d      	bne.n	800c6d4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6c0:	f107 0208 	add.w	r2, r7, #8
 800c6c4:	4610      	mov	r0, r2
 800c6c6:	4798      	blx	r3
 800c6c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	2202      	movs	r2, #2
 800c6d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c6d2:	e100      	b.n	800c8d6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6dc:	f107 0208 	add.w	r2, r7, #8
 800c6e0:	4610      	mov	r0, r2
 800c6e2:	4798      	blx	r3
 800c6e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	2202      	movs	r2, #2
 800c6ec:	701a      	strb	r2, [r3, #0]
      break;
 800c6ee:	e0f2      	b.n	800c8d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	885b      	ldrh	r3, [r3, #2]
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	2b05      	cmp	r3, #5
 800c6f8:	f200 80ac 	bhi.w	800c854 <USBD_GetDescriptor+0x204>
 800c6fc:	a201      	add	r2, pc, #4	@ (adr r2, 800c704 <USBD_GetDescriptor+0xb4>)
 800c6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c702:	bf00      	nop
 800c704:	0800c71d 	.word	0x0800c71d
 800c708:	0800c751 	.word	0x0800c751
 800c70c:	0800c785 	.word	0x0800c785
 800c710:	0800c7b9 	.word	0x0800c7b9
 800c714:	0800c7ed 	.word	0x0800c7ed
 800c718:	0800c821 	.word	0x0800c821
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d00b      	beq.n	800c740 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	7c12      	ldrb	r2, [r2, #16]
 800c734:	f107 0108 	add.w	r1, r7, #8
 800c738:	4610      	mov	r0, r2
 800c73a:	4798      	blx	r3
 800c73c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c73e:	e091      	b.n	800c864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c740:	6839      	ldr	r1, [r7, #0]
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 facb 	bl	800ccde <USBD_CtlError>
            err++;
 800c748:	7afb      	ldrb	r3, [r7, #11]
 800c74a:	3301      	adds	r3, #1
 800c74c:	72fb      	strb	r3, [r7, #11]
          break;
 800c74e:	e089      	b.n	800c864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c756:	689b      	ldr	r3, [r3, #8]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d00b      	beq.n	800c774 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c762:	689b      	ldr	r3, [r3, #8]
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	7c12      	ldrb	r2, [r2, #16]
 800c768:	f107 0108 	add.w	r1, r7, #8
 800c76c:	4610      	mov	r0, r2
 800c76e:	4798      	blx	r3
 800c770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c772:	e077      	b.n	800c864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c774:	6839      	ldr	r1, [r7, #0]
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 fab1 	bl	800ccde <USBD_CtlError>
            err++;
 800c77c:	7afb      	ldrb	r3, [r7, #11]
 800c77e:	3301      	adds	r3, #1
 800c780:	72fb      	strb	r3, [r7, #11]
          break;
 800c782:	e06f      	b.n	800c864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00b      	beq.n	800c7a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	7c12      	ldrb	r2, [r2, #16]
 800c79c:	f107 0108 	add.w	r1, r7, #8
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	4798      	blx	r3
 800c7a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7a6:	e05d      	b.n	800c864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c7a8:	6839      	ldr	r1, [r7, #0]
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 fa97 	bl	800ccde <USBD_CtlError>
            err++;
 800c7b0:	7afb      	ldrb	r3, [r7, #11]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c7b6:	e055      	b.n	800c864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7be:	691b      	ldr	r3, [r3, #16]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00b      	beq.n	800c7dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7ca:	691b      	ldr	r3, [r3, #16]
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	7c12      	ldrb	r2, [r2, #16]
 800c7d0:	f107 0108 	add.w	r1, r7, #8
 800c7d4:	4610      	mov	r0, r2
 800c7d6:	4798      	blx	r3
 800c7d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7da:	e043      	b.n	800c864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c7dc:	6839      	ldr	r1, [r7, #0]
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 fa7d 	bl	800ccde <USBD_CtlError>
            err++;
 800c7e4:	7afb      	ldrb	r3, [r7, #11]
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c7ea:	e03b      	b.n	800c864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7f2:	695b      	ldr	r3, [r3, #20]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d00b      	beq.n	800c810 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7fe:	695b      	ldr	r3, [r3, #20]
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	7c12      	ldrb	r2, [r2, #16]
 800c804:	f107 0108 	add.w	r1, r7, #8
 800c808:	4610      	mov	r0, r2
 800c80a:	4798      	blx	r3
 800c80c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c80e:	e029      	b.n	800c864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c810:	6839      	ldr	r1, [r7, #0]
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 fa63 	bl	800ccde <USBD_CtlError>
            err++;
 800c818:	7afb      	ldrb	r3, [r7, #11]
 800c81a:	3301      	adds	r3, #1
 800c81c:	72fb      	strb	r3, [r7, #11]
          break;
 800c81e:	e021      	b.n	800c864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c826:	699b      	ldr	r3, [r3, #24]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d00b      	beq.n	800c844 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c832:	699b      	ldr	r3, [r3, #24]
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	7c12      	ldrb	r2, [r2, #16]
 800c838:	f107 0108 	add.w	r1, r7, #8
 800c83c:	4610      	mov	r0, r2
 800c83e:	4798      	blx	r3
 800c840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c842:	e00f      	b.n	800c864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c844:	6839      	ldr	r1, [r7, #0]
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 fa49 	bl	800ccde <USBD_CtlError>
            err++;
 800c84c:	7afb      	ldrb	r3, [r7, #11]
 800c84e:	3301      	adds	r3, #1
 800c850:	72fb      	strb	r3, [r7, #11]
          break;
 800c852:	e007      	b.n	800c864 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c854:	6839      	ldr	r1, [r7, #0]
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f000 fa41 	bl	800ccde <USBD_CtlError>
          err++;
 800c85c:	7afb      	ldrb	r3, [r7, #11]
 800c85e:	3301      	adds	r3, #1
 800c860:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c862:	bf00      	nop
      }
      break;
 800c864:	e037      	b.n	800c8d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	7c1b      	ldrb	r3, [r3, #16]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d109      	bne.n	800c882 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c876:	f107 0208 	add.w	r2, r7, #8
 800c87a:	4610      	mov	r0, r2
 800c87c:	4798      	blx	r3
 800c87e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c880:	e029      	b.n	800c8d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c882:	6839      	ldr	r1, [r7, #0]
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 fa2a 	bl	800ccde <USBD_CtlError>
        err++;
 800c88a:	7afb      	ldrb	r3, [r7, #11]
 800c88c:	3301      	adds	r3, #1
 800c88e:	72fb      	strb	r3, [r7, #11]
      break;
 800c890:	e021      	b.n	800c8d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	7c1b      	ldrb	r3, [r3, #16]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d10d      	bne.n	800c8b6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8a2:	f107 0208 	add.w	r2, r7, #8
 800c8a6:	4610      	mov	r0, r2
 800c8a8:	4798      	blx	r3
 800c8aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	2207      	movs	r2, #7
 800c8b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8b4:	e00f      	b.n	800c8d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c8b6:	6839      	ldr	r1, [r7, #0]
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 fa10 	bl	800ccde <USBD_CtlError>
        err++;
 800c8be:	7afb      	ldrb	r3, [r7, #11]
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	72fb      	strb	r3, [r7, #11]
      break;
 800c8c4:	e007      	b.n	800c8d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c8c6:	6839      	ldr	r1, [r7, #0]
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f000 fa08 	bl	800ccde <USBD_CtlError>
      err++;
 800c8ce:	7afb      	ldrb	r3, [r7, #11]
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	72fb      	strb	r3, [r7, #11]
      break;
 800c8d4:	bf00      	nop
  }

  if (err != 0U)
 800c8d6:	7afb      	ldrb	r3, [r7, #11]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d11e      	bne.n	800c91a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	88db      	ldrh	r3, [r3, #6]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d016      	beq.n	800c912 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c8e4:	893b      	ldrh	r3, [r7, #8]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d00e      	beq.n	800c908 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	88da      	ldrh	r2, [r3, #6]
 800c8ee:	893b      	ldrh	r3, [r7, #8]
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	bf28      	it	cs
 800c8f4:	4613      	movcs	r3, r2
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c8fa:	893b      	ldrh	r3, [r7, #8]
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	68f9      	ldr	r1, [r7, #12]
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f000 fa69 	bl	800cdd8 <USBD_CtlSendData>
 800c906:	e009      	b.n	800c91c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c908:	6839      	ldr	r1, [r7, #0]
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 f9e7 	bl	800ccde <USBD_CtlError>
 800c910:	e004      	b.n	800c91c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 fac1 	bl	800ce9a <USBD_CtlSendStatus>
 800c918:	e000      	b.n	800c91c <USBD_GetDescriptor+0x2cc>
    return;
 800c91a:	bf00      	nop
  }
}
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop

0800c924 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	889b      	ldrh	r3, [r3, #4]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d131      	bne.n	800c99a <USBD_SetAddress+0x76>
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	88db      	ldrh	r3, [r3, #6]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d12d      	bne.n	800c99a <USBD_SetAddress+0x76>
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	885b      	ldrh	r3, [r3, #2]
 800c942:	2b7f      	cmp	r3, #127	@ 0x7f
 800c944:	d829      	bhi.n	800c99a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	885b      	ldrh	r3, [r3, #2]
 800c94a:	b2db      	uxtb	r3, r3
 800c94c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c950:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	2b03      	cmp	r3, #3
 800c95c:	d104      	bne.n	800c968 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c95e:	6839      	ldr	r1, [r7, #0]
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 f9bc 	bl	800ccde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c966:	e01d      	b.n	800c9a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	7bfa      	ldrb	r2, [r7, #15]
 800c96c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c970:	7bfb      	ldrb	r3, [r7, #15]
 800c972:	4619      	mov	r1, r3
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f00e fdf9 	bl	801b56c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f000 fa8d 	bl	800ce9a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c980:	7bfb      	ldrb	r3, [r7, #15]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d004      	beq.n	800c990 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2202      	movs	r2, #2
 800c98a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c98e:	e009      	b.n	800c9a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2201      	movs	r2, #1
 800c994:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c998:	e004      	b.n	800c9a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c99a:	6839      	ldr	r1, [r7, #0]
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 f99e 	bl	800ccde <USBD_CtlError>
  }
}
 800c9a2:	bf00      	nop
 800c9a4:	bf00      	nop
 800c9a6:	3710      	adds	r7, #16
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	885b      	ldrh	r3, [r3, #2]
 800c9be:	b2da      	uxtb	r2, r3
 800c9c0:	4b4e      	ldr	r3, [pc, #312]	@ (800cafc <USBD_SetConfig+0x150>)
 800c9c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c9c4:	4b4d      	ldr	r3, [pc, #308]	@ (800cafc <USBD_SetConfig+0x150>)
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d905      	bls.n	800c9d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c9cc:	6839      	ldr	r1, [r7, #0]
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 f985 	bl	800ccde <USBD_CtlError>
    return USBD_FAIL;
 800c9d4:	2303      	movs	r3, #3
 800c9d6:	e08c      	b.n	800caf2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	2b02      	cmp	r3, #2
 800c9e2:	d002      	beq.n	800c9ea <USBD_SetConfig+0x3e>
 800c9e4:	2b03      	cmp	r3, #3
 800c9e6:	d029      	beq.n	800ca3c <USBD_SetConfig+0x90>
 800c9e8:	e075      	b.n	800cad6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c9ea:	4b44      	ldr	r3, [pc, #272]	@ (800cafc <USBD_SetConfig+0x150>)
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d020      	beq.n	800ca34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c9f2:	4b42      	ldr	r3, [pc, #264]	@ (800cafc <USBD_SetConfig+0x150>)
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c9fc:	4b3f      	ldr	r3, [pc, #252]	@ (800cafc <USBD_SetConfig+0x150>)
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	4619      	mov	r1, r3
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7fe ffcd 	bl	800b9a2 <USBD_SetClassConfig>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ca0c:	7bfb      	ldrb	r3, [r7, #15]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d008      	beq.n	800ca24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ca12:	6839      	ldr	r1, [r7, #0]
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 f962 	bl	800ccde <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2202      	movs	r2, #2
 800ca1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ca22:	e065      	b.n	800caf0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f000 fa38 	bl	800ce9a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2203      	movs	r2, #3
 800ca2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ca32:	e05d      	b.n	800caf0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 fa30 	bl	800ce9a <USBD_CtlSendStatus>
      break;
 800ca3a:	e059      	b.n	800caf0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ca3c:	4b2f      	ldr	r3, [pc, #188]	@ (800cafc <USBD_SetConfig+0x150>)
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d112      	bne.n	800ca6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2202      	movs	r2, #2
 800ca48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ca4c:	4b2b      	ldr	r3, [pc, #172]	@ (800cafc <USBD_SetConfig+0x150>)
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	461a      	mov	r2, r3
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ca56:	4b29      	ldr	r3, [pc, #164]	@ (800cafc <USBD_SetConfig+0x150>)
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f7fe ffbc 	bl	800b9da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 fa19 	bl	800ce9a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ca68:	e042      	b.n	800caf0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ca6a:	4b24      	ldr	r3, [pc, #144]	@ (800cafc <USBD_SetConfig+0x150>)
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	461a      	mov	r2, r3
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d02a      	beq.n	800cace <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	4619      	mov	r1, r3
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f7fe ffaa 	bl	800b9da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ca86:	4b1d      	ldr	r3, [pc, #116]	@ (800cafc <USBD_SetConfig+0x150>)
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ca90:	4b1a      	ldr	r3, [pc, #104]	@ (800cafc <USBD_SetConfig+0x150>)
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	4619      	mov	r1, r3
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f7fe ff83 	bl	800b9a2 <USBD_SetClassConfig>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800caa0:	7bfb      	ldrb	r3, [r7, #15]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00f      	beq.n	800cac6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800caa6:	6839      	ldr	r1, [r7, #0]
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 f918 	bl	800ccde <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	4619      	mov	r1, r3
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f7fe ff8f 	bl	800b9da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2202      	movs	r2, #2
 800cac0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cac4:	e014      	b.n	800caf0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 f9e7 	bl	800ce9a <USBD_CtlSendStatus>
      break;
 800cacc:	e010      	b.n	800caf0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 f9e3 	bl	800ce9a <USBD_CtlSendStatus>
      break;
 800cad4:	e00c      	b.n	800caf0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cad6:	6839      	ldr	r1, [r7, #0]
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 f900 	bl	800ccde <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cade:	4b07      	ldr	r3, [pc, #28]	@ (800cafc <USBD_SetConfig+0x150>)
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	4619      	mov	r1, r3
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f7fe ff78 	bl	800b9da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800caea:	2303      	movs	r3, #3
 800caec:	73fb      	strb	r3, [r7, #15]
      break;
 800caee:	bf00      	nop
  }

  return ret;
 800caf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	200053f4 	.word	0x200053f4

0800cb00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	88db      	ldrh	r3, [r3, #6]
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d004      	beq.n	800cb1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cb12:	6839      	ldr	r1, [r7, #0]
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 f8e2 	bl	800ccde <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cb1a:	e023      	b.n	800cb64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	2b02      	cmp	r3, #2
 800cb26:	dc02      	bgt.n	800cb2e <USBD_GetConfig+0x2e>
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	dc03      	bgt.n	800cb34 <USBD_GetConfig+0x34>
 800cb2c:	e015      	b.n	800cb5a <USBD_GetConfig+0x5a>
 800cb2e:	2b03      	cmp	r3, #3
 800cb30:	d00b      	beq.n	800cb4a <USBD_GetConfig+0x4a>
 800cb32:	e012      	b.n	800cb5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2200      	movs	r2, #0
 800cb38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	3308      	adds	r3, #8
 800cb3e:	2201      	movs	r2, #1
 800cb40:	4619      	mov	r1, r3
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 f948 	bl	800cdd8 <USBD_CtlSendData>
        break;
 800cb48:	e00c      	b.n	800cb64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	3304      	adds	r3, #4
 800cb4e:	2201      	movs	r2, #1
 800cb50:	4619      	mov	r1, r3
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 f940 	bl	800cdd8 <USBD_CtlSendData>
        break;
 800cb58:	e004      	b.n	800cb64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cb5a:	6839      	ldr	r1, [r7, #0]
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f000 f8be 	bl	800ccde <USBD_CtlError>
        break;
 800cb62:	bf00      	nop
}
 800cb64:	bf00      	nop
 800cb66:	3708      	adds	r7, #8
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	3b01      	subs	r3, #1
 800cb80:	2b02      	cmp	r3, #2
 800cb82:	d81e      	bhi.n	800cbc2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	88db      	ldrh	r3, [r3, #6]
 800cb88:	2b02      	cmp	r3, #2
 800cb8a:	d004      	beq.n	800cb96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cb8c:	6839      	ldr	r1, [r7, #0]
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f000 f8a5 	bl	800ccde <USBD_CtlError>
        break;
 800cb94:	e01a      	b.n	800cbcc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2201      	movs	r2, #1
 800cb9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d005      	beq.n	800cbb2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	68db      	ldr	r3, [r3, #12]
 800cbaa:	f043 0202 	orr.w	r2, r3, #2
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	330c      	adds	r3, #12
 800cbb6:	2202      	movs	r2, #2
 800cbb8:	4619      	mov	r1, r3
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f000 f90c 	bl	800cdd8 <USBD_CtlSendData>
      break;
 800cbc0:	e004      	b.n	800cbcc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cbc2:	6839      	ldr	r1, [r7, #0]
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f000 f88a 	bl	800ccde <USBD_CtlError>
      break;
 800cbca:	bf00      	nop
  }
}
 800cbcc:	bf00      	nop
 800cbce:	3708      	adds	r7, #8
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	885b      	ldrh	r3, [r3, #2]
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d107      	bne.n	800cbf6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2201      	movs	r2, #1
 800cbea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 f953 	bl	800ce9a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cbf4:	e013      	b.n	800cc1e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	885b      	ldrh	r3, [r3, #2]
 800cbfa:	2b02      	cmp	r3, #2
 800cbfc:	d10b      	bne.n	800cc16 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	889b      	ldrh	r3, [r3, #4]
 800cc02:	0a1b      	lsrs	r3, r3, #8
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	b2da      	uxtb	r2, r3
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 f943 	bl	800ce9a <USBD_CtlSendStatus>
}
 800cc14:	e003      	b.n	800cc1e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cc16:	6839      	ldr	r1, [r7, #0]
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 f860 	bl	800ccde <USBD_CtlError>
}
 800cc1e:	bf00      	nop
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}

0800cc26 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b082      	sub	sp, #8
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
 800cc2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	3b01      	subs	r3, #1
 800cc3a:	2b02      	cmp	r3, #2
 800cc3c:	d80b      	bhi.n	800cc56 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	885b      	ldrh	r3, [r3, #2]
 800cc42:	2b01      	cmp	r3, #1
 800cc44:	d10c      	bne.n	800cc60 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 f923 	bl	800ce9a <USBD_CtlSendStatus>
      }
      break;
 800cc54:	e004      	b.n	800cc60 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cc56:	6839      	ldr	r1, [r7, #0]
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 f840 	bl	800ccde <USBD_CtlError>
      break;
 800cc5e:	e000      	b.n	800cc62 <USBD_ClrFeature+0x3c>
      break;
 800cc60:	bf00      	nop
  }
}
 800cc62:	bf00      	nop
 800cc64:	3708      	adds	r7, #8
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}

0800cc6a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cc6a:	b580      	push	{r7, lr}
 800cc6c:	b084      	sub	sp, #16
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
 800cc72:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	781a      	ldrb	r2, [r3, #0]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	3301      	adds	r3, #1
 800cc84:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	781a      	ldrb	r2, [r3, #0]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	3301      	adds	r3, #1
 800cc92:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cc94:	68f8      	ldr	r0, [r7, #12]
 800cc96:	f7ff fa3d 	bl	800c114 <SWAPBYTE>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	3301      	adds	r3, #1
 800cca6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ccae:	68f8      	ldr	r0, [r7, #12]
 800ccb0:	f7ff fa30 	bl	800c114 <SWAPBYTE>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ccc8:	68f8      	ldr	r0, [r7, #12]
 800ccca:	f7ff fa23 	bl	800c114 <SWAPBYTE>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	80da      	strh	r2, [r3, #6]
}
 800ccd6:	bf00      	nop
 800ccd8:	3710      	adds	r7, #16
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b082      	sub	sp, #8
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
 800cce6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cce8:	2180      	movs	r1, #128	@ 0x80
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f00e fbd4 	bl	801b498 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ccf0:	2100      	movs	r1, #0
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f00e fbd0 	bl	801b498 <USBD_LL_StallEP>
}
 800ccf8:	bf00      	nop
 800ccfa:	3708      	adds	r7, #8
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b086      	sub	sp, #24
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	60f8      	str	r0, [r7, #12]
 800cd08:	60b9      	str	r1, [r7, #8]
 800cd0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d042      	beq.n	800cd9c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800cd1a:	6938      	ldr	r0, [r7, #16]
 800cd1c:	f000 f842 	bl	800cda4 <USBD_GetLen>
 800cd20:	4603      	mov	r3, r0
 800cd22:	3301      	adds	r3, #1
 800cd24:	005b      	lsls	r3, r3, #1
 800cd26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd2a:	d808      	bhi.n	800cd3e <USBD_GetString+0x3e>
 800cd2c:	6938      	ldr	r0, [r7, #16]
 800cd2e:	f000 f839 	bl	800cda4 <USBD_GetLen>
 800cd32:	4603      	mov	r3, r0
 800cd34:	3301      	adds	r3, #1
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	005b      	lsls	r3, r3, #1
 800cd3a:	b29a      	uxth	r2, r3
 800cd3c:	e001      	b.n	800cd42 <USBD_GetString+0x42>
 800cd3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cd46:	7dfb      	ldrb	r3, [r7, #23]
 800cd48:	68ba      	ldr	r2, [r7, #8]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	7812      	ldrb	r2, [r2, #0]
 800cd50:	701a      	strb	r2, [r3, #0]
  idx++;
 800cd52:	7dfb      	ldrb	r3, [r7, #23]
 800cd54:	3301      	adds	r3, #1
 800cd56:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cd58:	7dfb      	ldrb	r3, [r7, #23]
 800cd5a:	68ba      	ldr	r2, [r7, #8]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	2203      	movs	r2, #3
 800cd60:	701a      	strb	r2, [r3, #0]
  idx++;
 800cd62:	7dfb      	ldrb	r3, [r7, #23]
 800cd64:	3301      	adds	r3, #1
 800cd66:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cd68:	e013      	b.n	800cd92 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800cd6a:	7dfb      	ldrb	r3, [r7, #23]
 800cd6c:	68ba      	ldr	r2, [r7, #8]
 800cd6e:	4413      	add	r3, r2
 800cd70:	693a      	ldr	r2, [r7, #16]
 800cd72:	7812      	ldrb	r2, [r2, #0]
 800cd74:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	3301      	adds	r3, #1
 800cd7a:	613b      	str	r3, [r7, #16]
    idx++;
 800cd7c:	7dfb      	ldrb	r3, [r7, #23]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cd82:	7dfb      	ldrb	r3, [r7, #23]
 800cd84:	68ba      	ldr	r2, [r7, #8]
 800cd86:	4413      	add	r3, r2
 800cd88:	2200      	movs	r2, #0
 800cd8a:	701a      	strb	r2, [r3, #0]
    idx++;
 800cd8c:	7dfb      	ldrb	r3, [r7, #23]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d1e7      	bne.n	800cd6a <USBD_GetString+0x6a>
 800cd9a:	e000      	b.n	800cd9e <USBD_GetString+0x9e>
    return;
 800cd9c:	bf00      	nop
  }
}
 800cd9e:	3718      	adds	r7, #24
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b085      	sub	sp, #20
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cdac:	2300      	movs	r3, #0
 800cdae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cdb4:	e005      	b.n	800cdc2 <USBD_GetLen+0x1e>
  {
    len++;
 800cdb6:	7bfb      	ldrb	r3, [r7, #15]
 800cdb8:	3301      	adds	r3, #1
 800cdba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d1f5      	bne.n	800cdb6 <USBD_GetLen+0x12>
  }

  return len;
 800cdca:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3714      	adds	r7, #20
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b084      	sub	sp, #16
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2202      	movs	r2, #2
 800cde8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	68ba      	ldr	r2, [r7, #8]
 800cdf6:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	68ba      	ldr	r2, [r7, #8]
 800ce02:	2100      	movs	r1, #0
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f00e fbd0 	bl	801b5aa <USBD_LL_Transmit>

  return USBD_OK;
 800ce0a:	2300      	movs	r3, #0
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3710      	adds	r7, #16
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b084      	sub	sp, #16
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	60f8      	str	r0, [r7, #12]
 800ce1c:	60b9      	str	r1, [r7, #8]
 800ce1e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	68ba      	ldr	r2, [r7, #8]
 800ce24:	2100      	movs	r1, #0
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	f00e fbbf 	bl	801b5aa <USBD_LL_Transmit>

  return USBD_OK;
 800ce2c:	2300      	movs	r3, #0
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b084      	sub	sp, #16
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	60f8      	str	r0, [r7, #12]
 800ce3e:	60b9      	str	r1, [r7, #8]
 800ce40:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2203      	movs	r2, #3
 800ce46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	68ba      	ldr	r2, [r7, #8]
 800ce56:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	68ba      	ldr	r2, [r7, #8]
 800ce66:	2100      	movs	r1, #0
 800ce68:	68f8      	ldr	r0, [r7, #12]
 800ce6a:	f00e fbbf 	bl	801b5ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce6e:	2300      	movs	r3, #0
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3710      	adds	r7, #16
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	68ba      	ldr	r2, [r7, #8]
 800ce88:	2100      	movs	r1, #0
 800ce8a:	68f8      	ldr	r0, [r7, #12]
 800ce8c:	f00e fbae 	bl	801b5ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce90:	2300      	movs	r3, #0
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3710      	adds	r7, #16
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b082      	sub	sp, #8
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2204      	movs	r2, #4
 800cea6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ceaa:	2300      	movs	r3, #0
 800ceac:	2200      	movs	r2, #0
 800ceae:	2100      	movs	r1, #0
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f00e fb7a 	bl	801b5aa <USBD_LL_Transmit>

  return USBD_OK;
 800ceb6:	2300      	movs	r3, #0
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2205      	movs	r2, #5
 800cecc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ced0:	2300      	movs	r3, #0
 800ced2:	2200      	movs	r2, #0
 800ced4:	2100      	movs	r1, #0
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f00e fb88 	bl	801b5ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cedc:	2300      	movs	r3, #0
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3708      	adds	r7, #8
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}

0800cee6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cee6:	b480      	push	{r7}
 800cee8:	b085      	sub	sp, #20
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	4603      	mov	r3, r0
 800ceee:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cef0:	2300      	movs	r3, #0
 800cef2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cef4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cef8:	2b84      	cmp	r3, #132	@ 0x84
 800cefa:	d005      	beq.n	800cf08 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cefc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	4413      	add	r3, r2
 800cf04:	3303      	adds	r3, #3
 800cf06:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cf08:	68fb      	ldr	r3, [r7, #12]
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3714      	adds	r7, #20
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr

0800cf16 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800cf16:	b480      	push	{r7}
 800cf18:	b083      	sub	sp, #12
 800cf1a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf1c:	f3ef 8305 	mrs	r3, IPSR
 800cf20:	607b      	str	r3, [r7, #4]
  return(result);
 800cf22:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	bf14      	ite	ne
 800cf28:	2301      	movne	r3, #1
 800cf2a:	2300      	moveq	r3, #0
 800cf2c:	b2db      	uxtb	r3, r3
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	370c      	adds	r7, #12
 800cf32:	46bd      	mov	sp, r7
 800cf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf38:	4770      	bx	lr

0800cf3a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cf3e:	f001 fc95 	bl	800e86c <vTaskStartScheduler>
  
  return osOK;
 800cf42:	2300      	movs	r3, #0
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800cf4c:	f7ff ffe3 	bl	800cf16 <inHandlerMode>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d003      	beq.n	800cf5e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800cf56:	f001 fdaf 	bl	800eab8 <xTaskGetTickCountFromISR>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	e002      	b.n	800cf64 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800cf5e:	f001 fd9b 	bl	800ea98 <xTaskGetTickCount>
 800cf62:	4603      	mov	r3, r0
  }
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cf68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf6a:	b089      	sub	sp, #36	@ 0x24
 800cf6c:	af04      	add	r7, sp, #16
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	695b      	ldr	r3, [r3, #20]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d020      	beq.n	800cfbc <osThreadCreate+0x54>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	699b      	ldr	r3, [r3, #24]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d01c      	beq.n	800cfbc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	685c      	ldr	r4, [r3, #4]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	691e      	ldr	r6, [r3, #16]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7ff ffa6 	bl	800cee6 <makeFreeRtosPriority>
 800cf9a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	695b      	ldr	r3, [r3, #20]
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cfa4:	9202      	str	r2, [sp, #8]
 800cfa6:	9301      	str	r3, [sp, #4]
 800cfa8:	9100      	str	r1, [sp, #0]
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	4632      	mov	r2, r6
 800cfae:	4629      	mov	r1, r5
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f001 fa75 	bl	800e4a0 <xTaskCreateStatic>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	60fb      	str	r3, [r7, #12]
 800cfba:	e01c      	b.n	800cff6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	685c      	ldr	r4, [r3, #4]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cfc8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7ff ff88 	bl	800cee6 <makeFreeRtosPriority>
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	f107 030c 	add.w	r3, r7, #12
 800cfdc:	9301      	str	r3, [sp, #4]
 800cfde:	9200      	str	r2, [sp, #0]
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	4632      	mov	r2, r6
 800cfe4:	4629      	mov	r1, r5
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	f001 faba 	bl	800e560 <xTaskCreate>
 800cfec:	4603      	mov	r3, r0
 800cfee:	2b01      	cmp	r3, #1
 800cff0:	d001      	beq.n	800cff6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cff2:	2300      	movs	r3, #0
 800cff4:	e000      	b.n	800cff8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800cff6:	68fb      	ldr	r3, [r7, #12]
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3714      	adds	r7, #20
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d000 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b084      	sub	sp, #16
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d001      	beq.n	800d016 <osDelay+0x16>
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	e000      	b.n	800d018 <osDelay+0x18>
 800d016:	2301      	movs	r3, #1
 800d018:	4618      	mov	r0, r3
 800d01a:	f001 fbf1 	bl	800e800 <vTaskDelay>
  
  return osOK;
 800d01e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d020:	4618      	mov	r0, r3
 800d022:	3710      	adds	r7, #16
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d007      	beq.n	800d048 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	4619      	mov	r1, r3
 800d03e:	2001      	movs	r0, #1
 800d040:	f000 fc47 	bl	800d8d2 <xQueueCreateMutexStatic>
 800d044:	4603      	mov	r3, r0
 800d046:	e003      	b.n	800d050 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800d048:	2001      	movs	r0, #1
 800d04a:	f000 fc2a 	bl	800d8a2 <xQueueCreateMutex>
 800d04e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800d050:	4618      	mov	r0, r3
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d062:	2300      	movs	r3, #0
 800d064:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d101      	bne.n	800d070 <osMutexWait+0x18>
    return osErrorParameter;
 800d06c:	2380      	movs	r3, #128	@ 0x80
 800d06e:	e03a      	b.n	800d0e6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800d070:	2300      	movs	r3, #0
 800d072:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d07a:	d103      	bne.n	800d084 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800d07c:	f04f 33ff 	mov.w	r3, #4294967295
 800d080:	60fb      	str	r3, [r7, #12]
 800d082:	e009      	b.n	800d098 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d006      	beq.n	800d098 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d101      	bne.n	800d098 <osMutexWait+0x40>
      ticks = 1;
 800d094:	2301      	movs	r3, #1
 800d096:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d098:	f7ff ff3d 	bl	800cf16 <inHandlerMode>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d017      	beq.n	800d0d2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d0a2:	f107 0308 	add.w	r3, r7, #8
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	2100      	movs	r1, #0
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f001 f84e 	bl	800e14c <xQueueReceiveFromISR>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d001      	beq.n	800d0ba <osMutexWait+0x62>
      return osErrorOS;
 800d0b6:	23ff      	movs	r3, #255	@ 0xff
 800d0b8:	e015      	b.n	800d0e6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d011      	beq.n	800d0e4 <osMutexWait+0x8c>
 800d0c0:	4b0b      	ldr	r3, [pc, #44]	@ (800d0f0 <osMutexWait+0x98>)
 800d0c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0c6:	601a      	str	r2, [r3, #0]
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	f3bf 8f6f 	isb	sy
 800d0d0:	e008      	b.n	800d0e4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800d0d2:	68f9      	ldr	r1, [r7, #12]
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 ff29 	bl	800df2c <xQueueSemaphoreTake>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d001      	beq.n	800d0e4 <osMutexWait+0x8c>
    return osErrorOS;
 800d0e0:	23ff      	movs	r3, #255	@ 0xff
 800d0e2:	e000      	b.n	800d0e6 <osMutexWait+0x8e>
  }
  
  return osOK;
 800d0e4:	2300      	movs	r3, #0
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3710      	adds	r7, #16
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	e000ed04 	.word	0xe000ed04

0800d0f4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d100:	2300      	movs	r3, #0
 800d102:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800d104:	f7ff ff07 	bl	800cf16 <inHandlerMode>
 800d108:	4603      	mov	r3, r0
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d016      	beq.n	800d13c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d10e:	f107 0308 	add.w	r3, r7, #8
 800d112:	4619      	mov	r1, r3
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 fd97 	bl	800dc48 <xQueueGiveFromISR>
 800d11a:	4603      	mov	r3, r0
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d001      	beq.n	800d124 <osMutexRelease+0x30>
      return osErrorOS;
 800d120:	23ff      	movs	r3, #255	@ 0xff
 800d122:	e017      	b.n	800d154 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d013      	beq.n	800d152 <osMutexRelease+0x5e>
 800d12a:	4b0c      	ldr	r3, [pc, #48]	@ (800d15c <osMutexRelease+0x68>)
 800d12c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d130:	601a      	str	r2, [r3, #0]
 800d132:	f3bf 8f4f 	dsb	sy
 800d136:	f3bf 8f6f 	isb	sy
 800d13a:	e00a      	b.n	800d152 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800d13c:	2300      	movs	r3, #0
 800d13e:	2200      	movs	r2, #0
 800d140:	2100      	movs	r1, #0
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 fbe0 	bl	800d908 <xQueueGenericSend>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b01      	cmp	r3, #1
 800d14c:	d001      	beq.n	800d152 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800d14e:	23ff      	movs	r3, #255	@ 0xff
 800d150:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800d152:	68fb      	ldr	r3, [r7, #12]
}
 800d154:	4618      	mov	r0, r3
 800d156:	3710      	adds	r7, #16
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	e000ed04 	.word	0xe000ed04

0800d160 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af02      	add	r7, sp, #8
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d00f      	beq.n	800d192 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	2b01      	cmp	r3, #1
 800d176:	d10a      	bne.n	800d18e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	2203      	movs	r2, #3
 800d17e:	9200      	str	r2, [sp, #0]
 800d180:	2200      	movs	r2, #0
 800d182:	2100      	movs	r1, #0
 800d184:	2001      	movs	r0, #1
 800d186:	f000 fa9b 	bl	800d6c0 <xQueueGenericCreateStatic>
 800d18a:	4603      	mov	r3, r0
 800d18c:	e016      	b.n	800d1bc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800d18e:	2300      	movs	r3, #0
 800d190:	e014      	b.n	800d1bc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	2b01      	cmp	r3, #1
 800d196:	d110      	bne.n	800d1ba <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800d198:	2203      	movs	r2, #3
 800d19a:	2100      	movs	r1, #0
 800d19c:	2001      	movs	r0, #1
 800d19e:	f000 fb0c 	bl	800d7ba <xQueueGenericCreate>
 800d1a2:	60f8      	str	r0, [r7, #12]
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d005      	beq.n	800d1b6 <osSemaphoreCreate+0x56>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	68f8      	ldr	r0, [r7, #12]
 800d1b2:	f000 fba9 	bl	800d908 <xQueueGenericSend>
      return sema;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	e000      	b.n	800d1bc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800d1ba:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3710      	adds	r7, #16
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d101      	bne.n	800d1dc <osSemaphoreWait+0x18>
    return osErrorParameter;
 800d1d8:	2380      	movs	r3, #128	@ 0x80
 800d1da:	e03a      	b.n	800d252 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1e6:	d103      	bne.n	800d1f0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800d1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d1ec:	60fb      	str	r3, [r7, #12]
 800d1ee:	e009      	b.n	800d204 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d006      	beq.n	800d204 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d101      	bne.n	800d204 <osSemaphoreWait+0x40>
      ticks = 1;
 800d200:	2301      	movs	r3, #1
 800d202:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d204:	f7ff fe87 	bl	800cf16 <inHandlerMode>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d017      	beq.n	800d23e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d20e:	f107 0308 	add.w	r3, r7, #8
 800d212:	461a      	mov	r2, r3
 800d214:	2100      	movs	r1, #0
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 ff98 	bl	800e14c <xQueueReceiveFromISR>
 800d21c:	4603      	mov	r3, r0
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d001      	beq.n	800d226 <osSemaphoreWait+0x62>
      return osErrorOS;
 800d222:	23ff      	movs	r3, #255	@ 0xff
 800d224:	e015      	b.n	800d252 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d011      	beq.n	800d250 <osSemaphoreWait+0x8c>
 800d22c:	4b0b      	ldr	r3, [pc, #44]	@ (800d25c <osSemaphoreWait+0x98>)
 800d22e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d232:	601a      	str	r2, [r3, #0]
 800d234:	f3bf 8f4f 	dsb	sy
 800d238:	f3bf 8f6f 	isb	sy
 800d23c:	e008      	b.n	800d250 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d23e:	68f9      	ldr	r1, [r7, #12]
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 fe73 	bl	800df2c <xQueueSemaphoreTake>
 800d246:	4603      	mov	r3, r0
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d001      	beq.n	800d250 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800d24c:	23ff      	movs	r3, #255	@ 0xff
 800d24e:	e000      	b.n	800d252 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800d250:	2300      	movs	r3, #0
}
 800d252:	4618      	mov	r0, r3
 800d254:	3710      	adds	r7, #16
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	e000ed04 	.word	0xe000ed04

0800d260 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d268:	2300      	movs	r3, #0
 800d26a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d26c:	2300      	movs	r3, #0
 800d26e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800d270:	f7ff fe51 	bl	800cf16 <inHandlerMode>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d016      	beq.n	800d2a8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d27a:	f107 0308 	add.w	r3, r7, #8
 800d27e:	4619      	mov	r1, r3
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 fce1 	bl	800dc48 <xQueueGiveFromISR>
 800d286:	4603      	mov	r3, r0
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d001      	beq.n	800d290 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800d28c:	23ff      	movs	r3, #255	@ 0xff
 800d28e:	e017      	b.n	800d2c0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d013      	beq.n	800d2be <osSemaphoreRelease+0x5e>
 800d296:	4b0c      	ldr	r3, [pc, #48]	@ (800d2c8 <osSemaphoreRelease+0x68>)
 800d298:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d29c:	601a      	str	r2, [r3, #0]
 800d29e:	f3bf 8f4f 	dsb	sy
 800d2a2:	f3bf 8f6f 	isb	sy
 800d2a6:	e00a      	b.n	800d2be <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	2100      	movs	r1, #0
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 fb2a 	bl	800d908 <xQueueGenericSend>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	2b01      	cmp	r3, #1
 800d2b8:	d001      	beq.n	800d2be <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800d2ba:	23ff      	movs	r3, #255	@ 0xff
 800d2bc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800d2be:	68fb      	ldr	r3, [r7, #12]
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3710      	adds	r7, #16
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	e000ed04 	.word	0xe000ed04

0800d2cc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d2cc:	b590      	push	{r4, r7, lr}
 800d2ce:	b085      	sub	sp, #20
 800d2d0:	af02      	add	r7, sp, #8
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	689b      	ldr	r3, [r3, #8]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d011      	beq.n	800d302 <osMessageCreate+0x36>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	68db      	ldr	r3, [r3, #12]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d00d      	beq.n	800d302 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6818      	ldr	r0, [r3, #0]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6859      	ldr	r1, [r3, #4]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	689a      	ldr	r2, [r3, #8]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	68db      	ldr	r3, [r3, #12]
 800d2f6:	2400      	movs	r4, #0
 800d2f8:	9400      	str	r4, [sp, #0]
 800d2fa:	f000 f9e1 	bl	800d6c0 <xQueueGenericCreateStatic>
 800d2fe:	4603      	mov	r3, r0
 800d300:	e008      	b.n	800d314 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6818      	ldr	r0, [r3, #0]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	2200      	movs	r2, #0
 800d30c:	4619      	mov	r1, r3
 800d30e:	f000 fa54 	bl	800d7ba <xQueueGenericCreate>
 800d312:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d314:	4618      	mov	r0, r3
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd90      	pop	{r4, r7, pc}

0800d31c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b086      	sub	sp, #24
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800d328:	2300      	movs	r3, #0
 800d32a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d101      	bne.n	800d33a <osMessagePut+0x1e>
    ticks = 1;
 800d336:	2301      	movs	r3, #1
 800d338:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800d33a:	f7ff fdec 	bl	800cf16 <inHandlerMode>
 800d33e:	4603      	mov	r3, r0
 800d340:	2b00      	cmp	r3, #0
 800d342:	d018      	beq.n	800d376 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800d344:	f107 0210 	add.w	r2, r7, #16
 800d348:	f107 0108 	add.w	r1, r7, #8
 800d34c:	2300      	movs	r3, #0
 800d34e:	68f8      	ldr	r0, [r7, #12]
 800d350:	f000 fbdc 	bl	800db0c <xQueueGenericSendFromISR>
 800d354:	4603      	mov	r3, r0
 800d356:	2b01      	cmp	r3, #1
 800d358:	d001      	beq.n	800d35e <osMessagePut+0x42>
      return osErrorOS;
 800d35a:	23ff      	movs	r3, #255	@ 0xff
 800d35c:	e018      	b.n	800d390 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d014      	beq.n	800d38e <osMessagePut+0x72>
 800d364:	4b0c      	ldr	r3, [pc, #48]	@ (800d398 <osMessagePut+0x7c>)
 800d366:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d36a:	601a      	str	r2, [r3, #0]
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	f3bf 8f6f 	isb	sy
 800d374:	e00b      	b.n	800d38e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800d376:	f107 0108 	add.w	r1, r7, #8
 800d37a:	2300      	movs	r3, #0
 800d37c:	697a      	ldr	r2, [r7, #20]
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f000 fac2 	bl	800d908 <xQueueGenericSend>
 800d384:	4603      	mov	r3, r0
 800d386:	2b01      	cmp	r3, #1
 800d388:	d001      	beq.n	800d38e <osMessagePut+0x72>
      return osErrorOS;
 800d38a:	23ff      	movs	r3, #255	@ 0xff
 800d38c:	e000      	b.n	800d390 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800d38e:	2300      	movs	r3, #0
}
 800d390:	4618      	mov	r0, r3
 800d392:	3718      	adds	r7, #24
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}
 800d398:	e000ed04 	.word	0xe000ed04

0800d39c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800d39c:	b590      	push	{r4, r7, lr}
 800d39e:	b08b      	sub	sp, #44	@ 0x2c
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10a      	bne.n	800d3cc <osMessageGet+0x30>
    event.status = osErrorParameter;
 800d3b6:	2380      	movs	r3, #128	@ 0x80
 800d3b8:	617b      	str	r3, [r7, #20]
    return event;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	461c      	mov	r4, r3
 800d3be:	f107 0314 	add.w	r3, r7, #20
 800d3c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d3c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d3ca:	e054      	b.n	800d476 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3da:	d103      	bne.n	800d3e4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800d3dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d3e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d3e2:	e009      	b.n	800d3f8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d006      	beq.n	800d3f8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800d3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d101      	bne.n	800d3f8 <osMessageGet+0x5c>
      ticks = 1;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800d3f8:	f7ff fd8d 	bl	800cf16 <inHandlerMode>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d01c      	beq.n	800d43c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800d402:	f107 0220 	add.w	r2, r7, #32
 800d406:	f107 0314 	add.w	r3, r7, #20
 800d40a:	3304      	adds	r3, #4
 800d40c:	4619      	mov	r1, r3
 800d40e:	68b8      	ldr	r0, [r7, #8]
 800d410:	f000 fe9c 	bl	800e14c <xQueueReceiveFromISR>
 800d414:	4603      	mov	r3, r0
 800d416:	2b01      	cmp	r3, #1
 800d418:	d102      	bne.n	800d420 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800d41a:	2310      	movs	r3, #16
 800d41c:	617b      	str	r3, [r7, #20]
 800d41e:	e001      	b.n	800d424 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800d420:	2300      	movs	r3, #0
 800d422:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d424:	6a3b      	ldr	r3, [r7, #32]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d01d      	beq.n	800d466 <osMessageGet+0xca>
 800d42a:	4b15      	ldr	r3, [pc, #84]	@ (800d480 <osMessageGet+0xe4>)
 800d42c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d430:	601a      	str	r2, [r3, #0]
 800d432:	f3bf 8f4f 	dsb	sy
 800d436:	f3bf 8f6f 	isb	sy
 800d43a:	e014      	b.n	800d466 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800d43c:	f107 0314 	add.w	r3, r7, #20
 800d440:	3304      	adds	r3, #4
 800d442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d444:	4619      	mov	r1, r3
 800d446:	68b8      	ldr	r0, [r7, #8]
 800d448:	f000 fc8e 	bl	800dd68 <xQueueReceive>
 800d44c:	4603      	mov	r3, r0
 800d44e:	2b01      	cmp	r3, #1
 800d450:	d102      	bne.n	800d458 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800d452:	2310      	movs	r3, #16
 800d454:	617b      	str	r3, [r7, #20]
 800d456:	e006      	b.n	800d466 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d101      	bne.n	800d462 <osMessageGet+0xc6>
 800d45e:	2300      	movs	r3, #0
 800d460:	e000      	b.n	800d464 <osMessageGet+0xc8>
 800d462:	2340      	movs	r3, #64	@ 0x40
 800d464:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	461c      	mov	r4, r3
 800d46a:	f107 0314 	add.w	r3, r7, #20
 800d46e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d472:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d476:	68f8      	ldr	r0, [r7, #12]
 800d478:	372c      	adds	r7, #44	@ 0x2c
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd90      	pop	{r4, r7, pc}
 800d47e:	bf00      	nop
 800d480:	e000ed04 	.word	0xe000ed04

0800d484 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f103 0208 	add.w	r2, r3, #8
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f04f 32ff 	mov.w	r2, #4294967295
 800d49c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f103 0208 	add.w	r2, r3, #8
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f103 0208 	add.w	r2, r3, #8
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d4b8:	bf00      	nop
 800d4ba:	370c      	adds	r7, #12
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d4d2:	bf00      	nop
 800d4d4:	370c      	adds	r7, #12
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4dc:	4770      	bx	lr

0800d4de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d4de:	b480      	push	{r7}
 800d4e0:	b085      	sub	sp, #20
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	6078      	str	r0, [r7, #4]
 800d4e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	68fa      	ldr	r2, [r7, #12]
 800d4f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	689a      	ldr	r2, [r3, #8]
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	689b      	ldr	r3, [r3, #8]
 800d500:	683a      	ldr	r2, [r7, #0]
 800d502:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	683a      	ldr	r2, [r7, #0]
 800d508:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	1c5a      	adds	r2, r3, #1
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	601a      	str	r2, [r3, #0]
}
 800d51a:	bf00      	nop
 800d51c:	3714      	adds	r7, #20
 800d51e:	46bd      	mov	sp, r7
 800d520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d524:	4770      	bx	lr

0800d526 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d526:	b480      	push	{r7}
 800d528:	b085      	sub	sp, #20
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
 800d52e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d53c:	d103      	bne.n	800d546 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	691b      	ldr	r3, [r3, #16]
 800d542:	60fb      	str	r3, [r7, #12]
 800d544:	e00c      	b.n	800d560 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	3308      	adds	r3, #8
 800d54a:	60fb      	str	r3, [r7, #12]
 800d54c:	e002      	b.n	800d554 <vListInsert+0x2e>
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	685b      	ldr	r3, [r3, #4]
 800d552:	60fb      	str	r3, [r7, #12]
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	68ba      	ldr	r2, [r7, #8]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d2f6      	bcs.n	800d54e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	685a      	ldr	r2, [r3, #4]
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	683a      	ldr	r2, [r7, #0]
 800d56e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	68fa      	ldr	r2, [r7, #12]
 800d574:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	683a      	ldr	r2, [r7, #0]
 800d57a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	1c5a      	adds	r2, r3, #1
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	601a      	str	r2, [r3, #0]
}
 800d58c:	bf00      	nop
 800d58e:	3714      	adds	r7, #20
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr

0800d598 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d598:	b480      	push	{r7}
 800d59a:	b085      	sub	sp, #20
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	691b      	ldr	r3, [r3, #16]
 800d5a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	6892      	ldr	r2, [r2, #8]
 800d5ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	689b      	ldr	r3, [r3, #8]
 800d5b4:	687a      	ldr	r2, [r7, #4]
 800d5b6:	6852      	ldr	r2, [r2, #4]
 800d5b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d103      	bne.n	800d5cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	689a      	ldr	r2, [r3, #8]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	1e5a      	subs	r2, r3, #1
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3714      	adds	r7, #20
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr

0800d5ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b084      	sub	sp, #16
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d10b      	bne.n	800d618 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d604:	f383 8811 	msr	BASEPRI, r3
 800d608:	f3bf 8f6f 	isb	sy
 800d60c:	f3bf 8f4f 	dsb	sy
 800d610:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d612:	bf00      	nop
 800d614:	bf00      	nop
 800d616:	e7fd      	b.n	800d614 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d618:	f002 f8be 	bl	800f798 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681a      	ldr	r2, [r3, #0]
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d624:	68f9      	ldr	r1, [r7, #12]
 800d626:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d628:	fb01 f303 	mul.w	r3, r1, r3
 800d62c:	441a      	add	r2, r3
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2200      	movs	r2, #0
 800d636:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681a      	ldr	r2, [r3, #0]
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681a      	ldr	r2, [r3, #0]
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d648:	3b01      	subs	r3, #1
 800d64a:	68f9      	ldr	r1, [r7, #12]
 800d64c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d64e:	fb01 f303 	mul.w	r3, r1, r3
 800d652:	441a      	add	r2, r3
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	22ff      	movs	r2, #255	@ 0xff
 800d65c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	22ff      	movs	r2, #255	@ 0xff
 800d664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d114      	bne.n	800d698 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	691b      	ldr	r3, [r3, #16]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d01a      	beq.n	800d6ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	3310      	adds	r3, #16
 800d67a:	4618      	mov	r0, r3
 800d67c:	f001 fb72 	bl	800ed64 <xTaskRemoveFromEventList>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d012      	beq.n	800d6ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d686:	4b0d      	ldr	r3, [pc, #52]	@ (800d6bc <xQueueGenericReset+0xd0>)
 800d688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d68c:	601a      	str	r2, [r3, #0]
 800d68e:	f3bf 8f4f 	dsb	sy
 800d692:	f3bf 8f6f 	isb	sy
 800d696:	e009      	b.n	800d6ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	3310      	adds	r3, #16
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7ff fef1 	bl	800d484 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	3324      	adds	r3, #36	@ 0x24
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7ff feec 	bl	800d484 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d6ac:	f002 f8a6 	bl	800f7fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d6b0:	2301      	movs	r3, #1
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3710      	adds	r7, #16
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	e000ed04 	.word	0xe000ed04

0800d6c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b08e      	sub	sp, #56	@ 0x38
 800d6c4:	af02      	add	r7, sp, #8
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	607a      	str	r2, [r7, #4]
 800d6cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d10b      	bne.n	800d6ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d6d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d8:	f383 8811 	msr	BASEPRI, r3
 800d6dc:	f3bf 8f6f 	isb	sy
 800d6e0:	f3bf 8f4f 	dsb	sy
 800d6e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d6e6:	bf00      	nop
 800d6e8:	bf00      	nop
 800d6ea:	e7fd      	b.n	800d6e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d10b      	bne.n	800d70a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6f6:	f383 8811 	msr	BASEPRI, r3
 800d6fa:	f3bf 8f6f 	isb	sy
 800d6fe:	f3bf 8f4f 	dsb	sy
 800d702:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d704:	bf00      	nop
 800d706:	bf00      	nop
 800d708:	e7fd      	b.n	800d706 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d002      	beq.n	800d716 <xQueueGenericCreateStatic+0x56>
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d001      	beq.n	800d71a <xQueueGenericCreateStatic+0x5a>
 800d716:	2301      	movs	r3, #1
 800d718:	e000      	b.n	800d71c <xQueueGenericCreateStatic+0x5c>
 800d71a:	2300      	movs	r3, #0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d10b      	bne.n	800d738 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d724:	f383 8811 	msr	BASEPRI, r3
 800d728:	f3bf 8f6f 	isb	sy
 800d72c:	f3bf 8f4f 	dsb	sy
 800d730:	623b      	str	r3, [r7, #32]
}
 800d732:	bf00      	nop
 800d734:	bf00      	nop
 800d736:	e7fd      	b.n	800d734 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d102      	bne.n	800d744 <xQueueGenericCreateStatic+0x84>
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d101      	bne.n	800d748 <xQueueGenericCreateStatic+0x88>
 800d744:	2301      	movs	r3, #1
 800d746:	e000      	b.n	800d74a <xQueueGenericCreateStatic+0x8a>
 800d748:	2300      	movs	r3, #0
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d10b      	bne.n	800d766 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d752:	f383 8811 	msr	BASEPRI, r3
 800d756:	f3bf 8f6f 	isb	sy
 800d75a:	f3bf 8f4f 	dsb	sy
 800d75e:	61fb      	str	r3, [r7, #28]
}
 800d760:	bf00      	nop
 800d762:	bf00      	nop
 800d764:	e7fd      	b.n	800d762 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d766:	2348      	movs	r3, #72	@ 0x48
 800d768:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	2b48      	cmp	r3, #72	@ 0x48
 800d76e:	d00b      	beq.n	800d788 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d774:	f383 8811 	msr	BASEPRI, r3
 800d778:	f3bf 8f6f 	isb	sy
 800d77c:	f3bf 8f4f 	dsb	sy
 800d780:	61bb      	str	r3, [r7, #24]
}
 800d782:	bf00      	nop
 800d784:	bf00      	nop
 800d786:	e7fd      	b.n	800d784 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d788:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d790:	2b00      	cmp	r3, #0
 800d792:	d00d      	beq.n	800d7b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d796:	2201      	movs	r2, #1
 800d798:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d79c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a2:	9300      	str	r3, [sp, #0]
 800d7a4:	4613      	mov	r3, r2
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	68b9      	ldr	r1, [r7, #8]
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f000 f840 	bl	800d830 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d7b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3730      	adds	r7, #48	@ 0x30
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b08a      	sub	sp, #40	@ 0x28
 800d7be:	af02      	add	r7, sp, #8
 800d7c0:	60f8      	str	r0, [r7, #12]
 800d7c2:	60b9      	str	r1, [r7, #8]
 800d7c4:	4613      	mov	r3, r2
 800d7c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d10b      	bne.n	800d7e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d2:	f383 8811 	msr	BASEPRI, r3
 800d7d6:	f3bf 8f6f 	isb	sy
 800d7da:	f3bf 8f4f 	dsb	sy
 800d7de:	613b      	str	r3, [r7, #16]
}
 800d7e0:	bf00      	nop
 800d7e2:	bf00      	nop
 800d7e4:	e7fd      	b.n	800d7e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	68ba      	ldr	r2, [r7, #8]
 800d7ea:	fb02 f303 	mul.w	r3, r2, r3
 800d7ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	3348      	adds	r3, #72	@ 0x48
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f002 f8f1 	bl	800f9dc <pvPortMalloc>
 800d7fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d7fc:	69bb      	ldr	r3, [r7, #24]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d011      	beq.n	800d826 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d802:	69bb      	ldr	r3, [r7, #24]
 800d804:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	3348      	adds	r3, #72	@ 0x48
 800d80a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d80c:	69bb      	ldr	r3, [r7, #24]
 800d80e:	2200      	movs	r2, #0
 800d810:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d814:	79fa      	ldrb	r2, [r7, #7]
 800d816:	69bb      	ldr	r3, [r7, #24]
 800d818:	9300      	str	r3, [sp, #0]
 800d81a:	4613      	mov	r3, r2
 800d81c:	697a      	ldr	r2, [r7, #20]
 800d81e:	68b9      	ldr	r1, [r7, #8]
 800d820:	68f8      	ldr	r0, [r7, #12]
 800d822:	f000 f805 	bl	800d830 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d826:	69bb      	ldr	r3, [r7, #24]
	}
 800d828:	4618      	mov	r0, r3
 800d82a:	3720      	adds	r7, #32
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b084      	sub	sp, #16
 800d834:	af00      	add	r7, sp, #0
 800d836:	60f8      	str	r0, [r7, #12]
 800d838:	60b9      	str	r1, [r7, #8]
 800d83a:	607a      	str	r2, [r7, #4]
 800d83c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d103      	bne.n	800d84c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d844:	69bb      	ldr	r3, [r7, #24]
 800d846:	69ba      	ldr	r2, [r7, #24]
 800d848:	601a      	str	r2, [r3, #0]
 800d84a:	e002      	b.n	800d852 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	687a      	ldr	r2, [r7, #4]
 800d850:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d852:	69bb      	ldr	r3, [r7, #24]
 800d854:	68fa      	ldr	r2, [r7, #12]
 800d856:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d858:	69bb      	ldr	r3, [r7, #24]
 800d85a:	68ba      	ldr	r2, [r7, #8]
 800d85c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d85e:	2101      	movs	r1, #1
 800d860:	69b8      	ldr	r0, [r7, #24]
 800d862:	f7ff fec3 	bl	800d5ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d866:	bf00      	nop
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b082      	sub	sp, #8
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00e      	beq.n	800d89a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2200      	movs	r2, #0
 800d88c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d88e:	2300      	movs	r3, #0
 800d890:	2200      	movs	r2, #0
 800d892:	2100      	movs	r1, #0
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f000 f837 	bl	800d908 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d89a:	bf00      	nop
 800d89c:	3708      	adds	r7, #8
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d8a2:	b580      	push	{r7, lr}
 800d8a4:	b086      	sub	sp, #24
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	617b      	str	r3, [r7, #20]
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d8b4:	79fb      	ldrb	r3, [r7, #7]
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	6939      	ldr	r1, [r7, #16]
 800d8ba:	6978      	ldr	r0, [r7, #20]
 800d8bc:	f7ff ff7d 	bl	800d7ba <xQueueGenericCreate>
 800d8c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d8c2:	68f8      	ldr	r0, [r7, #12]
 800d8c4:	f7ff ffd3 	bl	800d86e <prvInitialiseMutex>

		return xNewQueue;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
	}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3718      	adds	r7, #24
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b088      	sub	sp, #32
 800d8d6:	af02      	add	r7, sp, #8
 800d8d8:	4603      	mov	r3, r0
 800d8da:	6039      	str	r1, [r7, #0]
 800d8dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	617b      	str	r3, [r7, #20]
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d8e6:	79fb      	ldrb	r3, [r7, #7]
 800d8e8:	9300      	str	r3, [sp, #0]
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	6939      	ldr	r1, [r7, #16]
 800d8f0:	6978      	ldr	r0, [r7, #20]
 800d8f2:	f7ff fee5 	bl	800d6c0 <xQueueGenericCreateStatic>
 800d8f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d8f8:	68f8      	ldr	r0, [r7, #12]
 800d8fa:	f7ff ffb8 	bl	800d86e <prvInitialiseMutex>

		return xNewQueue;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
	}
 800d900:	4618      	mov	r0, r3
 800d902:	3718      	adds	r7, #24
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b08e      	sub	sp, #56	@ 0x38
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	60b9      	str	r1, [r7, #8]
 800d912:	607a      	str	r2, [r7, #4]
 800d914:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d916:	2300      	movs	r3, #0
 800d918:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d920:	2b00      	cmp	r3, #0
 800d922:	d10b      	bne.n	800d93c <xQueueGenericSend+0x34>
	__asm volatile
 800d924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d928:	f383 8811 	msr	BASEPRI, r3
 800d92c:	f3bf 8f6f 	isb	sy
 800d930:	f3bf 8f4f 	dsb	sy
 800d934:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d936:	bf00      	nop
 800d938:	bf00      	nop
 800d93a:	e7fd      	b.n	800d938 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d103      	bne.n	800d94a <xQueueGenericSend+0x42>
 800d942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d946:	2b00      	cmp	r3, #0
 800d948:	d101      	bne.n	800d94e <xQueueGenericSend+0x46>
 800d94a:	2301      	movs	r3, #1
 800d94c:	e000      	b.n	800d950 <xQueueGenericSend+0x48>
 800d94e:	2300      	movs	r3, #0
 800d950:	2b00      	cmp	r3, #0
 800d952:	d10b      	bne.n	800d96c <xQueueGenericSend+0x64>
	__asm volatile
 800d954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d958:	f383 8811 	msr	BASEPRI, r3
 800d95c:	f3bf 8f6f 	isb	sy
 800d960:	f3bf 8f4f 	dsb	sy
 800d964:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d966:	bf00      	nop
 800d968:	bf00      	nop
 800d96a:	e7fd      	b.n	800d968 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	2b02      	cmp	r3, #2
 800d970:	d103      	bne.n	800d97a <xQueueGenericSend+0x72>
 800d972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d976:	2b01      	cmp	r3, #1
 800d978:	d101      	bne.n	800d97e <xQueueGenericSend+0x76>
 800d97a:	2301      	movs	r3, #1
 800d97c:	e000      	b.n	800d980 <xQueueGenericSend+0x78>
 800d97e:	2300      	movs	r3, #0
 800d980:	2b00      	cmp	r3, #0
 800d982:	d10b      	bne.n	800d99c <xQueueGenericSend+0x94>
	__asm volatile
 800d984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d988:	f383 8811 	msr	BASEPRI, r3
 800d98c:	f3bf 8f6f 	isb	sy
 800d990:	f3bf 8f4f 	dsb	sy
 800d994:	623b      	str	r3, [r7, #32]
}
 800d996:	bf00      	nop
 800d998:	bf00      	nop
 800d99a:	e7fd      	b.n	800d998 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d99c:	f001 fba8 	bl	800f0f0 <xTaskGetSchedulerState>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d102      	bne.n	800d9ac <xQueueGenericSend+0xa4>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d101      	bne.n	800d9b0 <xQueueGenericSend+0xa8>
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	e000      	b.n	800d9b2 <xQueueGenericSend+0xaa>
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d10b      	bne.n	800d9ce <xQueueGenericSend+0xc6>
	__asm volatile
 800d9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ba:	f383 8811 	msr	BASEPRI, r3
 800d9be:	f3bf 8f6f 	isb	sy
 800d9c2:	f3bf 8f4f 	dsb	sy
 800d9c6:	61fb      	str	r3, [r7, #28]
}
 800d9c8:	bf00      	nop
 800d9ca:	bf00      	nop
 800d9cc:	e7fd      	b.n	800d9ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d9ce:	f001 fee3 	bl	800f798 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d302      	bcc.n	800d9e4 <xQueueGenericSend+0xdc>
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	2b02      	cmp	r3, #2
 800d9e2:	d129      	bne.n	800da38 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d9e4:	683a      	ldr	r2, [r7, #0]
 800d9e6:	68b9      	ldr	r1, [r7, #8]
 800d9e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d9ea:	f000 fc49 	bl	800e280 <prvCopyDataToQueue>
 800d9ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d010      	beq.n	800da1a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9fa:	3324      	adds	r3, #36	@ 0x24
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f001 f9b1 	bl	800ed64 <xTaskRemoveFromEventList>
 800da02:	4603      	mov	r3, r0
 800da04:	2b00      	cmp	r3, #0
 800da06:	d013      	beq.n	800da30 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800da08:	4b3f      	ldr	r3, [pc, #252]	@ (800db08 <xQueueGenericSend+0x200>)
 800da0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da0e:	601a      	str	r2, [r3, #0]
 800da10:	f3bf 8f4f 	dsb	sy
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	e00a      	b.n	800da30 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800da1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d007      	beq.n	800da30 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800da20:	4b39      	ldr	r3, [pc, #228]	@ (800db08 <xQueueGenericSend+0x200>)
 800da22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da26:	601a      	str	r2, [r3, #0]
 800da28:	f3bf 8f4f 	dsb	sy
 800da2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800da30:	f001 fee4 	bl	800f7fc <vPortExitCritical>
				return pdPASS;
 800da34:	2301      	movs	r3, #1
 800da36:	e063      	b.n	800db00 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d103      	bne.n	800da46 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da3e:	f001 fedd 	bl	800f7fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800da42:	2300      	movs	r3, #0
 800da44:	e05c      	b.n	800db00 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d106      	bne.n	800da5a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da4c:	f107 0314 	add.w	r3, r7, #20
 800da50:	4618      	mov	r0, r3
 800da52:	f001 f9eb 	bl	800ee2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da56:	2301      	movs	r3, #1
 800da58:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da5a:	f001 fecf 	bl	800f7fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da5e:	f000 ff6f 	bl	800e940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da62:	f001 fe99 	bl	800f798 <vPortEnterCritical>
 800da66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da6c:	b25b      	sxtb	r3, r3
 800da6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da72:	d103      	bne.n	800da7c <xQueueGenericSend+0x174>
 800da74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da76:	2200      	movs	r2, #0
 800da78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da82:	b25b      	sxtb	r3, r3
 800da84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da88:	d103      	bne.n	800da92 <xQueueGenericSend+0x18a>
 800da8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da8c:	2200      	movs	r2, #0
 800da8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da92:	f001 feb3 	bl	800f7fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da96:	1d3a      	adds	r2, r7, #4
 800da98:	f107 0314 	add.w	r3, r7, #20
 800da9c:	4611      	mov	r1, r2
 800da9e:	4618      	mov	r0, r3
 800daa0:	f001 f9da 	bl	800ee58 <xTaskCheckForTimeOut>
 800daa4:	4603      	mov	r3, r0
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d124      	bne.n	800daf4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800daaa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800daac:	f000 fce0 	bl	800e470 <prvIsQueueFull>
 800dab0:	4603      	mov	r3, r0
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d018      	beq.n	800dae8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dab8:	3310      	adds	r3, #16
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	4611      	mov	r1, r2
 800dabe:	4618      	mov	r0, r3
 800dac0:	f001 f92a 	bl	800ed18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dac4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dac6:	f000 fc6b 	bl	800e3a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800daca:	f000 ff47 	bl	800e95c <xTaskResumeAll>
 800dace:	4603      	mov	r3, r0
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	f47f af7c 	bne.w	800d9ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800dad6:	4b0c      	ldr	r3, [pc, #48]	@ (800db08 <xQueueGenericSend+0x200>)
 800dad8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dadc:	601a      	str	r2, [r3, #0]
 800dade:	f3bf 8f4f 	dsb	sy
 800dae2:	f3bf 8f6f 	isb	sy
 800dae6:	e772      	b.n	800d9ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dae8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800daea:	f000 fc59 	bl	800e3a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800daee:	f000 ff35 	bl	800e95c <xTaskResumeAll>
 800daf2:	e76c      	b.n	800d9ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800daf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800daf6:	f000 fc53 	bl	800e3a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dafa:	f000 ff2f 	bl	800e95c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dafe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800db00:	4618      	mov	r0, r3
 800db02:	3738      	adds	r7, #56	@ 0x38
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	e000ed04 	.word	0xe000ed04

0800db0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b090      	sub	sp, #64	@ 0x40
 800db10:	af00      	add	r7, sp, #0
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	607a      	str	r2, [r7, #4]
 800db18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800db1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db20:	2b00      	cmp	r3, #0
 800db22:	d10b      	bne.n	800db3c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800db24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db28:	f383 8811 	msr	BASEPRI, r3
 800db2c:	f3bf 8f6f 	isb	sy
 800db30:	f3bf 8f4f 	dsb	sy
 800db34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800db36:	bf00      	nop
 800db38:	bf00      	nop
 800db3a:	e7fd      	b.n	800db38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d103      	bne.n	800db4a <xQueueGenericSendFromISR+0x3e>
 800db42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db46:	2b00      	cmp	r3, #0
 800db48:	d101      	bne.n	800db4e <xQueueGenericSendFromISR+0x42>
 800db4a:	2301      	movs	r3, #1
 800db4c:	e000      	b.n	800db50 <xQueueGenericSendFromISR+0x44>
 800db4e:	2300      	movs	r3, #0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d10b      	bne.n	800db6c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800db54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db58:	f383 8811 	msr	BASEPRI, r3
 800db5c:	f3bf 8f6f 	isb	sy
 800db60:	f3bf 8f4f 	dsb	sy
 800db64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800db66:	bf00      	nop
 800db68:	bf00      	nop
 800db6a:	e7fd      	b.n	800db68 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	2b02      	cmp	r3, #2
 800db70:	d103      	bne.n	800db7a <xQueueGenericSendFromISR+0x6e>
 800db72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db76:	2b01      	cmp	r3, #1
 800db78:	d101      	bne.n	800db7e <xQueueGenericSendFromISR+0x72>
 800db7a:	2301      	movs	r3, #1
 800db7c:	e000      	b.n	800db80 <xQueueGenericSendFromISR+0x74>
 800db7e:	2300      	movs	r3, #0
 800db80:	2b00      	cmp	r3, #0
 800db82:	d10b      	bne.n	800db9c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800db84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db88:	f383 8811 	msr	BASEPRI, r3
 800db8c:	f3bf 8f6f 	isb	sy
 800db90:	f3bf 8f4f 	dsb	sy
 800db94:	623b      	str	r3, [r7, #32]
}
 800db96:	bf00      	nop
 800db98:	bf00      	nop
 800db9a:	e7fd      	b.n	800db98 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db9c:	f001 fedc 	bl	800f958 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dba0:	f3ef 8211 	mrs	r2, BASEPRI
 800dba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dba8:	f383 8811 	msr	BASEPRI, r3
 800dbac:	f3bf 8f6f 	isb	sy
 800dbb0:	f3bf 8f4f 	dsb	sy
 800dbb4:	61fa      	str	r2, [r7, #28]
 800dbb6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dbb8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dbba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dbbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d302      	bcc.n	800dbce <xQueueGenericSendFromISR+0xc2>
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	2b02      	cmp	r3, #2
 800dbcc:	d12f      	bne.n	800dc2e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dbce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dbd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dbde:	683a      	ldr	r2, [r7, #0]
 800dbe0:	68b9      	ldr	r1, [r7, #8]
 800dbe2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dbe4:	f000 fb4c 	bl	800e280 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dbe8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800dbec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbf0:	d112      	bne.n	800dc18 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d016      	beq.n	800dc28 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbfc:	3324      	adds	r3, #36	@ 0x24
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f001 f8b0 	bl	800ed64 <xTaskRemoveFromEventList>
 800dc04:	4603      	mov	r3, r0
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d00e      	beq.n	800dc28 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d00b      	beq.n	800dc28 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2201      	movs	r2, #1
 800dc14:	601a      	str	r2, [r3, #0]
 800dc16:	e007      	b.n	800dc28 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dc18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	b25a      	sxtb	r2, r3
 800dc22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800dc28:	2301      	movs	r3, #1
 800dc2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800dc2c:	e001      	b.n	800dc32 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc34:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dc3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3740      	adds	r7, #64	@ 0x40
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b08e      	sub	sp, #56	@ 0x38
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800dc56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d10b      	bne.n	800dc74 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800dc5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc60:	f383 8811 	msr	BASEPRI, r3
 800dc64:	f3bf 8f6f 	isb	sy
 800dc68:	f3bf 8f4f 	dsb	sy
 800dc6c:	623b      	str	r3, [r7, #32]
}
 800dc6e:	bf00      	nop
 800dc70:	bf00      	nop
 800dc72:	e7fd      	b.n	800dc70 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dc74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00b      	beq.n	800dc94 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800dc7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc80:	f383 8811 	msr	BASEPRI, r3
 800dc84:	f3bf 8f6f 	isb	sy
 800dc88:	f3bf 8f4f 	dsb	sy
 800dc8c:	61fb      	str	r3, [r7, #28]
}
 800dc8e:	bf00      	nop
 800dc90:	bf00      	nop
 800dc92:	e7fd      	b.n	800dc90 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800dc94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d103      	bne.n	800dca4 <xQueueGiveFromISR+0x5c>
 800dc9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc9e:	689b      	ldr	r3, [r3, #8]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d101      	bne.n	800dca8 <xQueueGiveFromISR+0x60>
 800dca4:	2301      	movs	r3, #1
 800dca6:	e000      	b.n	800dcaa <xQueueGiveFromISR+0x62>
 800dca8:	2300      	movs	r3, #0
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d10b      	bne.n	800dcc6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800dcae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcb2:	f383 8811 	msr	BASEPRI, r3
 800dcb6:	f3bf 8f6f 	isb	sy
 800dcba:	f3bf 8f4f 	dsb	sy
 800dcbe:	61bb      	str	r3, [r7, #24]
}
 800dcc0:	bf00      	nop
 800dcc2:	bf00      	nop
 800dcc4:	e7fd      	b.n	800dcc2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dcc6:	f001 fe47 	bl	800f958 <vPortValidateInterruptPriority>
	__asm volatile
 800dcca:	f3ef 8211 	mrs	r2, BASEPRI
 800dcce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcd2:	f383 8811 	msr	BASEPRI, r3
 800dcd6:	f3bf 8f6f 	isb	sy
 800dcda:	f3bf 8f4f 	dsb	sy
 800dcde:	617a      	str	r2, [r7, #20]
 800dce0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800dce2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800dcec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d22b      	bcs.n	800dd4e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dcf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dcfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd02:	1c5a      	adds	r2, r3, #1
 800dd04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd06:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dd08:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800dd0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd10:	d112      	bne.n	800dd38 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d016      	beq.n	800dd48 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd1c:	3324      	adds	r3, #36	@ 0x24
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f001 f820 	bl	800ed64 <xTaskRemoveFromEventList>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d00e      	beq.n	800dd48 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d00b      	beq.n	800dd48 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	2201      	movs	r2, #1
 800dd34:	601a      	str	r2, [r3, #0]
 800dd36:	e007      	b.n	800dd48 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dd38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	b25a      	sxtb	r2, r3
 800dd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800dd48:	2301      	movs	r3, #1
 800dd4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd4c:	e001      	b.n	800dd52 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd54:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	f383 8811 	msr	BASEPRI, r3
}
 800dd5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3738      	adds	r7, #56	@ 0x38
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b08c      	sub	sp, #48	@ 0x30
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	60b9      	str	r1, [r7, #8]
 800dd72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dd74:	2300      	movs	r3, #0
 800dd76:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dd7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d10b      	bne.n	800dd9a <xQueueReceive+0x32>
	__asm volatile
 800dd82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd86:	f383 8811 	msr	BASEPRI, r3
 800dd8a:	f3bf 8f6f 	isb	sy
 800dd8e:	f3bf 8f4f 	dsb	sy
 800dd92:	623b      	str	r3, [r7, #32]
}
 800dd94:	bf00      	nop
 800dd96:	bf00      	nop
 800dd98:	e7fd      	b.n	800dd96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d103      	bne.n	800dda8 <xQueueReceive+0x40>
 800dda0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dda2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d101      	bne.n	800ddac <xQueueReceive+0x44>
 800dda8:	2301      	movs	r3, #1
 800ddaa:	e000      	b.n	800ddae <xQueueReceive+0x46>
 800ddac:	2300      	movs	r3, #0
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d10b      	bne.n	800ddca <xQueueReceive+0x62>
	__asm volatile
 800ddb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddb6:	f383 8811 	msr	BASEPRI, r3
 800ddba:	f3bf 8f6f 	isb	sy
 800ddbe:	f3bf 8f4f 	dsb	sy
 800ddc2:	61fb      	str	r3, [r7, #28]
}
 800ddc4:	bf00      	nop
 800ddc6:	bf00      	nop
 800ddc8:	e7fd      	b.n	800ddc6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ddca:	f001 f991 	bl	800f0f0 <xTaskGetSchedulerState>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d102      	bne.n	800ddda <xQueueReceive+0x72>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d101      	bne.n	800ddde <xQueueReceive+0x76>
 800ddda:	2301      	movs	r3, #1
 800dddc:	e000      	b.n	800dde0 <xQueueReceive+0x78>
 800ddde:	2300      	movs	r3, #0
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d10b      	bne.n	800ddfc <xQueueReceive+0x94>
	__asm volatile
 800dde4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dde8:	f383 8811 	msr	BASEPRI, r3
 800ddec:	f3bf 8f6f 	isb	sy
 800ddf0:	f3bf 8f4f 	dsb	sy
 800ddf4:	61bb      	str	r3, [r7, #24]
}
 800ddf6:	bf00      	nop
 800ddf8:	bf00      	nop
 800ddfa:	e7fd      	b.n	800ddf8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ddfc:	f001 fccc 	bl	800f798 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de04:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d01f      	beq.n	800de4c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800de0c:	68b9      	ldr	r1, [r7, #8]
 800de0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de10:	f000 faa0 	bl	800e354 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800de14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de16:	1e5a      	subs	r2, r3, #1
 800de18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de1a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de1e:	691b      	ldr	r3, [r3, #16]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d00f      	beq.n	800de44 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de26:	3310      	adds	r3, #16
 800de28:	4618      	mov	r0, r3
 800de2a:	f000 ff9b 	bl	800ed64 <xTaskRemoveFromEventList>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	d007      	beq.n	800de44 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800de34:	4b3c      	ldr	r3, [pc, #240]	@ (800df28 <xQueueReceive+0x1c0>)
 800de36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de3a:	601a      	str	r2, [r3, #0]
 800de3c:	f3bf 8f4f 	dsb	sy
 800de40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800de44:	f001 fcda 	bl	800f7fc <vPortExitCritical>
				return pdPASS;
 800de48:	2301      	movs	r3, #1
 800de4a:	e069      	b.n	800df20 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d103      	bne.n	800de5a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800de52:	f001 fcd3 	bl	800f7fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800de56:	2300      	movs	r3, #0
 800de58:	e062      	b.n	800df20 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800de5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d106      	bne.n	800de6e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de60:	f107 0310 	add.w	r3, r7, #16
 800de64:	4618      	mov	r0, r3
 800de66:	f000 ffe1 	bl	800ee2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800de6a:	2301      	movs	r3, #1
 800de6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800de6e:	f001 fcc5 	bl	800f7fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800de72:	f000 fd65 	bl	800e940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de76:	f001 fc8f 	bl	800f798 <vPortEnterCritical>
 800de7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de80:	b25b      	sxtb	r3, r3
 800de82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de86:	d103      	bne.n	800de90 <xQueueReceive+0x128>
 800de88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de8a:	2200      	movs	r2, #0
 800de8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de96:	b25b      	sxtb	r3, r3
 800de98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de9c:	d103      	bne.n	800dea6 <xQueueReceive+0x13e>
 800de9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dea0:	2200      	movs	r2, #0
 800dea2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dea6:	f001 fca9 	bl	800f7fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800deaa:	1d3a      	adds	r2, r7, #4
 800deac:	f107 0310 	add.w	r3, r7, #16
 800deb0:	4611      	mov	r1, r2
 800deb2:	4618      	mov	r0, r3
 800deb4:	f000 ffd0 	bl	800ee58 <xTaskCheckForTimeOut>
 800deb8:	4603      	mov	r3, r0
 800deba:	2b00      	cmp	r3, #0
 800debc:	d123      	bne.n	800df06 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800debe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dec0:	f000 fac0 	bl	800e444 <prvIsQueueEmpty>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d017      	beq.n	800defa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800deca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800decc:	3324      	adds	r3, #36	@ 0x24
 800dece:	687a      	ldr	r2, [r7, #4]
 800ded0:	4611      	mov	r1, r2
 800ded2:	4618      	mov	r0, r3
 800ded4:	f000 ff20 	bl	800ed18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ded8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800deda:	f000 fa61 	bl	800e3a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dede:	f000 fd3d 	bl	800e95c <xTaskResumeAll>
 800dee2:	4603      	mov	r3, r0
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d189      	bne.n	800ddfc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800dee8:	4b0f      	ldr	r3, [pc, #60]	@ (800df28 <xQueueReceive+0x1c0>)
 800deea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800deee:	601a      	str	r2, [r3, #0]
 800def0:	f3bf 8f4f 	dsb	sy
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	e780      	b.n	800ddfc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800defa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800defc:	f000 fa50 	bl	800e3a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df00:	f000 fd2c 	bl	800e95c <xTaskResumeAll>
 800df04:	e77a      	b.n	800ddfc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800df06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df08:	f000 fa4a 	bl	800e3a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df0c:	f000 fd26 	bl	800e95c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df12:	f000 fa97 	bl	800e444 <prvIsQueueEmpty>
 800df16:	4603      	mov	r3, r0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	f43f af6f 	beq.w	800ddfc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800df1e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800df20:	4618      	mov	r0, r3
 800df22:	3730      	adds	r7, #48	@ 0x30
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}
 800df28:	e000ed04 	.word	0xe000ed04

0800df2c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b08e      	sub	sp, #56	@ 0x38
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
 800df34:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800df36:	2300      	movs	r3, #0
 800df38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800df3e:	2300      	movs	r3, #0
 800df40:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800df42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df44:	2b00      	cmp	r3, #0
 800df46:	d10b      	bne.n	800df60 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800df48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df4c:	f383 8811 	msr	BASEPRI, r3
 800df50:	f3bf 8f6f 	isb	sy
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	623b      	str	r3, [r7, #32]
}
 800df5a:	bf00      	nop
 800df5c:	bf00      	nop
 800df5e:	e7fd      	b.n	800df5c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800df60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df64:	2b00      	cmp	r3, #0
 800df66:	d00b      	beq.n	800df80 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800df68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df6c:	f383 8811 	msr	BASEPRI, r3
 800df70:	f3bf 8f6f 	isb	sy
 800df74:	f3bf 8f4f 	dsb	sy
 800df78:	61fb      	str	r3, [r7, #28]
}
 800df7a:	bf00      	nop
 800df7c:	bf00      	nop
 800df7e:	e7fd      	b.n	800df7c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df80:	f001 f8b6 	bl	800f0f0 <xTaskGetSchedulerState>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d102      	bne.n	800df90 <xQueueSemaphoreTake+0x64>
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d101      	bne.n	800df94 <xQueueSemaphoreTake+0x68>
 800df90:	2301      	movs	r3, #1
 800df92:	e000      	b.n	800df96 <xQueueSemaphoreTake+0x6a>
 800df94:	2300      	movs	r3, #0
 800df96:	2b00      	cmp	r3, #0
 800df98:	d10b      	bne.n	800dfb2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800df9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df9e:	f383 8811 	msr	BASEPRI, r3
 800dfa2:	f3bf 8f6f 	isb	sy
 800dfa6:	f3bf 8f4f 	dsb	sy
 800dfaa:	61bb      	str	r3, [r7, #24]
}
 800dfac:	bf00      	nop
 800dfae:	bf00      	nop
 800dfb0:	e7fd      	b.n	800dfae <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dfb2:	f001 fbf1 	bl	800f798 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dfb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfba:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dfbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d024      	beq.n	800e00c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dfc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfc4:	1e5a      	subs	r2, r3, #1
 800dfc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dfca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d104      	bne.n	800dfdc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dfd2:	f001 fa39 	bl	800f448 <pvTaskIncrementMutexHeldCount>
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfda:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfde:	691b      	ldr	r3, [r3, #16]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d00f      	beq.n	800e004 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfe6:	3310      	adds	r3, #16
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f000 febb 	bl	800ed64 <xTaskRemoveFromEventList>
 800dfee:	4603      	mov	r3, r0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d007      	beq.n	800e004 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dff4:	4b54      	ldr	r3, [pc, #336]	@ (800e148 <xQueueSemaphoreTake+0x21c>)
 800dff6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dffa:	601a      	str	r2, [r3, #0]
 800dffc:	f3bf 8f4f 	dsb	sy
 800e000:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e004:	f001 fbfa 	bl	800f7fc <vPortExitCritical>
				return pdPASS;
 800e008:	2301      	movs	r3, #1
 800e00a:	e098      	b.n	800e13e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d112      	bne.n	800e038 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e014:	2b00      	cmp	r3, #0
 800e016:	d00b      	beq.n	800e030 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800e018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e01c:	f383 8811 	msr	BASEPRI, r3
 800e020:	f3bf 8f6f 	isb	sy
 800e024:	f3bf 8f4f 	dsb	sy
 800e028:	617b      	str	r3, [r7, #20]
}
 800e02a:	bf00      	nop
 800e02c:	bf00      	nop
 800e02e:	e7fd      	b.n	800e02c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e030:	f001 fbe4 	bl	800f7fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e034:	2300      	movs	r3, #0
 800e036:	e082      	b.n	800e13e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d106      	bne.n	800e04c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e03e:	f107 030c 	add.w	r3, r7, #12
 800e042:	4618      	mov	r0, r3
 800e044:	f000 fef2 	bl	800ee2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e048:	2301      	movs	r3, #1
 800e04a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e04c:	f001 fbd6 	bl	800f7fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e050:	f000 fc76 	bl	800e940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e054:	f001 fba0 	bl	800f798 <vPortEnterCritical>
 800e058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e05a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e05e:	b25b      	sxtb	r3, r3
 800e060:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e064:	d103      	bne.n	800e06e <xQueueSemaphoreTake+0x142>
 800e066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e068:	2200      	movs	r2, #0
 800e06a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e070:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e074:	b25b      	sxtb	r3, r3
 800e076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e07a:	d103      	bne.n	800e084 <xQueueSemaphoreTake+0x158>
 800e07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e07e:	2200      	movs	r2, #0
 800e080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e084:	f001 fbba 	bl	800f7fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e088:	463a      	mov	r2, r7
 800e08a:	f107 030c 	add.w	r3, r7, #12
 800e08e:	4611      	mov	r1, r2
 800e090:	4618      	mov	r0, r3
 800e092:	f000 fee1 	bl	800ee58 <xTaskCheckForTimeOut>
 800e096:	4603      	mov	r3, r0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d132      	bne.n	800e102 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e09c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e09e:	f000 f9d1 	bl	800e444 <prvIsQueueEmpty>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d026      	beq.n	800e0f6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d109      	bne.n	800e0c4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800e0b0:	f001 fb72 	bl	800f798 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0b6:	689b      	ldr	r3, [r3, #8]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f001 f837 	bl	800f12c <xTaskPriorityInherit>
 800e0be:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e0c0:	f001 fb9c 	bl	800f7fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0c6:	3324      	adds	r3, #36	@ 0x24
 800e0c8:	683a      	ldr	r2, [r7, #0]
 800e0ca:	4611      	mov	r1, r2
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f000 fe23 	bl	800ed18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e0d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0d4:	f000 f964 	bl	800e3a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e0d8:	f000 fc40 	bl	800e95c <xTaskResumeAll>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	f47f af67 	bne.w	800dfb2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800e0e4:	4b18      	ldr	r3, [pc, #96]	@ (800e148 <xQueueSemaphoreTake+0x21c>)
 800e0e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0ea:	601a      	str	r2, [r3, #0]
 800e0ec:	f3bf 8f4f 	dsb	sy
 800e0f0:	f3bf 8f6f 	isb	sy
 800e0f4:	e75d      	b.n	800dfb2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e0f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0f8:	f000 f952 	bl	800e3a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e0fc:	f000 fc2e 	bl	800e95c <xTaskResumeAll>
 800e100:	e757      	b.n	800dfb2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e102:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e104:	f000 f94c 	bl	800e3a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e108:	f000 fc28 	bl	800e95c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e10c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e10e:	f000 f999 	bl	800e444 <prvIsQueueEmpty>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	f43f af4c 	beq.w	800dfb2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d00d      	beq.n	800e13c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800e120:	f001 fb3a 	bl	800f798 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e124:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e126:	f000 f893 	bl	800e250 <prvGetDisinheritPriorityAfterTimeout>
 800e12a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e12e:	689b      	ldr	r3, [r3, #8]
 800e130:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e132:	4618      	mov	r0, r3
 800e134:	f001 f8f8 	bl	800f328 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e138:	f001 fb60 	bl	800f7fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e13c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3738      	adds	r7, #56	@ 0x38
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	e000ed04 	.word	0xe000ed04

0800e14c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b08e      	sub	sp, #56	@ 0x38
 800e150:	af00      	add	r7, sp, #0
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	60b9      	str	r1, [r7, #8]
 800e156:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d10b      	bne.n	800e17a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800e162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e166:	f383 8811 	msr	BASEPRI, r3
 800e16a:	f3bf 8f6f 	isb	sy
 800e16e:	f3bf 8f4f 	dsb	sy
 800e172:	623b      	str	r3, [r7, #32]
}
 800e174:	bf00      	nop
 800e176:	bf00      	nop
 800e178:	e7fd      	b.n	800e176 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d103      	bne.n	800e188 <xQueueReceiveFromISR+0x3c>
 800e180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e184:	2b00      	cmp	r3, #0
 800e186:	d101      	bne.n	800e18c <xQueueReceiveFromISR+0x40>
 800e188:	2301      	movs	r3, #1
 800e18a:	e000      	b.n	800e18e <xQueueReceiveFromISR+0x42>
 800e18c:	2300      	movs	r3, #0
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d10b      	bne.n	800e1aa <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800e192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e196:	f383 8811 	msr	BASEPRI, r3
 800e19a:	f3bf 8f6f 	isb	sy
 800e19e:	f3bf 8f4f 	dsb	sy
 800e1a2:	61fb      	str	r3, [r7, #28]
}
 800e1a4:	bf00      	nop
 800e1a6:	bf00      	nop
 800e1a8:	e7fd      	b.n	800e1a6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e1aa:	f001 fbd5 	bl	800f958 <vPortValidateInterruptPriority>
	__asm volatile
 800e1ae:	f3ef 8211 	mrs	r2, BASEPRI
 800e1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1b6:	f383 8811 	msr	BASEPRI, r3
 800e1ba:	f3bf 8f6f 	isb	sy
 800e1be:	f3bf 8f4f 	dsb	sy
 800e1c2:	61ba      	str	r2, [r7, #24]
 800e1c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e1c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1ce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d02f      	beq.n	800e236 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e1dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e1e0:	68b9      	ldr	r1, [r7, #8]
 800e1e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e1e4:	f000 f8b6 	bl	800e354 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ea:	1e5a      	subs	r2, r3, #1
 800e1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ee:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e1f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1f8:	d112      	bne.n	800e220 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1fc:	691b      	ldr	r3, [r3, #16]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d016      	beq.n	800e230 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e204:	3310      	adds	r3, #16
 800e206:	4618      	mov	r0, r3
 800e208:	f000 fdac 	bl	800ed64 <xTaskRemoveFromEventList>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d00e      	beq.n	800e230 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d00b      	beq.n	800e230 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2201      	movs	r2, #1
 800e21c:	601a      	str	r2, [r3, #0]
 800e21e:	e007      	b.n	800e230 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e220:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e224:	3301      	adds	r3, #1
 800e226:	b2db      	uxtb	r3, r3
 800e228:	b25a      	sxtb	r2, r3
 800e22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e22c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e230:	2301      	movs	r3, #1
 800e232:	637b      	str	r3, [r7, #52]	@ 0x34
 800e234:	e001      	b.n	800e23a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800e236:	2300      	movs	r3, #0
 800e238:	637b      	str	r3, [r7, #52]	@ 0x34
 800e23a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e23c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	f383 8811 	msr	BASEPRI, r3
}
 800e244:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3738      	adds	r7, #56	@ 0x38
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e250:	b480      	push	{r7}
 800e252:	b085      	sub	sp, #20
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d006      	beq.n	800e26e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f1c3 0307 	rsb	r3, r3, #7
 800e26a:	60fb      	str	r3, [r7, #12]
 800e26c:	e001      	b.n	800e272 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e26e:	2300      	movs	r3, #0
 800e270:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e272:	68fb      	ldr	r3, [r7, #12]
	}
 800e274:	4618      	mov	r0, r3
 800e276:	3714      	adds	r7, #20
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr

0800e280 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b086      	sub	sp, #24
 800e284:	af00      	add	r7, sp, #0
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	60b9      	str	r1, [r7, #8]
 800e28a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e28c:	2300      	movs	r3, #0
 800e28e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e294:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d10d      	bne.n	800e2ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d14d      	bne.n	800e342 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	689b      	ldr	r3, [r3, #8]
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f000 ffb4 	bl	800f218 <xTaskPriorityDisinherit>
 800e2b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	609a      	str	r2, [r3, #8]
 800e2b8:	e043      	b.n	800e342 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d119      	bne.n	800e2f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	6858      	ldr	r0, [r3, #4]
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	68b9      	ldr	r1, [r7, #8]
 800e2cc:	f00d fca5 	bl	801bc1a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	685a      	ldr	r2, [r3, #4]
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2d8:	441a      	add	r2, r3
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	685a      	ldr	r2, [r3, #4]
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	689b      	ldr	r3, [r3, #8]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d32b      	bcc.n	800e342 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	681a      	ldr	r2, [r3, #0]
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	605a      	str	r2, [r3, #4]
 800e2f2:	e026      	b.n	800e342 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	68d8      	ldr	r0, [r3, #12]
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	68b9      	ldr	r1, [r7, #8]
 800e300:	f00d fc8b 	bl	801bc1a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	68da      	ldr	r2, [r3, #12]
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e30c:	425b      	negs	r3, r3
 800e30e:	441a      	add	r2, r3
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	68da      	ldr	r2, [r3, #12]
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d207      	bcs.n	800e330 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	689a      	ldr	r2, [r3, #8]
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e328:	425b      	negs	r3, r3
 800e32a:	441a      	add	r2, r3
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2b02      	cmp	r3, #2
 800e334:	d105      	bne.n	800e342 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d002      	beq.n	800e342 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	3b01      	subs	r3, #1
 800e340:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	1c5a      	adds	r2, r3, #1
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e34a:	697b      	ldr	r3, [r7, #20]
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3718      	adds	r7, #24
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}

0800e354 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b082      	sub	sp, #8
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e362:	2b00      	cmp	r3, #0
 800e364:	d018      	beq.n	800e398 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	68da      	ldr	r2, [r3, #12]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e36e:	441a      	add	r2, r3
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	68da      	ldr	r2, [r3, #12]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	689b      	ldr	r3, [r3, #8]
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d303      	bcc.n	800e388 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	68d9      	ldr	r1, [r3, #12]
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e390:	461a      	mov	r2, r3
 800e392:	6838      	ldr	r0, [r7, #0]
 800e394:	f00d fc41 	bl	801bc1a <memcpy>
	}
}
 800e398:	bf00      	nop
 800e39a:	3708      	adds	r7, #8
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e3a8:	f001 f9f6 	bl	800f798 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e3b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e3b4:	e011      	b.n	800e3da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d012      	beq.n	800e3e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	3324      	adds	r3, #36	@ 0x24
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f000 fcce 	bl	800ed64 <xTaskRemoveFromEventList>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d001      	beq.n	800e3d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e3ce:	f000 fda7 	bl	800ef20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e3d2:	7bfb      	ldrb	r3, [r7, #15]
 800e3d4:	3b01      	subs	r3, #1
 800e3d6:	b2db      	uxtb	r3, r3
 800e3d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e3da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	dce9      	bgt.n	800e3b6 <prvUnlockQueue+0x16>
 800e3e2:	e000      	b.n	800e3e6 <prvUnlockQueue+0x46>
					break;
 800e3e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	22ff      	movs	r2, #255	@ 0xff
 800e3ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e3ee:	f001 fa05 	bl	800f7fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e3f2:	f001 f9d1 	bl	800f798 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e3fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e3fe:	e011      	b.n	800e424 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	691b      	ldr	r3, [r3, #16]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d012      	beq.n	800e42e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	3310      	adds	r3, #16
 800e40c:	4618      	mov	r0, r3
 800e40e:	f000 fca9 	bl	800ed64 <xTaskRemoveFromEventList>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	d001      	beq.n	800e41c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e418:	f000 fd82 	bl	800ef20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e41c:	7bbb      	ldrb	r3, [r7, #14]
 800e41e:	3b01      	subs	r3, #1
 800e420:	b2db      	uxtb	r3, r3
 800e422:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e424:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	dce9      	bgt.n	800e400 <prvUnlockQueue+0x60>
 800e42c:	e000      	b.n	800e430 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e42e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	22ff      	movs	r2, #255	@ 0xff
 800e434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e438:	f001 f9e0 	bl	800f7fc <vPortExitCritical>
}
 800e43c:	bf00      	nop
 800e43e:	3710      	adds	r7, #16
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}

0800e444 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b084      	sub	sp, #16
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e44c:	f001 f9a4 	bl	800f798 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e454:	2b00      	cmp	r3, #0
 800e456:	d102      	bne.n	800e45e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e458:	2301      	movs	r3, #1
 800e45a:	60fb      	str	r3, [r7, #12]
 800e45c:	e001      	b.n	800e462 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e45e:	2300      	movs	r3, #0
 800e460:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e462:	f001 f9cb 	bl	800f7fc <vPortExitCritical>

	return xReturn;
 800e466:	68fb      	ldr	r3, [r7, #12]
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3710      	adds	r7, #16
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b084      	sub	sp, #16
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e478:	f001 f98e 	bl	800f798 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e484:	429a      	cmp	r2, r3
 800e486:	d102      	bne.n	800e48e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e488:	2301      	movs	r3, #1
 800e48a:	60fb      	str	r3, [r7, #12]
 800e48c:	e001      	b.n	800e492 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e48e:	2300      	movs	r3, #0
 800e490:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e492:	f001 f9b3 	bl	800f7fc <vPortExitCritical>

	return xReturn;
 800e496:	68fb      	ldr	r3, [r7, #12]
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3710      	adds	r7, #16
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b08e      	sub	sp, #56	@ 0x38
 800e4a4:	af04      	add	r7, sp, #16
 800e4a6:	60f8      	str	r0, [r7, #12]
 800e4a8:	60b9      	str	r1, [r7, #8]
 800e4aa:	607a      	str	r2, [r7, #4]
 800e4ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e4ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d10b      	bne.n	800e4cc <xTaskCreateStatic+0x2c>
	__asm volatile
 800e4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4b8:	f383 8811 	msr	BASEPRI, r3
 800e4bc:	f3bf 8f6f 	isb	sy
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	623b      	str	r3, [r7, #32]
}
 800e4c6:	bf00      	nop
 800e4c8:	bf00      	nop
 800e4ca:	e7fd      	b.n	800e4c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d10b      	bne.n	800e4ea <xTaskCreateStatic+0x4a>
	__asm volatile
 800e4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4d6:	f383 8811 	msr	BASEPRI, r3
 800e4da:	f3bf 8f6f 	isb	sy
 800e4de:	f3bf 8f4f 	dsb	sy
 800e4e2:	61fb      	str	r3, [r7, #28]
}
 800e4e4:	bf00      	nop
 800e4e6:	bf00      	nop
 800e4e8:	e7fd      	b.n	800e4e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e4ea:	23a0      	movs	r3, #160	@ 0xa0
 800e4ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	2ba0      	cmp	r3, #160	@ 0xa0
 800e4f2:	d00b      	beq.n	800e50c <xTaskCreateStatic+0x6c>
	__asm volatile
 800e4f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4f8:	f383 8811 	msr	BASEPRI, r3
 800e4fc:	f3bf 8f6f 	isb	sy
 800e500:	f3bf 8f4f 	dsb	sy
 800e504:	61bb      	str	r3, [r7, #24]
}
 800e506:	bf00      	nop
 800e508:	bf00      	nop
 800e50a:	e7fd      	b.n	800e508 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e50c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e510:	2b00      	cmp	r3, #0
 800e512:	d01e      	beq.n	800e552 <xTaskCreateStatic+0xb2>
 800e514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e516:	2b00      	cmp	r3, #0
 800e518:	d01b      	beq.n	800e552 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e51c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e520:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e522:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e526:	2202      	movs	r2, #2
 800e528:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e52c:	2300      	movs	r3, #0
 800e52e:	9303      	str	r3, [sp, #12]
 800e530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e532:	9302      	str	r3, [sp, #8]
 800e534:	f107 0314 	add.w	r3, r7, #20
 800e538:	9301      	str	r3, [sp, #4]
 800e53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e53c:	9300      	str	r3, [sp, #0]
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	687a      	ldr	r2, [r7, #4]
 800e542:	68b9      	ldr	r1, [r7, #8]
 800e544:	68f8      	ldr	r0, [r7, #12]
 800e546:	f000 f851 	bl	800e5ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e54a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e54c:	f000 f8ee 	bl	800e72c <prvAddNewTaskToReadyList>
 800e550:	e001      	b.n	800e556 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e552:	2300      	movs	r3, #0
 800e554:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e556:	697b      	ldr	r3, [r7, #20]
	}
 800e558:	4618      	mov	r0, r3
 800e55a:	3728      	adds	r7, #40	@ 0x28
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}

0800e560 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e560:	b580      	push	{r7, lr}
 800e562:	b08c      	sub	sp, #48	@ 0x30
 800e564:	af04      	add	r7, sp, #16
 800e566:	60f8      	str	r0, [r7, #12]
 800e568:	60b9      	str	r1, [r7, #8]
 800e56a:	603b      	str	r3, [r7, #0]
 800e56c:	4613      	mov	r3, r2
 800e56e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e570:	88fb      	ldrh	r3, [r7, #6]
 800e572:	009b      	lsls	r3, r3, #2
 800e574:	4618      	mov	r0, r3
 800e576:	f001 fa31 	bl	800f9dc <pvPortMalloc>
 800e57a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00e      	beq.n	800e5a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e582:	20a0      	movs	r0, #160	@ 0xa0
 800e584:	f001 fa2a 	bl	800f9dc <pvPortMalloc>
 800e588:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e58a:	69fb      	ldr	r3, [r7, #28]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d003      	beq.n	800e598 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e590:	69fb      	ldr	r3, [r7, #28]
 800e592:	697a      	ldr	r2, [r7, #20]
 800e594:	631a      	str	r2, [r3, #48]	@ 0x30
 800e596:	e005      	b.n	800e5a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e598:	6978      	ldr	r0, [r7, #20]
 800e59a:	f001 faed 	bl	800fb78 <vPortFree>
 800e59e:	e001      	b.n	800e5a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e5a4:	69fb      	ldr	r3, [r7, #28]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d017      	beq.n	800e5da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e5aa:	69fb      	ldr	r3, [r7, #28]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e5b2:	88fa      	ldrh	r2, [r7, #6]
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	9303      	str	r3, [sp, #12]
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	9302      	str	r3, [sp, #8]
 800e5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5be:	9301      	str	r3, [sp, #4]
 800e5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5c2:	9300      	str	r3, [sp, #0]
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	68b9      	ldr	r1, [r7, #8]
 800e5c8:	68f8      	ldr	r0, [r7, #12]
 800e5ca:	f000 f80f 	bl	800e5ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e5ce:	69f8      	ldr	r0, [r7, #28]
 800e5d0:	f000 f8ac 	bl	800e72c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	61bb      	str	r3, [r7, #24]
 800e5d8:	e002      	b.n	800e5e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e5da:	f04f 33ff 	mov.w	r3, #4294967295
 800e5de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e5e0:	69bb      	ldr	r3, [r7, #24]
	}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3720      	adds	r7, #32
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
	...

0800e5ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b088      	sub	sp, #32
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	60f8      	str	r0, [r7, #12]
 800e5f4:	60b9      	str	r1, [r7, #8]
 800e5f6:	607a      	str	r2, [r7, #4]
 800e5f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e604:	3b01      	subs	r3, #1
 800e606:	009b      	lsls	r3, r3, #2
 800e608:	4413      	add	r3, r2
 800e60a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	f023 0307 	bic.w	r3, r3, #7
 800e612:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e614:	69bb      	ldr	r3, [r7, #24]
 800e616:	f003 0307 	and.w	r3, r3, #7
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d00b      	beq.n	800e636 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800e61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e622:	f383 8811 	msr	BASEPRI, r3
 800e626:	f3bf 8f6f 	isb	sy
 800e62a:	f3bf 8f4f 	dsb	sy
 800e62e:	617b      	str	r3, [r7, #20]
}
 800e630:	bf00      	nop
 800e632:	bf00      	nop
 800e634:	e7fd      	b.n	800e632 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d01f      	beq.n	800e67c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e63c:	2300      	movs	r3, #0
 800e63e:	61fb      	str	r3, [r7, #28]
 800e640:	e012      	b.n	800e668 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e642:	68ba      	ldr	r2, [r7, #8]
 800e644:	69fb      	ldr	r3, [r7, #28]
 800e646:	4413      	add	r3, r2
 800e648:	7819      	ldrb	r1, [r3, #0]
 800e64a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e64c:	69fb      	ldr	r3, [r7, #28]
 800e64e:	4413      	add	r3, r2
 800e650:	3334      	adds	r3, #52	@ 0x34
 800e652:	460a      	mov	r2, r1
 800e654:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e656:	68ba      	ldr	r2, [r7, #8]
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	4413      	add	r3, r2
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d006      	beq.n	800e670 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e662:	69fb      	ldr	r3, [r7, #28]
 800e664:	3301      	adds	r3, #1
 800e666:	61fb      	str	r3, [r7, #28]
 800e668:	69fb      	ldr	r3, [r7, #28]
 800e66a:	2b0f      	cmp	r3, #15
 800e66c:	d9e9      	bls.n	800e642 <prvInitialiseNewTask+0x56>
 800e66e:	e000      	b.n	800e672 <prvInitialiseNewTask+0x86>
			{
				break;
 800e670:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e674:	2200      	movs	r2, #0
 800e676:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e67a:	e003      	b.n	800e684 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e67e:	2200      	movs	r2, #0
 800e680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e686:	2b06      	cmp	r3, #6
 800e688:	d901      	bls.n	800e68e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e68a:	2306      	movs	r3, #6
 800e68c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e690:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e692:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e696:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e698:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e69c:	2200      	movs	r2, #0
 800e69e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6a2:	3304      	adds	r3, #4
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f7fe ff0d 	bl	800d4c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6ac:	3318      	adds	r3, #24
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f7fe ff08 	bl	800d4c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6bc:	f1c3 0207 	rsb	r2, r3, #7
 800e6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6c8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6dc:	334c      	adds	r3, #76	@ 0x4c
 800e6de:	224c      	movs	r2, #76	@ 0x4c
 800e6e0:	2100      	movs	r1, #0
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f00d f9af 	bl	801ba46 <memset>
 800e6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6ea:	4a0d      	ldr	r2, [pc, #52]	@ (800e720 <prvInitialiseNewTask+0x134>)
 800e6ec:	651a      	str	r2, [r3, #80]	@ 0x50
 800e6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f0:	4a0c      	ldr	r2, [pc, #48]	@ (800e724 <prvInitialiseNewTask+0x138>)
 800e6f2:	655a      	str	r2, [r3, #84]	@ 0x54
 800e6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f6:	4a0c      	ldr	r2, [pc, #48]	@ (800e728 <prvInitialiseNewTask+0x13c>)
 800e6f8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e6fa:	683a      	ldr	r2, [r7, #0]
 800e6fc:	68f9      	ldr	r1, [r7, #12]
 800e6fe:	69b8      	ldr	r0, [r7, #24]
 800e700:	f000 ff1c 	bl	800f53c <pxPortInitialiseStack>
 800e704:	4602      	mov	r2, r0
 800e706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e708:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e70a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d002      	beq.n	800e716 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e716:	bf00      	nop
 800e718:	3720      	adds	r7, #32
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
 800e71e:	bf00      	nop
 800e720:	2000e600 	.word	0x2000e600
 800e724:	2000e668 	.word	0x2000e668
 800e728:	2000e6d0 	.word	0x2000e6d0

0800e72c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e734:	f001 f830 	bl	800f798 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e738:	4b2a      	ldr	r3, [pc, #168]	@ (800e7e4 <prvAddNewTaskToReadyList+0xb8>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	3301      	adds	r3, #1
 800e73e:	4a29      	ldr	r2, [pc, #164]	@ (800e7e4 <prvAddNewTaskToReadyList+0xb8>)
 800e740:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e742:	4b29      	ldr	r3, [pc, #164]	@ (800e7e8 <prvAddNewTaskToReadyList+0xbc>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d109      	bne.n	800e75e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e74a:	4a27      	ldr	r2, [pc, #156]	@ (800e7e8 <prvAddNewTaskToReadyList+0xbc>)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e750:	4b24      	ldr	r3, [pc, #144]	@ (800e7e4 <prvAddNewTaskToReadyList+0xb8>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	2b01      	cmp	r3, #1
 800e756:	d110      	bne.n	800e77a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e758:	f000 fc06 	bl	800ef68 <prvInitialiseTaskLists>
 800e75c:	e00d      	b.n	800e77a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e75e:	4b23      	ldr	r3, [pc, #140]	@ (800e7ec <prvAddNewTaskToReadyList+0xc0>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d109      	bne.n	800e77a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e766:	4b20      	ldr	r3, [pc, #128]	@ (800e7e8 <prvAddNewTaskToReadyList+0xbc>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e770:	429a      	cmp	r2, r3
 800e772:	d802      	bhi.n	800e77a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e774:	4a1c      	ldr	r2, [pc, #112]	@ (800e7e8 <prvAddNewTaskToReadyList+0xbc>)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e77a:	4b1d      	ldr	r3, [pc, #116]	@ (800e7f0 <prvAddNewTaskToReadyList+0xc4>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	3301      	adds	r3, #1
 800e780:	4a1b      	ldr	r2, [pc, #108]	@ (800e7f0 <prvAddNewTaskToReadyList+0xc4>)
 800e782:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e788:	2201      	movs	r2, #1
 800e78a:	409a      	lsls	r2, r3
 800e78c:	4b19      	ldr	r3, [pc, #100]	@ (800e7f4 <prvAddNewTaskToReadyList+0xc8>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4313      	orrs	r3, r2
 800e792:	4a18      	ldr	r2, [pc, #96]	@ (800e7f4 <prvAddNewTaskToReadyList+0xc8>)
 800e794:	6013      	str	r3, [r2, #0]
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e79a:	4613      	mov	r3, r2
 800e79c:	009b      	lsls	r3, r3, #2
 800e79e:	4413      	add	r3, r2
 800e7a0:	009b      	lsls	r3, r3, #2
 800e7a2:	4a15      	ldr	r2, [pc, #84]	@ (800e7f8 <prvAddNewTaskToReadyList+0xcc>)
 800e7a4:	441a      	add	r2, r3
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	3304      	adds	r3, #4
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	4610      	mov	r0, r2
 800e7ae:	f7fe fe96 	bl	800d4de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e7b2:	f001 f823 	bl	800f7fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e7b6:	4b0d      	ldr	r3, [pc, #52]	@ (800e7ec <prvAddNewTaskToReadyList+0xc0>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d00e      	beq.n	800e7dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e7be:	4b0a      	ldr	r3, [pc, #40]	@ (800e7e8 <prvAddNewTaskToReadyList+0xbc>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d207      	bcs.n	800e7dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e7cc:	4b0b      	ldr	r3, [pc, #44]	@ (800e7fc <prvAddNewTaskToReadyList+0xd0>)
 800e7ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e7d2:	601a      	str	r2, [r3, #0]
 800e7d4:	f3bf 8f4f 	dsb	sy
 800e7d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e7dc:	bf00      	nop
 800e7de:	3708      	adds	r7, #8
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	200054f8 	.word	0x200054f8
 800e7e8:	200053f8 	.word	0x200053f8
 800e7ec:	20005504 	.word	0x20005504
 800e7f0:	20005514 	.word	0x20005514
 800e7f4:	20005500 	.word	0x20005500
 800e7f8:	200053fc 	.word	0x200053fc
 800e7fc:	e000ed04 	.word	0xe000ed04

0800e800 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e800:	b580      	push	{r7, lr}
 800e802:	b084      	sub	sp, #16
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e808:	2300      	movs	r3, #0
 800e80a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d018      	beq.n	800e844 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e812:	4b14      	ldr	r3, [pc, #80]	@ (800e864 <vTaskDelay+0x64>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d00b      	beq.n	800e832 <vTaskDelay+0x32>
	__asm volatile
 800e81a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e81e:	f383 8811 	msr	BASEPRI, r3
 800e822:	f3bf 8f6f 	isb	sy
 800e826:	f3bf 8f4f 	dsb	sy
 800e82a:	60bb      	str	r3, [r7, #8]
}
 800e82c:	bf00      	nop
 800e82e:	bf00      	nop
 800e830:	e7fd      	b.n	800e82e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e832:	f000 f885 	bl	800e940 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e836:	2100      	movs	r1, #0
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f000 fe19 	bl	800f470 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e83e:	f000 f88d 	bl	800e95c <xTaskResumeAll>
 800e842:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d107      	bne.n	800e85a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e84a:	4b07      	ldr	r3, [pc, #28]	@ (800e868 <vTaskDelay+0x68>)
 800e84c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e850:	601a      	str	r2, [r3, #0]
 800e852:	f3bf 8f4f 	dsb	sy
 800e856:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e85a:	bf00      	nop
 800e85c:	3710      	adds	r7, #16
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	20005520 	.word	0x20005520
 800e868:	e000ed04 	.word	0xe000ed04

0800e86c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b08a      	sub	sp, #40	@ 0x28
 800e870:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e872:	2300      	movs	r3, #0
 800e874:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e876:	2300      	movs	r3, #0
 800e878:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e87a:	463a      	mov	r2, r7
 800e87c:	1d39      	adds	r1, r7, #4
 800e87e:	f107 0308 	add.w	r3, r7, #8
 800e882:	4618      	mov	r0, r3
 800e884:	f7f2 f9ce 	bl	8000c24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e888:	6839      	ldr	r1, [r7, #0]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	68ba      	ldr	r2, [r7, #8]
 800e88e:	9202      	str	r2, [sp, #8]
 800e890:	9301      	str	r3, [sp, #4]
 800e892:	2300      	movs	r3, #0
 800e894:	9300      	str	r3, [sp, #0]
 800e896:	2300      	movs	r3, #0
 800e898:	460a      	mov	r2, r1
 800e89a:	4921      	ldr	r1, [pc, #132]	@ (800e920 <vTaskStartScheduler+0xb4>)
 800e89c:	4821      	ldr	r0, [pc, #132]	@ (800e924 <vTaskStartScheduler+0xb8>)
 800e89e:	f7ff fdff 	bl	800e4a0 <xTaskCreateStatic>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	4a20      	ldr	r2, [pc, #128]	@ (800e928 <vTaskStartScheduler+0xbc>)
 800e8a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e8a8:	4b1f      	ldr	r3, [pc, #124]	@ (800e928 <vTaskStartScheduler+0xbc>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d002      	beq.n	800e8b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	617b      	str	r3, [r7, #20]
 800e8b4:	e001      	b.n	800e8ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	d11b      	bne.n	800e8f8 <vTaskStartScheduler+0x8c>
	__asm volatile
 800e8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8c4:	f383 8811 	msr	BASEPRI, r3
 800e8c8:	f3bf 8f6f 	isb	sy
 800e8cc:	f3bf 8f4f 	dsb	sy
 800e8d0:	613b      	str	r3, [r7, #16]
}
 800e8d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e8d4:	4b15      	ldr	r3, [pc, #84]	@ (800e92c <vTaskStartScheduler+0xc0>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	334c      	adds	r3, #76	@ 0x4c
 800e8da:	4a15      	ldr	r2, [pc, #84]	@ (800e930 <vTaskStartScheduler+0xc4>)
 800e8dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e8de:	4b15      	ldr	r3, [pc, #84]	@ (800e934 <vTaskStartScheduler+0xc8>)
 800e8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800e8e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e8e6:	4b14      	ldr	r3, [pc, #80]	@ (800e938 <vTaskStartScheduler+0xcc>)
 800e8e8:	2201      	movs	r2, #1
 800e8ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e8ec:	4b13      	ldr	r3, [pc, #76]	@ (800e93c <vTaskStartScheduler+0xd0>)
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e8f2:	f000 fead 	bl	800f650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e8f6:	e00f      	b.n	800e918 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8fe:	d10b      	bne.n	800e918 <vTaskStartScheduler+0xac>
	__asm volatile
 800e900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e904:	f383 8811 	msr	BASEPRI, r3
 800e908:	f3bf 8f6f 	isb	sy
 800e90c:	f3bf 8f4f 	dsb	sy
 800e910:	60fb      	str	r3, [r7, #12]
}
 800e912:	bf00      	nop
 800e914:	bf00      	nop
 800e916:	e7fd      	b.n	800e914 <vTaskStartScheduler+0xa8>
}
 800e918:	bf00      	nop
 800e91a:	3718      	adds	r7, #24
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	0801e378 	.word	0x0801e378
 800e924:	0800ef39 	.word	0x0800ef39
 800e928:	2000551c 	.word	0x2000551c
 800e92c:	200053f8 	.word	0x200053f8
 800e930:	20000118 	.word	0x20000118
 800e934:	20005518 	.word	0x20005518
 800e938:	20005504 	.word	0x20005504
 800e93c:	200054fc 	.word	0x200054fc

0800e940 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e940:	b480      	push	{r7}
 800e942:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e944:	4b04      	ldr	r3, [pc, #16]	@ (800e958 <vTaskSuspendAll+0x18>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	3301      	adds	r3, #1
 800e94a:	4a03      	ldr	r2, [pc, #12]	@ (800e958 <vTaskSuspendAll+0x18>)
 800e94c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e94e:	bf00      	nop
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr
 800e958:	20005520 	.word	0x20005520

0800e95c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b084      	sub	sp, #16
 800e960:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e962:	2300      	movs	r3, #0
 800e964:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e966:	2300      	movs	r3, #0
 800e968:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e96a:	4b42      	ldr	r3, [pc, #264]	@ (800ea74 <xTaskResumeAll+0x118>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d10b      	bne.n	800e98a <xTaskResumeAll+0x2e>
	__asm volatile
 800e972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e976:	f383 8811 	msr	BASEPRI, r3
 800e97a:	f3bf 8f6f 	isb	sy
 800e97e:	f3bf 8f4f 	dsb	sy
 800e982:	603b      	str	r3, [r7, #0]
}
 800e984:	bf00      	nop
 800e986:	bf00      	nop
 800e988:	e7fd      	b.n	800e986 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e98a:	f000 ff05 	bl	800f798 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e98e:	4b39      	ldr	r3, [pc, #228]	@ (800ea74 <xTaskResumeAll+0x118>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	3b01      	subs	r3, #1
 800e994:	4a37      	ldr	r2, [pc, #220]	@ (800ea74 <xTaskResumeAll+0x118>)
 800e996:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e998:	4b36      	ldr	r3, [pc, #216]	@ (800ea74 <xTaskResumeAll+0x118>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d161      	bne.n	800ea64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e9a0:	4b35      	ldr	r3, [pc, #212]	@ (800ea78 <xTaskResumeAll+0x11c>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d05d      	beq.n	800ea64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e9a8:	e02e      	b.n	800ea08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9aa:	4b34      	ldr	r3, [pc, #208]	@ (800ea7c <xTaskResumeAll+0x120>)
 800e9ac:	68db      	ldr	r3, [r3, #12]
 800e9ae:	68db      	ldr	r3, [r3, #12]
 800e9b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	3318      	adds	r3, #24
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7fe fdee 	bl	800d598 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	3304      	adds	r3, #4
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f7fe fde9 	bl	800d598 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	409a      	lsls	r2, r3
 800e9ce:	4b2c      	ldr	r3, [pc, #176]	@ (800ea80 <xTaskResumeAll+0x124>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	4313      	orrs	r3, r2
 800e9d4:	4a2a      	ldr	r2, [pc, #168]	@ (800ea80 <xTaskResumeAll+0x124>)
 800e9d6:	6013      	str	r3, [r2, #0]
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9dc:	4613      	mov	r3, r2
 800e9de:	009b      	lsls	r3, r3, #2
 800e9e0:	4413      	add	r3, r2
 800e9e2:	009b      	lsls	r3, r3, #2
 800e9e4:	4a27      	ldr	r2, [pc, #156]	@ (800ea84 <xTaskResumeAll+0x128>)
 800e9e6:	441a      	add	r2, r3
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	3304      	adds	r3, #4
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	4610      	mov	r0, r2
 800e9f0:	f7fe fd75 	bl	800d4de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9f8:	4b23      	ldr	r3, [pc, #140]	@ (800ea88 <xTaskResumeAll+0x12c>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d302      	bcc.n	800ea08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ea02:	4b22      	ldr	r3, [pc, #136]	@ (800ea8c <xTaskResumeAll+0x130>)
 800ea04:	2201      	movs	r2, #1
 800ea06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ea08:	4b1c      	ldr	r3, [pc, #112]	@ (800ea7c <xTaskResumeAll+0x120>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d1cc      	bne.n	800e9aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d001      	beq.n	800ea1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ea16:	f000 fb4b 	bl	800f0b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ea1a:	4b1d      	ldr	r3, [pc, #116]	@ (800ea90 <xTaskResumeAll+0x134>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d010      	beq.n	800ea48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ea26:	f000 f859 	bl	800eadc <xTaskIncrementTick>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d002      	beq.n	800ea36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ea30:	4b16      	ldr	r3, [pc, #88]	@ (800ea8c <xTaskResumeAll+0x130>)
 800ea32:	2201      	movs	r2, #1
 800ea34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	3b01      	subs	r3, #1
 800ea3a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d1f1      	bne.n	800ea26 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ea42:	4b13      	ldr	r3, [pc, #76]	@ (800ea90 <xTaskResumeAll+0x134>)
 800ea44:	2200      	movs	r2, #0
 800ea46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ea48:	4b10      	ldr	r3, [pc, #64]	@ (800ea8c <xTaskResumeAll+0x130>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d009      	beq.n	800ea64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ea50:	2301      	movs	r3, #1
 800ea52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ea54:	4b0f      	ldr	r3, [pc, #60]	@ (800ea94 <xTaskResumeAll+0x138>)
 800ea56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea5a:	601a      	str	r2, [r3, #0]
 800ea5c:	f3bf 8f4f 	dsb	sy
 800ea60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea64:	f000 feca 	bl	800f7fc <vPortExitCritical>

	return xAlreadyYielded;
 800ea68:	68bb      	ldr	r3, [r7, #8]
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3710      	adds	r7, #16
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	20005520 	.word	0x20005520
 800ea78:	200054f8 	.word	0x200054f8
 800ea7c:	200054b8 	.word	0x200054b8
 800ea80:	20005500 	.word	0x20005500
 800ea84:	200053fc 	.word	0x200053fc
 800ea88:	200053f8 	.word	0x200053f8
 800ea8c:	2000550c 	.word	0x2000550c
 800ea90:	20005508 	.word	0x20005508
 800ea94:	e000ed04 	.word	0xe000ed04

0800ea98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b083      	sub	sp, #12
 800ea9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ea9e:	4b05      	ldr	r3, [pc, #20]	@ (800eab4 <xTaskGetTickCount+0x1c>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800eaa4:	687b      	ldr	r3, [r7, #4]
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	370c      	adds	r7, #12
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab0:	4770      	bx	lr
 800eab2:	bf00      	nop
 800eab4:	200054fc 	.word	0x200054fc

0800eab8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eabe:	f000 ff4b 	bl	800f958 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800eac2:	2300      	movs	r3, #0
 800eac4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800eac6:	4b04      	ldr	r3, [pc, #16]	@ (800ead8 <xTaskGetTickCountFromISR+0x20>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eacc:	683b      	ldr	r3, [r7, #0]
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3708      	adds	r7, #8
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}
 800ead6:	bf00      	nop
 800ead8:	200054fc 	.word	0x200054fc

0800eadc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b086      	sub	sp, #24
 800eae0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800eae2:	2300      	movs	r3, #0
 800eae4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eae6:	4b4f      	ldr	r3, [pc, #316]	@ (800ec24 <xTaskIncrementTick+0x148>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	f040 808f 	bne.w	800ec0e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800eaf0:	4b4d      	ldr	r3, [pc, #308]	@ (800ec28 <xTaskIncrementTick+0x14c>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	3301      	adds	r3, #1
 800eaf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800eaf8:	4a4b      	ldr	r2, [pc, #300]	@ (800ec28 <xTaskIncrementTick+0x14c>)
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d121      	bne.n	800eb48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800eb04:	4b49      	ldr	r3, [pc, #292]	@ (800ec2c <xTaskIncrementTick+0x150>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d00b      	beq.n	800eb26 <xTaskIncrementTick+0x4a>
	__asm volatile
 800eb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb12:	f383 8811 	msr	BASEPRI, r3
 800eb16:	f3bf 8f6f 	isb	sy
 800eb1a:	f3bf 8f4f 	dsb	sy
 800eb1e:	603b      	str	r3, [r7, #0]
}
 800eb20:	bf00      	nop
 800eb22:	bf00      	nop
 800eb24:	e7fd      	b.n	800eb22 <xTaskIncrementTick+0x46>
 800eb26:	4b41      	ldr	r3, [pc, #260]	@ (800ec2c <xTaskIncrementTick+0x150>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	60fb      	str	r3, [r7, #12]
 800eb2c:	4b40      	ldr	r3, [pc, #256]	@ (800ec30 <xTaskIncrementTick+0x154>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	4a3e      	ldr	r2, [pc, #248]	@ (800ec2c <xTaskIncrementTick+0x150>)
 800eb32:	6013      	str	r3, [r2, #0]
 800eb34:	4a3e      	ldr	r2, [pc, #248]	@ (800ec30 <xTaskIncrementTick+0x154>)
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	6013      	str	r3, [r2, #0]
 800eb3a:	4b3e      	ldr	r3, [pc, #248]	@ (800ec34 <xTaskIncrementTick+0x158>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	3301      	adds	r3, #1
 800eb40:	4a3c      	ldr	r2, [pc, #240]	@ (800ec34 <xTaskIncrementTick+0x158>)
 800eb42:	6013      	str	r3, [r2, #0]
 800eb44:	f000 fab4 	bl	800f0b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800eb48:	4b3b      	ldr	r3, [pc, #236]	@ (800ec38 <xTaskIncrementTick+0x15c>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	693a      	ldr	r2, [r7, #16]
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d348      	bcc.n	800ebe4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb52:	4b36      	ldr	r3, [pc, #216]	@ (800ec2c <xTaskIncrementTick+0x150>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d104      	bne.n	800eb66 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb5c:	4b36      	ldr	r3, [pc, #216]	@ (800ec38 <xTaskIncrementTick+0x15c>)
 800eb5e:	f04f 32ff 	mov.w	r2, #4294967295
 800eb62:	601a      	str	r2, [r3, #0]
					break;
 800eb64:	e03e      	b.n	800ebe4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb66:	4b31      	ldr	r3, [pc, #196]	@ (800ec2c <xTaskIncrementTick+0x150>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	68db      	ldr	r3, [r3, #12]
 800eb6c:	68db      	ldr	r3, [r3, #12]
 800eb6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800eb76:	693a      	ldr	r2, [r7, #16]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d203      	bcs.n	800eb86 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800eb7e:	4a2e      	ldr	r2, [pc, #184]	@ (800ec38 <xTaskIncrementTick+0x15c>)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800eb84:	e02e      	b.n	800ebe4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	3304      	adds	r3, #4
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7fe fd04 	bl	800d598 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d004      	beq.n	800eba2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	3318      	adds	r3, #24
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7fe fcfb 	bl	800d598 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eba6:	2201      	movs	r2, #1
 800eba8:	409a      	lsls	r2, r3
 800ebaa:	4b24      	ldr	r3, [pc, #144]	@ (800ec3c <xTaskIncrementTick+0x160>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	4a22      	ldr	r2, [pc, #136]	@ (800ec3c <xTaskIncrementTick+0x160>)
 800ebb2:	6013      	str	r3, [r2, #0]
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebb8:	4613      	mov	r3, r2
 800ebba:	009b      	lsls	r3, r3, #2
 800ebbc:	4413      	add	r3, r2
 800ebbe:	009b      	lsls	r3, r3, #2
 800ebc0:	4a1f      	ldr	r2, [pc, #124]	@ (800ec40 <xTaskIncrementTick+0x164>)
 800ebc2:	441a      	add	r2, r3
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	3304      	adds	r3, #4
 800ebc8:	4619      	mov	r1, r3
 800ebca:	4610      	mov	r0, r2
 800ebcc:	f7fe fc87 	bl	800d4de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebd4:	4b1b      	ldr	r3, [pc, #108]	@ (800ec44 <xTaskIncrementTick+0x168>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d3b9      	bcc.n	800eb52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ebde:	2301      	movs	r3, #1
 800ebe0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ebe2:	e7b6      	b.n	800eb52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ebe4:	4b17      	ldr	r3, [pc, #92]	@ (800ec44 <xTaskIncrementTick+0x168>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebea:	4915      	ldr	r1, [pc, #84]	@ (800ec40 <xTaskIncrementTick+0x164>)
 800ebec:	4613      	mov	r3, r2
 800ebee:	009b      	lsls	r3, r3, #2
 800ebf0:	4413      	add	r3, r2
 800ebf2:	009b      	lsls	r3, r3, #2
 800ebf4:	440b      	add	r3, r1
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	d901      	bls.n	800ec00 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ec00:	4b11      	ldr	r3, [pc, #68]	@ (800ec48 <xTaskIncrementTick+0x16c>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d007      	beq.n	800ec18 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ec08:	2301      	movs	r3, #1
 800ec0a:	617b      	str	r3, [r7, #20]
 800ec0c:	e004      	b.n	800ec18 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ec0e:	4b0f      	ldr	r3, [pc, #60]	@ (800ec4c <xTaskIncrementTick+0x170>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	3301      	adds	r3, #1
 800ec14:	4a0d      	ldr	r2, [pc, #52]	@ (800ec4c <xTaskIncrementTick+0x170>)
 800ec16:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ec18:	697b      	ldr	r3, [r7, #20]
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3718      	adds	r7, #24
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
 800ec22:	bf00      	nop
 800ec24:	20005520 	.word	0x20005520
 800ec28:	200054fc 	.word	0x200054fc
 800ec2c:	200054b0 	.word	0x200054b0
 800ec30:	200054b4 	.word	0x200054b4
 800ec34:	20005510 	.word	0x20005510
 800ec38:	20005518 	.word	0x20005518
 800ec3c:	20005500 	.word	0x20005500
 800ec40:	200053fc 	.word	0x200053fc
 800ec44:	200053f8 	.word	0x200053f8
 800ec48:	2000550c 	.word	0x2000550c
 800ec4c:	20005508 	.word	0x20005508

0800ec50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ec50:	b480      	push	{r7}
 800ec52:	b087      	sub	sp, #28
 800ec54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ec56:	4b2a      	ldr	r3, [pc, #168]	@ (800ed00 <vTaskSwitchContext+0xb0>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d003      	beq.n	800ec66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ec5e:	4b29      	ldr	r3, [pc, #164]	@ (800ed04 <vTaskSwitchContext+0xb4>)
 800ec60:	2201      	movs	r2, #1
 800ec62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ec64:	e045      	b.n	800ecf2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800ec66:	4b27      	ldr	r3, [pc, #156]	@ (800ed04 <vTaskSwitchContext+0xb4>)
 800ec68:	2200      	movs	r2, #0
 800ec6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec6c:	4b26      	ldr	r3, [pc, #152]	@ (800ed08 <vTaskSwitchContext+0xb8>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	fab3 f383 	clz	r3, r3
 800ec78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ec7a:	7afb      	ldrb	r3, [r7, #11]
 800ec7c:	f1c3 031f 	rsb	r3, r3, #31
 800ec80:	617b      	str	r3, [r7, #20]
 800ec82:	4922      	ldr	r1, [pc, #136]	@ (800ed0c <vTaskSwitchContext+0xbc>)
 800ec84:	697a      	ldr	r2, [r7, #20]
 800ec86:	4613      	mov	r3, r2
 800ec88:	009b      	lsls	r3, r3, #2
 800ec8a:	4413      	add	r3, r2
 800ec8c:	009b      	lsls	r3, r3, #2
 800ec8e:	440b      	add	r3, r1
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d10b      	bne.n	800ecae <vTaskSwitchContext+0x5e>
	__asm volatile
 800ec96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec9a:	f383 8811 	msr	BASEPRI, r3
 800ec9e:	f3bf 8f6f 	isb	sy
 800eca2:	f3bf 8f4f 	dsb	sy
 800eca6:	607b      	str	r3, [r7, #4]
}
 800eca8:	bf00      	nop
 800ecaa:	bf00      	nop
 800ecac:	e7fd      	b.n	800ecaa <vTaskSwitchContext+0x5a>
 800ecae:	697a      	ldr	r2, [r7, #20]
 800ecb0:	4613      	mov	r3, r2
 800ecb2:	009b      	lsls	r3, r3, #2
 800ecb4:	4413      	add	r3, r2
 800ecb6:	009b      	lsls	r3, r3, #2
 800ecb8:	4a14      	ldr	r2, [pc, #80]	@ (800ed0c <vTaskSwitchContext+0xbc>)
 800ecba:	4413      	add	r3, r2
 800ecbc:	613b      	str	r3, [r7, #16]
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	685b      	ldr	r3, [r3, #4]
 800ecc2:	685a      	ldr	r2, [r3, #4]
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	605a      	str	r2, [r3, #4]
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	685a      	ldr	r2, [r3, #4]
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	3308      	adds	r3, #8
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d104      	bne.n	800ecde <vTaskSwitchContext+0x8e>
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	685a      	ldr	r2, [r3, #4]
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	605a      	str	r2, [r3, #4]
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	68db      	ldr	r3, [r3, #12]
 800ece4:	4a0a      	ldr	r2, [pc, #40]	@ (800ed10 <vTaskSwitchContext+0xc0>)
 800ece6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ece8:	4b09      	ldr	r3, [pc, #36]	@ (800ed10 <vTaskSwitchContext+0xc0>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	334c      	adds	r3, #76	@ 0x4c
 800ecee:	4a09      	ldr	r2, [pc, #36]	@ (800ed14 <vTaskSwitchContext+0xc4>)
 800ecf0:	6013      	str	r3, [r2, #0]
}
 800ecf2:	bf00      	nop
 800ecf4:	371c      	adds	r7, #28
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr
 800ecfe:	bf00      	nop
 800ed00:	20005520 	.word	0x20005520
 800ed04:	2000550c 	.word	0x2000550c
 800ed08:	20005500 	.word	0x20005500
 800ed0c:	200053fc 	.word	0x200053fc
 800ed10:	200053f8 	.word	0x200053f8
 800ed14:	20000118 	.word	0x20000118

0800ed18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d10b      	bne.n	800ed40 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ed28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed2c:	f383 8811 	msr	BASEPRI, r3
 800ed30:	f3bf 8f6f 	isb	sy
 800ed34:	f3bf 8f4f 	dsb	sy
 800ed38:	60fb      	str	r3, [r7, #12]
}
 800ed3a:	bf00      	nop
 800ed3c:	bf00      	nop
 800ed3e:	e7fd      	b.n	800ed3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ed40:	4b07      	ldr	r3, [pc, #28]	@ (800ed60 <vTaskPlaceOnEventList+0x48>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	3318      	adds	r3, #24
 800ed46:	4619      	mov	r1, r3
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f7fe fbec 	bl	800d526 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ed4e:	2101      	movs	r1, #1
 800ed50:	6838      	ldr	r0, [r7, #0]
 800ed52:	f000 fb8d 	bl	800f470 <prvAddCurrentTaskToDelayedList>
}
 800ed56:	bf00      	nop
 800ed58:	3710      	adds	r7, #16
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	200053f8 	.word	0x200053f8

0800ed64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b086      	sub	sp, #24
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	68db      	ldr	r3, [r3, #12]
 800ed70:	68db      	ldr	r3, [r3, #12]
 800ed72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d10b      	bne.n	800ed92 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ed7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed7e:	f383 8811 	msr	BASEPRI, r3
 800ed82:	f3bf 8f6f 	isb	sy
 800ed86:	f3bf 8f4f 	dsb	sy
 800ed8a:	60fb      	str	r3, [r7, #12]
}
 800ed8c:	bf00      	nop
 800ed8e:	bf00      	nop
 800ed90:	e7fd      	b.n	800ed8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	3318      	adds	r3, #24
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7fe fbfe 	bl	800d598 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed9c:	4b1d      	ldr	r3, [pc, #116]	@ (800ee14 <xTaskRemoveFromEventList+0xb0>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d11c      	bne.n	800edde <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	3304      	adds	r3, #4
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7fe fbf5 	bl	800d598 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edb2:	2201      	movs	r2, #1
 800edb4:	409a      	lsls	r2, r3
 800edb6:	4b18      	ldr	r3, [pc, #96]	@ (800ee18 <xTaskRemoveFromEventList+0xb4>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	4313      	orrs	r3, r2
 800edbc:	4a16      	ldr	r2, [pc, #88]	@ (800ee18 <xTaskRemoveFromEventList+0xb4>)
 800edbe:	6013      	str	r3, [r2, #0]
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edc4:	4613      	mov	r3, r2
 800edc6:	009b      	lsls	r3, r3, #2
 800edc8:	4413      	add	r3, r2
 800edca:	009b      	lsls	r3, r3, #2
 800edcc:	4a13      	ldr	r2, [pc, #76]	@ (800ee1c <xTaskRemoveFromEventList+0xb8>)
 800edce:	441a      	add	r2, r3
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	3304      	adds	r3, #4
 800edd4:	4619      	mov	r1, r3
 800edd6:	4610      	mov	r0, r2
 800edd8:	f7fe fb81 	bl	800d4de <vListInsertEnd>
 800eddc:	e005      	b.n	800edea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	3318      	adds	r3, #24
 800ede2:	4619      	mov	r1, r3
 800ede4:	480e      	ldr	r0, [pc, #56]	@ (800ee20 <xTaskRemoveFromEventList+0xbc>)
 800ede6:	f7fe fb7a 	bl	800d4de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edee:	4b0d      	ldr	r3, [pc, #52]	@ (800ee24 <xTaskRemoveFromEventList+0xc0>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d905      	bls.n	800ee04 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800edf8:	2301      	movs	r3, #1
 800edfa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800edfc:	4b0a      	ldr	r3, [pc, #40]	@ (800ee28 <xTaskRemoveFromEventList+0xc4>)
 800edfe:	2201      	movs	r2, #1
 800ee00:	601a      	str	r2, [r3, #0]
 800ee02:	e001      	b.n	800ee08 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ee04:	2300      	movs	r3, #0
 800ee06:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ee08:	697b      	ldr	r3, [r7, #20]
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3718      	adds	r7, #24
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
 800ee12:	bf00      	nop
 800ee14:	20005520 	.word	0x20005520
 800ee18:	20005500 	.word	0x20005500
 800ee1c:	200053fc 	.word	0x200053fc
 800ee20:	200054b8 	.word	0x200054b8
 800ee24:	200053f8 	.word	0x200053f8
 800ee28:	2000550c 	.word	0x2000550c

0800ee2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b083      	sub	sp, #12
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ee34:	4b06      	ldr	r3, [pc, #24]	@ (800ee50 <vTaskInternalSetTimeOutState+0x24>)
 800ee36:	681a      	ldr	r2, [r3, #0]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ee3c:	4b05      	ldr	r3, [pc, #20]	@ (800ee54 <vTaskInternalSetTimeOutState+0x28>)
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	605a      	str	r2, [r3, #4]
}
 800ee44:	bf00      	nop
 800ee46:	370c      	adds	r7, #12
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4e:	4770      	bx	lr
 800ee50:	20005510 	.word	0x20005510
 800ee54:	200054fc 	.word	0x200054fc

0800ee58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b088      	sub	sp, #32
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d10b      	bne.n	800ee80 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ee68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee6c:	f383 8811 	msr	BASEPRI, r3
 800ee70:	f3bf 8f6f 	isb	sy
 800ee74:	f3bf 8f4f 	dsb	sy
 800ee78:	613b      	str	r3, [r7, #16]
}
 800ee7a:	bf00      	nop
 800ee7c:	bf00      	nop
 800ee7e:	e7fd      	b.n	800ee7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d10b      	bne.n	800ee9e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ee86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee8a:	f383 8811 	msr	BASEPRI, r3
 800ee8e:	f3bf 8f6f 	isb	sy
 800ee92:	f3bf 8f4f 	dsb	sy
 800ee96:	60fb      	str	r3, [r7, #12]
}
 800ee98:	bf00      	nop
 800ee9a:	bf00      	nop
 800ee9c:	e7fd      	b.n	800ee9a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ee9e:	f000 fc7b 	bl	800f798 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eea2:	4b1d      	ldr	r3, [pc, #116]	@ (800ef18 <xTaskCheckForTimeOut+0xc0>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	685b      	ldr	r3, [r3, #4]
 800eeac:	69ba      	ldr	r2, [r7, #24]
 800eeae:	1ad3      	subs	r3, r2, r3
 800eeb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeba:	d102      	bne.n	800eec2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eebc:	2300      	movs	r3, #0
 800eebe:	61fb      	str	r3, [r7, #28]
 800eec0:	e023      	b.n	800ef0a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681a      	ldr	r2, [r3, #0]
 800eec6:	4b15      	ldr	r3, [pc, #84]	@ (800ef1c <xTaskCheckForTimeOut+0xc4>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d007      	beq.n	800eede <xTaskCheckForTimeOut+0x86>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	69ba      	ldr	r2, [r7, #24]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d302      	bcc.n	800eede <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eed8:	2301      	movs	r3, #1
 800eeda:	61fb      	str	r3, [r7, #28]
 800eedc:	e015      	b.n	800ef0a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	697a      	ldr	r2, [r7, #20]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d20b      	bcs.n	800ef00 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	681a      	ldr	r2, [r3, #0]
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	1ad2      	subs	r2, r2, r3
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f7ff ff99 	bl	800ee2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eefa:	2300      	movs	r3, #0
 800eefc:	61fb      	str	r3, [r7, #28]
 800eefe:	e004      	b.n	800ef0a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	2200      	movs	r2, #0
 800ef04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ef06:	2301      	movs	r3, #1
 800ef08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ef0a:	f000 fc77 	bl	800f7fc <vPortExitCritical>

	return xReturn;
 800ef0e:	69fb      	ldr	r3, [r7, #28]
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3720      	adds	r7, #32
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	200054fc 	.word	0x200054fc
 800ef1c:	20005510 	.word	0x20005510

0800ef20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ef20:	b480      	push	{r7}
 800ef22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ef24:	4b03      	ldr	r3, [pc, #12]	@ (800ef34 <vTaskMissedYield+0x14>)
 800ef26:	2201      	movs	r2, #1
 800ef28:	601a      	str	r2, [r3, #0]
}
 800ef2a:	bf00      	nop
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr
 800ef34:	2000550c 	.word	0x2000550c

0800ef38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ef40:	f000 f852 	bl	800efe8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ef44:	4b06      	ldr	r3, [pc, #24]	@ (800ef60 <prvIdleTask+0x28>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	2b01      	cmp	r3, #1
 800ef4a:	d9f9      	bls.n	800ef40 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ef4c:	4b05      	ldr	r3, [pc, #20]	@ (800ef64 <prvIdleTask+0x2c>)
 800ef4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef52:	601a      	str	r2, [r3, #0]
 800ef54:	f3bf 8f4f 	dsb	sy
 800ef58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ef5c:	e7f0      	b.n	800ef40 <prvIdleTask+0x8>
 800ef5e:	bf00      	nop
 800ef60:	200053fc 	.word	0x200053fc
 800ef64:	e000ed04 	.word	0xe000ed04

0800ef68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b082      	sub	sp, #8
 800ef6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ef6e:	2300      	movs	r3, #0
 800ef70:	607b      	str	r3, [r7, #4]
 800ef72:	e00c      	b.n	800ef8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	4613      	mov	r3, r2
 800ef78:	009b      	lsls	r3, r3, #2
 800ef7a:	4413      	add	r3, r2
 800ef7c:	009b      	lsls	r3, r3, #2
 800ef7e:	4a12      	ldr	r2, [pc, #72]	@ (800efc8 <prvInitialiseTaskLists+0x60>)
 800ef80:	4413      	add	r3, r2
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fe fa7e 	bl	800d484 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	607b      	str	r3, [r7, #4]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2b06      	cmp	r3, #6
 800ef92:	d9ef      	bls.n	800ef74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ef94:	480d      	ldr	r0, [pc, #52]	@ (800efcc <prvInitialiseTaskLists+0x64>)
 800ef96:	f7fe fa75 	bl	800d484 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ef9a:	480d      	ldr	r0, [pc, #52]	@ (800efd0 <prvInitialiseTaskLists+0x68>)
 800ef9c:	f7fe fa72 	bl	800d484 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800efa0:	480c      	ldr	r0, [pc, #48]	@ (800efd4 <prvInitialiseTaskLists+0x6c>)
 800efa2:	f7fe fa6f 	bl	800d484 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800efa6:	480c      	ldr	r0, [pc, #48]	@ (800efd8 <prvInitialiseTaskLists+0x70>)
 800efa8:	f7fe fa6c 	bl	800d484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800efac:	480b      	ldr	r0, [pc, #44]	@ (800efdc <prvInitialiseTaskLists+0x74>)
 800efae:	f7fe fa69 	bl	800d484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800efb2:	4b0b      	ldr	r3, [pc, #44]	@ (800efe0 <prvInitialiseTaskLists+0x78>)
 800efb4:	4a05      	ldr	r2, [pc, #20]	@ (800efcc <prvInitialiseTaskLists+0x64>)
 800efb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800efb8:	4b0a      	ldr	r3, [pc, #40]	@ (800efe4 <prvInitialiseTaskLists+0x7c>)
 800efba:	4a05      	ldr	r2, [pc, #20]	@ (800efd0 <prvInitialiseTaskLists+0x68>)
 800efbc:	601a      	str	r2, [r3, #0]
}
 800efbe:	bf00      	nop
 800efc0:	3708      	adds	r7, #8
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}
 800efc6:	bf00      	nop
 800efc8:	200053fc 	.word	0x200053fc
 800efcc:	20005488 	.word	0x20005488
 800efd0:	2000549c 	.word	0x2000549c
 800efd4:	200054b8 	.word	0x200054b8
 800efd8:	200054cc 	.word	0x200054cc
 800efdc:	200054e4 	.word	0x200054e4
 800efe0:	200054b0 	.word	0x200054b0
 800efe4:	200054b4 	.word	0x200054b4

0800efe8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800efee:	e019      	b.n	800f024 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eff0:	f000 fbd2 	bl	800f798 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eff4:	4b10      	ldr	r3, [pc, #64]	@ (800f038 <prvCheckTasksWaitingTermination+0x50>)
 800eff6:	68db      	ldr	r3, [r3, #12]
 800eff8:	68db      	ldr	r3, [r3, #12]
 800effa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	3304      	adds	r3, #4
 800f000:	4618      	mov	r0, r3
 800f002:	f7fe fac9 	bl	800d598 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f006:	4b0d      	ldr	r3, [pc, #52]	@ (800f03c <prvCheckTasksWaitingTermination+0x54>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	3b01      	subs	r3, #1
 800f00c:	4a0b      	ldr	r2, [pc, #44]	@ (800f03c <prvCheckTasksWaitingTermination+0x54>)
 800f00e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f010:	4b0b      	ldr	r3, [pc, #44]	@ (800f040 <prvCheckTasksWaitingTermination+0x58>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	3b01      	subs	r3, #1
 800f016:	4a0a      	ldr	r2, [pc, #40]	@ (800f040 <prvCheckTasksWaitingTermination+0x58>)
 800f018:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f01a:	f000 fbef 	bl	800f7fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f000 f810 	bl	800f044 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f024:	4b06      	ldr	r3, [pc, #24]	@ (800f040 <prvCheckTasksWaitingTermination+0x58>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d1e1      	bne.n	800eff0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f02c:	bf00      	nop
 800f02e:	bf00      	nop
 800f030:	3708      	adds	r7, #8
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}
 800f036:	bf00      	nop
 800f038:	200054cc 	.word	0x200054cc
 800f03c:	200054f8 	.word	0x200054f8
 800f040:	200054e0 	.word	0x200054e0

0800f044 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f044:	b580      	push	{r7, lr}
 800f046:	b084      	sub	sp, #16
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	334c      	adds	r3, #76	@ 0x4c
 800f050:	4618      	mov	r0, r3
 800f052:	f00c fd1f 	bl	801ba94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d108      	bne.n	800f072 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f064:	4618      	mov	r0, r3
 800f066:	f000 fd87 	bl	800fb78 <vPortFree>
				vPortFree( pxTCB );
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f000 fd84 	bl	800fb78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f070:	e019      	b.n	800f0a6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d103      	bne.n	800f084 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f07c:	6878      	ldr	r0, [r7, #4]
 800f07e:	f000 fd7b 	bl	800fb78 <vPortFree>
	}
 800f082:	e010      	b.n	800f0a6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f08a:	2b02      	cmp	r3, #2
 800f08c:	d00b      	beq.n	800f0a6 <prvDeleteTCB+0x62>
	__asm volatile
 800f08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f092:	f383 8811 	msr	BASEPRI, r3
 800f096:	f3bf 8f6f 	isb	sy
 800f09a:	f3bf 8f4f 	dsb	sy
 800f09e:	60fb      	str	r3, [r7, #12]
}
 800f0a0:	bf00      	nop
 800f0a2:	bf00      	nop
 800f0a4:	e7fd      	b.n	800f0a2 <prvDeleteTCB+0x5e>
	}
 800f0a6:	bf00      	nop
 800f0a8:	3710      	adds	r7, #16
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
	...

0800f0b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b083      	sub	sp, #12
 800f0b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f0b6:	4b0c      	ldr	r3, [pc, #48]	@ (800f0e8 <prvResetNextTaskUnblockTime+0x38>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d104      	bne.n	800f0ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f0c0:	4b0a      	ldr	r3, [pc, #40]	@ (800f0ec <prvResetNextTaskUnblockTime+0x3c>)
 800f0c2:	f04f 32ff 	mov.w	r2, #4294967295
 800f0c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f0c8:	e008      	b.n	800f0dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0ca:	4b07      	ldr	r3, [pc, #28]	@ (800f0e8 <prvResetNextTaskUnblockTime+0x38>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	68db      	ldr	r3, [r3, #12]
 800f0d0:	68db      	ldr	r3, [r3, #12]
 800f0d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	4a04      	ldr	r2, [pc, #16]	@ (800f0ec <prvResetNextTaskUnblockTime+0x3c>)
 800f0da:	6013      	str	r3, [r2, #0]
}
 800f0dc:	bf00      	nop
 800f0de:	370c      	adds	r7, #12
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr
 800f0e8:	200054b0 	.word	0x200054b0
 800f0ec:	20005518 	.word	0x20005518

0800f0f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b083      	sub	sp, #12
 800f0f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f0f6:	4b0b      	ldr	r3, [pc, #44]	@ (800f124 <xTaskGetSchedulerState+0x34>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d102      	bne.n	800f104 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f0fe:	2301      	movs	r3, #1
 800f100:	607b      	str	r3, [r7, #4]
 800f102:	e008      	b.n	800f116 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f104:	4b08      	ldr	r3, [pc, #32]	@ (800f128 <xTaskGetSchedulerState+0x38>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d102      	bne.n	800f112 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f10c:	2302      	movs	r3, #2
 800f10e:	607b      	str	r3, [r7, #4]
 800f110:	e001      	b.n	800f116 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f112:	2300      	movs	r3, #0
 800f114:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f116:	687b      	ldr	r3, [r7, #4]
	}
 800f118:	4618      	mov	r0, r3
 800f11a:	370c      	adds	r7, #12
 800f11c:	46bd      	mov	sp, r7
 800f11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f122:	4770      	bx	lr
 800f124:	20005504 	.word	0x20005504
 800f128:	20005520 	.word	0x20005520

0800f12c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b084      	sub	sp, #16
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f138:	2300      	movs	r3, #0
 800f13a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d05e      	beq.n	800f200 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f146:	4b31      	ldr	r3, [pc, #196]	@ (800f20c <xTaskPriorityInherit+0xe0>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d24e      	bcs.n	800f1ee <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	699b      	ldr	r3, [r3, #24]
 800f154:	2b00      	cmp	r3, #0
 800f156:	db06      	blt.n	800f166 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f158:	4b2c      	ldr	r3, [pc, #176]	@ (800f20c <xTaskPriorityInherit+0xe0>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f15e:	f1c3 0207 	rsb	r2, r3, #7
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	6959      	ldr	r1, [r3, #20]
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f16e:	4613      	mov	r3, r2
 800f170:	009b      	lsls	r3, r3, #2
 800f172:	4413      	add	r3, r2
 800f174:	009b      	lsls	r3, r3, #2
 800f176:	4a26      	ldr	r2, [pc, #152]	@ (800f210 <xTaskPriorityInherit+0xe4>)
 800f178:	4413      	add	r3, r2
 800f17a:	4299      	cmp	r1, r3
 800f17c:	d12f      	bne.n	800f1de <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	3304      	adds	r3, #4
 800f182:	4618      	mov	r0, r3
 800f184:	f7fe fa08 	bl	800d598 <uxListRemove>
 800f188:	4603      	mov	r3, r0
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d10a      	bne.n	800f1a4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f192:	2201      	movs	r2, #1
 800f194:	fa02 f303 	lsl.w	r3, r2, r3
 800f198:	43da      	mvns	r2, r3
 800f19a:	4b1e      	ldr	r3, [pc, #120]	@ (800f214 <xTaskPriorityInherit+0xe8>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	4013      	ands	r3, r2
 800f1a0:	4a1c      	ldr	r2, [pc, #112]	@ (800f214 <xTaskPriorityInherit+0xe8>)
 800f1a2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f1a4:	4b19      	ldr	r3, [pc, #100]	@ (800f20c <xTaskPriorityInherit+0xe0>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	409a      	lsls	r2, r3
 800f1b6:	4b17      	ldr	r3, [pc, #92]	@ (800f214 <xTaskPriorityInherit+0xe8>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	4313      	orrs	r3, r2
 800f1bc:	4a15      	ldr	r2, [pc, #84]	@ (800f214 <xTaskPriorityInherit+0xe8>)
 800f1be:	6013      	str	r3, [r2, #0]
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1c4:	4613      	mov	r3, r2
 800f1c6:	009b      	lsls	r3, r3, #2
 800f1c8:	4413      	add	r3, r2
 800f1ca:	009b      	lsls	r3, r3, #2
 800f1cc:	4a10      	ldr	r2, [pc, #64]	@ (800f210 <xTaskPriorityInherit+0xe4>)
 800f1ce:	441a      	add	r2, r3
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	3304      	adds	r3, #4
 800f1d4:	4619      	mov	r1, r3
 800f1d6:	4610      	mov	r0, r2
 800f1d8:	f7fe f981 	bl	800d4de <vListInsertEnd>
 800f1dc:	e004      	b.n	800f1e8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f1de:	4b0b      	ldr	r3, [pc, #44]	@ (800f20c <xTaskPriorityInherit+0xe0>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	60fb      	str	r3, [r7, #12]
 800f1ec:	e008      	b.n	800f200 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f1f2:	4b06      	ldr	r3, [pc, #24]	@ (800f20c <xTaskPriorityInherit+0xe0>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d201      	bcs.n	800f200 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f200:	68fb      	ldr	r3, [r7, #12]
	}
 800f202:	4618      	mov	r0, r3
 800f204:	3710      	adds	r7, #16
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
 800f20a:	bf00      	nop
 800f20c:	200053f8 	.word	0x200053f8
 800f210:	200053fc 	.word	0x200053fc
 800f214:	20005500 	.word	0x20005500

0800f218 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b086      	sub	sp, #24
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f224:	2300      	movs	r3, #0
 800f226:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d070      	beq.n	800f310 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f22e:	4b3b      	ldr	r3, [pc, #236]	@ (800f31c <xTaskPriorityDisinherit+0x104>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	693a      	ldr	r2, [r7, #16]
 800f234:	429a      	cmp	r2, r3
 800f236:	d00b      	beq.n	800f250 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f23c:	f383 8811 	msr	BASEPRI, r3
 800f240:	f3bf 8f6f 	isb	sy
 800f244:	f3bf 8f4f 	dsb	sy
 800f248:	60fb      	str	r3, [r7, #12]
}
 800f24a:	bf00      	nop
 800f24c:	bf00      	nop
 800f24e:	e7fd      	b.n	800f24c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f254:	2b00      	cmp	r3, #0
 800f256:	d10b      	bne.n	800f270 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f25c:	f383 8811 	msr	BASEPRI, r3
 800f260:	f3bf 8f6f 	isb	sy
 800f264:	f3bf 8f4f 	dsb	sy
 800f268:	60bb      	str	r3, [r7, #8]
}
 800f26a:	bf00      	nop
 800f26c:	bf00      	nop
 800f26e:	e7fd      	b.n	800f26c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f274:	1e5a      	subs	r2, r3, #1
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f27a:	693b      	ldr	r3, [r7, #16]
 800f27c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f282:	429a      	cmp	r2, r3
 800f284:	d044      	beq.n	800f310 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d140      	bne.n	800f310 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	3304      	adds	r3, #4
 800f292:	4618      	mov	r0, r3
 800f294:	f7fe f980 	bl	800d598 <uxListRemove>
 800f298:	4603      	mov	r3, r0
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d115      	bne.n	800f2ca <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2a2:	491f      	ldr	r1, [pc, #124]	@ (800f320 <xTaskPriorityDisinherit+0x108>)
 800f2a4:	4613      	mov	r3, r2
 800f2a6:	009b      	lsls	r3, r3, #2
 800f2a8:	4413      	add	r3, r2
 800f2aa:	009b      	lsls	r3, r3, #2
 800f2ac:	440b      	add	r3, r1
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d10a      	bne.n	800f2ca <xTaskPriorityDisinherit+0xb2>
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2b8:	2201      	movs	r2, #1
 800f2ba:	fa02 f303 	lsl.w	r3, r2, r3
 800f2be:	43da      	mvns	r2, r3
 800f2c0:	4b18      	ldr	r3, [pc, #96]	@ (800f324 <xTaskPriorityDisinherit+0x10c>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	4013      	ands	r3, r2
 800f2c6:	4a17      	ldr	r2, [pc, #92]	@ (800f324 <xTaskPriorityDisinherit+0x10c>)
 800f2c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f2ca:	693b      	ldr	r3, [r7, #16]
 800f2cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2d2:	693b      	ldr	r3, [r7, #16]
 800f2d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2d6:	f1c3 0207 	rsb	r2, r3, #7
 800f2da:	693b      	ldr	r3, [r7, #16]
 800f2dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2e2:	2201      	movs	r2, #1
 800f2e4:	409a      	lsls	r2, r3
 800f2e6:	4b0f      	ldr	r3, [pc, #60]	@ (800f324 <xTaskPriorityDisinherit+0x10c>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	4313      	orrs	r3, r2
 800f2ec:	4a0d      	ldr	r2, [pc, #52]	@ (800f324 <xTaskPriorityDisinherit+0x10c>)
 800f2ee:	6013      	str	r3, [r2, #0]
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2f4:	4613      	mov	r3, r2
 800f2f6:	009b      	lsls	r3, r3, #2
 800f2f8:	4413      	add	r3, r2
 800f2fa:	009b      	lsls	r3, r3, #2
 800f2fc:	4a08      	ldr	r2, [pc, #32]	@ (800f320 <xTaskPriorityDisinherit+0x108>)
 800f2fe:	441a      	add	r2, r3
 800f300:	693b      	ldr	r3, [r7, #16]
 800f302:	3304      	adds	r3, #4
 800f304:	4619      	mov	r1, r3
 800f306:	4610      	mov	r0, r2
 800f308:	f7fe f8e9 	bl	800d4de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f30c:	2301      	movs	r3, #1
 800f30e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f310:	697b      	ldr	r3, [r7, #20]
	}
 800f312:	4618      	mov	r0, r3
 800f314:	3718      	adds	r7, #24
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}
 800f31a:	bf00      	nop
 800f31c:	200053f8 	.word	0x200053f8
 800f320:	200053fc 	.word	0x200053fc
 800f324:	20005500 	.word	0x20005500

0800f328 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b088      	sub	sp, #32
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f336:	2301      	movs	r3, #1
 800f338:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d079      	beq.n	800f434 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f340:	69bb      	ldr	r3, [r7, #24]
 800f342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f344:	2b00      	cmp	r3, #0
 800f346:	d10b      	bne.n	800f360 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f34c:	f383 8811 	msr	BASEPRI, r3
 800f350:	f3bf 8f6f 	isb	sy
 800f354:	f3bf 8f4f 	dsb	sy
 800f358:	60fb      	str	r3, [r7, #12]
}
 800f35a:	bf00      	nop
 800f35c:	bf00      	nop
 800f35e:	e7fd      	b.n	800f35c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f360:	69bb      	ldr	r3, [r7, #24]
 800f362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f364:	683a      	ldr	r2, [r7, #0]
 800f366:	429a      	cmp	r2, r3
 800f368:	d902      	bls.n	800f370 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	61fb      	str	r3, [r7, #28]
 800f36e:	e002      	b.n	800f376 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f370:	69bb      	ldr	r3, [r7, #24]
 800f372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f374:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f376:	69bb      	ldr	r3, [r7, #24]
 800f378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f37a:	69fa      	ldr	r2, [r7, #28]
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d059      	beq.n	800f434 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f380:	69bb      	ldr	r3, [r7, #24]
 800f382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f384:	697a      	ldr	r2, [r7, #20]
 800f386:	429a      	cmp	r2, r3
 800f388:	d154      	bne.n	800f434 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f38a:	4b2c      	ldr	r3, [pc, #176]	@ (800f43c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	69ba      	ldr	r2, [r7, #24]
 800f390:	429a      	cmp	r2, r3
 800f392:	d10b      	bne.n	800f3ac <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800f394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f398:	f383 8811 	msr	BASEPRI, r3
 800f39c:	f3bf 8f6f 	isb	sy
 800f3a0:	f3bf 8f4f 	dsb	sy
 800f3a4:	60bb      	str	r3, [r7, #8]
}
 800f3a6:	bf00      	nop
 800f3a8:	bf00      	nop
 800f3aa:	e7fd      	b.n	800f3a8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f3ac:	69bb      	ldr	r3, [r7, #24]
 800f3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f3b2:	69bb      	ldr	r3, [r7, #24]
 800f3b4:	69fa      	ldr	r2, [r7, #28]
 800f3b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f3b8:	69bb      	ldr	r3, [r7, #24]
 800f3ba:	699b      	ldr	r3, [r3, #24]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	db04      	blt.n	800f3ca <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	f1c3 0207 	rsb	r2, r3, #7
 800f3c6:	69bb      	ldr	r3, [r7, #24]
 800f3c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f3ca:	69bb      	ldr	r3, [r7, #24]
 800f3cc:	6959      	ldr	r1, [r3, #20]
 800f3ce:	693a      	ldr	r2, [r7, #16]
 800f3d0:	4613      	mov	r3, r2
 800f3d2:	009b      	lsls	r3, r3, #2
 800f3d4:	4413      	add	r3, r2
 800f3d6:	009b      	lsls	r3, r3, #2
 800f3d8:	4a19      	ldr	r2, [pc, #100]	@ (800f440 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f3da:	4413      	add	r3, r2
 800f3dc:	4299      	cmp	r1, r3
 800f3de:	d129      	bne.n	800f434 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f3e0:	69bb      	ldr	r3, [r7, #24]
 800f3e2:	3304      	adds	r3, #4
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7fe f8d7 	bl	800d598 <uxListRemove>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d10a      	bne.n	800f406 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800f3f0:	69bb      	ldr	r3, [r7, #24]
 800f3f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3f4:	2201      	movs	r2, #1
 800f3f6:	fa02 f303 	lsl.w	r3, r2, r3
 800f3fa:	43da      	mvns	r2, r3
 800f3fc:	4b11      	ldr	r3, [pc, #68]	@ (800f444 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	4013      	ands	r3, r2
 800f402:	4a10      	ldr	r2, [pc, #64]	@ (800f444 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f404:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f406:	69bb      	ldr	r3, [r7, #24]
 800f408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f40a:	2201      	movs	r2, #1
 800f40c:	409a      	lsls	r2, r3
 800f40e:	4b0d      	ldr	r3, [pc, #52]	@ (800f444 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	4313      	orrs	r3, r2
 800f414:	4a0b      	ldr	r2, [pc, #44]	@ (800f444 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f416:	6013      	str	r3, [r2, #0]
 800f418:	69bb      	ldr	r3, [r7, #24]
 800f41a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f41c:	4613      	mov	r3, r2
 800f41e:	009b      	lsls	r3, r3, #2
 800f420:	4413      	add	r3, r2
 800f422:	009b      	lsls	r3, r3, #2
 800f424:	4a06      	ldr	r2, [pc, #24]	@ (800f440 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f426:	441a      	add	r2, r3
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	3304      	adds	r3, #4
 800f42c:	4619      	mov	r1, r3
 800f42e:	4610      	mov	r0, r2
 800f430:	f7fe f855 	bl	800d4de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f434:	bf00      	nop
 800f436:	3720      	adds	r7, #32
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}
 800f43c:	200053f8 	.word	0x200053f8
 800f440:	200053fc 	.word	0x200053fc
 800f444:	20005500 	.word	0x20005500

0800f448 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f448:	b480      	push	{r7}
 800f44a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f44c:	4b07      	ldr	r3, [pc, #28]	@ (800f46c <pvTaskIncrementMutexHeldCount+0x24>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d004      	beq.n	800f45e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f454:	4b05      	ldr	r3, [pc, #20]	@ (800f46c <pvTaskIncrementMutexHeldCount+0x24>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f45a:	3201      	adds	r2, #1
 800f45c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800f45e:	4b03      	ldr	r3, [pc, #12]	@ (800f46c <pvTaskIncrementMutexHeldCount+0x24>)
 800f460:	681b      	ldr	r3, [r3, #0]
	}
 800f462:	4618      	mov	r0, r3
 800f464:	46bd      	mov	sp, r7
 800f466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46a:	4770      	bx	lr
 800f46c:	200053f8 	.word	0x200053f8

0800f470 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b084      	sub	sp, #16
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f47a:	4b29      	ldr	r3, [pc, #164]	@ (800f520 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f480:	4b28      	ldr	r3, [pc, #160]	@ (800f524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	3304      	adds	r3, #4
 800f486:	4618      	mov	r0, r3
 800f488:	f7fe f886 	bl	800d598 <uxListRemove>
 800f48c:	4603      	mov	r3, r0
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d10b      	bne.n	800f4aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f492:	4b24      	ldr	r3, [pc, #144]	@ (800f524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f498:	2201      	movs	r2, #1
 800f49a:	fa02 f303 	lsl.w	r3, r2, r3
 800f49e:	43da      	mvns	r2, r3
 800f4a0:	4b21      	ldr	r3, [pc, #132]	@ (800f528 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	4013      	ands	r3, r2
 800f4a6:	4a20      	ldr	r2, [pc, #128]	@ (800f528 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f4a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4b0:	d10a      	bne.n	800f4c8 <prvAddCurrentTaskToDelayedList+0x58>
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d007      	beq.n	800f4c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f4b8:	4b1a      	ldr	r3, [pc, #104]	@ (800f524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	3304      	adds	r3, #4
 800f4be:	4619      	mov	r1, r3
 800f4c0:	481a      	ldr	r0, [pc, #104]	@ (800f52c <prvAddCurrentTaskToDelayedList+0xbc>)
 800f4c2:	f7fe f80c 	bl	800d4de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f4c6:	e026      	b.n	800f516 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f4c8:	68fa      	ldr	r2, [r7, #12]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4413      	add	r3, r2
 800f4ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f4d0:	4b14      	ldr	r3, [pc, #80]	@ (800f524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	68ba      	ldr	r2, [r7, #8]
 800f4d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f4d8:	68ba      	ldr	r2, [r7, #8]
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d209      	bcs.n	800f4f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f4e0:	4b13      	ldr	r3, [pc, #76]	@ (800f530 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	4b0f      	ldr	r3, [pc, #60]	@ (800f524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	3304      	adds	r3, #4
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	4610      	mov	r0, r2
 800f4ee:	f7fe f81a 	bl	800d526 <vListInsert>
}
 800f4f2:	e010      	b.n	800f516 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f4f4:	4b0f      	ldr	r3, [pc, #60]	@ (800f534 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	4b0a      	ldr	r3, [pc, #40]	@ (800f524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	3304      	adds	r3, #4
 800f4fe:	4619      	mov	r1, r3
 800f500:	4610      	mov	r0, r2
 800f502:	f7fe f810 	bl	800d526 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f506:	4b0c      	ldr	r3, [pc, #48]	@ (800f538 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	68ba      	ldr	r2, [r7, #8]
 800f50c:	429a      	cmp	r2, r3
 800f50e:	d202      	bcs.n	800f516 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f510:	4a09      	ldr	r2, [pc, #36]	@ (800f538 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	6013      	str	r3, [r2, #0]
}
 800f516:	bf00      	nop
 800f518:	3710      	adds	r7, #16
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	200054fc 	.word	0x200054fc
 800f524:	200053f8 	.word	0x200053f8
 800f528:	20005500 	.word	0x20005500
 800f52c:	200054e4 	.word	0x200054e4
 800f530:	200054b4 	.word	0x200054b4
 800f534:	200054b0 	.word	0x200054b0
 800f538:	20005518 	.word	0x20005518

0800f53c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f53c:	b480      	push	{r7}
 800f53e:	b085      	sub	sp, #20
 800f540:	af00      	add	r7, sp, #0
 800f542:	60f8      	str	r0, [r7, #12]
 800f544:	60b9      	str	r1, [r7, #8]
 800f546:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	3b04      	subs	r3, #4
 800f54c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f554:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	3b04      	subs	r3, #4
 800f55a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	f023 0201 	bic.w	r2, r3, #1
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	3b04      	subs	r3, #4
 800f56a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f56c:	4a0c      	ldr	r2, [pc, #48]	@ (800f5a0 <pxPortInitialiseStack+0x64>)
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	3b14      	subs	r3, #20
 800f576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f578:	687a      	ldr	r2, [r7, #4]
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	3b04      	subs	r3, #4
 800f582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	f06f 0202 	mvn.w	r2, #2
 800f58a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	3b20      	subs	r3, #32
 800f590:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f592:	68fb      	ldr	r3, [r7, #12]
}
 800f594:	4618      	mov	r0, r3
 800f596:	3714      	adds	r7, #20
 800f598:	46bd      	mov	sp, r7
 800f59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59e:	4770      	bx	lr
 800f5a0:	0800f5a5 	.word	0x0800f5a5

0800f5a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	b085      	sub	sp, #20
 800f5a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f5ae:	4b13      	ldr	r3, [pc, #76]	@ (800f5fc <prvTaskExitError+0x58>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5b6:	d00b      	beq.n	800f5d0 <prvTaskExitError+0x2c>
	__asm volatile
 800f5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5bc:	f383 8811 	msr	BASEPRI, r3
 800f5c0:	f3bf 8f6f 	isb	sy
 800f5c4:	f3bf 8f4f 	dsb	sy
 800f5c8:	60fb      	str	r3, [r7, #12]
}
 800f5ca:	bf00      	nop
 800f5cc:	bf00      	nop
 800f5ce:	e7fd      	b.n	800f5cc <prvTaskExitError+0x28>
	__asm volatile
 800f5d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5d4:	f383 8811 	msr	BASEPRI, r3
 800f5d8:	f3bf 8f6f 	isb	sy
 800f5dc:	f3bf 8f4f 	dsb	sy
 800f5e0:	60bb      	str	r3, [r7, #8]
}
 800f5e2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f5e4:	bf00      	nop
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d0fc      	beq.n	800f5e6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f5ec:	bf00      	nop
 800f5ee:	bf00      	nop
 800f5f0:	3714      	adds	r7, #20
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr
 800f5fa:	bf00      	nop
 800f5fc:	20000098 	.word	0x20000098

0800f600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f600:	4b07      	ldr	r3, [pc, #28]	@ (800f620 <pxCurrentTCBConst2>)
 800f602:	6819      	ldr	r1, [r3, #0]
 800f604:	6808      	ldr	r0, [r1, #0]
 800f606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f60a:	f380 8809 	msr	PSP, r0
 800f60e:	f3bf 8f6f 	isb	sy
 800f612:	f04f 0000 	mov.w	r0, #0
 800f616:	f380 8811 	msr	BASEPRI, r0
 800f61a:	4770      	bx	lr
 800f61c:	f3af 8000 	nop.w

0800f620 <pxCurrentTCBConst2>:
 800f620:	200053f8 	.word	0x200053f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f624:	bf00      	nop
 800f626:	bf00      	nop

0800f628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f628:	4808      	ldr	r0, [pc, #32]	@ (800f64c <prvPortStartFirstTask+0x24>)
 800f62a:	6800      	ldr	r0, [r0, #0]
 800f62c:	6800      	ldr	r0, [r0, #0]
 800f62e:	f380 8808 	msr	MSP, r0
 800f632:	f04f 0000 	mov.w	r0, #0
 800f636:	f380 8814 	msr	CONTROL, r0
 800f63a:	b662      	cpsie	i
 800f63c:	b661      	cpsie	f
 800f63e:	f3bf 8f4f 	dsb	sy
 800f642:	f3bf 8f6f 	isb	sy
 800f646:	df00      	svc	0
 800f648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f64a:	bf00      	nop
 800f64c:	e000ed08 	.word	0xe000ed08

0800f650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b086      	sub	sp, #24
 800f654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f656:	4b47      	ldr	r3, [pc, #284]	@ (800f774 <xPortStartScheduler+0x124>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	4a47      	ldr	r2, [pc, #284]	@ (800f778 <xPortStartScheduler+0x128>)
 800f65c:	4293      	cmp	r3, r2
 800f65e:	d10b      	bne.n	800f678 <xPortStartScheduler+0x28>
	__asm volatile
 800f660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f664:	f383 8811 	msr	BASEPRI, r3
 800f668:	f3bf 8f6f 	isb	sy
 800f66c:	f3bf 8f4f 	dsb	sy
 800f670:	60fb      	str	r3, [r7, #12]
}
 800f672:	bf00      	nop
 800f674:	bf00      	nop
 800f676:	e7fd      	b.n	800f674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f678:	4b3e      	ldr	r3, [pc, #248]	@ (800f774 <xPortStartScheduler+0x124>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	4a3f      	ldr	r2, [pc, #252]	@ (800f77c <xPortStartScheduler+0x12c>)
 800f67e:	4293      	cmp	r3, r2
 800f680:	d10b      	bne.n	800f69a <xPortStartScheduler+0x4a>
	__asm volatile
 800f682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f686:	f383 8811 	msr	BASEPRI, r3
 800f68a:	f3bf 8f6f 	isb	sy
 800f68e:	f3bf 8f4f 	dsb	sy
 800f692:	613b      	str	r3, [r7, #16]
}
 800f694:	bf00      	nop
 800f696:	bf00      	nop
 800f698:	e7fd      	b.n	800f696 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f69a:	4b39      	ldr	r3, [pc, #228]	@ (800f780 <xPortStartScheduler+0x130>)
 800f69c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	b2db      	uxtb	r3, r3
 800f6a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	22ff      	movs	r2, #255	@ 0xff
 800f6aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	b2db      	uxtb	r3, r3
 800f6b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f6b4:	78fb      	ldrb	r3, [r7, #3]
 800f6b6:	b2db      	uxtb	r3, r3
 800f6b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f6bc:	b2da      	uxtb	r2, r3
 800f6be:	4b31      	ldr	r3, [pc, #196]	@ (800f784 <xPortStartScheduler+0x134>)
 800f6c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f6c2:	4b31      	ldr	r3, [pc, #196]	@ (800f788 <xPortStartScheduler+0x138>)
 800f6c4:	2207      	movs	r2, #7
 800f6c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6c8:	e009      	b.n	800f6de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f6ca:	4b2f      	ldr	r3, [pc, #188]	@ (800f788 <xPortStartScheduler+0x138>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	3b01      	subs	r3, #1
 800f6d0:	4a2d      	ldr	r2, [pc, #180]	@ (800f788 <xPortStartScheduler+0x138>)
 800f6d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f6d4:	78fb      	ldrb	r3, [r7, #3]
 800f6d6:	b2db      	uxtb	r3, r3
 800f6d8:	005b      	lsls	r3, r3, #1
 800f6da:	b2db      	uxtb	r3, r3
 800f6dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6de:	78fb      	ldrb	r3, [r7, #3]
 800f6e0:	b2db      	uxtb	r3, r3
 800f6e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f6e6:	2b80      	cmp	r3, #128	@ 0x80
 800f6e8:	d0ef      	beq.n	800f6ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f6ea:	4b27      	ldr	r3, [pc, #156]	@ (800f788 <xPortStartScheduler+0x138>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f1c3 0307 	rsb	r3, r3, #7
 800f6f2:	2b04      	cmp	r3, #4
 800f6f4:	d00b      	beq.n	800f70e <xPortStartScheduler+0xbe>
	__asm volatile
 800f6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6fa:	f383 8811 	msr	BASEPRI, r3
 800f6fe:	f3bf 8f6f 	isb	sy
 800f702:	f3bf 8f4f 	dsb	sy
 800f706:	60bb      	str	r3, [r7, #8]
}
 800f708:	bf00      	nop
 800f70a:	bf00      	nop
 800f70c:	e7fd      	b.n	800f70a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f70e:	4b1e      	ldr	r3, [pc, #120]	@ (800f788 <xPortStartScheduler+0x138>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	021b      	lsls	r3, r3, #8
 800f714:	4a1c      	ldr	r2, [pc, #112]	@ (800f788 <xPortStartScheduler+0x138>)
 800f716:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f718:	4b1b      	ldr	r3, [pc, #108]	@ (800f788 <xPortStartScheduler+0x138>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f720:	4a19      	ldr	r2, [pc, #100]	@ (800f788 <xPortStartScheduler+0x138>)
 800f722:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	b2da      	uxtb	r2, r3
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f72c:	4b17      	ldr	r3, [pc, #92]	@ (800f78c <xPortStartScheduler+0x13c>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	4a16      	ldr	r2, [pc, #88]	@ (800f78c <xPortStartScheduler+0x13c>)
 800f732:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f736:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f738:	4b14      	ldr	r3, [pc, #80]	@ (800f78c <xPortStartScheduler+0x13c>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	4a13      	ldr	r2, [pc, #76]	@ (800f78c <xPortStartScheduler+0x13c>)
 800f73e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f742:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f744:	f000 f8da 	bl	800f8fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f748:	4b11      	ldr	r3, [pc, #68]	@ (800f790 <xPortStartScheduler+0x140>)
 800f74a:	2200      	movs	r2, #0
 800f74c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f74e:	f000 f8f9 	bl	800f944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f752:	4b10      	ldr	r3, [pc, #64]	@ (800f794 <xPortStartScheduler+0x144>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	4a0f      	ldr	r2, [pc, #60]	@ (800f794 <xPortStartScheduler+0x144>)
 800f758:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f75c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f75e:	f7ff ff63 	bl	800f628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f762:	f7ff fa75 	bl	800ec50 <vTaskSwitchContext>
	prvTaskExitError();
 800f766:	f7ff ff1d 	bl	800f5a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f76a:	2300      	movs	r3, #0
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3718      	adds	r7, #24
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}
 800f774:	e000ed00 	.word	0xe000ed00
 800f778:	410fc271 	.word	0x410fc271
 800f77c:	410fc270 	.word	0x410fc270
 800f780:	e000e400 	.word	0xe000e400
 800f784:	20005524 	.word	0x20005524
 800f788:	20005528 	.word	0x20005528
 800f78c:	e000ed20 	.word	0xe000ed20
 800f790:	20000098 	.word	0x20000098
 800f794:	e000ef34 	.word	0xe000ef34

0800f798 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f798:	b480      	push	{r7}
 800f79a:	b083      	sub	sp, #12
 800f79c:	af00      	add	r7, sp, #0
	__asm volatile
 800f79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7a2:	f383 8811 	msr	BASEPRI, r3
 800f7a6:	f3bf 8f6f 	isb	sy
 800f7aa:	f3bf 8f4f 	dsb	sy
 800f7ae:	607b      	str	r3, [r7, #4]
}
 800f7b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f7b2:	4b10      	ldr	r3, [pc, #64]	@ (800f7f4 <vPortEnterCritical+0x5c>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	4a0e      	ldr	r2, [pc, #56]	@ (800f7f4 <vPortEnterCritical+0x5c>)
 800f7ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f7bc:	4b0d      	ldr	r3, [pc, #52]	@ (800f7f4 <vPortEnterCritical+0x5c>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	2b01      	cmp	r3, #1
 800f7c2:	d110      	bne.n	800f7e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f7c4:	4b0c      	ldr	r3, [pc, #48]	@ (800f7f8 <vPortEnterCritical+0x60>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	b2db      	uxtb	r3, r3
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d00b      	beq.n	800f7e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800f7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7d2:	f383 8811 	msr	BASEPRI, r3
 800f7d6:	f3bf 8f6f 	isb	sy
 800f7da:	f3bf 8f4f 	dsb	sy
 800f7de:	603b      	str	r3, [r7, #0]
}
 800f7e0:	bf00      	nop
 800f7e2:	bf00      	nop
 800f7e4:	e7fd      	b.n	800f7e2 <vPortEnterCritical+0x4a>
	}
}
 800f7e6:	bf00      	nop
 800f7e8:	370c      	adds	r7, #12
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f0:	4770      	bx	lr
 800f7f2:	bf00      	nop
 800f7f4:	20000098 	.word	0x20000098
 800f7f8:	e000ed04 	.word	0xe000ed04

0800f7fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f802:	4b12      	ldr	r3, [pc, #72]	@ (800f84c <vPortExitCritical+0x50>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d10b      	bne.n	800f822 <vPortExitCritical+0x26>
	__asm volatile
 800f80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f80e:	f383 8811 	msr	BASEPRI, r3
 800f812:	f3bf 8f6f 	isb	sy
 800f816:	f3bf 8f4f 	dsb	sy
 800f81a:	607b      	str	r3, [r7, #4]
}
 800f81c:	bf00      	nop
 800f81e:	bf00      	nop
 800f820:	e7fd      	b.n	800f81e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f822:	4b0a      	ldr	r3, [pc, #40]	@ (800f84c <vPortExitCritical+0x50>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	3b01      	subs	r3, #1
 800f828:	4a08      	ldr	r2, [pc, #32]	@ (800f84c <vPortExitCritical+0x50>)
 800f82a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f82c:	4b07      	ldr	r3, [pc, #28]	@ (800f84c <vPortExitCritical+0x50>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d105      	bne.n	800f840 <vPortExitCritical+0x44>
 800f834:	2300      	movs	r3, #0
 800f836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	f383 8811 	msr	BASEPRI, r3
}
 800f83e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f840:	bf00      	nop
 800f842:	370c      	adds	r7, #12
 800f844:	46bd      	mov	sp, r7
 800f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84a:	4770      	bx	lr
 800f84c:	20000098 	.word	0x20000098

0800f850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f850:	f3ef 8009 	mrs	r0, PSP
 800f854:	f3bf 8f6f 	isb	sy
 800f858:	4b15      	ldr	r3, [pc, #84]	@ (800f8b0 <pxCurrentTCBConst>)
 800f85a:	681a      	ldr	r2, [r3, #0]
 800f85c:	f01e 0f10 	tst.w	lr, #16
 800f860:	bf08      	it	eq
 800f862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f86a:	6010      	str	r0, [r2, #0]
 800f86c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f870:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f874:	f380 8811 	msr	BASEPRI, r0
 800f878:	f3bf 8f4f 	dsb	sy
 800f87c:	f3bf 8f6f 	isb	sy
 800f880:	f7ff f9e6 	bl	800ec50 <vTaskSwitchContext>
 800f884:	f04f 0000 	mov.w	r0, #0
 800f888:	f380 8811 	msr	BASEPRI, r0
 800f88c:	bc09      	pop	{r0, r3}
 800f88e:	6819      	ldr	r1, [r3, #0]
 800f890:	6808      	ldr	r0, [r1, #0]
 800f892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f896:	f01e 0f10 	tst.w	lr, #16
 800f89a:	bf08      	it	eq
 800f89c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f8a0:	f380 8809 	msr	PSP, r0
 800f8a4:	f3bf 8f6f 	isb	sy
 800f8a8:	4770      	bx	lr
 800f8aa:	bf00      	nop
 800f8ac:	f3af 8000 	nop.w

0800f8b0 <pxCurrentTCBConst>:
 800f8b0:	200053f8 	.word	0x200053f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f8b4:	bf00      	nop
 800f8b6:	bf00      	nop

0800f8b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b082      	sub	sp, #8
 800f8bc:	af00      	add	r7, sp, #0
	__asm volatile
 800f8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8c2:	f383 8811 	msr	BASEPRI, r3
 800f8c6:	f3bf 8f6f 	isb	sy
 800f8ca:	f3bf 8f4f 	dsb	sy
 800f8ce:	607b      	str	r3, [r7, #4]
}
 800f8d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f8d2:	f7ff f903 	bl	800eadc <xTaskIncrementTick>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d003      	beq.n	800f8e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f8dc:	4b06      	ldr	r3, [pc, #24]	@ (800f8f8 <SysTick_Handler+0x40>)
 800f8de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f8e2:	601a      	str	r2, [r3, #0]
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	f383 8811 	msr	BASEPRI, r3
}
 800f8ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f8f0:	bf00      	nop
 800f8f2:	3708      	adds	r7, #8
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	e000ed04 	.word	0xe000ed04

0800f8fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f900:	4b0b      	ldr	r3, [pc, #44]	@ (800f930 <vPortSetupTimerInterrupt+0x34>)
 800f902:	2200      	movs	r2, #0
 800f904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f906:	4b0b      	ldr	r3, [pc, #44]	@ (800f934 <vPortSetupTimerInterrupt+0x38>)
 800f908:	2200      	movs	r2, #0
 800f90a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f90c:	4b0a      	ldr	r3, [pc, #40]	@ (800f938 <vPortSetupTimerInterrupt+0x3c>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4a0a      	ldr	r2, [pc, #40]	@ (800f93c <vPortSetupTimerInterrupt+0x40>)
 800f912:	fba2 2303 	umull	r2, r3, r2, r3
 800f916:	099b      	lsrs	r3, r3, #6
 800f918:	4a09      	ldr	r2, [pc, #36]	@ (800f940 <vPortSetupTimerInterrupt+0x44>)
 800f91a:	3b01      	subs	r3, #1
 800f91c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f91e:	4b04      	ldr	r3, [pc, #16]	@ (800f930 <vPortSetupTimerInterrupt+0x34>)
 800f920:	2207      	movs	r2, #7
 800f922:	601a      	str	r2, [r3, #0]
}
 800f924:	bf00      	nop
 800f926:	46bd      	mov	sp, r7
 800f928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92c:	4770      	bx	lr
 800f92e:	bf00      	nop
 800f930:	e000e010 	.word	0xe000e010
 800f934:	e000e018 	.word	0xe000e018
 800f938:	20000000 	.word	0x20000000
 800f93c:	10624dd3 	.word	0x10624dd3
 800f940:	e000e014 	.word	0xe000e014

0800f944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f944:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f954 <vPortEnableVFP+0x10>
 800f948:	6801      	ldr	r1, [r0, #0]
 800f94a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f94e:	6001      	str	r1, [r0, #0]
 800f950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f952:	bf00      	nop
 800f954:	e000ed88 	.word	0xe000ed88

0800f958 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f958:	b480      	push	{r7}
 800f95a:	b085      	sub	sp, #20
 800f95c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f95e:	f3ef 8305 	mrs	r3, IPSR
 800f962:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	2b0f      	cmp	r3, #15
 800f968:	d915      	bls.n	800f996 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f96a:	4a18      	ldr	r2, [pc, #96]	@ (800f9cc <vPortValidateInterruptPriority+0x74>)
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	4413      	add	r3, r2
 800f970:	781b      	ldrb	r3, [r3, #0]
 800f972:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f974:	4b16      	ldr	r3, [pc, #88]	@ (800f9d0 <vPortValidateInterruptPriority+0x78>)
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	7afa      	ldrb	r2, [r7, #11]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d20b      	bcs.n	800f996 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f982:	f383 8811 	msr	BASEPRI, r3
 800f986:	f3bf 8f6f 	isb	sy
 800f98a:	f3bf 8f4f 	dsb	sy
 800f98e:	607b      	str	r3, [r7, #4]
}
 800f990:	bf00      	nop
 800f992:	bf00      	nop
 800f994:	e7fd      	b.n	800f992 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f996:	4b0f      	ldr	r3, [pc, #60]	@ (800f9d4 <vPortValidateInterruptPriority+0x7c>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f99e:	4b0e      	ldr	r3, [pc, #56]	@ (800f9d8 <vPortValidateInterruptPriority+0x80>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d90b      	bls.n	800f9be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9aa:	f383 8811 	msr	BASEPRI, r3
 800f9ae:	f3bf 8f6f 	isb	sy
 800f9b2:	f3bf 8f4f 	dsb	sy
 800f9b6:	603b      	str	r3, [r7, #0]
}
 800f9b8:	bf00      	nop
 800f9ba:	bf00      	nop
 800f9bc:	e7fd      	b.n	800f9ba <vPortValidateInterruptPriority+0x62>
	}
 800f9be:	bf00      	nop
 800f9c0:	3714      	adds	r7, #20
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c8:	4770      	bx	lr
 800f9ca:	bf00      	nop
 800f9cc:	e000e3f0 	.word	0xe000e3f0
 800f9d0:	20005524 	.word	0x20005524
 800f9d4:	e000ed0c 	.word	0xe000ed0c
 800f9d8:	20005528 	.word	0x20005528

0800f9dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b08a      	sub	sp, #40	@ 0x28
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f9e8:	f7fe ffaa 	bl	800e940 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f9ec:	4b5c      	ldr	r3, [pc, #368]	@ (800fb60 <pvPortMalloc+0x184>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d101      	bne.n	800f9f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f9f4:	f000 f924 	bl	800fc40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f9f8:	4b5a      	ldr	r3, [pc, #360]	@ (800fb64 <pvPortMalloc+0x188>)
 800f9fa:	681a      	ldr	r2, [r3, #0]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	4013      	ands	r3, r2
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	f040 8095 	bne.w	800fb30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d01e      	beq.n	800fa4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fa0c:	2208      	movs	r2, #8
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	4413      	add	r3, r2
 800fa12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f003 0307 	and.w	r3, r3, #7
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d015      	beq.n	800fa4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f023 0307 	bic.w	r3, r3, #7
 800fa24:	3308      	adds	r3, #8
 800fa26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f003 0307 	and.w	r3, r3, #7
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d00b      	beq.n	800fa4a <pvPortMalloc+0x6e>
	__asm volatile
 800fa32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa36:	f383 8811 	msr	BASEPRI, r3
 800fa3a:	f3bf 8f6f 	isb	sy
 800fa3e:	f3bf 8f4f 	dsb	sy
 800fa42:	617b      	str	r3, [r7, #20]
}
 800fa44:	bf00      	nop
 800fa46:	bf00      	nop
 800fa48:	e7fd      	b.n	800fa46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d06f      	beq.n	800fb30 <pvPortMalloc+0x154>
 800fa50:	4b45      	ldr	r3, [pc, #276]	@ (800fb68 <pvPortMalloc+0x18c>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	687a      	ldr	r2, [r7, #4]
 800fa56:	429a      	cmp	r2, r3
 800fa58:	d86a      	bhi.n	800fb30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fa5a:	4b44      	ldr	r3, [pc, #272]	@ (800fb6c <pvPortMalloc+0x190>)
 800fa5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fa5e:	4b43      	ldr	r3, [pc, #268]	@ (800fb6c <pvPortMalloc+0x190>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa64:	e004      	b.n	800fa70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fa66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fa6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa72:	685b      	ldr	r3, [r3, #4]
 800fa74:	687a      	ldr	r2, [r7, #4]
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d903      	bls.n	800fa82 <pvPortMalloc+0xa6>
 800fa7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d1f1      	bne.n	800fa66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fa82:	4b37      	ldr	r3, [pc, #220]	@ (800fb60 <pvPortMalloc+0x184>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d051      	beq.n	800fb30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fa8c:	6a3b      	ldr	r3, [r7, #32]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	2208      	movs	r2, #8
 800fa92:	4413      	add	r3, r2
 800fa94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fa96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa98:	681a      	ldr	r2, [r3, #0]
 800fa9a:	6a3b      	ldr	r3, [r7, #32]
 800fa9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fa9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faa0:	685a      	ldr	r2, [r3, #4]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	1ad2      	subs	r2, r2, r3
 800faa6:	2308      	movs	r3, #8
 800faa8:	005b      	lsls	r3, r3, #1
 800faaa:	429a      	cmp	r2, r3
 800faac:	d920      	bls.n	800faf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800faae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	4413      	add	r3, r2
 800fab4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fab6:	69bb      	ldr	r3, [r7, #24]
 800fab8:	f003 0307 	and.w	r3, r3, #7
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d00b      	beq.n	800fad8 <pvPortMalloc+0xfc>
	__asm volatile
 800fac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fac4:	f383 8811 	msr	BASEPRI, r3
 800fac8:	f3bf 8f6f 	isb	sy
 800facc:	f3bf 8f4f 	dsb	sy
 800fad0:	613b      	str	r3, [r7, #16]
}
 800fad2:	bf00      	nop
 800fad4:	bf00      	nop
 800fad6:	e7fd      	b.n	800fad4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fada:	685a      	ldr	r2, [r3, #4]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	1ad2      	subs	r2, r2, r3
 800fae0:	69bb      	ldr	r3, [r7, #24]
 800fae2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fae6:	687a      	ldr	r2, [r7, #4]
 800fae8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800faea:	69b8      	ldr	r0, [r7, #24]
 800faec:	f000 f90a 	bl	800fd04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800faf0:	4b1d      	ldr	r3, [pc, #116]	@ (800fb68 <pvPortMalloc+0x18c>)
 800faf2:	681a      	ldr	r2, [r3, #0]
 800faf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	1ad3      	subs	r3, r2, r3
 800fafa:	4a1b      	ldr	r2, [pc, #108]	@ (800fb68 <pvPortMalloc+0x18c>)
 800fafc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fafe:	4b1a      	ldr	r3, [pc, #104]	@ (800fb68 <pvPortMalloc+0x18c>)
 800fb00:	681a      	ldr	r2, [r3, #0]
 800fb02:	4b1b      	ldr	r3, [pc, #108]	@ (800fb70 <pvPortMalloc+0x194>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d203      	bcs.n	800fb12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fb0a:	4b17      	ldr	r3, [pc, #92]	@ (800fb68 <pvPortMalloc+0x18c>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	4a18      	ldr	r2, [pc, #96]	@ (800fb70 <pvPortMalloc+0x194>)
 800fb10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb14:	685a      	ldr	r2, [r3, #4]
 800fb16:	4b13      	ldr	r3, [pc, #76]	@ (800fb64 <pvPortMalloc+0x188>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	431a      	orrs	r2, r3
 800fb1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fb20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb22:	2200      	movs	r2, #0
 800fb24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fb26:	4b13      	ldr	r3, [pc, #76]	@ (800fb74 <pvPortMalloc+0x198>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	3301      	adds	r3, #1
 800fb2c:	4a11      	ldr	r2, [pc, #68]	@ (800fb74 <pvPortMalloc+0x198>)
 800fb2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fb30:	f7fe ff14 	bl	800e95c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb34:	69fb      	ldr	r3, [r7, #28]
 800fb36:	f003 0307 	and.w	r3, r3, #7
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d00b      	beq.n	800fb56 <pvPortMalloc+0x17a>
	__asm volatile
 800fb3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb42:	f383 8811 	msr	BASEPRI, r3
 800fb46:	f3bf 8f6f 	isb	sy
 800fb4a:	f3bf 8f4f 	dsb	sy
 800fb4e:	60fb      	str	r3, [r7, #12]
}
 800fb50:	bf00      	nop
 800fb52:	bf00      	nop
 800fb54:	e7fd      	b.n	800fb52 <pvPortMalloc+0x176>
	return pvReturn;
 800fb56:	69fb      	ldr	r3, [r7, #28]
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3728      	adds	r7, #40	@ 0x28
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}
 800fb60:	20009134 	.word	0x20009134
 800fb64:	20009148 	.word	0x20009148
 800fb68:	20009138 	.word	0x20009138
 800fb6c:	2000912c 	.word	0x2000912c
 800fb70:	2000913c 	.word	0x2000913c
 800fb74:	20009140 	.word	0x20009140

0800fb78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b086      	sub	sp, #24
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d04f      	beq.n	800fc2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fb8a:	2308      	movs	r3, #8
 800fb8c:	425b      	negs	r3, r3
 800fb8e:	697a      	ldr	r2, [r7, #20]
 800fb90:	4413      	add	r3, r2
 800fb92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fb98:	693b      	ldr	r3, [r7, #16]
 800fb9a:	685a      	ldr	r2, [r3, #4]
 800fb9c:	4b25      	ldr	r3, [pc, #148]	@ (800fc34 <vPortFree+0xbc>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	4013      	ands	r3, r2
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d10b      	bne.n	800fbbe <vPortFree+0x46>
	__asm volatile
 800fba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbaa:	f383 8811 	msr	BASEPRI, r3
 800fbae:	f3bf 8f6f 	isb	sy
 800fbb2:	f3bf 8f4f 	dsb	sy
 800fbb6:	60fb      	str	r3, [r7, #12]
}
 800fbb8:	bf00      	nop
 800fbba:	bf00      	nop
 800fbbc:	e7fd      	b.n	800fbba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fbbe:	693b      	ldr	r3, [r7, #16]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d00b      	beq.n	800fbde <vPortFree+0x66>
	__asm volatile
 800fbc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbca:	f383 8811 	msr	BASEPRI, r3
 800fbce:	f3bf 8f6f 	isb	sy
 800fbd2:	f3bf 8f4f 	dsb	sy
 800fbd6:	60bb      	str	r3, [r7, #8]
}
 800fbd8:	bf00      	nop
 800fbda:	bf00      	nop
 800fbdc:	e7fd      	b.n	800fbda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	685a      	ldr	r2, [r3, #4]
 800fbe2:	4b14      	ldr	r3, [pc, #80]	@ (800fc34 <vPortFree+0xbc>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	4013      	ands	r3, r2
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d01e      	beq.n	800fc2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fbec:	693b      	ldr	r3, [r7, #16]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d11a      	bne.n	800fc2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fbf4:	693b      	ldr	r3, [r7, #16]
 800fbf6:	685a      	ldr	r2, [r3, #4]
 800fbf8:	4b0e      	ldr	r3, [pc, #56]	@ (800fc34 <vPortFree+0xbc>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	43db      	mvns	r3, r3
 800fbfe:	401a      	ands	r2, r3
 800fc00:	693b      	ldr	r3, [r7, #16]
 800fc02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fc04:	f7fe fe9c 	bl	800e940 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	685a      	ldr	r2, [r3, #4]
 800fc0c:	4b0a      	ldr	r3, [pc, #40]	@ (800fc38 <vPortFree+0xc0>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	4413      	add	r3, r2
 800fc12:	4a09      	ldr	r2, [pc, #36]	@ (800fc38 <vPortFree+0xc0>)
 800fc14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fc16:	6938      	ldr	r0, [r7, #16]
 800fc18:	f000 f874 	bl	800fd04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fc1c:	4b07      	ldr	r3, [pc, #28]	@ (800fc3c <vPortFree+0xc4>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	3301      	adds	r3, #1
 800fc22:	4a06      	ldr	r2, [pc, #24]	@ (800fc3c <vPortFree+0xc4>)
 800fc24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fc26:	f7fe fe99 	bl	800e95c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fc2a:	bf00      	nop
 800fc2c:	3718      	adds	r7, #24
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop
 800fc34:	20009148 	.word	0x20009148
 800fc38:	20009138 	.word	0x20009138
 800fc3c:	20009144 	.word	0x20009144

0800fc40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fc40:	b480      	push	{r7}
 800fc42:	b085      	sub	sp, #20
 800fc44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fc46:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800fc4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fc4c:	4b27      	ldr	r3, [pc, #156]	@ (800fcec <prvHeapInit+0xac>)
 800fc4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	f003 0307 	and.w	r3, r3, #7
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d00c      	beq.n	800fc74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	3307      	adds	r3, #7
 800fc5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	f023 0307 	bic.w	r3, r3, #7
 800fc66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fc68:	68ba      	ldr	r2, [r7, #8]
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	1ad3      	subs	r3, r2, r3
 800fc6e:	4a1f      	ldr	r2, [pc, #124]	@ (800fcec <prvHeapInit+0xac>)
 800fc70:	4413      	add	r3, r2
 800fc72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fc78:	4a1d      	ldr	r2, [pc, #116]	@ (800fcf0 <prvHeapInit+0xb0>)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fc7e:	4b1c      	ldr	r3, [pc, #112]	@ (800fcf0 <prvHeapInit+0xb0>)
 800fc80:	2200      	movs	r2, #0
 800fc82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	68ba      	ldr	r2, [r7, #8]
 800fc88:	4413      	add	r3, r2
 800fc8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fc8c:	2208      	movs	r2, #8
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	1a9b      	subs	r3, r3, r2
 800fc92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f023 0307 	bic.w	r3, r3, #7
 800fc9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	4a15      	ldr	r2, [pc, #84]	@ (800fcf4 <prvHeapInit+0xb4>)
 800fca0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fca2:	4b14      	ldr	r3, [pc, #80]	@ (800fcf4 <prvHeapInit+0xb4>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	2200      	movs	r2, #0
 800fca8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fcaa:	4b12      	ldr	r3, [pc, #72]	@ (800fcf4 <prvHeapInit+0xb4>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	68fa      	ldr	r2, [r7, #12]
 800fcba:	1ad2      	subs	r2, r2, r3
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fcc0:	4b0c      	ldr	r3, [pc, #48]	@ (800fcf4 <prvHeapInit+0xb4>)
 800fcc2:	681a      	ldr	r2, [r3, #0]
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	685b      	ldr	r3, [r3, #4]
 800fccc:	4a0a      	ldr	r2, [pc, #40]	@ (800fcf8 <prvHeapInit+0xb8>)
 800fcce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	685b      	ldr	r3, [r3, #4]
 800fcd4:	4a09      	ldr	r2, [pc, #36]	@ (800fcfc <prvHeapInit+0xbc>)
 800fcd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fcd8:	4b09      	ldr	r3, [pc, #36]	@ (800fd00 <prvHeapInit+0xc0>)
 800fcda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fcde:	601a      	str	r2, [r3, #0]
}
 800fce0:	bf00      	nop
 800fce2:	3714      	adds	r7, #20
 800fce4:	46bd      	mov	sp, r7
 800fce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcea:	4770      	bx	lr
 800fcec:	2000552c 	.word	0x2000552c
 800fcf0:	2000912c 	.word	0x2000912c
 800fcf4:	20009134 	.word	0x20009134
 800fcf8:	2000913c 	.word	0x2000913c
 800fcfc:	20009138 	.word	0x20009138
 800fd00:	20009148 	.word	0x20009148

0800fd04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fd04:	b480      	push	{r7}
 800fd06:	b085      	sub	sp, #20
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fd0c:	4b28      	ldr	r3, [pc, #160]	@ (800fdb0 <prvInsertBlockIntoFreeList+0xac>)
 800fd0e:	60fb      	str	r3, [r7, #12]
 800fd10:	e002      	b.n	800fd18 <prvInsertBlockIntoFreeList+0x14>
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	60fb      	str	r3, [r7, #12]
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	687a      	ldr	r2, [r7, #4]
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d8f7      	bhi.n	800fd12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	685b      	ldr	r3, [r3, #4]
 800fd2a:	68ba      	ldr	r2, [r7, #8]
 800fd2c:	4413      	add	r3, r2
 800fd2e:	687a      	ldr	r2, [r7, #4]
 800fd30:	429a      	cmp	r2, r3
 800fd32:	d108      	bne.n	800fd46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	685a      	ldr	r2, [r3, #4]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	441a      	add	r2, r3
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	685b      	ldr	r3, [r3, #4]
 800fd4e:	68ba      	ldr	r2, [r7, #8]
 800fd50:	441a      	add	r2, r3
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	429a      	cmp	r2, r3
 800fd58:	d118      	bne.n	800fd8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	681a      	ldr	r2, [r3, #0]
 800fd5e:	4b15      	ldr	r3, [pc, #84]	@ (800fdb4 <prvInsertBlockIntoFreeList+0xb0>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	429a      	cmp	r2, r3
 800fd64:	d00d      	beq.n	800fd82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	685a      	ldr	r2, [r3, #4]
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	685b      	ldr	r3, [r3, #4]
 800fd70:	441a      	add	r2, r3
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	681a      	ldr	r2, [r3, #0]
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	601a      	str	r2, [r3, #0]
 800fd80:	e008      	b.n	800fd94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fd82:	4b0c      	ldr	r3, [pc, #48]	@ (800fdb4 <prvInsertBlockIntoFreeList+0xb0>)
 800fd84:	681a      	ldr	r2, [r3, #0]
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	601a      	str	r2, [r3, #0]
 800fd8a:	e003      	b.n	800fd94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	681a      	ldr	r2, [r3, #0]
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fd94:	68fa      	ldr	r2, [r7, #12]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	429a      	cmp	r2, r3
 800fd9a:	d002      	beq.n	800fda2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	687a      	ldr	r2, [r7, #4]
 800fda0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fda2:	bf00      	nop
 800fda4:	3714      	adds	r7, #20
 800fda6:	46bd      	mov	sp, r7
 800fda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdac:	4770      	bx	lr
 800fdae:	bf00      	nop
 800fdb0:	2000912c 	.word	0x2000912c
 800fdb4:	20009134 	.word	0x20009134

0800fdb8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b084      	sub	sp, #16
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800fdc2:	f008 f945 	bl	8018050 <sys_timeouts_sleeptime>
 800fdc6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdce:	d10b      	bne.n	800fde8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800fdd0:	4813      	ldr	r0, [pc, #76]	@ (800fe20 <tcpip_timeouts_mbox_fetch+0x68>)
 800fdd2:	f00a ff18 	bl	801ac06 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	6839      	ldr	r1, [r7, #0]
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f00a fe8a 	bl	801aaf4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800fde0:	480f      	ldr	r0, [pc, #60]	@ (800fe20 <tcpip_timeouts_mbox_fetch+0x68>)
 800fde2:	f00a ff01 	bl	801abe8 <sys_mutex_lock>
    return;
 800fde6:	e018      	b.n	800fe1a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d102      	bne.n	800fdf4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800fdee:	f008 f8f5 	bl	8017fdc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800fdf2:	e7e6      	b.n	800fdc2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800fdf4:	480a      	ldr	r0, [pc, #40]	@ (800fe20 <tcpip_timeouts_mbox_fetch+0x68>)
 800fdf6:	f00a ff06 	bl	801ac06 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800fdfa:	68fa      	ldr	r2, [r7, #12]
 800fdfc:	6839      	ldr	r1, [r7, #0]
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f00a fe78 	bl	801aaf4 <sys_arch_mbox_fetch>
 800fe04:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800fe06:	4806      	ldr	r0, [pc, #24]	@ (800fe20 <tcpip_timeouts_mbox_fetch+0x68>)
 800fe08:	f00a feee 	bl	801abe8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe12:	d102      	bne.n	800fe1a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800fe14:	f008 f8e2 	bl	8017fdc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800fe18:	e7d3      	b.n	800fdc2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800fe1a:	3710      	adds	r7, #16
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}
 800fe20:	20009158 	.word	0x20009158

0800fe24 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b084      	sub	sp, #16
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800fe2c:	4810      	ldr	r0, [pc, #64]	@ (800fe70 <tcpip_thread+0x4c>)
 800fe2e:	f00a fedb 	bl	801abe8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800fe32:	4b10      	ldr	r3, [pc, #64]	@ (800fe74 <tcpip_thread+0x50>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d005      	beq.n	800fe46 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800fe3a:	4b0e      	ldr	r3, [pc, #56]	@ (800fe74 <tcpip_thread+0x50>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	4a0e      	ldr	r2, [pc, #56]	@ (800fe78 <tcpip_thread+0x54>)
 800fe40:	6812      	ldr	r2, [r2, #0]
 800fe42:	4610      	mov	r0, r2
 800fe44:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800fe46:	f107 030c 	add.w	r3, r7, #12
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	480b      	ldr	r0, [pc, #44]	@ (800fe7c <tcpip_thread+0x58>)
 800fe4e:	f7ff ffb3 	bl	800fdb8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d106      	bne.n	800fe66 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800fe58:	4b09      	ldr	r3, [pc, #36]	@ (800fe80 <tcpip_thread+0x5c>)
 800fe5a:	2291      	movs	r2, #145	@ 0x91
 800fe5c:	4909      	ldr	r1, [pc, #36]	@ (800fe84 <tcpip_thread+0x60>)
 800fe5e:	480a      	ldr	r0, [pc, #40]	@ (800fe88 <tcpip_thread+0x64>)
 800fe60:	f00b fd3c 	bl	801b8dc <iprintf>
      continue;
 800fe64:	e003      	b.n	800fe6e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f000 f80f 	bl	800fe8c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800fe6e:	e7ea      	b.n	800fe46 <tcpip_thread+0x22>
 800fe70:	20009158 	.word	0x20009158
 800fe74:	2000914c 	.word	0x2000914c
 800fe78:	20009150 	.word	0x20009150
 800fe7c:	20009154 	.word	0x20009154
 800fe80:	0801e380 	.word	0x0801e380
 800fe84:	0801e3b0 	.word	0x0801e3b0
 800fe88:	0801e3d0 	.word	0x0801e3d0

0800fe8c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b082      	sub	sp, #8
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	781b      	ldrb	r3, [r3, #0]
 800fe98:	2b02      	cmp	r3, #2
 800fe9a:	d026      	beq.n	800feea <tcpip_thread_handle_msg+0x5e>
 800fe9c:	2b02      	cmp	r3, #2
 800fe9e:	dc2b      	bgt.n	800fef8 <tcpip_thread_handle_msg+0x6c>
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d002      	beq.n	800feaa <tcpip_thread_handle_msg+0x1e>
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d015      	beq.n	800fed4 <tcpip_thread_handle_msg+0x48>
 800fea8:	e026      	b.n	800fef8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	68db      	ldr	r3, [r3, #12]
 800feae:	687a      	ldr	r2, [r7, #4]
 800feb0:	6850      	ldr	r0, [r2, #4]
 800feb2:	687a      	ldr	r2, [r7, #4]
 800feb4:	6892      	ldr	r2, [r2, #8]
 800feb6:	4611      	mov	r1, r2
 800feb8:	4798      	blx	r3
 800feba:	4603      	mov	r3, r0
 800febc:	2b00      	cmp	r3, #0
 800febe:	d004      	beq.n	800feca <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	4618      	mov	r0, r3
 800fec6:	f001 fcd9 	bl	801187c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800feca:	6879      	ldr	r1, [r7, #4]
 800fecc:	2009      	movs	r0, #9
 800fece:	f000 fe63 	bl	8010b98 <memp_free>
      break;
 800fed2:	e018      	b.n	800ff06 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	685b      	ldr	r3, [r3, #4]
 800fed8:	687a      	ldr	r2, [r7, #4]
 800feda:	6892      	ldr	r2, [r2, #8]
 800fedc:	4610      	mov	r0, r2
 800fede:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800fee0:	6879      	ldr	r1, [r7, #4]
 800fee2:	2008      	movs	r0, #8
 800fee4:	f000 fe58 	bl	8010b98 <memp_free>
      break;
 800fee8:	e00d      	b.n	800ff06 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	685b      	ldr	r3, [r3, #4]
 800feee:	687a      	ldr	r2, [r7, #4]
 800fef0:	6892      	ldr	r2, [r2, #8]
 800fef2:	4610      	mov	r0, r2
 800fef4:	4798      	blx	r3
      break;
 800fef6:	e006      	b.n	800ff06 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800fef8:	4b05      	ldr	r3, [pc, #20]	@ (800ff10 <tcpip_thread_handle_msg+0x84>)
 800fefa:	22cf      	movs	r2, #207	@ 0xcf
 800fefc:	4905      	ldr	r1, [pc, #20]	@ (800ff14 <tcpip_thread_handle_msg+0x88>)
 800fefe:	4806      	ldr	r0, [pc, #24]	@ (800ff18 <tcpip_thread_handle_msg+0x8c>)
 800ff00:	f00b fcec 	bl	801b8dc <iprintf>
      break;
 800ff04:	bf00      	nop
  }
}
 800ff06:	bf00      	nop
 800ff08:	3708      	adds	r7, #8
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	bf00      	nop
 800ff10:	0801e380 	.word	0x0801e380
 800ff14:	0801e3b0 	.word	0x0801e3b0
 800ff18:	0801e3d0 	.word	0x0801e3d0

0800ff1c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b086      	sub	sp, #24
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	60f8      	str	r0, [r7, #12]
 800ff24:	60b9      	str	r1, [r7, #8]
 800ff26:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ff28:	481a      	ldr	r0, [pc, #104]	@ (800ff94 <tcpip_inpkt+0x78>)
 800ff2a:	f00a fe22 	bl	801ab72 <sys_mbox_valid>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d105      	bne.n	800ff40 <tcpip_inpkt+0x24>
 800ff34:	4b18      	ldr	r3, [pc, #96]	@ (800ff98 <tcpip_inpkt+0x7c>)
 800ff36:	22fc      	movs	r2, #252	@ 0xfc
 800ff38:	4918      	ldr	r1, [pc, #96]	@ (800ff9c <tcpip_inpkt+0x80>)
 800ff3a:	4819      	ldr	r0, [pc, #100]	@ (800ffa0 <tcpip_inpkt+0x84>)
 800ff3c:	f00b fcce 	bl	801b8dc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ff40:	2009      	movs	r0, #9
 800ff42:	f000 fdb3 	bl	8010aac <memp_malloc>
 800ff46:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ff48:	697b      	ldr	r3, [r7, #20]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d102      	bne.n	800ff54 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ff4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ff52:	e01a      	b.n	800ff8a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	2200      	movs	r2, #0
 800ff58:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ff5a:	697b      	ldr	r3, [r7, #20]
 800ff5c:	68fa      	ldr	r2, [r7, #12]
 800ff5e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	68ba      	ldr	r2, [r7, #8]
 800ff64:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ff66:	697b      	ldr	r3, [r7, #20]
 800ff68:	687a      	ldr	r2, [r7, #4]
 800ff6a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ff6c:	6979      	ldr	r1, [r7, #20]
 800ff6e:	4809      	ldr	r0, [pc, #36]	@ (800ff94 <tcpip_inpkt+0x78>)
 800ff70:	f00a fda6 	bl	801aac0 <sys_mbox_trypost>
 800ff74:	4603      	mov	r3, r0
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d006      	beq.n	800ff88 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ff7a:	6979      	ldr	r1, [r7, #20]
 800ff7c:	2009      	movs	r0, #9
 800ff7e:	f000 fe0b 	bl	8010b98 <memp_free>
    return ERR_MEM;
 800ff82:	f04f 33ff 	mov.w	r3, #4294967295
 800ff86:	e000      	b.n	800ff8a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ff88:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3718      	adds	r7, #24
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}
 800ff92:	bf00      	nop
 800ff94:	20009154 	.word	0x20009154
 800ff98:	0801e380 	.word	0x0801e380
 800ff9c:	0801e3f8 	.word	0x0801e3f8
 800ffa0:	0801e3d0 	.word	0x0801e3d0

0800ffa4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b082      	sub	sp, #8
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ffb4:	f003 0318 	and.w	r3, r3, #24
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d006      	beq.n	800ffca <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ffbc:	4a08      	ldr	r2, [pc, #32]	@ (800ffe0 <tcpip_input+0x3c>)
 800ffbe:	6839      	ldr	r1, [r7, #0]
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f7ff ffab 	bl	800ff1c <tcpip_inpkt>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	e005      	b.n	800ffd6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ffca:	4a06      	ldr	r2, [pc, #24]	@ (800ffe4 <tcpip_input+0x40>)
 800ffcc:	6839      	ldr	r1, [r7, #0]
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f7ff ffa4 	bl	800ff1c <tcpip_inpkt>
 800ffd4:	4603      	mov	r3, r0
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	3708      	adds	r7, #8
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd80      	pop	{r7, pc}
 800ffde:	bf00      	nop
 800ffe0:	0801a8d1 	.word	0x0801a8d1
 800ffe4:	080196b9 	.word	0x080196b9

0800ffe8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b084      	sub	sp, #16
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800fff2:	4819      	ldr	r0, [pc, #100]	@ (8010058 <tcpip_try_callback+0x70>)
 800fff4:	f00a fdbd 	bl	801ab72 <sys_mbox_valid>
 800fff8:	4603      	mov	r3, r0
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d106      	bne.n	801000c <tcpip_try_callback+0x24>
 800fffe:	4b17      	ldr	r3, [pc, #92]	@ (801005c <tcpip_try_callback+0x74>)
 8010000:	f240 125d 	movw	r2, #349	@ 0x15d
 8010004:	4916      	ldr	r1, [pc, #88]	@ (8010060 <tcpip_try_callback+0x78>)
 8010006:	4817      	ldr	r0, [pc, #92]	@ (8010064 <tcpip_try_callback+0x7c>)
 8010008:	f00b fc68 	bl	801b8dc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801000c:	2008      	movs	r0, #8
 801000e:	f000 fd4d 	bl	8010aac <memp_malloc>
 8010012:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d102      	bne.n	8010020 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801001a:	f04f 33ff 	mov.w	r3, #4294967295
 801001e:	e017      	b.n	8010050 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	2201      	movs	r2, #1
 8010024:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	687a      	ldr	r2, [r7, #4]
 801002a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	683a      	ldr	r2, [r7, #0]
 8010030:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010032:	68f9      	ldr	r1, [r7, #12]
 8010034:	4808      	ldr	r0, [pc, #32]	@ (8010058 <tcpip_try_callback+0x70>)
 8010036:	f00a fd43 	bl	801aac0 <sys_mbox_trypost>
 801003a:	4603      	mov	r3, r0
 801003c:	2b00      	cmp	r3, #0
 801003e:	d006      	beq.n	801004e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8010040:	68f9      	ldr	r1, [r7, #12]
 8010042:	2008      	movs	r0, #8
 8010044:	f000 fda8 	bl	8010b98 <memp_free>
    return ERR_MEM;
 8010048:	f04f 33ff 	mov.w	r3, #4294967295
 801004c:	e000      	b.n	8010050 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801004e:	2300      	movs	r3, #0
}
 8010050:	4618      	mov	r0, r3
 8010052:	3710      	adds	r7, #16
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}
 8010058:	20009154 	.word	0x20009154
 801005c:	0801e380 	.word	0x0801e380
 8010060:	0801e3f8 	.word	0x0801e3f8
 8010064:	0801e3d0 	.word	0x0801e3d0

08010068 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b084      	sub	sp, #16
 801006c:	af02      	add	r7, sp, #8
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010072:	f000 f872 	bl	801015a <lwip_init>

  tcpip_init_done = initfunc;
 8010076:	4a17      	ldr	r2, [pc, #92]	@ (80100d4 <tcpip_init+0x6c>)
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801007c:	4a16      	ldr	r2, [pc, #88]	@ (80100d8 <tcpip_init+0x70>)
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8010082:	2106      	movs	r1, #6
 8010084:	4815      	ldr	r0, [pc, #84]	@ (80100dc <tcpip_init+0x74>)
 8010086:	f00a fcf9 	bl	801aa7c <sys_mbox_new>
 801008a:	4603      	mov	r3, r0
 801008c:	2b00      	cmp	r3, #0
 801008e:	d006      	beq.n	801009e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010090:	4b13      	ldr	r3, [pc, #76]	@ (80100e0 <tcpip_init+0x78>)
 8010092:	f240 2261 	movw	r2, #609	@ 0x261
 8010096:	4913      	ldr	r1, [pc, #76]	@ (80100e4 <tcpip_init+0x7c>)
 8010098:	4813      	ldr	r0, [pc, #76]	@ (80100e8 <tcpip_init+0x80>)
 801009a:	f00b fc1f 	bl	801b8dc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801009e:	4813      	ldr	r0, [pc, #76]	@ (80100ec <tcpip_init+0x84>)
 80100a0:	f00a fd86 	bl	801abb0 <sys_mutex_new>
 80100a4:	4603      	mov	r3, r0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d006      	beq.n	80100b8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80100aa:	4b0d      	ldr	r3, [pc, #52]	@ (80100e0 <tcpip_init+0x78>)
 80100ac:	f240 2265 	movw	r2, #613	@ 0x265
 80100b0:	490f      	ldr	r1, [pc, #60]	@ (80100f0 <tcpip_init+0x88>)
 80100b2:	480d      	ldr	r0, [pc, #52]	@ (80100e8 <tcpip_init+0x80>)
 80100b4:	f00b fc12 	bl	801b8dc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80100b8:	2300      	movs	r3, #0
 80100ba:	9300      	str	r3, [sp, #0]
 80100bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80100c0:	2200      	movs	r2, #0
 80100c2:	490c      	ldr	r1, [pc, #48]	@ (80100f4 <tcpip_init+0x8c>)
 80100c4:	480c      	ldr	r0, [pc, #48]	@ (80100f8 <tcpip_init+0x90>)
 80100c6:	f00a fdab 	bl	801ac20 <sys_thread_new>
}
 80100ca:	bf00      	nop
 80100cc:	3708      	adds	r7, #8
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
 80100d2:	bf00      	nop
 80100d4:	2000914c 	.word	0x2000914c
 80100d8:	20009150 	.word	0x20009150
 80100dc:	20009154 	.word	0x20009154
 80100e0:	0801e380 	.word	0x0801e380
 80100e4:	0801e408 	.word	0x0801e408
 80100e8:	0801e3d0 	.word	0x0801e3d0
 80100ec:	20009158 	.word	0x20009158
 80100f0:	0801e42c 	.word	0x0801e42c
 80100f4:	0800fe25 	.word	0x0800fe25
 80100f8:	0801e450 	.word	0x0801e450

080100fc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80100fc:	b480      	push	{r7}
 80100fe:	b083      	sub	sp, #12
 8010100:	af00      	add	r7, sp, #0
 8010102:	4603      	mov	r3, r0
 8010104:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8010106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801010a:	021b      	lsls	r3, r3, #8
 801010c:	b21a      	sxth	r2, r3
 801010e:	88fb      	ldrh	r3, [r7, #6]
 8010110:	0a1b      	lsrs	r3, r3, #8
 8010112:	b29b      	uxth	r3, r3
 8010114:	b21b      	sxth	r3, r3
 8010116:	4313      	orrs	r3, r2
 8010118:	b21b      	sxth	r3, r3
 801011a:	b29b      	uxth	r3, r3
}
 801011c:	4618      	mov	r0, r3
 801011e:	370c      	adds	r7, #12
 8010120:	46bd      	mov	sp, r7
 8010122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010126:	4770      	bx	lr

08010128 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010128:	b480      	push	{r7}
 801012a:	b083      	sub	sp, #12
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	061a      	lsls	r2, r3, #24
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	021b      	lsls	r3, r3, #8
 8010138:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801013c:	431a      	orrs	r2, r3
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	0a1b      	lsrs	r3, r3, #8
 8010142:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010146:	431a      	orrs	r2, r3
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	0e1b      	lsrs	r3, r3, #24
 801014c:	4313      	orrs	r3, r2
}
 801014e:	4618      	mov	r0, r3
 8010150:	370c      	adds	r7, #12
 8010152:	46bd      	mov	sp, r7
 8010154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010158:	4770      	bx	lr

0801015a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801015a:	b580      	push	{r7, lr}
 801015c:	b082      	sub	sp, #8
 801015e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010160:	2300      	movs	r3, #0
 8010162:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8010164:	f00a fd16 	bl	801ab94 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010168:	f000 f8d4 	bl	8010314 <mem_init>
  memp_init();
 801016c:	f000 fc30 	bl	80109d0 <memp_init>
  pbuf_init();
  netif_init();
 8010170:	f000 fd3c 	bl	8010bec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010174:	f007 ffa4 	bl	80180c0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010178:	f001 fe1a 	bl	8011db0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801017c:	f007 fee6 	bl	8017f4c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010180:	bf00      	nop
 8010182:	3708      	adds	r7, #8
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}

08010188 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010188:	b480      	push	{r7}
 801018a:	b083      	sub	sp, #12
 801018c:	af00      	add	r7, sp, #0
 801018e:	4603      	mov	r3, r0
 8010190:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010192:	4b05      	ldr	r3, [pc, #20]	@ (80101a8 <ptr_to_mem+0x20>)
 8010194:	681a      	ldr	r2, [r3, #0]
 8010196:	88fb      	ldrh	r3, [r7, #6]
 8010198:	4413      	add	r3, r2
}
 801019a:	4618      	mov	r0, r3
 801019c:	370c      	adds	r7, #12
 801019e:	46bd      	mov	sp, r7
 80101a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a4:	4770      	bx	lr
 80101a6:	bf00      	nop
 80101a8:	200097c8 	.word	0x200097c8

080101ac <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80101ac:	b480      	push	{r7}
 80101ae:	b083      	sub	sp, #12
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80101b4:	4b05      	ldr	r3, [pc, #20]	@ (80101cc <mem_to_ptr+0x20>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	687a      	ldr	r2, [r7, #4]
 80101ba:	1ad3      	subs	r3, r2, r3
 80101bc:	b29b      	uxth	r3, r3
}
 80101be:	4618      	mov	r0, r3
 80101c0:	370c      	adds	r7, #12
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr
 80101ca:	bf00      	nop
 80101cc:	200097c8 	.word	0x200097c8

080101d0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80101d0:	b590      	push	{r4, r7, lr}
 80101d2:	b085      	sub	sp, #20
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80101d8:	4b45      	ldr	r3, [pc, #276]	@ (80102f0 <plug_holes+0x120>)
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	687a      	ldr	r2, [r7, #4]
 80101de:	429a      	cmp	r2, r3
 80101e0:	d206      	bcs.n	80101f0 <plug_holes+0x20>
 80101e2:	4b44      	ldr	r3, [pc, #272]	@ (80102f4 <plug_holes+0x124>)
 80101e4:	f240 12df 	movw	r2, #479	@ 0x1df
 80101e8:	4943      	ldr	r1, [pc, #268]	@ (80102f8 <plug_holes+0x128>)
 80101ea:	4844      	ldr	r0, [pc, #272]	@ (80102fc <plug_holes+0x12c>)
 80101ec:	f00b fb76 	bl	801b8dc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80101f0:	4b43      	ldr	r3, [pc, #268]	@ (8010300 <plug_holes+0x130>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	687a      	ldr	r2, [r7, #4]
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d306      	bcc.n	8010208 <plug_holes+0x38>
 80101fa:	4b3e      	ldr	r3, [pc, #248]	@ (80102f4 <plug_holes+0x124>)
 80101fc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010200:	4940      	ldr	r1, [pc, #256]	@ (8010304 <plug_holes+0x134>)
 8010202:	483e      	ldr	r0, [pc, #248]	@ (80102fc <plug_holes+0x12c>)
 8010204:	f00b fb6a 	bl	801b8dc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	791b      	ldrb	r3, [r3, #4]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d006      	beq.n	801021e <plug_holes+0x4e>
 8010210:	4b38      	ldr	r3, [pc, #224]	@ (80102f4 <plug_holes+0x124>)
 8010212:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8010216:	493c      	ldr	r1, [pc, #240]	@ (8010308 <plug_holes+0x138>)
 8010218:	4838      	ldr	r0, [pc, #224]	@ (80102fc <plug_holes+0x12c>)
 801021a:	f00b fb5f 	bl	801b8dc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	881b      	ldrh	r3, [r3, #0]
 8010222:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010226:	d906      	bls.n	8010236 <plug_holes+0x66>
 8010228:	4b32      	ldr	r3, [pc, #200]	@ (80102f4 <plug_holes+0x124>)
 801022a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 801022e:	4937      	ldr	r1, [pc, #220]	@ (801030c <plug_holes+0x13c>)
 8010230:	4832      	ldr	r0, [pc, #200]	@ (80102fc <plug_holes+0x12c>)
 8010232:	f00b fb53 	bl	801b8dc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	881b      	ldrh	r3, [r3, #0]
 801023a:	4618      	mov	r0, r3
 801023c:	f7ff ffa4 	bl	8010188 <ptr_to_mem>
 8010240:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010242:	687a      	ldr	r2, [r7, #4]
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	429a      	cmp	r2, r3
 8010248:	d024      	beq.n	8010294 <plug_holes+0xc4>
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	791b      	ldrb	r3, [r3, #4]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d120      	bne.n	8010294 <plug_holes+0xc4>
 8010252:	4b2b      	ldr	r3, [pc, #172]	@ (8010300 <plug_holes+0x130>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	68fa      	ldr	r2, [r7, #12]
 8010258:	429a      	cmp	r2, r3
 801025a:	d01b      	beq.n	8010294 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801025c:	4b2c      	ldr	r3, [pc, #176]	@ (8010310 <plug_holes+0x140>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	68fa      	ldr	r2, [r7, #12]
 8010262:	429a      	cmp	r2, r3
 8010264:	d102      	bne.n	801026c <plug_holes+0x9c>
      lfree = mem;
 8010266:	4a2a      	ldr	r2, [pc, #168]	@ (8010310 <plug_holes+0x140>)
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	881a      	ldrh	r2, [r3, #0]
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	881b      	ldrh	r3, [r3, #0]
 8010278:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801027c:	d00a      	beq.n	8010294 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	881b      	ldrh	r3, [r3, #0]
 8010282:	4618      	mov	r0, r3
 8010284:	f7ff ff80 	bl	8010188 <ptr_to_mem>
 8010288:	4604      	mov	r4, r0
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f7ff ff8e 	bl	80101ac <mem_to_ptr>
 8010290:	4603      	mov	r3, r0
 8010292:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	885b      	ldrh	r3, [r3, #2]
 8010298:	4618      	mov	r0, r3
 801029a:	f7ff ff75 	bl	8010188 <ptr_to_mem>
 801029e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80102a0:	68ba      	ldr	r2, [r7, #8]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	429a      	cmp	r2, r3
 80102a6:	d01f      	beq.n	80102e8 <plug_holes+0x118>
 80102a8:	68bb      	ldr	r3, [r7, #8]
 80102aa:	791b      	ldrb	r3, [r3, #4]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d11b      	bne.n	80102e8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80102b0:	4b17      	ldr	r3, [pc, #92]	@ (8010310 <plug_holes+0x140>)
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	687a      	ldr	r2, [r7, #4]
 80102b6:	429a      	cmp	r2, r3
 80102b8:	d102      	bne.n	80102c0 <plug_holes+0xf0>
      lfree = pmem;
 80102ba:	4a15      	ldr	r2, [pc, #84]	@ (8010310 <plug_holes+0x140>)
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	881a      	ldrh	r2, [r3, #0]
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	881b      	ldrh	r3, [r3, #0]
 80102cc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80102d0:	d00a      	beq.n	80102e8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	881b      	ldrh	r3, [r3, #0]
 80102d6:	4618      	mov	r0, r3
 80102d8:	f7ff ff56 	bl	8010188 <ptr_to_mem>
 80102dc:	4604      	mov	r4, r0
 80102de:	68b8      	ldr	r0, [r7, #8]
 80102e0:	f7ff ff64 	bl	80101ac <mem_to_ptr>
 80102e4:	4603      	mov	r3, r0
 80102e6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80102e8:	bf00      	nop
 80102ea:	3714      	adds	r7, #20
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd90      	pop	{r4, r7, pc}
 80102f0:	200097c8 	.word	0x200097c8
 80102f4:	0801e460 	.word	0x0801e460
 80102f8:	0801e490 	.word	0x0801e490
 80102fc:	0801e4a8 	.word	0x0801e4a8
 8010300:	200097cc 	.word	0x200097cc
 8010304:	0801e4d0 	.word	0x0801e4d0
 8010308:	0801e4ec 	.word	0x0801e4ec
 801030c:	0801e508 	.word	0x0801e508
 8010310:	200097d4 	.word	0x200097d4

08010314 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b082      	sub	sp, #8
 8010318:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801031a:	4b1f      	ldr	r3, [pc, #124]	@ (8010398 <mem_init+0x84>)
 801031c:	3303      	adds	r3, #3
 801031e:	f023 0303 	bic.w	r3, r3, #3
 8010322:	461a      	mov	r2, r3
 8010324:	4b1d      	ldr	r3, [pc, #116]	@ (801039c <mem_init+0x88>)
 8010326:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010328:	4b1c      	ldr	r3, [pc, #112]	@ (801039c <mem_init+0x88>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8010334:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2200      	movs	r2, #0
 801033a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2200      	movs	r2, #0
 8010340:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010342:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8010346:	f7ff ff1f 	bl	8010188 <ptr_to_mem>
 801034a:	4603      	mov	r3, r0
 801034c:	4a14      	ldr	r2, [pc, #80]	@ (80103a0 <mem_init+0x8c>)
 801034e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010350:	4b13      	ldr	r3, [pc, #76]	@ (80103a0 <mem_init+0x8c>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	2201      	movs	r2, #1
 8010356:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010358:	4b11      	ldr	r3, [pc, #68]	@ (80103a0 <mem_init+0x8c>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8010360:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010362:	4b0f      	ldr	r3, [pc, #60]	@ (80103a0 <mem_init+0x8c>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 801036a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801036c:	4b0b      	ldr	r3, [pc, #44]	@ (801039c <mem_init+0x88>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	4a0c      	ldr	r2, [pc, #48]	@ (80103a4 <mem_init+0x90>)
 8010372:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010374:	480c      	ldr	r0, [pc, #48]	@ (80103a8 <mem_init+0x94>)
 8010376:	f00a fc1b 	bl	801abb0 <sys_mutex_new>
 801037a:	4603      	mov	r3, r0
 801037c:	2b00      	cmp	r3, #0
 801037e:	d006      	beq.n	801038e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8010380:	4b0a      	ldr	r3, [pc, #40]	@ (80103ac <mem_init+0x98>)
 8010382:	f240 221f 	movw	r2, #543	@ 0x21f
 8010386:	490a      	ldr	r1, [pc, #40]	@ (80103b0 <mem_init+0x9c>)
 8010388:	480a      	ldr	r0, [pc, #40]	@ (80103b4 <mem_init+0xa0>)
 801038a:	f00b faa7 	bl	801b8dc <iprintf>
  }
}
 801038e:	bf00      	nop
 8010390:	3708      	adds	r7, #8
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}
 8010396:	bf00      	nop
 8010398:	20009174 	.word	0x20009174
 801039c:	200097c8 	.word	0x200097c8
 80103a0:	200097cc 	.word	0x200097cc
 80103a4:	200097d4 	.word	0x200097d4
 80103a8:	200097d0 	.word	0x200097d0
 80103ac:	0801e460 	.word	0x0801e460
 80103b0:	0801e534 	.word	0x0801e534
 80103b4:	0801e4a8 	.word	0x0801e4a8

080103b8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b086      	sub	sp, #24
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	f7ff fef3 	bl	80101ac <mem_to_ptr>
 80103c6:	4603      	mov	r3, r0
 80103c8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	881b      	ldrh	r3, [r3, #0]
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7ff feda 	bl	8010188 <ptr_to_mem>
 80103d4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	885b      	ldrh	r3, [r3, #2]
 80103da:	4618      	mov	r0, r3
 80103dc:	f7ff fed4 	bl	8010188 <ptr_to_mem>
 80103e0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	881b      	ldrh	r3, [r3, #0]
 80103e6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80103ea:	d818      	bhi.n	801041e <mem_link_valid+0x66>
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	885b      	ldrh	r3, [r3, #2]
 80103f0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80103f4:	d813      	bhi.n	801041e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80103fa:	8afa      	ldrh	r2, [r7, #22]
 80103fc:	429a      	cmp	r2, r3
 80103fe:	d004      	beq.n	801040a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	881b      	ldrh	r3, [r3, #0]
 8010404:	8afa      	ldrh	r2, [r7, #22]
 8010406:	429a      	cmp	r2, r3
 8010408:	d109      	bne.n	801041e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801040a:	4b08      	ldr	r3, [pc, #32]	@ (801042c <mem_link_valid+0x74>)
 801040c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801040e:	693a      	ldr	r2, [r7, #16]
 8010410:	429a      	cmp	r2, r3
 8010412:	d006      	beq.n	8010422 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010414:	693b      	ldr	r3, [r7, #16]
 8010416:	885b      	ldrh	r3, [r3, #2]
 8010418:	8afa      	ldrh	r2, [r7, #22]
 801041a:	429a      	cmp	r2, r3
 801041c:	d001      	beq.n	8010422 <mem_link_valid+0x6a>
    return 0;
 801041e:	2300      	movs	r3, #0
 8010420:	e000      	b.n	8010424 <mem_link_valid+0x6c>
  }
  return 1;
 8010422:	2301      	movs	r3, #1
}
 8010424:	4618      	mov	r0, r3
 8010426:	3718      	adds	r7, #24
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}
 801042c:	200097cc 	.word	0x200097cc

08010430 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b088      	sub	sp, #32
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d070      	beq.n	8010520 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f003 0303 	and.w	r3, r3, #3
 8010444:	2b00      	cmp	r3, #0
 8010446:	d00d      	beq.n	8010464 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010448:	4b37      	ldr	r3, [pc, #220]	@ (8010528 <mem_free+0xf8>)
 801044a:	f240 2273 	movw	r2, #627	@ 0x273
 801044e:	4937      	ldr	r1, [pc, #220]	@ (801052c <mem_free+0xfc>)
 8010450:	4837      	ldr	r0, [pc, #220]	@ (8010530 <mem_free+0x100>)
 8010452:	f00b fa43 	bl	801b8dc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010456:	f00a fc09 	bl	801ac6c <sys_arch_protect>
 801045a:	60f8      	str	r0, [r7, #12]
 801045c:	68f8      	ldr	r0, [r7, #12]
 801045e:	f00a fc13 	bl	801ac88 <sys_arch_unprotect>
    return;
 8010462:	e05e      	b.n	8010522 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	3b08      	subs	r3, #8
 8010468:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801046a:	4b32      	ldr	r3, [pc, #200]	@ (8010534 <mem_free+0x104>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	69fa      	ldr	r2, [r7, #28]
 8010470:	429a      	cmp	r2, r3
 8010472:	d306      	bcc.n	8010482 <mem_free+0x52>
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f103 020c 	add.w	r2, r3, #12
 801047a:	4b2f      	ldr	r3, [pc, #188]	@ (8010538 <mem_free+0x108>)
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	429a      	cmp	r2, r3
 8010480:	d90d      	bls.n	801049e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8010482:	4b29      	ldr	r3, [pc, #164]	@ (8010528 <mem_free+0xf8>)
 8010484:	f240 227f 	movw	r2, #639	@ 0x27f
 8010488:	492c      	ldr	r1, [pc, #176]	@ (801053c <mem_free+0x10c>)
 801048a:	4829      	ldr	r0, [pc, #164]	@ (8010530 <mem_free+0x100>)
 801048c:	f00b fa26 	bl	801b8dc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010490:	f00a fbec 	bl	801ac6c <sys_arch_protect>
 8010494:	6138      	str	r0, [r7, #16]
 8010496:	6938      	ldr	r0, [r7, #16]
 8010498:	f00a fbf6 	bl	801ac88 <sys_arch_unprotect>
    return;
 801049c:	e041      	b.n	8010522 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801049e:	4828      	ldr	r0, [pc, #160]	@ (8010540 <mem_free+0x110>)
 80104a0:	f00a fba2 	bl	801abe8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80104a4:	69fb      	ldr	r3, [r7, #28]
 80104a6:	791b      	ldrb	r3, [r3, #4]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d110      	bne.n	80104ce <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80104ac:	4b1e      	ldr	r3, [pc, #120]	@ (8010528 <mem_free+0xf8>)
 80104ae:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80104b2:	4924      	ldr	r1, [pc, #144]	@ (8010544 <mem_free+0x114>)
 80104b4:	481e      	ldr	r0, [pc, #120]	@ (8010530 <mem_free+0x100>)
 80104b6:	f00b fa11 	bl	801b8dc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80104ba:	4821      	ldr	r0, [pc, #132]	@ (8010540 <mem_free+0x110>)
 80104bc:	f00a fba3 	bl	801ac06 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80104c0:	f00a fbd4 	bl	801ac6c <sys_arch_protect>
 80104c4:	6178      	str	r0, [r7, #20]
 80104c6:	6978      	ldr	r0, [r7, #20]
 80104c8:	f00a fbde 	bl	801ac88 <sys_arch_unprotect>
    return;
 80104cc:	e029      	b.n	8010522 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80104ce:	69f8      	ldr	r0, [r7, #28]
 80104d0:	f7ff ff72 	bl	80103b8 <mem_link_valid>
 80104d4:	4603      	mov	r3, r0
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d110      	bne.n	80104fc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80104da:	4b13      	ldr	r3, [pc, #76]	@ (8010528 <mem_free+0xf8>)
 80104dc:	f240 2295 	movw	r2, #661	@ 0x295
 80104e0:	4919      	ldr	r1, [pc, #100]	@ (8010548 <mem_free+0x118>)
 80104e2:	4813      	ldr	r0, [pc, #76]	@ (8010530 <mem_free+0x100>)
 80104e4:	f00b f9fa 	bl	801b8dc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80104e8:	4815      	ldr	r0, [pc, #84]	@ (8010540 <mem_free+0x110>)
 80104ea:	f00a fb8c 	bl	801ac06 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80104ee:	f00a fbbd 	bl	801ac6c <sys_arch_protect>
 80104f2:	61b8      	str	r0, [r7, #24]
 80104f4:	69b8      	ldr	r0, [r7, #24]
 80104f6:	f00a fbc7 	bl	801ac88 <sys_arch_unprotect>
    return;
 80104fa:	e012      	b.n	8010522 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80104fc:	69fb      	ldr	r3, [r7, #28]
 80104fe:	2200      	movs	r2, #0
 8010500:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010502:	4b12      	ldr	r3, [pc, #72]	@ (801054c <mem_free+0x11c>)
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	69fa      	ldr	r2, [r7, #28]
 8010508:	429a      	cmp	r2, r3
 801050a:	d202      	bcs.n	8010512 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801050c:	4a0f      	ldr	r2, [pc, #60]	@ (801054c <mem_free+0x11c>)
 801050e:	69fb      	ldr	r3, [r7, #28]
 8010510:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010512:	69f8      	ldr	r0, [r7, #28]
 8010514:	f7ff fe5c 	bl	80101d0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010518:	4809      	ldr	r0, [pc, #36]	@ (8010540 <mem_free+0x110>)
 801051a:	f00a fb74 	bl	801ac06 <sys_mutex_unlock>
 801051e:	e000      	b.n	8010522 <mem_free+0xf2>
    return;
 8010520:	bf00      	nop
}
 8010522:	3720      	adds	r7, #32
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}
 8010528:	0801e460 	.word	0x0801e460
 801052c:	0801e550 	.word	0x0801e550
 8010530:	0801e4a8 	.word	0x0801e4a8
 8010534:	200097c8 	.word	0x200097c8
 8010538:	200097cc 	.word	0x200097cc
 801053c:	0801e574 	.word	0x0801e574
 8010540:	200097d0 	.word	0x200097d0
 8010544:	0801e590 	.word	0x0801e590
 8010548:	0801e5b8 	.word	0x0801e5b8
 801054c:	200097d4 	.word	0x200097d4

08010550 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b088      	sub	sp, #32
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
 8010558:	460b      	mov	r3, r1
 801055a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801055c:	887b      	ldrh	r3, [r7, #2]
 801055e:	3303      	adds	r3, #3
 8010560:	b29b      	uxth	r3, r3
 8010562:	f023 0303 	bic.w	r3, r3, #3
 8010566:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010568:	8bfb      	ldrh	r3, [r7, #30]
 801056a:	2b0b      	cmp	r3, #11
 801056c:	d801      	bhi.n	8010572 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801056e:	230c      	movs	r3, #12
 8010570:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8010572:	8bfb      	ldrh	r3, [r7, #30]
 8010574:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010578:	d803      	bhi.n	8010582 <mem_trim+0x32>
 801057a:	8bfa      	ldrh	r2, [r7, #30]
 801057c:	887b      	ldrh	r3, [r7, #2]
 801057e:	429a      	cmp	r2, r3
 8010580:	d201      	bcs.n	8010586 <mem_trim+0x36>
    return NULL;
 8010582:	2300      	movs	r3, #0
 8010584:	e0d8      	b.n	8010738 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010586:	4b6e      	ldr	r3, [pc, #440]	@ (8010740 <mem_trim+0x1f0>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	687a      	ldr	r2, [r7, #4]
 801058c:	429a      	cmp	r2, r3
 801058e:	d304      	bcc.n	801059a <mem_trim+0x4a>
 8010590:	4b6c      	ldr	r3, [pc, #432]	@ (8010744 <mem_trim+0x1f4>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	687a      	ldr	r2, [r7, #4]
 8010596:	429a      	cmp	r2, r3
 8010598:	d306      	bcc.n	80105a8 <mem_trim+0x58>
 801059a:	4b6b      	ldr	r3, [pc, #428]	@ (8010748 <mem_trim+0x1f8>)
 801059c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80105a0:	496a      	ldr	r1, [pc, #424]	@ (801074c <mem_trim+0x1fc>)
 80105a2:	486b      	ldr	r0, [pc, #428]	@ (8010750 <mem_trim+0x200>)
 80105a4:	f00b f99a 	bl	801b8dc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80105a8:	4b65      	ldr	r3, [pc, #404]	@ (8010740 <mem_trim+0x1f0>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	687a      	ldr	r2, [r7, #4]
 80105ae:	429a      	cmp	r2, r3
 80105b0:	d304      	bcc.n	80105bc <mem_trim+0x6c>
 80105b2:	4b64      	ldr	r3, [pc, #400]	@ (8010744 <mem_trim+0x1f4>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	687a      	ldr	r2, [r7, #4]
 80105b8:	429a      	cmp	r2, r3
 80105ba:	d307      	bcc.n	80105cc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80105bc:	f00a fb56 	bl	801ac6c <sys_arch_protect>
 80105c0:	60b8      	str	r0, [r7, #8]
 80105c2:	68b8      	ldr	r0, [r7, #8]
 80105c4:	f00a fb60 	bl	801ac88 <sys_arch_unprotect>
    return rmem;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	e0b5      	b.n	8010738 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	3b08      	subs	r3, #8
 80105d0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80105d2:	69b8      	ldr	r0, [r7, #24]
 80105d4:	f7ff fdea 	bl	80101ac <mem_to_ptr>
 80105d8:	4603      	mov	r3, r0
 80105da:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80105dc:	69bb      	ldr	r3, [r7, #24]
 80105de:	881a      	ldrh	r2, [r3, #0]
 80105e0:	8afb      	ldrh	r3, [r7, #22]
 80105e2:	1ad3      	subs	r3, r2, r3
 80105e4:	b29b      	uxth	r3, r3
 80105e6:	3b08      	subs	r3, #8
 80105e8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80105ea:	8bfa      	ldrh	r2, [r7, #30]
 80105ec:	8abb      	ldrh	r3, [r7, #20]
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d906      	bls.n	8010600 <mem_trim+0xb0>
 80105f2:	4b55      	ldr	r3, [pc, #340]	@ (8010748 <mem_trim+0x1f8>)
 80105f4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80105f8:	4956      	ldr	r1, [pc, #344]	@ (8010754 <mem_trim+0x204>)
 80105fa:	4855      	ldr	r0, [pc, #340]	@ (8010750 <mem_trim+0x200>)
 80105fc:	f00b f96e 	bl	801b8dc <iprintf>
  if (newsize > size) {
 8010600:	8bfa      	ldrh	r2, [r7, #30]
 8010602:	8abb      	ldrh	r3, [r7, #20]
 8010604:	429a      	cmp	r2, r3
 8010606:	d901      	bls.n	801060c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8010608:	2300      	movs	r3, #0
 801060a:	e095      	b.n	8010738 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 801060c:	8bfa      	ldrh	r2, [r7, #30]
 801060e:	8abb      	ldrh	r3, [r7, #20]
 8010610:	429a      	cmp	r2, r3
 8010612:	d101      	bne.n	8010618 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	e08f      	b.n	8010738 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010618:	484f      	ldr	r0, [pc, #316]	@ (8010758 <mem_trim+0x208>)
 801061a:	f00a fae5 	bl	801abe8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801061e:	69bb      	ldr	r3, [r7, #24]
 8010620:	881b      	ldrh	r3, [r3, #0]
 8010622:	4618      	mov	r0, r3
 8010624:	f7ff fdb0 	bl	8010188 <ptr_to_mem>
 8010628:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801062a:	693b      	ldr	r3, [r7, #16]
 801062c:	791b      	ldrb	r3, [r3, #4]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d13f      	bne.n	80106b2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010632:	69bb      	ldr	r3, [r7, #24]
 8010634:	881b      	ldrh	r3, [r3, #0]
 8010636:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801063a:	d106      	bne.n	801064a <mem_trim+0xfa>
 801063c:	4b42      	ldr	r3, [pc, #264]	@ (8010748 <mem_trim+0x1f8>)
 801063e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8010642:	4946      	ldr	r1, [pc, #280]	@ (801075c <mem_trim+0x20c>)
 8010644:	4842      	ldr	r0, [pc, #264]	@ (8010750 <mem_trim+0x200>)
 8010646:	f00b f949 	bl	801b8dc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801064a:	693b      	ldr	r3, [r7, #16]
 801064c:	881b      	ldrh	r3, [r3, #0]
 801064e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010650:	8afa      	ldrh	r2, [r7, #22]
 8010652:	8bfb      	ldrh	r3, [r7, #30]
 8010654:	4413      	add	r3, r2
 8010656:	b29b      	uxth	r3, r3
 8010658:	3308      	adds	r3, #8
 801065a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801065c:	4b40      	ldr	r3, [pc, #256]	@ (8010760 <mem_trim+0x210>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	693a      	ldr	r2, [r7, #16]
 8010662:	429a      	cmp	r2, r3
 8010664:	d106      	bne.n	8010674 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8010666:	89fb      	ldrh	r3, [r7, #14]
 8010668:	4618      	mov	r0, r3
 801066a:	f7ff fd8d 	bl	8010188 <ptr_to_mem>
 801066e:	4603      	mov	r3, r0
 8010670:	4a3b      	ldr	r2, [pc, #236]	@ (8010760 <mem_trim+0x210>)
 8010672:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010674:	89fb      	ldrh	r3, [r7, #14]
 8010676:	4618      	mov	r0, r3
 8010678:	f7ff fd86 	bl	8010188 <ptr_to_mem>
 801067c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801067e:	693b      	ldr	r3, [r7, #16]
 8010680:	2200      	movs	r2, #0
 8010682:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	89ba      	ldrh	r2, [r7, #12]
 8010688:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801068a:	693b      	ldr	r3, [r7, #16]
 801068c:	8afa      	ldrh	r2, [r7, #22]
 801068e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010690:	69bb      	ldr	r3, [r7, #24]
 8010692:	89fa      	ldrh	r2, [r7, #14]
 8010694:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	881b      	ldrh	r3, [r3, #0]
 801069a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801069e:	d047      	beq.n	8010730 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80106a0:	693b      	ldr	r3, [r7, #16]
 80106a2:	881b      	ldrh	r3, [r3, #0]
 80106a4:	4618      	mov	r0, r3
 80106a6:	f7ff fd6f 	bl	8010188 <ptr_to_mem>
 80106aa:	4602      	mov	r2, r0
 80106ac:	89fb      	ldrh	r3, [r7, #14]
 80106ae:	8053      	strh	r3, [r2, #2]
 80106b0:	e03e      	b.n	8010730 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80106b2:	8bfb      	ldrh	r3, [r7, #30]
 80106b4:	f103 0214 	add.w	r2, r3, #20
 80106b8:	8abb      	ldrh	r3, [r7, #20]
 80106ba:	429a      	cmp	r2, r3
 80106bc:	d838      	bhi.n	8010730 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80106be:	8afa      	ldrh	r2, [r7, #22]
 80106c0:	8bfb      	ldrh	r3, [r7, #30]
 80106c2:	4413      	add	r3, r2
 80106c4:	b29b      	uxth	r3, r3
 80106c6:	3308      	adds	r3, #8
 80106c8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80106ca:	69bb      	ldr	r3, [r7, #24]
 80106cc:	881b      	ldrh	r3, [r3, #0]
 80106ce:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80106d2:	d106      	bne.n	80106e2 <mem_trim+0x192>
 80106d4:	4b1c      	ldr	r3, [pc, #112]	@ (8010748 <mem_trim+0x1f8>)
 80106d6:	f240 3216 	movw	r2, #790	@ 0x316
 80106da:	4920      	ldr	r1, [pc, #128]	@ (801075c <mem_trim+0x20c>)
 80106dc:	481c      	ldr	r0, [pc, #112]	@ (8010750 <mem_trim+0x200>)
 80106de:	f00b f8fd 	bl	801b8dc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80106e2:	89fb      	ldrh	r3, [r7, #14]
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7ff fd4f 	bl	8010188 <ptr_to_mem>
 80106ea:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80106ec:	4b1c      	ldr	r3, [pc, #112]	@ (8010760 <mem_trim+0x210>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	693a      	ldr	r2, [r7, #16]
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d202      	bcs.n	80106fc <mem_trim+0x1ac>
      lfree = mem2;
 80106f6:	4a1a      	ldr	r2, [pc, #104]	@ (8010760 <mem_trim+0x210>)
 80106f8:	693b      	ldr	r3, [r7, #16]
 80106fa:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	2200      	movs	r2, #0
 8010700:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010702:	69bb      	ldr	r3, [r7, #24]
 8010704:	881a      	ldrh	r2, [r3, #0]
 8010706:	693b      	ldr	r3, [r7, #16]
 8010708:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801070a:	693b      	ldr	r3, [r7, #16]
 801070c:	8afa      	ldrh	r2, [r7, #22]
 801070e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010710:	69bb      	ldr	r3, [r7, #24]
 8010712:	89fa      	ldrh	r2, [r7, #14]
 8010714:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010716:	693b      	ldr	r3, [r7, #16]
 8010718:	881b      	ldrh	r3, [r3, #0]
 801071a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801071e:	d007      	beq.n	8010730 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	881b      	ldrh	r3, [r3, #0]
 8010724:	4618      	mov	r0, r3
 8010726:	f7ff fd2f 	bl	8010188 <ptr_to_mem>
 801072a:	4602      	mov	r2, r0
 801072c:	89fb      	ldrh	r3, [r7, #14]
 801072e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010730:	4809      	ldr	r0, [pc, #36]	@ (8010758 <mem_trim+0x208>)
 8010732:	f00a fa68 	bl	801ac06 <sys_mutex_unlock>
  return rmem;
 8010736:	687b      	ldr	r3, [r7, #4]
}
 8010738:	4618      	mov	r0, r3
 801073a:	3720      	adds	r7, #32
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}
 8010740:	200097c8 	.word	0x200097c8
 8010744:	200097cc 	.word	0x200097cc
 8010748:	0801e460 	.word	0x0801e460
 801074c:	0801e5ec 	.word	0x0801e5ec
 8010750:	0801e4a8 	.word	0x0801e4a8
 8010754:	0801e604 	.word	0x0801e604
 8010758:	200097d0 	.word	0x200097d0
 801075c:	0801e624 	.word	0x0801e624
 8010760:	200097d4 	.word	0x200097d4

08010764 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b088      	sub	sp, #32
 8010768:	af00      	add	r7, sp, #0
 801076a:	4603      	mov	r3, r0
 801076c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801076e:	88fb      	ldrh	r3, [r7, #6]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d101      	bne.n	8010778 <mem_malloc+0x14>
    return NULL;
 8010774:	2300      	movs	r3, #0
 8010776:	e0e2      	b.n	801093e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010778:	88fb      	ldrh	r3, [r7, #6]
 801077a:	3303      	adds	r3, #3
 801077c:	b29b      	uxth	r3, r3
 801077e:	f023 0303 	bic.w	r3, r3, #3
 8010782:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010784:	8bbb      	ldrh	r3, [r7, #28]
 8010786:	2b0b      	cmp	r3, #11
 8010788:	d801      	bhi.n	801078e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801078a:	230c      	movs	r3, #12
 801078c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801078e:	8bbb      	ldrh	r3, [r7, #28]
 8010790:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010794:	d803      	bhi.n	801079e <mem_malloc+0x3a>
 8010796:	8bba      	ldrh	r2, [r7, #28]
 8010798:	88fb      	ldrh	r3, [r7, #6]
 801079a:	429a      	cmp	r2, r3
 801079c:	d201      	bcs.n	80107a2 <mem_malloc+0x3e>
    return NULL;
 801079e:	2300      	movs	r3, #0
 80107a0:	e0cd      	b.n	801093e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80107a2:	4869      	ldr	r0, [pc, #420]	@ (8010948 <mem_malloc+0x1e4>)
 80107a4:	f00a fa20 	bl	801abe8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80107a8:	4b68      	ldr	r3, [pc, #416]	@ (801094c <mem_malloc+0x1e8>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7ff fcfd 	bl	80101ac <mem_to_ptr>
 80107b2:	4603      	mov	r3, r0
 80107b4:	83fb      	strh	r3, [r7, #30]
 80107b6:	e0b7      	b.n	8010928 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80107b8:	8bfb      	ldrh	r3, [r7, #30]
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7ff fce4 	bl	8010188 <ptr_to_mem>
 80107c0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80107c2:	697b      	ldr	r3, [r7, #20]
 80107c4:	791b      	ldrb	r3, [r3, #4]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	f040 80a7 	bne.w	801091a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	881b      	ldrh	r3, [r3, #0]
 80107d0:	461a      	mov	r2, r3
 80107d2:	8bfb      	ldrh	r3, [r7, #30]
 80107d4:	1ad3      	subs	r3, r2, r3
 80107d6:	f1a3 0208 	sub.w	r2, r3, #8
 80107da:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80107dc:	429a      	cmp	r2, r3
 80107de:	f0c0 809c 	bcc.w	801091a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	881b      	ldrh	r3, [r3, #0]
 80107e6:	461a      	mov	r2, r3
 80107e8:	8bfb      	ldrh	r3, [r7, #30]
 80107ea:	1ad3      	subs	r3, r2, r3
 80107ec:	f1a3 0208 	sub.w	r2, r3, #8
 80107f0:	8bbb      	ldrh	r3, [r7, #28]
 80107f2:	3314      	adds	r3, #20
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d333      	bcc.n	8010860 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80107f8:	8bfa      	ldrh	r2, [r7, #30]
 80107fa:	8bbb      	ldrh	r3, [r7, #28]
 80107fc:	4413      	add	r3, r2
 80107fe:	b29b      	uxth	r3, r3
 8010800:	3308      	adds	r3, #8
 8010802:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010804:	8a7b      	ldrh	r3, [r7, #18]
 8010806:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801080a:	d106      	bne.n	801081a <mem_malloc+0xb6>
 801080c:	4b50      	ldr	r3, [pc, #320]	@ (8010950 <mem_malloc+0x1ec>)
 801080e:	f240 3287 	movw	r2, #903	@ 0x387
 8010812:	4950      	ldr	r1, [pc, #320]	@ (8010954 <mem_malloc+0x1f0>)
 8010814:	4850      	ldr	r0, [pc, #320]	@ (8010958 <mem_malloc+0x1f4>)
 8010816:	f00b f861 	bl	801b8dc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801081a:	8a7b      	ldrh	r3, [r7, #18]
 801081c:	4618      	mov	r0, r3
 801081e:	f7ff fcb3 	bl	8010188 <ptr_to_mem>
 8010822:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2200      	movs	r2, #0
 8010828:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	881a      	ldrh	r2, [r3, #0]
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	8bfa      	ldrh	r2, [r7, #30]
 8010836:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	8a7a      	ldrh	r2, [r7, #18]
 801083c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	2201      	movs	r2, #1
 8010842:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	881b      	ldrh	r3, [r3, #0]
 8010848:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801084c:	d00b      	beq.n	8010866 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	881b      	ldrh	r3, [r3, #0]
 8010852:	4618      	mov	r0, r3
 8010854:	f7ff fc98 	bl	8010188 <ptr_to_mem>
 8010858:	4602      	mov	r2, r0
 801085a:	8a7b      	ldrh	r3, [r7, #18]
 801085c:	8053      	strh	r3, [r2, #2]
 801085e:	e002      	b.n	8010866 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	2201      	movs	r2, #1
 8010864:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010866:	4b39      	ldr	r3, [pc, #228]	@ (801094c <mem_malloc+0x1e8>)
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	697a      	ldr	r2, [r7, #20]
 801086c:	429a      	cmp	r2, r3
 801086e:	d127      	bne.n	80108c0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8010870:	4b36      	ldr	r3, [pc, #216]	@ (801094c <mem_malloc+0x1e8>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010876:	e005      	b.n	8010884 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010878:	69bb      	ldr	r3, [r7, #24]
 801087a:	881b      	ldrh	r3, [r3, #0]
 801087c:	4618      	mov	r0, r3
 801087e:	f7ff fc83 	bl	8010188 <ptr_to_mem>
 8010882:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010884:	69bb      	ldr	r3, [r7, #24]
 8010886:	791b      	ldrb	r3, [r3, #4]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d004      	beq.n	8010896 <mem_malloc+0x132>
 801088c:	4b33      	ldr	r3, [pc, #204]	@ (801095c <mem_malloc+0x1f8>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	69ba      	ldr	r2, [r7, #24]
 8010892:	429a      	cmp	r2, r3
 8010894:	d1f0      	bne.n	8010878 <mem_malloc+0x114>
          }
          lfree = cur;
 8010896:	4a2d      	ldr	r2, [pc, #180]	@ (801094c <mem_malloc+0x1e8>)
 8010898:	69bb      	ldr	r3, [r7, #24]
 801089a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801089c:	4b2b      	ldr	r3, [pc, #172]	@ (801094c <mem_malloc+0x1e8>)
 801089e:	681a      	ldr	r2, [r3, #0]
 80108a0:	4b2e      	ldr	r3, [pc, #184]	@ (801095c <mem_malloc+0x1f8>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d00b      	beq.n	80108c0 <mem_malloc+0x15c>
 80108a8:	4b28      	ldr	r3, [pc, #160]	@ (801094c <mem_malloc+0x1e8>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	791b      	ldrb	r3, [r3, #4]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d006      	beq.n	80108c0 <mem_malloc+0x15c>
 80108b2:	4b27      	ldr	r3, [pc, #156]	@ (8010950 <mem_malloc+0x1ec>)
 80108b4:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80108b8:	4929      	ldr	r1, [pc, #164]	@ (8010960 <mem_malloc+0x1fc>)
 80108ba:	4827      	ldr	r0, [pc, #156]	@ (8010958 <mem_malloc+0x1f4>)
 80108bc:	f00b f80e 	bl	801b8dc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80108c0:	4821      	ldr	r0, [pc, #132]	@ (8010948 <mem_malloc+0x1e4>)
 80108c2:	f00a f9a0 	bl	801ac06 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80108c6:	8bba      	ldrh	r2, [r7, #28]
 80108c8:	697b      	ldr	r3, [r7, #20]
 80108ca:	4413      	add	r3, r2
 80108cc:	3308      	adds	r3, #8
 80108ce:	4a23      	ldr	r2, [pc, #140]	@ (801095c <mem_malloc+0x1f8>)
 80108d0:	6812      	ldr	r2, [r2, #0]
 80108d2:	4293      	cmp	r3, r2
 80108d4:	d906      	bls.n	80108e4 <mem_malloc+0x180>
 80108d6:	4b1e      	ldr	r3, [pc, #120]	@ (8010950 <mem_malloc+0x1ec>)
 80108d8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80108dc:	4921      	ldr	r1, [pc, #132]	@ (8010964 <mem_malloc+0x200>)
 80108de:	481e      	ldr	r0, [pc, #120]	@ (8010958 <mem_malloc+0x1f4>)
 80108e0:	f00a fffc 	bl	801b8dc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	f003 0303 	and.w	r3, r3, #3
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d006      	beq.n	80108fc <mem_malloc+0x198>
 80108ee:	4b18      	ldr	r3, [pc, #96]	@ (8010950 <mem_malloc+0x1ec>)
 80108f0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80108f4:	491c      	ldr	r1, [pc, #112]	@ (8010968 <mem_malloc+0x204>)
 80108f6:	4818      	ldr	r0, [pc, #96]	@ (8010958 <mem_malloc+0x1f4>)
 80108f8:	f00a fff0 	bl	801b8dc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	f003 0303 	and.w	r3, r3, #3
 8010902:	2b00      	cmp	r3, #0
 8010904:	d006      	beq.n	8010914 <mem_malloc+0x1b0>
 8010906:	4b12      	ldr	r3, [pc, #72]	@ (8010950 <mem_malloc+0x1ec>)
 8010908:	f240 32bd 	movw	r2, #957	@ 0x3bd
 801090c:	4917      	ldr	r1, [pc, #92]	@ (801096c <mem_malloc+0x208>)
 801090e:	4812      	ldr	r0, [pc, #72]	@ (8010958 <mem_malloc+0x1f4>)
 8010910:	f00a ffe4 	bl	801b8dc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010914:	697b      	ldr	r3, [r7, #20]
 8010916:	3308      	adds	r3, #8
 8010918:	e011      	b.n	801093e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801091a:	8bfb      	ldrh	r3, [r7, #30]
 801091c:	4618      	mov	r0, r3
 801091e:	f7ff fc33 	bl	8010188 <ptr_to_mem>
 8010922:	4603      	mov	r3, r0
 8010924:	881b      	ldrh	r3, [r3, #0]
 8010926:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010928:	8bfa      	ldrh	r2, [r7, #30]
 801092a:	8bbb      	ldrh	r3, [r7, #28]
 801092c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8010930:	429a      	cmp	r2, r3
 8010932:	f4ff af41 	bcc.w	80107b8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8010936:	4804      	ldr	r0, [pc, #16]	@ (8010948 <mem_malloc+0x1e4>)
 8010938:	f00a f965 	bl	801ac06 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801093c:	2300      	movs	r3, #0
}
 801093e:	4618      	mov	r0, r3
 8010940:	3720      	adds	r7, #32
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}
 8010946:	bf00      	nop
 8010948:	200097d0 	.word	0x200097d0
 801094c:	200097d4 	.word	0x200097d4
 8010950:	0801e460 	.word	0x0801e460
 8010954:	0801e624 	.word	0x0801e624
 8010958:	0801e4a8 	.word	0x0801e4a8
 801095c:	200097cc 	.word	0x200097cc
 8010960:	0801e638 	.word	0x0801e638
 8010964:	0801e654 	.word	0x0801e654
 8010968:	0801e684 	.word	0x0801e684
 801096c:	0801e6b4 	.word	0x0801e6b4

08010970 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010970:	b480      	push	{r7}
 8010972:	b085      	sub	sp, #20
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	689b      	ldr	r3, [r3, #8]
 801097c:	2200      	movs	r2, #0
 801097e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	685b      	ldr	r3, [r3, #4]
 8010984:	3303      	adds	r3, #3
 8010986:	f023 0303 	bic.w	r3, r3, #3
 801098a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801098c:	2300      	movs	r3, #0
 801098e:	60fb      	str	r3, [r7, #12]
 8010990:	e011      	b.n	80109b6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	689b      	ldr	r3, [r3, #8]
 8010996:	681a      	ldr	r2, [r3, #0]
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	689b      	ldr	r3, [r3, #8]
 80109a0:	68ba      	ldr	r2, [r7, #8]
 80109a2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	881b      	ldrh	r3, [r3, #0]
 80109a8:	461a      	mov	r2, r3
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	4413      	add	r3, r2
 80109ae:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	3301      	adds	r3, #1
 80109b4:	60fb      	str	r3, [r7, #12]
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	885b      	ldrh	r3, [r3, #2]
 80109ba:	461a      	mov	r2, r3
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	4293      	cmp	r3, r2
 80109c0:	dbe7      	blt.n	8010992 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80109c2:	bf00      	nop
 80109c4:	bf00      	nop
 80109c6:	3714      	adds	r7, #20
 80109c8:	46bd      	mov	sp, r7
 80109ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ce:	4770      	bx	lr

080109d0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b082      	sub	sp, #8
 80109d4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80109d6:	2300      	movs	r3, #0
 80109d8:	80fb      	strh	r3, [r7, #6]
 80109da:	e009      	b.n	80109f0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80109dc:	88fb      	ldrh	r3, [r7, #6]
 80109de:	4a08      	ldr	r2, [pc, #32]	@ (8010a00 <memp_init+0x30>)
 80109e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109e4:	4618      	mov	r0, r3
 80109e6:	f7ff ffc3 	bl	8010970 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80109ea:	88fb      	ldrh	r3, [r7, #6]
 80109ec:	3301      	adds	r3, #1
 80109ee:	80fb      	strh	r3, [r7, #6]
 80109f0:	88fb      	ldrh	r3, [r7, #6]
 80109f2:	2b0c      	cmp	r3, #12
 80109f4:	d9f2      	bls.n	80109dc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80109f6:	bf00      	nop
 80109f8:	bf00      	nop
 80109fa:	3708      	adds	r7, #8
 80109fc:	46bd      	mov	sp, r7
 80109fe:	bd80      	pop	{r7, pc}
 8010a00:	08020f10 	.word	0x08020f10

08010a04 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b084      	sub	sp, #16
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010a0c:	f00a f92e 	bl	801ac6c <sys_arch_protect>
 8010a10:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	689b      	ldr	r3, [r3, #8]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010a1a:	68bb      	ldr	r3, [r7, #8]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d015      	beq.n	8010a4c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	689b      	ldr	r3, [r3, #8]
 8010a24:	68ba      	ldr	r2, [r7, #8]
 8010a26:	6812      	ldr	r2, [r2, #0]
 8010a28:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010a2a:	68bb      	ldr	r3, [r7, #8]
 8010a2c:	f003 0303 	and.w	r3, r3, #3
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d006      	beq.n	8010a42 <do_memp_malloc_pool+0x3e>
 8010a34:	4b09      	ldr	r3, [pc, #36]	@ (8010a5c <do_memp_malloc_pool+0x58>)
 8010a36:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8010a3a:	4909      	ldr	r1, [pc, #36]	@ (8010a60 <do_memp_malloc_pool+0x5c>)
 8010a3c:	4809      	ldr	r0, [pc, #36]	@ (8010a64 <do_memp_malloc_pool+0x60>)
 8010a3e:	f00a ff4d 	bl	801b8dc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010a42:	68f8      	ldr	r0, [r7, #12]
 8010a44:	f00a f920 	bl	801ac88 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	e003      	b.n	8010a54 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010a4c:	68f8      	ldr	r0, [r7, #12]
 8010a4e:	f00a f91b 	bl	801ac88 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8010a52:	2300      	movs	r3, #0
}
 8010a54:	4618      	mov	r0, r3
 8010a56:	3710      	adds	r7, #16
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}
 8010a5c:	0801e6d8 	.word	0x0801e6d8
 8010a60:	0801e708 	.word	0x0801e708
 8010a64:	0801e72c 	.word	0x0801e72c

08010a68 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b082      	sub	sp, #8
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d106      	bne.n	8010a84 <memp_malloc_pool+0x1c>
 8010a76:	4b0a      	ldr	r3, [pc, #40]	@ (8010aa0 <memp_malloc_pool+0x38>)
 8010a78:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8010a7c:	4909      	ldr	r1, [pc, #36]	@ (8010aa4 <memp_malloc_pool+0x3c>)
 8010a7e:	480a      	ldr	r0, [pc, #40]	@ (8010aa8 <memp_malloc_pool+0x40>)
 8010a80:	f00a ff2c 	bl	801b8dc <iprintf>
  if (desc == NULL) {
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d101      	bne.n	8010a8e <memp_malloc_pool+0x26>
    return NULL;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	e003      	b.n	8010a96 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f7ff ffb8 	bl	8010a04 <do_memp_malloc_pool>
 8010a94:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8010a96:	4618      	mov	r0, r3
 8010a98:	3708      	adds	r7, #8
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	bd80      	pop	{r7, pc}
 8010a9e:	bf00      	nop
 8010aa0:	0801e6d8 	.word	0x0801e6d8
 8010aa4:	0801e754 	.word	0x0801e754
 8010aa8:	0801e72c 	.word	0x0801e72c

08010aac <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b084      	sub	sp, #16
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010ab6:	79fb      	ldrb	r3, [r7, #7]
 8010ab8:	2b0c      	cmp	r3, #12
 8010aba:	d908      	bls.n	8010ace <memp_malloc+0x22>
 8010abc:	4b0a      	ldr	r3, [pc, #40]	@ (8010ae8 <memp_malloc+0x3c>)
 8010abe:	f240 1257 	movw	r2, #343	@ 0x157
 8010ac2:	490a      	ldr	r1, [pc, #40]	@ (8010aec <memp_malloc+0x40>)
 8010ac4:	480a      	ldr	r0, [pc, #40]	@ (8010af0 <memp_malloc+0x44>)
 8010ac6:	f00a ff09 	bl	801b8dc <iprintf>
 8010aca:	2300      	movs	r3, #0
 8010acc:	e008      	b.n	8010ae0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010ace:	79fb      	ldrb	r3, [r7, #7]
 8010ad0:	4a08      	ldr	r2, [pc, #32]	@ (8010af4 <memp_malloc+0x48>)
 8010ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7ff ff94 	bl	8010a04 <do_memp_malloc_pool>
 8010adc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010ade:	68fb      	ldr	r3, [r7, #12]
}
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	3710      	adds	r7, #16
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd80      	pop	{r7, pc}
 8010ae8:	0801e6d8 	.word	0x0801e6d8
 8010aec:	0801e768 	.word	0x0801e768
 8010af0:	0801e72c 	.word	0x0801e72c
 8010af4:	08020f10 	.word	0x08020f10

08010af8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b084      	sub	sp, #16
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	f003 0303 	and.w	r3, r3, #3
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d006      	beq.n	8010b1a <do_memp_free_pool+0x22>
 8010b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8010b44 <do_memp_free_pool+0x4c>)
 8010b0e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8010b12:	490d      	ldr	r1, [pc, #52]	@ (8010b48 <do_memp_free_pool+0x50>)
 8010b14:	480d      	ldr	r0, [pc, #52]	@ (8010b4c <do_memp_free_pool+0x54>)
 8010b16:	f00a fee1 	bl	801b8dc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8010b1e:	f00a f8a5 	bl	801ac6c <sys_arch_protect>
 8010b22:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	689b      	ldr	r3, [r3, #8]
 8010b28:	681a      	ldr	r2, [r3, #0]
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	689b      	ldr	r3, [r3, #8]
 8010b32:	68fa      	ldr	r2, [r7, #12]
 8010b34:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8010b36:	68b8      	ldr	r0, [r7, #8]
 8010b38:	f00a f8a6 	bl	801ac88 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8010b3c:	bf00      	nop
 8010b3e:	3710      	adds	r7, #16
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}
 8010b44:	0801e6d8 	.word	0x0801e6d8
 8010b48:	0801e788 	.word	0x0801e788
 8010b4c:	0801e72c 	.word	0x0801e72c

08010b50 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b082      	sub	sp, #8
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
 8010b58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d106      	bne.n	8010b6e <memp_free_pool+0x1e>
 8010b60:	4b0a      	ldr	r3, [pc, #40]	@ (8010b8c <memp_free_pool+0x3c>)
 8010b62:	f240 1295 	movw	r2, #405	@ 0x195
 8010b66:	490a      	ldr	r1, [pc, #40]	@ (8010b90 <memp_free_pool+0x40>)
 8010b68:	480a      	ldr	r0, [pc, #40]	@ (8010b94 <memp_free_pool+0x44>)
 8010b6a:	f00a feb7 	bl	801b8dc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d007      	beq.n	8010b84 <memp_free_pool+0x34>
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d004      	beq.n	8010b84 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8010b7a:	6839      	ldr	r1, [r7, #0]
 8010b7c:	6878      	ldr	r0, [r7, #4]
 8010b7e:	f7ff ffbb 	bl	8010af8 <do_memp_free_pool>
 8010b82:	e000      	b.n	8010b86 <memp_free_pool+0x36>
    return;
 8010b84:	bf00      	nop
}
 8010b86:	3708      	adds	r7, #8
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}
 8010b8c:	0801e6d8 	.word	0x0801e6d8
 8010b90:	0801e754 	.word	0x0801e754
 8010b94:	0801e72c 	.word	0x0801e72c

08010b98 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b082      	sub	sp, #8
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	6039      	str	r1, [r7, #0]
 8010ba2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010ba4:	79fb      	ldrb	r3, [r7, #7]
 8010ba6:	2b0c      	cmp	r3, #12
 8010ba8:	d907      	bls.n	8010bba <memp_free+0x22>
 8010baa:	4b0c      	ldr	r3, [pc, #48]	@ (8010bdc <memp_free+0x44>)
 8010bac:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8010bb0:	490b      	ldr	r1, [pc, #44]	@ (8010be0 <memp_free+0x48>)
 8010bb2:	480c      	ldr	r0, [pc, #48]	@ (8010be4 <memp_free+0x4c>)
 8010bb4:	f00a fe92 	bl	801b8dc <iprintf>
 8010bb8:	e00c      	b.n	8010bd4 <memp_free+0x3c>

  if (mem == NULL) {
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d008      	beq.n	8010bd2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010bc0:	79fb      	ldrb	r3, [r7, #7]
 8010bc2:	4a09      	ldr	r2, [pc, #36]	@ (8010be8 <memp_free+0x50>)
 8010bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010bc8:	6839      	ldr	r1, [r7, #0]
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f7ff ff94 	bl	8010af8 <do_memp_free_pool>
 8010bd0:	e000      	b.n	8010bd4 <memp_free+0x3c>
    return;
 8010bd2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010bd4:	3708      	adds	r7, #8
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}
 8010bda:	bf00      	nop
 8010bdc:	0801e6d8 	.word	0x0801e6d8
 8010be0:	0801e7a8 	.word	0x0801e7a8
 8010be4:	0801e72c 	.word	0x0801e72c
 8010be8:	08020f10 	.word	0x08020f10

08010bec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010bec:	b480      	push	{r7}
 8010bee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010bf0:	bf00      	nop
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf8:	4770      	bx	lr
	...

08010bfc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b086      	sub	sp, #24
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	60f8      	str	r0, [r7, #12]
 8010c04:	60b9      	str	r1, [r7, #8]
 8010c06:	607a      	str	r2, [r7, #4]
 8010c08:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d108      	bne.n	8010c22 <netif_add+0x26>
 8010c10:	4b57      	ldr	r3, [pc, #348]	@ (8010d70 <netif_add+0x174>)
 8010c12:	f240 1227 	movw	r2, #295	@ 0x127
 8010c16:	4957      	ldr	r1, [pc, #348]	@ (8010d74 <netif_add+0x178>)
 8010c18:	4857      	ldr	r0, [pc, #348]	@ (8010d78 <netif_add+0x17c>)
 8010c1a:	f00a fe5f 	bl	801b8dc <iprintf>
 8010c1e:	2300      	movs	r3, #0
 8010c20:	e0a2      	b.n	8010d68 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8010c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d108      	bne.n	8010c3a <netif_add+0x3e>
 8010c28:	4b51      	ldr	r3, [pc, #324]	@ (8010d70 <netif_add+0x174>)
 8010c2a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8010c2e:	4953      	ldr	r1, [pc, #332]	@ (8010d7c <netif_add+0x180>)
 8010c30:	4851      	ldr	r0, [pc, #324]	@ (8010d78 <netif_add+0x17c>)
 8010c32:	f00a fe53 	bl	801b8dc <iprintf>
 8010c36:	2300      	movs	r3, #0
 8010c38:	e096      	b.n	8010d68 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d101      	bne.n	8010c44 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010c40:	4b4f      	ldr	r3, [pc, #316]	@ (8010d80 <netif_add+0x184>)
 8010c42:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d101      	bne.n	8010c4e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8010c4a:	4b4d      	ldr	r3, [pc, #308]	@ (8010d80 <netif_add+0x184>)
 8010c4c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d101      	bne.n	8010c58 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010c54:	4b4a      	ldr	r3, [pc, #296]	@ (8010d80 <netif_add+0x184>)
 8010c56:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	2200      	movs	r2, #0
 8010c62:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	2200      	movs	r2, #0
 8010c68:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	4a45      	ldr	r2, [pc, #276]	@ (8010d84 <netif_add+0x188>)
 8010c6e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	2200      	movs	r2, #0
 8010c74:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	2200      	movs	r2, #0
 8010c7a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	2200      	movs	r2, #0
 8010c82:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	6a3a      	ldr	r2, [r7, #32]
 8010c88:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010c8a:	4b3f      	ldr	r3, [pc, #252]	@ (8010d88 <netif_add+0x18c>)
 8010c8c:	781a      	ldrb	r2, [r3, #0]
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010c98:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	687a      	ldr	r2, [r7, #4]
 8010c9e:	68b9      	ldr	r1, [r7, #8]
 8010ca0:	68f8      	ldr	r0, [r7, #12]
 8010ca2:	f000 f913 	bl	8010ecc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ca8:	68f8      	ldr	r0, [r7, #12]
 8010caa:	4798      	blx	r3
 8010cac:	4603      	mov	r3, r0
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d001      	beq.n	8010cb6 <netif_add+0xba>
    return NULL;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	e058      	b.n	8010d68 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010cbc:	2bff      	cmp	r3, #255	@ 0xff
 8010cbe:	d103      	bne.n	8010cc8 <netif_add+0xcc>
        netif->num = 0;
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8010d8c <netif_add+0x190>)
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	617b      	str	r3, [r7, #20]
 8010cd2:	e02b      	b.n	8010d2c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010cd4:	697a      	ldr	r2, [r7, #20]
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d106      	bne.n	8010cea <netif_add+0xee>
 8010cdc:	4b24      	ldr	r3, [pc, #144]	@ (8010d70 <netif_add+0x174>)
 8010cde:	f240 128b 	movw	r2, #395	@ 0x18b
 8010ce2:	492b      	ldr	r1, [pc, #172]	@ (8010d90 <netif_add+0x194>)
 8010ce4:	4824      	ldr	r0, [pc, #144]	@ (8010d78 <netif_add+0x17c>)
 8010ce6:	f00a fdf9 	bl	801b8dc <iprintf>
        num_netifs++;
 8010cea:	693b      	ldr	r3, [r7, #16]
 8010cec:	3301      	adds	r3, #1
 8010cee:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	2bff      	cmp	r3, #255	@ 0xff
 8010cf4:	dd06      	ble.n	8010d04 <netif_add+0x108>
 8010cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8010d70 <netif_add+0x174>)
 8010cf8:	f240 128d 	movw	r2, #397	@ 0x18d
 8010cfc:	4925      	ldr	r1, [pc, #148]	@ (8010d94 <netif_add+0x198>)
 8010cfe:	481e      	ldr	r0, [pc, #120]	@ (8010d78 <netif_add+0x17c>)
 8010d00:	f00a fdec 	bl	801b8dc <iprintf>
        if (netif2->num == netif->num) {
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d108      	bne.n	8010d26 <netif_add+0x12a>
          netif->num++;
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010d1a:	3301      	adds	r3, #1
 8010d1c:	b2da      	uxtb	r2, r3
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8010d24:	e005      	b.n	8010d32 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010d26:	697b      	ldr	r3, [r7, #20]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	617b      	str	r3, [r7, #20]
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d1d0      	bne.n	8010cd4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8010d32:	697b      	ldr	r3, [r7, #20]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d1be      	bne.n	8010cb6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8010d40:	d103      	bne.n	8010d4a <netif_add+0x14e>
    netif_num = 0;
 8010d42:	4b11      	ldr	r3, [pc, #68]	@ (8010d88 <netif_add+0x18c>)
 8010d44:	2200      	movs	r2, #0
 8010d46:	701a      	strb	r2, [r3, #0]
 8010d48:	e006      	b.n	8010d58 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010d50:	3301      	adds	r3, #1
 8010d52:	b2da      	uxtb	r2, r3
 8010d54:	4b0c      	ldr	r3, [pc, #48]	@ (8010d88 <netif_add+0x18c>)
 8010d56:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010d58:	4b0c      	ldr	r3, [pc, #48]	@ (8010d8c <netif_add+0x190>)
 8010d5a:	681a      	ldr	r2, [r3, #0]
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010d60:	4a0a      	ldr	r2, [pc, #40]	@ (8010d8c <netif_add+0x190>)
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010d66:	68fb      	ldr	r3, [r7, #12]
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	3718      	adds	r7, #24
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}
 8010d70:	0801e7c4 	.word	0x0801e7c4
 8010d74:	0801e858 	.word	0x0801e858
 8010d78:	0801e814 	.word	0x0801e814
 8010d7c:	0801e874 	.word	0x0801e874
 8010d80:	08020f84 	.word	0x08020f84
 8010d84:	08011143 	.word	0x08011143
 8010d88:	2000c8ac 	.word	0x2000c8ac
 8010d8c:	2000c8a4 	.word	0x2000c8a4
 8010d90:	0801e898 	.word	0x0801e898
 8010d94:	0801e8ac 	.word	0x0801e8ac

08010d98 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b082      	sub	sp, #8
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
 8010da0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010da2:	6839      	ldr	r1, [r7, #0]
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f002 fdab 	bl	8013900 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010daa:	6839      	ldr	r1, [r7, #0]
 8010dac:	6878      	ldr	r0, [r7, #4]
 8010dae:	f007 fb11 	bl	80183d4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010db2:	bf00      	nop
 8010db4:	3708      	adds	r7, #8
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd80      	pop	{r7, pc}
	...

08010dbc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b086      	sub	sp, #24
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	60f8      	str	r0, [r7, #12]
 8010dc4:	60b9      	str	r1, [r7, #8]
 8010dc6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d106      	bne.n	8010ddc <netif_do_set_ipaddr+0x20>
 8010dce:	4b1d      	ldr	r3, [pc, #116]	@ (8010e44 <netif_do_set_ipaddr+0x88>)
 8010dd0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8010dd4:	491c      	ldr	r1, [pc, #112]	@ (8010e48 <netif_do_set_ipaddr+0x8c>)
 8010dd6:	481d      	ldr	r0, [pc, #116]	@ (8010e4c <netif_do_set_ipaddr+0x90>)
 8010dd8:	f00a fd80 	bl	801b8dc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d106      	bne.n	8010df0 <netif_do_set_ipaddr+0x34>
 8010de2:	4b18      	ldr	r3, [pc, #96]	@ (8010e44 <netif_do_set_ipaddr+0x88>)
 8010de4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8010de8:	4917      	ldr	r1, [pc, #92]	@ (8010e48 <netif_do_set_ipaddr+0x8c>)
 8010dea:	4818      	ldr	r0, [pc, #96]	@ (8010e4c <netif_do_set_ipaddr+0x90>)
 8010dec:	f00a fd76 	bl	801b8dc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	681a      	ldr	r2, [r3, #0]
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	3304      	adds	r3, #4
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d01c      	beq.n	8010e38 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	3304      	adds	r3, #4
 8010e08:	681a      	ldr	r2, [r3, #0]
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010e0e:	f107 0314 	add.w	r3, r7, #20
 8010e12:	4619      	mov	r1, r3
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f7ff ffbf 	bl	8010d98 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d002      	beq.n	8010e26 <netif_do_set_ipaddr+0x6a>
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	e000      	b.n	8010e28 <netif_do_set_ipaddr+0x6c>
 8010e26:	2300      	movs	r3, #0
 8010e28:	68fa      	ldr	r2, [r7, #12]
 8010e2a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010e2c:	2101      	movs	r1, #1
 8010e2e:	68f8      	ldr	r0, [r7, #12]
 8010e30:	f000 f8d2 	bl	8010fd8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010e34:	2301      	movs	r3, #1
 8010e36:	e000      	b.n	8010e3a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010e38:	2300      	movs	r3, #0
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	3718      	adds	r7, #24
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	bd80      	pop	{r7, pc}
 8010e42:	bf00      	nop
 8010e44:	0801e7c4 	.word	0x0801e7c4
 8010e48:	0801e8dc 	.word	0x0801e8dc
 8010e4c:	0801e814 	.word	0x0801e814

08010e50 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010e50:	b480      	push	{r7}
 8010e52:	b085      	sub	sp, #20
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	60f8      	str	r0, [r7, #12]
 8010e58:	60b9      	str	r1, [r7, #8]
 8010e5a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	681a      	ldr	r2, [r3, #0]
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	3308      	adds	r3, #8
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d00a      	beq.n	8010e80 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d002      	beq.n	8010e76 <netif_do_set_netmask+0x26>
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	e000      	b.n	8010e78 <netif_do_set_netmask+0x28>
 8010e76:	2300      	movs	r3, #0
 8010e78:	68fa      	ldr	r2, [r7, #12]
 8010e7a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010e7c:	2301      	movs	r3, #1
 8010e7e:	e000      	b.n	8010e82 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010e80:	2300      	movs	r3, #0
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3714      	adds	r7, #20
 8010e86:	46bd      	mov	sp, r7
 8010e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8c:	4770      	bx	lr

08010e8e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010e8e:	b480      	push	{r7}
 8010e90:	b085      	sub	sp, #20
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	60f8      	str	r0, [r7, #12]
 8010e96:	60b9      	str	r1, [r7, #8]
 8010e98:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	681a      	ldr	r2, [r3, #0]
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	330c      	adds	r3, #12
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	429a      	cmp	r2, r3
 8010ea6:	d00a      	beq.n	8010ebe <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d002      	beq.n	8010eb4 <netif_do_set_gw+0x26>
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	e000      	b.n	8010eb6 <netif_do_set_gw+0x28>
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	68fa      	ldr	r2, [r7, #12]
 8010eb8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010eba:	2301      	movs	r3, #1
 8010ebc:	e000      	b.n	8010ec0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010ebe:	2300      	movs	r3, #0
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3714      	adds	r7, #20
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eca:	4770      	bx	lr

08010ecc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b088      	sub	sp, #32
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	60f8      	str	r0, [r7, #12]
 8010ed4:	60b9      	str	r1, [r7, #8]
 8010ed6:	607a      	str	r2, [r7, #4]
 8010ed8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010eda:	2300      	movs	r3, #0
 8010edc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010ede:	2300      	movs	r3, #0
 8010ee0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d101      	bne.n	8010eec <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8010f5c <netif_set_addr+0x90>)
 8010eea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d101      	bne.n	8010ef6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8010f5c <netif_set_addr+0x90>)
 8010ef4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010ef6:	683b      	ldr	r3, [r7, #0]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d101      	bne.n	8010f00 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010efc:	4b17      	ldr	r3, [pc, #92]	@ (8010f5c <netif_set_addr+0x90>)
 8010efe:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d003      	beq.n	8010f0e <netif_set_addr+0x42>
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d101      	bne.n	8010f12 <netif_set_addr+0x46>
 8010f0e:	2301      	movs	r3, #1
 8010f10:	e000      	b.n	8010f14 <netif_set_addr+0x48>
 8010f12:	2300      	movs	r3, #0
 8010f14:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010f16:	697b      	ldr	r3, [r7, #20]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d006      	beq.n	8010f2a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010f1c:	f107 0310 	add.w	r3, r7, #16
 8010f20:	461a      	mov	r2, r3
 8010f22:	68b9      	ldr	r1, [r7, #8]
 8010f24:	68f8      	ldr	r0, [r7, #12]
 8010f26:	f7ff ff49 	bl	8010dbc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010f2a:	69fa      	ldr	r2, [r7, #28]
 8010f2c:	6879      	ldr	r1, [r7, #4]
 8010f2e:	68f8      	ldr	r0, [r7, #12]
 8010f30:	f7ff ff8e 	bl	8010e50 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010f34:	69ba      	ldr	r2, [r7, #24]
 8010f36:	6839      	ldr	r1, [r7, #0]
 8010f38:	68f8      	ldr	r0, [r7, #12]
 8010f3a:	f7ff ffa8 	bl	8010e8e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d106      	bne.n	8010f52 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010f44:	f107 0310 	add.w	r3, r7, #16
 8010f48:	461a      	mov	r2, r3
 8010f4a:	68b9      	ldr	r1, [r7, #8]
 8010f4c:	68f8      	ldr	r0, [r7, #12]
 8010f4e:	f7ff ff35 	bl	8010dbc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010f52:	bf00      	nop
 8010f54:	3720      	adds	r7, #32
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}
 8010f5a:	bf00      	nop
 8010f5c:	08020f84 	.word	0x08020f84

08010f60 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010f60:	b480      	push	{r7}
 8010f62:	b083      	sub	sp, #12
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010f68:	4a04      	ldr	r2, [pc, #16]	@ (8010f7c <netif_set_default+0x1c>)
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010f6e:	bf00      	nop
 8010f70:	370c      	adds	r7, #12
 8010f72:	46bd      	mov	sp, r7
 8010f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f78:	4770      	bx	lr
 8010f7a:	bf00      	nop
 8010f7c:	2000c8a8 	.word	0x2000c8a8

08010f80 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b082      	sub	sp, #8
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d107      	bne.n	8010f9e <netif_set_up+0x1e>
 8010f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8010fcc <netif_set_up+0x4c>)
 8010f90:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8010f94:	490e      	ldr	r1, [pc, #56]	@ (8010fd0 <netif_set_up+0x50>)
 8010f96:	480f      	ldr	r0, [pc, #60]	@ (8010fd4 <netif_set_up+0x54>)
 8010f98:	f00a fca0 	bl	801b8dc <iprintf>
 8010f9c:	e013      	b.n	8010fc6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010fa4:	f003 0301 	and.w	r3, r3, #1
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d10c      	bne.n	8010fc6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010fb2:	f043 0301 	orr.w	r3, r3, #1
 8010fb6:	b2da      	uxtb	r2, r3
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010fbe:	2103      	movs	r1, #3
 8010fc0:	6878      	ldr	r0, [r7, #4]
 8010fc2:	f000 f809 	bl	8010fd8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010fc6:	3708      	adds	r7, #8
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}
 8010fcc:	0801e7c4 	.word	0x0801e7c4
 8010fd0:	0801e94c 	.word	0x0801e94c
 8010fd4:	0801e814 	.word	0x0801e814

08010fd8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
 8010fe0:	460b      	mov	r3, r1
 8010fe2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d106      	bne.n	8010ff8 <netif_issue_reports+0x20>
 8010fea:	4b18      	ldr	r3, [pc, #96]	@ (801104c <netif_issue_reports+0x74>)
 8010fec:	f240 326d 	movw	r2, #877	@ 0x36d
 8010ff0:	4917      	ldr	r1, [pc, #92]	@ (8011050 <netif_issue_reports+0x78>)
 8010ff2:	4818      	ldr	r0, [pc, #96]	@ (8011054 <netif_issue_reports+0x7c>)
 8010ff4:	f00a fc72 	bl	801b8dc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010ffe:	f003 0304 	and.w	r3, r3, #4
 8011002:	2b00      	cmp	r3, #0
 8011004:	d01e      	beq.n	8011044 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801100c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011010:	2b00      	cmp	r3, #0
 8011012:	d017      	beq.n	8011044 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011014:	78fb      	ldrb	r3, [r7, #3]
 8011016:	f003 0301 	and.w	r3, r3, #1
 801101a:	2b00      	cmp	r3, #0
 801101c:	d013      	beq.n	8011046 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	3304      	adds	r3, #4
 8011022:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011024:	2b00      	cmp	r3, #0
 8011026:	d00e      	beq.n	8011046 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801102e:	f003 0308 	and.w	r3, r3, #8
 8011032:	2b00      	cmp	r3, #0
 8011034:	d007      	beq.n	8011046 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	3304      	adds	r3, #4
 801103a:	4619      	mov	r1, r3
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f008 f903 	bl	8019248 <etharp_request>
 8011042:	e000      	b.n	8011046 <netif_issue_reports+0x6e>
    return;
 8011044:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8011046:	3708      	adds	r7, #8
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}
 801104c:	0801e7c4 	.word	0x0801e7c4
 8011050:	0801e968 	.word	0x0801e968
 8011054:	0801e814 	.word	0x0801e814

08011058 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b082      	sub	sp, #8
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d107      	bne.n	8011076 <netif_set_link_up+0x1e>
 8011066:	4b13      	ldr	r3, [pc, #76]	@ (80110b4 <netif_set_link_up+0x5c>)
 8011068:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 801106c:	4912      	ldr	r1, [pc, #72]	@ (80110b8 <netif_set_link_up+0x60>)
 801106e:	4813      	ldr	r0, [pc, #76]	@ (80110bc <netif_set_link_up+0x64>)
 8011070:	f00a fc34 	bl	801b8dc <iprintf>
 8011074:	e01b      	b.n	80110ae <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801107c:	f003 0304 	and.w	r3, r3, #4
 8011080:	2b00      	cmp	r3, #0
 8011082:	d114      	bne.n	80110ae <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801108a:	f043 0304 	orr.w	r3, r3, #4
 801108e:	b2da      	uxtb	r2, r3
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011096:	2103      	movs	r1, #3
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f7ff ff9d 	bl	8010fd8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	69db      	ldr	r3, [r3, #28]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d003      	beq.n	80110ae <netif_set_link_up+0x56>
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	69db      	ldr	r3, [r3, #28]
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80110ae:	3708      	adds	r7, #8
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}
 80110b4:	0801e7c4 	.word	0x0801e7c4
 80110b8:	0801e9ac 	.word	0x0801e9ac
 80110bc:	0801e814 	.word	0x0801e814

080110c0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d107      	bne.n	80110de <netif_set_link_down+0x1e>
 80110ce:	4b11      	ldr	r3, [pc, #68]	@ (8011114 <netif_set_link_down+0x54>)
 80110d0:	f240 4206 	movw	r2, #1030	@ 0x406
 80110d4:	4910      	ldr	r1, [pc, #64]	@ (8011118 <netif_set_link_down+0x58>)
 80110d6:	4811      	ldr	r0, [pc, #68]	@ (801111c <netif_set_link_down+0x5c>)
 80110d8:	f00a fc00 	bl	801b8dc <iprintf>
 80110dc:	e017      	b.n	801110e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80110e4:	f003 0304 	and.w	r3, r3, #4
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d010      	beq.n	801110e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80110f2:	f023 0304 	bic.w	r3, r3, #4
 80110f6:	b2da      	uxtb	r2, r3
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	69db      	ldr	r3, [r3, #28]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d003      	beq.n	801110e <netif_set_link_down+0x4e>
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	69db      	ldr	r3, [r3, #28]
 801110a:	6878      	ldr	r0, [r7, #4]
 801110c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801110e:	3708      	adds	r7, #8
 8011110:	46bd      	mov	sp, r7
 8011112:	bd80      	pop	{r7, pc}
 8011114:	0801e7c4 	.word	0x0801e7c4
 8011118:	0801e9d0 	.word	0x0801e9d0
 801111c:	0801e814 	.word	0x0801e814

08011120 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011120:	b480      	push	{r7}
 8011122:	b083      	sub	sp, #12
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
 8011128:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d002      	beq.n	8011136 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	683a      	ldr	r2, [r7, #0]
 8011134:	61da      	str	r2, [r3, #28]
  }
}
 8011136:	bf00      	nop
 8011138:	370c      	adds	r7, #12
 801113a:	46bd      	mov	sp, r7
 801113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011140:	4770      	bx	lr

08011142 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8011142:	b480      	push	{r7}
 8011144:	b085      	sub	sp, #20
 8011146:	af00      	add	r7, sp, #0
 8011148:	60f8      	str	r0, [r7, #12]
 801114a:	60b9      	str	r1, [r7, #8]
 801114c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801114e:	f06f 030b 	mvn.w	r3, #11
}
 8011152:	4618      	mov	r0, r3
 8011154:	3714      	adds	r7, #20
 8011156:	46bd      	mov	sp, r7
 8011158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115c:	4770      	bx	lr
	...

08011160 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8011160:	b480      	push	{r7}
 8011162:	b085      	sub	sp, #20
 8011164:	af00      	add	r7, sp, #0
 8011166:	4603      	mov	r3, r0
 8011168:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801116a:	79fb      	ldrb	r3, [r7, #7]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d013      	beq.n	8011198 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8011170:	4b0d      	ldr	r3, [pc, #52]	@ (80111a8 <netif_get_by_index+0x48>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	60fb      	str	r3, [r7, #12]
 8011176:	e00c      	b.n	8011192 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801117e:	3301      	adds	r3, #1
 8011180:	b2db      	uxtb	r3, r3
 8011182:	79fa      	ldrb	r2, [r7, #7]
 8011184:	429a      	cmp	r2, r3
 8011186:	d101      	bne.n	801118c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	e006      	b.n	801119a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	60fb      	str	r3, [r7, #12]
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d1ef      	bne.n	8011178 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011198:	2300      	movs	r3, #0
}
 801119a:	4618      	mov	r0, r3
 801119c:	3714      	adds	r7, #20
 801119e:	46bd      	mov	sp, r7
 80111a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a4:	4770      	bx	lr
 80111a6:	bf00      	nop
 80111a8:	2000c8a4 	.word	0x2000c8a4

080111ac <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b082      	sub	sp, #8
 80111b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80111b2:	f009 fd5b 	bl	801ac6c <sys_arch_protect>
 80111b6:	6038      	str	r0, [r7, #0]
 80111b8:	4b0d      	ldr	r3, [pc, #52]	@ (80111f0 <pbuf_free_ooseq+0x44>)
 80111ba:	2200      	movs	r2, #0
 80111bc:	701a      	strb	r2, [r3, #0]
 80111be:	6838      	ldr	r0, [r7, #0]
 80111c0:	f009 fd62 	bl	801ac88 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80111c4:	4b0b      	ldr	r3, [pc, #44]	@ (80111f4 <pbuf_free_ooseq+0x48>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	607b      	str	r3, [r7, #4]
 80111ca:	e00a      	b.n	80111e2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d003      	beq.n	80111dc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f002 fbd1 	bl	801397c <tcp_free_ooseq>
      return;
 80111da:	e005      	b.n	80111e8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	68db      	ldr	r3, [r3, #12]
 80111e0:	607b      	str	r3, [r7, #4]
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d1f1      	bne.n	80111cc <pbuf_free_ooseq+0x20>
    }
  }
}
 80111e8:	3708      	adds	r7, #8
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}
 80111ee:	bf00      	nop
 80111f0:	2000c8ad 	.word	0x2000c8ad
 80111f4:	2000c8bc 	.word	0x2000c8bc

080111f8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b082      	sub	sp, #8
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8011200:	f7ff ffd4 	bl	80111ac <pbuf_free_ooseq>
}
 8011204:	bf00      	nop
 8011206:	3708      	adds	r7, #8
 8011208:	46bd      	mov	sp, r7
 801120a:	bd80      	pop	{r7, pc}

0801120c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b082      	sub	sp, #8
 8011210:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8011212:	f009 fd2b 	bl	801ac6c <sys_arch_protect>
 8011216:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8011218:	4b0f      	ldr	r3, [pc, #60]	@ (8011258 <pbuf_pool_is_empty+0x4c>)
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801121e:	4b0e      	ldr	r3, [pc, #56]	@ (8011258 <pbuf_pool_is_empty+0x4c>)
 8011220:	2201      	movs	r2, #1
 8011222:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	f009 fd2f 	bl	801ac88 <sys_arch_unprotect>

  if (!queued) {
 801122a:	78fb      	ldrb	r3, [r7, #3]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d10f      	bne.n	8011250 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8011230:	2100      	movs	r1, #0
 8011232:	480a      	ldr	r0, [pc, #40]	@ (801125c <pbuf_pool_is_empty+0x50>)
 8011234:	f7fe fed8 	bl	800ffe8 <tcpip_try_callback>
 8011238:	4603      	mov	r3, r0
 801123a:	2b00      	cmp	r3, #0
 801123c:	d008      	beq.n	8011250 <pbuf_pool_is_empty+0x44>
 801123e:	f009 fd15 	bl	801ac6c <sys_arch_protect>
 8011242:	6078      	str	r0, [r7, #4]
 8011244:	4b04      	ldr	r3, [pc, #16]	@ (8011258 <pbuf_pool_is_empty+0x4c>)
 8011246:	2200      	movs	r2, #0
 8011248:	701a      	strb	r2, [r3, #0]
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	f009 fd1c 	bl	801ac88 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011250:	bf00      	nop
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}
 8011258:	2000c8ad 	.word	0x2000c8ad
 801125c:	080111f9 	.word	0x080111f9

08011260 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011260:	b480      	push	{r7}
 8011262:	b085      	sub	sp, #20
 8011264:	af00      	add	r7, sp, #0
 8011266:	60f8      	str	r0, [r7, #12]
 8011268:	60b9      	str	r1, [r7, #8]
 801126a:	4611      	mov	r1, r2
 801126c:	461a      	mov	r2, r3
 801126e:	460b      	mov	r3, r1
 8011270:	80fb      	strh	r3, [r7, #6]
 8011272:	4613      	mov	r3, r2
 8011274:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	2200      	movs	r2, #0
 801127a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	68ba      	ldr	r2, [r7, #8]
 8011280:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	88fa      	ldrh	r2, [r7, #6]
 8011286:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	88ba      	ldrh	r2, [r7, #4]
 801128c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801128e:	8b3b      	ldrh	r3, [r7, #24]
 8011290:	b2da      	uxtb	r2, r3
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	7f3a      	ldrb	r2, [r7, #28]
 801129a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	2201      	movs	r2, #1
 80112a0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	2200      	movs	r2, #0
 80112a6:	73da      	strb	r2, [r3, #15]
}
 80112a8:	bf00      	nop
 80112aa:	3714      	adds	r7, #20
 80112ac:	46bd      	mov	sp, r7
 80112ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b2:	4770      	bx	lr

080112b4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b08c      	sub	sp, #48	@ 0x30
 80112b8:	af02      	add	r7, sp, #8
 80112ba:	4603      	mov	r3, r0
 80112bc:	71fb      	strb	r3, [r7, #7]
 80112be:	460b      	mov	r3, r1
 80112c0:	80bb      	strh	r3, [r7, #4]
 80112c2:	4613      	mov	r3, r2
 80112c4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80112c6:	79fb      	ldrb	r3, [r7, #7]
 80112c8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80112ca:	887b      	ldrh	r3, [r7, #2]
 80112cc:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80112d0:	d07f      	beq.n	80113d2 <pbuf_alloc+0x11e>
 80112d2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80112d6:	f300 80c8 	bgt.w	801146a <pbuf_alloc+0x1b6>
 80112da:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80112de:	d010      	beq.n	8011302 <pbuf_alloc+0x4e>
 80112e0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80112e4:	f300 80c1 	bgt.w	801146a <pbuf_alloc+0x1b6>
 80112e8:	2b01      	cmp	r3, #1
 80112ea:	d002      	beq.n	80112f2 <pbuf_alloc+0x3e>
 80112ec:	2b41      	cmp	r3, #65	@ 0x41
 80112ee:	f040 80bc 	bne.w	801146a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80112f2:	887a      	ldrh	r2, [r7, #2]
 80112f4:	88bb      	ldrh	r3, [r7, #4]
 80112f6:	4619      	mov	r1, r3
 80112f8:	2000      	movs	r0, #0
 80112fa:	f000 f8d1 	bl	80114a0 <pbuf_alloc_reference>
 80112fe:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8011300:	e0bd      	b.n	801147e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8011302:	2300      	movs	r3, #0
 8011304:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8011306:	2300      	movs	r3, #0
 8011308:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801130a:	88bb      	ldrh	r3, [r7, #4]
 801130c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801130e:	200c      	movs	r0, #12
 8011310:	f7ff fbcc 	bl	8010aac <memp_malloc>
 8011314:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011316:	693b      	ldr	r3, [r7, #16]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d109      	bne.n	8011330 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801131c:	f7ff ff76 	bl	801120c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011322:	2b00      	cmp	r3, #0
 8011324:	d002      	beq.n	801132c <pbuf_alloc+0x78>
            pbuf_free(p);
 8011326:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011328:	f000 faa8 	bl	801187c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801132c:	2300      	movs	r3, #0
 801132e:	e0a7      	b.n	8011480 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011330:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011332:	3303      	adds	r3, #3
 8011334:	b29b      	uxth	r3, r3
 8011336:	f023 0303 	bic.w	r3, r3, #3
 801133a:	b29b      	uxth	r3, r3
 801133c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8011340:	b29b      	uxth	r3, r3
 8011342:	8b7a      	ldrh	r2, [r7, #26]
 8011344:	4293      	cmp	r3, r2
 8011346:	bf28      	it	cs
 8011348:	4613      	movcs	r3, r2
 801134a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801134c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801134e:	3310      	adds	r3, #16
 8011350:	693a      	ldr	r2, [r7, #16]
 8011352:	4413      	add	r3, r2
 8011354:	3303      	adds	r3, #3
 8011356:	f023 0303 	bic.w	r3, r3, #3
 801135a:	4618      	mov	r0, r3
 801135c:	89f9      	ldrh	r1, [r7, #14]
 801135e:	8b7a      	ldrh	r2, [r7, #26]
 8011360:	2300      	movs	r3, #0
 8011362:	9301      	str	r3, [sp, #4]
 8011364:	887b      	ldrh	r3, [r7, #2]
 8011366:	9300      	str	r3, [sp, #0]
 8011368:	460b      	mov	r3, r1
 801136a:	4601      	mov	r1, r0
 801136c:	6938      	ldr	r0, [r7, #16]
 801136e:	f7ff ff77 	bl	8011260 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	685b      	ldr	r3, [r3, #4]
 8011376:	f003 0303 	and.w	r3, r3, #3
 801137a:	2b00      	cmp	r3, #0
 801137c:	d006      	beq.n	801138c <pbuf_alloc+0xd8>
 801137e:	4b42      	ldr	r3, [pc, #264]	@ (8011488 <pbuf_alloc+0x1d4>)
 8011380:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011384:	4941      	ldr	r1, [pc, #260]	@ (801148c <pbuf_alloc+0x1d8>)
 8011386:	4842      	ldr	r0, [pc, #264]	@ (8011490 <pbuf_alloc+0x1dc>)
 8011388:	f00a faa8 	bl	801b8dc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801138c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801138e:	3303      	adds	r3, #3
 8011390:	f023 0303 	bic.w	r3, r3, #3
 8011394:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8011398:	d106      	bne.n	80113a8 <pbuf_alloc+0xf4>
 801139a:	4b3b      	ldr	r3, [pc, #236]	@ (8011488 <pbuf_alloc+0x1d4>)
 801139c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80113a0:	493c      	ldr	r1, [pc, #240]	@ (8011494 <pbuf_alloc+0x1e0>)
 80113a2:	483b      	ldr	r0, [pc, #236]	@ (8011490 <pbuf_alloc+0x1dc>)
 80113a4:	f00a fa9a 	bl	801b8dc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80113a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d102      	bne.n	80113b4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80113ae:	693b      	ldr	r3, [r7, #16]
 80113b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80113b2:	e002      	b.n	80113ba <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80113b4:	69fb      	ldr	r3, [r7, #28]
 80113b6:	693a      	ldr	r2, [r7, #16]
 80113b8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80113ba:	693b      	ldr	r3, [r7, #16]
 80113bc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80113be:	8b7a      	ldrh	r2, [r7, #26]
 80113c0:	89fb      	ldrh	r3, [r7, #14]
 80113c2:	1ad3      	subs	r3, r2, r3
 80113c4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80113c6:	2300      	movs	r3, #0
 80113c8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80113ca:	8b7b      	ldrh	r3, [r7, #26]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d19e      	bne.n	801130e <pbuf_alloc+0x5a>
      break;
 80113d0:	e055      	b.n	801147e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80113d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80113d4:	3303      	adds	r3, #3
 80113d6:	b29b      	uxth	r3, r3
 80113d8:	f023 0303 	bic.w	r3, r3, #3
 80113dc:	b29a      	uxth	r2, r3
 80113de:	88bb      	ldrh	r3, [r7, #4]
 80113e0:	3303      	adds	r3, #3
 80113e2:	b29b      	uxth	r3, r3
 80113e4:	f023 0303 	bic.w	r3, r3, #3
 80113e8:	b29b      	uxth	r3, r3
 80113ea:	4413      	add	r3, r2
 80113ec:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80113ee:	8b3b      	ldrh	r3, [r7, #24]
 80113f0:	3310      	adds	r3, #16
 80113f2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80113f4:	8b3a      	ldrh	r2, [r7, #24]
 80113f6:	88bb      	ldrh	r3, [r7, #4]
 80113f8:	3303      	adds	r3, #3
 80113fa:	f023 0303 	bic.w	r3, r3, #3
 80113fe:	429a      	cmp	r2, r3
 8011400:	d306      	bcc.n	8011410 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011402:	8afa      	ldrh	r2, [r7, #22]
 8011404:	88bb      	ldrh	r3, [r7, #4]
 8011406:	3303      	adds	r3, #3
 8011408:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801140c:	429a      	cmp	r2, r3
 801140e:	d201      	bcs.n	8011414 <pbuf_alloc+0x160>
        return NULL;
 8011410:	2300      	movs	r3, #0
 8011412:	e035      	b.n	8011480 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011414:	8afb      	ldrh	r3, [r7, #22]
 8011416:	4618      	mov	r0, r3
 8011418:	f7ff f9a4 	bl	8010764 <mem_malloc>
 801141c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801141e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011420:	2b00      	cmp	r3, #0
 8011422:	d101      	bne.n	8011428 <pbuf_alloc+0x174>
        return NULL;
 8011424:	2300      	movs	r3, #0
 8011426:	e02b      	b.n	8011480 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011428:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801142a:	3310      	adds	r3, #16
 801142c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801142e:	4413      	add	r3, r2
 8011430:	3303      	adds	r3, #3
 8011432:	f023 0303 	bic.w	r3, r3, #3
 8011436:	4618      	mov	r0, r3
 8011438:	88b9      	ldrh	r1, [r7, #4]
 801143a:	88ba      	ldrh	r2, [r7, #4]
 801143c:	2300      	movs	r3, #0
 801143e:	9301      	str	r3, [sp, #4]
 8011440:	887b      	ldrh	r3, [r7, #2]
 8011442:	9300      	str	r3, [sp, #0]
 8011444:	460b      	mov	r3, r1
 8011446:	4601      	mov	r1, r0
 8011448:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801144a:	f7ff ff09 	bl	8011260 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801144e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	f003 0303 	and.w	r3, r3, #3
 8011456:	2b00      	cmp	r3, #0
 8011458:	d010      	beq.n	801147c <pbuf_alloc+0x1c8>
 801145a:	4b0b      	ldr	r3, [pc, #44]	@ (8011488 <pbuf_alloc+0x1d4>)
 801145c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8011460:	490d      	ldr	r1, [pc, #52]	@ (8011498 <pbuf_alloc+0x1e4>)
 8011462:	480b      	ldr	r0, [pc, #44]	@ (8011490 <pbuf_alloc+0x1dc>)
 8011464:	f00a fa3a 	bl	801b8dc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011468:	e008      	b.n	801147c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801146a:	4b07      	ldr	r3, [pc, #28]	@ (8011488 <pbuf_alloc+0x1d4>)
 801146c:	f240 1227 	movw	r2, #295	@ 0x127
 8011470:	490a      	ldr	r1, [pc, #40]	@ (801149c <pbuf_alloc+0x1e8>)
 8011472:	4807      	ldr	r0, [pc, #28]	@ (8011490 <pbuf_alloc+0x1dc>)
 8011474:	f00a fa32 	bl	801b8dc <iprintf>
      return NULL;
 8011478:	2300      	movs	r3, #0
 801147a:	e001      	b.n	8011480 <pbuf_alloc+0x1cc>
      break;
 801147c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801147e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011480:	4618      	mov	r0, r3
 8011482:	3728      	adds	r7, #40	@ 0x28
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}
 8011488:	0801e9f4 	.word	0x0801e9f4
 801148c:	0801ea24 	.word	0x0801ea24
 8011490:	0801ea54 	.word	0x0801ea54
 8011494:	0801ea7c 	.word	0x0801ea7c
 8011498:	0801eab0 	.word	0x0801eab0
 801149c:	0801eadc 	.word	0x0801eadc

080114a0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b086      	sub	sp, #24
 80114a4:	af02      	add	r7, sp, #8
 80114a6:	6078      	str	r0, [r7, #4]
 80114a8:	460b      	mov	r3, r1
 80114aa:	807b      	strh	r3, [r7, #2]
 80114ac:	4613      	mov	r3, r2
 80114ae:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80114b0:	883b      	ldrh	r3, [r7, #0]
 80114b2:	2b41      	cmp	r3, #65	@ 0x41
 80114b4:	d009      	beq.n	80114ca <pbuf_alloc_reference+0x2a>
 80114b6:	883b      	ldrh	r3, [r7, #0]
 80114b8:	2b01      	cmp	r3, #1
 80114ba:	d006      	beq.n	80114ca <pbuf_alloc_reference+0x2a>
 80114bc:	4b0f      	ldr	r3, [pc, #60]	@ (80114fc <pbuf_alloc_reference+0x5c>)
 80114be:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80114c2:	490f      	ldr	r1, [pc, #60]	@ (8011500 <pbuf_alloc_reference+0x60>)
 80114c4:	480f      	ldr	r0, [pc, #60]	@ (8011504 <pbuf_alloc_reference+0x64>)
 80114c6:	f00a fa09 	bl	801b8dc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80114ca:	200b      	movs	r0, #11
 80114cc:	f7ff faee 	bl	8010aac <memp_malloc>
 80114d0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d101      	bne.n	80114dc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80114d8:	2300      	movs	r3, #0
 80114da:	e00b      	b.n	80114f4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80114dc:	8879      	ldrh	r1, [r7, #2]
 80114de:	887a      	ldrh	r2, [r7, #2]
 80114e0:	2300      	movs	r3, #0
 80114e2:	9301      	str	r3, [sp, #4]
 80114e4:	883b      	ldrh	r3, [r7, #0]
 80114e6:	9300      	str	r3, [sp, #0]
 80114e8:	460b      	mov	r3, r1
 80114ea:	6879      	ldr	r1, [r7, #4]
 80114ec:	68f8      	ldr	r0, [r7, #12]
 80114ee:	f7ff feb7 	bl	8011260 <pbuf_init_alloced_pbuf>
  return p;
 80114f2:	68fb      	ldr	r3, [r7, #12]
}
 80114f4:	4618      	mov	r0, r3
 80114f6:	3710      	adds	r7, #16
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}
 80114fc:	0801e9f4 	.word	0x0801e9f4
 8011500:	0801eaf8 	.word	0x0801eaf8
 8011504:	0801ea54 	.word	0x0801ea54

08011508 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b088      	sub	sp, #32
 801150c:	af02      	add	r7, sp, #8
 801150e:	607b      	str	r3, [r7, #4]
 8011510:	4603      	mov	r3, r0
 8011512:	73fb      	strb	r3, [r7, #15]
 8011514:	460b      	mov	r3, r1
 8011516:	81bb      	strh	r3, [r7, #12]
 8011518:	4613      	mov	r3, r2
 801151a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801151c:	7bfb      	ldrb	r3, [r7, #15]
 801151e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011520:	8a7b      	ldrh	r3, [r7, #18]
 8011522:	3303      	adds	r3, #3
 8011524:	f023 0203 	bic.w	r2, r3, #3
 8011528:	89bb      	ldrh	r3, [r7, #12]
 801152a:	441a      	add	r2, r3
 801152c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801152e:	429a      	cmp	r2, r3
 8011530:	d901      	bls.n	8011536 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8011532:	2300      	movs	r3, #0
 8011534:	e018      	b.n	8011568 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8011536:	6a3b      	ldr	r3, [r7, #32]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d007      	beq.n	801154c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801153c:	8a7b      	ldrh	r3, [r7, #18]
 801153e:	3303      	adds	r3, #3
 8011540:	f023 0303 	bic.w	r3, r3, #3
 8011544:	6a3a      	ldr	r2, [r7, #32]
 8011546:	4413      	add	r3, r2
 8011548:	617b      	str	r3, [r7, #20]
 801154a:	e001      	b.n	8011550 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801154c:	2300      	movs	r3, #0
 801154e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	89b9      	ldrh	r1, [r7, #12]
 8011554:	89ba      	ldrh	r2, [r7, #12]
 8011556:	2302      	movs	r3, #2
 8011558:	9301      	str	r3, [sp, #4]
 801155a:	897b      	ldrh	r3, [r7, #10]
 801155c:	9300      	str	r3, [sp, #0]
 801155e:	460b      	mov	r3, r1
 8011560:	6979      	ldr	r1, [r7, #20]
 8011562:	f7ff fe7d 	bl	8011260 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8011566:	687b      	ldr	r3, [r7, #4]
}
 8011568:	4618      	mov	r0, r3
 801156a:	3718      	adds	r7, #24
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}

08011570 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b084      	sub	sp, #16
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
 8011578:	460b      	mov	r3, r1
 801157a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d106      	bne.n	8011590 <pbuf_realloc+0x20>
 8011582:	4b3a      	ldr	r3, [pc, #232]	@ (801166c <pbuf_realloc+0xfc>)
 8011584:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8011588:	4939      	ldr	r1, [pc, #228]	@ (8011670 <pbuf_realloc+0x100>)
 801158a:	483a      	ldr	r0, [pc, #232]	@ (8011674 <pbuf_realloc+0x104>)
 801158c:	f00a f9a6 	bl	801b8dc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	891b      	ldrh	r3, [r3, #8]
 8011594:	887a      	ldrh	r2, [r7, #2]
 8011596:	429a      	cmp	r2, r3
 8011598:	d263      	bcs.n	8011662 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	891a      	ldrh	r2, [r3, #8]
 801159e:	887b      	ldrh	r3, [r7, #2]
 80115a0:	1ad3      	subs	r3, r2, r3
 80115a2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80115a4:	887b      	ldrh	r3, [r7, #2]
 80115a6:	817b      	strh	r3, [r7, #10]
  q = p;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80115ac:	e018      	b.n	80115e0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	895b      	ldrh	r3, [r3, #10]
 80115b2:	897a      	ldrh	r2, [r7, #10]
 80115b4:	1ad3      	subs	r3, r2, r3
 80115b6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	891a      	ldrh	r2, [r3, #8]
 80115bc:	893b      	ldrh	r3, [r7, #8]
 80115be:	1ad3      	subs	r3, r2, r3
 80115c0:	b29a      	uxth	r2, r3
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d106      	bne.n	80115e0 <pbuf_realloc+0x70>
 80115d2:	4b26      	ldr	r3, [pc, #152]	@ (801166c <pbuf_realloc+0xfc>)
 80115d4:	f240 12af 	movw	r2, #431	@ 0x1af
 80115d8:	4927      	ldr	r1, [pc, #156]	@ (8011678 <pbuf_realloc+0x108>)
 80115da:	4826      	ldr	r0, [pc, #152]	@ (8011674 <pbuf_realloc+0x104>)
 80115dc:	f00a f97e 	bl	801b8dc <iprintf>
  while (rem_len > q->len) {
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	895b      	ldrh	r3, [r3, #10]
 80115e4:	897a      	ldrh	r2, [r7, #10]
 80115e6:	429a      	cmp	r2, r3
 80115e8:	d8e1      	bhi.n	80115ae <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	7b1b      	ldrb	r3, [r3, #12]
 80115ee:	f003 030f 	and.w	r3, r3, #15
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d121      	bne.n	801163a <pbuf_realloc+0xca>
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	895b      	ldrh	r3, [r3, #10]
 80115fa:	897a      	ldrh	r2, [r7, #10]
 80115fc:	429a      	cmp	r2, r3
 80115fe:	d01c      	beq.n	801163a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	7b5b      	ldrb	r3, [r3, #13]
 8011604:	f003 0302 	and.w	r3, r3, #2
 8011608:	2b00      	cmp	r3, #0
 801160a:	d116      	bne.n	801163a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	685a      	ldr	r2, [r3, #4]
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	1ad3      	subs	r3, r2, r3
 8011614:	b29a      	uxth	r2, r3
 8011616:	897b      	ldrh	r3, [r7, #10]
 8011618:	4413      	add	r3, r2
 801161a:	b29b      	uxth	r3, r3
 801161c:	4619      	mov	r1, r3
 801161e:	68f8      	ldr	r0, [r7, #12]
 8011620:	f7fe ff96 	bl	8010550 <mem_trim>
 8011624:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d106      	bne.n	801163a <pbuf_realloc+0xca>
 801162c:	4b0f      	ldr	r3, [pc, #60]	@ (801166c <pbuf_realloc+0xfc>)
 801162e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8011632:	4912      	ldr	r1, [pc, #72]	@ (801167c <pbuf_realloc+0x10c>)
 8011634:	480f      	ldr	r0, [pc, #60]	@ (8011674 <pbuf_realloc+0x104>)
 8011636:	f00a f951 	bl	801b8dc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	897a      	ldrh	r2, [r7, #10]
 801163e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	895a      	ldrh	r2, [r3, #10]
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d004      	beq.n	801165a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	4618      	mov	r0, r3
 8011656:	f000 f911 	bl	801187c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	2200      	movs	r2, #0
 801165e:	601a      	str	r2, [r3, #0]
 8011660:	e000      	b.n	8011664 <pbuf_realloc+0xf4>
    return;
 8011662:	bf00      	nop

}
 8011664:	3710      	adds	r7, #16
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}
 801166a:	bf00      	nop
 801166c:	0801e9f4 	.word	0x0801e9f4
 8011670:	0801eb0c 	.word	0x0801eb0c
 8011674:	0801ea54 	.word	0x0801ea54
 8011678:	0801eb24 	.word	0x0801eb24
 801167c:	0801eb3c 	.word	0x0801eb3c

08011680 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b086      	sub	sp, #24
 8011684:	af00      	add	r7, sp, #0
 8011686:	60f8      	str	r0, [r7, #12]
 8011688:	60b9      	str	r1, [r7, #8]
 801168a:	4613      	mov	r3, r2
 801168c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d106      	bne.n	80116a2 <pbuf_add_header_impl+0x22>
 8011694:	4b2b      	ldr	r3, [pc, #172]	@ (8011744 <pbuf_add_header_impl+0xc4>)
 8011696:	f240 12df 	movw	r2, #479	@ 0x1df
 801169a:	492b      	ldr	r1, [pc, #172]	@ (8011748 <pbuf_add_header_impl+0xc8>)
 801169c:	482b      	ldr	r0, [pc, #172]	@ (801174c <pbuf_add_header_impl+0xcc>)
 801169e:	f00a f91d 	bl	801b8dc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d003      	beq.n	80116b0 <pbuf_add_header_impl+0x30>
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80116ae:	d301      	bcc.n	80116b4 <pbuf_add_header_impl+0x34>
    return 1;
 80116b0:	2301      	movs	r3, #1
 80116b2:	e043      	b.n	801173c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80116b4:	68bb      	ldr	r3, [r7, #8]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d101      	bne.n	80116be <pbuf_add_header_impl+0x3e>
    return 0;
 80116ba:	2300      	movs	r3, #0
 80116bc:	e03e      	b.n	801173c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	891a      	ldrh	r2, [r3, #8]
 80116c6:	8a7b      	ldrh	r3, [r7, #18]
 80116c8:	4413      	add	r3, r2
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	8a7a      	ldrh	r2, [r7, #18]
 80116ce:	429a      	cmp	r2, r3
 80116d0:	d901      	bls.n	80116d6 <pbuf_add_header_impl+0x56>
    return 1;
 80116d2:	2301      	movs	r3, #1
 80116d4:	e032      	b.n	801173c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	7b1b      	ldrb	r3, [r3, #12]
 80116da:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80116dc:	8a3b      	ldrh	r3, [r7, #16]
 80116de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d00c      	beq.n	8011700 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	685a      	ldr	r2, [r3, #4]
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	425b      	negs	r3, r3
 80116ee:	4413      	add	r3, r2
 80116f0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	3310      	adds	r3, #16
 80116f6:	697a      	ldr	r2, [r7, #20]
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d20d      	bcs.n	8011718 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80116fc:	2301      	movs	r3, #1
 80116fe:	e01d      	b.n	801173c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011700:	79fb      	ldrb	r3, [r7, #7]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d006      	beq.n	8011714 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	685a      	ldr	r2, [r3, #4]
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	425b      	negs	r3, r3
 801170e:	4413      	add	r3, r2
 8011710:	617b      	str	r3, [r7, #20]
 8011712:	e001      	b.n	8011718 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011714:	2301      	movs	r3, #1
 8011716:	e011      	b.n	801173c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	697a      	ldr	r2, [r7, #20]
 801171c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	895a      	ldrh	r2, [r3, #10]
 8011722:	8a7b      	ldrh	r3, [r7, #18]
 8011724:	4413      	add	r3, r2
 8011726:	b29a      	uxth	r2, r3
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	891a      	ldrh	r2, [r3, #8]
 8011730:	8a7b      	ldrh	r3, [r7, #18]
 8011732:	4413      	add	r3, r2
 8011734:	b29a      	uxth	r2, r3
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	811a      	strh	r2, [r3, #8]


  return 0;
 801173a:	2300      	movs	r3, #0
}
 801173c:	4618      	mov	r0, r3
 801173e:	3718      	adds	r7, #24
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}
 8011744:	0801e9f4 	.word	0x0801e9f4
 8011748:	0801eb58 	.word	0x0801eb58
 801174c:	0801ea54 	.word	0x0801ea54

08011750 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b082      	sub	sp, #8
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801175a:	2200      	movs	r2, #0
 801175c:	6839      	ldr	r1, [r7, #0]
 801175e:	6878      	ldr	r0, [r7, #4]
 8011760:	f7ff ff8e 	bl	8011680 <pbuf_add_header_impl>
 8011764:	4603      	mov	r3, r0
}
 8011766:	4618      	mov	r0, r3
 8011768:	3708      	adds	r7, #8
 801176a:	46bd      	mov	sp, r7
 801176c:	bd80      	pop	{r7, pc}
	...

08011770 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b084      	sub	sp, #16
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d106      	bne.n	801178e <pbuf_remove_header+0x1e>
 8011780:	4b20      	ldr	r3, [pc, #128]	@ (8011804 <pbuf_remove_header+0x94>)
 8011782:	f240 224b 	movw	r2, #587	@ 0x24b
 8011786:	4920      	ldr	r1, [pc, #128]	@ (8011808 <pbuf_remove_header+0x98>)
 8011788:	4820      	ldr	r0, [pc, #128]	@ (801180c <pbuf_remove_header+0x9c>)
 801178a:	f00a f8a7 	bl	801b8dc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d003      	beq.n	801179c <pbuf_remove_header+0x2c>
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801179a:	d301      	bcc.n	80117a0 <pbuf_remove_header+0x30>
    return 1;
 801179c:	2301      	movs	r3, #1
 801179e:	e02c      	b.n	80117fa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d101      	bne.n	80117aa <pbuf_remove_header+0x3a>
    return 0;
 80117a6:	2300      	movs	r3, #0
 80117a8:	e027      	b.n	80117fa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	895b      	ldrh	r3, [r3, #10]
 80117b2:	89fa      	ldrh	r2, [r7, #14]
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d908      	bls.n	80117ca <pbuf_remove_header+0x5a>
 80117b8:	4b12      	ldr	r3, [pc, #72]	@ (8011804 <pbuf_remove_header+0x94>)
 80117ba:	f240 2255 	movw	r2, #597	@ 0x255
 80117be:	4914      	ldr	r1, [pc, #80]	@ (8011810 <pbuf_remove_header+0xa0>)
 80117c0:	4812      	ldr	r0, [pc, #72]	@ (801180c <pbuf_remove_header+0x9c>)
 80117c2:	f00a f88b 	bl	801b8dc <iprintf>
 80117c6:	2301      	movs	r3, #1
 80117c8:	e017      	b.n	80117fa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	685b      	ldr	r3, [r3, #4]
 80117ce:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	685a      	ldr	r2, [r3, #4]
 80117d4:	683b      	ldr	r3, [r7, #0]
 80117d6:	441a      	add	r2, r3
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	895a      	ldrh	r2, [r3, #10]
 80117e0:	89fb      	ldrh	r3, [r7, #14]
 80117e2:	1ad3      	subs	r3, r2, r3
 80117e4:	b29a      	uxth	r2, r3
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	891a      	ldrh	r2, [r3, #8]
 80117ee:	89fb      	ldrh	r3, [r7, #14]
 80117f0:	1ad3      	subs	r3, r2, r3
 80117f2:	b29a      	uxth	r2, r3
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80117f8:	2300      	movs	r3, #0
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	3710      	adds	r7, #16
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}
 8011802:	bf00      	nop
 8011804:	0801e9f4 	.word	0x0801e9f4
 8011808:	0801eb58 	.word	0x0801eb58
 801180c:	0801ea54 	.word	0x0801ea54
 8011810:	0801eb64 	.word	0x0801eb64

08011814 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b082      	sub	sp, #8
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
 801181c:	460b      	mov	r3, r1
 801181e:	807b      	strh	r3, [r7, #2]
 8011820:	4613      	mov	r3, r2
 8011822:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011824:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011828:	2b00      	cmp	r3, #0
 801182a:	da08      	bge.n	801183e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801182c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011830:	425b      	negs	r3, r3
 8011832:	4619      	mov	r1, r3
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f7ff ff9b 	bl	8011770 <pbuf_remove_header>
 801183a:	4603      	mov	r3, r0
 801183c:	e007      	b.n	801184e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801183e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011842:	787a      	ldrb	r2, [r7, #1]
 8011844:	4619      	mov	r1, r3
 8011846:	6878      	ldr	r0, [r7, #4]
 8011848:	f7ff ff1a 	bl	8011680 <pbuf_add_header_impl>
 801184c:	4603      	mov	r3, r0
  }
}
 801184e:	4618      	mov	r0, r3
 8011850:	3708      	adds	r7, #8
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}

08011856 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011856:	b580      	push	{r7, lr}
 8011858:	b082      	sub	sp, #8
 801185a:	af00      	add	r7, sp, #0
 801185c:	6078      	str	r0, [r7, #4]
 801185e:	460b      	mov	r3, r1
 8011860:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011862:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011866:	2201      	movs	r2, #1
 8011868:	4619      	mov	r1, r3
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f7ff ffd2 	bl	8011814 <pbuf_header_impl>
 8011870:	4603      	mov	r3, r0
}
 8011872:	4618      	mov	r0, r3
 8011874:	3708      	adds	r7, #8
 8011876:	46bd      	mov	sp, r7
 8011878:	bd80      	pop	{r7, pc}
	...

0801187c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b088      	sub	sp, #32
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d10b      	bne.n	80118a2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d106      	bne.n	801189e <pbuf_free+0x22>
 8011890:	4b3b      	ldr	r3, [pc, #236]	@ (8011980 <pbuf_free+0x104>)
 8011892:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8011896:	493b      	ldr	r1, [pc, #236]	@ (8011984 <pbuf_free+0x108>)
 8011898:	483b      	ldr	r0, [pc, #236]	@ (8011988 <pbuf_free+0x10c>)
 801189a:	f00a f81f 	bl	801b8dc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801189e:	2300      	movs	r3, #0
 80118a0:	e069      	b.n	8011976 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80118a2:	2300      	movs	r3, #0
 80118a4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80118a6:	e062      	b.n	801196e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80118a8:	f009 f9e0 	bl	801ac6c <sys_arch_protect>
 80118ac:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	7b9b      	ldrb	r3, [r3, #14]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d106      	bne.n	80118c4 <pbuf_free+0x48>
 80118b6:	4b32      	ldr	r3, [pc, #200]	@ (8011980 <pbuf_free+0x104>)
 80118b8:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80118bc:	4933      	ldr	r1, [pc, #204]	@ (801198c <pbuf_free+0x110>)
 80118be:	4832      	ldr	r0, [pc, #200]	@ (8011988 <pbuf_free+0x10c>)
 80118c0:	f00a f80c 	bl	801b8dc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	7b9b      	ldrb	r3, [r3, #14]
 80118c8:	3b01      	subs	r3, #1
 80118ca:	b2da      	uxtb	r2, r3
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	739a      	strb	r2, [r3, #14]
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	7b9b      	ldrb	r3, [r3, #14]
 80118d4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80118d6:	69b8      	ldr	r0, [r7, #24]
 80118d8:	f009 f9d6 	bl	801ac88 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80118dc:	7dfb      	ldrb	r3, [r7, #23]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d143      	bne.n	801196a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	7b1b      	ldrb	r3, [r3, #12]
 80118ec:	f003 030f 	and.w	r3, r3, #15
 80118f0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	7b5b      	ldrb	r3, [r3, #13]
 80118f6:	f003 0302 	and.w	r3, r3, #2
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d011      	beq.n	8011922 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	691b      	ldr	r3, [r3, #16]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d106      	bne.n	8011918 <pbuf_free+0x9c>
 801190a:	4b1d      	ldr	r3, [pc, #116]	@ (8011980 <pbuf_free+0x104>)
 801190c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8011910:	491f      	ldr	r1, [pc, #124]	@ (8011990 <pbuf_free+0x114>)
 8011912:	481d      	ldr	r0, [pc, #116]	@ (8011988 <pbuf_free+0x10c>)
 8011914:	f009 ffe2 	bl	801b8dc <iprintf>
        pc->custom_free_function(p);
 8011918:	68bb      	ldr	r3, [r7, #8]
 801191a:	691b      	ldr	r3, [r3, #16]
 801191c:	6878      	ldr	r0, [r7, #4]
 801191e:	4798      	blx	r3
 8011920:	e01d      	b.n	801195e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011922:	7bfb      	ldrb	r3, [r7, #15]
 8011924:	2b02      	cmp	r3, #2
 8011926:	d104      	bne.n	8011932 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8011928:	6879      	ldr	r1, [r7, #4]
 801192a:	200c      	movs	r0, #12
 801192c:	f7ff f934 	bl	8010b98 <memp_free>
 8011930:	e015      	b.n	801195e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8011932:	7bfb      	ldrb	r3, [r7, #15]
 8011934:	2b01      	cmp	r3, #1
 8011936:	d104      	bne.n	8011942 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8011938:	6879      	ldr	r1, [r7, #4]
 801193a:	200b      	movs	r0, #11
 801193c:	f7ff f92c 	bl	8010b98 <memp_free>
 8011940:	e00d      	b.n	801195e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8011942:	7bfb      	ldrb	r3, [r7, #15]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d103      	bne.n	8011950 <pbuf_free+0xd4>
          mem_free(p);
 8011948:	6878      	ldr	r0, [r7, #4]
 801194a:	f7fe fd71 	bl	8010430 <mem_free>
 801194e:	e006      	b.n	801195e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011950:	4b0b      	ldr	r3, [pc, #44]	@ (8011980 <pbuf_free+0x104>)
 8011952:	f240 320f 	movw	r2, #783	@ 0x30f
 8011956:	490f      	ldr	r1, [pc, #60]	@ (8011994 <pbuf_free+0x118>)
 8011958:	480b      	ldr	r0, [pc, #44]	@ (8011988 <pbuf_free+0x10c>)
 801195a:	f009 ffbf 	bl	801b8dc <iprintf>
        }
      }
      count++;
 801195e:	7ffb      	ldrb	r3, [r7, #31]
 8011960:	3301      	adds	r3, #1
 8011962:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011964:	693b      	ldr	r3, [r7, #16]
 8011966:	607b      	str	r3, [r7, #4]
 8011968:	e001      	b.n	801196e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801196a:	2300      	movs	r3, #0
 801196c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d199      	bne.n	80118a8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011974:	7ffb      	ldrb	r3, [r7, #31]
}
 8011976:	4618      	mov	r0, r3
 8011978:	3720      	adds	r7, #32
 801197a:	46bd      	mov	sp, r7
 801197c:	bd80      	pop	{r7, pc}
 801197e:	bf00      	nop
 8011980:	0801e9f4 	.word	0x0801e9f4
 8011984:	0801eb58 	.word	0x0801eb58
 8011988:	0801ea54 	.word	0x0801ea54
 801198c:	0801eb84 	.word	0x0801eb84
 8011990:	0801eb9c 	.word	0x0801eb9c
 8011994:	0801ebc0 	.word	0x0801ebc0

08011998 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011998:	b480      	push	{r7}
 801199a:	b085      	sub	sp, #20
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80119a0:	2300      	movs	r3, #0
 80119a2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80119a4:	e005      	b.n	80119b2 <pbuf_clen+0x1a>
    ++len;
 80119a6:	89fb      	ldrh	r3, [r7, #14]
 80119a8:	3301      	adds	r3, #1
 80119aa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d1f6      	bne.n	80119a6 <pbuf_clen+0xe>
  }
  return len;
 80119b8:	89fb      	ldrh	r3, [r7, #14]
}
 80119ba:	4618      	mov	r0, r3
 80119bc:	3714      	adds	r7, #20
 80119be:	46bd      	mov	sp, r7
 80119c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c4:	4770      	bx	lr
	...

080119c8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b084      	sub	sp, #16
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d016      	beq.n	8011a04 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80119d6:	f009 f949 	bl	801ac6c <sys_arch_protect>
 80119da:	60f8      	str	r0, [r7, #12]
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	7b9b      	ldrb	r3, [r3, #14]
 80119e0:	3301      	adds	r3, #1
 80119e2:	b2da      	uxtb	r2, r3
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	739a      	strb	r2, [r3, #14]
 80119e8:	68f8      	ldr	r0, [r7, #12]
 80119ea:	f009 f94d 	bl	801ac88 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	7b9b      	ldrb	r3, [r3, #14]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d106      	bne.n	8011a04 <pbuf_ref+0x3c>
 80119f6:	4b05      	ldr	r3, [pc, #20]	@ (8011a0c <pbuf_ref+0x44>)
 80119f8:	f240 3242 	movw	r2, #834	@ 0x342
 80119fc:	4904      	ldr	r1, [pc, #16]	@ (8011a10 <pbuf_ref+0x48>)
 80119fe:	4805      	ldr	r0, [pc, #20]	@ (8011a14 <pbuf_ref+0x4c>)
 8011a00:	f009 ff6c 	bl	801b8dc <iprintf>
  }
}
 8011a04:	bf00      	nop
 8011a06:	3710      	adds	r7, #16
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	bd80      	pop	{r7, pc}
 8011a0c:	0801e9f4 	.word	0x0801e9f4
 8011a10:	0801ebd4 	.word	0x0801ebd4
 8011a14:	0801ea54 	.word	0x0801ea54

08011a18 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b084      	sub	sp, #16
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d002      	beq.n	8011a2e <pbuf_cat+0x16>
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d107      	bne.n	8011a3e <pbuf_cat+0x26>
 8011a2e:	4b20      	ldr	r3, [pc, #128]	@ (8011ab0 <pbuf_cat+0x98>)
 8011a30:	f240 3259 	movw	r2, #857	@ 0x359
 8011a34:	491f      	ldr	r1, [pc, #124]	@ (8011ab4 <pbuf_cat+0x9c>)
 8011a36:	4820      	ldr	r0, [pc, #128]	@ (8011ab8 <pbuf_cat+0xa0>)
 8011a38:	f009 ff50 	bl	801b8dc <iprintf>
 8011a3c:	e034      	b.n	8011aa8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	60fb      	str	r3, [r7, #12]
 8011a42:	e00a      	b.n	8011a5a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	891a      	ldrh	r2, [r3, #8]
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	891b      	ldrh	r3, [r3, #8]
 8011a4c:	4413      	add	r3, r2
 8011a4e:	b29a      	uxth	r2, r3
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	60fb      	str	r3, [r7, #12]
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d1f0      	bne.n	8011a44 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	891a      	ldrh	r2, [r3, #8]
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	895b      	ldrh	r3, [r3, #10]
 8011a6a:	429a      	cmp	r2, r3
 8011a6c:	d006      	beq.n	8011a7c <pbuf_cat+0x64>
 8011a6e:	4b10      	ldr	r3, [pc, #64]	@ (8011ab0 <pbuf_cat+0x98>)
 8011a70:	f240 3262 	movw	r2, #866	@ 0x362
 8011a74:	4911      	ldr	r1, [pc, #68]	@ (8011abc <pbuf_cat+0xa4>)
 8011a76:	4810      	ldr	r0, [pc, #64]	@ (8011ab8 <pbuf_cat+0xa0>)
 8011a78:	f009 ff30 	bl	801b8dc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d006      	beq.n	8011a92 <pbuf_cat+0x7a>
 8011a84:	4b0a      	ldr	r3, [pc, #40]	@ (8011ab0 <pbuf_cat+0x98>)
 8011a86:	f240 3263 	movw	r2, #867	@ 0x363
 8011a8a:	490d      	ldr	r1, [pc, #52]	@ (8011ac0 <pbuf_cat+0xa8>)
 8011a8c:	480a      	ldr	r0, [pc, #40]	@ (8011ab8 <pbuf_cat+0xa0>)
 8011a8e:	f009 ff25 	bl	801b8dc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	891a      	ldrh	r2, [r3, #8]
 8011a96:	683b      	ldr	r3, [r7, #0]
 8011a98:	891b      	ldrh	r3, [r3, #8]
 8011a9a:	4413      	add	r3, r2
 8011a9c:	b29a      	uxth	r2, r3
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	683a      	ldr	r2, [r7, #0]
 8011aa6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011aa8:	3710      	adds	r7, #16
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}
 8011aae:	bf00      	nop
 8011ab0:	0801e9f4 	.word	0x0801e9f4
 8011ab4:	0801ebe8 	.word	0x0801ebe8
 8011ab8:	0801ea54 	.word	0x0801ea54
 8011abc:	0801ec20 	.word	0x0801ec20
 8011ac0:	0801ec50 	.word	0x0801ec50

08011ac4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b086      	sub	sp, #24
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	617b      	str	r3, [r7, #20]
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d008      	beq.n	8011aee <pbuf_copy+0x2a>
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d005      	beq.n	8011aee <pbuf_copy+0x2a>
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	891a      	ldrh	r2, [r3, #8]
 8011ae6:	683b      	ldr	r3, [r7, #0]
 8011ae8:	891b      	ldrh	r3, [r3, #8]
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d209      	bcs.n	8011b02 <pbuf_copy+0x3e>
 8011aee:	4b57      	ldr	r3, [pc, #348]	@ (8011c4c <pbuf_copy+0x188>)
 8011af0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8011af4:	4956      	ldr	r1, [pc, #344]	@ (8011c50 <pbuf_copy+0x18c>)
 8011af6:	4857      	ldr	r0, [pc, #348]	@ (8011c54 <pbuf_copy+0x190>)
 8011af8:	f009 fef0 	bl	801b8dc <iprintf>
 8011afc:	f06f 030f 	mvn.w	r3, #15
 8011b00:	e09f      	b.n	8011c42 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	895b      	ldrh	r3, [r3, #10]
 8011b06:	461a      	mov	r2, r3
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	1ad2      	subs	r2, r2, r3
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	895b      	ldrh	r3, [r3, #10]
 8011b10:	4619      	mov	r1, r3
 8011b12:	693b      	ldr	r3, [r7, #16]
 8011b14:	1acb      	subs	r3, r1, r3
 8011b16:	429a      	cmp	r2, r3
 8011b18:	d306      	bcc.n	8011b28 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	895b      	ldrh	r3, [r3, #10]
 8011b1e:	461a      	mov	r2, r3
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	1ad3      	subs	r3, r2, r3
 8011b24:	60fb      	str	r3, [r7, #12]
 8011b26:	e005      	b.n	8011b34 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	895b      	ldrh	r3, [r3, #10]
 8011b2c:	461a      	mov	r2, r3
 8011b2e:	697b      	ldr	r3, [r7, #20]
 8011b30:	1ad3      	subs	r3, r2, r3
 8011b32:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	685a      	ldr	r2, [r3, #4]
 8011b38:	697b      	ldr	r3, [r7, #20]
 8011b3a:	18d0      	adds	r0, r2, r3
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	685a      	ldr	r2, [r3, #4]
 8011b40:	693b      	ldr	r3, [r7, #16]
 8011b42:	4413      	add	r3, r2
 8011b44:	68fa      	ldr	r2, [r7, #12]
 8011b46:	4619      	mov	r1, r3
 8011b48:	f00a f867 	bl	801bc1a <memcpy>
    offset_to += len;
 8011b4c:	697a      	ldr	r2, [r7, #20]
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	4413      	add	r3, r2
 8011b52:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011b54:	693a      	ldr	r2, [r7, #16]
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	4413      	add	r3, r2
 8011b5a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	895b      	ldrh	r3, [r3, #10]
 8011b60:	461a      	mov	r2, r3
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	4293      	cmp	r3, r2
 8011b66:	d906      	bls.n	8011b76 <pbuf_copy+0xb2>
 8011b68:	4b38      	ldr	r3, [pc, #224]	@ (8011c4c <pbuf_copy+0x188>)
 8011b6a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8011b6e:	493a      	ldr	r1, [pc, #232]	@ (8011c58 <pbuf_copy+0x194>)
 8011b70:	4838      	ldr	r0, [pc, #224]	@ (8011c54 <pbuf_copy+0x190>)
 8011b72:	f009 feb3 	bl	801b8dc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	895b      	ldrh	r3, [r3, #10]
 8011b7a:	461a      	mov	r2, r3
 8011b7c:	693b      	ldr	r3, [r7, #16]
 8011b7e:	4293      	cmp	r3, r2
 8011b80:	d906      	bls.n	8011b90 <pbuf_copy+0xcc>
 8011b82:	4b32      	ldr	r3, [pc, #200]	@ (8011c4c <pbuf_copy+0x188>)
 8011b84:	f240 32da 	movw	r2, #986	@ 0x3da
 8011b88:	4934      	ldr	r1, [pc, #208]	@ (8011c5c <pbuf_copy+0x198>)
 8011b8a:	4832      	ldr	r0, [pc, #200]	@ (8011c54 <pbuf_copy+0x190>)
 8011b8c:	f009 fea6 	bl	801b8dc <iprintf>
    if (offset_from >= p_from->len) {
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	895b      	ldrh	r3, [r3, #10]
 8011b94:	461a      	mov	r2, r3
 8011b96:	693b      	ldr	r3, [r7, #16]
 8011b98:	4293      	cmp	r3, r2
 8011b9a:	d304      	bcc.n	8011ba6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	895b      	ldrh	r3, [r3, #10]
 8011baa:	461a      	mov	r2, r3
 8011bac:	697b      	ldr	r3, [r7, #20]
 8011bae:	4293      	cmp	r3, r2
 8011bb0:	d114      	bne.n	8011bdc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d10c      	bne.n	8011bdc <pbuf_copy+0x118>
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d009      	beq.n	8011bdc <pbuf_copy+0x118>
 8011bc8:	4b20      	ldr	r3, [pc, #128]	@ (8011c4c <pbuf_copy+0x188>)
 8011bca:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8011bce:	4924      	ldr	r1, [pc, #144]	@ (8011c60 <pbuf_copy+0x19c>)
 8011bd0:	4820      	ldr	r0, [pc, #128]	@ (8011c54 <pbuf_copy+0x190>)
 8011bd2:	f009 fe83 	bl	801b8dc <iprintf>
 8011bd6:	f06f 030f 	mvn.w	r3, #15
 8011bda:	e032      	b.n	8011c42 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d013      	beq.n	8011c0a <pbuf_copy+0x146>
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	895a      	ldrh	r2, [r3, #10]
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	891b      	ldrh	r3, [r3, #8]
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d10d      	bne.n	8011c0a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d009      	beq.n	8011c0a <pbuf_copy+0x146>
 8011bf6:	4b15      	ldr	r3, [pc, #84]	@ (8011c4c <pbuf_copy+0x188>)
 8011bf8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8011bfc:	4919      	ldr	r1, [pc, #100]	@ (8011c64 <pbuf_copy+0x1a0>)
 8011bfe:	4815      	ldr	r0, [pc, #84]	@ (8011c54 <pbuf_copy+0x190>)
 8011c00:	f009 fe6c 	bl	801b8dc <iprintf>
 8011c04:	f06f 0305 	mvn.w	r3, #5
 8011c08:	e01b      	b.n	8011c42 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d013      	beq.n	8011c38 <pbuf_copy+0x174>
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	895a      	ldrh	r2, [r3, #10]
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	891b      	ldrh	r3, [r3, #8]
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d10d      	bne.n	8011c38 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d009      	beq.n	8011c38 <pbuf_copy+0x174>
 8011c24:	4b09      	ldr	r3, [pc, #36]	@ (8011c4c <pbuf_copy+0x188>)
 8011c26:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8011c2a:	490e      	ldr	r1, [pc, #56]	@ (8011c64 <pbuf_copy+0x1a0>)
 8011c2c:	4809      	ldr	r0, [pc, #36]	@ (8011c54 <pbuf_copy+0x190>)
 8011c2e:	f009 fe55 	bl	801b8dc <iprintf>
 8011c32:	f06f 0305 	mvn.w	r3, #5
 8011c36:	e004      	b.n	8011c42 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011c38:	683b      	ldr	r3, [r7, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	f47f af61 	bne.w	8011b02 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011c40:	2300      	movs	r3, #0
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	3718      	adds	r7, #24
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}
 8011c4a:	bf00      	nop
 8011c4c:	0801e9f4 	.word	0x0801e9f4
 8011c50:	0801ec9c 	.word	0x0801ec9c
 8011c54:	0801ea54 	.word	0x0801ea54
 8011c58:	0801eccc 	.word	0x0801eccc
 8011c5c:	0801ece4 	.word	0x0801ece4
 8011c60:	0801ed00 	.word	0x0801ed00
 8011c64:	0801ed10 	.word	0x0801ed10

08011c68 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b088      	sub	sp, #32
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	60f8      	str	r0, [r7, #12]
 8011c70:	60b9      	str	r1, [r7, #8]
 8011c72:	4611      	mov	r1, r2
 8011c74:	461a      	mov	r2, r3
 8011c76:	460b      	mov	r3, r1
 8011c78:	80fb      	strh	r3, [r7, #6]
 8011c7a:	4613      	mov	r3, r2
 8011c7c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011c82:	2300      	movs	r3, #0
 8011c84:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d108      	bne.n	8011c9e <pbuf_copy_partial+0x36>
 8011c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8011d3c <pbuf_copy_partial+0xd4>)
 8011c8e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8011c92:	492b      	ldr	r1, [pc, #172]	@ (8011d40 <pbuf_copy_partial+0xd8>)
 8011c94:	482b      	ldr	r0, [pc, #172]	@ (8011d44 <pbuf_copy_partial+0xdc>)
 8011c96:	f009 fe21 	bl	801b8dc <iprintf>
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	e04a      	b.n	8011d34 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d108      	bne.n	8011cb6 <pbuf_copy_partial+0x4e>
 8011ca4:	4b25      	ldr	r3, [pc, #148]	@ (8011d3c <pbuf_copy_partial+0xd4>)
 8011ca6:	f240 420b 	movw	r2, #1035	@ 0x40b
 8011caa:	4927      	ldr	r1, [pc, #156]	@ (8011d48 <pbuf_copy_partial+0xe0>)
 8011cac:	4825      	ldr	r0, [pc, #148]	@ (8011d44 <pbuf_copy_partial+0xdc>)
 8011cae:	f009 fe15 	bl	801b8dc <iprintf>
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	e03e      	b.n	8011d34 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	61fb      	str	r3, [r7, #28]
 8011cba:	e034      	b.n	8011d26 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011cbc:	88bb      	ldrh	r3, [r7, #4]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d00a      	beq.n	8011cd8 <pbuf_copy_partial+0x70>
 8011cc2:	69fb      	ldr	r3, [r7, #28]
 8011cc4:	895b      	ldrh	r3, [r3, #10]
 8011cc6:	88ba      	ldrh	r2, [r7, #4]
 8011cc8:	429a      	cmp	r2, r3
 8011cca:	d305      	bcc.n	8011cd8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011ccc:	69fb      	ldr	r3, [r7, #28]
 8011cce:	895b      	ldrh	r3, [r3, #10]
 8011cd0:	88ba      	ldrh	r2, [r7, #4]
 8011cd2:	1ad3      	subs	r3, r2, r3
 8011cd4:	80bb      	strh	r3, [r7, #4]
 8011cd6:	e023      	b.n	8011d20 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011cd8:	69fb      	ldr	r3, [r7, #28]
 8011cda:	895a      	ldrh	r2, [r3, #10]
 8011cdc:	88bb      	ldrh	r3, [r7, #4]
 8011cde:	1ad3      	subs	r3, r2, r3
 8011ce0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011ce2:	8b3a      	ldrh	r2, [r7, #24]
 8011ce4:	88fb      	ldrh	r3, [r7, #6]
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d901      	bls.n	8011cee <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011cea:	88fb      	ldrh	r3, [r7, #6]
 8011cec:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8011cee:	8b7b      	ldrh	r3, [r7, #26]
 8011cf0:	68ba      	ldr	r2, [r7, #8]
 8011cf2:	18d0      	adds	r0, r2, r3
 8011cf4:	69fb      	ldr	r3, [r7, #28]
 8011cf6:	685a      	ldr	r2, [r3, #4]
 8011cf8:	88bb      	ldrh	r3, [r7, #4]
 8011cfa:	4413      	add	r3, r2
 8011cfc:	8b3a      	ldrh	r2, [r7, #24]
 8011cfe:	4619      	mov	r1, r3
 8011d00:	f009 ff8b 	bl	801bc1a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011d04:	8afa      	ldrh	r2, [r7, #22]
 8011d06:	8b3b      	ldrh	r3, [r7, #24]
 8011d08:	4413      	add	r3, r2
 8011d0a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011d0c:	8b7a      	ldrh	r2, [r7, #26]
 8011d0e:	8b3b      	ldrh	r3, [r7, #24]
 8011d10:	4413      	add	r3, r2
 8011d12:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011d14:	88fa      	ldrh	r2, [r7, #6]
 8011d16:	8b3b      	ldrh	r3, [r7, #24]
 8011d18:	1ad3      	subs	r3, r2, r3
 8011d1a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011d20:	69fb      	ldr	r3, [r7, #28]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	61fb      	str	r3, [r7, #28]
 8011d26:	88fb      	ldrh	r3, [r7, #6]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d002      	beq.n	8011d32 <pbuf_copy_partial+0xca>
 8011d2c:	69fb      	ldr	r3, [r7, #28]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d1c4      	bne.n	8011cbc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011d32:	8afb      	ldrh	r3, [r7, #22]
}
 8011d34:	4618      	mov	r0, r3
 8011d36:	3720      	adds	r7, #32
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}
 8011d3c:	0801e9f4 	.word	0x0801e9f4
 8011d40:	0801ed3c 	.word	0x0801ed3c
 8011d44:	0801ea54 	.word	0x0801ea54
 8011d48:	0801ed5c 	.word	0x0801ed5c

08011d4c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b084      	sub	sp, #16
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	4603      	mov	r3, r0
 8011d54:	603a      	str	r2, [r7, #0]
 8011d56:	71fb      	strb	r3, [r7, #7]
 8011d58:	460b      	mov	r3, r1
 8011d5a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011d5c:	683b      	ldr	r3, [r7, #0]
 8011d5e:	8919      	ldrh	r1, [r3, #8]
 8011d60:	88ba      	ldrh	r2, [r7, #4]
 8011d62:	79fb      	ldrb	r3, [r7, #7]
 8011d64:	4618      	mov	r0, r3
 8011d66:	f7ff faa5 	bl	80112b4 <pbuf_alloc>
 8011d6a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d101      	bne.n	8011d76 <pbuf_clone+0x2a>
    return NULL;
 8011d72:	2300      	movs	r3, #0
 8011d74:	e011      	b.n	8011d9a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011d76:	6839      	ldr	r1, [r7, #0]
 8011d78:	68f8      	ldr	r0, [r7, #12]
 8011d7a:	f7ff fea3 	bl	8011ac4 <pbuf_copy>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011d82:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d006      	beq.n	8011d98 <pbuf_clone+0x4c>
 8011d8a:	4b06      	ldr	r3, [pc, #24]	@ (8011da4 <pbuf_clone+0x58>)
 8011d8c:	f240 5224 	movw	r2, #1316	@ 0x524
 8011d90:	4905      	ldr	r1, [pc, #20]	@ (8011da8 <pbuf_clone+0x5c>)
 8011d92:	4806      	ldr	r0, [pc, #24]	@ (8011dac <pbuf_clone+0x60>)
 8011d94:	f009 fda2 	bl	801b8dc <iprintf>
  return q;
 8011d98:	68fb      	ldr	r3, [r7, #12]
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3710      	adds	r7, #16
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}
 8011da2:	bf00      	nop
 8011da4:	0801e9f4 	.word	0x0801e9f4
 8011da8:	0801ee68 	.word	0x0801ee68
 8011dac:	0801ea54 	.word	0x0801ea54

08011db0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011db4:	f009 fc92 	bl	801b6dc <rand>
 8011db8:	4603      	mov	r3, r0
 8011dba:	b29b      	uxth	r3, r3
 8011dbc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8011dc6:	b29a      	uxth	r2, r3
 8011dc8:	4b01      	ldr	r3, [pc, #4]	@ (8011dd0 <tcp_init+0x20>)
 8011dca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011dcc:	bf00      	nop
 8011dce:	bd80      	pop	{r7, pc}
 8011dd0:	2000009c 	.word	0x2000009c

08011dd4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b082      	sub	sp, #8
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	7d1b      	ldrb	r3, [r3, #20]
 8011de0:	2b01      	cmp	r3, #1
 8011de2:	d105      	bne.n	8011df0 <tcp_free+0x1c>
 8011de4:	4b06      	ldr	r3, [pc, #24]	@ (8011e00 <tcp_free+0x2c>)
 8011de6:	22d4      	movs	r2, #212	@ 0xd4
 8011de8:	4906      	ldr	r1, [pc, #24]	@ (8011e04 <tcp_free+0x30>)
 8011dea:	4807      	ldr	r0, [pc, #28]	@ (8011e08 <tcp_free+0x34>)
 8011dec:	f009 fd76 	bl	801b8dc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011df0:	6879      	ldr	r1, [r7, #4]
 8011df2:	2001      	movs	r0, #1
 8011df4:	f7fe fed0 	bl	8010b98 <memp_free>
}
 8011df8:	bf00      	nop
 8011dfa:	3708      	adds	r7, #8
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd80      	pop	{r7, pc}
 8011e00:	0801eef4 	.word	0x0801eef4
 8011e04:	0801ef24 	.word	0x0801ef24
 8011e08:	0801ef38 	.word	0x0801ef38

08011e0c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b082      	sub	sp, #8
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	7d1b      	ldrb	r3, [r3, #20]
 8011e18:	2b01      	cmp	r3, #1
 8011e1a:	d105      	bne.n	8011e28 <tcp_free_listen+0x1c>
 8011e1c:	4b06      	ldr	r3, [pc, #24]	@ (8011e38 <tcp_free_listen+0x2c>)
 8011e1e:	22df      	movs	r2, #223	@ 0xdf
 8011e20:	4906      	ldr	r1, [pc, #24]	@ (8011e3c <tcp_free_listen+0x30>)
 8011e22:	4807      	ldr	r0, [pc, #28]	@ (8011e40 <tcp_free_listen+0x34>)
 8011e24:	f009 fd5a 	bl	801b8dc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011e28:	6879      	ldr	r1, [r7, #4]
 8011e2a:	2002      	movs	r0, #2
 8011e2c:	f7fe feb4 	bl	8010b98 <memp_free>
}
 8011e30:	bf00      	nop
 8011e32:	3708      	adds	r7, #8
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}
 8011e38:	0801eef4 	.word	0x0801eef4
 8011e3c:	0801ef60 	.word	0x0801ef60
 8011e40:	0801ef38 	.word	0x0801ef38

08011e44 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011e48:	f001 f85e 	bl	8012f08 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011e4c:	4b07      	ldr	r3, [pc, #28]	@ (8011e6c <tcp_tmr+0x28>)
 8011e4e:	781b      	ldrb	r3, [r3, #0]
 8011e50:	3301      	adds	r3, #1
 8011e52:	b2da      	uxtb	r2, r3
 8011e54:	4b05      	ldr	r3, [pc, #20]	@ (8011e6c <tcp_tmr+0x28>)
 8011e56:	701a      	strb	r2, [r3, #0]
 8011e58:	4b04      	ldr	r3, [pc, #16]	@ (8011e6c <tcp_tmr+0x28>)
 8011e5a:	781b      	ldrb	r3, [r3, #0]
 8011e5c:	f003 0301 	and.w	r3, r3, #1
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d001      	beq.n	8011e68 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011e64:	f000 fd0e 	bl	8012884 <tcp_slowtmr>
  }
}
 8011e68:	bf00      	nop
 8011e6a:	bd80      	pop	{r7, pc}
 8011e6c:	2000c8c5 	.word	0x2000c8c5

08011e70 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b084      	sub	sp, #16
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
 8011e78:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d105      	bne.n	8011e8c <tcp_remove_listener+0x1c>
 8011e80:	4b0d      	ldr	r3, [pc, #52]	@ (8011eb8 <tcp_remove_listener+0x48>)
 8011e82:	22ff      	movs	r2, #255	@ 0xff
 8011e84:	490d      	ldr	r1, [pc, #52]	@ (8011ebc <tcp_remove_listener+0x4c>)
 8011e86:	480e      	ldr	r0, [pc, #56]	@ (8011ec0 <tcp_remove_listener+0x50>)
 8011e88:	f009 fd28 	bl	801b8dc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	60fb      	str	r3, [r7, #12]
 8011e90:	e00a      	b.n	8011ea8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011e96:	683a      	ldr	r2, [r7, #0]
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d102      	bne.n	8011ea2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	68db      	ldr	r3, [r3, #12]
 8011ea6:	60fb      	str	r3, [r7, #12]
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d1f1      	bne.n	8011e92 <tcp_remove_listener+0x22>
    }
  }
}
 8011eae:	bf00      	nop
 8011eb0:	bf00      	nop
 8011eb2:	3710      	adds	r7, #16
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}
 8011eb8:	0801eef4 	.word	0x0801eef4
 8011ebc:	0801ef7c 	.word	0x0801ef7c
 8011ec0:	0801ef38 	.word	0x0801ef38

08011ec4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b084      	sub	sp, #16
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d106      	bne.n	8011ee0 <tcp_listen_closed+0x1c>
 8011ed2:	4b14      	ldr	r3, [pc, #80]	@ (8011f24 <tcp_listen_closed+0x60>)
 8011ed4:	f240 1211 	movw	r2, #273	@ 0x111
 8011ed8:	4913      	ldr	r1, [pc, #76]	@ (8011f28 <tcp_listen_closed+0x64>)
 8011eda:	4814      	ldr	r0, [pc, #80]	@ (8011f2c <tcp_listen_closed+0x68>)
 8011edc:	f009 fcfe 	bl	801b8dc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	7d1b      	ldrb	r3, [r3, #20]
 8011ee4:	2b01      	cmp	r3, #1
 8011ee6:	d006      	beq.n	8011ef6 <tcp_listen_closed+0x32>
 8011ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8011f24 <tcp_listen_closed+0x60>)
 8011eea:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8011eee:	4910      	ldr	r1, [pc, #64]	@ (8011f30 <tcp_listen_closed+0x6c>)
 8011ef0:	480e      	ldr	r0, [pc, #56]	@ (8011f2c <tcp_listen_closed+0x68>)
 8011ef2:	f009 fcf3 	bl	801b8dc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	60fb      	str	r3, [r7, #12]
 8011efa:	e00b      	b.n	8011f14 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011efc:	4a0d      	ldr	r2, [pc, #52]	@ (8011f34 <tcp_listen_closed+0x70>)
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	6879      	ldr	r1, [r7, #4]
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f7ff ffb1 	bl	8011e70 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	3301      	adds	r3, #1
 8011f12:	60fb      	str	r3, [r7, #12]
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	2b03      	cmp	r3, #3
 8011f18:	d9f0      	bls.n	8011efc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011f1a:	bf00      	nop
 8011f1c:	bf00      	nop
 8011f1e:	3710      	adds	r7, #16
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bd80      	pop	{r7, pc}
 8011f24:	0801eef4 	.word	0x0801eef4
 8011f28:	0801efa4 	.word	0x0801efa4
 8011f2c:	0801ef38 	.word	0x0801ef38
 8011f30:	0801efb0 	.word	0x0801efb0
 8011f34:	08020f5c 	.word	0x08020f5c

08011f38 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011f38:	b5b0      	push	{r4, r5, r7, lr}
 8011f3a:	b088      	sub	sp, #32
 8011f3c:	af04      	add	r7, sp, #16
 8011f3e:	6078      	str	r0, [r7, #4]
 8011f40:	460b      	mov	r3, r1
 8011f42:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d106      	bne.n	8011f58 <tcp_close_shutdown+0x20>
 8011f4a:	4b63      	ldr	r3, [pc, #396]	@ (80120d8 <tcp_close_shutdown+0x1a0>)
 8011f4c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8011f50:	4962      	ldr	r1, [pc, #392]	@ (80120dc <tcp_close_shutdown+0x1a4>)
 8011f52:	4863      	ldr	r0, [pc, #396]	@ (80120e0 <tcp_close_shutdown+0x1a8>)
 8011f54:	f009 fcc2 	bl	801b8dc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011f58:	78fb      	ldrb	r3, [r7, #3]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d066      	beq.n	801202c <tcp_close_shutdown+0xf4>
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	7d1b      	ldrb	r3, [r3, #20]
 8011f62:	2b04      	cmp	r3, #4
 8011f64:	d003      	beq.n	8011f6e <tcp_close_shutdown+0x36>
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	7d1b      	ldrb	r3, [r3, #20]
 8011f6a:	2b07      	cmp	r3, #7
 8011f6c:	d15e      	bne.n	801202c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d104      	bne.n	8011f80 <tcp_close_shutdown+0x48>
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011f7a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011f7e:	d055      	beq.n	801202c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	8b5b      	ldrh	r3, [r3, #26]
 8011f84:	f003 0310 	and.w	r3, r3, #16
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d106      	bne.n	8011f9a <tcp_close_shutdown+0x62>
 8011f8c:	4b52      	ldr	r3, [pc, #328]	@ (80120d8 <tcp_close_shutdown+0x1a0>)
 8011f8e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8011f92:	4954      	ldr	r1, [pc, #336]	@ (80120e4 <tcp_close_shutdown+0x1ac>)
 8011f94:	4852      	ldr	r0, [pc, #328]	@ (80120e0 <tcp_close_shutdown+0x1a8>)
 8011f96:	f009 fca1 	bl	801b8dc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011fa2:	687d      	ldr	r5, [r7, #4]
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	3304      	adds	r3, #4
 8011fa8:	687a      	ldr	r2, [r7, #4]
 8011faa:	8ad2      	ldrh	r2, [r2, #22]
 8011fac:	6879      	ldr	r1, [r7, #4]
 8011fae:	8b09      	ldrh	r1, [r1, #24]
 8011fb0:	9102      	str	r1, [sp, #8]
 8011fb2:	9201      	str	r2, [sp, #4]
 8011fb4:	9300      	str	r3, [sp, #0]
 8011fb6:	462b      	mov	r3, r5
 8011fb8:	4622      	mov	r2, r4
 8011fba:	4601      	mov	r1, r0
 8011fbc:	6878      	ldr	r0, [r7, #4]
 8011fbe:	f005 fd43 	bl	8017a48 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011fc2:	6878      	ldr	r0, [r7, #4]
 8011fc4:	f001 fb26 	bl	8013614 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011fc8:	4b47      	ldr	r3, [pc, #284]	@ (80120e8 <tcp_close_shutdown+0x1b0>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	687a      	ldr	r2, [r7, #4]
 8011fce:	429a      	cmp	r2, r3
 8011fd0:	d105      	bne.n	8011fde <tcp_close_shutdown+0xa6>
 8011fd2:	4b45      	ldr	r3, [pc, #276]	@ (80120e8 <tcp_close_shutdown+0x1b0>)
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	68db      	ldr	r3, [r3, #12]
 8011fd8:	4a43      	ldr	r2, [pc, #268]	@ (80120e8 <tcp_close_shutdown+0x1b0>)
 8011fda:	6013      	str	r3, [r2, #0]
 8011fdc:	e013      	b.n	8012006 <tcp_close_shutdown+0xce>
 8011fde:	4b42      	ldr	r3, [pc, #264]	@ (80120e8 <tcp_close_shutdown+0x1b0>)
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	60fb      	str	r3, [r7, #12]
 8011fe4:	e00c      	b.n	8012000 <tcp_close_shutdown+0xc8>
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	68db      	ldr	r3, [r3, #12]
 8011fea:	687a      	ldr	r2, [r7, #4]
 8011fec:	429a      	cmp	r2, r3
 8011fee:	d104      	bne.n	8011ffa <tcp_close_shutdown+0xc2>
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	68da      	ldr	r2, [r3, #12]
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	60da      	str	r2, [r3, #12]
 8011ff8:	e005      	b.n	8012006 <tcp_close_shutdown+0xce>
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	68db      	ldr	r3, [r3, #12]
 8011ffe:	60fb      	str	r3, [r7, #12]
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d1ef      	bne.n	8011fe6 <tcp_close_shutdown+0xae>
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	2200      	movs	r2, #0
 801200a:	60da      	str	r2, [r3, #12]
 801200c:	4b37      	ldr	r3, [pc, #220]	@ (80120ec <tcp_close_shutdown+0x1b4>)
 801200e:	2201      	movs	r2, #1
 8012010:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8012012:	4b37      	ldr	r3, [pc, #220]	@ (80120f0 <tcp_close_shutdown+0x1b8>)
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	687a      	ldr	r2, [r7, #4]
 8012018:	429a      	cmp	r2, r3
 801201a:	d102      	bne.n	8012022 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801201c:	f003 ffba 	bl	8015f94 <tcp_trigger_input_pcb_close>
 8012020:	e002      	b.n	8012028 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	f7ff fed6 	bl	8011dd4 <tcp_free>
      }
      return ERR_OK;
 8012028:	2300      	movs	r3, #0
 801202a:	e050      	b.n	80120ce <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	7d1b      	ldrb	r3, [r3, #20]
 8012030:	2b02      	cmp	r3, #2
 8012032:	d03b      	beq.n	80120ac <tcp_close_shutdown+0x174>
 8012034:	2b02      	cmp	r3, #2
 8012036:	dc44      	bgt.n	80120c2 <tcp_close_shutdown+0x18a>
 8012038:	2b00      	cmp	r3, #0
 801203a:	d002      	beq.n	8012042 <tcp_close_shutdown+0x10a>
 801203c:	2b01      	cmp	r3, #1
 801203e:	d02a      	beq.n	8012096 <tcp_close_shutdown+0x15e>
 8012040:	e03f      	b.n	80120c2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	8adb      	ldrh	r3, [r3, #22]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d021      	beq.n	801208e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801204a:	4b2a      	ldr	r3, [pc, #168]	@ (80120f4 <tcp_close_shutdown+0x1bc>)
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	687a      	ldr	r2, [r7, #4]
 8012050:	429a      	cmp	r2, r3
 8012052:	d105      	bne.n	8012060 <tcp_close_shutdown+0x128>
 8012054:	4b27      	ldr	r3, [pc, #156]	@ (80120f4 <tcp_close_shutdown+0x1bc>)
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	68db      	ldr	r3, [r3, #12]
 801205a:	4a26      	ldr	r2, [pc, #152]	@ (80120f4 <tcp_close_shutdown+0x1bc>)
 801205c:	6013      	str	r3, [r2, #0]
 801205e:	e013      	b.n	8012088 <tcp_close_shutdown+0x150>
 8012060:	4b24      	ldr	r3, [pc, #144]	@ (80120f4 <tcp_close_shutdown+0x1bc>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	60bb      	str	r3, [r7, #8]
 8012066:	e00c      	b.n	8012082 <tcp_close_shutdown+0x14a>
 8012068:	68bb      	ldr	r3, [r7, #8]
 801206a:	68db      	ldr	r3, [r3, #12]
 801206c:	687a      	ldr	r2, [r7, #4]
 801206e:	429a      	cmp	r2, r3
 8012070:	d104      	bne.n	801207c <tcp_close_shutdown+0x144>
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	68da      	ldr	r2, [r3, #12]
 8012076:	68bb      	ldr	r3, [r7, #8]
 8012078:	60da      	str	r2, [r3, #12]
 801207a:	e005      	b.n	8012088 <tcp_close_shutdown+0x150>
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	68db      	ldr	r3, [r3, #12]
 8012080:	60bb      	str	r3, [r7, #8]
 8012082:	68bb      	ldr	r3, [r7, #8]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d1ef      	bne.n	8012068 <tcp_close_shutdown+0x130>
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2200      	movs	r2, #0
 801208c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801208e:	6878      	ldr	r0, [r7, #4]
 8012090:	f7ff fea0 	bl	8011dd4 <tcp_free>
      break;
 8012094:	e01a      	b.n	80120cc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012096:	6878      	ldr	r0, [r7, #4]
 8012098:	f7ff ff14 	bl	8011ec4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801209c:	6879      	ldr	r1, [r7, #4]
 801209e:	4816      	ldr	r0, [pc, #88]	@ (80120f8 <tcp_close_shutdown+0x1c0>)
 80120a0:	f001 fb08 	bl	80136b4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80120a4:	6878      	ldr	r0, [r7, #4]
 80120a6:	f7ff feb1 	bl	8011e0c <tcp_free_listen>
      break;
 80120aa:	e00f      	b.n	80120cc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80120ac:	6879      	ldr	r1, [r7, #4]
 80120ae:	480e      	ldr	r0, [pc, #56]	@ (80120e8 <tcp_close_shutdown+0x1b0>)
 80120b0:	f001 fb00 	bl	80136b4 <tcp_pcb_remove>
 80120b4:	4b0d      	ldr	r3, [pc, #52]	@ (80120ec <tcp_close_shutdown+0x1b4>)
 80120b6:	2201      	movs	r2, #1
 80120b8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f7ff fe8a 	bl	8011dd4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80120c0:	e004      	b.n	80120cc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80120c2:	6878      	ldr	r0, [r7, #4]
 80120c4:	f000 f81a 	bl	80120fc <tcp_close_shutdown_fin>
 80120c8:	4603      	mov	r3, r0
 80120ca:	e000      	b.n	80120ce <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80120cc:	2300      	movs	r3, #0
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	3710      	adds	r7, #16
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bdb0      	pop	{r4, r5, r7, pc}
 80120d6:	bf00      	nop
 80120d8:	0801eef4 	.word	0x0801eef4
 80120dc:	0801efc8 	.word	0x0801efc8
 80120e0:	0801ef38 	.word	0x0801ef38
 80120e4:	0801efe8 	.word	0x0801efe8
 80120e8:	2000c8bc 	.word	0x2000c8bc
 80120ec:	2000c8c4 	.word	0x2000c8c4
 80120f0:	2000c8fc 	.word	0x2000c8fc
 80120f4:	2000c8b4 	.word	0x2000c8b4
 80120f8:	2000c8b8 	.word	0x2000c8b8

080120fc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b084      	sub	sp, #16
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d106      	bne.n	8012118 <tcp_close_shutdown_fin+0x1c>
 801210a:	4b2e      	ldr	r3, [pc, #184]	@ (80121c4 <tcp_close_shutdown_fin+0xc8>)
 801210c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8012110:	492d      	ldr	r1, [pc, #180]	@ (80121c8 <tcp_close_shutdown_fin+0xcc>)
 8012112:	482e      	ldr	r0, [pc, #184]	@ (80121cc <tcp_close_shutdown_fin+0xd0>)
 8012114:	f009 fbe2 	bl	801b8dc <iprintf>

  switch (pcb->state) {
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	7d1b      	ldrb	r3, [r3, #20]
 801211c:	2b07      	cmp	r3, #7
 801211e:	d020      	beq.n	8012162 <tcp_close_shutdown_fin+0x66>
 8012120:	2b07      	cmp	r3, #7
 8012122:	dc2b      	bgt.n	801217c <tcp_close_shutdown_fin+0x80>
 8012124:	2b03      	cmp	r3, #3
 8012126:	d002      	beq.n	801212e <tcp_close_shutdown_fin+0x32>
 8012128:	2b04      	cmp	r3, #4
 801212a:	d00d      	beq.n	8012148 <tcp_close_shutdown_fin+0x4c>
 801212c:	e026      	b.n	801217c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f004 fd98 	bl	8016c64 <tcp_send_fin>
 8012134:	4603      	mov	r3, r0
 8012136:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d11f      	bne.n	8012180 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	2205      	movs	r2, #5
 8012144:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012146:	e01b      	b.n	8012180 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012148:	6878      	ldr	r0, [r7, #4]
 801214a:	f004 fd8b 	bl	8016c64 <tcp_send_fin>
 801214e:	4603      	mov	r3, r0
 8012150:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d114      	bne.n	8012184 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2205      	movs	r2, #5
 801215e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012160:	e010      	b.n	8012184 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f004 fd7e 	bl	8016c64 <tcp_send_fin>
 8012168:	4603      	mov	r3, r0
 801216a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801216c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d109      	bne.n	8012188 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2209      	movs	r2, #9
 8012178:	751a      	strb	r2, [r3, #20]
      }
      break;
 801217a:	e005      	b.n	8012188 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801217c:	2300      	movs	r3, #0
 801217e:	e01c      	b.n	80121ba <tcp_close_shutdown_fin+0xbe>
      break;
 8012180:	bf00      	nop
 8012182:	e002      	b.n	801218a <tcp_close_shutdown_fin+0x8e>
      break;
 8012184:	bf00      	nop
 8012186:	e000      	b.n	801218a <tcp_close_shutdown_fin+0x8e>
      break;
 8012188:	bf00      	nop
  }

  if (err == ERR_OK) {
 801218a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d103      	bne.n	801219a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8012192:	6878      	ldr	r0, [r7, #4]
 8012194:	f004 fea4 	bl	8016ee0 <tcp_output>
 8012198:	e00d      	b.n	80121b6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801219a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801219e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121a2:	d108      	bne.n	80121b6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	8b5b      	ldrh	r3, [r3, #26]
 80121a8:	f043 0308 	orr.w	r3, r3, #8
 80121ac:	b29a      	uxth	r2, r3
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80121b2:	2300      	movs	r3, #0
 80121b4:	e001      	b.n	80121ba <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80121b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3710      	adds	r7, #16
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}
 80121c2:	bf00      	nop
 80121c4:	0801eef4 	.word	0x0801eef4
 80121c8:	0801efa4 	.word	0x0801efa4
 80121cc:	0801ef38 	.word	0x0801ef38

080121d0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b082      	sub	sp, #8
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d109      	bne.n	80121f2 <tcp_close+0x22>
 80121de:	4b0f      	ldr	r3, [pc, #60]	@ (801221c <tcp_close+0x4c>)
 80121e0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80121e4:	490e      	ldr	r1, [pc, #56]	@ (8012220 <tcp_close+0x50>)
 80121e6:	480f      	ldr	r0, [pc, #60]	@ (8012224 <tcp_close+0x54>)
 80121e8:	f009 fb78 	bl	801b8dc <iprintf>
 80121ec:	f06f 030f 	mvn.w	r3, #15
 80121f0:	e00f      	b.n	8012212 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	7d1b      	ldrb	r3, [r3, #20]
 80121f6:	2b01      	cmp	r3, #1
 80121f8:	d006      	beq.n	8012208 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	8b5b      	ldrh	r3, [r3, #26]
 80121fe:	f043 0310 	orr.w	r3, r3, #16
 8012202:	b29a      	uxth	r2, r3
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012208:	2101      	movs	r1, #1
 801220a:	6878      	ldr	r0, [r7, #4]
 801220c:	f7ff fe94 	bl	8011f38 <tcp_close_shutdown>
 8012210:	4603      	mov	r3, r0
}
 8012212:	4618      	mov	r0, r3
 8012214:	3708      	adds	r7, #8
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}
 801221a:	bf00      	nop
 801221c:	0801eef4 	.word	0x0801eef4
 8012220:	0801f004 	.word	0x0801f004
 8012224:	0801ef38 	.word	0x0801ef38

08012228 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b08e      	sub	sp, #56	@ 0x38
 801222c:	af04      	add	r7, sp, #16
 801222e:	6078      	str	r0, [r7, #4]
 8012230:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d107      	bne.n	8012248 <tcp_abandon+0x20>
 8012238:	4b52      	ldr	r3, [pc, #328]	@ (8012384 <tcp_abandon+0x15c>)
 801223a:	f240 223d 	movw	r2, #573	@ 0x23d
 801223e:	4952      	ldr	r1, [pc, #328]	@ (8012388 <tcp_abandon+0x160>)
 8012240:	4852      	ldr	r0, [pc, #328]	@ (801238c <tcp_abandon+0x164>)
 8012242:	f009 fb4b 	bl	801b8dc <iprintf>
 8012246:	e099      	b.n	801237c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	7d1b      	ldrb	r3, [r3, #20]
 801224c:	2b01      	cmp	r3, #1
 801224e:	d106      	bne.n	801225e <tcp_abandon+0x36>
 8012250:	4b4c      	ldr	r3, [pc, #304]	@ (8012384 <tcp_abandon+0x15c>)
 8012252:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8012256:	494e      	ldr	r1, [pc, #312]	@ (8012390 <tcp_abandon+0x168>)
 8012258:	484c      	ldr	r0, [pc, #304]	@ (801238c <tcp_abandon+0x164>)
 801225a:	f009 fb3f 	bl	801b8dc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	7d1b      	ldrb	r3, [r3, #20]
 8012262:	2b0a      	cmp	r3, #10
 8012264:	d107      	bne.n	8012276 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012266:	6879      	ldr	r1, [r7, #4]
 8012268:	484a      	ldr	r0, [pc, #296]	@ (8012394 <tcp_abandon+0x16c>)
 801226a:	f001 fa23 	bl	80136b4 <tcp_pcb_remove>
    tcp_free(pcb);
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f7ff fdb0 	bl	8011dd4 <tcp_free>
 8012274:	e082      	b.n	801237c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8012276:	2300      	movs	r3, #0
 8012278:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801227a:	2300      	movs	r3, #0
 801227c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012282:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012288:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012290:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	691b      	ldr	r3, [r3, #16]
 8012296:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	7d1b      	ldrb	r3, [r3, #20]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d126      	bne.n	80122ee <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	8adb      	ldrh	r3, [r3, #22]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d02e      	beq.n	8012306 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80122a8:	4b3b      	ldr	r3, [pc, #236]	@ (8012398 <tcp_abandon+0x170>)
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	687a      	ldr	r2, [r7, #4]
 80122ae:	429a      	cmp	r2, r3
 80122b0:	d105      	bne.n	80122be <tcp_abandon+0x96>
 80122b2:	4b39      	ldr	r3, [pc, #228]	@ (8012398 <tcp_abandon+0x170>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	68db      	ldr	r3, [r3, #12]
 80122b8:	4a37      	ldr	r2, [pc, #220]	@ (8012398 <tcp_abandon+0x170>)
 80122ba:	6013      	str	r3, [r2, #0]
 80122bc:	e013      	b.n	80122e6 <tcp_abandon+0xbe>
 80122be:	4b36      	ldr	r3, [pc, #216]	@ (8012398 <tcp_abandon+0x170>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	61fb      	str	r3, [r7, #28]
 80122c4:	e00c      	b.n	80122e0 <tcp_abandon+0xb8>
 80122c6:	69fb      	ldr	r3, [r7, #28]
 80122c8:	68db      	ldr	r3, [r3, #12]
 80122ca:	687a      	ldr	r2, [r7, #4]
 80122cc:	429a      	cmp	r2, r3
 80122ce:	d104      	bne.n	80122da <tcp_abandon+0xb2>
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	68da      	ldr	r2, [r3, #12]
 80122d4:	69fb      	ldr	r3, [r7, #28]
 80122d6:	60da      	str	r2, [r3, #12]
 80122d8:	e005      	b.n	80122e6 <tcp_abandon+0xbe>
 80122da:	69fb      	ldr	r3, [r7, #28]
 80122dc:	68db      	ldr	r3, [r3, #12]
 80122de:	61fb      	str	r3, [r7, #28]
 80122e0:	69fb      	ldr	r3, [r7, #28]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d1ef      	bne.n	80122c6 <tcp_abandon+0x9e>
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	2200      	movs	r2, #0
 80122ea:	60da      	str	r2, [r3, #12]
 80122ec:	e00b      	b.n	8012306 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80122ee:	683b      	ldr	r3, [r7, #0]
 80122f0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	8adb      	ldrh	r3, [r3, #22]
 80122f6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80122f8:	6879      	ldr	r1, [r7, #4]
 80122fa:	4828      	ldr	r0, [pc, #160]	@ (801239c <tcp_abandon+0x174>)
 80122fc:	f001 f9da 	bl	80136b4 <tcp_pcb_remove>
 8012300:	4b27      	ldr	r3, [pc, #156]	@ (80123a0 <tcp_abandon+0x178>)
 8012302:	2201      	movs	r2, #1
 8012304:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801230a:	2b00      	cmp	r3, #0
 801230c:	d004      	beq.n	8012318 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012312:	4618      	mov	r0, r3
 8012314:	f000 fed8 	bl	80130c8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801231c:	2b00      	cmp	r3, #0
 801231e:	d004      	beq.n	801232a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012324:	4618      	mov	r0, r3
 8012326:	f000 fecf 	bl	80130c8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801232e:	2b00      	cmp	r3, #0
 8012330:	d004      	beq.n	801233c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012336:	4618      	mov	r0, r3
 8012338:	f000 fec6 	bl	80130c8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801233c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801233e:	2b00      	cmp	r3, #0
 8012340:	d00e      	beq.n	8012360 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8012342:	6879      	ldr	r1, [r7, #4]
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	3304      	adds	r3, #4
 8012348:	687a      	ldr	r2, [r7, #4]
 801234a:	8b12      	ldrh	r2, [r2, #24]
 801234c:	9202      	str	r2, [sp, #8]
 801234e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012350:	9201      	str	r2, [sp, #4]
 8012352:	9300      	str	r3, [sp, #0]
 8012354:	460b      	mov	r3, r1
 8012356:	697a      	ldr	r2, [r7, #20]
 8012358:	69b9      	ldr	r1, [r7, #24]
 801235a:	6878      	ldr	r0, [r7, #4]
 801235c:	f005 fb74 	bl	8017a48 <tcp_rst>
    }
    last_state = pcb->state;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	7d1b      	ldrb	r3, [r3, #20]
 8012364:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8012366:	6878      	ldr	r0, [r7, #4]
 8012368:	f7ff fd34 	bl	8011dd4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801236c:	693b      	ldr	r3, [r7, #16]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d004      	beq.n	801237c <tcp_abandon+0x154>
 8012372:	693b      	ldr	r3, [r7, #16]
 8012374:	f06f 010c 	mvn.w	r1, #12
 8012378:	68f8      	ldr	r0, [r7, #12]
 801237a:	4798      	blx	r3
  }
}
 801237c:	3728      	adds	r7, #40	@ 0x28
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}
 8012382:	bf00      	nop
 8012384:	0801eef4 	.word	0x0801eef4
 8012388:	0801f038 	.word	0x0801f038
 801238c:	0801ef38 	.word	0x0801ef38
 8012390:	0801f054 	.word	0x0801f054
 8012394:	2000c8c0 	.word	0x2000c8c0
 8012398:	2000c8b4 	.word	0x2000c8b4
 801239c:	2000c8bc 	.word	0x2000c8bc
 80123a0:	2000c8c4 	.word	0x2000c8c4

080123a4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80123ac:	2101      	movs	r1, #1
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f7ff ff3a 	bl	8012228 <tcp_abandon>
}
 80123b4:	bf00      	nop
 80123b6:	3708      	adds	r7, #8
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bd80      	pop	{r7, pc}

080123bc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b088      	sub	sp, #32
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	60f8      	str	r0, [r7, #12]
 80123c4:	60b9      	str	r1, [r7, #8]
 80123c6:	4613      	mov	r3, r2
 80123c8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80123ca:	2304      	movs	r3, #4
 80123cc:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80123ce:	68bb      	ldr	r3, [r7, #8]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d101      	bne.n	80123d8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80123d4:	4b3e      	ldr	r3, [pc, #248]	@ (80124d0 <tcp_bind+0x114>)
 80123d6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d109      	bne.n	80123f2 <tcp_bind+0x36>
 80123de:	4b3d      	ldr	r3, [pc, #244]	@ (80124d4 <tcp_bind+0x118>)
 80123e0:	f240 22a9 	movw	r2, #681	@ 0x2a9
 80123e4:	493c      	ldr	r1, [pc, #240]	@ (80124d8 <tcp_bind+0x11c>)
 80123e6:	483d      	ldr	r0, [pc, #244]	@ (80124dc <tcp_bind+0x120>)
 80123e8:	f009 fa78 	bl	801b8dc <iprintf>
 80123ec:	f06f 030f 	mvn.w	r3, #15
 80123f0:	e06a      	b.n	80124c8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	7d1b      	ldrb	r3, [r3, #20]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d009      	beq.n	801240e <tcp_bind+0x52>
 80123fa:	4b36      	ldr	r3, [pc, #216]	@ (80124d4 <tcp_bind+0x118>)
 80123fc:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8012400:	4937      	ldr	r1, [pc, #220]	@ (80124e0 <tcp_bind+0x124>)
 8012402:	4836      	ldr	r0, [pc, #216]	@ (80124dc <tcp_bind+0x120>)
 8012404:	f009 fa6a 	bl	801b8dc <iprintf>
 8012408:	f06f 0305 	mvn.w	r3, #5
 801240c:	e05c      	b.n	80124c8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801240e:	88fb      	ldrh	r3, [r7, #6]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d109      	bne.n	8012428 <tcp_bind+0x6c>
    port = tcp_new_port();
 8012414:	f000 f9f0 	bl	80127f8 <tcp_new_port>
 8012418:	4603      	mov	r3, r0
 801241a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801241c:	88fb      	ldrh	r3, [r7, #6]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d135      	bne.n	801248e <tcp_bind+0xd2>
      return ERR_BUF;
 8012422:	f06f 0301 	mvn.w	r3, #1
 8012426:	e04f      	b.n	80124c8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8012428:	2300      	movs	r3, #0
 801242a:	61fb      	str	r3, [r7, #28]
 801242c:	e02b      	b.n	8012486 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801242e:	4a2d      	ldr	r2, [pc, #180]	@ (80124e4 <tcp_bind+0x128>)
 8012430:	69fb      	ldr	r3, [r7, #28]
 8012432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	61bb      	str	r3, [r7, #24]
 801243a:	e01e      	b.n	801247a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801243c:	69bb      	ldr	r3, [r7, #24]
 801243e:	8adb      	ldrh	r3, [r3, #22]
 8012440:	88fa      	ldrh	r2, [r7, #6]
 8012442:	429a      	cmp	r2, r3
 8012444:	d116      	bne.n	8012474 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8012446:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012448:	2b00      	cmp	r3, #0
 801244a:	d010      	beq.n	801246e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801244c:	69bb      	ldr	r3, [r7, #24]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d00c      	beq.n	801246e <tcp_bind+0xb2>
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d009      	beq.n	801246e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d005      	beq.n	801246e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8012462:	69bb      	ldr	r3, [r7, #24]
 8012464:	681a      	ldr	r2, [r3, #0]
 8012466:	68bb      	ldr	r3, [r7, #8]
 8012468:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801246a:	429a      	cmp	r2, r3
 801246c:	d102      	bne.n	8012474 <tcp_bind+0xb8>
              return ERR_USE;
 801246e:	f06f 0307 	mvn.w	r3, #7
 8012472:	e029      	b.n	80124c8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012474:	69bb      	ldr	r3, [r7, #24]
 8012476:	68db      	ldr	r3, [r3, #12]
 8012478:	61bb      	str	r3, [r7, #24]
 801247a:	69bb      	ldr	r3, [r7, #24]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d1dd      	bne.n	801243c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8012480:	69fb      	ldr	r3, [r7, #28]
 8012482:	3301      	adds	r3, #1
 8012484:	61fb      	str	r3, [r7, #28]
 8012486:	69fa      	ldr	r2, [r7, #28]
 8012488:	697b      	ldr	r3, [r7, #20]
 801248a:	429a      	cmp	r2, r3
 801248c:	dbcf      	blt.n	801242e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d00c      	beq.n	80124ae <tcp_bind+0xf2>
 8012494:	68bb      	ldr	r3, [r7, #8]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d008      	beq.n	80124ae <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801249c:	68bb      	ldr	r3, [r7, #8]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d002      	beq.n	80124a8 <tcp_bind+0xec>
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	e000      	b.n	80124aa <tcp_bind+0xee>
 80124a8:	2300      	movs	r3, #0
 80124aa:	68fa      	ldr	r2, [r7, #12]
 80124ac:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	88fa      	ldrh	r2, [r7, #6]
 80124b2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80124b4:	4b0c      	ldr	r3, [pc, #48]	@ (80124e8 <tcp_bind+0x12c>)
 80124b6:	681a      	ldr	r2, [r3, #0]
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	60da      	str	r2, [r3, #12]
 80124bc:	4a0a      	ldr	r2, [pc, #40]	@ (80124e8 <tcp_bind+0x12c>)
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	6013      	str	r3, [r2, #0]
 80124c2:	f005 fc83 	bl	8017dcc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80124c6:	2300      	movs	r3, #0
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3720      	adds	r7, #32
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	08020f84 	.word	0x08020f84
 80124d4:	0801eef4 	.word	0x0801eef4
 80124d8:	0801f088 	.word	0x0801f088
 80124dc:	0801ef38 	.word	0x0801ef38
 80124e0:	0801f0a0 	.word	0x0801f0a0
 80124e4:	08020f5c 	.word	0x08020f5c
 80124e8:	2000c8b4 	.word	0x2000c8b4

080124ec <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b084      	sub	sp, #16
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	60f8      	str	r0, [r7, #12]
 80124f4:	60b9      	str	r1, [r7, #8]
 80124f6:	4613      	mov	r3, r2
 80124f8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d106      	bne.n	801250e <tcp_accept_null+0x22>
 8012500:	4b07      	ldr	r3, [pc, #28]	@ (8012520 <tcp_accept_null+0x34>)
 8012502:	f240 320f 	movw	r2, #783	@ 0x30f
 8012506:	4907      	ldr	r1, [pc, #28]	@ (8012524 <tcp_accept_null+0x38>)
 8012508:	4807      	ldr	r0, [pc, #28]	@ (8012528 <tcp_accept_null+0x3c>)
 801250a:	f009 f9e7 	bl	801b8dc <iprintf>

  tcp_abort(pcb);
 801250e:	68b8      	ldr	r0, [r7, #8]
 8012510:	f7ff ff48 	bl	80123a4 <tcp_abort>

  return ERR_ABRT;
 8012514:	f06f 030c 	mvn.w	r3, #12
}
 8012518:	4618      	mov	r0, r3
 801251a:	3710      	adds	r7, #16
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}
 8012520:	0801eef4 	.word	0x0801eef4
 8012524:	0801f0c8 	.word	0x0801f0c8
 8012528:	0801ef38 	.word	0x0801ef38

0801252c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b082      	sub	sp, #8
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
 8012534:	460b      	mov	r3, r1
 8012536:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8012538:	78fb      	ldrb	r3, [r7, #3]
 801253a:	2200      	movs	r2, #0
 801253c:	4619      	mov	r1, r3
 801253e:	6878      	ldr	r0, [r7, #4]
 8012540:	f000 f806 	bl	8012550 <tcp_listen_with_backlog_and_err>
 8012544:	4603      	mov	r3, r0
}
 8012546:	4618      	mov	r0, r3
 8012548:	3708      	adds	r7, #8
 801254a:	46bd      	mov	sp, r7
 801254c:	bd80      	pop	{r7, pc}
	...

08012550 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b088      	sub	sp, #32
 8012554:	af00      	add	r7, sp, #0
 8012556:	60f8      	str	r0, [r7, #12]
 8012558:	460b      	mov	r3, r1
 801255a:	607a      	str	r2, [r7, #4]
 801255c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801255e:	2300      	movs	r3, #0
 8012560:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d109      	bne.n	801257c <tcp_listen_with_backlog_and_err+0x2c>
 8012568:	4b47      	ldr	r3, [pc, #284]	@ (8012688 <tcp_listen_with_backlog_and_err+0x138>)
 801256a:	f240 3259 	movw	r2, #857	@ 0x359
 801256e:	4947      	ldr	r1, [pc, #284]	@ (801268c <tcp_listen_with_backlog_and_err+0x13c>)
 8012570:	4847      	ldr	r0, [pc, #284]	@ (8012690 <tcp_listen_with_backlog_and_err+0x140>)
 8012572:	f009 f9b3 	bl	801b8dc <iprintf>
 8012576:	23f0      	movs	r3, #240	@ 0xf0
 8012578:	76fb      	strb	r3, [r7, #27]
 801257a:	e079      	b.n	8012670 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	7d1b      	ldrb	r3, [r3, #20]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d009      	beq.n	8012598 <tcp_listen_with_backlog_and_err+0x48>
 8012584:	4b40      	ldr	r3, [pc, #256]	@ (8012688 <tcp_listen_with_backlog_and_err+0x138>)
 8012586:	f240 325a 	movw	r2, #858	@ 0x35a
 801258a:	4942      	ldr	r1, [pc, #264]	@ (8012694 <tcp_listen_with_backlog_and_err+0x144>)
 801258c:	4840      	ldr	r0, [pc, #256]	@ (8012690 <tcp_listen_with_backlog_and_err+0x140>)
 801258e:	f009 f9a5 	bl	801b8dc <iprintf>
 8012592:	23f1      	movs	r3, #241	@ 0xf1
 8012594:	76fb      	strb	r3, [r7, #27]
 8012596:	e06b      	b.n	8012670 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	7d1b      	ldrb	r3, [r3, #20]
 801259c:	2b01      	cmp	r3, #1
 801259e:	d104      	bne.n	80125aa <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80125a4:	23f7      	movs	r3, #247	@ 0xf7
 80125a6:	76fb      	strb	r3, [r7, #27]
    goto done;
 80125a8:	e062      	b.n	8012670 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80125aa:	2002      	movs	r0, #2
 80125ac:	f7fe fa7e 	bl	8010aac <memp_malloc>
 80125b0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80125b2:	69fb      	ldr	r3, [r7, #28]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d102      	bne.n	80125be <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80125b8:	23ff      	movs	r3, #255	@ 0xff
 80125ba:	76fb      	strb	r3, [r7, #27]
    goto done;
 80125bc:	e058      	b.n	8012670 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	691a      	ldr	r2, [r3, #16]
 80125c2:	69fb      	ldr	r3, [r7, #28]
 80125c4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	8ada      	ldrh	r2, [r3, #22]
 80125ca:	69fb      	ldr	r3, [r7, #28]
 80125cc:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80125ce:	69fb      	ldr	r3, [r7, #28]
 80125d0:	2201      	movs	r2, #1
 80125d2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	7d5a      	ldrb	r2, [r3, #21]
 80125d8:	69fb      	ldr	r3, [r7, #28]
 80125da:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	7a5a      	ldrb	r2, [r3, #9]
 80125e0:	69fb      	ldr	r3, [r7, #28]
 80125e2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80125e4:	69fb      	ldr	r3, [r7, #28]
 80125e6:	2200      	movs	r2, #0
 80125e8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	7ada      	ldrb	r2, [r3, #11]
 80125ee:	69fb      	ldr	r3, [r7, #28]
 80125f0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	7a9a      	ldrb	r2, [r3, #10]
 80125f6:	69fb      	ldr	r3, [r7, #28]
 80125f8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	681a      	ldr	r2, [r3, #0]
 80125fe:	69fb      	ldr	r3, [r7, #28]
 8012600:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	8adb      	ldrh	r3, [r3, #22]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d021      	beq.n	801264e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801260a:	4b23      	ldr	r3, [pc, #140]	@ (8012698 <tcp_listen_with_backlog_and_err+0x148>)
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	68fa      	ldr	r2, [r7, #12]
 8012610:	429a      	cmp	r2, r3
 8012612:	d105      	bne.n	8012620 <tcp_listen_with_backlog_and_err+0xd0>
 8012614:	4b20      	ldr	r3, [pc, #128]	@ (8012698 <tcp_listen_with_backlog_and_err+0x148>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	68db      	ldr	r3, [r3, #12]
 801261a:	4a1f      	ldr	r2, [pc, #124]	@ (8012698 <tcp_listen_with_backlog_and_err+0x148>)
 801261c:	6013      	str	r3, [r2, #0]
 801261e:	e013      	b.n	8012648 <tcp_listen_with_backlog_and_err+0xf8>
 8012620:	4b1d      	ldr	r3, [pc, #116]	@ (8012698 <tcp_listen_with_backlog_and_err+0x148>)
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	617b      	str	r3, [r7, #20]
 8012626:	e00c      	b.n	8012642 <tcp_listen_with_backlog_and_err+0xf2>
 8012628:	697b      	ldr	r3, [r7, #20]
 801262a:	68db      	ldr	r3, [r3, #12]
 801262c:	68fa      	ldr	r2, [r7, #12]
 801262e:	429a      	cmp	r2, r3
 8012630:	d104      	bne.n	801263c <tcp_listen_with_backlog_and_err+0xec>
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	68da      	ldr	r2, [r3, #12]
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	60da      	str	r2, [r3, #12]
 801263a:	e005      	b.n	8012648 <tcp_listen_with_backlog_and_err+0xf8>
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	68db      	ldr	r3, [r3, #12]
 8012640:	617b      	str	r3, [r7, #20]
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d1ef      	bne.n	8012628 <tcp_listen_with_backlog_and_err+0xd8>
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	2200      	movs	r2, #0
 801264c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801264e:	68f8      	ldr	r0, [r7, #12]
 8012650:	f7ff fbc0 	bl	8011dd4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8012654:	69fb      	ldr	r3, [r7, #28]
 8012656:	4a11      	ldr	r2, [pc, #68]	@ (801269c <tcp_listen_with_backlog_and_err+0x14c>)
 8012658:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801265a:	4b11      	ldr	r3, [pc, #68]	@ (80126a0 <tcp_listen_with_backlog_and_err+0x150>)
 801265c:	681a      	ldr	r2, [r3, #0]
 801265e:	69fb      	ldr	r3, [r7, #28]
 8012660:	60da      	str	r2, [r3, #12]
 8012662:	4a0f      	ldr	r2, [pc, #60]	@ (80126a0 <tcp_listen_with_backlog_and_err+0x150>)
 8012664:	69fb      	ldr	r3, [r7, #28]
 8012666:	6013      	str	r3, [r2, #0]
 8012668:	f005 fbb0 	bl	8017dcc <tcp_timer_needed>
  res = ERR_OK;
 801266c:	2300      	movs	r3, #0
 801266e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d002      	beq.n	801267c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	7efa      	ldrb	r2, [r7, #27]
 801267a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801267c:	69fb      	ldr	r3, [r7, #28]
}
 801267e:	4618      	mov	r0, r3
 8012680:	3720      	adds	r7, #32
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}
 8012686:	bf00      	nop
 8012688:	0801eef4 	.word	0x0801eef4
 801268c:	0801f0e8 	.word	0x0801f0e8
 8012690:	0801ef38 	.word	0x0801ef38
 8012694:	0801f118 	.word	0x0801f118
 8012698:	2000c8b4 	.word	0x2000c8b4
 801269c:	080124ed 	.word	0x080124ed
 80126a0:	2000c8b8 	.word	0x2000c8b8

080126a4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b084      	sub	sp, #16
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d106      	bne.n	80126c0 <tcp_update_rcv_ann_wnd+0x1c>
 80126b2:	4b25      	ldr	r3, [pc, #148]	@ (8012748 <tcp_update_rcv_ann_wnd+0xa4>)
 80126b4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80126b8:	4924      	ldr	r1, [pc, #144]	@ (801274c <tcp_update_rcv_ann_wnd+0xa8>)
 80126ba:	4825      	ldr	r0, [pc, #148]	@ (8012750 <tcp_update_rcv_ann_wnd+0xac>)
 80126bc:	f009 f90e 	bl	801b8dc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126c4:	687a      	ldr	r2, [r7, #4]
 80126c6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80126c8:	4413      	add	r3, r2
 80126ca:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126d0:	687a      	ldr	r2, [r7, #4]
 80126d2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80126d4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80126d8:	bf28      	it	cs
 80126da:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80126de:	b292      	uxth	r2, r2
 80126e0:	4413      	add	r3, r2
 80126e2:	68fa      	ldr	r2, [r7, #12]
 80126e4:	1ad3      	subs	r3, r2, r3
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	db08      	blt.n	80126fc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126f6:	68fa      	ldr	r2, [r7, #12]
 80126f8:	1ad3      	subs	r3, r2, r3
 80126fa:	e020      	b.n	801273e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012704:	1ad3      	subs	r3, r2, r3
 8012706:	2b00      	cmp	r3, #0
 8012708:	dd03      	ble.n	8012712 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2200      	movs	r2, #0
 801270e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012710:	e014      	b.n	801273c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801271a:	1ad3      	subs	r3, r2, r3
 801271c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801271e:	68bb      	ldr	r3, [r7, #8]
 8012720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012724:	d306      	bcc.n	8012734 <tcp_update_rcv_ann_wnd+0x90>
 8012726:	4b08      	ldr	r3, [pc, #32]	@ (8012748 <tcp_update_rcv_ann_wnd+0xa4>)
 8012728:	f240 32b6 	movw	r2, #950	@ 0x3b6
 801272c:	4909      	ldr	r1, [pc, #36]	@ (8012754 <tcp_update_rcv_ann_wnd+0xb0>)
 801272e:	4808      	ldr	r0, [pc, #32]	@ (8012750 <tcp_update_rcv_ann_wnd+0xac>)
 8012730:	f009 f8d4 	bl	801b8dc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012734:	68bb      	ldr	r3, [r7, #8]
 8012736:	b29a      	uxth	r2, r3
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 801273c:	2300      	movs	r3, #0
  }
}
 801273e:	4618      	mov	r0, r3
 8012740:	3710      	adds	r7, #16
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}
 8012746:	bf00      	nop
 8012748:	0801eef4 	.word	0x0801eef4
 801274c:	0801f150 	.word	0x0801f150
 8012750:	0801ef38 	.word	0x0801ef38
 8012754:	0801f174 	.word	0x0801f174

08012758 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b084      	sub	sp, #16
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
 8012760:	460b      	mov	r3, r1
 8012762:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d107      	bne.n	801277a <tcp_recved+0x22>
 801276a:	4b1f      	ldr	r3, [pc, #124]	@ (80127e8 <tcp_recved+0x90>)
 801276c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8012770:	491e      	ldr	r1, [pc, #120]	@ (80127ec <tcp_recved+0x94>)
 8012772:	481f      	ldr	r0, [pc, #124]	@ (80127f0 <tcp_recved+0x98>)
 8012774:	f009 f8b2 	bl	801b8dc <iprintf>
 8012778:	e032      	b.n	80127e0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	7d1b      	ldrb	r3, [r3, #20]
 801277e:	2b01      	cmp	r3, #1
 8012780:	d106      	bne.n	8012790 <tcp_recved+0x38>
 8012782:	4b19      	ldr	r3, [pc, #100]	@ (80127e8 <tcp_recved+0x90>)
 8012784:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8012788:	491a      	ldr	r1, [pc, #104]	@ (80127f4 <tcp_recved+0x9c>)
 801278a:	4819      	ldr	r0, [pc, #100]	@ (80127f0 <tcp_recved+0x98>)
 801278c:	f009 f8a6 	bl	801b8dc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012794:	887b      	ldrh	r3, [r7, #2]
 8012796:	4413      	add	r3, r2
 8012798:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801279a:	89fb      	ldrh	r3, [r7, #14]
 801279c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80127a0:	d804      	bhi.n	80127ac <tcp_recved+0x54>
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80127a6:	89fa      	ldrh	r2, [r7, #14]
 80127a8:	429a      	cmp	r2, r3
 80127aa:	d204      	bcs.n	80127b6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80127b2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80127b4:	e002      	b.n	80127bc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	89fa      	ldrh	r2, [r7, #14]
 80127ba:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f7ff ff71 	bl	80126a4 <tcp_update_rcv_ann_wnd>
 80127c2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80127ca:	d309      	bcc.n	80127e0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	8b5b      	ldrh	r3, [r3, #26]
 80127d0:	f043 0302 	orr.w	r3, r3, #2
 80127d4:	b29a      	uxth	r2, r3
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f004 fb80 	bl	8016ee0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80127e0:	3710      	adds	r7, #16
 80127e2:	46bd      	mov	sp, r7
 80127e4:	bd80      	pop	{r7, pc}
 80127e6:	bf00      	nop
 80127e8:	0801eef4 	.word	0x0801eef4
 80127ec:	0801f190 	.word	0x0801f190
 80127f0:	0801ef38 	.word	0x0801ef38
 80127f4:	0801f1a8 	.word	0x0801f1a8

080127f8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80127f8:	b480      	push	{r7}
 80127fa:	b083      	sub	sp, #12
 80127fc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80127fe:	2300      	movs	r3, #0
 8012800:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8012802:	4b1e      	ldr	r3, [pc, #120]	@ (801287c <tcp_new_port+0x84>)
 8012804:	881b      	ldrh	r3, [r3, #0]
 8012806:	3301      	adds	r3, #1
 8012808:	b29a      	uxth	r2, r3
 801280a:	4b1c      	ldr	r3, [pc, #112]	@ (801287c <tcp_new_port+0x84>)
 801280c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801280e:	4b1b      	ldr	r3, [pc, #108]	@ (801287c <tcp_new_port+0x84>)
 8012810:	881b      	ldrh	r3, [r3, #0]
 8012812:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012816:	4293      	cmp	r3, r2
 8012818:	d103      	bne.n	8012822 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801281a:	4b18      	ldr	r3, [pc, #96]	@ (801287c <tcp_new_port+0x84>)
 801281c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8012820:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012822:	2300      	movs	r3, #0
 8012824:	71fb      	strb	r3, [r7, #7]
 8012826:	e01e      	b.n	8012866 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012828:	79fb      	ldrb	r3, [r7, #7]
 801282a:	4a15      	ldr	r2, [pc, #84]	@ (8012880 <tcp_new_port+0x88>)
 801282c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	603b      	str	r3, [r7, #0]
 8012834:	e011      	b.n	801285a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8012836:	683b      	ldr	r3, [r7, #0]
 8012838:	8ada      	ldrh	r2, [r3, #22]
 801283a:	4b10      	ldr	r3, [pc, #64]	@ (801287c <tcp_new_port+0x84>)
 801283c:	881b      	ldrh	r3, [r3, #0]
 801283e:	429a      	cmp	r2, r3
 8012840:	d108      	bne.n	8012854 <tcp_new_port+0x5c>
        n++;
 8012842:	88bb      	ldrh	r3, [r7, #4]
 8012844:	3301      	adds	r3, #1
 8012846:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012848:	88bb      	ldrh	r3, [r7, #4]
 801284a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801284e:	d3d8      	bcc.n	8012802 <tcp_new_port+0xa>
          return 0;
 8012850:	2300      	movs	r3, #0
 8012852:	e00d      	b.n	8012870 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012854:	683b      	ldr	r3, [r7, #0]
 8012856:	68db      	ldr	r3, [r3, #12]
 8012858:	603b      	str	r3, [r7, #0]
 801285a:	683b      	ldr	r3, [r7, #0]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d1ea      	bne.n	8012836 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012860:	79fb      	ldrb	r3, [r7, #7]
 8012862:	3301      	adds	r3, #1
 8012864:	71fb      	strb	r3, [r7, #7]
 8012866:	79fb      	ldrb	r3, [r7, #7]
 8012868:	2b03      	cmp	r3, #3
 801286a:	d9dd      	bls.n	8012828 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801286c:	4b03      	ldr	r3, [pc, #12]	@ (801287c <tcp_new_port+0x84>)
 801286e:	881b      	ldrh	r3, [r3, #0]
}
 8012870:	4618      	mov	r0, r3
 8012872:	370c      	adds	r7, #12
 8012874:	46bd      	mov	sp, r7
 8012876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287a:	4770      	bx	lr
 801287c:	2000009c 	.word	0x2000009c
 8012880:	08020f5c 	.word	0x08020f5c

08012884 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012884:	b5b0      	push	{r4, r5, r7, lr}
 8012886:	b090      	sub	sp, #64	@ 0x40
 8012888:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801288a:	2300      	movs	r3, #0
 801288c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8012890:	4b95      	ldr	r3, [pc, #596]	@ (8012ae8 <tcp_slowtmr+0x264>)
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	3301      	adds	r3, #1
 8012896:	4a94      	ldr	r2, [pc, #592]	@ (8012ae8 <tcp_slowtmr+0x264>)
 8012898:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801289a:	4b94      	ldr	r3, [pc, #592]	@ (8012aec <tcp_slowtmr+0x268>)
 801289c:	781b      	ldrb	r3, [r3, #0]
 801289e:	3301      	adds	r3, #1
 80128a0:	b2da      	uxtb	r2, r3
 80128a2:	4b92      	ldr	r3, [pc, #584]	@ (8012aec <tcp_slowtmr+0x268>)
 80128a4:	701a      	strb	r2, [r3, #0]
 80128a6:	e000      	b.n	80128aa <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80128a8:	bf00      	nop
  prev = NULL;
 80128aa:	2300      	movs	r3, #0
 80128ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80128ae:	4b90      	ldr	r3, [pc, #576]	@ (8012af0 <tcp_slowtmr+0x26c>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80128b4:	e29f      	b.n	8012df6 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80128b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128b8:	7d1b      	ldrb	r3, [r3, #20]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d106      	bne.n	80128cc <tcp_slowtmr+0x48>
 80128be:	4b8d      	ldr	r3, [pc, #564]	@ (8012af4 <tcp_slowtmr+0x270>)
 80128c0:	f240 42be 	movw	r2, #1214	@ 0x4be
 80128c4:	498c      	ldr	r1, [pc, #560]	@ (8012af8 <tcp_slowtmr+0x274>)
 80128c6:	488d      	ldr	r0, [pc, #564]	@ (8012afc <tcp_slowtmr+0x278>)
 80128c8:	f009 f808 	bl	801b8dc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80128cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128ce:	7d1b      	ldrb	r3, [r3, #20]
 80128d0:	2b01      	cmp	r3, #1
 80128d2:	d106      	bne.n	80128e2 <tcp_slowtmr+0x5e>
 80128d4:	4b87      	ldr	r3, [pc, #540]	@ (8012af4 <tcp_slowtmr+0x270>)
 80128d6:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80128da:	4989      	ldr	r1, [pc, #548]	@ (8012b00 <tcp_slowtmr+0x27c>)
 80128dc:	4887      	ldr	r0, [pc, #540]	@ (8012afc <tcp_slowtmr+0x278>)
 80128de:	f008 fffd 	bl	801b8dc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80128e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128e4:	7d1b      	ldrb	r3, [r3, #20]
 80128e6:	2b0a      	cmp	r3, #10
 80128e8:	d106      	bne.n	80128f8 <tcp_slowtmr+0x74>
 80128ea:	4b82      	ldr	r3, [pc, #520]	@ (8012af4 <tcp_slowtmr+0x270>)
 80128ec:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80128f0:	4984      	ldr	r1, [pc, #528]	@ (8012b04 <tcp_slowtmr+0x280>)
 80128f2:	4882      	ldr	r0, [pc, #520]	@ (8012afc <tcp_slowtmr+0x278>)
 80128f4:	f008 fff2 	bl	801b8dc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80128f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128fa:	7f9a      	ldrb	r2, [r3, #30]
 80128fc:	4b7b      	ldr	r3, [pc, #492]	@ (8012aec <tcp_slowtmr+0x268>)
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	429a      	cmp	r2, r3
 8012902:	d105      	bne.n	8012910 <tcp_slowtmr+0x8c>
      prev = pcb;
 8012904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012906:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801290a:	68db      	ldr	r3, [r3, #12]
 801290c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801290e:	e272      	b.n	8012df6 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8012910:	4b76      	ldr	r3, [pc, #472]	@ (8012aec <tcp_slowtmr+0x268>)
 8012912:	781a      	ldrb	r2, [r3, #0]
 8012914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012916:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8012918:	2300      	movs	r3, #0
 801291a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801291e:	2300      	movs	r3, #0
 8012920:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012926:	7d1b      	ldrb	r3, [r3, #20]
 8012928:	2b02      	cmp	r3, #2
 801292a:	d10a      	bne.n	8012942 <tcp_slowtmr+0xbe>
 801292c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801292e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012932:	2b05      	cmp	r3, #5
 8012934:	d905      	bls.n	8012942 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8012936:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801293a:	3301      	adds	r3, #1
 801293c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012940:	e11e      	b.n	8012b80 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8012942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012944:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012948:	2b0b      	cmp	r3, #11
 801294a:	d905      	bls.n	8012958 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 801294c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012950:	3301      	adds	r3, #1
 8012952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012956:	e113      	b.n	8012b80 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8012958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801295a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801295e:	2b00      	cmp	r3, #0
 8012960:	d075      	beq.n	8012a4e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8012962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012966:	2b00      	cmp	r3, #0
 8012968:	d006      	beq.n	8012978 <tcp_slowtmr+0xf4>
 801296a:	4b62      	ldr	r3, [pc, #392]	@ (8012af4 <tcp_slowtmr+0x270>)
 801296c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8012970:	4965      	ldr	r1, [pc, #404]	@ (8012b08 <tcp_slowtmr+0x284>)
 8012972:	4862      	ldr	r0, [pc, #392]	@ (8012afc <tcp_slowtmr+0x278>)
 8012974:	f008 ffb2 	bl	801b8dc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801297a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801297c:	2b00      	cmp	r3, #0
 801297e:	d106      	bne.n	801298e <tcp_slowtmr+0x10a>
 8012980:	4b5c      	ldr	r3, [pc, #368]	@ (8012af4 <tcp_slowtmr+0x270>)
 8012982:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8012986:	4961      	ldr	r1, [pc, #388]	@ (8012b0c <tcp_slowtmr+0x288>)
 8012988:	485c      	ldr	r0, [pc, #368]	@ (8012afc <tcp_slowtmr+0x278>)
 801298a:	f008 ffa7 	bl	801b8dc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801298e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012990:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012994:	2b0b      	cmp	r3, #11
 8012996:	d905      	bls.n	80129a4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8012998:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801299c:	3301      	adds	r3, #1
 801299e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80129a2:	e0ed      	b.n	8012b80 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80129a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129a6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80129aa:	3b01      	subs	r3, #1
 80129ac:	4a58      	ldr	r2, [pc, #352]	@ (8012b10 <tcp_slowtmr+0x28c>)
 80129ae:	5cd3      	ldrb	r3, [r2, r3]
 80129b0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80129b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129b4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80129b8:	7c7a      	ldrb	r2, [r7, #17]
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d907      	bls.n	80129ce <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80129be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129c0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80129c4:	3301      	adds	r3, #1
 80129c6:	b2da      	uxtb	r2, r3
 80129c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129ca:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80129ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129d0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80129d4:	7c7a      	ldrb	r2, [r7, #17]
 80129d6:	429a      	cmp	r2, r3
 80129d8:	f200 80d2 	bhi.w	8012b80 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80129dc:	2301      	movs	r3, #1
 80129de:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80129e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d108      	bne.n	80129fc <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80129ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80129ec:	f005 f920 	bl	8017c30 <tcp_zero_window_probe>
 80129f0:	4603      	mov	r3, r0
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d014      	beq.n	8012a20 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80129f6:	2300      	movs	r3, #0
 80129f8:	623b      	str	r3, [r7, #32]
 80129fa:	e011      	b.n	8012a20 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80129fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012a02:	4619      	mov	r1, r3
 8012a04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012a06:	f003 ffe5 	bl	80169d4 <tcp_split_unsent_seg>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d107      	bne.n	8012a20 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8012a10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012a12:	f004 fa65 	bl	8016ee0 <tcp_output>
 8012a16:	4603      	mov	r3, r0
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d101      	bne.n	8012a20 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8012a20:	6a3b      	ldr	r3, [r7, #32]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	f000 80ac 	beq.w	8012b80 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8012a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a32:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012a36:	2b06      	cmp	r3, #6
 8012a38:	f200 80a2 	bhi.w	8012b80 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8012a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a3e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012a42:	3301      	adds	r3, #1
 8012a44:	b2da      	uxtb	r2, r3
 8012a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a48:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8012a4c:	e098      	b.n	8012b80 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8012a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a50:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	db0f      	blt.n	8012a78 <tcp_slowtmr+0x1f4>
 8012a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a5a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012a5e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8012a62:	4293      	cmp	r3, r2
 8012a64:	d008      	beq.n	8012a78 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8012a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012a6c:	b29b      	uxth	r3, r3
 8012a6e:	3301      	adds	r3, #1
 8012a70:	b29b      	uxth	r3, r3
 8012a72:	b21a      	sxth	r2, r3
 8012a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a76:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8012a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a7a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8012a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a80:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8012a84:	429a      	cmp	r2, r3
 8012a86:	db7b      	blt.n	8012b80 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012a88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012a8a:	f004 fd1d 	bl	80174c8 <tcp_rexmit_rto_prepare>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d007      	beq.n	8012aa4 <tcp_slowtmr+0x220>
 8012a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d171      	bne.n	8012b80 <tcp_slowtmr+0x2fc>
 8012a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d06d      	beq.n	8012b80 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8012aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012aa6:	7d1b      	ldrb	r3, [r3, #20]
 8012aa8:	2b02      	cmp	r3, #2
 8012aaa:	d03a      	beq.n	8012b22 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012aae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012ab2:	2b0c      	cmp	r3, #12
 8012ab4:	bf28      	it	cs
 8012ab6:	230c      	movcs	r3, #12
 8012ab8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012abc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012ac0:	10db      	asrs	r3, r3, #3
 8012ac2:	b21b      	sxth	r3, r3
 8012ac4:	461a      	mov	r2, r3
 8012ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ac8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012acc:	4413      	add	r3, r2
 8012ace:	7efa      	ldrb	r2, [r7, #27]
 8012ad0:	4910      	ldr	r1, [pc, #64]	@ (8012b14 <tcp_slowtmr+0x290>)
 8012ad2:	5c8a      	ldrb	r2, [r1, r2]
 8012ad4:	4093      	lsls	r3, r2
 8012ad6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012ad8:	697b      	ldr	r3, [r7, #20]
 8012ada:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8012ade:	4293      	cmp	r3, r2
 8012ae0:	dc1a      	bgt.n	8012b18 <tcp_slowtmr+0x294>
 8012ae2:	697b      	ldr	r3, [r7, #20]
 8012ae4:	b21a      	sxth	r2, r3
 8012ae6:	e019      	b.n	8012b1c <tcp_slowtmr+0x298>
 8012ae8:	2000c8b0 	.word	0x2000c8b0
 8012aec:	2000c8c6 	.word	0x2000c8c6
 8012af0:	2000c8bc 	.word	0x2000c8bc
 8012af4:	0801eef4 	.word	0x0801eef4
 8012af8:	0801f238 	.word	0x0801f238
 8012afc:	0801ef38 	.word	0x0801ef38
 8012b00:	0801f264 	.word	0x0801f264
 8012b04:	0801f290 	.word	0x0801f290
 8012b08:	0801f2c0 	.word	0x0801f2c0
 8012b0c:	0801f2f4 	.word	0x0801f2f4
 8012b10:	08020f54 	.word	0x08020f54
 8012b14:	08020f44 	.word	0x08020f44
 8012b18:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8012b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b1e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8012b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b24:	2200      	movs	r2, #0
 8012b26:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012b34:	4293      	cmp	r3, r2
 8012b36:	bf28      	it	cs
 8012b38:	4613      	movcs	r3, r2
 8012b3a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012b3c:	8a7b      	ldrh	r3, [r7, #18]
 8012b3e:	085b      	lsrs	r3, r3, #1
 8012b40:	b29a      	uxth	r2, r3
 8012b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b44:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012b52:	005b      	lsls	r3, r3, #1
 8012b54:	b29b      	uxth	r3, r3
 8012b56:	429a      	cmp	r2, r3
 8012b58:	d206      	bcs.n	8012b68 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8012b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012b5e:	005b      	lsls	r3, r3, #1
 8012b60:	b29a      	uxth	r2, r3
 8012b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b64:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8012b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b6a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8012b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b6e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8012b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b74:	2200      	movs	r2, #0
 8012b76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8012b7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012b7c:	f004 fd14 	bl	80175a8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8012b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b82:	7d1b      	ldrb	r3, [r3, #20]
 8012b84:	2b06      	cmp	r3, #6
 8012b86:	d111      	bne.n	8012bac <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8012b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b8a:	8b5b      	ldrh	r3, [r3, #26]
 8012b8c:	f003 0310 	and.w	r3, r3, #16
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d00b      	beq.n	8012bac <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012b94:	4b9d      	ldr	r3, [pc, #628]	@ (8012e0c <tcp_slowtmr+0x588>)
 8012b96:	681a      	ldr	r2, [r3, #0]
 8012b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b9a:	6a1b      	ldr	r3, [r3, #32]
 8012b9c:	1ad3      	subs	r3, r2, r3
 8012b9e:	2b28      	cmp	r3, #40	@ 0x28
 8012ba0:	d904      	bls.n	8012bac <tcp_slowtmr+0x328>
          ++pcb_remove;
 8012ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012ba6:	3301      	adds	r3, #1
 8012ba8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bae:	7a5b      	ldrb	r3, [r3, #9]
 8012bb0:	f003 0308 	and.w	r3, r3, #8
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d04c      	beq.n	8012c52 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8012bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bba:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012bbc:	2b04      	cmp	r3, #4
 8012bbe:	d003      	beq.n	8012bc8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8012bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bc2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012bc4:	2b07      	cmp	r3, #7
 8012bc6:	d144      	bne.n	8012c52 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012bc8:	4b90      	ldr	r3, [pc, #576]	@ (8012e0c <tcp_slowtmr+0x588>)
 8012bca:	681a      	ldr	r2, [r3, #0]
 8012bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bce:	6a1b      	ldr	r3, [r3, #32]
 8012bd0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8012bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012bd8:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8012bdc:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8012be0:	498b      	ldr	r1, [pc, #556]	@ (8012e10 <tcp_slowtmr+0x58c>)
 8012be2:	fba1 1303 	umull	r1, r3, r1, r3
 8012be6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d90a      	bls.n	8012c02 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8012bec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012bf0:	3301      	adds	r3, #1
 8012bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8012bf6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012bfa:	3301      	adds	r3, #1
 8012bfc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012c00:	e027      	b.n	8012c52 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012c02:	4b82      	ldr	r3, [pc, #520]	@ (8012e0c <tcp_slowtmr+0x588>)
 8012c04:	681a      	ldr	r2, [r3, #0]
 8012c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c08:	6a1b      	ldr	r3, [r3, #32]
 8012c0a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c0e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8012c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c14:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8012c18:	4618      	mov	r0, r3
 8012c1a:	4b7e      	ldr	r3, [pc, #504]	@ (8012e14 <tcp_slowtmr+0x590>)
 8012c1c:	fb00 f303 	mul.w	r3, r0, r3
 8012c20:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012c22:	497b      	ldr	r1, [pc, #492]	@ (8012e10 <tcp_slowtmr+0x58c>)
 8012c24:	fba1 1303 	umull	r1, r3, r1, r3
 8012c28:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012c2a:	429a      	cmp	r2, r3
 8012c2c:	d911      	bls.n	8012c52 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8012c2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012c30:	f004 ffbe 	bl	8017bb0 <tcp_keepalive>
 8012c34:	4603      	mov	r3, r0
 8012c36:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8012c3a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d107      	bne.n	8012c52 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8012c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c44:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8012c48:	3301      	adds	r3, #1
 8012c4a:	b2da      	uxtb	r2, r3
 8012c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c4e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8012c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d011      	beq.n	8012c7e <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8012c5a:	4b6c      	ldr	r3, [pc, #432]	@ (8012e0c <tcp_slowtmr+0x588>)
 8012c5c:	681a      	ldr	r2, [r3, #0]
 8012c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c60:	6a1b      	ldr	r3, [r3, #32]
 8012c62:	1ad2      	subs	r2, r2, r3
 8012c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c66:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8012c6a:	4619      	mov	r1, r3
 8012c6c:	460b      	mov	r3, r1
 8012c6e:	005b      	lsls	r3, r3, #1
 8012c70:	440b      	add	r3, r1
 8012c72:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012c74:	429a      	cmp	r2, r3
 8012c76:	d302      	bcc.n	8012c7e <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8012c78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012c7a:	f000 fe7f 	bl	801397c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8012c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c80:	7d1b      	ldrb	r3, [r3, #20]
 8012c82:	2b03      	cmp	r3, #3
 8012c84:	d10b      	bne.n	8012c9e <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012c86:	4b61      	ldr	r3, [pc, #388]	@ (8012e0c <tcp_slowtmr+0x588>)
 8012c88:	681a      	ldr	r2, [r3, #0]
 8012c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c8c:	6a1b      	ldr	r3, [r3, #32]
 8012c8e:	1ad3      	subs	r3, r2, r3
 8012c90:	2b28      	cmp	r3, #40	@ 0x28
 8012c92:	d904      	bls.n	8012c9e <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8012c94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c98:	3301      	adds	r3, #1
 8012c9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8012c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ca0:	7d1b      	ldrb	r3, [r3, #20]
 8012ca2:	2b09      	cmp	r3, #9
 8012ca4:	d10b      	bne.n	8012cbe <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012ca6:	4b59      	ldr	r3, [pc, #356]	@ (8012e0c <tcp_slowtmr+0x588>)
 8012ca8:	681a      	ldr	r2, [r3, #0]
 8012caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cac:	6a1b      	ldr	r3, [r3, #32]
 8012cae:	1ad3      	subs	r3, r2, r3
 8012cb0:	2bf0      	cmp	r3, #240	@ 0xf0
 8012cb2:	d904      	bls.n	8012cbe <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8012cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012cb8:	3301      	adds	r3, #1
 8012cba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8012cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d060      	beq.n	8012d88 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8012cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012ccc:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8012cce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012cd0:	f000 fca0 	bl	8013614 <tcp_pcb_purge>
      if (prev != NULL) {
 8012cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d010      	beq.n	8012cfc <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012cda:	4b4f      	ldr	r3, [pc, #316]	@ (8012e18 <tcp_slowtmr+0x594>)
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012ce0:	429a      	cmp	r2, r3
 8012ce2:	d106      	bne.n	8012cf2 <tcp_slowtmr+0x46e>
 8012ce4:	4b4d      	ldr	r3, [pc, #308]	@ (8012e1c <tcp_slowtmr+0x598>)
 8012ce6:	f240 526d 	movw	r2, #1389	@ 0x56d
 8012cea:	494d      	ldr	r1, [pc, #308]	@ (8012e20 <tcp_slowtmr+0x59c>)
 8012cec:	484d      	ldr	r0, [pc, #308]	@ (8012e24 <tcp_slowtmr+0x5a0>)
 8012cee:	f008 fdf5 	bl	801b8dc <iprintf>
        prev->next = pcb->next;
 8012cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cf4:	68da      	ldr	r2, [r3, #12]
 8012cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cf8:	60da      	str	r2, [r3, #12]
 8012cfa:	e00f      	b.n	8012d1c <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012cfc:	4b46      	ldr	r3, [pc, #280]	@ (8012e18 <tcp_slowtmr+0x594>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d006      	beq.n	8012d14 <tcp_slowtmr+0x490>
 8012d06:	4b45      	ldr	r3, [pc, #276]	@ (8012e1c <tcp_slowtmr+0x598>)
 8012d08:	f240 5271 	movw	r2, #1393	@ 0x571
 8012d0c:	4946      	ldr	r1, [pc, #280]	@ (8012e28 <tcp_slowtmr+0x5a4>)
 8012d0e:	4845      	ldr	r0, [pc, #276]	@ (8012e24 <tcp_slowtmr+0x5a0>)
 8012d10:	f008 fde4 	bl	801b8dc <iprintf>
        tcp_active_pcbs = pcb->next;
 8012d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d16:	68db      	ldr	r3, [r3, #12]
 8012d18:	4a3f      	ldr	r2, [pc, #252]	@ (8012e18 <tcp_slowtmr+0x594>)
 8012d1a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8012d1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d013      	beq.n	8012d4c <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d26:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8012d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d2a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012d2c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8012d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d30:	3304      	adds	r3, #4
 8012d32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012d34:	8ad2      	ldrh	r2, [r2, #22]
 8012d36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012d38:	8b09      	ldrh	r1, [r1, #24]
 8012d3a:	9102      	str	r1, [sp, #8]
 8012d3c:	9201      	str	r2, [sp, #4]
 8012d3e:	9300      	str	r3, [sp, #0]
 8012d40:	462b      	mov	r3, r5
 8012d42:	4622      	mov	r2, r4
 8012d44:	4601      	mov	r1, r0
 8012d46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012d48:	f004 fe7e 	bl	8017a48 <tcp_rst>
      err_arg = pcb->callback_arg;
 8012d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d4e:	691b      	ldr	r3, [r3, #16]
 8012d50:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d54:	7d1b      	ldrb	r3, [r3, #20]
 8012d56:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d5a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d5e:	68db      	ldr	r3, [r3, #12]
 8012d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8012d62:	6838      	ldr	r0, [r7, #0]
 8012d64:	f7ff f836 	bl	8011dd4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8012d68:	4b30      	ldr	r3, [pc, #192]	@ (8012e2c <tcp_slowtmr+0x5a8>)
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d004      	beq.n	8012d7e <tcp_slowtmr+0x4fa>
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	f06f 010c 	mvn.w	r1, #12
 8012d7a:	68b8      	ldr	r0, [r7, #8]
 8012d7c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012d7e:	4b2b      	ldr	r3, [pc, #172]	@ (8012e2c <tcp_slowtmr+0x5a8>)
 8012d80:	781b      	ldrb	r3, [r3, #0]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d037      	beq.n	8012df6 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8012d86:	e590      	b.n	80128aa <tcp_slowtmr+0x26>
      prev = pcb;
 8012d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d8e:	68db      	ldr	r3, [r3, #12]
 8012d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8012d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d94:	7f1b      	ldrb	r3, [r3, #28]
 8012d96:	3301      	adds	r3, #1
 8012d98:	b2da      	uxtb	r2, r3
 8012d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d9c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012da0:	7f1a      	ldrb	r2, [r3, #28]
 8012da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012da4:	7f5b      	ldrb	r3, [r3, #29]
 8012da6:	429a      	cmp	r2, r3
 8012da8:	d325      	bcc.n	8012df6 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8012daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dac:	2200      	movs	r2, #0
 8012dae:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8012db0:	4b1e      	ldr	r3, [pc, #120]	@ (8012e2c <tcp_slowtmr+0x5a8>)
 8012db2:	2200      	movs	r2, #0
 8012db4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d00b      	beq.n	8012dd8 <tcp_slowtmr+0x554>
 8012dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012dc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012dc8:	6912      	ldr	r2, [r2, #16]
 8012dca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012dcc:	4610      	mov	r0, r2
 8012dce:	4798      	blx	r3
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8012dd6:	e002      	b.n	8012dde <tcp_slowtmr+0x55a>
 8012dd8:	2300      	movs	r3, #0
 8012dda:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8012dde:	4b13      	ldr	r3, [pc, #76]	@ (8012e2c <tcp_slowtmr+0x5a8>)
 8012de0:	781b      	ldrb	r3, [r3, #0]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	f47f ad60 	bne.w	80128a8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012de8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d102      	bne.n	8012df6 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8012df0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012df2:	f004 f875 	bl	8016ee0 <tcp_output>
  while (pcb != NULL) {
 8012df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	f47f ad5c 	bne.w	80128b6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012dfe:	2300      	movs	r3, #0
 8012e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8012e02:	4b0b      	ldr	r3, [pc, #44]	@ (8012e30 <tcp_slowtmr+0x5ac>)
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012e08:	e067      	b.n	8012eda <tcp_slowtmr+0x656>
 8012e0a:	bf00      	nop
 8012e0c:	2000c8b0 	.word	0x2000c8b0
 8012e10:	10624dd3 	.word	0x10624dd3
 8012e14:	000124f8 	.word	0x000124f8
 8012e18:	2000c8bc 	.word	0x2000c8bc
 8012e1c:	0801eef4 	.word	0x0801eef4
 8012e20:	0801f32c 	.word	0x0801f32c
 8012e24:	0801ef38 	.word	0x0801ef38
 8012e28:	0801f358 	.word	0x0801f358
 8012e2c:	2000c8c4 	.word	0x2000c8c4
 8012e30:	2000c8c0 	.word	0x2000c8c0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e36:	7d1b      	ldrb	r3, [r3, #20]
 8012e38:	2b0a      	cmp	r3, #10
 8012e3a:	d006      	beq.n	8012e4a <tcp_slowtmr+0x5c6>
 8012e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8012eec <tcp_slowtmr+0x668>)
 8012e3e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8012e42:	492b      	ldr	r1, [pc, #172]	@ (8012ef0 <tcp_slowtmr+0x66c>)
 8012e44:	482b      	ldr	r0, [pc, #172]	@ (8012ef4 <tcp_slowtmr+0x670>)
 8012e46:	f008 fd49 	bl	801b8dc <iprintf>
    pcb_remove = 0;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012e50:	4b29      	ldr	r3, [pc, #164]	@ (8012ef8 <tcp_slowtmr+0x674>)
 8012e52:	681a      	ldr	r2, [r3, #0]
 8012e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e56:	6a1b      	ldr	r3, [r3, #32]
 8012e58:	1ad3      	subs	r3, r2, r3
 8012e5a:	2bf0      	cmp	r3, #240	@ 0xf0
 8012e5c:	d904      	bls.n	8012e68 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8012e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012e62:	3301      	adds	r3, #1
 8012e64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d02f      	beq.n	8012ed0 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012e70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012e72:	f000 fbcf 	bl	8013614 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d010      	beq.n	8012e9e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8012efc <tcp_slowtmr+0x678>)
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012e82:	429a      	cmp	r2, r3
 8012e84:	d106      	bne.n	8012e94 <tcp_slowtmr+0x610>
 8012e86:	4b19      	ldr	r3, [pc, #100]	@ (8012eec <tcp_slowtmr+0x668>)
 8012e88:	f240 52af 	movw	r2, #1455	@ 0x5af
 8012e8c:	491c      	ldr	r1, [pc, #112]	@ (8012f00 <tcp_slowtmr+0x67c>)
 8012e8e:	4819      	ldr	r0, [pc, #100]	@ (8012ef4 <tcp_slowtmr+0x670>)
 8012e90:	f008 fd24 	bl	801b8dc <iprintf>
        prev->next = pcb->next;
 8012e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e96:	68da      	ldr	r2, [r3, #12]
 8012e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e9a:	60da      	str	r2, [r3, #12]
 8012e9c:	e00f      	b.n	8012ebe <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012e9e:	4b17      	ldr	r3, [pc, #92]	@ (8012efc <tcp_slowtmr+0x678>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012ea4:	429a      	cmp	r2, r3
 8012ea6:	d006      	beq.n	8012eb6 <tcp_slowtmr+0x632>
 8012ea8:	4b10      	ldr	r3, [pc, #64]	@ (8012eec <tcp_slowtmr+0x668>)
 8012eaa:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8012eae:	4915      	ldr	r1, [pc, #84]	@ (8012f04 <tcp_slowtmr+0x680>)
 8012eb0:	4810      	ldr	r0, [pc, #64]	@ (8012ef4 <tcp_slowtmr+0x670>)
 8012eb2:	f008 fd13 	bl	801b8dc <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012eb8:	68db      	ldr	r3, [r3, #12]
 8012eba:	4a10      	ldr	r2, [pc, #64]	@ (8012efc <tcp_slowtmr+0x678>)
 8012ebc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ec0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ec4:	68db      	ldr	r3, [r3, #12]
 8012ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8012ec8:	69f8      	ldr	r0, [r7, #28]
 8012eca:	f7fe ff83 	bl	8011dd4 <tcp_free>
 8012ece:	e004      	b.n	8012eda <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8012ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ed6:	68db      	ldr	r3, [r3, #12]
 8012ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d1a9      	bne.n	8012e34 <tcp_slowtmr+0x5b0>
    }
  }
}
 8012ee0:	bf00      	nop
 8012ee2:	bf00      	nop
 8012ee4:	3730      	adds	r7, #48	@ 0x30
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8012eea:	bf00      	nop
 8012eec:	0801eef4 	.word	0x0801eef4
 8012ef0:	0801f384 	.word	0x0801f384
 8012ef4:	0801ef38 	.word	0x0801ef38
 8012ef8:	2000c8b0 	.word	0x2000c8b0
 8012efc:	2000c8c0 	.word	0x2000c8c0
 8012f00:	0801f3b4 	.word	0x0801f3b4
 8012f04:	0801f3dc 	.word	0x0801f3dc

08012f08 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b082      	sub	sp, #8
 8012f0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8012fc4 <tcp_fasttmr+0xbc>)
 8012f10:	781b      	ldrb	r3, [r3, #0]
 8012f12:	3301      	adds	r3, #1
 8012f14:	b2da      	uxtb	r2, r3
 8012f16:	4b2b      	ldr	r3, [pc, #172]	@ (8012fc4 <tcp_fasttmr+0xbc>)
 8012f18:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8012fc8 <tcp_fasttmr+0xc0>)
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012f20:	e048      	b.n	8012fb4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	7f9a      	ldrb	r2, [r3, #30]
 8012f26:	4b27      	ldr	r3, [pc, #156]	@ (8012fc4 <tcp_fasttmr+0xbc>)
 8012f28:	781b      	ldrb	r3, [r3, #0]
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	d03f      	beq.n	8012fae <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012f2e:	4b25      	ldr	r3, [pc, #148]	@ (8012fc4 <tcp_fasttmr+0xbc>)
 8012f30:	781a      	ldrb	r2, [r3, #0]
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	8b5b      	ldrh	r3, [r3, #26]
 8012f3a:	f003 0301 	and.w	r3, r3, #1
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d010      	beq.n	8012f64 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	8b5b      	ldrh	r3, [r3, #26]
 8012f46:	f043 0302 	orr.w	r3, r3, #2
 8012f4a:	b29a      	uxth	r2, r3
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012f50:	6878      	ldr	r0, [r7, #4]
 8012f52:	f003 ffc5 	bl	8016ee0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	8b5b      	ldrh	r3, [r3, #26]
 8012f5a:	f023 0303 	bic.w	r3, r3, #3
 8012f5e:	b29a      	uxth	r2, r3
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	8b5b      	ldrh	r3, [r3, #26]
 8012f68:	f003 0308 	and.w	r3, r3, #8
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d009      	beq.n	8012f84 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	8b5b      	ldrh	r3, [r3, #26]
 8012f74:	f023 0308 	bic.w	r3, r3, #8
 8012f78:	b29a      	uxth	r2, r3
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012f7e:	6878      	ldr	r0, [r7, #4]
 8012f80:	f7ff f8bc 	bl	80120fc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	68db      	ldr	r3, [r3, #12]
 8012f88:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d00a      	beq.n	8012fa8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012f92:	4b0e      	ldr	r3, [pc, #56]	@ (8012fcc <tcp_fasttmr+0xc4>)
 8012f94:	2200      	movs	r2, #0
 8012f96:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012f98:	6878      	ldr	r0, [r7, #4]
 8012f9a:	f000 f819 	bl	8012fd0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8012fcc <tcp_fasttmr+0xc4>)
 8012fa0:	781b      	ldrb	r3, [r3, #0]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d000      	beq.n	8012fa8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012fa6:	e7b8      	b.n	8012f1a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	607b      	str	r3, [r7, #4]
 8012fac:	e002      	b.n	8012fb4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	68db      	ldr	r3, [r3, #12]
 8012fb2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d1b3      	bne.n	8012f22 <tcp_fasttmr+0x1a>
    }
  }
}
 8012fba:	bf00      	nop
 8012fbc:	bf00      	nop
 8012fbe:	3708      	adds	r7, #8
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}
 8012fc4:	2000c8c6 	.word	0x2000c8c6
 8012fc8:	2000c8bc 	.word	0x2000c8bc
 8012fcc:	2000c8c4 	.word	0x2000c8c4

08012fd0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012fd0:	b590      	push	{r4, r7, lr}
 8012fd2:	b085      	sub	sp, #20
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d109      	bne.n	8012ff2 <tcp_process_refused_data+0x22>
 8012fde:	4b37      	ldr	r3, [pc, #220]	@ (80130bc <tcp_process_refused_data+0xec>)
 8012fe0:	f240 6209 	movw	r2, #1545	@ 0x609
 8012fe4:	4936      	ldr	r1, [pc, #216]	@ (80130c0 <tcp_process_refused_data+0xf0>)
 8012fe6:	4837      	ldr	r0, [pc, #220]	@ (80130c4 <tcp_process_refused_data+0xf4>)
 8012fe8:	f008 fc78 	bl	801b8dc <iprintf>
 8012fec:	f06f 030f 	mvn.w	r3, #15
 8012ff0:	e060      	b.n	80130b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012ff6:	7b5b      	ldrb	r3, [r3, #13]
 8012ff8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012ffe:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	2200      	movs	r2, #0
 8013004:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801300c:	2b00      	cmp	r3, #0
 801300e:	d00b      	beq.n	8013028 <tcp_process_refused_data+0x58>
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	6918      	ldr	r0, [r3, #16]
 801301a:	2300      	movs	r3, #0
 801301c:	68ba      	ldr	r2, [r7, #8]
 801301e:	6879      	ldr	r1, [r7, #4]
 8013020:	47a0      	blx	r4
 8013022:	4603      	mov	r3, r0
 8013024:	73fb      	strb	r3, [r7, #15]
 8013026:	e007      	b.n	8013038 <tcp_process_refused_data+0x68>
 8013028:	2300      	movs	r3, #0
 801302a:	68ba      	ldr	r2, [r7, #8]
 801302c:	6879      	ldr	r1, [r7, #4]
 801302e:	2000      	movs	r0, #0
 8013030:	f000 f8c2 	bl	80131b8 <tcp_recv_null>
 8013034:	4603      	mov	r3, r0
 8013036:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d12a      	bne.n	8013096 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8013040:	7bbb      	ldrb	r3, [r7, #14]
 8013042:	f003 0320 	and.w	r3, r3, #32
 8013046:	2b00      	cmp	r3, #0
 8013048:	d033      	beq.n	80130b2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801304e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013052:	d005      	beq.n	8013060 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013058:	3301      	adds	r3, #1
 801305a:	b29a      	uxth	r2, r3
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013066:	2b00      	cmp	r3, #0
 8013068:	d00b      	beq.n	8013082 <tcp_process_refused_data+0xb2>
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	6918      	ldr	r0, [r3, #16]
 8013074:	2300      	movs	r3, #0
 8013076:	2200      	movs	r2, #0
 8013078:	6879      	ldr	r1, [r7, #4]
 801307a:	47a0      	blx	r4
 801307c:	4603      	mov	r3, r0
 801307e:	73fb      	strb	r3, [r7, #15]
 8013080:	e001      	b.n	8013086 <tcp_process_refused_data+0xb6>
 8013082:	2300      	movs	r3, #0
 8013084:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8013086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801308a:	f113 0f0d 	cmn.w	r3, #13
 801308e:	d110      	bne.n	80130b2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8013090:	f06f 030c 	mvn.w	r3, #12
 8013094:	e00e      	b.n	80130b4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8013096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801309a:	f113 0f0d 	cmn.w	r3, #13
 801309e:	d102      	bne.n	80130a6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80130a0:	f06f 030c 	mvn.w	r3, #12
 80130a4:	e006      	b.n	80130b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	68ba      	ldr	r2, [r7, #8]
 80130aa:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80130ac:	f06f 0304 	mvn.w	r3, #4
 80130b0:	e000      	b.n	80130b4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80130b2:	2300      	movs	r3, #0
}
 80130b4:	4618      	mov	r0, r3
 80130b6:	3714      	adds	r7, #20
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bd90      	pop	{r4, r7, pc}
 80130bc:	0801eef4 	.word	0x0801eef4
 80130c0:	0801f404 	.word	0x0801f404
 80130c4:	0801ef38 	.word	0x0801ef38

080130c8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b084      	sub	sp, #16
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80130d0:	e007      	b.n	80130e2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f000 f80a 	bl	80130f2 <tcp_seg_free>
    seg = next;
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d1f4      	bne.n	80130d2 <tcp_segs_free+0xa>
  }
}
 80130e8:	bf00      	nop
 80130ea:	bf00      	nop
 80130ec:	3710      	adds	r7, #16
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}

080130f2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80130f2:	b580      	push	{r7, lr}
 80130f4:	b082      	sub	sp, #8
 80130f6:	af00      	add	r7, sp, #0
 80130f8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d00c      	beq.n	801311a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	685b      	ldr	r3, [r3, #4]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d004      	beq.n	8013112 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	685b      	ldr	r3, [r3, #4]
 801310c:	4618      	mov	r0, r3
 801310e:	f7fe fbb5 	bl	801187c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8013112:	6879      	ldr	r1, [r7, #4]
 8013114:	2003      	movs	r0, #3
 8013116:	f7fd fd3f 	bl	8010b98 <memp_free>
  }
}
 801311a:	bf00      	nop
 801311c:	3708      	adds	r7, #8
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}
	...

08013124 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b082      	sub	sp, #8
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
 801312c:	460b      	mov	r3, r1
 801312e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d107      	bne.n	8013146 <tcp_setprio+0x22>
 8013136:	4b07      	ldr	r3, [pc, #28]	@ (8013154 <tcp_setprio+0x30>)
 8013138:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 801313c:	4906      	ldr	r1, [pc, #24]	@ (8013158 <tcp_setprio+0x34>)
 801313e:	4807      	ldr	r0, [pc, #28]	@ (801315c <tcp_setprio+0x38>)
 8013140:	f008 fbcc 	bl	801b8dc <iprintf>
 8013144:	e002      	b.n	801314c <tcp_setprio+0x28>

  pcb->prio = prio;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	78fa      	ldrb	r2, [r7, #3]
 801314a:	755a      	strb	r2, [r3, #21]
}
 801314c:	3708      	adds	r7, #8
 801314e:	46bd      	mov	sp, r7
 8013150:	bd80      	pop	{r7, pc}
 8013152:	bf00      	nop
 8013154:	0801eef4 	.word	0x0801eef4
 8013158:	0801f42c 	.word	0x0801f42c
 801315c:	0801ef38 	.word	0x0801ef38

08013160 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b084      	sub	sp, #16
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d106      	bne.n	801317c <tcp_seg_copy+0x1c>
 801316e:	4b0f      	ldr	r3, [pc, #60]	@ (80131ac <tcp_seg_copy+0x4c>)
 8013170:	f240 6282 	movw	r2, #1666	@ 0x682
 8013174:	490e      	ldr	r1, [pc, #56]	@ (80131b0 <tcp_seg_copy+0x50>)
 8013176:	480f      	ldr	r0, [pc, #60]	@ (80131b4 <tcp_seg_copy+0x54>)
 8013178:	f008 fbb0 	bl	801b8dc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801317c:	2003      	movs	r0, #3
 801317e:	f7fd fc95 	bl	8010aac <memp_malloc>
 8013182:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d101      	bne.n	801318e <tcp_seg_copy+0x2e>
    return NULL;
 801318a:	2300      	movs	r3, #0
 801318c:	e00a      	b.n	80131a4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801318e:	2210      	movs	r2, #16
 8013190:	6879      	ldr	r1, [r7, #4]
 8013192:	68f8      	ldr	r0, [r7, #12]
 8013194:	f008 fd41 	bl	801bc1a <memcpy>
  pbuf_ref(cseg->p);
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	685b      	ldr	r3, [r3, #4]
 801319c:	4618      	mov	r0, r3
 801319e:	f7fe fc13 	bl	80119c8 <pbuf_ref>
  return cseg;
 80131a2:	68fb      	ldr	r3, [r7, #12]
}
 80131a4:	4618      	mov	r0, r3
 80131a6:	3710      	adds	r7, #16
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd80      	pop	{r7, pc}
 80131ac:	0801eef4 	.word	0x0801eef4
 80131b0:	0801f448 	.word	0x0801f448
 80131b4:	0801ef38 	.word	0x0801ef38

080131b8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b084      	sub	sp, #16
 80131bc:	af00      	add	r7, sp, #0
 80131be:	60f8      	str	r0, [r7, #12]
 80131c0:	60b9      	str	r1, [r7, #8]
 80131c2:	607a      	str	r2, [r7, #4]
 80131c4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80131c6:	68bb      	ldr	r3, [r7, #8]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d109      	bne.n	80131e0 <tcp_recv_null+0x28>
 80131cc:	4b12      	ldr	r3, [pc, #72]	@ (8013218 <tcp_recv_null+0x60>)
 80131ce:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80131d2:	4912      	ldr	r1, [pc, #72]	@ (801321c <tcp_recv_null+0x64>)
 80131d4:	4812      	ldr	r0, [pc, #72]	@ (8013220 <tcp_recv_null+0x68>)
 80131d6:	f008 fb81 	bl	801b8dc <iprintf>
 80131da:	f06f 030f 	mvn.w	r3, #15
 80131de:	e016      	b.n	801320e <tcp_recv_null+0x56>

  if (p != NULL) {
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d009      	beq.n	80131fa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	891b      	ldrh	r3, [r3, #8]
 80131ea:	4619      	mov	r1, r3
 80131ec:	68b8      	ldr	r0, [r7, #8]
 80131ee:	f7ff fab3 	bl	8012758 <tcp_recved>
    pbuf_free(p);
 80131f2:	6878      	ldr	r0, [r7, #4]
 80131f4:	f7fe fb42 	bl	801187c <pbuf_free>
 80131f8:	e008      	b.n	801320c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80131fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d104      	bne.n	801320c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013202:	68b8      	ldr	r0, [r7, #8]
 8013204:	f7fe ffe4 	bl	80121d0 <tcp_close>
 8013208:	4603      	mov	r3, r0
 801320a:	e000      	b.n	801320e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801320c:	2300      	movs	r3, #0
}
 801320e:	4618      	mov	r0, r3
 8013210:	3710      	adds	r7, #16
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}
 8013216:	bf00      	nop
 8013218:	0801eef4 	.word	0x0801eef4
 801321c:	0801f464 	.word	0x0801f464
 8013220:	0801ef38 	.word	0x0801ef38

08013224 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b086      	sub	sp, #24
 8013228:	af00      	add	r7, sp, #0
 801322a:	4603      	mov	r3, r0
 801322c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801322e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013232:	2b00      	cmp	r3, #0
 8013234:	db01      	blt.n	801323a <tcp_kill_prio+0x16>
 8013236:	79fb      	ldrb	r3, [r7, #7]
 8013238:	e000      	b.n	801323c <tcp_kill_prio+0x18>
 801323a:	237f      	movs	r3, #127	@ 0x7f
 801323c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801323e:	7afb      	ldrb	r3, [r7, #11]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d034      	beq.n	80132ae <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013244:	7afb      	ldrb	r3, [r7, #11]
 8013246:	3b01      	subs	r3, #1
 8013248:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801324a:	2300      	movs	r3, #0
 801324c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801324e:	2300      	movs	r3, #0
 8013250:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013252:	4b19      	ldr	r3, [pc, #100]	@ (80132b8 <tcp_kill_prio+0x94>)
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	617b      	str	r3, [r7, #20]
 8013258:	e01f      	b.n	801329a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801325a:	697b      	ldr	r3, [r7, #20]
 801325c:	7d5b      	ldrb	r3, [r3, #21]
 801325e:	7afa      	ldrb	r2, [r7, #11]
 8013260:	429a      	cmp	r2, r3
 8013262:	d80c      	bhi.n	801327e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013264:	697b      	ldr	r3, [r7, #20]
 8013266:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013268:	7afa      	ldrb	r2, [r7, #11]
 801326a:	429a      	cmp	r2, r3
 801326c:	d112      	bne.n	8013294 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801326e:	4b13      	ldr	r3, [pc, #76]	@ (80132bc <tcp_kill_prio+0x98>)
 8013270:	681a      	ldr	r2, [r3, #0]
 8013272:	697b      	ldr	r3, [r7, #20]
 8013274:	6a1b      	ldr	r3, [r3, #32]
 8013276:	1ad3      	subs	r3, r2, r3
 8013278:	68fa      	ldr	r2, [r7, #12]
 801327a:	429a      	cmp	r2, r3
 801327c:	d80a      	bhi.n	8013294 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801327e:	4b0f      	ldr	r3, [pc, #60]	@ (80132bc <tcp_kill_prio+0x98>)
 8013280:	681a      	ldr	r2, [r3, #0]
 8013282:	697b      	ldr	r3, [r7, #20]
 8013284:	6a1b      	ldr	r3, [r3, #32]
 8013286:	1ad3      	subs	r3, r2, r3
 8013288:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801328a:	697b      	ldr	r3, [r7, #20]
 801328c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801328e:	697b      	ldr	r3, [r7, #20]
 8013290:	7d5b      	ldrb	r3, [r3, #21]
 8013292:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013294:	697b      	ldr	r3, [r7, #20]
 8013296:	68db      	ldr	r3, [r3, #12]
 8013298:	617b      	str	r3, [r7, #20]
 801329a:	697b      	ldr	r3, [r7, #20]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d1dc      	bne.n	801325a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80132a0:	693b      	ldr	r3, [r7, #16]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d004      	beq.n	80132b0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80132a6:	6938      	ldr	r0, [r7, #16]
 80132a8:	f7ff f87c 	bl	80123a4 <tcp_abort>
 80132ac:	e000      	b.n	80132b0 <tcp_kill_prio+0x8c>
    return;
 80132ae:	bf00      	nop
  }
}
 80132b0:	3718      	adds	r7, #24
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}
 80132b6:	bf00      	nop
 80132b8:	2000c8bc 	.word	0x2000c8bc
 80132bc:	2000c8b0 	.word	0x2000c8b0

080132c0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b086      	sub	sp, #24
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	4603      	mov	r3, r0
 80132c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80132ca:	79fb      	ldrb	r3, [r7, #7]
 80132cc:	2b08      	cmp	r3, #8
 80132ce:	d009      	beq.n	80132e4 <tcp_kill_state+0x24>
 80132d0:	79fb      	ldrb	r3, [r7, #7]
 80132d2:	2b09      	cmp	r3, #9
 80132d4:	d006      	beq.n	80132e4 <tcp_kill_state+0x24>
 80132d6:	4b1a      	ldr	r3, [pc, #104]	@ (8013340 <tcp_kill_state+0x80>)
 80132d8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80132dc:	4919      	ldr	r1, [pc, #100]	@ (8013344 <tcp_kill_state+0x84>)
 80132de:	481a      	ldr	r0, [pc, #104]	@ (8013348 <tcp_kill_state+0x88>)
 80132e0:	f008 fafc 	bl	801b8dc <iprintf>

  inactivity = 0;
 80132e4:	2300      	movs	r3, #0
 80132e6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80132e8:	2300      	movs	r3, #0
 80132ea:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80132ec:	4b17      	ldr	r3, [pc, #92]	@ (801334c <tcp_kill_state+0x8c>)
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	617b      	str	r3, [r7, #20]
 80132f2:	e017      	b.n	8013324 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80132f4:	697b      	ldr	r3, [r7, #20]
 80132f6:	7d1b      	ldrb	r3, [r3, #20]
 80132f8:	79fa      	ldrb	r2, [r7, #7]
 80132fa:	429a      	cmp	r2, r3
 80132fc:	d10f      	bne.n	801331e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80132fe:	4b14      	ldr	r3, [pc, #80]	@ (8013350 <tcp_kill_state+0x90>)
 8013300:	681a      	ldr	r2, [r3, #0]
 8013302:	697b      	ldr	r3, [r7, #20]
 8013304:	6a1b      	ldr	r3, [r3, #32]
 8013306:	1ad3      	subs	r3, r2, r3
 8013308:	68fa      	ldr	r2, [r7, #12]
 801330a:	429a      	cmp	r2, r3
 801330c:	d807      	bhi.n	801331e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801330e:	4b10      	ldr	r3, [pc, #64]	@ (8013350 <tcp_kill_state+0x90>)
 8013310:	681a      	ldr	r2, [r3, #0]
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	6a1b      	ldr	r3, [r3, #32]
 8013316:	1ad3      	subs	r3, r2, r3
 8013318:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801331a:	697b      	ldr	r3, [r7, #20]
 801331c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801331e:	697b      	ldr	r3, [r7, #20]
 8013320:	68db      	ldr	r3, [r3, #12]
 8013322:	617b      	str	r3, [r7, #20]
 8013324:	697b      	ldr	r3, [r7, #20]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d1e4      	bne.n	80132f4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d003      	beq.n	8013338 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013330:	2100      	movs	r1, #0
 8013332:	6938      	ldr	r0, [r7, #16]
 8013334:	f7fe ff78 	bl	8012228 <tcp_abandon>
  }
}
 8013338:	bf00      	nop
 801333a:	3718      	adds	r7, #24
 801333c:	46bd      	mov	sp, r7
 801333e:	bd80      	pop	{r7, pc}
 8013340:	0801eef4 	.word	0x0801eef4
 8013344:	0801f480 	.word	0x0801f480
 8013348:	0801ef38 	.word	0x0801ef38
 801334c:	2000c8bc 	.word	0x2000c8bc
 8013350:	2000c8b0 	.word	0x2000c8b0

08013354 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b084      	sub	sp, #16
 8013358:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801335a:	2300      	movs	r3, #0
 801335c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801335e:	2300      	movs	r3, #0
 8013360:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013362:	4b12      	ldr	r3, [pc, #72]	@ (80133ac <tcp_kill_timewait+0x58>)
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	60fb      	str	r3, [r7, #12]
 8013368:	e012      	b.n	8013390 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801336a:	4b11      	ldr	r3, [pc, #68]	@ (80133b0 <tcp_kill_timewait+0x5c>)
 801336c:	681a      	ldr	r2, [r3, #0]
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	6a1b      	ldr	r3, [r3, #32]
 8013372:	1ad3      	subs	r3, r2, r3
 8013374:	687a      	ldr	r2, [r7, #4]
 8013376:	429a      	cmp	r2, r3
 8013378:	d807      	bhi.n	801338a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801337a:	4b0d      	ldr	r3, [pc, #52]	@ (80133b0 <tcp_kill_timewait+0x5c>)
 801337c:	681a      	ldr	r2, [r3, #0]
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	6a1b      	ldr	r3, [r3, #32]
 8013382:	1ad3      	subs	r3, r2, r3
 8013384:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	68db      	ldr	r3, [r3, #12]
 801338e:	60fb      	str	r3, [r7, #12]
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d1e9      	bne.n	801336a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8013396:	68bb      	ldr	r3, [r7, #8]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d002      	beq.n	80133a2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801339c:	68b8      	ldr	r0, [r7, #8]
 801339e:	f7ff f801 	bl	80123a4 <tcp_abort>
  }
}
 80133a2:	bf00      	nop
 80133a4:	3710      	adds	r7, #16
 80133a6:	46bd      	mov	sp, r7
 80133a8:	bd80      	pop	{r7, pc}
 80133aa:	bf00      	nop
 80133ac:	2000c8c0 	.word	0x2000c8c0
 80133b0:	2000c8b0 	.word	0x2000c8b0

080133b4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b082      	sub	sp, #8
 80133b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80133ba:	4b10      	ldr	r3, [pc, #64]	@ (80133fc <tcp_handle_closepend+0x48>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80133c0:	e014      	b.n	80133ec <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	68db      	ldr	r3, [r3, #12]
 80133c6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	8b5b      	ldrh	r3, [r3, #26]
 80133cc:	f003 0308 	and.w	r3, r3, #8
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d009      	beq.n	80133e8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	8b5b      	ldrh	r3, [r3, #26]
 80133d8:	f023 0308 	bic.w	r3, r3, #8
 80133dc:	b29a      	uxth	r2, r3
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f7fe fe8a 	bl	80120fc <tcp_close_shutdown_fin>
    }
    pcb = next;
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d1e7      	bne.n	80133c2 <tcp_handle_closepend+0xe>
  }
}
 80133f2:	bf00      	nop
 80133f4:	bf00      	nop
 80133f6:	3708      	adds	r7, #8
 80133f8:	46bd      	mov	sp, r7
 80133fa:	bd80      	pop	{r7, pc}
 80133fc:	2000c8bc 	.word	0x2000c8bc

08013400 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013400:	b580      	push	{r7, lr}
 8013402:	b084      	sub	sp, #16
 8013404:	af00      	add	r7, sp, #0
 8013406:	4603      	mov	r3, r0
 8013408:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801340a:	2001      	movs	r0, #1
 801340c:	f7fd fb4e 	bl	8010aac <memp_malloc>
 8013410:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d126      	bne.n	8013466 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013418:	f7ff ffcc 	bl	80133b4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801341c:	f7ff ff9a 	bl	8013354 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013420:	2001      	movs	r0, #1
 8013422:	f7fd fb43 	bl	8010aac <memp_malloc>
 8013426:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d11b      	bne.n	8013466 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801342e:	2009      	movs	r0, #9
 8013430:	f7ff ff46 	bl	80132c0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013434:	2001      	movs	r0, #1
 8013436:	f7fd fb39 	bl	8010aac <memp_malloc>
 801343a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d111      	bne.n	8013466 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013442:	2008      	movs	r0, #8
 8013444:	f7ff ff3c 	bl	80132c0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013448:	2001      	movs	r0, #1
 801344a:	f7fd fb2f 	bl	8010aac <memp_malloc>
 801344e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d107      	bne.n	8013466 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013456:	79fb      	ldrb	r3, [r7, #7]
 8013458:	4618      	mov	r0, r3
 801345a:	f7ff fee3 	bl	8013224 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801345e:	2001      	movs	r0, #1
 8013460:	f7fd fb24 	bl	8010aac <memp_malloc>
 8013464:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d03f      	beq.n	80134ec <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801346c:	229c      	movs	r2, #156	@ 0x9c
 801346e:	2100      	movs	r1, #0
 8013470:	68f8      	ldr	r0, [r7, #12]
 8013472:	f008 fae8 	bl	801ba46 <memset>
    pcb->prio = prio;
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	79fa      	ldrb	r2, [r7, #7]
 801347a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8013482:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801348c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	22ff      	movs	r2, #255	@ 0xff
 801349a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80134a2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	2206      	movs	r2, #6
 80134a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	2206      	movs	r2, #6
 80134b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80134b8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	2201      	movs	r2, #1
 80134be:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80134c2:	4b0d      	ldr	r3, [pc, #52]	@ (80134f8 <tcp_alloc+0xf8>)
 80134c4:	681a      	ldr	r2, [r3, #0]
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80134ca:	4b0c      	ldr	r3, [pc, #48]	@ (80134fc <tcp_alloc+0xfc>)
 80134cc:	781a      	ldrb	r2, [r3, #0]
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80134d8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	4a08      	ldr	r2, [pc, #32]	@ (8013500 <tcp_alloc+0x100>)
 80134e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	4a07      	ldr	r2, [pc, #28]	@ (8013504 <tcp_alloc+0x104>)
 80134e8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80134ec:	68fb      	ldr	r3, [r7, #12]
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	3710      	adds	r7, #16
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}
 80134f6:	bf00      	nop
 80134f8:	2000c8b0 	.word	0x2000c8b0
 80134fc:	2000c8c6 	.word	0x2000c8c6
 8013500:	080131b9 	.word	0x080131b9
 8013504:	006ddd00 	.word	0x006ddd00

08013508 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8013508:	b580      	push	{r7, lr}
 801350a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 801350c:	2040      	movs	r0, #64	@ 0x40
 801350e:	f7ff ff77 	bl	8013400 <tcp_alloc>
 8013512:	4603      	mov	r3, r0
}
 8013514:	4618      	mov	r0, r3
 8013516:	bd80      	pop	{r7, pc}

08013518 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b082      	sub	sp, #8
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
 8013520:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d00e      	beq.n	8013546 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	7d1b      	ldrb	r3, [r3, #20]
 801352c:	2b01      	cmp	r3, #1
 801352e:	d106      	bne.n	801353e <tcp_recv+0x26>
 8013530:	4b07      	ldr	r3, [pc, #28]	@ (8013550 <tcp_recv+0x38>)
 8013532:	f240 72df 	movw	r2, #2015	@ 0x7df
 8013536:	4907      	ldr	r1, [pc, #28]	@ (8013554 <tcp_recv+0x3c>)
 8013538:	4807      	ldr	r0, [pc, #28]	@ (8013558 <tcp_recv+0x40>)
 801353a:	f008 f9cf 	bl	801b8dc <iprintf>
    pcb->recv = recv;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	683a      	ldr	r2, [r7, #0]
 8013542:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8013546:	bf00      	nop
 8013548:	3708      	adds	r7, #8
 801354a:	46bd      	mov	sp, r7
 801354c:	bd80      	pop	{r7, pc}
 801354e:	bf00      	nop
 8013550:	0801eef4 	.word	0x0801eef4
 8013554:	0801f490 	.word	0x0801f490
 8013558:	0801ef38 	.word	0x0801ef38

0801355c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b082      	sub	sp, #8
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
 8013564:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d00e      	beq.n	801358a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	7d1b      	ldrb	r3, [r3, #20]
 8013570:	2b01      	cmp	r3, #1
 8013572:	d106      	bne.n	8013582 <tcp_sent+0x26>
 8013574:	4b07      	ldr	r3, [pc, #28]	@ (8013594 <tcp_sent+0x38>)
 8013576:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 801357a:	4907      	ldr	r1, [pc, #28]	@ (8013598 <tcp_sent+0x3c>)
 801357c:	4807      	ldr	r0, [pc, #28]	@ (801359c <tcp_sent+0x40>)
 801357e:	f008 f9ad 	bl	801b8dc <iprintf>
    pcb->sent = sent;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	683a      	ldr	r2, [r7, #0]
 8013586:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 801358a:	bf00      	nop
 801358c:	3708      	adds	r7, #8
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}
 8013592:	bf00      	nop
 8013594:	0801eef4 	.word	0x0801eef4
 8013598:	0801f4b8 	.word	0x0801f4b8
 801359c:	0801ef38 	.word	0x0801ef38

080135a0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b082      	sub	sp, #8
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
 80135a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d00e      	beq.n	80135ce <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	7d1b      	ldrb	r3, [r3, #20]
 80135b4:	2b01      	cmp	r3, #1
 80135b6:	d106      	bne.n	80135c6 <tcp_err+0x26>
 80135b8:	4b07      	ldr	r3, [pc, #28]	@ (80135d8 <tcp_err+0x38>)
 80135ba:	f640 020d 	movw	r2, #2061	@ 0x80d
 80135be:	4907      	ldr	r1, [pc, #28]	@ (80135dc <tcp_err+0x3c>)
 80135c0:	4807      	ldr	r0, [pc, #28]	@ (80135e0 <tcp_err+0x40>)
 80135c2:	f008 f98b 	bl	801b8dc <iprintf>
    pcb->errf = err;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	683a      	ldr	r2, [r7, #0]
 80135ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 80135ce:	bf00      	nop
 80135d0:	3708      	adds	r7, #8
 80135d2:	46bd      	mov	sp, r7
 80135d4:	bd80      	pop	{r7, pc}
 80135d6:	bf00      	nop
 80135d8:	0801eef4 	.word	0x0801eef4
 80135dc:	0801f4e0 	.word	0x0801f4e0
 80135e0:	0801ef38 	.word	0x0801ef38

080135e4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80135e4:	b480      	push	{r7}
 80135e6:	b085      	sub	sp, #20
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
 80135ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d008      	beq.n	8013606 <tcp_accept+0x22>
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	7d1b      	ldrb	r3, [r3, #20]
 80135f8:	2b01      	cmp	r3, #1
 80135fa:	d104      	bne.n	8013606 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	683a      	ldr	r2, [r7, #0]
 8013604:	619a      	str	r2, [r3, #24]
  }
}
 8013606:	bf00      	nop
 8013608:	3714      	adds	r7, #20
 801360a:	46bd      	mov	sp, r7
 801360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013610:	4770      	bx	lr
	...

08013614 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013614:	b580      	push	{r7, lr}
 8013616:	b082      	sub	sp, #8
 8013618:	af00      	add	r7, sp, #0
 801361a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d107      	bne.n	8013632 <tcp_pcb_purge+0x1e>
 8013622:	4b21      	ldr	r3, [pc, #132]	@ (80136a8 <tcp_pcb_purge+0x94>)
 8013624:	f640 0251 	movw	r2, #2129	@ 0x851
 8013628:	4920      	ldr	r1, [pc, #128]	@ (80136ac <tcp_pcb_purge+0x98>)
 801362a:	4821      	ldr	r0, [pc, #132]	@ (80136b0 <tcp_pcb_purge+0x9c>)
 801362c:	f008 f956 	bl	801b8dc <iprintf>
 8013630:	e037      	b.n	80136a2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	7d1b      	ldrb	r3, [r3, #20]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d033      	beq.n	80136a2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801363e:	2b0a      	cmp	r3, #10
 8013640:	d02f      	beq.n	80136a2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8013646:	2b01      	cmp	r3, #1
 8013648:	d02b      	beq.n	80136a2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801364e:	2b00      	cmp	r3, #0
 8013650:	d007      	beq.n	8013662 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013656:	4618      	mov	r0, r3
 8013658:	f7fe f910 	bl	801187c <pbuf_free>
      pcb->refused_data = NULL;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	2200      	movs	r2, #0
 8013660:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013666:	2b00      	cmp	r3, #0
 8013668:	d002      	beq.n	8013670 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801366a:	6878      	ldr	r0, [r7, #4]
 801366c:	f000 f986 	bl	801397c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013676:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801367c:	4618      	mov	r0, r3
 801367e:	f7ff fd23 	bl	80130c8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013686:	4618      	mov	r0, r3
 8013688:	f7ff fd1e 	bl	80130c8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2200      	movs	r2, #0
 8013690:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	2200      	movs	r2, #0
 801369e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80136a2:	3708      	adds	r7, #8
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd80      	pop	{r7, pc}
 80136a8:	0801eef4 	.word	0x0801eef4
 80136ac:	0801f540 	.word	0x0801f540
 80136b0:	0801ef38 	.word	0x0801ef38

080136b4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b084      	sub	sp, #16
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
 80136bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80136be:	683b      	ldr	r3, [r7, #0]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d106      	bne.n	80136d2 <tcp_pcb_remove+0x1e>
 80136c4:	4b3e      	ldr	r3, [pc, #248]	@ (80137c0 <tcp_pcb_remove+0x10c>)
 80136c6:	f640 0283 	movw	r2, #2179	@ 0x883
 80136ca:	493e      	ldr	r1, [pc, #248]	@ (80137c4 <tcp_pcb_remove+0x110>)
 80136cc:	483e      	ldr	r0, [pc, #248]	@ (80137c8 <tcp_pcb_remove+0x114>)
 80136ce:	f008 f905 	bl	801b8dc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d106      	bne.n	80136e6 <tcp_pcb_remove+0x32>
 80136d8:	4b39      	ldr	r3, [pc, #228]	@ (80137c0 <tcp_pcb_remove+0x10c>)
 80136da:	f640 0284 	movw	r2, #2180	@ 0x884
 80136de:	493b      	ldr	r1, [pc, #236]	@ (80137cc <tcp_pcb_remove+0x118>)
 80136e0:	4839      	ldr	r0, [pc, #228]	@ (80137c8 <tcp_pcb_remove+0x114>)
 80136e2:	f008 f8fb 	bl	801b8dc <iprintf>

  TCP_RMV(pcblist, pcb);
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	683a      	ldr	r2, [r7, #0]
 80136ec:	429a      	cmp	r2, r3
 80136ee:	d105      	bne.n	80136fc <tcp_pcb_remove+0x48>
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	68da      	ldr	r2, [r3, #12]
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	601a      	str	r2, [r3, #0]
 80136fa:	e013      	b.n	8013724 <tcp_pcb_remove+0x70>
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	60fb      	str	r3, [r7, #12]
 8013702:	e00c      	b.n	801371e <tcp_pcb_remove+0x6a>
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	68db      	ldr	r3, [r3, #12]
 8013708:	683a      	ldr	r2, [r7, #0]
 801370a:	429a      	cmp	r2, r3
 801370c:	d104      	bne.n	8013718 <tcp_pcb_remove+0x64>
 801370e:	683b      	ldr	r3, [r7, #0]
 8013710:	68da      	ldr	r2, [r3, #12]
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	60da      	str	r2, [r3, #12]
 8013716:	e005      	b.n	8013724 <tcp_pcb_remove+0x70>
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	68db      	ldr	r3, [r3, #12]
 801371c:	60fb      	str	r3, [r7, #12]
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d1ef      	bne.n	8013704 <tcp_pcb_remove+0x50>
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	2200      	movs	r2, #0
 8013728:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801372a:	6838      	ldr	r0, [r7, #0]
 801372c:	f7ff ff72 	bl	8013614 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013730:	683b      	ldr	r3, [r7, #0]
 8013732:	7d1b      	ldrb	r3, [r3, #20]
 8013734:	2b0a      	cmp	r3, #10
 8013736:	d013      	beq.n	8013760 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013738:	683b      	ldr	r3, [r7, #0]
 801373a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801373c:	2b01      	cmp	r3, #1
 801373e:	d00f      	beq.n	8013760 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013740:	683b      	ldr	r3, [r7, #0]
 8013742:	8b5b      	ldrh	r3, [r3, #26]
 8013744:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013748:	2b00      	cmp	r3, #0
 801374a:	d009      	beq.n	8013760 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	8b5b      	ldrh	r3, [r3, #26]
 8013750:	f043 0302 	orr.w	r3, r3, #2
 8013754:	b29a      	uxth	r2, r3
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801375a:	6838      	ldr	r0, [r7, #0]
 801375c:	f003 fbc0 	bl	8016ee0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013760:	683b      	ldr	r3, [r7, #0]
 8013762:	7d1b      	ldrb	r3, [r3, #20]
 8013764:	2b01      	cmp	r3, #1
 8013766:	d020      	beq.n	80137aa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801376c:	2b00      	cmp	r3, #0
 801376e:	d006      	beq.n	801377e <tcp_pcb_remove+0xca>
 8013770:	4b13      	ldr	r3, [pc, #76]	@ (80137c0 <tcp_pcb_remove+0x10c>)
 8013772:	f640 0293 	movw	r2, #2195	@ 0x893
 8013776:	4916      	ldr	r1, [pc, #88]	@ (80137d0 <tcp_pcb_remove+0x11c>)
 8013778:	4813      	ldr	r0, [pc, #76]	@ (80137c8 <tcp_pcb_remove+0x114>)
 801377a:	f008 f8af 	bl	801b8dc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801377e:	683b      	ldr	r3, [r7, #0]
 8013780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013782:	2b00      	cmp	r3, #0
 8013784:	d006      	beq.n	8013794 <tcp_pcb_remove+0xe0>
 8013786:	4b0e      	ldr	r3, [pc, #56]	@ (80137c0 <tcp_pcb_remove+0x10c>)
 8013788:	f640 0294 	movw	r2, #2196	@ 0x894
 801378c:	4911      	ldr	r1, [pc, #68]	@ (80137d4 <tcp_pcb_remove+0x120>)
 801378e:	480e      	ldr	r0, [pc, #56]	@ (80137c8 <tcp_pcb_remove+0x114>)
 8013790:	f008 f8a4 	bl	801b8dc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013798:	2b00      	cmp	r3, #0
 801379a:	d006      	beq.n	80137aa <tcp_pcb_remove+0xf6>
 801379c:	4b08      	ldr	r3, [pc, #32]	@ (80137c0 <tcp_pcb_remove+0x10c>)
 801379e:	f640 0296 	movw	r2, #2198	@ 0x896
 80137a2:	490d      	ldr	r1, [pc, #52]	@ (80137d8 <tcp_pcb_remove+0x124>)
 80137a4:	4808      	ldr	r0, [pc, #32]	@ (80137c8 <tcp_pcb_remove+0x114>)
 80137a6:	f008 f899 	bl	801b8dc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	2200      	movs	r2, #0
 80137ae:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80137b0:	683b      	ldr	r3, [r7, #0]
 80137b2:	2200      	movs	r2, #0
 80137b4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80137b6:	bf00      	nop
 80137b8:	3710      	adds	r7, #16
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}
 80137be:	bf00      	nop
 80137c0:	0801eef4 	.word	0x0801eef4
 80137c4:	0801f55c 	.word	0x0801f55c
 80137c8:	0801ef38 	.word	0x0801ef38
 80137cc:	0801f578 	.word	0x0801f578
 80137d0:	0801f598 	.word	0x0801f598
 80137d4:	0801f5b0 	.word	0x0801f5b0
 80137d8:	0801f5cc 	.word	0x0801f5cc

080137dc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b082      	sub	sp, #8
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d106      	bne.n	80137f8 <tcp_next_iss+0x1c>
 80137ea:	4b0a      	ldr	r3, [pc, #40]	@ (8013814 <tcp_next_iss+0x38>)
 80137ec:	f640 02af 	movw	r2, #2223	@ 0x8af
 80137f0:	4909      	ldr	r1, [pc, #36]	@ (8013818 <tcp_next_iss+0x3c>)
 80137f2:	480a      	ldr	r0, [pc, #40]	@ (801381c <tcp_next_iss+0x40>)
 80137f4:	f008 f872 	bl	801b8dc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80137f8:	4b09      	ldr	r3, [pc, #36]	@ (8013820 <tcp_next_iss+0x44>)
 80137fa:	681a      	ldr	r2, [r3, #0]
 80137fc:	4b09      	ldr	r3, [pc, #36]	@ (8013824 <tcp_next_iss+0x48>)
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	4413      	add	r3, r2
 8013802:	4a07      	ldr	r2, [pc, #28]	@ (8013820 <tcp_next_iss+0x44>)
 8013804:	6013      	str	r3, [r2, #0]
  return iss;
 8013806:	4b06      	ldr	r3, [pc, #24]	@ (8013820 <tcp_next_iss+0x44>)
 8013808:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801380a:	4618      	mov	r0, r3
 801380c:	3708      	adds	r7, #8
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}
 8013812:	bf00      	nop
 8013814:	0801eef4 	.word	0x0801eef4
 8013818:	0801f5e4 	.word	0x0801f5e4
 801381c:	0801ef38 	.word	0x0801ef38
 8013820:	200000a0 	.word	0x200000a0
 8013824:	2000c8b0 	.word	0x2000c8b0

08013828 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b086      	sub	sp, #24
 801382c:	af00      	add	r7, sp, #0
 801382e:	4603      	mov	r3, r0
 8013830:	60b9      	str	r1, [r7, #8]
 8013832:	607a      	str	r2, [r7, #4]
 8013834:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d106      	bne.n	801384a <tcp_eff_send_mss_netif+0x22>
 801383c:	4b14      	ldr	r3, [pc, #80]	@ (8013890 <tcp_eff_send_mss_netif+0x68>)
 801383e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8013842:	4914      	ldr	r1, [pc, #80]	@ (8013894 <tcp_eff_send_mss_netif+0x6c>)
 8013844:	4814      	ldr	r0, [pc, #80]	@ (8013898 <tcp_eff_send_mss_netif+0x70>)
 8013846:	f008 f849 	bl	801b8dc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d101      	bne.n	8013854 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013850:	89fb      	ldrh	r3, [r7, #14]
 8013852:	e019      	b.n	8013888 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013854:	68bb      	ldr	r3, [r7, #8]
 8013856:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013858:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801385a:	8afb      	ldrh	r3, [r7, #22]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d012      	beq.n	8013886 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013860:	2328      	movs	r3, #40	@ 0x28
 8013862:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013864:	8afa      	ldrh	r2, [r7, #22]
 8013866:	8abb      	ldrh	r3, [r7, #20]
 8013868:	429a      	cmp	r2, r3
 801386a:	d904      	bls.n	8013876 <tcp_eff_send_mss_netif+0x4e>
 801386c:	8afa      	ldrh	r2, [r7, #22]
 801386e:	8abb      	ldrh	r3, [r7, #20]
 8013870:	1ad3      	subs	r3, r2, r3
 8013872:	b29b      	uxth	r3, r3
 8013874:	e000      	b.n	8013878 <tcp_eff_send_mss_netif+0x50>
 8013876:	2300      	movs	r3, #0
 8013878:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801387a:	8a7a      	ldrh	r2, [r7, #18]
 801387c:	89fb      	ldrh	r3, [r7, #14]
 801387e:	4293      	cmp	r3, r2
 8013880:	bf28      	it	cs
 8013882:	4613      	movcs	r3, r2
 8013884:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8013886:	89fb      	ldrh	r3, [r7, #14]
}
 8013888:	4618      	mov	r0, r3
 801388a:	3718      	adds	r7, #24
 801388c:	46bd      	mov	sp, r7
 801388e:	bd80      	pop	{r7, pc}
 8013890:	0801eef4 	.word	0x0801eef4
 8013894:	0801f600 	.word	0x0801f600
 8013898:	0801ef38 	.word	0x0801ef38

0801389c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801389c:	b580      	push	{r7, lr}
 801389e:	b084      	sub	sp, #16
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
 80138a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80138a6:	683b      	ldr	r3, [r7, #0]
 80138a8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d119      	bne.n	80138e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80138b0:	4b10      	ldr	r3, [pc, #64]	@ (80138f4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80138b2:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80138b6:	4910      	ldr	r1, [pc, #64]	@ (80138f8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80138b8:	4810      	ldr	r0, [pc, #64]	@ (80138fc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80138ba:	f008 f80f 	bl	801b8dc <iprintf>

  while (pcb != NULL) {
 80138be:	e011      	b.n	80138e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	681a      	ldr	r2, [r3, #0]
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d108      	bne.n	80138de <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	68db      	ldr	r3, [r3, #12]
 80138d0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80138d2:	68f8      	ldr	r0, [r7, #12]
 80138d4:	f7fe fd66 	bl	80123a4 <tcp_abort>
      pcb = next;
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	60fb      	str	r3, [r7, #12]
 80138dc:	e002      	b.n	80138e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	68db      	ldr	r3, [r3, #12]
 80138e2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d1ea      	bne.n	80138c0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80138ea:	bf00      	nop
 80138ec:	bf00      	nop
 80138ee:	3710      	adds	r7, #16
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}
 80138f4:	0801eef4 	.word	0x0801eef4
 80138f8:	0801f628 	.word	0x0801f628
 80138fc:	0801ef38 	.word	0x0801ef38

08013900 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b084      	sub	sp, #16
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d02a      	beq.n	8013966 <tcp_netif_ip_addr_changed+0x66>
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d026      	beq.n	8013966 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013918:	4b15      	ldr	r3, [pc, #84]	@ (8013970 <tcp_netif_ip_addr_changed+0x70>)
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	4619      	mov	r1, r3
 801391e:	6878      	ldr	r0, [r7, #4]
 8013920:	f7ff ffbc 	bl	801389c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8013924:	4b13      	ldr	r3, [pc, #76]	@ (8013974 <tcp_netif_ip_addr_changed+0x74>)
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	4619      	mov	r1, r3
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f7ff ffb6 	bl	801389c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013930:	683b      	ldr	r3, [r7, #0]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d017      	beq.n	8013966 <tcp_netif_ip_addr_changed+0x66>
 8013936:	683b      	ldr	r3, [r7, #0]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d013      	beq.n	8013966 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801393e:	4b0e      	ldr	r3, [pc, #56]	@ (8013978 <tcp_netif_ip_addr_changed+0x78>)
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	60fb      	str	r3, [r7, #12]
 8013944:	e00c      	b.n	8013960 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	681a      	ldr	r2, [r3, #0]
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	429a      	cmp	r2, r3
 8013950:	d103      	bne.n	801395a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013952:	683b      	ldr	r3, [r7, #0]
 8013954:	681a      	ldr	r2, [r3, #0]
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	68db      	ldr	r3, [r3, #12]
 801395e:	60fb      	str	r3, [r7, #12]
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d1ef      	bne.n	8013946 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8013966:	bf00      	nop
 8013968:	3710      	adds	r7, #16
 801396a:	46bd      	mov	sp, r7
 801396c:	bd80      	pop	{r7, pc}
 801396e:	bf00      	nop
 8013970:	2000c8bc 	.word	0x2000c8bc
 8013974:	2000c8b4 	.word	0x2000c8b4
 8013978:	2000c8b8 	.word	0x2000c8b8

0801397c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b082      	sub	sp, #8
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013988:	2b00      	cmp	r3, #0
 801398a:	d007      	beq.n	801399c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013990:	4618      	mov	r0, r3
 8013992:	f7ff fb99 	bl	80130c8 <tcp_segs_free>
    pcb->ooseq = NULL;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	2200      	movs	r2, #0
 801399a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801399c:	bf00      	nop
 801399e:	3708      	adds	r7, #8
 80139a0:	46bd      	mov	sp, r7
 80139a2:	bd80      	pop	{r7, pc}

080139a4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80139a4:	b590      	push	{r4, r7, lr}
 80139a6:	b08d      	sub	sp, #52	@ 0x34
 80139a8:	af04      	add	r7, sp, #16
 80139aa:	6078      	str	r0, [r7, #4]
 80139ac:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d105      	bne.n	80139c0 <tcp_input+0x1c>
 80139b4:	4b9b      	ldr	r3, [pc, #620]	@ (8013c24 <tcp_input+0x280>)
 80139b6:	2283      	movs	r2, #131	@ 0x83
 80139b8:	499b      	ldr	r1, [pc, #620]	@ (8013c28 <tcp_input+0x284>)
 80139ba:	489c      	ldr	r0, [pc, #624]	@ (8013c2c <tcp_input+0x288>)
 80139bc:	f007 ff8e 	bl	801b8dc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	685b      	ldr	r3, [r3, #4]
 80139c4:	4a9a      	ldr	r2, [pc, #616]	@ (8013c30 <tcp_input+0x28c>)
 80139c6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	895b      	ldrh	r3, [r3, #10]
 80139cc:	2b13      	cmp	r3, #19
 80139ce:	f240 83d1 	bls.w	8014174 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80139d2:	4b98      	ldr	r3, [pc, #608]	@ (8013c34 <tcp_input+0x290>)
 80139d4:	695b      	ldr	r3, [r3, #20]
 80139d6:	4a97      	ldr	r2, [pc, #604]	@ (8013c34 <tcp_input+0x290>)
 80139d8:	6812      	ldr	r2, [r2, #0]
 80139da:	4611      	mov	r1, r2
 80139dc:	4618      	mov	r0, r3
 80139de:	f006 f867 	bl	8019ab0 <ip4_addr_isbroadcast_u32>
 80139e2:	4603      	mov	r3, r0
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	f040 83c7 	bne.w	8014178 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80139ea:	4b92      	ldr	r3, [pc, #584]	@ (8013c34 <tcp_input+0x290>)
 80139ec:	695b      	ldr	r3, [r3, #20]
 80139ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80139f2:	2be0      	cmp	r3, #224	@ 0xe0
 80139f4:	f000 83c0 	beq.w	8014178 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80139f8:	4b8d      	ldr	r3, [pc, #564]	@ (8013c30 <tcp_input+0x28c>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	899b      	ldrh	r3, [r3, #12]
 80139fe:	b29b      	uxth	r3, r3
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7fc fb7b 	bl	80100fc <lwip_htons>
 8013a06:	4603      	mov	r3, r0
 8013a08:	0b1b      	lsrs	r3, r3, #12
 8013a0a:	b29b      	uxth	r3, r3
 8013a0c:	b2db      	uxtb	r3, r3
 8013a0e:	009b      	lsls	r3, r3, #2
 8013a10:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8013a12:	7cbb      	ldrb	r3, [r7, #18]
 8013a14:	2b13      	cmp	r3, #19
 8013a16:	f240 83b1 	bls.w	801417c <tcp_input+0x7d8>
 8013a1a:	7cbb      	ldrb	r3, [r7, #18]
 8013a1c:	b29a      	uxth	r2, r3
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	891b      	ldrh	r3, [r3, #8]
 8013a22:	429a      	cmp	r2, r3
 8013a24:	f200 83aa 	bhi.w	801417c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013a28:	7cbb      	ldrb	r3, [r7, #18]
 8013a2a:	b29b      	uxth	r3, r3
 8013a2c:	3b14      	subs	r3, #20
 8013a2e:	b29a      	uxth	r2, r3
 8013a30:	4b81      	ldr	r3, [pc, #516]	@ (8013c38 <tcp_input+0x294>)
 8013a32:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8013a34:	4b81      	ldr	r3, [pc, #516]	@ (8013c3c <tcp_input+0x298>)
 8013a36:	2200      	movs	r2, #0
 8013a38:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	895a      	ldrh	r2, [r3, #10]
 8013a3e:	7cbb      	ldrb	r3, [r7, #18]
 8013a40:	b29b      	uxth	r3, r3
 8013a42:	429a      	cmp	r2, r3
 8013a44:	d309      	bcc.n	8013a5a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8013a46:	4b7c      	ldr	r3, [pc, #496]	@ (8013c38 <tcp_input+0x294>)
 8013a48:	881a      	ldrh	r2, [r3, #0]
 8013a4a:	4b7d      	ldr	r3, [pc, #500]	@ (8013c40 <tcp_input+0x29c>)
 8013a4c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013a4e:	7cbb      	ldrb	r3, [r7, #18]
 8013a50:	4619      	mov	r1, r3
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	f7fd fe8c 	bl	8011770 <pbuf_remove_header>
 8013a58:	e04e      	b.n	8013af8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d105      	bne.n	8013a6e <tcp_input+0xca>
 8013a62:	4b70      	ldr	r3, [pc, #448]	@ (8013c24 <tcp_input+0x280>)
 8013a64:	22c2      	movs	r2, #194	@ 0xc2
 8013a66:	4977      	ldr	r1, [pc, #476]	@ (8013c44 <tcp_input+0x2a0>)
 8013a68:	4870      	ldr	r0, [pc, #448]	@ (8013c2c <tcp_input+0x288>)
 8013a6a:	f007 ff37 	bl	801b8dc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013a6e:	2114      	movs	r1, #20
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	f7fd fe7d 	bl	8011770 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	895a      	ldrh	r2, [r3, #10]
 8013a7a:	4b71      	ldr	r3, [pc, #452]	@ (8013c40 <tcp_input+0x29c>)
 8013a7c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013a7e:	4b6e      	ldr	r3, [pc, #440]	@ (8013c38 <tcp_input+0x294>)
 8013a80:	881a      	ldrh	r2, [r3, #0]
 8013a82:	4b6f      	ldr	r3, [pc, #444]	@ (8013c40 <tcp_input+0x29c>)
 8013a84:	881b      	ldrh	r3, [r3, #0]
 8013a86:	1ad3      	subs	r3, r2, r3
 8013a88:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8013a8a:	4b6d      	ldr	r3, [pc, #436]	@ (8013c40 <tcp_input+0x29c>)
 8013a8c:	881b      	ldrh	r3, [r3, #0]
 8013a8e:	4619      	mov	r1, r3
 8013a90:	6878      	ldr	r0, [r7, #4]
 8013a92:	f7fd fe6d 	bl	8011770 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	895b      	ldrh	r3, [r3, #10]
 8013a9c:	8a3a      	ldrh	r2, [r7, #16]
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	f200 836e 	bhi.w	8014180 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	685b      	ldr	r3, [r3, #4]
 8013aaa:	4a64      	ldr	r2, [pc, #400]	@ (8013c3c <tcp_input+0x298>)
 8013aac:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	8a3a      	ldrh	r2, [r7, #16]
 8013ab4:	4611      	mov	r1, r2
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7fd fe5a 	bl	8011770 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	891a      	ldrh	r2, [r3, #8]
 8013ac0:	8a3b      	ldrh	r3, [r7, #16]
 8013ac2:	1ad3      	subs	r3, r2, r3
 8013ac4:	b29a      	uxth	r2, r3
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	895b      	ldrh	r3, [r3, #10]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d005      	beq.n	8013ade <tcp_input+0x13a>
 8013ad2:	4b54      	ldr	r3, [pc, #336]	@ (8013c24 <tcp_input+0x280>)
 8013ad4:	22df      	movs	r2, #223	@ 0xdf
 8013ad6:	495c      	ldr	r1, [pc, #368]	@ (8013c48 <tcp_input+0x2a4>)
 8013ad8:	4854      	ldr	r0, [pc, #336]	@ (8013c2c <tcp_input+0x288>)
 8013ada:	f007 feff 	bl	801b8dc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	891a      	ldrh	r2, [r3, #8]
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	891b      	ldrh	r3, [r3, #8]
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d005      	beq.n	8013af8 <tcp_input+0x154>
 8013aec:	4b4d      	ldr	r3, [pc, #308]	@ (8013c24 <tcp_input+0x280>)
 8013aee:	22e0      	movs	r2, #224	@ 0xe0
 8013af0:	4956      	ldr	r1, [pc, #344]	@ (8013c4c <tcp_input+0x2a8>)
 8013af2:	484e      	ldr	r0, [pc, #312]	@ (8013c2c <tcp_input+0x288>)
 8013af4:	f007 fef2 	bl	801b8dc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013af8:	4b4d      	ldr	r3, [pc, #308]	@ (8013c30 <tcp_input+0x28c>)
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	881b      	ldrh	r3, [r3, #0]
 8013afe:	b29b      	uxth	r3, r3
 8013b00:	4a4b      	ldr	r2, [pc, #300]	@ (8013c30 <tcp_input+0x28c>)
 8013b02:	6814      	ldr	r4, [r2, #0]
 8013b04:	4618      	mov	r0, r3
 8013b06:	f7fc faf9 	bl	80100fc <lwip_htons>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013b0e:	4b48      	ldr	r3, [pc, #288]	@ (8013c30 <tcp_input+0x28c>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	885b      	ldrh	r3, [r3, #2]
 8013b14:	b29b      	uxth	r3, r3
 8013b16:	4a46      	ldr	r2, [pc, #280]	@ (8013c30 <tcp_input+0x28c>)
 8013b18:	6814      	ldr	r4, [r2, #0]
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	f7fc faee 	bl	80100fc <lwip_htons>
 8013b20:	4603      	mov	r3, r0
 8013b22:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8013b24:	4b42      	ldr	r3, [pc, #264]	@ (8013c30 <tcp_input+0x28c>)
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	685b      	ldr	r3, [r3, #4]
 8013b2a:	4a41      	ldr	r2, [pc, #260]	@ (8013c30 <tcp_input+0x28c>)
 8013b2c:	6814      	ldr	r4, [r2, #0]
 8013b2e:	4618      	mov	r0, r3
 8013b30:	f7fc fafa 	bl	8010128 <lwip_htonl>
 8013b34:	4603      	mov	r3, r0
 8013b36:	6063      	str	r3, [r4, #4]
 8013b38:	6863      	ldr	r3, [r4, #4]
 8013b3a:	4a45      	ldr	r2, [pc, #276]	@ (8013c50 <tcp_input+0x2ac>)
 8013b3c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013b3e:	4b3c      	ldr	r3, [pc, #240]	@ (8013c30 <tcp_input+0x28c>)
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	689b      	ldr	r3, [r3, #8]
 8013b44:	4a3a      	ldr	r2, [pc, #232]	@ (8013c30 <tcp_input+0x28c>)
 8013b46:	6814      	ldr	r4, [r2, #0]
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f7fc faed 	bl	8010128 <lwip_htonl>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	60a3      	str	r3, [r4, #8]
 8013b52:	68a3      	ldr	r3, [r4, #8]
 8013b54:	4a3f      	ldr	r2, [pc, #252]	@ (8013c54 <tcp_input+0x2b0>)
 8013b56:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013b58:	4b35      	ldr	r3, [pc, #212]	@ (8013c30 <tcp_input+0x28c>)
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	89db      	ldrh	r3, [r3, #14]
 8013b5e:	b29b      	uxth	r3, r3
 8013b60:	4a33      	ldr	r2, [pc, #204]	@ (8013c30 <tcp_input+0x28c>)
 8013b62:	6814      	ldr	r4, [r2, #0]
 8013b64:	4618      	mov	r0, r3
 8013b66:	f7fc fac9 	bl	80100fc <lwip_htons>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013b6e:	4b30      	ldr	r3, [pc, #192]	@ (8013c30 <tcp_input+0x28c>)
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	899b      	ldrh	r3, [r3, #12]
 8013b74:	b29b      	uxth	r3, r3
 8013b76:	4618      	mov	r0, r3
 8013b78:	f7fc fac0 	bl	80100fc <lwip_htons>
 8013b7c:	4603      	mov	r3, r0
 8013b7e:	b2db      	uxtb	r3, r3
 8013b80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013b84:	b2da      	uxtb	r2, r3
 8013b86:	4b34      	ldr	r3, [pc, #208]	@ (8013c58 <tcp_input+0x2b4>)
 8013b88:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	891a      	ldrh	r2, [r3, #8]
 8013b8e:	4b33      	ldr	r3, [pc, #204]	@ (8013c5c <tcp_input+0x2b8>)
 8013b90:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013b92:	4b31      	ldr	r3, [pc, #196]	@ (8013c58 <tcp_input+0x2b4>)
 8013b94:	781b      	ldrb	r3, [r3, #0]
 8013b96:	f003 0303 	and.w	r3, r3, #3
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d00c      	beq.n	8013bb8 <tcp_input+0x214>
    tcplen++;
 8013b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8013c5c <tcp_input+0x2b8>)
 8013ba0:	881b      	ldrh	r3, [r3, #0]
 8013ba2:	3301      	adds	r3, #1
 8013ba4:	b29a      	uxth	r2, r3
 8013ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8013c5c <tcp_input+0x2b8>)
 8013ba8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	891a      	ldrh	r2, [r3, #8]
 8013bae:	4b2b      	ldr	r3, [pc, #172]	@ (8013c5c <tcp_input+0x2b8>)
 8013bb0:	881b      	ldrh	r3, [r3, #0]
 8013bb2:	429a      	cmp	r2, r3
 8013bb4:	f200 82e6 	bhi.w	8014184 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013bb8:	2300      	movs	r3, #0
 8013bba:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013bbc:	4b28      	ldr	r3, [pc, #160]	@ (8013c60 <tcp_input+0x2bc>)
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	61fb      	str	r3, [r7, #28]
 8013bc2:	e09d      	b.n	8013d00 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013bc4:	69fb      	ldr	r3, [r7, #28]
 8013bc6:	7d1b      	ldrb	r3, [r3, #20]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d105      	bne.n	8013bd8 <tcp_input+0x234>
 8013bcc:	4b15      	ldr	r3, [pc, #84]	@ (8013c24 <tcp_input+0x280>)
 8013bce:	22fb      	movs	r2, #251	@ 0xfb
 8013bd0:	4924      	ldr	r1, [pc, #144]	@ (8013c64 <tcp_input+0x2c0>)
 8013bd2:	4816      	ldr	r0, [pc, #88]	@ (8013c2c <tcp_input+0x288>)
 8013bd4:	f007 fe82 	bl	801b8dc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013bd8:	69fb      	ldr	r3, [r7, #28]
 8013bda:	7d1b      	ldrb	r3, [r3, #20]
 8013bdc:	2b0a      	cmp	r3, #10
 8013bde:	d105      	bne.n	8013bec <tcp_input+0x248>
 8013be0:	4b10      	ldr	r3, [pc, #64]	@ (8013c24 <tcp_input+0x280>)
 8013be2:	22fc      	movs	r2, #252	@ 0xfc
 8013be4:	4920      	ldr	r1, [pc, #128]	@ (8013c68 <tcp_input+0x2c4>)
 8013be6:	4811      	ldr	r0, [pc, #68]	@ (8013c2c <tcp_input+0x288>)
 8013be8:	f007 fe78 	bl	801b8dc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013bec:	69fb      	ldr	r3, [r7, #28]
 8013bee:	7d1b      	ldrb	r3, [r3, #20]
 8013bf0:	2b01      	cmp	r3, #1
 8013bf2:	d105      	bne.n	8013c00 <tcp_input+0x25c>
 8013bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8013c24 <tcp_input+0x280>)
 8013bf6:	22fd      	movs	r2, #253	@ 0xfd
 8013bf8:	491c      	ldr	r1, [pc, #112]	@ (8013c6c <tcp_input+0x2c8>)
 8013bfa:	480c      	ldr	r0, [pc, #48]	@ (8013c2c <tcp_input+0x288>)
 8013bfc:	f007 fe6e 	bl	801b8dc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013c00:	69fb      	ldr	r3, [r7, #28]
 8013c02:	7a1b      	ldrb	r3, [r3, #8]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d033      	beq.n	8013c70 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013c08:	69fb      	ldr	r3, [r7, #28]
 8013c0a:	7a1a      	ldrb	r2, [r3, #8]
 8013c0c:	4b09      	ldr	r3, [pc, #36]	@ (8013c34 <tcp_input+0x290>)
 8013c0e:	685b      	ldr	r3, [r3, #4]
 8013c10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013c14:	3301      	adds	r3, #1
 8013c16:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013c18:	429a      	cmp	r2, r3
 8013c1a:	d029      	beq.n	8013c70 <tcp_input+0x2cc>
      prev = pcb;
 8013c1c:	69fb      	ldr	r3, [r7, #28]
 8013c1e:	61bb      	str	r3, [r7, #24]
      continue;
 8013c20:	e06b      	b.n	8013cfa <tcp_input+0x356>
 8013c22:	bf00      	nop
 8013c24:	0801f65c 	.word	0x0801f65c
 8013c28:	0801f690 	.word	0x0801f690
 8013c2c:	0801f6a8 	.word	0x0801f6a8
 8013c30:	2000c8d8 	.word	0x2000c8d8
 8013c34:	2000915c 	.word	0x2000915c
 8013c38:	2000c8dc 	.word	0x2000c8dc
 8013c3c:	2000c8e0 	.word	0x2000c8e0
 8013c40:	2000c8de 	.word	0x2000c8de
 8013c44:	0801f6d0 	.word	0x0801f6d0
 8013c48:	0801f6e0 	.word	0x0801f6e0
 8013c4c:	0801f6ec 	.word	0x0801f6ec
 8013c50:	2000c8e8 	.word	0x2000c8e8
 8013c54:	2000c8ec 	.word	0x2000c8ec
 8013c58:	2000c8f4 	.word	0x2000c8f4
 8013c5c:	2000c8f2 	.word	0x2000c8f2
 8013c60:	2000c8bc 	.word	0x2000c8bc
 8013c64:	0801f70c 	.word	0x0801f70c
 8013c68:	0801f734 	.word	0x0801f734
 8013c6c:	0801f760 	.word	0x0801f760
    }

    if (pcb->remote_port == tcphdr->src &&
 8013c70:	69fb      	ldr	r3, [r7, #28]
 8013c72:	8b1a      	ldrh	r2, [r3, #24]
 8013c74:	4b72      	ldr	r3, [pc, #456]	@ (8013e40 <tcp_input+0x49c>)
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	881b      	ldrh	r3, [r3, #0]
 8013c7a:	b29b      	uxth	r3, r3
 8013c7c:	429a      	cmp	r2, r3
 8013c7e:	d13a      	bne.n	8013cf6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013c80:	69fb      	ldr	r3, [r7, #28]
 8013c82:	8ada      	ldrh	r2, [r3, #22]
 8013c84:	4b6e      	ldr	r3, [pc, #440]	@ (8013e40 <tcp_input+0x49c>)
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	885b      	ldrh	r3, [r3, #2]
 8013c8a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013c8c:	429a      	cmp	r2, r3
 8013c8e:	d132      	bne.n	8013cf6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013c90:	69fb      	ldr	r3, [r7, #28]
 8013c92:	685a      	ldr	r2, [r3, #4]
 8013c94:	4b6b      	ldr	r3, [pc, #428]	@ (8013e44 <tcp_input+0x4a0>)
 8013c96:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013c98:	429a      	cmp	r2, r3
 8013c9a:	d12c      	bne.n	8013cf6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013c9c:	69fb      	ldr	r3, [r7, #28]
 8013c9e:	681a      	ldr	r2, [r3, #0]
 8013ca0:	4b68      	ldr	r3, [pc, #416]	@ (8013e44 <tcp_input+0x4a0>)
 8013ca2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013ca4:	429a      	cmp	r2, r3
 8013ca6:	d126      	bne.n	8013cf6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013ca8:	69fb      	ldr	r3, [r7, #28]
 8013caa:	68db      	ldr	r3, [r3, #12]
 8013cac:	69fa      	ldr	r2, [r7, #28]
 8013cae:	429a      	cmp	r2, r3
 8013cb0:	d106      	bne.n	8013cc0 <tcp_input+0x31c>
 8013cb2:	4b65      	ldr	r3, [pc, #404]	@ (8013e48 <tcp_input+0x4a4>)
 8013cb4:	f240 120d 	movw	r2, #269	@ 0x10d
 8013cb8:	4964      	ldr	r1, [pc, #400]	@ (8013e4c <tcp_input+0x4a8>)
 8013cba:	4865      	ldr	r0, [pc, #404]	@ (8013e50 <tcp_input+0x4ac>)
 8013cbc:	f007 fe0e 	bl	801b8dc <iprintf>
      if (prev != NULL) {
 8013cc0:	69bb      	ldr	r3, [r7, #24]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d00a      	beq.n	8013cdc <tcp_input+0x338>
        prev->next = pcb->next;
 8013cc6:	69fb      	ldr	r3, [r7, #28]
 8013cc8:	68da      	ldr	r2, [r3, #12]
 8013cca:	69bb      	ldr	r3, [r7, #24]
 8013ccc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013cce:	4b61      	ldr	r3, [pc, #388]	@ (8013e54 <tcp_input+0x4b0>)
 8013cd0:	681a      	ldr	r2, [r3, #0]
 8013cd2:	69fb      	ldr	r3, [r7, #28]
 8013cd4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8013cd6:	4a5f      	ldr	r2, [pc, #380]	@ (8013e54 <tcp_input+0x4b0>)
 8013cd8:	69fb      	ldr	r3, [r7, #28]
 8013cda:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013cdc:	69fb      	ldr	r3, [r7, #28]
 8013cde:	68db      	ldr	r3, [r3, #12]
 8013ce0:	69fa      	ldr	r2, [r7, #28]
 8013ce2:	429a      	cmp	r2, r3
 8013ce4:	d111      	bne.n	8013d0a <tcp_input+0x366>
 8013ce6:	4b58      	ldr	r3, [pc, #352]	@ (8013e48 <tcp_input+0x4a4>)
 8013ce8:	f240 1215 	movw	r2, #277	@ 0x115
 8013cec:	495a      	ldr	r1, [pc, #360]	@ (8013e58 <tcp_input+0x4b4>)
 8013cee:	4858      	ldr	r0, [pc, #352]	@ (8013e50 <tcp_input+0x4ac>)
 8013cf0:	f007 fdf4 	bl	801b8dc <iprintf>
      break;
 8013cf4:	e009      	b.n	8013d0a <tcp_input+0x366>
    }
    prev = pcb;
 8013cf6:	69fb      	ldr	r3, [r7, #28]
 8013cf8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cfa:	69fb      	ldr	r3, [r7, #28]
 8013cfc:	68db      	ldr	r3, [r3, #12]
 8013cfe:	61fb      	str	r3, [r7, #28]
 8013d00:	69fb      	ldr	r3, [r7, #28]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	f47f af5e 	bne.w	8013bc4 <tcp_input+0x220>
 8013d08:	e000      	b.n	8013d0c <tcp_input+0x368>
      break;
 8013d0a:	bf00      	nop
  }

  if (pcb == NULL) {
 8013d0c:	69fb      	ldr	r3, [r7, #28]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	f040 80aa 	bne.w	8013e68 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d14:	4b51      	ldr	r3, [pc, #324]	@ (8013e5c <tcp_input+0x4b8>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	61fb      	str	r3, [r7, #28]
 8013d1a:	e03f      	b.n	8013d9c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013d1c:	69fb      	ldr	r3, [r7, #28]
 8013d1e:	7d1b      	ldrb	r3, [r3, #20]
 8013d20:	2b0a      	cmp	r3, #10
 8013d22:	d006      	beq.n	8013d32 <tcp_input+0x38e>
 8013d24:	4b48      	ldr	r3, [pc, #288]	@ (8013e48 <tcp_input+0x4a4>)
 8013d26:	f240 121f 	movw	r2, #287	@ 0x11f
 8013d2a:	494d      	ldr	r1, [pc, #308]	@ (8013e60 <tcp_input+0x4bc>)
 8013d2c:	4848      	ldr	r0, [pc, #288]	@ (8013e50 <tcp_input+0x4ac>)
 8013d2e:	f007 fdd5 	bl	801b8dc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d32:	69fb      	ldr	r3, [r7, #28]
 8013d34:	7a1b      	ldrb	r3, [r3, #8]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d009      	beq.n	8013d4e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013d3a:	69fb      	ldr	r3, [r7, #28]
 8013d3c:	7a1a      	ldrb	r2, [r3, #8]
 8013d3e:	4b41      	ldr	r3, [pc, #260]	@ (8013e44 <tcp_input+0x4a0>)
 8013d40:	685b      	ldr	r3, [r3, #4]
 8013d42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013d46:	3301      	adds	r3, #1
 8013d48:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d4a:	429a      	cmp	r2, r3
 8013d4c:	d122      	bne.n	8013d94 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013d4e:	69fb      	ldr	r3, [r7, #28]
 8013d50:	8b1a      	ldrh	r2, [r3, #24]
 8013d52:	4b3b      	ldr	r3, [pc, #236]	@ (8013e40 <tcp_input+0x49c>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	881b      	ldrh	r3, [r3, #0]
 8013d58:	b29b      	uxth	r3, r3
 8013d5a:	429a      	cmp	r2, r3
 8013d5c:	d11b      	bne.n	8013d96 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013d5e:	69fb      	ldr	r3, [r7, #28]
 8013d60:	8ada      	ldrh	r2, [r3, #22]
 8013d62:	4b37      	ldr	r3, [pc, #220]	@ (8013e40 <tcp_input+0x49c>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	885b      	ldrh	r3, [r3, #2]
 8013d68:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013d6a:	429a      	cmp	r2, r3
 8013d6c:	d113      	bne.n	8013d96 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013d6e:	69fb      	ldr	r3, [r7, #28]
 8013d70:	685a      	ldr	r2, [r3, #4]
 8013d72:	4b34      	ldr	r3, [pc, #208]	@ (8013e44 <tcp_input+0x4a0>)
 8013d74:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013d76:	429a      	cmp	r2, r3
 8013d78:	d10d      	bne.n	8013d96 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013d7a:	69fb      	ldr	r3, [r7, #28]
 8013d7c:	681a      	ldr	r2, [r3, #0]
 8013d7e:	4b31      	ldr	r3, [pc, #196]	@ (8013e44 <tcp_input+0x4a0>)
 8013d80:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d107      	bne.n	8013d96 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013d86:	69f8      	ldr	r0, [r7, #28]
 8013d88:	f000 fb56 	bl	8014438 <tcp_timewait_input>
        }
        pbuf_free(p);
 8013d8c:	6878      	ldr	r0, [r7, #4]
 8013d8e:	f7fd fd75 	bl	801187c <pbuf_free>
        return;
 8013d92:	e1fd      	b.n	8014190 <tcp_input+0x7ec>
        continue;
 8013d94:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d96:	69fb      	ldr	r3, [r7, #28]
 8013d98:	68db      	ldr	r3, [r3, #12]
 8013d9a:	61fb      	str	r3, [r7, #28]
 8013d9c:	69fb      	ldr	r3, [r7, #28]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d1bc      	bne.n	8013d1c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013da2:	2300      	movs	r3, #0
 8013da4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013da6:	4b2f      	ldr	r3, [pc, #188]	@ (8013e64 <tcp_input+0x4c0>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	617b      	str	r3, [r7, #20]
 8013dac:	e02a      	b.n	8013e04 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013dae:	697b      	ldr	r3, [r7, #20]
 8013db0:	7a1b      	ldrb	r3, [r3, #8]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d00c      	beq.n	8013dd0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013db6:	697b      	ldr	r3, [r7, #20]
 8013db8:	7a1a      	ldrb	r2, [r3, #8]
 8013dba:	4b22      	ldr	r3, [pc, #136]	@ (8013e44 <tcp_input+0x4a0>)
 8013dbc:	685b      	ldr	r3, [r3, #4]
 8013dbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013dc2:	3301      	adds	r3, #1
 8013dc4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013dc6:	429a      	cmp	r2, r3
 8013dc8:	d002      	beq.n	8013dd0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013dca:	697b      	ldr	r3, [r7, #20]
 8013dcc:	61bb      	str	r3, [r7, #24]
        continue;
 8013dce:	e016      	b.n	8013dfe <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013dd0:	697b      	ldr	r3, [r7, #20]
 8013dd2:	8ada      	ldrh	r2, [r3, #22]
 8013dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8013e40 <tcp_input+0x49c>)
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	885b      	ldrh	r3, [r3, #2]
 8013dda:	b29b      	uxth	r3, r3
 8013ddc:	429a      	cmp	r2, r3
 8013dde:	d10c      	bne.n	8013dfa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013de0:	697b      	ldr	r3, [r7, #20]
 8013de2:	681a      	ldr	r2, [r3, #0]
 8013de4:	4b17      	ldr	r3, [pc, #92]	@ (8013e44 <tcp_input+0x4a0>)
 8013de6:	695b      	ldr	r3, [r3, #20]
 8013de8:	429a      	cmp	r2, r3
 8013dea:	d00f      	beq.n	8013e0c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013dec:	697b      	ldr	r3, [r7, #20]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d00d      	beq.n	8013e0e <tcp_input+0x46a>
 8013df2:	697b      	ldr	r3, [r7, #20]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d009      	beq.n	8013e0e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013dfa:	697b      	ldr	r3, [r7, #20]
 8013dfc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013dfe:	697b      	ldr	r3, [r7, #20]
 8013e00:	68db      	ldr	r3, [r3, #12]
 8013e02:	617b      	str	r3, [r7, #20]
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d1d1      	bne.n	8013dae <tcp_input+0x40a>
 8013e0a:	e000      	b.n	8013e0e <tcp_input+0x46a>
            break;
 8013e0c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013e0e:	697b      	ldr	r3, [r7, #20]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d029      	beq.n	8013e68 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013e14:	69bb      	ldr	r3, [r7, #24]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d00a      	beq.n	8013e30 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013e1a:	697b      	ldr	r3, [r7, #20]
 8013e1c:	68da      	ldr	r2, [r3, #12]
 8013e1e:	69bb      	ldr	r3, [r7, #24]
 8013e20:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013e22:	4b10      	ldr	r3, [pc, #64]	@ (8013e64 <tcp_input+0x4c0>)
 8013e24:	681a      	ldr	r2, [r3, #0]
 8013e26:	697b      	ldr	r3, [r7, #20]
 8013e28:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013e2a:	4a0e      	ldr	r2, [pc, #56]	@ (8013e64 <tcp_input+0x4c0>)
 8013e2c:	697b      	ldr	r3, [r7, #20]
 8013e2e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013e30:	6978      	ldr	r0, [r7, #20]
 8013e32:	f000 fa03 	bl	801423c <tcp_listen_input>
      }
      pbuf_free(p);
 8013e36:	6878      	ldr	r0, [r7, #4]
 8013e38:	f7fd fd20 	bl	801187c <pbuf_free>
      return;
 8013e3c:	e1a8      	b.n	8014190 <tcp_input+0x7ec>
 8013e3e:	bf00      	nop
 8013e40:	2000c8d8 	.word	0x2000c8d8
 8013e44:	2000915c 	.word	0x2000915c
 8013e48:	0801f65c 	.word	0x0801f65c
 8013e4c:	0801f788 	.word	0x0801f788
 8013e50:	0801f6a8 	.word	0x0801f6a8
 8013e54:	2000c8bc 	.word	0x2000c8bc
 8013e58:	0801f7b4 	.word	0x0801f7b4
 8013e5c:	2000c8c0 	.word	0x2000c8c0
 8013e60:	0801f7e0 	.word	0x0801f7e0
 8013e64:	2000c8b8 	.word	0x2000c8b8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013e68:	69fb      	ldr	r3, [r7, #28]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	f000 8158 	beq.w	8014120 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013e70:	4b95      	ldr	r3, [pc, #596]	@ (80140c8 <tcp_input+0x724>)
 8013e72:	2200      	movs	r2, #0
 8013e74:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	891a      	ldrh	r2, [r3, #8]
 8013e7a:	4b93      	ldr	r3, [pc, #588]	@ (80140c8 <tcp_input+0x724>)
 8013e7c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013e7e:	4a92      	ldr	r2, [pc, #584]	@ (80140c8 <tcp_input+0x724>)
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013e84:	4b91      	ldr	r3, [pc, #580]	@ (80140cc <tcp_input+0x728>)
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	4a8f      	ldr	r2, [pc, #572]	@ (80140c8 <tcp_input+0x724>)
 8013e8a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013e8c:	4b90      	ldr	r3, [pc, #576]	@ (80140d0 <tcp_input+0x72c>)
 8013e8e:	2200      	movs	r2, #0
 8013e90:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013e92:	4b90      	ldr	r3, [pc, #576]	@ (80140d4 <tcp_input+0x730>)
 8013e94:	2200      	movs	r2, #0
 8013e96:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013e98:	4b8f      	ldr	r3, [pc, #572]	@ (80140d8 <tcp_input+0x734>)
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013e9e:	4b8f      	ldr	r3, [pc, #572]	@ (80140dc <tcp_input+0x738>)
 8013ea0:	781b      	ldrb	r3, [r3, #0]
 8013ea2:	f003 0308 	and.w	r3, r3, #8
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d006      	beq.n	8013eb8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	7b5b      	ldrb	r3, [r3, #13]
 8013eae:	f043 0301 	orr.w	r3, r3, #1
 8013eb2:	b2da      	uxtb	r2, r3
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013eb8:	69fb      	ldr	r3, [r7, #28]
 8013eba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d017      	beq.n	8013ef0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013ec0:	69f8      	ldr	r0, [r7, #28]
 8013ec2:	f7ff f885 	bl	8012fd0 <tcp_process_refused_data>
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	f113 0f0d 	cmn.w	r3, #13
 8013ecc:	d007      	beq.n	8013ede <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013ece:	69fb      	ldr	r3, [r7, #28]
 8013ed0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d00c      	beq.n	8013ef0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013ed6:	4b82      	ldr	r3, [pc, #520]	@ (80140e0 <tcp_input+0x73c>)
 8013ed8:	881b      	ldrh	r3, [r3, #0]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d008      	beq.n	8013ef0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013ede:	69fb      	ldr	r3, [r7, #28]
 8013ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	f040 80e3 	bne.w	80140ae <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013ee8:	69f8      	ldr	r0, [r7, #28]
 8013eea:	f003 fdff 	bl	8017aec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013eee:	e0de      	b.n	80140ae <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8013ef0:	4a7c      	ldr	r2, [pc, #496]	@ (80140e4 <tcp_input+0x740>)
 8013ef2:	69fb      	ldr	r3, [r7, #28]
 8013ef4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013ef6:	69f8      	ldr	r0, [r7, #28]
 8013ef8:	f000 fb18 	bl	801452c <tcp_process>
 8013efc:	4603      	mov	r3, r0
 8013efe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013f00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013f04:	f113 0f0d 	cmn.w	r3, #13
 8013f08:	f000 80d3 	beq.w	80140b2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8013f0c:	4b71      	ldr	r3, [pc, #452]	@ (80140d4 <tcp_input+0x730>)
 8013f0e:	781b      	ldrb	r3, [r3, #0]
 8013f10:	f003 0308 	and.w	r3, r3, #8
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d015      	beq.n	8013f44 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013f18:	69fb      	ldr	r3, [r7, #28]
 8013f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d008      	beq.n	8013f34 <tcp_input+0x590>
 8013f22:	69fb      	ldr	r3, [r7, #28]
 8013f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013f28:	69fa      	ldr	r2, [r7, #28]
 8013f2a:	6912      	ldr	r2, [r2, #16]
 8013f2c:	f06f 010d 	mvn.w	r1, #13
 8013f30:	4610      	mov	r0, r2
 8013f32:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013f34:	69f9      	ldr	r1, [r7, #28]
 8013f36:	486c      	ldr	r0, [pc, #432]	@ (80140e8 <tcp_input+0x744>)
 8013f38:	f7ff fbbc 	bl	80136b4 <tcp_pcb_remove>
        tcp_free(pcb);
 8013f3c:	69f8      	ldr	r0, [r7, #28]
 8013f3e:	f7fd ff49 	bl	8011dd4 <tcp_free>
 8013f42:	e0da      	b.n	80140fa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8013f44:	2300      	movs	r3, #0
 8013f46:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013f48:	4b63      	ldr	r3, [pc, #396]	@ (80140d8 <tcp_input+0x734>)
 8013f4a:	881b      	ldrh	r3, [r3, #0]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d01d      	beq.n	8013f8c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013f50:	4b61      	ldr	r3, [pc, #388]	@ (80140d8 <tcp_input+0x734>)
 8013f52:	881b      	ldrh	r3, [r3, #0]
 8013f54:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013f56:	69fb      	ldr	r3, [r7, #28]
 8013f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d00a      	beq.n	8013f76 <tcp_input+0x5d2>
 8013f60:	69fb      	ldr	r3, [r7, #28]
 8013f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f66:	69fa      	ldr	r2, [r7, #28]
 8013f68:	6910      	ldr	r0, [r2, #16]
 8013f6a:	89fa      	ldrh	r2, [r7, #14]
 8013f6c:	69f9      	ldr	r1, [r7, #28]
 8013f6e:	4798      	blx	r3
 8013f70:	4603      	mov	r3, r0
 8013f72:	74fb      	strb	r3, [r7, #19]
 8013f74:	e001      	b.n	8013f7a <tcp_input+0x5d6>
 8013f76:	2300      	movs	r3, #0
 8013f78:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013f7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013f7e:	f113 0f0d 	cmn.w	r3, #13
 8013f82:	f000 8098 	beq.w	80140b6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013f86:	4b54      	ldr	r3, [pc, #336]	@ (80140d8 <tcp_input+0x734>)
 8013f88:	2200      	movs	r2, #0
 8013f8a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013f8c:	69f8      	ldr	r0, [r7, #28]
 8013f8e:	f000 f915 	bl	80141bc <tcp_input_delayed_close>
 8013f92:	4603      	mov	r3, r0
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	f040 8090 	bne.w	80140ba <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013f9a:	4b4d      	ldr	r3, [pc, #308]	@ (80140d0 <tcp_input+0x72c>)
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d041      	beq.n	8014026 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013fa2:	69fb      	ldr	r3, [r7, #28]
 8013fa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d006      	beq.n	8013fb8 <tcp_input+0x614>
 8013faa:	4b50      	ldr	r3, [pc, #320]	@ (80140ec <tcp_input+0x748>)
 8013fac:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8013fb0:	494f      	ldr	r1, [pc, #316]	@ (80140f0 <tcp_input+0x74c>)
 8013fb2:	4850      	ldr	r0, [pc, #320]	@ (80140f4 <tcp_input+0x750>)
 8013fb4:	f007 fc92 	bl	801b8dc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013fb8:	69fb      	ldr	r3, [r7, #28]
 8013fba:	8b5b      	ldrh	r3, [r3, #26]
 8013fbc:	f003 0310 	and.w	r3, r3, #16
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d008      	beq.n	8013fd6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013fc4:	4b42      	ldr	r3, [pc, #264]	@ (80140d0 <tcp_input+0x72c>)
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f7fd fc57 	bl	801187c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013fce:	69f8      	ldr	r0, [r7, #28]
 8013fd0:	f7fe f9e8 	bl	80123a4 <tcp_abort>
            goto aborted;
 8013fd4:	e091      	b.n	80140fa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013fd6:	69fb      	ldr	r3, [r7, #28]
 8013fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d00c      	beq.n	8013ffa <tcp_input+0x656>
 8013fe0:	69fb      	ldr	r3, [r7, #28]
 8013fe2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013fe6:	69fb      	ldr	r3, [r7, #28]
 8013fe8:	6918      	ldr	r0, [r3, #16]
 8013fea:	4b39      	ldr	r3, [pc, #228]	@ (80140d0 <tcp_input+0x72c>)
 8013fec:	681a      	ldr	r2, [r3, #0]
 8013fee:	2300      	movs	r3, #0
 8013ff0:	69f9      	ldr	r1, [r7, #28]
 8013ff2:	47a0      	blx	r4
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	74fb      	strb	r3, [r7, #19]
 8013ff8:	e008      	b.n	801400c <tcp_input+0x668>
 8013ffa:	4b35      	ldr	r3, [pc, #212]	@ (80140d0 <tcp_input+0x72c>)
 8013ffc:	681a      	ldr	r2, [r3, #0]
 8013ffe:	2300      	movs	r3, #0
 8014000:	69f9      	ldr	r1, [r7, #28]
 8014002:	2000      	movs	r0, #0
 8014004:	f7ff f8d8 	bl	80131b8 <tcp_recv_null>
 8014008:	4603      	mov	r3, r0
 801400a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801400c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014010:	f113 0f0d 	cmn.w	r3, #13
 8014014:	d053      	beq.n	80140be <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8014016:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d003      	beq.n	8014026 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801401e:	4b2c      	ldr	r3, [pc, #176]	@ (80140d0 <tcp_input+0x72c>)
 8014020:	681a      	ldr	r2, [r3, #0]
 8014022:	69fb      	ldr	r3, [r7, #28]
 8014024:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8014026:	4b2b      	ldr	r3, [pc, #172]	@ (80140d4 <tcp_input+0x730>)
 8014028:	781b      	ldrb	r3, [r3, #0]
 801402a:	f003 0320 	and.w	r3, r3, #32
 801402e:	2b00      	cmp	r3, #0
 8014030:	d030      	beq.n	8014094 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8014032:	69fb      	ldr	r3, [r7, #28]
 8014034:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014036:	2b00      	cmp	r3, #0
 8014038:	d009      	beq.n	801404e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801403a:	69fb      	ldr	r3, [r7, #28]
 801403c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801403e:	7b5a      	ldrb	r2, [r3, #13]
 8014040:	69fb      	ldr	r3, [r7, #28]
 8014042:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014044:	f042 0220 	orr.w	r2, r2, #32
 8014048:	b2d2      	uxtb	r2, r2
 801404a:	735a      	strb	r2, [r3, #13]
 801404c:	e022      	b.n	8014094 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801404e:	69fb      	ldr	r3, [r7, #28]
 8014050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014052:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014056:	d005      	beq.n	8014064 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8014058:	69fb      	ldr	r3, [r7, #28]
 801405a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801405c:	3301      	adds	r3, #1
 801405e:	b29a      	uxth	r2, r3
 8014060:	69fb      	ldr	r3, [r7, #28]
 8014062:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014064:	69fb      	ldr	r3, [r7, #28]
 8014066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801406a:	2b00      	cmp	r3, #0
 801406c:	d00b      	beq.n	8014086 <tcp_input+0x6e2>
 801406e:	69fb      	ldr	r3, [r7, #28]
 8014070:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014074:	69fb      	ldr	r3, [r7, #28]
 8014076:	6918      	ldr	r0, [r3, #16]
 8014078:	2300      	movs	r3, #0
 801407a:	2200      	movs	r2, #0
 801407c:	69f9      	ldr	r1, [r7, #28]
 801407e:	47a0      	blx	r4
 8014080:	4603      	mov	r3, r0
 8014082:	74fb      	strb	r3, [r7, #19]
 8014084:	e001      	b.n	801408a <tcp_input+0x6e6>
 8014086:	2300      	movs	r3, #0
 8014088:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801408a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801408e:	f113 0f0d 	cmn.w	r3, #13
 8014092:	d016      	beq.n	80140c2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014094:	4b13      	ldr	r3, [pc, #76]	@ (80140e4 <tcp_input+0x740>)
 8014096:	2200      	movs	r2, #0
 8014098:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801409a:	69f8      	ldr	r0, [r7, #28]
 801409c:	f000 f88e 	bl	80141bc <tcp_input_delayed_close>
 80140a0:	4603      	mov	r3, r0
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d128      	bne.n	80140f8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80140a6:	69f8      	ldr	r0, [r7, #28]
 80140a8:	f002 ff1a 	bl	8016ee0 <tcp_output>
 80140ac:	e025      	b.n	80140fa <tcp_input+0x756>
        goto aborted;
 80140ae:	bf00      	nop
 80140b0:	e023      	b.n	80140fa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80140b2:	bf00      	nop
 80140b4:	e021      	b.n	80140fa <tcp_input+0x756>
              goto aborted;
 80140b6:	bf00      	nop
 80140b8:	e01f      	b.n	80140fa <tcp_input+0x756>
          goto aborted;
 80140ba:	bf00      	nop
 80140bc:	e01d      	b.n	80140fa <tcp_input+0x756>
            goto aborted;
 80140be:	bf00      	nop
 80140c0:	e01b      	b.n	80140fa <tcp_input+0x756>
              goto aborted;
 80140c2:	bf00      	nop
 80140c4:	e019      	b.n	80140fa <tcp_input+0x756>
 80140c6:	bf00      	nop
 80140c8:	2000c8c8 	.word	0x2000c8c8
 80140cc:	2000c8d8 	.word	0x2000c8d8
 80140d0:	2000c8f8 	.word	0x2000c8f8
 80140d4:	2000c8f5 	.word	0x2000c8f5
 80140d8:	2000c8f0 	.word	0x2000c8f0
 80140dc:	2000c8f4 	.word	0x2000c8f4
 80140e0:	2000c8f2 	.word	0x2000c8f2
 80140e4:	2000c8fc 	.word	0x2000c8fc
 80140e8:	2000c8bc 	.word	0x2000c8bc
 80140ec:	0801f65c 	.word	0x0801f65c
 80140f0:	0801f810 	.word	0x0801f810
 80140f4:	0801f6a8 	.word	0x0801f6a8
          goto aborted;
 80140f8:	bf00      	nop
    tcp_input_pcb = NULL;
 80140fa:	4b27      	ldr	r3, [pc, #156]	@ (8014198 <tcp_input+0x7f4>)
 80140fc:	2200      	movs	r2, #0
 80140fe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014100:	4b26      	ldr	r3, [pc, #152]	@ (801419c <tcp_input+0x7f8>)
 8014102:	2200      	movs	r2, #0
 8014104:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8014106:	4b26      	ldr	r3, [pc, #152]	@ (80141a0 <tcp_input+0x7fc>)
 8014108:	685b      	ldr	r3, [r3, #4]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d03f      	beq.n	801418e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801410e:	4b24      	ldr	r3, [pc, #144]	@ (80141a0 <tcp_input+0x7fc>)
 8014110:	685b      	ldr	r3, [r3, #4]
 8014112:	4618      	mov	r0, r3
 8014114:	f7fd fbb2 	bl	801187c <pbuf_free>
      inseg.p = NULL;
 8014118:	4b21      	ldr	r3, [pc, #132]	@ (80141a0 <tcp_input+0x7fc>)
 801411a:	2200      	movs	r2, #0
 801411c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801411e:	e036      	b.n	801418e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014120:	4b20      	ldr	r3, [pc, #128]	@ (80141a4 <tcp_input+0x800>)
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	899b      	ldrh	r3, [r3, #12]
 8014126:	b29b      	uxth	r3, r3
 8014128:	4618      	mov	r0, r3
 801412a:	f7fb ffe7 	bl	80100fc <lwip_htons>
 801412e:	4603      	mov	r3, r0
 8014130:	b2db      	uxtb	r3, r3
 8014132:	f003 0304 	and.w	r3, r3, #4
 8014136:	2b00      	cmp	r3, #0
 8014138:	d118      	bne.n	801416c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801413a:	4b1b      	ldr	r3, [pc, #108]	@ (80141a8 <tcp_input+0x804>)
 801413c:	6819      	ldr	r1, [r3, #0]
 801413e:	4b1b      	ldr	r3, [pc, #108]	@ (80141ac <tcp_input+0x808>)
 8014140:	881b      	ldrh	r3, [r3, #0]
 8014142:	461a      	mov	r2, r3
 8014144:	4b1a      	ldr	r3, [pc, #104]	@ (80141b0 <tcp_input+0x80c>)
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801414a:	4b16      	ldr	r3, [pc, #88]	@ (80141a4 <tcp_input+0x800>)
 801414c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801414e:	885b      	ldrh	r3, [r3, #2]
 8014150:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014152:	4a14      	ldr	r2, [pc, #80]	@ (80141a4 <tcp_input+0x800>)
 8014154:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014156:	8812      	ldrh	r2, [r2, #0]
 8014158:	b292      	uxth	r2, r2
 801415a:	9202      	str	r2, [sp, #8]
 801415c:	9301      	str	r3, [sp, #4]
 801415e:	4b15      	ldr	r3, [pc, #84]	@ (80141b4 <tcp_input+0x810>)
 8014160:	9300      	str	r3, [sp, #0]
 8014162:	4b15      	ldr	r3, [pc, #84]	@ (80141b8 <tcp_input+0x814>)
 8014164:	4602      	mov	r2, r0
 8014166:	2000      	movs	r0, #0
 8014168:	f003 fc6e 	bl	8017a48 <tcp_rst>
    pbuf_free(p);
 801416c:	6878      	ldr	r0, [r7, #4]
 801416e:	f7fd fb85 	bl	801187c <pbuf_free>
  return;
 8014172:	e00c      	b.n	801418e <tcp_input+0x7ea>
    goto dropped;
 8014174:	bf00      	nop
 8014176:	e006      	b.n	8014186 <tcp_input+0x7e2>
    goto dropped;
 8014178:	bf00      	nop
 801417a:	e004      	b.n	8014186 <tcp_input+0x7e2>
    goto dropped;
 801417c:	bf00      	nop
 801417e:	e002      	b.n	8014186 <tcp_input+0x7e2>
      goto dropped;
 8014180:	bf00      	nop
 8014182:	e000      	b.n	8014186 <tcp_input+0x7e2>
      goto dropped;
 8014184:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014186:	6878      	ldr	r0, [r7, #4]
 8014188:	f7fd fb78 	bl	801187c <pbuf_free>
 801418c:	e000      	b.n	8014190 <tcp_input+0x7ec>
  return;
 801418e:	bf00      	nop
}
 8014190:	3724      	adds	r7, #36	@ 0x24
 8014192:	46bd      	mov	sp, r7
 8014194:	bd90      	pop	{r4, r7, pc}
 8014196:	bf00      	nop
 8014198:	2000c8fc 	.word	0x2000c8fc
 801419c:	2000c8f8 	.word	0x2000c8f8
 80141a0:	2000c8c8 	.word	0x2000c8c8
 80141a4:	2000c8d8 	.word	0x2000c8d8
 80141a8:	2000c8ec 	.word	0x2000c8ec
 80141ac:	2000c8f2 	.word	0x2000c8f2
 80141b0:	2000c8e8 	.word	0x2000c8e8
 80141b4:	2000916c 	.word	0x2000916c
 80141b8:	20009170 	.word	0x20009170

080141bc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b082      	sub	sp, #8
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d106      	bne.n	80141d8 <tcp_input_delayed_close+0x1c>
 80141ca:	4b17      	ldr	r3, [pc, #92]	@ (8014228 <tcp_input_delayed_close+0x6c>)
 80141cc:	f240 225a 	movw	r2, #602	@ 0x25a
 80141d0:	4916      	ldr	r1, [pc, #88]	@ (801422c <tcp_input_delayed_close+0x70>)
 80141d2:	4817      	ldr	r0, [pc, #92]	@ (8014230 <tcp_input_delayed_close+0x74>)
 80141d4:	f007 fb82 	bl	801b8dc <iprintf>

  if (recv_flags & TF_CLOSED) {
 80141d8:	4b16      	ldr	r3, [pc, #88]	@ (8014234 <tcp_input_delayed_close+0x78>)
 80141da:	781b      	ldrb	r3, [r3, #0]
 80141dc:	f003 0310 	and.w	r3, r3, #16
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d01c      	beq.n	801421e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	8b5b      	ldrh	r3, [r3, #26]
 80141e8:	f003 0310 	and.w	r3, r3, #16
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d10d      	bne.n	801420c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d008      	beq.n	801420c <tcp_input_delayed_close+0x50>
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014200:	687a      	ldr	r2, [r7, #4]
 8014202:	6912      	ldr	r2, [r2, #16]
 8014204:	f06f 010e 	mvn.w	r1, #14
 8014208:	4610      	mov	r0, r2
 801420a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801420c:	6879      	ldr	r1, [r7, #4]
 801420e:	480a      	ldr	r0, [pc, #40]	@ (8014238 <tcp_input_delayed_close+0x7c>)
 8014210:	f7ff fa50 	bl	80136b4 <tcp_pcb_remove>
    tcp_free(pcb);
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f7fd fddd 	bl	8011dd4 <tcp_free>
    return 1;
 801421a:	2301      	movs	r3, #1
 801421c:	e000      	b.n	8014220 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801421e:	2300      	movs	r3, #0
}
 8014220:	4618      	mov	r0, r3
 8014222:	3708      	adds	r7, #8
 8014224:	46bd      	mov	sp, r7
 8014226:	bd80      	pop	{r7, pc}
 8014228:	0801f65c 	.word	0x0801f65c
 801422c:	0801f82c 	.word	0x0801f82c
 8014230:	0801f6a8 	.word	0x0801f6a8
 8014234:	2000c8f5 	.word	0x2000c8f5
 8014238:	2000c8bc 	.word	0x2000c8bc

0801423c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801423c:	b590      	push	{r4, r7, lr}
 801423e:	b08b      	sub	sp, #44	@ 0x2c
 8014240:	af04      	add	r7, sp, #16
 8014242:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014244:	4b6f      	ldr	r3, [pc, #444]	@ (8014404 <tcp_listen_input+0x1c8>)
 8014246:	781b      	ldrb	r3, [r3, #0]
 8014248:	f003 0304 	and.w	r3, r3, #4
 801424c:	2b00      	cmp	r3, #0
 801424e:	f040 80d2 	bne.w	80143f6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d106      	bne.n	8014266 <tcp_listen_input+0x2a>
 8014258:	4b6b      	ldr	r3, [pc, #428]	@ (8014408 <tcp_listen_input+0x1cc>)
 801425a:	f240 2281 	movw	r2, #641	@ 0x281
 801425e:	496b      	ldr	r1, [pc, #428]	@ (801440c <tcp_listen_input+0x1d0>)
 8014260:	486b      	ldr	r0, [pc, #428]	@ (8014410 <tcp_listen_input+0x1d4>)
 8014262:	f007 fb3b 	bl	801b8dc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8014266:	4b67      	ldr	r3, [pc, #412]	@ (8014404 <tcp_listen_input+0x1c8>)
 8014268:	781b      	ldrb	r3, [r3, #0]
 801426a:	f003 0310 	and.w	r3, r3, #16
 801426e:	2b00      	cmp	r3, #0
 8014270:	d019      	beq.n	80142a6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014272:	4b68      	ldr	r3, [pc, #416]	@ (8014414 <tcp_listen_input+0x1d8>)
 8014274:	6819      	ldr	r1, [r3, #0]
 8014276:	4b68      	ldr	r3, [pc, #416]	@ (8014418 <tcp_listen_input+0x1dc>)
 8014278:	881b      	ldrh	r3, [r3, #0]
 801427a:	461a      	mov	r2, r3
 801427c:	4b67      	ldr	r3, [pc, #412]	@ (801441c <tcp_listen_input+0x1e0>)
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014282:	4b67      	ldr	r3, [pc, #412]	@ (8014420 <tcp_listen_input+0x1e4>)
 8014284:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014286:	885b      	ldrh	r3, [r3, #2]
 8014288:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801428a:	4a65      	ldr	r2, [pc, #404]	@ (8014420 <tcp_listen_input+0x1e4>)
 801428c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801428e:	8812      	ldrh	r2, [r2, #0]
 8014290:	b292      	uxth	r2, r2
 8014292:	9202      	str	r2, [sp, #8]
 8014294:	9301      	str	r3, [sp, #4]
 8014296:	4b63      	ldr	r3, [pc, #396]	@ (8014424 <tcp_listen_input+0x1e8>)
 8014298:	9300      	str	r3, [sp, #0]
 801429a:	4b63      	ldr	r3, [pc, #396]	@ (8014428 <tcp_listen_input+0x1ec>)
 801429c:	4602      	mov	r2, r0
 801429e:	6878      	ldr	r0, [r7, #4]
 80142a0:	f003 fbd2 	bl	8017a48 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80142a4:	e0a9      	b.n	80143fa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80142a6:	4b57      	ldr	r3, [pc, #348]	@ (8014404 <tcp_listen_input+0x1c8>)
 80142a8:	781b      	ldrb	r3, [r3, #0]
 80142aa:	f003 0302 	and.w	r3, r3, #2
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	f000 80a3 	beq.w	80143fa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	7d5b      	ldrb	r3, [r3, #21]
 80142b8:	4618      	mov	r0, r3
 80142ba:	f7ff f8a1 	bl	8013400 <tcp_alloc>
 80142be:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80142c0:	697b      	ldr	r3, [r7, #20]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d111      	bne.n	80142ea <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	699b      	ldr	r3, [r3, #24]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d00a      	beq.n	80142e4 <tcp_listen_input+0xa8>
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	699b      	ldr	r3, [r3, #24]
 80142d2:	687a      	ldr	r2, [r7, #4]
 80142d4:	6910      	ldr	r0, [r2, #16]
 80142d6:	f04f 32ff 	mov.w	r2, #4294967295
 80142da:	2100      	movs	r1, #0
 80142dc:	4798      	blx	r3
 80142de:	4603      	mov	r3, r0
 80142e0:	73bb      	strb	r3, [r7, #14]
      return;
 80142e2:	e08b      	b.n	80143fc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80142e4:	23f0      	movs	r3, #240	@ 0xf0
 80142e6:	73bb      	strb	r3, [r7, #14]
      return;
 80142e8:	e088      	b.n	80143fc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80142ea:	4b50      	ldr	r3, [pc, #320]	@ (801442c <tcp_listen_input+0x1f0>)
 80142ec:	695a      	ldr	r2, [r3, #20]
 80142ee:	697b      	ldr	r3, [r7, #20]
 80142f0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80142f2:	4b4e      	ldr	r3, [pc, #312]	@ (801442c <tcp_listen_input+0x1f0>)
 80142f4:	691a      	ldr	r2, [r3, #16]
 80142f6:	697b      	ldr	r3, [r7, #20]
 80142f8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	8ada      	ldrh	r2, [r3, #22]
 80142fe:	697b      	ldr	r3, [r7, #20]
 8014300:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014302:	4b47      	ldr	r3, [pc, #284]	@ (8014420 <tcp_listen_input+0x1e4>)
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	881b      	ldrh	r3, [r3, #0]
 8014308:	b29a      	uxth	r2, r3
 801430a:	697b      	ldr	r3, [r7, #20]
 801430c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801430e:	697b      	ldr	r3, [r7, #20]
 8014310:	2203      	movs	r2, #3
 8014312:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014314:	4b41      	ldr	r3, [pc, #260]	@ (801441c <tcp_listen_input+0x1e0>)
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	1c5a      	adds	r2, r3, #1
 801431a:	697b      	ldr	r3, [r7, #20]
 801431c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014322:	697b      	ldr	r3, [r7, #20]
 8014324:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8014326:	6978      	ldr	r0, [r7, #20]
 8014328:	f7ff fa58 	bl	80137dc <tcp_next_iss>
 801432c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801432e:	697b      	ldr	r3, [r7, #20]
 8014330:	693a      	ldr	r2, [r7, #16]
 8014332:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8014334:	697b      	ldr	r3, [r7, #20]
 8014336:	693a      	ldr	r2, [r7, #16]
 8014338:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801433a:	697b      	ldr	r3, [r7, #20]
 801433c:	693a      	ldr	r2, [r7, #16]
 801433e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8014340:	697b      	ldr	r3, [r7, #20]
 8014342:	693a      	ldr	r2, [r7, #16]
 8014344:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014346:	4b35      	ldr	r3, [pc, #212]	@ (801441c <tcp_listen_input+0x1e0>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	1e5a      	subs	r2, r3, #1
 801434c:	697b      	ldr	r3, [r7, #20]
 801434e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	691a      	ldr	r2, [r3, #16]
 8014354:	697b      	ldr	r3, [r7, #20]
 8014356:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014358:	697b      	ldr	r3, [r7, #20]
 801435a:	687a      	ldr	r2, [r7, #4]
 801435c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	7a5b      	ldrb	r3, [r3, #9]
 8014362:	f003 030c 	and.w	r3, r3, #12
 8014366:	b2da      	uxtb	r2, r3
 8014368:	697b      	ldr	r3, [r7, #20]
 801436a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	7a1a      	ldrb	r2, [r3, #8]
 8014370:	697b      	ldr	r3, [r7, #20]
 8014372:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014374:	4b2e      	ldr	r3, [pc, #184]	@ (8014430 <tcp_listen_input+0x1f4>)
 8014376:	681a      	ldr	r2, [r3, #0]
 8014378:	697b      	ldr	r3, [r7, #20]
 801437a:	60da      	str	r2, [r3, #12]
 801437c:	4a2c      	ldr	r2, [pc, #176]	@ (8014430 <tcp_listen_input+0x1f4>)
 801437e:	697b      	ldr	r3, [r7, #20]
 8014380:	6013      	str	r3, [r2, #0]
 8014382:	f003 fd23 	bl	8017dcc <tcp_timer_needed>
 8014386:	4b2b      	ldr	r3, [pc, #172]	@ (8014434 <tcp_listen_input+0x1f8>)
 8014388:	2201      	movs	r2, #1
 801438a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801438c:	6978      	ldr	r0, [r7, #20]
 801438e:	f001 fd8b 	bl	8015ea8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014392:	4b23      	ldr	r3, [pc, #140]	@ (8014420 <tcp_listen_input+0x1e4>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	89db      	ldrh	r3, [r3, #14]
 8014398:	b29a      	uxth	r2, r3
 801439a:	697b      	ldr	r3, [r7, #20]
 801439c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80143a0:	697b      	ldr	r3, [r7, #20]
 80143a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80143a6:	697b      	ldr	r3, [r7, #20]
 80143a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80143ac:	697b      	ldr	r3, [r7, #20]
 80143ae:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80143b0:	697b      	ldr	r3, [r7, #20]
 80143b2:	3304      	adds	r3, #4
 80143b4:	4618      	mov	r0, r3
 80143b6:	f005 f8e5 	bl	8019584 <ip4_route>
 80143ba:	4601      	mov	r1, r0
 80143bc:	697b      	ldr	r3, [r7, #20]
 80143be:	3304      	adds	r3, #4
 80143c0:	461a      	mov	r2, r3
 80143c2:	4620      	mov	r0, r4
 80143c4:	f7ff fa30 	bl	8013828 <tcp_eff_send_mss_netif>
 80143c8:	4603      	mov	r3, r0
 80143ca:	461a      	mov	r2, r3
 80143cc:	697b      	ldr	r3, [r7, #20]
 80143ce:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80143d0:	2112      	movs	r1, #18
 80143d2:	6978      	ldr	r0, [r7, #20]
 80143d4:	f002 fc96 	bl	8016d04 <tcp_enqueue_flags>
 80143d8:	4603      	mov	r3, r0
 80143da:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80143dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d004      	beq.n	80143ee <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80143e4:	2100      	movs	r1, #0
 80143e6:	6978      	ldr	r0, [r7, #20]
 80143e8:	f7fd ff1e 	bl	8012228 <tcp_abandon>
      return;
 80143ec:	e006      	b.n	80143fc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80143ee:	6978      	ldr	r0, [r7, #20]
 80143f0:	f002 fd76 	bl	8016ee0 <tcp_output>
  return;
 80143f4:	e001      	b.n	80143fa <tcp_listen_input+0x1be>
    return;
 80143f6:	bf00      	nop
 80143f8:	e000      	b.n	80143fc <tcp_listen_input+0x1c0>
  return;
 80143fa:	bf00      	nop
}
 80143fc:	371c      	adds	r7, #28
 80143fe:	46bd      	mov	sp, r7
 8014400:	bd90      	pop	{r4, r7, pc}
 8014402:	bf00      	nop
 8014404:	2000c8f4 	.word	0x2000c8f4
 8014408:	0801f65c 	.word	0x0801f65c
 801440c:	0801f854 	.word	0x0801f854
 8014410:	0801f6a8 	.word	0x0801f6a8
 8014414:	2000c8ec 	.word	0x2000c8ec
 8014418:	2000c8f2 	.word	0x2000c8f2
 801441c:	2000c8e8 	.word	0x2000c8e8
 8014420:	2000c8d8 	.word	0x2000c8d8
 8014424:	2000916c 	.word	0x2000916c
 8014428:	20009170 	.word	0x20009170
 801442c:	2000915c 	.word	0x2000915c
 8014430:	2000c8bc 	.word	0x2000c8bc
 8014434:	2000c8c4 	.word	0x2000c8c4

08014438 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b086      	sub	sp, #24
 801443c:	af04      	add	r7, sp, #16
 801443e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014440:	4b2f      	ldr	r3, [pc, #188]	@ (8014500 <tcp_timewait_input+0xc8>)
 8014442:	781b      	ldrb	r3, [r3, #0]
 8014444:	f003 0304 	and.w	r3, r3, #4
 8014448:	2b00      	cmp	r3, #0
 801444a:	d153      	bne.n	80144f4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d106      	bne.n	8014460 <tcp_timewait_input+0x28>
 8014452:	4b2c      	ldr	r3, [pc, #176]	@ (8014504 <tcp_timewait_input+0xcc>)
 8014454:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014458:	492b      	ldr	r1, [pc, #172]	@ (8014508 <tcp_timewait_input+0xd0>)
 801445a:	482c      	ldr	r0, [pc, #176]	@ (801450c <tcp_timewait_input+0xd4>)
 801445c:	f007 fa3e 	bl	801b8dc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014460:	4b27      	ldr	r3, [pc, #156]	@ (8014500 <tcp_timewait_input+0xc8>)
 8014462:	781b      	ldrb	r3, [r3, #0]
 8014464:	f003 0302 	and.w	r3, r3, #2
 8014468:	2b00      	cmp	r3, #0
 801446a:	d02a      	beq.n	80144c2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801446c:	4b28      	ldr	r3, [pc, #160]	@ (8014510 <tcp_timewait_input+0xd8>)
 801446e:	681a      	ldr	r2, [r3, #0]
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014474:	1ad3      	subs	r3, r2, r3
 8014476:	2b00      	cmp	r3, #0
 8014478:	db2d      	blt.n	80144d6 <tcp_timewait_input+0x9e>
 801447a:	4b25      	ldr	r3, [pc, #148]	@ (8014510 <tcp_timewait_input+0xd8>)
 801447c:	681a      	ldr	r2, [r3, #0]
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014482:	6879      	ldr	r1, [r7, #4]
 8014484:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014486:	440b      	add	r3, r1
 8014488:	1ad3      	subs	r3, r2, r3
 801448a:	2b00      	cmp	r3, #0
 801448c:	dc23      	bgt.n	80144d6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801448e:	4b21      	ldr	r3, [pc, #132]	@ (8014514 <tcp_timewait_input+0xdc>)
 8014490:	6819      	ldr	r1, [r3, #0]
 8014492:	4b21      	ldr	r3, [pc, #132]	@ (8014518 <tcp_timewait_input+0xe0>)
 8014494:	881b      	ldrh	r3, [r3, #0]
 8014496:	461a      	mov	r2, r3
 8014498:	4b1d      	ldr	r3, [pc, #116]	@ (8014510 <tcp_timewait_input+0xd8>)
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801449e:	4b1f      	ldr	r3, [pc, #124]	@ (801451c <tcp_timewait_input+0xe4>)
 80144a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80144a2:	885b      	ldrh	r3, [r3, #2]
 80144a4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80144a6:	4a1d      	ldr	r2, [pc, #116]	@ (801451c <tcp_timewait_input+0xe4>)
 80144a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80144aa:	8812      	ldrh	r2, [r2, #0]
 80144ac:	b292      	uxth	r2, r2
 80144ae:	9202      	str	r2, [sp, #8]
 80144b0:	9301      	str	r3, [sp, #4]
 80144b2:	4b1b      	ldr	r3, [pc, #108]	@ (8014520 <tcp_timewait_input+0xe8>)
 80144b4:	9300      	str	r3, [sp, #0]
 80144b6:	4b1b      	ldr	r3, [pc, #108]	@ (8014524 <tcp_timewait_input+0xec>)
 80144b8:	4602      	mov	r2, r0
 80144ba:	6878      	ldr	r0, [r7, #4]
 80144bc:	f003 fac4 	bl	8017a48 <tcp_rst>
      return;
 80144c0:	e01b      	b.n	80144fa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80144c2:	4b0f      	ldr	r3, [pc, #60]	@ (8014500 <tcp_timewait_input+0xc8>)
 80144c4:	781b      	ldrb	r3, [r3, #0]
 80144c6:	f003 0301 	and.w	r3, r3, #1
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d003      	beq.n	80144d6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80144ce:	4b16      	ldr	r3, [pc, #88]	@ (8014528 <tcp_timewait_input+0xf0>)
 80144d0:	681a      	ldr	r2, [r3, #0]
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80144d6:	4b10      	ldr	r3, [pc, #64]	@ (8014518 <tcp_timewait_input+0xe0>)
 80144d8:	881b      	ldrh	r3, [r3, #0]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d00c      	beq.n	80144f8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	8b5b      	ldrh	r3, [r3, #26]
 80144e2:	f043 0302 	orr.w	r3, r3, #2
 80144e6:	b29a      	uxth	r2, r3
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80144ec:	6878      	ldr	r0, [r7, #4]
 80144ee:	f002 fcf7 	bl	8016ee0 <tcp_output>
  }
  return;
 80144f2:	e001      	b.n	80144f8 <tcp_timewait_input+0xc0>
    return;
 80144f4:	bf00      	nop
 80144f6:	e000      	b.n	80144fa <tcp_timewait_input+0xc2>
  return;
 80144f8:	bf00      	nop
}
 80144fa:	3708      	adds	r7, #8
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}
 8014500:	2000c8f4 	.word	0x2000c8f4
 8014504:	0801f65c 	.word	0x0801f65c
 8014508:	0801f874 	.word	0x0801f874
 801450c:	0801f6a8 	.word	0x0801f6a8
 8014510:	2000c8e8 	.word	0x2000c8e8
 8014514:	2000c8ec 	.word	0x2000c8ec
 8014518:	2000c8f2 	.word	0x2000c8f2
 801451c:	2000c8d8 	.word	0x2000c8d8
 8014520:	2000916c 	.word	0x2000916c
 8014524:	20009170 	.word	0x20009170
 8014528:	2000c8b0 	.word	0x2000c8b0

0801452c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801452c:	b590      	push	{r4, r7, lr}
 801452e:	b08d      	sub	sp, #52	@ 0x34
 8014530:	af04      	add	r7, sp, #16
 8014532:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014534:	2300      	movs	r3, #0
 8014536:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014538:	2300      	movs	r3, #0
 801453a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d106      	bne.n	8014550 <tcp_process+0x24>
 8014542:	4b9d      	ldr	r3, [pc, #628]	@ (80147b8 <tcp_process+0x28c>)
 8014544:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8014548:	499c      	ldr	r1, [pc, #624]	@ (80147bc <tcp_process+0x290>)
 801454a:	489d      	ldr	r0, [pc, #628]	@ (80147c0 <tcp_process+0x294>)
 801454c:	f007 f9c6 	bl	801b8dc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014550:	4b9c      	ldr	r3, [pc, #624]	@ (80147c4 <tcp_process+0x298>)
 8014552:	781b      	ldrb	r3, [r3, #0]
 8014554:	f003 0304 	and.w	r3, r3, #4
 8014558:	2b00      	cmp	r3, #0
 801455a:	d04e      	beq.n	80145fa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	7d1b      	ldrb	r3, [r3, #20]
 8014560:	2b02      	cmp	r3, #2
 8014562:	d108      	bne.n	8014576 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014568:	4b97      	ldr	r3, [pc, #604]	@ (80147c8 <tcp_process+0x29c>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	429a      	cmp	r2, r3
 801456e:	d123      	bne.n	80145b8 <tcp_process+0x8c>
        acceptable = 1;
 8014570:	2301      	movs	r3, #1
 8014572:	76fb      	strb	r3, [r7, #27]
 8014574:	e020      	b.n	80145b8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801457a:	4b94      	ldr	r3, [pc, #592]	@ (80147cc <tcp_process+0x2a0>)
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	429a      	cmp	r2, r3
 8014580:	d102      	bne.n	8014588 <tcp_process+0x5c>
        acceptable = 1;
 8014582:	2301      	movs	r3, #1
 8014584:	76fb      	strb	r3, [r7, #27]
 8014586:	e017      	b.n	80145b8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014588:	4b90      	ldr	r3, [pc, #576]	@ (80147cc <tcp_process+0x2a0>)
 801458a:	681a      	ldr	r2, [r3, #0]
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014590:	1ad3      	subs	r3, r2, r3
 8014592:	2b00      	cmp	r3, #0
 8014594:	db10      	blt.n	80145b8 <tcp_process+0x8c>
 8014596:	4b8d      	ldr	r3, [pc, #564]	@ (80147cc <tcp_process+0x2a0>)
 8014598:	681a      	ldr	r2, [r3, #0]
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801459e:	6879      	ldr	r1, [r7, #4]
 80145a0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80145a2:	440b      	add	r3, r1
 80145a4:	1ad3      	subs	r3, r2, r3
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	dc06      	bgt.n	80145b8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	8b5b      	ldrh	r3, [r3, #26]
 80145ae:	f043 0302 	orr.w	r3, r3, #2
 80145b2:	b29a      	uxth	r2, r3
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80145b8:	7efb      	ldrb	r3, [r7, #27]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d01b      	beq.n	80145f6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	7d1b      	ldrb	r3, [r3, #20]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d106      	bne.n	80145d4 <tcp_process+0xa8>
 80145c6:	4b7c      	ldr	r3, [pc, #496]	@ (80147b8 <tcp_process+0x28c>)
 80145c8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80145cc:	4980      	ldr	r1, [pc, #512]	@ (80147d0 <tcp_process+0x2a4>)
 80145ce:	487c      	ldr	r0, [pc, #496]	@ (80147c0 <tcp_process+0x294>)
 80145d0:	f007 f984 	bl	801b8dc <iprintf>
      recv_flags |= TF_RESET;
 80145d4:	4b7f      	ldr	r3, [pc, #508]	@ (80147d4 <tcp_process+0x2a8>)
 80145d6:	781b      	ldrb	r3, [r3, #0]
 80145d8:	f043 0308 	orr.w	r3, r3, #8
 80145dc:	b2da      	uxtb	r2, r3
 80145de:	4b7d      	ldr	r3, [pc, #500]	@ (80147d4 <tcp_process+0x2a8>)
 80145e0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	8b5b      	ldrh	r3, [r3, #26]
 80145e6:	f023 0301 	bic.w	r3, r3, #1
 80145ea:	b29a      	uxth	r2, r3
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80145f0:	f06f 030d 	mvn.w	r3, #13
 80145f4:	e37a      	b.n	8014cec <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80145f6:	2300      	movs	r3, #0
 80145f8:	e378      	b.n	8014cec <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80145fa:	4b72      	ldr	r3, [pc, #456]	@ (80147c4 <tcp_process+0x298>)
 80145fc:	781b      	ldrb	r3, [r3, #0]
 80145fe:	f003 0302 	and.w	r3, r3, #2
 8014602:	2b00      	cmp	r3, #0
 8014604:	d010      	beq.n	8014628 <tcp_process+0xfc>
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	7d1b      	ldrb	r3, [r3, #20]
 801460a:	2b02      	cmp	r3, #2
 801460c:	d00c      	beq.n	8014628 <tcp_process+0xfc>
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	7d1b      	ldrb	r3, [r3, #20]
 8014612:	2b03      	cmp	r3, #3
 8014614:	d008      	beq.n	8014628 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	8b5b      	ldrh	r3, [r3, #26]
 801461a:	f043 0302 	orr.w	r3, r3, #2
 801461e:	b29a      	uxth	r2, r3
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014624:	2300      	movs	r3, #0
 8014626:	e361      	b.n	8014cec <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	8b5b      	ldrh	r3, [r3, #26]
 801462c:	f003 0310 	and.w	r3, r3, #16
 8014630:	2b00      	cmp	r3, #0
 8014632:	d103      	bne.n	801463c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014634:	4b68      	ldr	r3, [pc, #416]	@ (80147d8 <tcp_process+0x2ac>)
 8014636:	681a      	ldr	r2, [r3, #0]
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	2200      	movs	r2, #0
 8014640:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2200      	movs	r2, #0
 8014648:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f001 fc2b 	bl	8015ea8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	7d1b      	ldrb	r3, [r3, #20]
 8014656:	3b02      	subs	r3, #2
 8014658:	2b07      	cmp	r3, #7
 801465a:	f200 8337 	bhi.w	8014ccc <tcp_process+0x7a0>
 801465e:	a201      	add	r2, pc, #4	@ (adr r2, 8014664 <tcp_process+0x138>)
 8014660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014664:	08014685 	.word	0x08014685
 8014668:	080148b5 	.word	0x080148b5
 801466c:	08014a2d 	.word	0x08014a2d
 8014670:	08014a57 	.word	0x08014a57
 8014674:	08014b7b 	.word	0x08014b7b
 8014678:	08014a2d 	.word	0x08014a2d
 801467c:	08014c07 	.word	0x08014c07
 8014680:	08014c97 	.word	0x08014c97
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014684:	4b4f      	ldr	r3, [pc, #316]	@ (80147c4 <tcp_process+0x298>)
 8014686:	781b      	ldrb	r3, [r3, #0]
 8014688:	f003 0310 	and.w	r3, r3, #16
 801468c:	2b00      	cmp	r3, #0
 801468e:	f000 80e4 	beq.w	801485a <tcp_process+0x32e>
 8014692:	4b4c      	ldr	r3, [pc, #304]	@ (80147c4 <tcp_process+0x298>)
 8014694:	781b      	ldrb	r3, [r3, #0]
 8014696:	f003 0302 	and.w	r3, r3, #2
 801469a:	2b00      	cmp	r3, #0
 801469c:	f000 80dd 	beq.w	801485a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80146a4:	1c5a      	adds	r2, r3, #1
 80146a6:	4b48      	ldr	r3, [pc, #288]	@ (80147c8 <tcp_process+0x29c>)
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	429a      	cmp	r2, r3
 80146ac:	f040 80d5 	bne.w	801485a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80146b0:	4b46      	ldr	r3, [pc, #280]	@ (80147cc <tcp_process+0x2a0>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	1c5a      	adds	r2, r3, #1
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80146c2:	4b41      	ldr	r3, [pc, #260]	@ (80147c8 <tcp_process+0x29c>)
 80146c4:	681a      	ldr	r2, [r3, #0]
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80146ca:	4b44      	ldr	r3, [pc, #272]	@ (80147dc <tcp_process+0x2b0>)
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	89db      	ldrh	r3, [r3, #14]
 80146d0:	b29a      	uxth	r2, r3
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80146e4:	4b39      	ldr	r3, [pc, #228]	@ (80147cc <tcp_process+0x2a0>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	1e5a      	subs	r2, r3, #1
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	2204      	movs	r2, #4
 80146f2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	3304      	adds	r3, #4
 80146fc:	4618      	mov	r0, r3
 80146fe:	f004 ff41 	bl	8019584 <ip4_route>
 8014702:	4601      	mov	r1, r0
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	3304      	adds	r3, #4
 8014708:	461a      	mov	r2, r3
 801470a:	4620      	mov	r0, r4
 801470c:	f7ff f88c 	bl	8013828 <tcp_eff_send_mss_netif>
 8014710:	4603      	mov	r3, r0
 8014712:	461a      	mov	r2, r3
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801471c:	009a      	lsls	r2, r3, #2
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014722:	005b      	lsls	r3, r3, #1
 8014724:	f241 111c 	movw	r1, #4380	@ 0x111c
 8014728:	428b      	cmp	r3, r1
 801472a:	bf38      	it	cc
 801472c:	460b      	movcc	r3, r1
 801472e:	429a      	cmp	r2, r3
 8014730:	d204      	bcs.n	801473c <tcp_process+0x210>
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014736:	009b      	lsls	r3, r3, #2
 8014738:	b29b      	uxth	r3, r3
 801473a:	e00d      	b.n	8014758 <tcp_process+0x22c>
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014740:	005b      	lsls	r3, r3, #1
 8014742:	f241 121c 	movw	r2, #4380	@ 0x111c
 8014746:	4293      	cmp	r3, r2
 8014748:	d904      	bls.n	8014754 <tcp_process+0x228>
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801474e:	005b      	lsls	r3, r3, #1
 8014750:	b29b      	uxth	r3, r3
 8014752:	e001      	b.n	8014758 <tcp_process+0x22c>
 8014754:	f241 131c 	movw	r3, #4380	@ 0x111c
 8014758:	687a      	ldr	r2, [r7, #4]
 801475a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014764:	2b00      	cmp	r3, #0
 8014766:	d106      	bne.n	8014776 <tcp_process+0x24a>
 8014768:	4b13      	ldr	r3, [pc, #76]	@ (80147b8 <tcp_process+0x28c>)
 801476a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801476e:	491c      	ldr	r1, [pc, #112]	@ (80147e0 <tcp_process+0x2b4>)
 8014770:	4813      	ldr	r0, [pc, #76]	@ (80147c0 <tcp_process+0x294>)
 8014772:	f007 f8b3 	bl	801b8dc <iprintf>
        --pcb->snd_queuelen;
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801477c:	3b01      	subs	r3, #1
 801477e:	b29a      	uxth	r2, r3
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801478a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801478c:	69fb      	ldr	r3, [r7, #28]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d12a      	bne.n	80147e8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014796:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014798:	69fb      	ldr	r3, [r7, #28]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d106      	bne.n	80147ac <tcp_process+0x280>
 801479e:	4b06      	ldr	r3, [pc, #24]	@ (80147b8 <tcp_process+0x28c>)
 80147a0:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80147a4:	490f      	ldr	r1, [pc, #60]	@ (80147e4 <tcp_process+0x2b8>)
 80147a6:	4806      	ldr	r0, [pc, #24]	@ (80147c0 <tcp_process+0x294>)
 80147a8:	f007 f898 	bl	801b8dc <iprintf>
          pcb->unsent = rseg->next;
 80147ac:	69fb      	ldr	r3, [r7, #28]
 80147ae:	681a      	ldr	r2, [r3, #0]
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80147b4:	e01c      	b.n	80147f0 <tcp_process+0x2c4>
 80147b6:	bf00      	nop
 80147b8:	0801f65c 	.word	0x0801f65c
 80147bc:	0801f894 	.word	0x0801f894
 80147c0:	0801f6a8 	.word	0x0801f6a8
 80147c4:	2000c8f4 	.word	0x2000c8f4
 80147c8:	2000c8ec 	.word	0x2000c8ec
 80147cc:	2000c8e8 	.word	0x2000c8e8
 80147d0:	0801f8b0 	.word	0x0801f8b0
 80147d4:	2000c8f5 	.word	0x2000c8f5
 80147d8:	2000c8b0 	.word	0x2000c8b0
 80147dc:	2000c8d8 	.word	0x2000c8d8
 80147e0:	0801f8d0 	.word	0x0801f8d0
 80147e4:	0801f8e8 	.word	0x0801f8e8
        } else {
          pcb->unacked = rseg->next;
 80147e8:	69fb      	ldr	r3, [r7, #28]
 80147ea:	681a      	ldr	r2, [r3, #0]
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80147f0:	69f8      	ldr	r0, [r7, #28]
 80147f2:	f7fe fc7e 	bl	80130f2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d104      	bne.n	8014808 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014804:	861a      	strh	r2, [r3, #48]	@ 0x30
 8014806:	e006      	b.n	8014816 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	2200      	movs	r2, #0
 801480c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	2200      	movs	r2, #0
 8014812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801481c:	2b00      	cmp	r3, #0
 801481e:	d00a      	beq.n	8014836 <tcp_process+0x30a>
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014826:	687a      	ldr	r2, [r7, #4]
 8014828:	6910      	ldr	r0, [r2, #16]
 801482a:	2200      	movs	r2, #0
 801482c:	6879      	ldr	r1, [r7, #4]
 801482e:	4798      	blx	r3
 8014830:	4603      	mov	r3, r0
 8014832:	76bb      	strb	r3, [r7, #26]
 8014834:	e001      	b.n	801483a <tcp_process+0x30e>
 8014836:	2300      	movs	r3, #0
 8014838:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801483a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801483e:	f113 0f0d 	cmn.w	r3, #13
 8014842:	d102      	bne.n	801484a <tcp_process+0x31e>
          return ERR_ABRT;
 8014844:	f06f 030c 	mvn.w	r3, #12
 8014848:	e250      	b.n	8014cec <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	8b5b      	ldrh	r3, [r3, #26]
 801484e:	f043 0302 	orr.w	r3, r3, #2
 8014852:	b29a      	uxth	r2, r3
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014858:	e23a      	b.n	8014cd0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801485a:	4b98      	ldr	r3, [pc, #608]	@ (8014abc <tcp_process+0x590>)
 801485c:	781b      	ldrb	r3, [r3, #0]
 801485e:	f003 0310 	and.w	r3, r3, #16
 8014862:	2b00      	cmp	r3, #0
 8014864:	f000 8234 	beq.w	8014cd0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014868:	4b95      	ldr	r3, [pc, #596]	@ (8014ac0 <tcp_process+0x594>)
 801486a:	6819      	ldr	r1, [r3, #0]
 801486c:	4b95      	ldr	r3, [pc, #596]	@ (8014ac4 <tcp_process+0x598>)
 801486e:	881b      	ldrh	r3, [r3, #0]
 8014870:	461a      	mov	r2, r3
 8014872:	4b95      	ldr	r3, [pc, #596]	@ (8014ac8 <tcp_process+0x59c>)
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014878:	4b94      	ldr	r3, [pc, #592]	@ (8014acc <tcp_process+0x5a0>)
 801487a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801487c:	885b      	ldrh	r3, [r3, #2]
 801487e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014880:	4a92      	ldr	r2, [pc, #584]	@ (8014acc <tcp_process+0x5a0>)
 8014882:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014884:	8812      	ldrh	r2, [r2, #0]
 8014886:	b292      	uxth	r2, r2
 8014888:	9202      	str	r2, [sp, #8]
 801488a:	9301      	str	r3, [sp, #4]
 801488c:	4b90      	ldr	r3, [pc, #576]	@ (8014ad0 <tcp_process+0x5a4>)
 801488e:	9300      	str	r3, [sp, #0]
 8014890:	4b90      	ldr	r3, [pc, #576]	@ (8014ad4 <tcp_process+0x5a8>)
 8014892:	4602      	mov	r2, r0
 8014894:	6878      	ldr	r0, [r7, #4]
 8014896:	f003 f8d7 	bl	8017a48 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80148a0:	2b05      	cmp	r3, #5
 80148a2:	f200 8215 	bhi.w	8014cd0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	2200      	movs	r2, #0
 80148aa:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f002 fea3 	bl	80175f8 <tcp_rexmit_rto>
      break;
 80148b2:	e20d      	b.n	8014cd0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80148b4:	4b81      	ldr	r3, [pc, #516]	@ (8014abc <tcp_process+0x590>)
 80148b6:	781b      	ldrb	r3, [r3, #0]
 80148b8:	f003 0310 	and.w	r3, r3, #16
 80148bc:	2b00      	cmp	r3, #0
 80148be:	f000 80a1 	beq.w	8014a04 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80148c2:	4b7f      	ldr	r3, [pc, #508]	@ (8014ac0 <tcp_process+0x594>)
 80148c4:	681a      	ldr	r2, [r3, #0]
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80148ca:	1ad3      	subs	r3, r2, r3
 80148cc:	3b01      	subs	r3, #1
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	db7e      	blt.n	80149d0 <tcp_process+0x4a4>
 80148d2:	4b7b      	ldr	r3, [pc, #492]	@ (8014ac0 <tcp_process+0x594>)
 80148d4:	681a      	ldr	r2, [r3, #0]
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80148da:	1ad3      	subs	r3, r2, r3
 80148dc:	2b00      	cmp	r3, #0
 80148de:	dc77      	bgt.n	80149d0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	2204      	movs	r2, #4
 80148e4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d102      	bne.n	80148f4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80148ee:	23fa      	movs	r3, #250	@ 0xfa
 80148f0:	76bb      	strb	r3, [r7, #26]
 80148f2:	e01d      	b.n	8014930 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80148f8:	699b      	ldr	r3, [r3, #24]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d106      	bne.n	801490c <tcp_process+0x3e0>
 80148fe:	4b76      	ldr	r3, [pc, #472]	@ (8014ad8 <tcp_process+0x5ac>)
 8014900:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8014904:	4975      	ldr	r1, [pc, #468]	@ (8014adc <tcp_process+0x5b0>)
 8014906:	4876      	ldr	r0, [pc, #472]	@ (8014ae0 <tcp_process+0x5b4>)
 8014908:	f006 ffe8 	bl	801b8dc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014910:	699b      	ldr	r3, [r3, #24]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d00a      	beq.n	801492c <tcp_process+0x400>
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801491a:	699b      	ldr	r3, [r3, #24]
 801491c:	687a      	ldr	r2, [r7, #4]
 801491e:	6910      	ldr	r0, [r2, #16]
 8014920:	2200      	movs	r2, #0
 8014922:	6879      	ldr	r1, [r7, #4]
 8014924:	4798      	blx	r3
 8014926:	4603      	mov	r3, r0
 8014928:	76bb      	strb	r3, [r7, #26]
 801492a:	e001      	b.n	8014930 <tcp_process+0x404>
 801492c:	23f0      	movs	r3, #240	@ 0xf0
 801492e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014930:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d00a      	beq.n	801494e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8014938:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801493c:	f113 0f0d 	cmn.w	r3, #13
 8014940:	d002      	beq.n	8014948 <tcp_process+0x41c>
              tcp_abort(pcb);
 8014942:	6878      	ldr	r0, [r7, #4]
 8014944:	f7fd fd2e 	bl	80123a4 <tcp_abort>
            }
            return ERR_ABRT;
 8014948:	f06f 030c 	mvn.w	r3, #12
 801494c:	e1ce      	b.n	8014cec <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801494e:	6878      	ldr	r0, [r7, #4]
 8014950:	f000 fae0 	bl	8014f14 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014954:	4b63      	ldr	r3, [pc, #396]	@ (8014ae4 <tcp_process+0x5b8>)
 8014956:	881b      	ldrh	r3, [r3, #0]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d005      	beq.n	8014968 <tcp_process+0x43c>
            recv_acked--;
 801495c:	4b61      	ldr	r3, [pc, #388]	@ (8014ae4 <tcp_process+0x5b8>)
 801495e:	881b      	ldrh	r3, [r3, #0]
 8014960:	3b01      	subs	r3, #1
 8014962:	b29a      	uxth	r2, r3
 8014964:	4b5f      	ldr	r3, [pc, #380]	@ (8014ae4 <tcp_process+0x5b8>)
 8014966:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801496c:	009a      	lsls	r2, r3, #2
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014972:	005b      	lsls	r3, r3, #1
 8014974:	f241 111c 	movw	r1, #4380	@ 0x111c
 8014978:	428b      	cmp	r3, r1
 801497a:	bf38      	it	cc
 801497c:	460b      	movcc	r3, r1
 801497e:	429a      	cmp	r2, r3
 8014980:	d204      	bcs.n	801498c <tcp_process+0x460>
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014986:	009b      	lsls	r3, r3, #2
 8014988:	b29b      	uxth	r3, r3
 801498a:	e00d      	b.n	80149a8 <tcp_process+0x47c>
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014990:	005b      	lsls	r3, r3, #1
 8014992:	f241 121c 	movw	r2, #4380	@ 0x111c
 8014996:	4293      	cmp	r3, r2
 8014998:	d904      	bls.n	80149a4 <tcp_process+0x478>
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801499e:	005b      	lsls	r3, r3, #1
 80149a0:	b29b      	uxth	r3, r3
 80149a2:	e001      	b.n	80149a8 <tcp_process+0x47c>
 80149a4:	f241 131c 	movw	r3, #4380	@ 0x111c
 80149a8:	687a      	ldr	r2, [r7, #4]
 80149aa:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80149ae:	4b4e      	ldr	r3, [pc, #312]	@ (8014ae8 <tcp_process+0x5bc>)
 80149b0:	781b      	ldrb	r3, [r3, #0]
 80149b2:	f003 0320 	and.w	r3, r3, #32
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d037      	beq.n	8014a2a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	8b5b      	ldrh	r3, [r3, #26]
 80149be:	f043 0302 	orr.w	r3, r3, #2
 80149c2:	b29a      	uxth	r2, r3
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	2207      	movs	r2, #7
 80149cc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80149ce:	e02c      	b.n	8014a2a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80149d0:	4b3b      	ldr	r3, [pc, #236]	@ (8014ac0 <tcp_process+0x594>)
 80149d2:	6819      	ldr	r1, [r3, #0]
 80149d4:	4b3b      	ldr	r3, [pc, #236]	@ (8014ac4 <tcp_process+0x598>)
 80149d6:	881b      	ldrh	r3, [r3, #0]
 80149d8:	461a      	mov	r2, r3
 80149da:	4b3b      	ldr	r3, [pc, #236]	@ (8014ac8 <tcp_process+0x59c>)
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80149e0:	4b3a      	ldr	r3, [pc, #232]	@ (8014acc <tcp_process+0x5a0>)
 80149e2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80149e4:	885b      	ldrh	r3, [r3, #2]
 80149e6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80149e8:	4a38      	ldr	r2, [pc, #224]	@ (8014acc <tcp_process+0x5a0>)
 80149ea:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80149ec:	8812      	ldrh	r2, [r2, #0]
 80149ee:	b292      	uxth	r2, r2
 80149f0:	9202      	str	r2, [sp, #8]
 80149f2:	9301      	str	r3, [sp, #4]
 80149f4:	4b36      	ldr	r3, [pc, #216]	@ (8014ad0 <tcp_process+0x5a4>)
 80149f6:	9300      	str	r3, [sp, #0]
 80149f8:	4b36      	ldr	r3, [pc, #216]	@ (8014ad4 <tcp_process+0x5a8>)
 80149fa:	4602      	mov	r2, r0
 80149fc:	6878      	ldr	r0, [r7, #4]
 80149fe:	f003 f823 	bl	8017a48 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014a02:	e167      	b.n	8014cd4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014a04:	4b2d      	ldr	r3, [pc, #180]	@ (8014abc <tcp_process+0x590>)
 8014a06:	781b      	ldrb	r3, [r3, #0]
 8014a08:	f003 0302 	and.w	r3, r3, #2
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	f000 8161 	beq.w	8014cd4 <tcp_process+0x7a8>
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a16:	1e5a      	subs	r2, r3, #1
 8014a18:	4b2b      	ldr	r3, [pc, #172]	@ (8014ac8 <tcp_process+0x59c>)
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	429a      	cmp	r2, r3
 8014a1e:	f040 8159 	bne.w	8014cd4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8014a22:	6878      	ldr	r0, [r7, #4]
 8014a24:	f002 fe0a 	bl	801763c <tcp_rexmit>
      break;
 8014a28:	e154      	b.n	8014cd4 <tcp_process+0x7a8>
 8014a2a:	e153      	b.n	8014cd4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014a2c:	6878      	ldr	r0, [r7, #4]
 8014a2e:	f000 fa71 	bl	8014f14 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8014a32:	4b2d      	ldr	r3, [pc, #180]	@ (8014ae8 <tcp_process+0x5bc>)
 8014a34:	781b      	ldrb	r3, [r3, #0]
 8014a36:	f003 0320 	and.w	r3, r3, #32
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	f000 814c 	beq.w	8014cd8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	8b5b      	ldrh	r3, [r3, #26]
 8014a44:	f043 0302 	orr.w	r3, r3, #2
 8014a48:	b29a      	uxth	r2, r3
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	2207      	movs	r2, #7
 8014a52:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014a54:	e140      	b.n	8014cd8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8014a56:	6878      	ldr	r0, [r7, #4]
 8014a58:	f000 fa5c 	bl	8014f14 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014a5c:	4b22      	ldr	r3, [pc, #136]	@ (8014ae8 <tcp_process+0x5bc>)
 8014a5e:	781b      	ldrb	r3, [r3, #0]
 8014a60:	f003 0320 	and.w	r3, r3, #32
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d071      	beq.n	8014b4c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014a68:	4b14      	ldr	r3, [pc, #80]	@ (8014abc <tcp_process+0x590>)
 8014a6a:	781b      	ldrb	r3, [r3, #0]
 8014a6c:	f003 0310 	and.w	r3, r3, #16
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d060      	beq.n	8014b36 <tcp_process+0x60a>
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a78:	4b11      	ldr	r3, [pc, #68]	@ (8014ac0 <tcp_process+0x594>)
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	429a      	cmp	r2, r3
 8014a7e:	d15a      	bne.n	8014b36 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d156      	bne.n	8014b36 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	8b5b      	ldrh	r3, [r3, #26]
 8014a8c:	f043 0302 	orr.w	r3, r3, #2
 8014a90:	b29a      	uxth	r2, r3
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8014a96:	6878      	ldr	r0, [r7, #4]
 8014a98:	f7fe fdbc 	bl	8013614 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014a9c:	4b13      	ldr	r3, [pc, #76]	@ (8014aec <tcp_process+0x5c0>)
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	687a      	ldr	r2, [r7, #4]
 8014aa2:	429a      	cmp	r2, r3
 8014aa4:	d105      	bne.n	8014ab2 <tcp_process+0x586>
 8014aa6:	4b11      	ldr	r3, [pc, #68]	@ (8014aec <tcp_process+0x5c0>)
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	68db      	ldr	r3, [r3, #12]
 8014aac:	4a0f      	ldr	r2, [pc, #60]	@ (8014aec <tcp_process+0x5c0>)
 8014aae:	6013      	str	r3, [r2, #0]
 8014ab0:	e02e      	b.n	8014b10 <tcp_process+0x5e4>
 8014ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8014aec <tcp_process+0x5c0>)
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	617b      	str	r3, [r7, #20]
 8014ab8:	e027      	b.n	8014b0a <tcp_process+0x5de>
 8014aba:	bf00      	nop
 8014abc:	2000c8f4 	.word	0x2000c8f4
 8014ac0:	2000c8ec 	.word	0x2000c8ec
 8014ac4:	2000c8f2 	.word	0x2000c8f2
 8014ac8:	2000c8e8 	.word	0x2000c8e8
 8014acc:	2000c8d8 	.word	0x2000c8d8
 8014ad0:	2000916c 	.word	0x2000916c
 8014ad4:	20009170 	.word	0x20009170
 8014ad8:	0801f65c 	.word	0x0801f65c
 8014adc:	0801f8fc 	.word	0x0801f8fc
 8014ae0:	0801f6a8 	.word	0x0801f6a8
 8014ae4:	2000c8f0 	.word	0x2000c8f0
 8014ae8:	2000c8f5 	.word	0x2000c8f5
 8014aec:	2000c8bc 	.word	0x2000c8bc
 8014af0:	697b      	ldr	r3, [r7, #20]
 8014af2:	68db      	ldr	r3, [r3, #12]
 8014af4:	687a      	ldr	r2, [r7, #4]
 8014af6:	429a      	cmp	r2, r3
 8014af8:	d104      	bne.n	8014b04 <tcp_process+0x5d8>
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	68da      	ldr	r2, [r3, #12]
 8014afe:	697b      	ldr	r3, [r7, #20]
 8014b00:	60da      	str	r2, [r3, #12]
 8014b02:	e005      	b.n	8014b10 <tcp_process+0x5e4>
 8014b04:	697b      	ldr	r3, [r7, #20]
 8014b06:	68db      	ldr	r3, [r3, #12]
 8014b08:	617b      	str	r3, [r7, #20]
 8014b0a:	697b      	ldr	r3, [r7, #20]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d1ef      	bne.n	8014af0 <tcp_process+0x5c4>
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	2200      	movs	r2, #0
 8014b14:	60da      	str	r2, [r3, #12]
 8014b16:	4b77      	ldr	r3, [pc, #476]	@ (8014cf4 <tcp_process+0x7c8>)
 8014b18:	2201      	movs	r2, #1
 8014b1a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	220a      	movs	r2, #10
 8014b20:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8014b22:	4b75      	ldr	r3, [pc, #468]	@ (8014cf8 <tcp_process+0x7cc>)
 8014b24:	681a      	ldr	r2, [r3, #0]
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	60da      	str	r2, [r3, #12]
 8014b2a:	4a73      	ldr	r2, [pc, #460]	@ (8014cf8 <tcp_process+0x7cc>)
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	6013      	str	r3, [r2, #0]
 8014b30:	f003 f94c 	bl	8017dcc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8014b34:	e0d2      	b.n	8014cdc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	8b5b      	ldrh	r3, [r3, #26]
 8014b3a:	f043 0302 	orr.w	r3, r3, #2
 8014b3e:	b29a      	uxth	r2, r3
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	2208      	movs	r2, #8
 8014b48:	751a      	strb	r2, [r3, #20]
      break;
 8014b4a:	e0c7      	b.n	8014cdc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014b4c:	4b6b      	ldr	r3, [pc, #428]	@ (8014cfc <tcp_process+0x7d0>)
 8014b4e:	781b      	ldrb	r3, [r3, #0]
 8014b50:	f003 0310 	and.w	r3, r3, #16
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	f000 80c1 	beq.w	8014cdc <tcp_process+0x7b0>
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014b5e:	4b68      	ldr	r3, [pc, #416]	@ (8014d00 <tcp_process+0x7d4>)
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	429a      	cmp	r2, r3
 8014b64:	f040 80ba 	bne.w	8014cdc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	f040 80b5 	bne.w	8014cdc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	2206      	movs	r2, #6
 8014b76:	751a      	strb	r2, [r3, #20]
      break;
 8014b78:	e0b0      	b.n	8014cdc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8014b7a:	6878      	ldr	r0, [r7, #4]
 8014b7c:	f000 f9ca 	bl	8014f14 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014b80:	4b60      	ldr	r3, [pc, #384]	@ (8014d04 <tcp_process+0x7d8>)
 8014b82:	781b      	ldrb	r3, [r3, #0]
 8014b84:	f003 0320 	and.w	r3, r3, #32
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	f000 80a9 	beq.w	8014ce0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	8b5b      	ldrh	r3, [r3, #26]
 8014b92:	f043 0302 	orr.w	r3, r3, #2
 8014b96:	b29a      	uxth	r2, r3
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014b9c:	6878      	ldr	r0, [r7, #4]
 8014b9e:	f7fe fd39 	bl	8013614 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014ba2:	4b59      	ldr	r3, [pc, #356]	@ (8014d08 <tcp_process+0x7dc>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	687a      	ldr	r2, [r7, #4]
 8014ba8:	429a      	cmp	r2, r3
 8014baa:	d105      	bne.n	8014bb8 <tcp_process+0x68c>
 8014bac:	4b56      	ldr	r3, [pc, #344]	@ (8014d08 <tcp_process+0x7dc>)
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	68db      	ldr	r3, [r3, #12]
 8014bb2:	4a55      	ldr	r2, [pc, #340]	@ (8014d08 <tcp_process+0x7dc>)
 8014bb4:	6013      	str	r3, [r2, #0]
 8014bb6:	e013      	b.n	8014be0 <tcp_process+0x6b4>
 8014bb8:	4b53      	ldr	r3, [pc, #332]	@ (8014d08 <tcp_process+0x7dc>)
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	613b      	str	r3, [r7, #16]
 8014bbe:	e00c      	b.n	8014bda <tcp_process+0x6ae>
 8014bc0:	693b      	ldr	r3, [r7, #16]
 8014bc2:	68db      	ldr	r3, [r3, #12]
 8014bc4:	687a      	ldr	r2, [r7, #4]
 8014bc6:	429a      	cmp	r2, r3
 8014bc8:	d104      	bne.n	8014bd4 <tcp_process+0x6a8>
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	68da      	ldr	r2, [r3, #12]
 8014bce:	693b      	ldr	r3, [r7, #16]
 8014bd0:	60da      	str	r2, [r3, #12]
 8014bd2:	e005      	b.n	8014be0 <tcp_process+0x6b4>
 8014bd4:	693b      	ldr	r3, [r7, #16]
 8014bd6:	68db      	ldr	r3, [r3, #12]
 8014bd8:	613b      	str	r3, [r7, #16]
 8014bda:	693b      	ldr	r3, [r7, #16]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d1ef      	bne.n	8014bc0 <tcp_process+0x694>
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	2200      	movs	r2, #0
 8014be4:	60da      	str	r2, [r3, #12]
 8014be6:	4b43      	ldr	r3, [pc, #268]	@ (8014cf4 <tcp_process+0x7c8>)
 8014be8:	2201      	movs	r2, #1
 8014bea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	220a      	movs	r2, #10
 8014bf0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014bf2:	4b41      	ldr	r3, [pc, #260]	@ (8014cf8 <tcp_process+0x7cc>)
 8014bf4:	681a      	ldr	r2, [r3, #0]
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	60da      	str	r2, [r3, #12]
 8014bfa:	4a3f      	ldr	r2, [pc, #252]	@ (8014cf8 <tcp_process+0x7cc>)
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	6013      	str	r3, [r2, #0]
 8014c00:	f003 f8e4 	bl	8017dcc <tcp_timer_needed>
      }
      break;
 8014c04:	e06c      	b.n	8014ce0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8014c06:	6878      	ldr	r0, [r7, #4]
 8014c08:	f000 f984 	bl	8014f14 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8014cfc <tcp_process+0x7d0>)
 8014c0e:	781b      	ldrb	r3, [r3, #0]
 8014c10:	f003 0310 	and.w	r3, r3, #16
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d065      	beq.n	8014ce4 <tcp_process+0x7b8>
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014c1c:	4b38      	ldr	r3, [pc, #224]	@ (8014d00 <tcp_process+0x7d4>)
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	429a      	cmp	r2, r3
 8014c22:	d15f      	bne.n	8014ce4 <tcp_process+0x7b8>
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d15b      	bne.n	8014ce4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014c2c:	6878      	ldr	r0, [r7, #4]
 8014c2e:	f7fe fcf1 	bl	8013614 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014c32:	4b35      	ldr	r3, [pc, #212]	@ (8014d08 <tcp_process+0x7dc>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	687a      	ldr	r2, [r7, #4]
 8014c38:	429a      	cmp	r2, r3
 8014c3a:	d105      	bne.n	8014c48 <tcp_process+0x71c>
 8014c3c:	4b32      	ldr	r3, [pc, #200]	@ (8014d08 <tcp_process+0x7dc>)
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	68db      	ldr	r3, [r3, #12]
 8014c42:	4a31      	ldr	r2, [pc, #196]	@ (8014d08 <tcp_process+0x7dc>)
 8014c44:	6013      	str	r3, [r2, #0]
 8014c46:	e013      	b.n	8014c70 <tcp_process+0x744>
 8014c48:	4b2f      	ldr	r3, [pc, #188]	@ (8014d08 <tcp_process+0x7dc>)
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	60fb      	str	r3, [r7, #12]
 8014c4e:	e00c      	b.n	8014c6a <tcp_process+0x73e>
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	68db      	ldr	r3, [r3, #12]
 8014c54:	687a      	ldr	r2, [r7, #4]
 8014c56:	429a      	cmp	r2, r3
 8014c58:	d104      	bne.n	8014c64 <tcp_process+0x738>
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	68da      	ldr	r2, [r3, #12]
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	60da      	str	r2, [r3, #12]
 8014c62:	e005      	b.n	8014c70 <tcp_process+0x744>
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	68db      	ldr	r3, [r3, #12]
 8014c68:	60fb      	str	r3, [r7, #12]
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d1ef      	bne.n	8014c50 <tcp_process+0x724>
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	2200      	movs	r2, #0
 8014c74:	60da      	str	r2, [r3, #12]
 8014c76:	4b1f      	ldr	r3, [pc, #124]	@ (8014cf4 <tcp_process+0x7c8>)
 8014c78:	2201      	movs	r2, #1
 8014c7a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	220a      	movs	r2, #10
 8014c80:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014c82:	4b1d      	ldr	r3, [pc, #116]	@ (8014cf8 <tcp_process+0x7cc>)
 8014c84:	681a      	ldr	r2, [r3, #0]
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	60da      	str	r2, [r3, #12]
 8014c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8014cf8 <tcp_process+0x7cc>)
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	6013      	str	r3, [r2, #0]
 8014c90:	f003 f89c 	bl	8017dcc <tcp_timer_needed>
      }
      break;
 8014c94:	e026      	b.n	8014ce4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8014c96:	6878      	ldr	r0, [r7, #4]
 8014c98:	f000 f93c 	bl	8014f14 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014c9c:	4b17      	ldr	r3, [pc, #92]	@ (8014cfc <tcp_process+0x7d0>)
 8014c9e:	781b      	ldrb	r3, [r3, #0]
 8014ca0:	f003 0310 	and.w	r3, r3, #16
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d01f      	beq.n	8014ce8 <tcp_process+0x7bc>
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014cac:	4b14      	ldr	r3, [pc, #80]	@ (8014d00 <tcp_process+0x7d4>)
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	429a      	cmp	r2, r3
 8014cb2:	d119      	bne.n	8014ce8 <tcp_process+0x7bc>
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d115      	bne.n	8014ce8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014cbc:	4b11      	ldr	r3, [pc, #68]	@ (8014d04 <tcp_process+0x7d8>)
 8014cbe:	781b      	ldrb	r3, [r3, #0]
 8014cc0:	f043 0310 	orr.w	r3, r3, #16
 8014cc4:	b2da      	uxtb	r2, r3
 8014cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8014d04 <tcp_process+0x7d8>)
 8014cc8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014cca:	e00d      	b.n	8014ce8 <tcp_process+0x7bc>
    default:
      break;
 8014ccc:	bf00      	nop
 8014cce:	e00c      	b.n	8014cea <tcp_process+0x7be>
      break;
 8014cd0:	bf00      	nop
 8014cd2:	e00a      	b.n	8014cea <tcp_process+0x7be>
      break;
 8014cd4:	bf00      	nop
 8014cd6:	e008      	b.n	8014cea <tcp_process+0x7be>
      break;
 8014cd8:	bf00      	nop
 8014cda:	e006      	b.n	8014cea <tcp_process+0x7be>
      break;
 8014cdc:	bf00      	nop
 8014cde:	e004      	b.n	8014cea <tcp_process+0x7be>
      break;
 8014ce0:	bf00      	nop
 8014ce2:	e002      	b.n	8014cea <tcp_process+0x7be>
      break;
 8014ce4:	bf00      	nop
 8014ce6:	e000      	b.n	8014cea <tcp_process+0x7be>
      break;
 8014ce8:	bf00      	nop
  }
  return ERR_OK;
 8014cea:	2300      	movs	r3, #0
}
 8014cec:	4618      	mov	r0, r3
 8014cee:	3724      	adds	r7, #36	@ 0x24
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd90      	pop	{r4, r7, pc}
 8014cf4:	2000c8c4 	.word	0x2000c8c4
 8014cf8:	2000c8c0 	.word	0x2000c8c0
 8014cfc:	2000c8f4 	.word	0x2000c8f4
 8014d00:	2000c8ec 	.word	0x2000c8ec
 8014d04:	2000c8f5 	.word	0x2000c8f5
 8014d08:	2000c8bc 	.word	0x2000c8bc

08014d0c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014d0c:	b590      	push	{r4, r7, lr}
 8014d0e:	b085      	sub	sp, #20
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
 8014d14:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d106      	bne.n	8014d2a <tcp_oos_insert_segment+0x1e>
 8014d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8014e0c <tcp_oos_insert_segment+0x100>)
 8014d1e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8014d22:	493b      	ldr	r1, [pc, #236]	@ (8014e10 <tcp_oos_insert_segment+0x104>)
 8014d24:	483b      	ldr	r0, [pc, #236]	@ (8014e14 <tcp_oos_insert_segment+0x108>)
 8014d26:	f006 fdd9 	bl	801b8dc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	68db      	ldr	r3, [r3, #12]
 8014d2e:	899b      	ldrh	r3, [r3, #12]
 8014d30:	b29b      	uxth	r3, r3
 8014d32:	4618      	mov	r0, r3
 8014d34:	f7fb f9e2 	bl	80100fc <lwip_htons>
 8014d38:	4603      	mov	r3, r0
 8014d3a:	b2db      	uxtb	r3, r3
 8014d3c:	f003 0301 	and.w	r3, r3, #1
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d028      	beq.n	8014d96 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014d44:	6838      	ldr	r0, [r7, #0]
 8014d46:	f7fe f9bf 	bl	80130c8 <tcp_segs_free>
    next = NULL;
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	603b      	str	r3, [r7, #0]
 8014d4e:	e056      	b.n	8014dfe <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014d50:	683b      	ldr	r3, [r7, #0]
 8014d52:	68db      	ldr	r3, [r3, #12]
 8014d54:	899b      	ldrh	r3, [r3, #12]
 8014d56:	b29b      	uxth	r3, r3
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f7fb f9cf 	bl	80100fc <lwip_htons>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	b2db      	uxtb	r3, r3
 8014d62:	f003 0301 	and.w	r3, r3, #1
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d00d      	beq.n	8014d86 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	68db      	ldr	r3, [r3, #12]
 8014d6e:	899b      	ldrh	r3, [r3, #12]
 8014d70:	b29c      	uxth	r4, r3
 8014d72:	2001      	movs	r0, #1
 8014d74:	f7fb f9c2 	bl	80100fc <lwip_htons>
 8014d78:	4603      	mov	r3, r0
 8014d7a:	461a      	mov	r2, r3
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	68db      	ldr	r3, [r3, #12]
 8014d80:	4322      	orrs	r2, r4
 8014d82:	b292      	uxth	r2, r2
 8014d84:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014d86:	683b      	ldr	r3, [r7, #0]
 8014d88:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014d8a:	683b      	ldr	r3, [r7, #0]
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014d90:	68f8      	ldr	r0, [r7, #12]
 8014d92:	f7fe f9ae 	bl	80130f2 <tcp_seg_free>
    while (next &&
 8014d96:	683b      	ldr	r3, [r7, #0]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d00e      	beq.n	8014dba <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	891b      	ldrh	r3, [r3, #8]
 8014da0:	461a      	mov	r2, r3
 8014da2:	4b1d      	ldr	r3, [pc, #116]	@ (8014e18 <tcp_oos_insert_segment+0x10c>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	441a      	add	r2, r3
 8014da8:	683b      	ldr	r3, [r7, #0]
 8014daa:	68db      	ldr	r3, [r3, #12]
 8014dac:	685b      	ldr	r3, [r3, #4]
 8014dae:	6839      	ldr	r1, [r7, #0]
 8014db0:	8909      	ldrh	r1, [r1, #8]
 8014db2:	440b      	add	r3, r1
 8014db4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	daca      	bge.n	8014d50 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014dba:	683b      	ldr	r3, [r7, #0]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d01e      	beq.n	8014dfe <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	891b      	ldrh	r3, [r3, #8]
 8014dc4:	461a      	mov	r2, r3
 8014dc6:	4b14      	ldr	r3, [pc, #80]	@ (8014e18 <tcp_oos_insert_segment+0x10c>)
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	441a      	add	r2, r3
 8014dcc:	683b      	ldr	r3, [r7, #0]
 8014dce:	68db      	ldr	r3, [r3, #12]
 8014dd0:	685b      	ldr	r3, [r3, #4]
 8014dd2:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	dd12      	ble.n	8014dfe <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014dd8:	683b      	ldr	r3, [r7, #0]
 8014dda:	68db      	ldr	r3, [r3, #12]
 8014ddc:	685b      	ldr	r3, [r3, #4]
 8014dde:	b29a      	uxth	r2, r3
 8014de0:	4b0d      	ldr	r3, [pc, #52]	@ (8014e18 <tcp_oos_insert_segment+0x10c>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	b29b      	uxth	r3, r3
 8014de6:	1ad3      	subs	r3, r2, r3
 8014de8:	b29a      	uxth	r2, r3
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	685a      	ldr	r2, [r3, #4]
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	891b      	ldrh	r3, [r3, #8]
 8014df6:	4619      	mov	r1, r3
 8014df8:	4610      	mov	r0, r2
 8014dfa:	f7fc fbb9 	bl	8011570 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	683a      	ldr	r2, [r7, #0]
 8014e02:	601a      	str	r2, [r3, #0]
}
 8014e04:	bf00      	nop
 8014e06:	3714      	adds	r7, #20
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	bd90      	pop	{r4, r7, pc}
 8014e0c:	0801f65c 	.word	0x0801f65c
 8014e10:	0801f91c 	.word	0x0801f91c
 8014e14:	0801f6a8 	.word	0x0801f6a8
 8014e18:	2000c8e8 	.word	0x2000c8e8

08014e1c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014e1c:	b5b0      	push	{r4, r5, r7, lr}
 8014e1e:	b086      	sub	sp, #24
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	60f8      	str	r0, [r7, #12]
 8014e24:	60b9      	str	r1, [r7, #8]
 8014e26:	607a      	str	r2, [r7, #4]
 8014e28:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014e2a:	e03e      	b.n	8014eaa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014e2c:	68bb      	ldr	r3, [r7, #8]
 8014e2e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014e30:	68bb      	ldr	r3, [r7, #8]
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014e36:	697b      	ldr	r3, [r7, #20]
 8014e38:	685b      	ldr	r3, [r3, #4]
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f7fc fdac 	bl	8011998 <pbuf_clen>
 8014e40:	4603      	mov	r3, r0
 8014e42:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014e4a:	8a7a      	ldrh	r2, [r7, #18]
 8014e4c:	429a      	cmp	r2, r3
 8014e4e:	d906      	bls.n	8014e5e <tcp_free_acked_segments+0x42>
 8014e50:	4b2a      	ldr	r3, [pc, #168]	@ (8014efc <tcp_free_acked_segments+0xe0>)
 8014e52:	f240 4257 	movw	r2, #1111	@ 0x457
 8014e56:	492a      	ldr	r1, [pc, #168]	@ (8014f00 <tcp_free_acked_segments+0xe4>)
 8014e58:	482a      	ldr	r0, [pc, #168]	@ (8014f04 <tcp_free_acked_segments+0xe8>)
 8014e5a:	f006 fd3f 	bl	801b8dc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8014e64:	8a7b      	ldrh	r3, [r7, #18]
 8014e66:	1ad3      	subs	r3, r2, r3
 8014e68:	b29a      	uxth	r2, r3
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014e70:	697b      	ldr	r3, [r7, #20]
 8014e72:	891a      	ldrh	r2, [r3, #8]
 8014e74:	4b24      	ldr	r3, [pc, #144]	@ (8014f08 <tcp_free_acked_segments+0xec>)
 8014e76:	881b      	ldrh	r3, [r3, #0]
 8014e78:	4413      	add	r3, r2
 8014e7a:	b29a      	uxth	r2, r3
 8014e7c:	4b22      	ldr	r3, [pc, #136]	@ (8014f08 <tcp_free_acked_segments+0xec>)
 8014e7e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014e80:	6978      	ldr	r0, [r7, #20]
 8014e82:	f7fe f936 	bl	80130f2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d00c      	beq.n	8014eaa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014e90:	68bb      	ldr	r3, [r7, #8]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d109      	bne.n	8014eaa <tcp_free_acked_segments+0x8e>
 8014e96:	683b      	ldr	r3, [r7, #0]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d106      	bne.n	8014eaa <tcp_free_acked_segments+0x8e>
 8014e9c:	4b17      	ldr	r3, [pc, #92]	@ (8014efc <tcp_free_acked_segments+0xe0>)
 8014e9e:	f240 4261 	movw	r2, #1121	@ 0x461
 8014ea2:	491a      	ldr	r1, [pc, #104]	@ (8014f0c <tcp_free_acked_segments+0xf0>)
 8014ea4:	4817      	ldr	r0, [pc, #92]	@ (8014f04 <tcp_free_acked_segments+0xe8>)
 8014ea6:	f006 fd19 	bl	801b8dc <iprintf>
  while (seg_list != NULL &&
 8014eaa:	68bb      	ldr	r3, [r7, #8]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d020      	beq.n	8014ef2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014eb0:	68bb      	ldr	r3, [r7, #8]
 8014eb2:	68db      	ldr	r3, [r3, #12]
 8014eb4:	685b      	ldr	r3, [r3, #4]
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	f7fb f936 	bl	8010128 <lwip_htonl>
 8014ebc:	4604      	mov	r4, r0
 8014ebe:	68bb      	ldr	r3, [r7, #8]
 8014ec0:	891b      	ldrh	r3, [r3, #8]
 8014ec2:	461d      	mov	r5, r3
 8014ec4:	68bb      	ldr	r3, [r7, #8]
 8014ec6:	68db      	ldr	r3, [r3, #12]
 8014ec8:	899b      	ldrh	r3, [r3, #12]
 8014eca:	b29b      	uxth	r3, r3
 8014ecc:	4618      	mov	r0, r3
 8014ece:	f7fb f915 	bl	80100fc <lwip_htons>
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	b2db      	uxtb	r3, r3
 8014ed6:	f003 0303 	and.w	r3, r3, #3
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d001      	beq.n	8014ee2 <tcp_free_acked_segments+0xc6>
 8014ede:	2301      	movs	r3, #1
 8014ee0:	e000      	b.n	8014ee4 <tcp_free_acked_segments+0xc8>
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	442b      	add	r3, r5
 8014ee6:	18e2      	adds	r2, r4, r3
 8014ee8:	4b09      	ldr	r3, [pc, #36]	@ (8014f10 <tcp_free_acked_segments+0xf4>)
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	dd9c      	ble.n	8014e2c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014ef2:	68bb      	ldr	r3, [r7, #8]
}
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	3718      	adds	r7, #24
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	bdb0      	pop	{r4, r5, r7, pc}
 8014efc:	0801f65c 	.word	0x0801f65c
 8014f00:	0801f944 	.word	0x0801f944
 8014f04:	0801f6a8 	.word	0x0801f6a8
 8014f08:	2000c8f0 	.word	0x2000c8f0
 8014f0c:	0801f96c 	.word	0x0801f96c
 8014f10:	2000c8ec 	.word	0x2000c8ec

08014f14 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014f14:	b5b0      	push	{r4, r5, r7, lr}
 8014f16:	b094      	sub	sp, #80	@ 0x50
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d106      	bne.n	8014f34 <tcp_receive+0x20>
 8014f26:	4b91      	ldr	r3, [pc, #580]	@ (801516c <tcp_receive+0x258>)
 8014f28:	f240 427b 	movw	r2, #1147	@ 0x47b
 8014f2c:	4990      	ldr	r1, [pc, #576]	@ (8015170 <tcp_receive+0x25c>)
 8014f2e:	4891      	ldr	r0, [pc, #580]	@ (8015174 <tcp_receive+0x260>)
 8014f30:	f006 fcd4 	bl	801b8dc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	7d1b      	ldrb	r3, [r3, #20]
 8014f38:	2b03      	cmp	r3, #3
 8014f3a:	d806      	bhi.n	8014f4a <tcp_receive+0x36>
 8014f3c:	4b8b      	ldr	r3, [pc, #556]	@ (801516c <tcp_receive+0x258>)
 8014f3e:	f240 427c 	movw	r2, #1148	@ 0x47c
 8014f42:	498d      	ldr	r1, [pc, #564]	@ (8015178 <tcp_receive+0x264>)
 8014f44:	488b      	ldr	r0, [pc, #556]	@ (8015174 <tcp_receive+0x260>)
 8014f46:	f006 fcc9 	bl	801b8dc <iprintf>

  if (flags & TCP_ACK) {
 8014f4a:	4b8c      	ldr	r3, [pc, #560]	@ (801517c <tcp_receive+0x268>)
 8014f4c:	781b      	ldrb	r3, [r3, #0]
 8014f4e:	f003 0310 	and.w	r3, r3, #16
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	f000 8264 	beq.w	8015420 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014f5e:	461a      	mov	r2, r3
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014f64:	4413      	add	r3, r2
 8014f66:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014f6c:	4b84      	ldr	r3, [pc, #528]	@ (8015180 <tcp_receive+0x26c>)
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	1ad3      	subs	r3, r2, r3
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	db1b      	blt.n	8014fae <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014f7a:	4b81      	ldr	r3, [pc, #516]	@ (8015180 <tcp_receive+0x26c>)
 8014f7c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014f7e:	429a      	cmp	r2, r3
 8014f80:	d106      	bne.n	8014f90 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014f86:	4b7f      	ldr	r3, [pc, #508]	@ (8015184 <tcp_receive+0x270>)
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	1ad3      	subs	r3, r2, r3
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	db0e      	blt.n	8014fae <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014f94:	4b7b      	ldr	r3, [pc, #492]	@ (8015184 <tcp_receive+0x270>)
 8014f96:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014f98:	429a      	cmp	r2, r3
 8014f9a:	d125      	bne.n	8014fe8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014f9c:	4b7a      	ldr	r3, [pc, #488]	@ (8015188 <tcp_receive+0x274>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	89db      	ldrh	r3, [r3, #14]
 8014fa2:	b29a      	uxth	r2, r3
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014faa:	429a      	cmp	r2, r3
 8014fac:	d91c      	bls.n	8014fe8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014fae:	4b76      	ldr	r3, [pc, #472]	@ (8015188 <tcp_receive+0x274>)
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	89db      	ldrh	r3, [r3, #14]
 8014fb4:	b29a      	uxth	r2, r3
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014fc8:	429a      	cmp	r2, r3
 8014fca:	d205      	bcs.n	8014fd8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8014fd8:	4b69      	ldr	r3, [pc, #420]	@ (8015180 <tcp_receive+0x26c>)
 8014fda:	681a      	ldr	r2, [r3, #0]
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8014fe0:	4b68      	ldr	r3, [pc, #416]	@ (8015184 <tcp_receive+0x270>)
 8014fe2:	681a      	ldr	r2, [r3, #0]
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014fe8:	4b66      	ldr	r3, [pc, #408]	@ (8015184 <tcp_receive+0x270>)
 8014fea:	681a      	ldr	r2, [r3, #0]
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014ff0:	1ad3      	subs	r3, r2, r3
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	dc58      	bgt.n	80150a8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014ff6:	4b65      	ldr	r3, [pc, #404]	@ (801518c <tcp_receive+0x278>)
 8014ff8:	881b      	ldrh	r3, [r3, #0]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d14b      	bne.n	8015096 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015002:	687a      	ldr	r2, [r7, #4]
 8015004:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8015008:	4413      	add	r3, r2
 801500a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801500c:	429a      	cmp	r2, r3
 801500e:	d142      	bne.n	8015096 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015016:	2b00      	cmp	r3, #0
 8015018:	db3d      	blt.n	8015096 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801501e:	4b59      	ldr	r3, [pc, #356]	@ (8015184 <tcp_receive+0x270>)
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	429a      	cmp	r2, r3
 8015024:	d137      	bne.n	8015096 <tcp_receive+0x182>
              found_dupack = 1;
 8015026:	2301      	movs	r3, #1
 8015028:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015030:	2bff      	cmp	r3, #255	@ 0xff
 8015032:	d007      	beq.n	8015044 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801503a:	3301      	adds	r3, #1
 801503c:	b2da      	uxtb	r2, r3
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801504a:	2b03      	cmp	r3, #3
 801504c:	d91b      	bls.n	8015086 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015058:	4413      	add	r3, r2
 801505a:	b29a      	uxth	r2, r3
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015062:	429a      	cmp	r2, r3
 8015064:	d30a      	bcc.n	801507c <tcp_receive+0x168>
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015070:	4413      	add	r3, r2
 8015072:	b29a      	uxth	r2, r3
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801507a:	e004      	b.n	8015086 <tcp_receive+0x172>
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015082:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801508c:	2b02      	cmp	r3, #2
 801508e:	d902      	bls.n	8015096 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015090:	6878      	ldr	r0, [r7, #4]
 8015092:	f002 fb3f 	bl	8017714 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8015096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015098:	2b00      	cmp	r3, #0
 801509a:	f040 8161 	bne.w	8015360 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	2200      	movs	r2, #0
 80150a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80150a6:	e15b      	b.n	8015360 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80150a8:	4b36      	ldr	r3, [pc, #216]	@ (8015184 <tcp_receive+0x270>)
 80150aa:	681a      	ldr	r2, [r3, #0]
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80150b0:	1ad3      	subs	r3, r2, r3
 80150b2:	3b01      	subs	r3, #1
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	f2c0 814e 	blt.w	8015356 <tcp_receive+0x442>
 80150ba:	4b32      	ldr	r3, [pc, #200]	@ (8015184 <tcp_receive+0x270>)
 80150bc:	681a      	ldr	r2, [r3, #0]
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80150c2:	1ad3      	subs	r3, r2, r3
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	f300 8146 	bgt.w	8015356 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	8b5b      	ldrh	r3, [r3, #26]
 80150ce:	f003 0304 	and.w	r3, r3, #4
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d010      	beq.n	80150f8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	8b5b      	ldrh	r3, [r3, #26]
 80150da:	f023 0304 	bic.w	r3, r3, #4
 80150de:	b29a      	uxth	r2, r3
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	2200      	movs	r2, #0
 80150f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	2200      	movs	r2, #0
 80150fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015106:	10db      	asrs	r3, r3, #3
 8015108:	b21b      	sxth	r3, r3
 801510a:	b29a      	uxth	r2, r3
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015112:	b29b      	uxth	r3, r3
 8015114:	4413      	add	r3, r2
 8015116:	b29b      	uxth	r3, r3
 8015118:	b21a      	sxth	r2, r3
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015120:	4b18      	ldr	r3, [pc, #96]	@ (8015184 <tcp_receive+0x270>)
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	b29a      	uxth	r2, r3
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801512a:	b29b      	uxth	r3, r3
 801512c:	1ad3      	subs	r3, r2, r3
 801512e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	2200      	movs	r2, #0
 8015134:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8015138:	4b12      	ldr	r3, [pc, #72]	@ (8015184 <tcp_receive+0x270>)
 801513a:	681a      	ldr	r2, [r3, #0]
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	7d1b      	ldrb	r3, [r3, #20]
 8015144:	2b03      	cmp	r3, #3
 8015146:	f240 8097 	bls.w	8015278 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015156:	429a      	cmp	r2, r3
 8015158:	d245      	bcs.n	80151e6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	8b5b      	ldrh	r3, [r3, #26]
 801515e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015162:	2b00      	cmp	r3, #0
 8015164:	d014      	beq.n	8015190 <tcp_receive+0x27c>
 8015166:	2301      	movs	r3, #1
 8015168:	e013      	b.n	8015192 <tcp_receive+0x27e>
 801516a:	bf00      	nop
 801516c:	0801f65c 	.word	0x0801f65c
 8015170:	0801f98c 	.word	0x0801f98c
 8015174:	0801f6a8 	.word	0x0801f6a8
 8015178:	0801f9a8 	.word	0x0801f9a8
 801517c:	2000c8f4 	.word	0x2000c8f4
 8015180:	2000c8e8 	.word	0x2000c8e8
 8015184:	2000c8ec 	.word	0x2000c8ec
 8015188:	2000c8d8 	.word	0x2000c8d8
 801518c:	2000c8f2 	.word	0x2000c8f2
 8015190:	2302      	movs	r3, #2
 8015192:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015196:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801519a:	b29a      	uxth	r2, r3
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80151a0:	fb12 f303 	smulbb	r3, r2, r3
 80151a4:	b29b      	uxth	r3, r3
 80151a6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80151a8:	4293      	cmp	r3, r2
 80151aa:	bf28      	it	cs
 80151ac:	4613      	movcs	r3, r2
 80151ae:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80151b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80151b8:	4413      	add	r3, r2
 80151ba:	b29a      	uxth	r2, r3
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80151c2:	429a      	cmp	r2, r3
 80151c4:	d309      	bcc.n	80151da <tcp_receive+0x2c6>
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80151cc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80151ce:	4413      	add	r3, r2
 80151d0:	b29a      	uxth	r2, r3
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80151d8:	e04e      	b.n	8015278 <tcp_receive+0x364>
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80151e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80151e4:	e048      	b.n	8015278 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80151ec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80151ee:	4413      	add	r3, r2
 80151f0:	b29a      	uxth	r2, r3
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80151f8:	429a      	cmp	r2, r3
 80151fa:	d309      	bcc.n	8015210 <tcp_receive+0x2fc>
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015202:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015204:	4413      	add	r3, r2
 8015206:	b29a      	uxth	r2, r3
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801520e:	e004      	b.n	801521a <tcp_receive+0x306>
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015216:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015226:	429a      	cmp	r2, r3
 8015228:	d326      	bcc.n	8015278 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015236:	1ad3      	subs	r3, r2, r3
 8015238:	b29a      	uxth	r2, r3
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801524a:	4413      	add	r3, r2
 801524c:	b29a      	uxth	r2, r3
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015254:	429a      	cmp	r2, r3
 8015256:	d30a      	bcc.n	801526e <tcp_receive+0x35a>
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015262:	4413      	add	r3, r2
 8015264:	b29a      	uxth	r2, r3
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801526c:	e004      	b.n	8015278 <tcp_receive+0x364>
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015274:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015280:	4a98      	ldr	r2, [pc, #608]	@ (80154e4 <tcp_receive+0x5d0>)
 8015282:	6878      	ldr	r0, [r7, #4]
 8015284:	f7ff fdca 	bl	8014e1c <tcp_free_acked_segments>
 8015288:	4602      	mov	r2, r0
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015296:	4a94      	ldr	r2, [pc, #592]	@ (80154e8 <tcp_receive+0x5d4>)
 8015298:	6878      	ldr	r0, [r7, #4]
 801529a:	f7ff fdbf 	bl	8014e1c <tcp_free_acked_segments>
 801529e:	4602      	mov	r2, r0
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d104      	bne.n	80152b6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80152b2:	861a      	strh	r2, [r3, #48]	@ 0x30
 80152b4:	e002      	b.n	80152bc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	2200      	movs	r2, #0
 80152ba:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	2200      	movs	r2, #0
 80152c0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d103      	bne.n	80152d2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	2200      	movs	r2, #0
 80152ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80152d8:	4b84      	ldr	r3, [pc, #528]	@ (80154ec <tcp_receive+0x5d8>)
 80152da:	881b      	ldrh	r3, [r3, #0]
 80152dc:	4413      	add	r3, r2
 80152de:	b29a      	uxth	r2, r3
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	8b5b      	ldrh	r3, [r3, #26]
 80152ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d035      	beq.n	801535e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d118      	bne.n	801532c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d00c      	beq.n	801531c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801530a:	68db      	ldr	r3, [r3, #12]
 801530c:	685b      	ldr	r3, [r3, #4]
 801530e:	4618      	mov	r0, r3
 8015310:	f7fa ff0a 	bl	8010128 <lwip_htonl>
 8015314:	4603      	mov	r3, r0
 8015316:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015318:	2b00      	cmp	r3, #0
 801531a:	dc20      	bgt.n	801535e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	8b5b      	ldrh	r3, [r3, #26]
 8015320:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015324:	b29a      	uxth	r2, r3
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801532a:	e018      	b.n	801535e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015334:	68db      	ldr	r3, [r3, #12]
 8015336:	685b      	ldr	r3, [r3, #4]
 8015338:	4618      	mov	r0, r3
 801533a:	f7fa fef5 	bl	8010128 <lwip_htonl>
 801533e:	4603      	mov	r3, r0
 8015340:	1ae3      	subs	r3, r4, r3
 8015342:	2b00      	cmp	r3, #0
 8015344:	dc0b      	bgt.n	801535e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	8b5b      	ldrh	r3, [r3, #26]
 801534a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801534e:	b29a      	uxth	r2, r3
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015354:	e003      	b.n	801535e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015356:	6878      	ldr	r0, [r7, #4]
 8015358:	f002 fbc8 	bl	8017aec <tcp_send_empty_ack>
 801535c:	e000      	b.n	8015360 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801535e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015364:	2b00      	cmp	r3, #0
 8015366:	d05b      	beq.n	8015420 <tcp_receive+0x50c>
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801536c:	4b60      	ldr	r3, [pc, #384]	@ (80154f0 <tcp_receive+0x5dc>)
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	1ad3      	subs	r3, r2, r3
 8015372:	2b00      	cmp	r3, #0
 8015374:	da54      	bge.n	8015420 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015376:	4b5f      	ldr	r3, [pc, #380]	@ (80154f4 <tcp_receive+0x5e0>)
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	b29a      	uxth	r2, r3
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015380:	b29b      	uxth	r3, r3
 8015382:	1ad3      	subs	r3, r2, r3
 8015384:	b29b      	uxth	r3, r3
 8015386:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801538a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015394:	10db      	asrs	r3, r3, #3
 8015396:	b21b      	sxth	r3, r3
 8015398:	b29b      	uxth	r3, r3
 801539a:	1ad3      	subs	r3, r2, r3
 801539c:	b29b      	uxth	r3, r3
 801539e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80153a8:	b29a      	uxth	r2, r3
 80153aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80153ae:	4413      	add	r3, r2
 80153b0:	b29b      	uxth	r3, r3
 80153b2:	b21a      	sxth	r2, r3
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80153b8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80153bc:	2b00      	cmp	r3, #0
 80153be:	da05      	bge.n	80153cc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80153c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80153c4:	425b      	negs	r3, r3
 80153c6:	b29b      	uxth	r3, r3
 80153c8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80153cc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80153d6:	109b      	asrs	r3, r3, #2
 80153d8:	b21b      	sxth	r3, r3
 80153da:	b29b      	uxth	r3, r3
 80153dc:	1ad3      	subs	r3, r2, r3
 80153de:	b29b      	uxth	r3, r3
 80153e0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80153ea:	b29a      	uxth	r2, r3
 80153ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80153f0:	4413      	add	r3, r2
 80153f2:	b29b      	uxth	r3, r3
 80153f4:	b21a      	sxth	r2, r3
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015400:	10db      	asrs	r3, r3, #3
 8015402:	b21b      	sxth	r3, r3
 8015404:	b29a      	uxth	r2, r3
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801540c:	b29b      	uxth	r3, r3
 801540e:	4413      	add	r3, r2
 8015410:	b29b      	uxth	r3, r3
 8015412:	b21a      	sxth	r2, r3
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	2200      	movs	r2, #0
 801541e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015420:	4b35      	ldr	r3, [pc, #212]	@ (80154f8 <tcp_receive+0x5e4>)
 8015422:	881b      	ldrh	r3, [r3, #0]
 8015424:	2b00      	cmp	r3, #0
 8015426:	f000 84df 	beq.w	8015de8 <tcp_receive+0xed4>
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	7d1b      	ldrb	r3, [r3, #20]
 801542e:	2b06      	cmp	r3, #6
 8015430:	f200 84da 	bhi.w	8015de8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015438:	4b30      	ldr	r3, [pc, #192]	@ (80154fc <tcp_receive+0x5e8>)
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	1ad3      	subs	r3, r2, r3
 801543e:	3b01      	subs	r3, #1
 8015440:	2b00      	cmp	r3, #0
 8015442:	f2c0 808f 	blt.w	8015564 <tcp_receive+0x650>
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801544a:	4b2b      	ldr	r3, [pc, #172]	@ (80154f8 <tcp_receive+0x5e4>)
 801544c:	881b      	ldrh	r3, [r3, #0]
 801544e:	4619      	mov	r1, r3
 8015450:	4b2a      	ldr	r3, [pc, #168]	@ (80154fc <tcp_receive+0x5e8>)
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	440b      	add	r3, r1
 8015456:	1ad3      	subs	r3, r2, r3
 8015458:	3301      	adds	r3, #1
 801545a:	2b00      	cmp	r3, #0
 801545c:	f300 8082 	bgt.w	8015564 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015460:	4b27      	ldr	r3, [pc, #156]	@ (8015500 <tcp_receive+0x5ec>)
 8015462:	685b      	ldr	r3, [r3, #4]
 8015464:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801546a:	4b24      	ldr	r3, [pc, #144]	@ (80154fc <tcp_receive+0x5e8>)
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	1ad3      	subs	r3, r2, r3
 8015470:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015472:	4b23      	ldr	r3, [pc, #140]	@ (8015500 <tcp_receive+0x5ec>)
 8015474:	685b      	ldr	r3, [r3, #4]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d106      	bne.n	8015488 <tcp_receive+0x574>
 801547a:	4b22      	ldr	r3, [pc, #136]	@ (8015504 <tcp_receive+0x5f0>)
 801547c:	f240 5294 	movw	r2, #1428	@ 0x594
 8015480:	4921      	ldr	r1, [pc, #132]	@ (8015508 <tcp_receive+0x5f4>)
 8015482:	4822      	ldr	r0, [pc, #136]	@ (801550c <tcp_receive+0x5f8>)
 8015484:	f006 fa2a 	bl	801b8dc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801548a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801548e:	4293      	cmp	r3, r2
 8015490:	d906      	bls.n	80154a0 <tcp_receive+0x58c>
 8015492:	4b1c      	ldr	r3, [pc, #112]	@ (8015504 <tcp_receive+0x5f0>)
 8015494:	f240 5295 	movw	r2, #1429	@ 0x595
 8015498:	491d      	ldr	r1, [pc, #116]	@ (8015510 <tcp_receive+0x5fc>)
 801549a:	481c      	ldr	r0, [pc, #112]	@ (801550c <tcp_receive+0x5f8>)
 801549c:	f006 fa1e 	bl	801b8dc <iprintf>
      off = (u16_t)off32;
 80154a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154a2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80154a6:	4b16      	ldr	r3, [pc, #88]	@ (8015500 <tcp_receive+0x5ec>)
 80154a8:	685b      	ldr	r3, [r3, #4]
 80154aa:	891b      	ldrh	r3, [r3, #8]
 80154ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80154b0:	429a      	cmp	r2, r3
 80154b2:	d906      	bls.n	80154c2 <tcp_receive+0x5ae>
 80154b4:	4b13      	ldr	r3, [pc, #76]	@ (8015504 <tcp_receive+0x5f0>)
 80154b6:	f240 5297 	movw	r2, #1431	@ 0x597
 80154ba:	4916      	ldr	r1, [pc, #88]	@ (8015514 <tcp_receive+0x600>)
 80154bc:	4813      	ldr	r0, [pc, #76]	@ (801550c <tcp_receive+0x5f8>)
 80154be:	f006 fa0d 	bl	801b8dc <iprintf>
      inseg.len -= off;
 80154c2:	4b0f      	ldr	r3, [pc, #60]	@ (8015500 <tcp_receive+0x5ec>)
 80154c4:	891a      	ldrh	r2, [r3, #8]
 80154c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80154ca:	1ad3      	subs	r3, r2, r3
 80154cc:	b29a      	uxth	r2, r3
 80154ce:	4b0c      	ldr	r3, [pc, #48]	@ (8015500 <tcp_receive+0x5ec>)
 80154d0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80154d2:	4b0b      	ldr	r3, [pc, #44]	@ (8015500 <tcp_receive+0x5ec>)
 80154d4:	685b      	ldr	r3, [r3, #4]
 80154d6:	891a      	ldrh	r2, [r3, #8]
 80154d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80154dc:	1ad3      	subs	r3, r2, r3
 80154de:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80154e0:	e02a      	b.n	8015538 <tcp_receive+0x624>
 80154e2:	bf00      	nop
 80154e4:	0801f9c4 	.word	0x0801f9c4
 80154e8:	0801f9cc 	.word	0x0801f9cc
 80154ec:	2000c8f0 	.word	0x2000c8f0
 80154f0:	2000c8ec 	.word	0x2000c8ec
 80154f4:	2000c8b0 	.word	0x2000c8b0
 80154f8:	2000c8f2 	.word	0x2000c8f2
 80154fc:	2000c8e8 	.word	0x2000c8e8
 8015500:	2000c8c8 	.word	0x2000c8c8
 8015504:	0801f65c 	.word	0x0801f65c
 8015508:	0801f9d4 	.word	0x0801f9d4
 801550c:	0801f6a8 	.word	0x0801f6a8
 8015510:	0801f9e4 	.word	0x0801f9e4
 8015514:	0801f9f4 	.word	0x0801f9f4
        off -= p->len;
 8015518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801551a:	895b      	ldrh	r3, [r3, #10]
 801551c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015520:	1ad3      	subs	r3, r2, r3
 8015522:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015526:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015528:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801552a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801552c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801552e:	2200      	movs	r2, #0
 8015530:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015532:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8015538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801553a:	895b      	ldrh	r3, [r3, #10]
 801553c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015540:	429a      	cmp	r2, r3
 8015542:	d8e9      	bhi.n	8015518 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015544:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015548:	4619      	mov	r1, r3
 801554a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801554c:	f7fc f910 	bl	8011770 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015554:	4a90      	ldr	r2, [pc, #576]	@ (8015798 <tcp_receive+0x884>)
 8015556:	6013      	str	r3, [r2, #0]
 8015558:	4b90      	ldr	r3, [pc, #576]	@ (801579c <tcp_receive+0x888>)
 801555a:	68db      	ldr	r3, [r3, #12]
 801555c:	4a8e      	ldr	r2, [pc, #568]	@ (8015798 <tcp_receive+0x884>)
 801555e:	6812      	ldr	r2, [r2, #0]
 8015560:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015562:	e00d      	b.n	8015580 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015564:	4b8c      	ldr	r3, [pc, #560]	@ (8015798 <tcp_receive+0x884>)
 8015566:	681a      	ldr	r2, [r3, #0]
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801556c:	1ad3      	subs	r3, r2, r3
 801556e:	2b00      	cmp	r3, #0
 8015570:	da06      	bge.n	8015580 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	8b5b      	ldrh	r3, [r3, #26]
 8015576:	f043 0302 	orr.w	r3, r3, #2
 801557a:	b29a      	uxth	r2, r3
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015580:	4b85      	ldr	r3, [pc, #532]	@ (8015798 <tcp_receive+0x884>)
 8015582:	681a      	ldr	r2, [r3, #0]
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015588:	1ad3      	subs	r3, r2, r3
 801558a:	2b00      	cmp	r3, #0
 801558c:	f2c0 8427 	blt.w	8015dde <tcp_receive+0xeca>
 8015590:	4b81      	ldr	r3, [pc, #516]	@ (8015798 <tcp_receive+0x884>)
 8015592:	681a      	ldr	r2, [r3, #0]
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015598:	6879      	ldr	r1, [r7, #4]
 801559a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801559c:	440b      	add	r3, r1
 801559e:	1ad3      	subs	r3, r2, r3
 80155a0:	3301      	adds	r3, #1
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	f300 841b 	bgt.w	8015dde <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80155ac:	4b7a      	ldr	r3, [pc, #488]	@ (8015798 <tcp_receive+0x884>)
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	429a      	cmp	r2, r3
 80155b2:	f040 8298 	bne.w	8015ae6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80155b6:	4b79      	ldr	r3, [pc, #484]	@ (801579c <tcp_receive+0x888>)
 80155b8:	891c      	ldrh	r4, [r3, #8]
 80155ba:	4b78      	ldr	r3, [pc, #480]	@ (801579c <tcp_receive+0x888>)
 80155bc:	68db      	ldr	r3, [r3, #12]
 80155be:	899b      	ldrh	r3, [r3, #12]
 80155c0:	b29b      	uxth	r3, r3
 80155c2:	4618      	mov	r0, r3
 80155c4:	f7fa fd9a 	bl	80100fc <lwip_htons>
 80155c8:	4603      	mov	r3, r0
 80155ca:	b2db      	uxtb	r3, r3
 80155cc:	f003 0303 	and.w	r3, r3, #3
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d001      	beq.n	80155d8 <tcp_receive+0x6c4>
 80155d4:	2301      	movs	r3, #1
 80155d6:	e000      	b.n	80155da <tcp_receive+0x6c6>
 80155d8:	2300      	movs	r3, #0
 80155da:	4423      	add	r3, r4
 80155dc:	b29a      	uxth	r2, r3
 80155de:	4b70      	ldr	r3, [pc, #448]	@ (80157a0 <tcp_receive+0x88c>)
 80155e0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80155e6:	4b6e      	ldr	r3, [pc, #440]	@ (80157a0 <tcp_receive+0x88c>)
 80155e8:	881b      	ldrh	r3, [r3, #0]
 80155ea:	429a      	cmp	r2, r3
 80155ec:	d274      	bcs.n	80156d8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80155ee:	4b6b      	ldr	r3, [pc, #428]	@ (801579c <tcp_receive+0x888>)
 80155f0:	68db      	ldr	r3, [r3, #12]
 80155f2:	899b      	ldrh	r3, [r3, #12]
 80155f4:	b29b      	uxth	r3, r3
 80155f6:	4618      	mov	r0, r3
 80155f8:	f7fa fd80 	bl	80100fc <lwip_htons>
 80155fc:	4603      	mov	r3, r0
 80155fe:	b2db      	uxtb	r3, r3
 8015600:	f003 0301 	and.w	r3, r3, #1
 8015604:	2b00      	cmp	r3, #0
 8015606:	d01e      	beq.n	8015646 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015608:	4b64      	ldr	r3, [pc, #400]	@ (801579c <tcp_receive+0x888>)
 801560a:	68db      	ldr	r3, [r3, #12]
 801560c:	899b      	ldrh	r3, [r3, #12]
 801560e:	b29b      	uxth	r3, r3
 8015610:	b21b      	sxth	r3, r3
 8015612:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015616:	b21c      	sxth	r4, r3
 8015618:	4b60      	ldr	r3, [pc, #384]	@ (801579c <tcp_receive+0x888>)
 801561a:	68db      	ldr	r3, [r3, #12]
 801561c:	899b      	ldrh	r3, [r3, #12]
 801561e:	b29b      	uxth	r3, r3
 8015620:	4618      	mov	r0, r3
 8015622:	f7fa fd6b 	bl	80100fc <lwip_htons>
 8015626:	4603      	mov	r3, r0
 8015628:	b2db      	uxtb	r3, r3
 801562a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801562e:	b29b      	uxth	r3, r3
 8015630:	4618      	mov	r0, r3
 8015632:	f7fa fd63 	bl	80100fc <lwip_htons>
 8015636:	4603      	mov	r3, r0
 8015638:	b21b      	sxth	r3, r3
 801563a:	4323      	orrs	r3, r4
 801563c:	b21a      	sxth	r2, r3
 801563e:	4b57      	ldr	r3, [pc, #348]	@ (801579c <tcp_receive+0x888>)
 8015640:	68db      	ldr	r3, [r3, #12]
 8015642:	b292      	uxth	r2, r2
 8015644:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801564a:	4b54      	ldr	r3, [pc, #336]	@ (801579c <tcp_receive+0x888>)
 801564c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801564e:	4b53      	ldr	r3, [pc, #332]	@ (801579c <tcp_receive+0x888>)
 8015650:	68db      	ldr	r3, [r3, #12]
 8015652:	899b      	ldrh	r3, [r3, #12]
 8015654:	b29b      	uxth	r3, r3
 8015656:	4618      	mov	r0, r3
 8015658:	f7fa fd50 	bl	80100fc <lwip_htons>
 801565c:	4603      	mov	r3, r0
 801565e:	b2db      	uxtb	r3, r3
 8015660:	f003 0302 	and.w	r3, r3, #2
 8015664:	2b00      	cmp	r3, #0
 8015666:	d005      	beq.n	8015674 <tcp_receive+0x760>
            inseg.len -= 1;
 8015668:	4b4c      	ldr	r3, [pc, #304]	@ (801579c <tcp_receive+0x888>)
 801566a:	891b      	ldrh	r3, [r3, #8]
 801566c:	3b01      	subs	r3, #1
 801566e:	b29a      	uxth	r2, r3
 8015670:	4b4a      	ldr	r3, [pc, #296]	@ (801579c <tcp_receive+0x888>)
 8015672:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015674:	4b49      	ldr	r3, [pc, #292]	@ (801579c <tcp_receive+0x888>)
 8015676:	685b      	ldr	r3, [r3, #4]
 8015678:	4a48      	ldr	r2, [pc, #288]	@ (801579c <tcp_receive+0x888>)
 801567a:	8912      	ldrh	r2, [r2, #8]
 801567c:	4611      	mov	r1, r2
 801567e:	4618      	mov	r0, r3
 8015680:	f7fb ff76 	bl	8011570 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015684:	4b45      	ldr	r3, [pc, #276]	@ (801579c <tcp_receive+0x888>)
 8015686:	891c      	ldrh	r4, [r3, #8]
 8015688:	4b44      	ldr	r3, [pc, #272]	@ (801579c <tcp_receive+0x888>)
 801568a:	68db      	ldr	r3, [r3, #12]
 801568c:	899b      	ldrh	r3, [r3, #12]
 801568e:	b29b      	uxth	r3, r3
 8015690:	4618      	mov	r0, r3
 8015692:	f7fa fd33 	bl	80100fc <lwip_htons>
 8015696:	4603      	mov	r3, r0
 8015698:	b2db      	uxtb	r3, r3
 801569a:	f003 0303 	and.w	r3, r3, #3
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d001      	beq.n	80156a6 <tcp_receive+0x792>
 80156a2:	2301      	movs	r3, #1
 80156a4:	e000      	b.n	80156a8 <tcp_receive+0x794>
 80156a6:	2300      	movs	r3, #0
 80156a8:	4423      	add	r3, r4
 80156aa:	b29a      	uxth	r2, r3
 80156ac:	4b3c      	ldr	r3, [pc, #240]	@ (80157a0 <tcp_receive+0x88c>)
 80156ae:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80156b0:	4b3b      	ldr	r3, [pc, #236]	@ (80157a0 <tcp_receive+0x88c>)
 80156b2:	881b      	ldrh	r3, [r3, #0]
 80156b4:	461a      	mov	r2, r3
 80156b6:	4b38      	ldr	r3, [pc, #224]	@ (8015798 <tcp_receive+0x884>)
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	441a      	add	r2, r3
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80156c0:	6879      	ldr	r1, [r7, #4]
 80156c2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80156c4:	440b      	add	r3, r1
 80156c6:	429a      	cmp	r2, r3
 80156c8:	d006      	beq.n	80156d8 <tcp_receive+0x7c4>
 80156ca:	4b36      	ldr	r3, [pc, #216]	@ (80157a4 <tcp_receive+0x890>)
 80156cc:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80156d0:	4935      	ldr	r1, [pc, #212]	@ (80157a8 <tcp_receive+0x894>)
 80156d2:	4836      	ldr	r0, [pc, #216]	@ (80157ac <tcp_receive+0x898>)
 80156d4:	f006 f902 	bl	801b8dc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80156dc:	2b00      	cmp	r3, #0
 80156de:	f000 80e6 	beq.w	80158ae <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80156e2:	4b2e      	ldr	r3, [pc, #184]	@ (801579c <tcp_receive+0x888>)
 80156e4:	68db      	ldr	r3, [r3, #12]
 80156e6:	899b      	ldrh	r3, [r3, #12]
 80156e8:	b29b      	uxth	r3, r3
 80156ea:	4618      	mov	r0, r3
 80156ec:	f7fa fd06 	bl	80100fc <lwip_htons>
 80156f0:	4603      	mov	r3, r0
 80156f2:	b2db      	uxtb	r3, r3
 80156f4:	f003 0301 	and.w	r3, r3, #1
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d010      	beq.n	801571e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80156fc:	e00a      	b.n	8015714 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015702:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015708:	681a      	ldr	r2, [r3, #0]
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801570e:	68f8      	ldr	r0, [r7, #12]
 8015710:	f7fd fcef 	bl	80130f2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015718:	2b00      	cmp	r3, #0
 801571a:	d1f0      	bne.n	80156fe <tcp_receive+0x7ea>
 801571c:	e0c7      	b.n	80158ae <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015722:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015724:	e051      	b.n	80157ca <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015728:	68db      	ldr	r3, [r3, #12]
 801572a:	899b      	ldrh	r3, [r3, #12]
 801572c:	b29b      	uxth	r3, r3
 801572e:	4618      	mov	r0, r3
 8015730:	f7fa fce4 	bl	80100fc <lwip_htons>
 8015734:	4603      	mov	r3, r0
 8015736:	b2db      	uxtb	r3, r3
 8015738:	f003 0301 	and.w	r3, r3, #1
 801573c:	2b00      	cmp	r3, #0
 801573e:	d03c      	beq.n	80157ba <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015740:	4b16      	ldr	r3, [pc, #88]	@ (801579c <tcp_receive+0x888>)
 8015742:	68db      	ldr	r3, [r3, #12]
 8015744:	899b      	ldrh	r3, [r3, #12]
 8015746:	b29b      	uxth	r3, r3
 8015748:	4618      	mov	r0, r3
 801574a:	f7fa fcd7 	bl	80100fc <lwip_htons>
 801574e:	4603      	mov	r3, r0
 8015750:	b2db      	uxtb	r3, r3
 8015752:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015756:	2b00      	cmp	r3, #0
 8015758:	d12f      	bne.n	80157ba <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801575a:	4b10      	ldr	r3, [pc, #64]	@ (801579c <tcp_receive+0x888>)
 801575c:	68db      	ldr	r3, [r3, #12]
 801575e:	899b      	ldrh	r3, [r3, #12]
 8015760:	b29c      	uxth	r4, r3
 8015762:	2001      	movs	r0, #1
 8015764:	f7fa fcca 	bl	80100fc <lwip_htons>
 8015768:	4603      	mov	r3, r0
 801576a:	461a      	mov	r2, r3
 801576c:	4b0b      	ldr	r3, [pc, #44]	@ (801579c <tcp_receive+0x888>)
 801576e:	68db      	ldr	r3, [r3, #12]
 8015770:	4322      	orrs	r2, r4
 8015772:	b292      	uxth	r2, r2
 8015774:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015776:	4b09      	ldr	r3, [pc, #36]	@ (801579c <tcp_receive+0x888>)
 8015778:	891c      	ldrh	r4, [r3, #8]
 801577a:	4b08      	ldr	r3, [pc, #32]	@ (801579c <tcp_receive+0x888>)
 801577c:	68db      	ldr	r3, [r3, #12]
 801577e:	899b      	ldrh	r3, [r3, #12]
 8015780:	b29b      	uxth	r3, r3
 8015782:	4618      	mov	r0, r3
 8015784:	f7fa fcba 	bl	80100fc <lwip_htons>
 8015788:	4603      	mov	r3, r0
 801578a:	b2db      	uxtb	r3, r3
 801578c:	f003 0303 	and.w	r3, r3, #3
 8015790:	2b00      	cmp	r3, #0
 8015792:	d00d      	beq.n	80157b0 <tcp_receive+0x89c>
 8015794:	2301      	movs	r3, #1
 8015796:	e00c      	b.n	80157b2 <tcp_receive+0x89e>
 8015798:	2000c8e8 	.word	0x2000c8e8
 801579c:	2000c8c8 	.word	0x2000c8c8
 80157a0:	2000c8f2 	.word	0x2000c8f2
 80157a4:	0801f65c 	.word	0x0801f65c
 80157a8:	0801fa04 	.word	0x0801fa04
 80157ac:	0801f6a8 	.word	0x0801f6a8
 80157b0:	2300      	movs	r3, #0
 80157b2:	4423      	add	r3, r4
 80157b4:	b29a      	uxth	r2, r3
 80157b6:	4b98      	ldr	r3, [pc, #608]	@ (8015a18 <tcp_receive+0xb04>)
 80157b8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80157ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80157bc:	613b      	str	r3, [r7, #16]
              next = next->next;
 80157be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80157c4:	6938      	ldr	r0, [r7, #16]
 80157c6:	f7fd fc94 	bl	80130f2 <tcp_seg_free>
            while (next &&
 80157ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d00e      	beq.n	80157ee <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80157d0:	4b91      	ldr	r3, [pc, #580]	@ (8015a18 <tcp_receive+0xb04>)
 80157d2:	881b      	ldrh	r3, [r3, #0]
 80157d4:	461a      	mov	r2, r3
 80157d6:	4b91      	ldr	r3, [pc, #580]	@ (8015a1c <tcp_receive+0xb08>)
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	441a      	add	r2, r3
 80157dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80157de:	68db      	ldr	r3, [r3, #12]
 80157e0:	685b      	ldr	r3, [r3, #4]
 80157e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80157e4:	8909      	ldrh	r1, [r1, #8]
 80157e6:	440b      	add	r3, r1
 80157e8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	da9b      	bge.n	8015726 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80157ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d059      	beq.n	80158a8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80157f4:	4b88      	ldr	r3, [pc, #544]	@ (8015a18 <tcp_receive+0xb04>)
 80157f6:	881b      	ldrh	r3, [r3, #0]
 80157f8:	461a      	mov	r2, r3
 80157fa:	4b88      	ldr	r3, [pc, #544]	@ (8015a1c <tcp_receive+0xb08>)
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	441a      	add	r2, r3
 8015800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015802:	68db      	ldr	r3, [r3, #12]
 8015804:	685b      	ldr	r3, [r3, #4]
 8015806:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015808:	2b00      	cmp	r3, #0
 801580a:	dd4d      	ble.n	80158a8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801580c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801580e:	68db      	ldr	r3, [r3, #12]
 8015810:	685b      	ldr	r3, [r3, #4]
 8015812:	b29a      	uxth	r2, r3
 8015814:	4b81      	ldr	r3, [pc, #516]	@ (8015a1c <tcp_receive+0xb08>)
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	b29b      	uxth	r3, r3
 801581a:	1ad3      	subs	r3, r2, r3
 801581c:	b29a      	uxth	r2, r3
 801581e:	4b80      	ldr	r3, [pc, #512]	@ (8015a20 <tcp_receive+0xb0c>)
 8015820:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015822:	4b7f      	ldr	r3, [pc, #508]	@ (8015a20 <tcp_receive+0xb0c>)
 8015824:	68db      	ldr	r3, [r3, #12]
 8015826:	899b      	ldrh	r3, [r3, #12]
 8015828:	b29b      	uxth	r3, r3
 801582a:	4618      	mov	r0, r3
 801582c:	f7fa fc66 	bl	80100fc <lwip_htons>
 8015830:	4603      	mov	r3, r0
 8015832:	b2db      	uxtb	r3, r3
 8015834:	f003 0302 	and.w	r3, r3, #2
 8015838:	2b00      	cmp	r3, #0
 801583a:	d005      	beq.n	8015848 <tcp_receive+0x934>
                inseg.len -= 1;
 801583c:	4b78      	ldr	r3, [pc, #480]	@ (8015a20 <tcp_receive+0xb0c>)
 801583e:	891b      	ldrh	r3, [r3, #8]
 8015840:	3b01      	subs	r3, #1
 8015842:	b29a      	uxth	r2, r3
 8015844:	4b76      	ldr	r3, [pc, #472]	@ (8015a20 <tcp_receive+0xb0c>)
 8015846:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015848:	4b75      	ldr	r3, [pc, #468]	@ (8015a20 <tcp_receive+0xb0c>)
 801584a:	685b      	ldr	r3, [r3, #4]
 801584c:	4a74      	ldr	r2, [pc, #464]	@ (8015a20 <tcp_receive+0xb0c>)
 801584e:	8912      	ldrh	r2, [r2, #8]
 8015850:	4611      	mov	r1, r2
 8015852:	4618      	mov	r0, r3
 8015854:	f7fb fe8c 	bl	8011570 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015858:	4b71      	ldr	r3, [pc, #452]	@ (8015a20 <tcp_receive+0xb0c>)
 801585a:	891c      	ldrh	r4, [r3, #8]
 801585c:	4b70      	ldr	r3, [pc, #448]	@ (8015a20 <tcp_receive+0xb0c>)
 801585e:	68db      	ldr	r3, [r3, #12]
 8015860:	899b      	ldrh	r3, [r3, #12]
 8015862:	b29b      	uxth	r3, r3
 8015864:	4618      	mov	r0, r3
 8015866:	f7fa fc49 	bl	80100fc <lwip_htons>
 801586a:	4603      	mov	r3, r0
 801586c:	b2db      	uxtb	r3, r3
 801586e:	f003 0303 	and.w	r3, r3, #3
 8015872:	2b00      	cmp	r3, #0
 8015874:	d001      	beq.n	801587a <tcp_receive+0x966>
 8015876:	2301      	movs	r3, #1
 8015878:	e000      	b.n	801587c <tcp_receive+0x968>
 801587a:	2300      	movs	r3, #0
 801587c:	4423      	add	r3, r4
 801587e:	b29a      	uxth	r2, r3
 8015880:	4b65      	ldr	r3, [pc, #404]	@ (8015a18 <tcp_receive+0xb04>)
 8015882:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015884:	4b64      	ldr	r3, [pc, #400]	@ (8015a18 <tcp_receive+0xb04>)
 8015886:	881b      	ldrh	r3, [r3, #0]
 8015888:	461a      	mov	r2, r3
 801588a:	4b64      	ldr	r3, [pc, #400]	@ (8015a1c <tcp_receive+0xb08>)
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	441a      	add	r2, r3
 8015890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015892:	68db      	ldr	r3, [r3, #12]
 8015894:	685b      	ldr	r3, [r3, #4]
 8015896:	429a      	cmp	r2, r3
 8015898:	d006      	beq.n	80158a8 <tcp_receive+0x994>
 801589a:	4b62      	ldr	r3, [pc, #392]	@ (8015a24 <tcp_receive+0xb10>)
 801589c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80158a0:	4961      	ldr	r1, [pc, #388]	@ (8015a28 <tcp_receive+0xb14>)
 80158a2:	4862      	ldr	r0, [pc, #392]	@ (8015a2c <tcp_receive+0xb18>)
 80158a4:	f006 f81a 	bl	801b8dc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80158ac:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80158ae:	4b5a      	ldr	r3, [pc, #360]	@ (8015a18 <tcp_receive+0xb04>)
 80158b0:	881b      	ldrh	r3, [r3, #0]
 80158b2:	461a      	mov	r2, r3
 80158b4:	4b59      	ldr	r3, [pc, #356]	@ (8015a1c <tcp_receive+0xb08>)
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	441a      	add	r2, r3
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80158c2:	4b55      	ldr	r3, [pc, #340]	@ (8015a18 <tcp_receive+0xb04>)
 80158c4:	881b      	ldrh	r3, [r3, #0]
 80158c6:	429a      	cmp	r2, r3
 80158c8:	d206      	bcs.n	80158d8 <tcp_receive+0x9c4>
 80158ca:	4b56      	ldr	r3, [pc, #344]	@ (8015a24 <tcp_receive+0xb10>)
 80158cc:	f240 6207 	movw	r2, #1543	@ 0x607
 80158d0:	4957      	ldr	r1, [pc, #348]	@ (8015a30 <tcp_receive+0xb1c>)
 80158d2:	4856      	ldr	r0, [pc, #344]	@ (8015a2c <tcp_receive+0xb18>)
 80158d4:	f006 f802 	bl	801b8dc <iprintf>
        pcb->rcv_wnd -= tcplen;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80158dc:	4b4e      	ldr	r3, [pc, #312]	@ (8015a18 <tcp_receive+0xb04>)
 80158de:	881b      	ldrh	r3, [r3, #0]
 80158e0:	1ad3      	subs	r3, r2, r3
 80158e2:	b29a      	uxth	r2, r3
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	f7fc fedb 	bl	80126a4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80158ee:	4b4c      	ldr	r3, [pc, #304]	@ (8015a20 <tcp_receive+0xb0c>)
 80158f0:	685b      	ldr	r3, [r3, #4]
 80158f2:	891b      	ldrh	r3, [r3, #8]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d006      	beq.n	8015906 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80158f8:	4b49      	ldr	r3, [pc, #292]	@ (8015a20 <tcp_receive+0xb0c>)
 80158fa:	685b      	ldr	r3, [r3, #4]
 80158fc:	4a4d      	ldr	r2, [pc, #308]	@ (8015a34 <tcp_receive+0xb20>)
 80158fe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015900:	4b47      	ldr	r3, [pc, #284]	@ (8015a20 <tcp_receive+0xb0c>)
 8015902:	2200      	movs	r2, #0
 8015904:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015906:	4b46      	ldr	r3, [pc, #280]	@ (8015a20 <tcp_receive+0xb0c>)
 8015908:	68db      	ldr	r3, [r3, #12]
 801590a:	899b      	ldrh	r3, [r3, #12]
 801590c:	b29b      	uxth	r3, r3
 801590e:	4618      	mov	r0, r3
 8015910:	f7fa fbf4 	bl	80100fc <lwip_htons>
 8015914:	4603      	mov	r3, r0
 8015916:	b2db      	uxtb	r3, r3
 8015918:	f003 0301 	and.w	r3, r3, #1
 801591c:	2b00      	cmp	r3, #0
 801591e:	f000 80b8 	beq.w	8015a92 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8015922:	4b45      	ldr	r3, [pc, #276]	@ (8015a38 <tcp_receive+0xb24>)
 8015924:	781b      	ldrb	r3, [r3, #0]
 8015926:	f043 0320 	orr.w	r3, r3, #32
 801592a:	b2da      	uxtb	r2, r3
 801592c:	4b42      	ldr	r3, [pc, #264]	@ (8015a38 <tcp_receive+0xb24>)
 801592e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015930:	e0af      	b.n	8015a92 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015936:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801593c:	68db      	ldr	r3, [r3, #12]
 801593e:	685b      	ldr	r3, [r3, #4]
 8015940:	4a36      	ldr	r2, [pc, #216]	@ (8015a1c <tcp_receive+0xb08>)
 8015942:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015944:	68bb      	ldr	r3, [r7, #8]
 8015946:	891b      	ldrh	r3, [r3, #8]
 8015948:	461c      	mov	r4, r3
 801594a:	68bb      	ldr	r3, [r7, #8]
 801594c:	68db      	ldr	r3, [r3, #12]
 801594e:	899b      	ldrh	r3, [r3, #12]
 8015950:	b29b      	uxth	r3, r3
 8015952:	4618      	mov	r0, r3
 8015954:	f7fa fbd2 	bl	80100fc <lwip_htons>
 8015958:	4603      	mov	r3, r0
 801595a:	b2db      	uxtb	r3, r3
 801595c:	f003 0303 	and.w	r3, r3, #3
 8015960:	2b00      	cmp	r3, #0
 8015962:	d001      	beq.n	8015968 <tcp_receive+0xa54>
 8015964:	2301      	movs	r3, #1
 8015966:	e000      	b.n	801596a <tcp_receive+0xa56>
 8015968:	2300      	movs	r3, #0
 801596a:	191a      	adds	r2, r3, r4
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015970:	441a      	add	r2, r3
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801597a:	461c      	mov	r4, r3
 801597c:	68bb      	ldr	r3, [r7, #8]
 801597e:	891b      	ldrh	r3, [r3, #8]
 8015980:	461d      	mov	r5, r3
 8015982:	68bb      	ldr	r3, [r7, #8]
 8015984:	68db      	ldr	r3, [r3, #12]
 8015986:	899b      	ldrh	r3, [r3, #12]
 8015988:	b29b      	uxth	r3, r3
 801598a:	4618      	mov	r0, r3
 801598c:	f7fa fbb6 	bl	80100fc <lwip_htons>
 8015990:	4603      	mov	r3, r0
 8015992:	b2db      	uxtb	r3, r3
 8015994:	f003 0303 	and.w	r3, r3, #3
 8015998:	2b00      	cmp	r3, #0
 801599a:	d001      	beq.n	80159a0 <tcp_receive+0xa8c>
 801599c:	2301      	movs	r3, #1
 801599e:	e000      	b.n	80159a2 <tcp_receive+0xa8e>
 80159a0:	2300      	movs	r3, #0
 80159a2:	442b      	add	r3, r5
 80159a4:	429c      	cmp	r4, r3
 80159a6:	d206      	bcs.n	80159b6 <tcp_receive+0xaa2>
 80159a8:	4b1e      	ldr	r3, [pc, #120]	@ (8015a24 <tcp_receive+0xb10>)
 80159aa:	f240 622b 	movw	r2, #1579	@ 0x62b
 80159ae:	4923      	ldr	r1, [pc, #140]	@ (8015a3c <tcp_receive+0xb28>)
 80159b0:	481e      	ldr	r0, [pc, #120]	@ (8015a2c <tcp_receive+0xb18>)
 80159b2:	f005 ff93 	bl	801b8dc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80159b6:	68bb      	ldr	r3, [r7, #8]
 80159b8:	891b      	ldrh	r3, [r3, #8]
 80159ba:	461c      	mov	r4, r3
 80159bc:	68bb      	ldr	r3, [r7, #8]
 80159be:	68db      	ldr	r3, [r3, #12]
 80159c0:	899b      	ldrh	r3, [r3, #12]
 80159c2:	b29b      	uxth	r3, r3
 80159c4:	4618      	mov	r0, r3
 80159c6:	f7fa fb99 	bl	80100fc <lwip_htons>
 80159ca:	4603      	mov	r3, r0
 80159cc:	b2db      	uxtb	r3, r3
 80159ce:	f003 0303 	and.w	r3, r3, #3
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d001      	beq.n	80159da <tcp_receive+0xac6>
 80159d6:	2301      	movs	r3, #1
 80159d8:	e000      	b.n	80159dc <tcp_receive+0xac8>
 80159da:	2300      	movs	r3, #0
 80159dc:	1919      	adds	r1, r3, r4
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80159e2:	b28b      	uxth	r3, r1
 80159e4:	1ad3      	subs	r3, r2, r3
 80159e6:	b29a      	uxth	r2, r3
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80159ec:	6878      	ldr	r0, [r7, #4]
 80159ee:	f7fc fe59 	bl	80126a4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80159f2:	68bb      	ldr	r3, [r7, #8]
 80159f4:	685b      	ldr	r3, [r3, #4]
 80159f6:	891b      	ldrh	r3, [r3, #8]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d028      	beq.n	8015a4e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80159fc:	4b0d      	ldr	r3, [pc, #52]	@ (8015a34 <tcp_receive+0xb20>)
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d01d      	beq.n	8015a40 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8015a04:	4b0b      	ldr	r3, [pc, #44]	@ (8015a34 <tcp_receive+0xb20>)
 8015a06:	681a      	ldr	r2, [r3, #0]
 8015a08:	68bb      	ldr	r3, [r7, #8]
 8015a0a:	685b      	ldr	r3, [r3, #4]
 8015a0c:	4619      	mov	r1, r3
 8015a0e:	4610      	mov	r0, r2
 8015a10:	f7fc f802 	bl	8011a18 <pbuf_cat>
 8015a14:	e018      	b.n	8015a48 <tcp_receive+0xb34>
 8015a16:	bf00      	nop
 8015a18:	2000c8f2 	.word	0x2000c8f2
 8015a1c:	2000c8e8 	.word	0x2000c8e8
 8015a20:	2000c8c8 	.word	0x2000c8c8
 8015a24:	0801f65c 	.word	0x0801f65c
 8015a28:	0801fa3c 	.word	0x0801fa3c
 8015a2c:	0801f6a8 	.word	0x0801f6a8
 8015a30:	0801fa78 	.word	0x0801fa78
 8015a34:	2000c8f8 	.word	0x2000c8f8
 8015a38:	2000c8f5 	.word	0x2000c8f5
 8015a3c:	0801fa98 	.word	0x0801fa98
            } else {
              recv_data = cseg->p;
 8015a40:	68bb      	ldr	r3, [r7, #8]
 8015a42:	685b      	ldr	r3, [r3, #4]
 8015a44:	4a70      	ldr	r2, [pc, #448]	@ (8015c08 <tcp_receive+0xcf4>)
 8015a46:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015a48:	68bb      	ldr	r3, [r7, #8]
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015a4e:	68bb      	ldr	r3, [r7, #8]
 8015a50:	68db      	ldr	r3, [r3, #12]
 8015a52:	899b      	ldrh	r3, [r3, #12]
 8015a54:	b29b      	uxth	r3, r3
 8015a56:	4618      	mov	r0, r3
 8015a58:	f7fa fb50 	bl	80100fc <lwip_htons>
 8015a5c:	4603      	mov	r3, r0
 8015a5e:	b2db      	uxtb	r3, r3
 8015a60:	f003 0301 	and.w	r3, r3, #1
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d00d      	beq.n	8015a84 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015a68:	4b68      	ldr	r3, [pc, #416]	@ (8015c0c <tcp_receive+0xcf8>)
 8015a6a:	781b      	ldrb	r3, [r3, #0]
 8015a6c:	f043 0320 	orr.w	r3, r3, #32
 8015a70:	b2da      	uxtb	r2, r3
 8015a72:	4b66      	ldr	r3, [pc, #408]	@ (8015c0c <tcp_receive+0xcf8>)
 8015a74:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	7d1b      	ldrb	r3, [r3, #20]
 8015a7a:	2b04      	cmp	r3, #4
 8015a7c:	d102      	bne.n	8015a84 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	2207      	movs	r2, #7
 8015a82:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015a84:	68bb      	ldr	r3, [r7, #8]
 8015a86:	681a      	ldr	r2, [r3, #0]
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8015a8c:	68b8      	ldr	r0, [r7, #8]
 8015a8e:	f7fd fb30 	bl	80130f2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d008      	beq.n	8015aac <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015a9e:	68db      	ldr	r3, [r3, #12]
 8015aa0:	685a      	ldr	r2, [r3, #4]
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8015aa6:	429a      	cmp	r2, r3
 8015aa8:	f43f af43 	beq.w	8015932 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	8b5b      	ldrh	r3, [r3, #26]
 8015ab0:	f003 0301 	and.w	r3, r3, #1
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d00e      	beq.n	8015ad6 <tcp_receive+0xbc2>
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	8b5b      	ldrh	r3, [r3, #26]
 8015abc:	f023 0301 	bic.w	r3, r3, #1
 8015ac0:	b29a      	uxth	r2, r3
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	835a      	strh	r2, [r3, #26]
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	8b5b      	ldrh	r3, [r3, #26]
 8015aca:	f043 0302 	orr.w	r3, r3, #2
 8015ace:	b29a      	uxth	r2, r3
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015ad4:	e187      	b.n	8015de6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	8b5b      	ldrh	r3, [r3, #26]
 8015ada:	f043 0301 	orr.w	r3, r3, #1
 8015ade:	b29a      	uxth	r2, r3
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015ae4:	e17f      	b.n	8015de6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d106      	bne.n	8015afc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8015aee:	4848      	ldr	r0, [pc, #288]	@ (8015c10 <tcp_receive+0xcfc>)
 8015af0:	f7fd fb36 	bl	8013160 <tcp_seg_copy>
 8015af4:	4602      	mov	r2, r0
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	675a      	str	r2, [r3, #116]	@ 0x74
 8015afa:	e16c      	b.n	8015dd6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015afc:	2300      	movs	r3, #0
 8015afe:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015b04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015b06:	e156      	b.n	8015db6 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8015b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b0a:	68db      	ldr	r3, [r3, #12]
 8015b0c:	685a      	ldr	r2, [r3, #4]
 8015b0e:	4b41      	ldr	r3, [pc, #260]	@ (8015c14 <tcp_receive+0xd00>)
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	429a      	cmp	r2, r3
 8015b14:	d11d      	bne.n	8015b52 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8015b16:	4b3e      	ldr	r3, [pc, #248]	@ (8015c10 <tcp_receive+0xcfc>)
 8015b18:	891a      	ldrh	r2, [r3, #8]
 8015b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b1c:	891b      	ldrh	r3, [r3, #8]
 8015b1e:	429a      	cmp	r2, r3
 8015b20:	f240 814e 	bls.w	8015dc0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015b24:	483a      	ldr	r0, [pc, #232]	@ (8015c10 <tcp_receive+0xcfc>)
 8015b26:	f7fd fb1b 	bl	8013160 <tcp_seg_copy>
 8015b2a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015b2c:	697b      	ldr	r3, [r7, #20]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	f000 8148 	beq.w	8015dc4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8015b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d003      	beq.n	8015b42 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8015b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b3c:	697a      	ldr	r2, [r7, #20]
 8015b3e:	601a      	str	r2, [r3, #0]
 8015b40:	e002      	b.n	8015b48 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	697a      	ldr	r2, [r7, #20]
 8015b46:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015b48:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015b4a:	6978      	ldr	r0, [r7, #20]
 8015b4c:	f7ff f8de 	bl	8014d0c <tcp_oos_insert_segment>
                }
                break;
 8015b50:	e138      	b.n	8015dc4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8015b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d117      	bne.n	8015b88 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8015b58:	4b2e      	ldr	r3, [pc, #184]	@ (8015c14 <tcp_receive+0xd00>)
 8015b5a:	681a      	ldr	r2, [r3, #0]
 8015b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b5e:	68db      	ldr	r3, [r3, #12]
 8015b60:	685b      	ldr	r3, [r3, #4]
 8015b62:	1ad3      	subs	r3, r2, r3
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	da57      	bge.n	8015c18 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015b68:	4829      	ldr	r0, [pc, #164]	@ (8015c10 <tcp_receive+0xcfc>)
 8015b6a:	f7fd faf9 	bl	8013160 <tcp_seg_copy>
 8015b6e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8015b70:	69bb      	ldr	r3, [r7, #24]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	f000 8128 	beq.w	8015dc8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	69ba      	ldr	r2, [r7, #24]
 8015b7c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8015b7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015b80:	69b8      	ldr	r0, [r7, #24]
 8015b82:	f7ff f8c3 	bl	8014d0c <tcp_oos_insert_segment>
                  }
                  break;
 8015b86:	e11f      	b.n	8015dc8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8015b88:	4b22      	ldr	r3, [pc, #136]	@ (8015c14 <tcp_receive+0xd00>)
 8015b8a:	681a      	ldr	r2, [r3, #0]
 8015b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b8e:	68db      	ldr	r3, [r3, #12]
 8015b90:	685b      	ldr	r3, [r3, #4]
 8015b92:	1ad3      	subs	r3, r2, r3
 8015b94:	3b01      	subs	r3, #1
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	db3e      	blt.n	8015c18 <tcp_receive+0xd04>
 8015b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8015c14 <tcp_receive+0xd00>)
 8015b9c:	681a      	ldr	r2, [r3, #0]
 8015b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ba0:	68db      	ldr	r3, [r3, #12]
 8015ba2:	685b      	ldr	r3, [r3, #4]
 8015ba4:	1ad3      	subs	r3, r2, r3
 8015ba6:	3301      	adds	r3, #1
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	dc35      	bgt.n	8015c18 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015bac:	4818      	ldr	r0, [pc, #96]	@ (8015c10 <tcp_receive+0xcfc>)
 8015bae:	f7fd fad7 	bl	8013160 <tcp_seg_copy>
 8015bb2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015bb4:	69fb      	ldr	r3, [r7, #28]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	f000 8108 	beq.w	8015dcc <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015bbe:	68db      	ldr	r3, [r3, #12]
 8015bc0:	685b      	ldr	r3, [r3, #4]
 8015bc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015bc4:	8912      	ldrh	r2, [r2, #8]
 8015bc6:	441a      	add	r2, r3
 8015bc8:	4b12      	ldr	r3, [pc, #72]	@ (8015c14 <tcp_receive+0xd00>)
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	1ad3      	subs	r3, r2, r3
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	dd12      	ble.n	8015bf8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015bd2:	4b10      	ldr	r3, [pc, #64]	@ (8015c14 <tcp_receive+0xd00>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	b29a      	uxth	r2, r3
 8015bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015bda:	68db      	ldr	r3, [r3, #12]
 8015bdc:	685b      	ldr	r3, [r3, #4]
 8015bde:	b29b      	uxth	r3, r3
 8015be0:	1ad3      	subs	r3, r2, r3
 8015be2:	b29a      	uxth	r2, r3
 8015be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015be6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015bea:	685a      	ldr	r2, [r3, #4]
 8015bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015bee:	891b      	ldrh	r3, [r3, #8]
 8015bf0:	4619      	mov	r1, r3
 8015bf2:	4610      	mov	r0, r2
 8015bf4:	f7fb fcbc 	bl	8011570 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015bfa:	69fa      	ldr	r2, [r7, #28]
 8015bfc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015bfe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015c00:	69f8      	ldr	r0, [r7, #28]
 8015c02:	f7ff f883 	bl	8014d0c <tcp_oos_insert_segment>
                  }
                  break;
 8015c06:	e0e1      	b.n	8015dcc <tcp_receive+0xeb8>
 8015c08:	2000c8f8 	.word	0x2000c8f8
 8015c0c:	2000c8f5 	.word	0x2000c8f5
 8015c10:	2000c8c8 	.word	0x2000c8c8
 8015c14:	2000c8e8 	.word	0x2000c8e8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c1a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	f040 80c5 	bne.w	8015db0 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015c26:	4b7f      	ldr	r3, [pc, #508]	@ (8015e24 <tcp_receive+0xf10>)
 8015c28:	681a      	ldr	r2, [r3, #0]
 8015c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c2c:	68db      	ldr	r3, [r3, #12]
 8015c2e:	685b      	ldr	r3, [r3, #4]
 8015c30:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	f340 80bc 	ble.w	8015db0 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c3a:	68db      	ldr	r3, [r3, #12]
 8015c3c:	899b      	ldrh	r3, [r3, #12]
 8015c3e:	b29b      	uxth	r3, r3
 8015c40:	4618      	mov	r0, r3
 8015c42:	f7fa fa5b 	bl	80100fc <lwip_htons>
 8015c46:	4603      	mov	r3, r0
 8015c48:	b2db      	uxtb	r3, r3
 8015c4a:	f003 0301 	and.w	r3, r3, #1
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	f040 80be 	bne.w	8015dd0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015c54:	4874      	ldr	r0, [pc, #464]	@ (8015e28 <tcp_receive+0xf14>)
 8015c56:	f7fd fa83 	bl	8013160 <tcp_seg_copy>
 8015c5a:	4602      	mov	r2, r0
 8015c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c5e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	f000 80b5 	beq.w	8015dd4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c6c:	68db      	ldr	r3, [r3, #12]
 8015c6e:	685b      	ldr	r3, [r3, #4]
 8015c70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015c72:	8912      	ldrh	r2, [r2, #8]
 8015c74:	441a      	add	r2, r3
 8015c76:	4b6b      	ldr	r3, [pc, #428]	@ (8015e24 <tcp_receive+0xf10>)
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	1ad3      	subs	r3, r2, r3
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	dd12      	ble.n	8015ca6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015c80:	4b68      	ldr	r3, [pc, #416]	@ (8015e24 <tcp_receive+0xf10>)
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	b29a      	uxth	r2, r3
 8015c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c88:	68db      	ldr	r3, [r3, #12]
 8015c8a:	685b      	ldr	r3, [r3, #4]
 8015c8c:	b29b      	uxth	r3, r3
 8015c8e:	1ad3      	subs	r3, r2, r3
 8015c90:	b29a      	uxth	r2, r3
 8015c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c94:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c98:	685a      	ldr	r2, [r3, #4]
 8015c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c9c:	891b      	ldrh	r3, [r3, #8]
 8015c9e:	4619      	mov	r1, r3
 8015ca0:	4610      	mov	r0, r2
 8015ca2:	f7fb fc65 	bl	8011570 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015ca6:	4b61      	ldr	r3, [pc, #388]	@ (8015e2c <tcp_receive+0xf18>)
 8015ca8:	881b      	ldrh	r3, [r3, #0]
 8015caa:	461a      	mov	r2, r3
 8015cac:	4b5d      	ldr	r3, [pc, #372]	@ (8015e24 <tcp_receive+0xf10>)
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	441a      	add	r2, r3
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015cb6:	6879      	ldr	r1, [r7, #4]
 8015cb8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015cba:	440b      	add	r3, r1
 8015cbc:	1ad3      	subs	r3, r2, r3
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	f340 8088 	ble.w	8015dd4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	68db      	ldr	r3, [r3, #12]
 8015cca:	899b      	ldrh	r3, [r3, #12]
 8015ccc:	b29b      	uxth	r3, r3
 8015cce:	4618      	mov	r0, r3
 8015cd0:	f7fa fa14 	bl	80100fc <lwip_htons>
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	b2db      	uxtb	r3, r3
 8015cd8:	f003 0301 	and.w	r3, r3, #1
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d021      	beq.n	8015d24 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	68db      	ldr	r3, [r3, #12]
 8015ce6:	899b      	ldrh	r3, [r3, #12]
 8015ce8:	b29b      	uxth	r3, r3
 8015cea:	b21b      	sxth	r3, r3
 8015cec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015cf0:	b21c      	sxth	r4, r3
 8015cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	68db      	ldr	r3, [r3, #12]
 8015cf8:	899b      	ldrh	r3, [r3, #12]
 8015cfa:	b29b      	uxth	r3, r3
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	f7fa f9fd 	bl	80100fc <lwip_htons>
 8015d02:	4603      	mov	r3, r0
 8015d04:	b2db      	uxtb	r3, r3
 8015d06:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8015d0a:	b29b      	uxth	r3, r3
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	f7fa f9f5 	bl	80100fc <lwip_htons>
 8015d12:	4603      	mov	r3, r0
 8015d14:	b21b      	sxth	r3, r3
 8015d16:	4323      	orrs	r3, r4
 8015d18:	b21a      	sxth	r2, r3
 8015d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	68db      	ldr	r3, [r3, #12]
 8015d20:	b292      	uxth	r2, r2
 8015d22:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d28:	b29a      	uxth	r2, r3
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015d2e:	4413      	add	r3, r2
 8015d30:	b299      	uxth	r1, r3
 8015d32:	4b3c      	ldr	r3, [pc, #240]	@ (8015e24 <tcp_receive+0xf10>)
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	b29a      	uxth	r2, r3
 8015d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	1a8a      	subs	r2, r1, r2
 8015d3e:	b292      	uxth	r2, r2
 8015d40:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	685a      	ldr	r2, [r3, #4]
 8015d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	891b      	ldrh	r3, [r3, #8]
 8015d4e:	4619      	mov	r1, r3
 8015d50:	4610      	mov	r0, r2
 8015d52:	f7fb fc0d 	bl	8011570 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	891c      	ldrh	r4, [r3, #8]
 8015d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	68db      	ldr	r3, [r3, #12]
 8015d62:	899b      	ldrh	r3, [r3, #12]
 8015d64:	b29b      	uxth	r3, r3
 8015d66:	4618      	mov	r0, r3
 8015d68:	f7fa f9c8 	bl	80100fc <lwip_htons>
 8015d6c:	4603      	mov	r3, r0
 8015d6e:	b2db      	uxtb	r3, r3
 8015d70:	f003 0303 	and.w	r3, r3, #3
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d001      	beq.n	8015d7c <tcp_receive+0xe68>
 8015d78:	2301      	movs	r3, #1
 8015d7a:	e000      	b.n	8015d7e <tcp_receive+0xe6a>
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	4423      	add	r3, r4
 8015d80:	b29a      	uxth	r2, r3
 8015d82:	4b2a      	ldr	r3, [pc, #168]	@ (8015e2c <tcp_receive+0xf18>)
 8015d84:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015d86:	4b29      	ldr	r3, [pc, #164]	@ (8015e2c <tcp_receive+0xf18>)
 8015d88:	881b      	ldrh	r3, [r3, #0]
 8015d8a:	461a      	mov	r2, r3
 8015d8c:	4b25      	ldr	r3, [pc, #148]	@ (8015e24 <tcp_receive+0xf10>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	441a      	add	r2, r3
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d96:	6879      	ldr	r1, [r7, #4]
 8015d98:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015d9a:	440b      	add	r3, r1
 8015d9c:	429a      	cmp	r2, r3
 8015d9e:	d019      	beq.n	8015dd4 <tcp_receive+0xec0>
 8015da0:	4b23      	ldr	r3, [pc, #140]	@ (8015e30 <tcp_receive+0xf1c>)
 8015da2:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8015da6:	4923      	ldr	r1, [pc, #140]	@ (8015e34 <tcp_receive+0xf20>)
 8015da8:	4823      	ldr	r0, [pc, #140]	@ (8015e38 <tcp_receive+0xf24>)
 8015daa:	f005 fd97 	bl	801b8dc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015dae:	e011      	b.n	8015dd4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	f47f aea5 	bne.w	8015b08 <tcp_receive+0xbf4>
 8015dbe:	e00a      	b.n	8015dd6 <tcp_receive+0xec2>
                break;
 8015dc0:	bf00      	nop
 8015dc2:	e008      	b.n	8015dd6 <tcp_receive+0xec2>
                break;
 8015dc4:	bf00      	nop
 8015dc6:	e006      	b.n	8015dd6 <tcp_receive+0xec2>
                  break;
 8015dc8:	bf00      	nop
 8015dca:	e004      	b.n	8015dd6 <tcp_receive+0xec2>
                  break;
 8015dcc:	bf00      	nop
 8015dce:	e002      	b.n	8015dd6 <tcp_receive+0xec2>
                  break;
 8015dd0:	bf00      	nop
 8015dd2:	e000      	b.n	8015dd6 <tcp_receive+0xec2>
                break;
 8015dd4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015dd6:	6878      	ldr	r0, [r7, #4]
 8015dd8:	f001 fe88 	bl	8017aec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015ddc:	e003      	b.n	8015de6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015dde:	6878      	ldr	r0, [r7, #4]
 8015de0:	f001 fe84 	bl	8017aec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015de4:	e01a      	b.n	8015e1c <tcp_receive+0xf08>
 8015de6:	e019      	b.n	8015e1c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015de8:	4b0e      	ldr	r3, [pc, #56]	@ (8015e24 <tcp_receive+0xf10>)
 8015dea:	681a      	ldr	r2, [r3, #0]
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015df0:	1ad3      	subs	r3, r2, r3
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	db0a      	blt.n	8015e0c <tcp_receive+0xef8>
 8015df6:	4b0b      	ldr	r3, [pc, #44]	@ (8015e24 <tcp_receive+0xf10>)
 8015df8:	681a      	ldr	r2, [r3, #0]
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dfe:	6879      	ldr	r1, [r7, #4]
 8015e00:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015e02:	440b      	add	r3, r1
 8015e04:	1ad3      	subs	r3, r2, r3
 8015e06:	3301      	adds	r3, #1
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	dd07      	ble.n	8015e1c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	8b5b      	ldrh	r3, [r3, #26]
 8015e10:	f043 0302 	orr.w	r3, r3, #2
 8015e14:	b29a      	uxth	r2, r3
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015e1a:	e7ff      	b.n	8015e1c <tcp_receive+0xf08>
 8015e1c:	bf00      	nop
 8015e1e:	3750      	adds	r7, #80	@ 0x50
 8015e20:	46bd      	mov	sp, r7
 8015e22:	bdb0      	pop	{r4, r5, r7, pc}
 8015e24:	2000c8e8 	.word	0x2000c8e8
 8015e28:	2000c8c8 	.word	0x2000c8c8
 8015e2c:	2000c8f2 	.word	0x2000c8f2
 8015e30:	0801f65c 	.word	0x0801f65c
 8015e34:	0801fa04 	.word	0x0801fa04
 8015e38:	0801f6a8 	.word	0x0801f6a8

08015e3c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015e3c:	b480      	push	{r7}
 8015e3e:	b083      	sub	sp, #12
 8015e40:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015e42:	4b15      	ldr	r3, [pc, #84]	@ (8015e98 <tcp_get_next_optbyte+0x5c>)
 8015e44:	881b      	ldrh	r3, [r3, #0]
 8015e46:	1c5a      	adds	r2, r3, #1
 8015e48:	b291      	uxth	r1, r2
 8015e4a:	4a13      	ldr	r2, [pc, #76]	@ (8015e98 <tcp_get_next_optbyte+0x5c>)
 8015e4c:	8011      	strh	r1, [r2, #0]
 8015e4e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015e50:	4b12      	ldr	r3, [pc, #72]	@ (8015e9c <tcp_get_next_optbyte+0x60>)
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d004      	beq.n	8015e62 <tcp_get_next_optbyte+0x26>
 8015e58:	4b11      	ldr	r3, [pc, #68]	@ (8015ea0 <tcp_get_next_optbyte+0x64>)
 8015e5a:	881b      	ldrh	r3, [r3, #0]
 8015e5c:	88fa      	ldrh	r2, [r7, #6]
 8015e5e:	429a      	cmp	r2, r3
 8015e60:	d208      	bcs.n	8015e74 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015e62:	4b10      	ldr	r3, [pc, #64]	@ (8015ea4 <tcp_get_next_optbyte+0x68>)
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	3314      	adds	r3, #20
 8015e68:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015e6a:	88fb      	ldrh	r3, [r7, #6]
 8015e6c:	683a      	ldr	r2, [r7, #0]
 8015e6e:	4413      	add	r3, r2
 8015e70:	781b      	ldrb	r3, [r3, #0]
 8015e72:	e00b      	b.n	8015e8c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015e74:	88fb      	ldrh	r3, [r7, #6]
 8015e76:	b2da      	uxtb	r2, r3
 8015e78:	4b09      	ldr	r3, [pc, #36]	@ (8015ea0 <tcp_get_next_optbyte+0x64>)
 8015e7a:	881b      	ldrh	r3, [r3, #0]
 8015e7c:	b2db      	uxtb	r3, r3
 8015e7e:	1ad3      	subs	r3, r2, r3
 8015e80:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015e82:	4b06      	ldr	r3, [pc, #24]	@ (8015e9c <tcp_get_next_optbyte+0x60>)
 8015e84:	681a      	ldr	r2, [r3, #0]
 8015e86:	797b      	ldrb	r3, [r7, #5]
 8015e88:	4413      	add	r3, r2
 8015e8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	370c      	adds	r7, #12
 8015e90:	46bd      	mov	sp, r7
 8015e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e96:	4770      	bx	lr
 8015e98:	2000c8e4 	.word	0x2000c8e4
 8015e9c:	2000c8e0 	.word	0x2000c8e0
 8015ea0:	2000c8de 	.word	0x2000c8de
 8015ea4:	2000c8d8 	.word	0x2000c8d8

08015ea8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b084      	sub	sp, #16
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d106      	bne.n	8015ec4 <tcp_parseopt+0x1c>
 8015eb6:	4b32      	ldr	r3, [pc, #200]	@ (8015f80 <tcp_parseopt+0xd8>)
 8015eb8:	f240 727d 	movw	r2, #1917	@ 0x77d
 8015ebc:	4931      	ldr	r1, [pc, #196]	@ (8015f84 <tcp_parseopt+0xdc>)
 8015ebe:	4832      	ldr	r0, [pc, #200]	@ (8015f88 <tcp_parseopt+0xe0>)
 8015ec0:	f005 fd0c 	bl	801b8dc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015ec4:	4b31      	ldr	r3, [pc, #196]	@ (8015f8c <tcp_parseopt+0xe4>)
 8015ec6:	881b      	ldrh	r3, [r3, #0]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d056      	beq.n	8015f7a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015ecc:	4b30      	ldr	r3, [pc, #192]	@ (8015f90 <tcp_parseopt+0xe8>)
 8015ece:	2200      	movs	r2, #0
 8015ed0:	801a      	strh	r2, [r3, #0]
 8015ed2:	e046      	b.n	8015f62 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8015ed4:	f7ff ffb2 	bl	8015e3c <tcp_get_next_optbyte>
 8015ed8:	4603      	mov	r3, r0
 8015eda:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015edc:	7bfb      	ldrb	r3, [r7, #15]
 8015ede:	2b02      	cmp	r3, #2
 8015ee0:	d006      	beq.n	8015ef0 <tcp_parseopt+0x48>
 8015ee2:	2b02      	cmp	r3, #2
 8015ee4:	dc2a      	bgt.n	8015f3c <tcp_parseopt+0x94>
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d042      	beq.n	8015f70 <tcp_parseopt+0xc8>
 8015eea:	2b01      	cmp	r3, #1
 8015eec:	d038      	beq.n	8015f60 <tcp_parseopt+0xb8>
 8015eee:	e025      	b.n	8015f3c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015ef0:	f7ff ffa4 	bl	8015e3c <tcp_get_next_optbyte>
 8015ef4:	4603      	mov	r3, r0
 8015ef6:	2b04      	cmp	r3, #4
 8015ef8:	d13c      	bne.n	8015f74 <tcp_parseopt+0xcc>
 8015efa:	4b25      	ldr	r3, [pc, #148]	@ (8015f90 <tcp_parseopt+0xe8>)
 8015efc:	881b      	ldrh	r3, [r3, #0]
 8015efe:	3301      	adds	r3, #1
 8015f00:	4a22      	ldr	r2, [pc, #136]	@ (8015f8c <tcp_parseopt+0xe4>)
 8015f02:	8812      	ldrh	r2, [r2, #0]
 8015f04:	4293      	cmp	r3, r2
 8015f06:	da35      	bge.n	8015f74 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015f08:	f7ff ff98 	bl	8015e3c <tcp_get_next_optbyte>
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	021b      	lsls	r3, r3, #8
 8015f10:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015f12:	f7ff ff93 	bl	8015e3c <tcp_get_next_optbyte>
 8015f16:	4603      	mov	r3, r0
 8015f18:	461a      	mov	r2, r3
 8015f1a:	89bb      	ldrh	r3, [r7, #12]
 8015f1c:	4313      	orrs	r3, r2
 8015f1e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015f20:	89bb      	ldrh	r3, [r7, #12]
 8015f22:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8015f26:	d804      	bhi.n	8015f32 <tcp_parseopt+0x8a>
 8015f28:	89bb      	ldrh	r3, [r7, #12]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d001      	beq.n	8015f32 <tcp_parseopt+0x8a>
 8015f2e:	89ba      	ldrh	r2, [r7, #12]
 8015f30:	e001      	b.n	8015f36 <tcp_parseopt+0x8e>
 8015f32:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8015f3a:	e012      	b.n	8015f62 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015f3c:	f7ff ff7e 	bl	8015e3c <tcp_get_next_optbyte>
 8015f40:	4603      	mov	r3, r0
 8015f42:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015f44:	7afb      	ldrb	r3, [r7, #11]
 8015f46:	2b01      	cmp	r3, #1
 8015f48:	d916      	bls.n	8015f78 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015f4a:	7afb      	ldrb	r3, [r7, #11]
 8015f4c:	b29a      	uxth	r2, r3
 8015f4e:	4b10      	ldr	r3, [pc, #64]	@ (8015f90 <tcp_parseopt+0xe8>)
 8015f50:	881b      	ldrh	r3, [r3, #0]
 8015f52:	4413      	add	r3, r2
 8015f54:	b29b      	uxth	r3, r3
 8015f56:	3b02      	subs	r3, #2
 8015f58:	b29a      	uxth	r2, r3
 8015f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8015f90 <tcp_parseopt+0xe8>)
 8015f5c:	801a      	strh	r2, [r3, #0]
 8015f5e:	e000      	b.n	8015f62 <tcp_parseopt+0xba>
          break;
 8015f60:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015f62:	4b0b      	ldr	r3, [pc, #44]	@ (8015f90 <tcp_parseopt+0xe8>)
 8015f64:	881a      	ldrh	r2, [r3, #0]
 8015f66:	4b09      	ldr	r3, [pc, #36]	@ (8015f8c <tcp_parseopt+0xe4>)
 8015f68:	881b      	ldrh	r3, [r3, #0]
 8015f6a:	429a      	cmp	r2, r3
 8015f6c:	d3b2      	bcc.n	8015ed4 <tcp_parseopt+0x2c>
 8015f6e:	e004      	b.n	8015f7a <tcp_parseopt+0xd2>
          return;
 8015f70:	bf00      	nop
 8015f72:	e002      	b.n	8015f7a <tcp_parseopt+0xd2>
            return;
 8015f74:	bf00      	nop
 8015f76:	e000      	b.n	8015f7a <tcp_parseopt+0xd2>
            return;
 8015f78:	bf00      	nop
      }
    }
  }
}
 8015f7a:	3710      	adds	r7, #16
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	bd80      	pop	{r7, pc}
 8015f80:	0801f65c 	.word	0x0801f65c
 8015f84:	0801fac0 	.word	0x0801fac0
 8015f88:	0801f6a8 	.word	0x0801f6a8
 8015f8c:	2000c8dc 	.word	0x2000c8dc
 8015f90:	2000c8e4 	.word	0x2000c8e4

08015f94 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015f94:	b480      	push	{r7}
 8015f96:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015f98:	4b05      	ldr	r3, [pc, #20]	@ (8015fb0 <tcp_trigger_input_pcb_close+0x1c>)
 8015f9a:	781b      	ldrb	r3, [r3, #0]
 8015f9c:	f043 0310 	orr.w	r3, r3, #16
 8015fa0:	b2da      	uxtb	r2, r3
 8015fa2:	4b03      	ldr	r3, [pc, #12]	@ (8015fb0 <tcp_trigger_input_pcb_close+0x1c>)
 8015fa4:	701a      	strb	r2, [r3, #0]
}
 8015fa6:	bf00      	nop
 8015fa8:	46bd      	mov	sp, r7
 8015faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fae:	4770      	bx	lr
 8015fb0:	2000c8f5 	.word	0x2000c8f5

08015fb4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b084      	sub	sp, #16
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	60f8      	str	r0, [r7, #12]
 8015fbc:	60b9      	str	r1, [r7, #8]
 8015fbe:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d00a      	beq.n	8015fdc <tcp_route+0x28>
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	7a1b      	ldrb	r3, [r3, #8]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d006      	beq.n	8015fdc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	7a1b      	ldrb	r3, [r3, #8]
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f7fb f8c4 	bl	8011160 <netif_get_by_index>
 8015fd8:	4603      	mov	r3, r0
 8015fda:	e003      	b.n	8015fe4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015fdc:	6878      	ldr	r0, [r7, #4]
 8015fde:	f003 fad1 	bl	8019584 <ip4_route>
 8015fe2:	4603      	mov	r3, r0
  }
}
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	3710      	adds	r7, #16
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	bd80      	pop	{r7, pc}

08015fec <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015fec:	b590      	push	{r4, r7, lr}
 8015fee:	b087      	sub	sp, #28
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	60f8      	str	r0, [r7, #12]
 8015ff4:	60b9      	str	r1, [r7, #8]
 8015ff6:	603b      	str	r3, [r7, #0]
 8015ff8:	4613      	mov	r3, r2
 8015ffa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d105      	bne.n	801600e <tcp_create_segment+0x22>
 8016002:	4b43      	ldr	r3, [pc, #268]	@ (8016110 <tcp_create_segment+0x124>)
 8016004:	22a3      	movs	r2, #163	@ 0xa3
 8016006:	4943      	ldr	r1, [pc, #268]	@ (8016114 <tcp_create_segment+0x128>)
 8016008:	4843      	ldr	r0, [pc, #268]	@ (8016118 <tcp_create_segment+0x12c>)
 801600a:	f005 fc67 	bl	801b8dc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801600e:	68bb      	ldr	r3, [r7, #8]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d105      	bne.n	8016020 <tcp_create_segment+0x34>
 8016014:	4b3e      	ldr	r3, [pc, #248]	@ (8016110 <tcp_create_segment+0x124>)
 8016016:	22a4      	movs	r2, #164	@ 0xa4
 8016018:	4940      	ldr	r1, [pc, #256]	@ (801611c <tcp_create_segment+0x130>)
 801601a:	483f      	ldr	r0, [pc, #252]	@ (8016118 <tcp_create_segment+0x12c>)
 801601c:	f005 fc5e 	bl	801b8dc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016020:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016024:	009b      	lsls	r3, r3, #2
 8016026:	b2db      	uxtb	r3, r3
 8016028:	f003 0304 	and.w	r3, r3, #4
 801602c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801602e:	2003      	movs	r0, #3
 8016030:	f7fa fd3c 	bl	8010aac <memp_malloc>
 8016034:	6138      	str	r0, [r7, #16]
 8016036:	693b      	ldr	r3, [r7, #16]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d104      	bne.n	8016046 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801603c:	68b8      	ldr	r0, [r7, #8]
 801603e:	f7fb fc1d 	bl	801187c <pbuf_free>
    return NULL;
 8016042:	2300      	movs	r3, #0
 8016044:	e060      	b.n	8016108 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8016046:	693b      	ldr	r3, [r7, #16]
 8016048:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801604c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801604e:	693b      	ldr	r3, [r7, #16]
 8016050:	2200      	movs	r2, #0
 8016052:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016054:	693b      	ldr	r3, [r7, #16]
 8016056:	68ba      	ldr	r2, [r7, #8]
 8016058:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801605a:	68bb      	ldr	r3, [r7, #8]
 801605c:	891a      	ldrh	r2, [r3, #8]
 801605e:	7dfb      	ldrb	r3, [r7, #23]
 8016060:	b29b      	uxth	r3, r3
 8016062:	429a      	cmp	r2, r3
 8016064:	d205      	bcs.n	8016072 <tcp_create_segment+0x86>
 8016066:	4b2a      	ldr	r3, [pc, #168]	@ (8016110 <tcp_create_segment+0x124>)
 8016068:	22b0      	movs	r2, #176	@ 0xb0
 801606a:	492d      	ldr	r1, [pc, #180]	@ (8016120 <tcp_create_segment+0x134>)
 801606c:	482a      	ldr	r0, [pc, #168]	@ (8016118 <tcp_create_segment+0x12c>)
 801606e:	f005 fc35 	bl	801b8dc <iprintf>
  seg->len = p->tot_len - optlen;
 8016072:	68bb      	ldr	r3, [r7, #8]
 8016074:	891a      	ldrh	r2, [r3, #8]
 8016076:	7dfb      	ldrb	r3, [r7, #23]
 8016078:	b29b      	uxth	r3, r3
 801607a:	1ad3      	subs	r3, r2, r3
 801607c:	b29a      	uxth	r2, r3
 801607e:	693b      	ldr	r3, [r7, #16]
 8016080:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8016082:	2114      	movs	r1, #20
 8016084:	68b8      	ldr	r0, [r7, #8]
 8016086:	f7fb fb63 	bl	8011750 <pbuf_add_header>
 801608a:	4603      	mov	r3, r0
 801608c:	2b00      	cmp	r3, #0
 801608e:	d004      	beq.n	801609a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016090:	6938      	ldr	r0, [r7, #16]
 8016092:	f7fd f82e 	bl	80130f2 <tcp_seg_free>
    return NULL;
 8016096:	2300      	movs	r3, #0
 8016098:	e036      	b.n	8016108 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801609a:	693b      	ldr	r3, [r7, #16]
 801609c:	685b      	ldr	r3, [r3, #4]
 801609e:	685a      	ldr	r2, [r3, #4]
 80160a0:	693b      	ldr	r3, [r7, #16]
 80160a2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	8ada      	ldrh	r2, [r3, #22]
 80160a8:	693b      	ldr	r3, [r7, #16]
 80160aa:	68dc      	ldr	r4, [r3, #12]
 80160ac:	4610      	mov	r0, r2
 80160ae:	f7fa f825 	bl	80100fc <lwip_htons>
 80160b2:	4603      	mov	r3, r0
 80160b4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	8b1a      	ldrh	r2, [r3, #24]
 80160ba:	693b      	ldr	r3, [r7, #16]
 80160bc:	68dc      	ldr	r4, [r3, #12]
 80160be:	4610      	mov	r0, r2
 80160c0:	f7fa f81c 	bl	80100fc <lwip_htons>
 80160c4:	4603      	mov	r3, r0
 80160c6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80160c8:	693b      	ldr	r3, [r7, #16]
 80160ca:	68dc      	ldr	r4, [r3, #12]
 80160cc:	6838      	ldr	r0, [r7, #0]
 80160ce:	f7fa f82b 	bl	8010128 <lwip_htonl>
 80160d2:	4603      	mov	r3, r0
 80160d4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80160d6:	7dfb      	ldrb	r3, [r7, #23]
 80160d8:	089b      	lsrs	r3, r3, #2
 80160da:	b2db      	uxtb	r3, r3
 80160dc:	3305      	adds	r3, #5
 80160de:	b29b      	uxth	r3, r3
 80160e0:	031b      	lsls	r3, r3, #12
 80160e2:	b29a      	uxth	r2, r3
 80160e4:	79fb      	ldrb	r3, [r7, #7]
 80160e6:	b29b      	uxth	r3, r3
 80160e8:	4313      	orrs	r3, r2
 80160ea:	b29a      	uxth	r2, r3
 80160ec:	693b      	ldr	r3, [r7, #16]
 80160ee:	68dc      	ldr	r4, [r3, #12]
 80160f0:	4610      	mov	r0, r2
 80160f2:	f7fa f803 	bl	80100fc <lwip_htons>
 80160f6:	4603      	mov	r3, r0
 80160f8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80160fa:	693b      	ldr	r3, [r7, #16]
 80160fc:	68db      	ldr	r3, [r3, #12]
 80160fe:	2200      	movs	r2, #0
 8016100:	749a      	strb	r2, [r3, #18]
 8016102:	2200      	movs	r2, #0
 8016104:	74da      	strb	r2, [r3, #19]
  return seg;
 8016106:	693b      	ldr	r3, [r7, #16]
}
 8016108:	4618      	mov	r0, r3
 801610a:	371c      	adds	r7, #28
 801610c:	46bd      	mov	sp, r7
 801610e:	bd90      	pop	{r4, r7, pc}
 8016110:	0801fadc 	.word	0x0801fadc
 8016114:	0801fb10 	.word	0x0801fb10
 8016118:	0801fb30 	.word	0x0801fb30
 801611c:	0801fb58 	.word	0x0801fb58
 8016120:	0801fb7c 	.word	0x0801fb7c

08016124 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b086      	sub	sp, #24
 8016128:	af00      	add	r7, sp, #0
 801612a:	607b      	str	r3, [r7, #4]
 801612c:	4603      	mov	r3, r0
 801612e:	73fb      	strb	r3, [r7, #15]
 8016130:	460b      	mov	r3, r1
 8016132:	81bb      	strh	r3, [r7, #12]
 8016134:	4613      	mov	r3, r2
 8016136:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8016138:	89bb      	ldrh	r3, [r7, #12]
 801613a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d105      	bne.n	801614e <tcp_pbuf_prealloc+0x2a>
 8016142:	4b30      	ldr	r3, [pc, #192]	@ (8016204 <tcp_pbuf_prealloc+0xe0>)
 8016144:	22e8      	movs	r2, #232	@ 0xe8
 8016146:	4930      	ldr	r1, [pc, #192]	@ (8016208 <tcp_pbuf_prealloc+0xe4>)
 8016148:	4830      	ldr	r0, [pc, #192]	@ (801620c <tcp_pbuf_prealloc+0xe8>)
 801614a:	f005 fbc7 	bl	801b8dc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801614e:	6a3b      	ldr	r3, [r7, #32]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d105      	bne.n	8016160 <tcp_pbuf_prealloc+0x3c>
 8016154:	4b2b      	ldr	r3, [pc, #172]	@ (8016204 <tcp_pbuf_prealloc+0xe0>)
 8016156:	22e9      	movs	r2, #233	@ 0xe9
 8016158:	492d      	ldr	r1, [pc, #180]	@ (8016210 <tcp_pbuf_prealloc+0xec>)
 801615a:	482c      	ldr	r0, [pc, #176]	@ (801620c <tcp_pbuf_prealloc+0xe8>)
 801615c:	f005 fbbe 	bl	801b8dc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8016160:	89ba      	ldrh	r2, [r7, #12]
 8016162:	897b      	ldrh	r3, [r7, #10]
 8016164:	429a      	cmp	r2, r3
 8016166:	d221      	bcs.n	80161ac <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016168:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801616c:	f003 0302 	and.w	r3, r3, #2
 8016170:	2b00      	cmp	r3, #0
 8016172:	d111      	bne.n	8016198 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8016174:	6a3b      	ldr	r3, [r7, #32]
 8016176:	8b5b      	ldrh	r3, [r3, #26]
 8016178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801617c:	2b00      	cmp	r3, #0
 801617e:	d115      	bne.n	80161ac <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8016180:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016184:	2b00      	cmp	r3, #0
 8016186:	d007      	beq.n	8016198 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8016188:	6a3b      	ldr	r3, [r7, #32]
 801618a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 801618c:	2b00      	cmp	r3, #0
 801618e:	d103      	bne.n	8016198 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8016190:	6a3b      	ldr	r3, [r7, #32]
 8016192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8016194:	2b00      	cmp	r3, #0
 8016196:	d009      	beq.n	80161ac <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8016198:	89bb      	ldrh	r3, [r7, #12]
 801619a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801619e:	f023 0203 	bic.w	r2, r3, #3
 80161a2:	897b      	ldrh	r3, [r7, #10]
 80161a4:	4293      	cmp	r3, r2
 80161a6:	bf28      	it	cs
 80161a8:	4613      	movcs	r3, r2
 80161aa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80161ac:	8af9      	ldrh	r1, [r7, #22]
 80161ae:	7bfb      	ldrb	r3, [r7, #15]
 80161b0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80161b4:	4618      	mov	r0, r3
 80161b6:	f7fb f87d 	bl	80112b4 <pbuf_alloc>
 80161ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80161bc:	693b      	ldr	r3, [r7, #16]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d101      	bne.n	80161c6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80161c2:	2300      	movs	r3, #0
 80161c4:	e019      	b.n	80161fa <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80161c6:	693b      	ldr	r3, [r7, #16]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d006      	beq.n	80161dc <tcp_pbuf_prealloc+0xb8>
 80161ce:	4b0d      	ldr	r3, [pc, #52]	@ (8016204 <tcp_pbuf_prealloc+0xe0>)
 80161d0:	f240 120b 	movw	r2, #267	@ 0x10b
 80161d4:	490f      	ldr	r1, [pc, #60]	@ (8016214 <tcp_pbuf_prealloc+0xf0>)
 80161d6:	480d      	ldr	r0, [pc, #52]	@ (801620c <tcp_pbuf_prealloc+0xe8>)
 80161d8:	f005 fb80 	bl	801b8dc <iprintf>
  *oversize = p->len - length;
 80161dc:	693b      	ldr	r3, [r7, #16]
 80161de:	895a      	ldrh	r2, [r3, #10]
 80161e0:	89bb      	ldrh	r3, [r7, #12]
 80161e2:	1ad3      	subs	r3, r2, r3
 80161e4:	b29a      	uxth	r2, r3
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80161ea:	693b      	ldr	r3, [r7, #16]
 80161ec:	89ba      	ldrh	r2, [r7, #12]
 80161ee:	811a      	strh	r2, [r3, #8]
 80161f0:	693b      	ldr	r3, [r7, #16]
 80161f2:	891a      	ldrh	r2, [r3, #8]
 80161f4:	693b      	ldr	r3, [r7, #16]
 80161f6:	815a      	strh	r2, [r3, #10]
  return p;
 80161f8:	693b      	ldr	r3, [r7, #16]
}
 80161fa:	4618      	mov	r0, r3
 80161fc:	3718      	adds	r7, #24
 80161fe:	46bd      	mov	sp, r7
 8016200:	bd80      	pop	{r7, pc}
 8016202:	bf00      	nop
 8016204:	0801fadc 	.word	0x0801fadc
 8016208:	0801fb94 	.word	0x0801fb94
 801620c:	0801fb30 	.word	0x0801fb30
 8016210:	0801fbb8 	.word	0x0801fbb8
 8016214:	0801fbd8 	.word	0x0801fbd8

08016218 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8016218:	b580      	push	{r7, lr}
 801621a:	b082      	sub	sp, #8
 801621c:	af00      	add	r7, sp, #0
 801621e:	6078      	str	r0, [r7, #4]
 8016220:	460b      	mov	r3, r1
 8016222:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d106      	bne.n	8016238 <tcp_write_checks+0x20>
 801622a:	4b33      	ldr	r3, [pc, #204]	@ (80162f8 <tcp_write_checks+0xe0>)
 801622c:	f240 1233 	movw	r2, #307	@ 0x133
 8016230:	4932      	ldr	r1, [pc, #200]	@ (80162fc <tcp_write_checks+0xe4>)
 8016232:	4833      	ldr	r0, [pc, #204]	@ (8016300 <tcp_write_checks+0xe8>)
 8016234:	f005 fb52 	bl	801b8dc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	7d1b      	ldrb	r3, [r3, #20]
 801623c:	2b04      	cmp	r3, #4
 801623e:	d00e      	beq.n	801625e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8016244:	2b07      	cmp	r3, #7
 8016246:	d00a      	beq.n	801625e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801624c:	2b02      	cmp	r3, #2
 801624e:	d006      	beq.n	801625e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8016254:	2b03      	cmp	r3, #3
 8016256:	d002      	beq.n	801625e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8016258:	f06f 030a 	mvn.w	r3, #10
 801625c:	e048      	b.n	80162f0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801625e:	887b      	ldrh	r3, [r7, #2]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d101      	bne.n	8016268 <tcp_write_checks+0x50>
    return ERR_OK;
 8016264:	2300      	movs	r3, #0
 8016266:	e043      	b.n	80162f0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801626e:	887a      	ldrh	r2, [r7, #2]
 8016270:	429a      	cmp	r2, r3
 8016272:	d909      	bls.n	8016288 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	8b5b      	ldrh	r3, [r3, #26]
 8016278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801627c:	b29a      	uxth	r2, r3
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016282:	f04f 33ff 	mov.w	r3, #4294967295
 8016286:	e033      	b.n	80162f0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801628e:	2b08      	cmp	r3, #8
 8016290:	d909      	bls.n	80162a6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	8b5b      	ldrh	r3, [r3, #26]
 8016296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801629a:	b29a      	uxth	r2, r3
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80162a0:	f04f 33ff 	mov.w	r3, #4294967295
 80162a4:	e024      	b.n	80162f0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d00f      	beq.n	80162d0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d11a      	bne.n	80162ee <tcp_write_checks+0xd6>
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d116      	bne.n	80162ee <tcp_write_checks+0xd6>
 80162c0:	4b0d      	ldr	r3, [pc, #52]	@ (80162f8 <tcp_write_checks+0xe0>)
 80162c2:	f240 1255 	movw	r2, #341	@ 0x155
 80162c6:	490f      	ldr	r1, [pc, #60]	@ (8016304 <tcp_write_checks+0xec>)
 80162c8:	480d      	ldr	r0, [pc, #52]	@ (8016300 <tcp_write_checks+0xe8>)
 80162ca:	f005 fb07 	bl	801b8dc <iprintf>
 80162ce:	e00e      	b.n	80162ee <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d103      	bne.n	80162e0 <tcp_write_checks+0xc8>
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d006      	beq.n	80162ee <tcp_write_checks+0xd6>
 80162e0:	4b05      	ldr	r3, [pc, #20]	@ (80162f8 <tcp_write_checks+0xe0>)
 80162e2:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80162e6:	4908      	ldr	r1, [pc, #32]	@ (8016308 <tcp_write_checks+0xf0>)
 80162e8:	4805      	ldr	r0, [pc, #20]	@ (8016300 <tcp_write_checks+0xe8>)
 80162ea:	f005 faf7 	bl	801b8dc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80162ee:	2300      	movs	r3, #0
}
 80162f0:	4618      	mov	r0, r3
 80162f2:	3708      	adds	r7, #8
 80162f4:	46bd      	mov	sp, r7
 80162f6:	bd80      	pop	{r7, pc}
 80162f8:	0801fadc 	.word	0x0801fadc
 80162fc:	0801fbec 	.word	0x0801fbec
 8016300:	0801fb30 	.word	0x0801fb30
 8016304:	0801fc0c 	.word	0x0801fc0c
 8016308:	0801fc48 	.word	0x0801fc48

0801630c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801630c:	b590      	push	{r4, r7, lr}
 801630e:	b09b      	sub	sp, #108	@ 0x6c
 8016310:	af04      	add	r7, sp, #16
 8016312:	60f8      	str	r0, [r7, #12]
 8016314:	60b9      	str	r1, [r7, #8]
 8016316:	4611      	mov	r1, r2
 8016318:	461a      	mov	r2, r3
 801631a:	460b      	mov	r3, r1
 801631c:	80fb      	strh	r3, [r7, #6]
 801631e:	4613      	mov	r3, r2
 8016320:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8016322:	2300      	movs	r3, #0
 8016324:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8016326:	2300      	movs	r3, #0
 8016328:	653b      	str	r3, [r7, #80]	@ 0x50
 801632a:	2300      	movs	r3, #0
 801632c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801632e:	2300      	movs	r3, #0
 8016330:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016332:	2300      	movs	r3, #0
 8016334:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8016336:	2300      	movs	r3, #0
 8016338:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801633c:	2300      	movs	r3, #0
 801633e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8016342:	2300      	movs	r3, #0
 8016344:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8016346:	2300      	movs	r3, #0
 8016348:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801634a:	2300      	movs	r3, #0
 801634c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	2b00      	cmp	r3, #0
 8016352:	d109      	bne.n	8016368 <tcp_write+0x5c>
 8016354:	4ba4      	ldr	r3, [pc, #656]	@ (80165e8 <tcp_write+0x2dc>)
 8016356:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801635a:	49a4      	ldr	r1, [pc, #656]	@ (80165ec <tcp_write+0x2e0>)
 801635c:	48a4      	ldr	r0, [pc, #656]	@ (80165f0 <tcp_write+0x2e4>)
 801635e:	f005 fabd 	bl	801b8dc <iprintf>
 8016362:	f06f 030f 	mvn.w	r3, #15
 8016366:	e32a      	b.n	80169be <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801636e:	085b      	lsrs	r3, r3, #1
 8016370:	b29a      	uxth	r2, r3
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016376:	4293      	cmp	r3, r2
 8016378:	bf28      	it	cs
 801637a:	4613      	movcs	r3, r2
 801637c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801637e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016380:	2b00      	cmp	r3, #0
 8016382:	d102      	bne.n	801638a <tcp_write+0x7e>
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016388:	e000      	b.n	801638c <tcp_write+0x80>
 801638a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801638c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801638e:	68bb      	ldr	r3, [r7, #8]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d109      	bne.n	80163a8 <tcp_write+0x9c>
 8016394:	4b94      	ldr	r3, [pc, #592]	@ (80165e8 <tcp_write+0x2dc>)
 8016396:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801639a:	4996      	ldr	r1, [pc, #600]	@ (80165f4 <tcp_write+0x2e8>)
 801639c:	4894      	ldr	r0, [pc, #592]	@ (80165f0 <tcp_write+0x2e4>)
 801639e:	f005 fa9d 	bl	801b8dc <iprintf>
 80163a2:	f06f 030f 	mvn.w	r3, #15
 80163a6:	e30a      	b.n	80169be <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80163a8:	88fb      	ldrh	r3, [r7, #6]
 80163aa:	4619      	mov	r1, r3
 80163ac:	68f8      	ldr	r0, [r7, #12]
 80163ae:	f7ff ff33 	bl	8016218 <tcp_write_checks>
 80163b2:	4603      	mov	r3, r0
 80163b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 80163b8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d002      	beq.n	80163c6 <tcp_write+0xba>
    return err;
 80163c0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80163c4:	e2fb      	b.n	80169be <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80163cc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80163d0:	2300      	movs	r3, #0
 80163d2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80163da:	2b00      	cmp	r3, #0
 80163dc:	f000 80f6 	beq.w	80165cc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80163e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80163e6:	e002      	b.n	80163ee <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80163e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80163ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d1f8      	bne.n	80163e8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80163f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80163f8:	7a9b      	ldrb	r3, [r3, #10]
 80163fa:	009b      	lsls	r3, r3, #2
 80163fc:	b29b      	uxth	r3, r3
 80163fe:	f003 0304 	and.w	r3, r3, #4
 8016402:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8016404:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016406:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016408:	891b      	ldrh	r3, [r3, #8]
 801640a:	4619      	mov	r1, r3
 801640c:	8c3b      	ldrh	r3, [r7, #32]
 801640e:	440b      	add	r3, r1
 8016410:	429a      	cmp	r2, r3
 8016412:	da06      	bge.n	8016422 <tcp_write+0x116>
 8016414:	4b74      	ldr	r3, [pc, #464]	@ (80165e8 <tcp_write+0x2dc>)
 8016416:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801641a:	4977      	ldr	r1, [pc, #476]	@ (80165f8 <tcp_write+0x2ec>)
 801641c:	4874      	ldr	r0, [pc, #464]	@ (80165f0 <tcp_write+0x2e4>)
 801641e:	f005 fa5d 	bl	801b8dc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8016422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016424:	891a      	ldrh	r2, [r3, #8]
 8016426:	8c3b      	ldrh	r3, [r7, #32]
 8016428:	4413      	add	r3, r2
 801642a:	b29b      	uxth	r3, r3
 801642c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801642e:	1ad3      	subs	r3, r2, r3
 8016430:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8016438:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801643a:	8a7b      	ldrh	r3, [r7, #18]
 801643c:	2b00      	cmp	r3, #0
 801643e:	d026      	beq.n	801648e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8016440:	8a7b      	ldrh	r3, [r7, #18]
 8016442:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8016444:	429a      	cmp	r2, r3
 8016446:	d206      	bcs.n	8016456 <tcp_write+0x14a>
 8016448:	4b67      	ldr	r3, [pc, #412]	@ (80165e8 <tcp_write+0x2dc>)
 801644a:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801644e:	496b      	ldr	r1, [pc, #428]	@ (80165fc <tcp_write+0x2f0>)
 8016450:	4867      	ldr	r0, [pc, #412]	@ (80165f0 <tcp_write+0x2e4>)
 8016452:	f005 fa43 	bl	801b8dc <iprintf>
      seg = last_unsent;
 8016456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016458:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801645a:	8a7b      	ldrh	r3, [r7, #18]
 801645c:	88fa      	ldrh	r2, [r7, #6]
 801645e:	4293      	cmp	r3, r2
 8016460:	bf28      	it	cs
 8016462:	4613      	movcs	r3, r2
 8016464:	b29b      	uxth	r3, r3
 8016466:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8016468:	4293      	cmp	r3, r2
 801646a:	bf28      	it	cs
 801646c:	4613      	movcs	r3, r2
 801646e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8016470:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016474:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016476:	4413      	add	r3, r2
 8016478:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 801647c:	8a7a      	ldrh	r2, [r7, #18]
 801647e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016480:	1ad3      	subs	r3, r2, r3
 8016482:	b29b      	uxth	r3, r3
 8016484:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8016486:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8016488:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801648a:	1ad3      	subs	r3, r2, r3
 801648c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801648e:	8a7b      	ldrh	r3, [r7, #18]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d00b      	beq.n	80164ac <tcp_write+0x1a0>
 8016494:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016498:	88fb      	ldrh	r3, [r7, #6]
 801649a:	429a      	cmp	r2, r3
 801649c:	d006      	beq.n	80164ac <tcp_write+0x1a0>
 801649e:	4b52      	ldr	r3, [pc, #328]	@ (80165e8 <tcp_write+0x2dc>)
 80164a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80164a4:	4956      	ldr	r1, [pc, #344]	@ (8016600 <tcp_write+0x2f4>)
 80164a6:	4852      	ldr	r0, [pc, #328]	@ (80165f0 <tcp_write+0x2e4>)
 80164a8:	f005 fa18 	bl	801b8dc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80164ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80164b0:	88fb      	ldrh	r3, [r7, #6]
 80164b2:	429a      	cmp	r2, r3
 80164b4:	f080 8167 	bcs.w	8016786 <tcp_write+0x47a>
 80164b8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	f000 8163 	beq.w	8016786 <tcp_write+0x47a>
 80164c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164c2:	891b      	ldrh	r3, [r3, #8]
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	f000 815e 	beq.w	8016786 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80164ca:	88fa      	ldrh	r2, [r7, #6]
 80164cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80164d0:	1ad2      	subs	r2, r2, r3
 80164d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80164d4:	4293      	cmp	r3, r2
 80164d6:	bfa8      	it	ge
 80164d8:	4613      	movge	r3, r2
 80164da:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80164dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164de:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80164e0:	797b      	ldrb	r3, [r7, #5]
 80164e2:	f003 0301 	and.w	r3, r3, #1
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d027      	beq.n	801653a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80164ea:	f107 0012 	add.w	r0, r7, #18
 80164ee:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80164f0:	8bf9      	ldrh	r1, [r7, #30]
 80164f2:	2301      	movs	r3, #1
 80164f4:	9302      	str	r3, [sp, #8]
 80164f6:	797b      	ldrb	r3, [r7, #5]
 80164f8:	9301      	str	r3, [sp, #4]
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	9300      	str	r3, [sp, #0]
 80164fe:	4603      	mov	r3, r0
 8016500:	2000      	movs	r0, #0
 8016502:	f7ff fe0f 	bl	8016124 <tcp_pbuf_prealloc>
 8016506:	6578      	str	r0, [r7, #84]	@ 0x54
 8016508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801650a:	2b00      	cmp	r3, #0
 801650c:	f000 8225 	beq.w	801695a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8016510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016512:	6858      	ldr	r0, [r3, #4]
 8016514:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016518:	68ba      	ldr	r2, [r7, #8]
 801651a:	4413      	add	r3, r2
 801651c:	8bfa      	ldrh	r2, [r7, #30]
 801651e:	4619      	mov	r1, r3
 8016520:	f005 fb7b 	bl	801bc1a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016524:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016526:	f7fb fa37 	bl	8011998 <pbuf_clen>
 801652a:	4603      	mov	r3, r0
 801652c:	461a      	mov	r2, r3
 801652e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016532:	4413      	add	r3, r2
 8016534:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8016538:	e041      	b.n	80165be <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801653a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801653c:	685b      	ldr	r3, [r3, #4]
 801653e:	637b      	str	r3, [r7, #52]	@ 0x34
 8016540:	e002      	b.n	8016548 <tcp_write+0x23c>
 8016542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	637b      	str	r3, [r7, #52]	@ 0x34
 8016548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d1f8      	bne.n	8016542 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016552:	7b1b      	ldrb	r3, [r3, #12]
 8016554:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8016558:	2b00      	cmp	r3, #0
 801655a:	d115      	bne.n	8016588 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801655c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801655e:	685b      	ldr	r3, [r3, #4]
 8016560:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016562:	8952      	ldrh	r2, [r2, #10]
 8016564:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016566:	68ba      	ldr	r2, [r7, #8]
 8016568:	429a      	cmp	r2, r3
 801656a:	d10d      	bne.n	8016588 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801656c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016570:	2b00      	cmp	r3, #0
 8016572:	d006      	beq.n	8016582 <tcp_write+0x276>
 8016574:	4b1c      	ldr	r3, [pc, #112]	@ (80165e8 <tcp_write+0x2dc>)
 8016576:	f240 2231 	movw	r2, #561	@ 0x231
 801657a:	4922      	ldr	r1, [pc, #136]	@ (8016604 <tcp_write+0x2f8>)
 801657c:	481c      	ldr	r0, [pc, #112]	@ (80165f0 <tcp_write+0x2e4>)
 801657e:	f005 f9ad 	bl	801b8dc <iprintf>
          extendlen = seglen;
 8016582:	8bfb      	ldrh	r3, [r7, #30]
 8016584:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8016586:	e01a      	b.n	80165be <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8016588:	8bfb      	ldrh	r3, [r7, #30]
 801658a:	2201      	movs	r2, #1
 801658c:	4619      	mov	r1, r3
 801658e:	2000      	movs	r0, #0
 8016590:	f7fa fe90 	bl	80112b4 <pbuf_alloc>
 8016594:	6578      	str	r0, [r7, #84]	@ 0x54
 8016596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016598:	2b00      	cmp	r3, #0
 801659a:	f000 81e0 	beq.w	801695e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801659e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80165a2:	68ba      	ldr	r2, [r7, #8]
 80165a4:	441a      	add	r2, r3
 80165a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165a8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80165aa:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80165ac:	f7fb f9f4 	bl	8011998 <pbuf_clen>
 80165b0:	4603      	mov	r3, r0
 80165b2:	461a      	mov	r2, r3
 80165b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80165b8:	4413      	add	r3, r2
 80165ba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80165be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80165c2:	8bfb      	ldrh	r3, [r7, #30]
 80165c4:	4413      	add	r3, r2
 80165c6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80165ca:	e0dc      	b.n	8016786 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	f000 80d7 	beq.w	8016786 <tcp_write+0x47a>
 80165d8:	4b03      	ldr	r3, [pc, #12]	@ (80165e8 <tcp_write+0x2dc>)
 80165da:	f240 224a 	movw	r2, #586	@ 0x24a
 80165de:	490a      	ldr	r1, [pc, #40]	@ (8016608 <tcp_write+0x2fc>)
 80165e0:	4803      	ldr	r0, [pc, #12]	@ (80165f0 <tcp_write+0x2e4>)
 80165e2:	f005 f97b 	bl	801b8dc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80165e6:	e0ce      	b.n	8016786 <tcp_write+0x47a>
 80165e8:	0801fadc 	.word	0x0801fadc
 80165ec:	0801fc7c 	.word	0x0801fc7c
 80165f0:	0801fb30 	.word	0x0801fb30
 80165f4:	0801fc94 	.word	0x0801fc94
 80165f8:	0801fcc8 	.word	0x0801fcc8
 80165fc:	0801fce0 	.word	0x0801fce0
 8016600:	0801fd00 	.word	0x0801fd00
 8016604:	0801fd20 	.word	0x0801fd20
 8016608:	0801fd4c 	.word	0x0801fd4c
    struct pbuf *p;
    u16_t left = len - pos;
 801660c:	88fa      	ldrh	r2, [r7, #6]
 801660e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016612:	1ad3      	subs	r3, r2, r3
 8016614:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8016616:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801661a:	b29b      	uxth	r3, r3
 801661c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801661e:	1ad3      	subs	r3, r2, r3
 8016620:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8016622:	8b7a      	ldrh	r2, [r7, #26]
 8016624:	8bbb      	ldrh	r3, [r7, #28]
 8016626:	4293      	cmp	r3, r2
 8016628:	bf28      	it	cs
 801662a:	4613      	movcs	r3, r2
 801662c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801662e:	797b      	ldrb	r3, [r7, #5]
 8016630:	f003 0301 	and.w	r3, r3, #1
 8016634:	2b00      	cmp	r3, #0
 8016636:	d036      	beq.n	80166a6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8016638:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801663c:	b29a      	uxth	r2, r3
 801663e:	8b3b      	ldrh	r3, [r7, #24]
 8016640:	4413      	add	r3, r2
 8016642:	b299      	uxth	r1, r3
 8016644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016646:	2b00      	cmp	r3, #0
 8016648:	bf0c      	ite	eq
 801664a:	2301      	moveq	r3, #1
 801664c:	2300      	movne	r3, #0
 801664e:	b2db      	uxtb	r3, r3
 8016650:	f107 0012 	add.w	r0, r7, #18
 8016654:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016656:	9302      	str	r3, [sp, #8]
 8016658:	797b      	ldrb	r3, [r7, #5]
 801665a:	9301      	str	r3, [sp, #4]
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	9300      	str	r3, [sp, #0]
 8016660:	4603      	mov	r3, r0
 8016662:	2036      	movs	r0, #54	@ 0x36
 8016664:	f7ff fd5e 	bl	8016124 <tcp_pbuf_prealloc>
 8016668:	6338      	str	r0, [r7, #48]	@ 0x30
 801666a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801666c:	2b00      	cmp	r3, #0
 801666e:	f000 8178 	beq.w	8016962 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8016672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016674:	895b      	ldrh	r3, [r3, #10]
 8016676:	8b3a      	ldrh	r2, [r7, #24]
 8016678:	429a      	cmp	r2, r3
 801667a:	d906      	bls.n	801668a <tcp_write+0x37e>
 801667c:	4b8c      	ldr	r3, [pc, #560]	@ (80168b0 <tcp_write+0x5a4>)
 801667e:	f240 2266 	movw	r2, #614	@ 0x266
 8016682:	498c      	ldr	r1, [pc, #560]	@ (80168b4 <tcp_write+0x5a8>)
 8016684:	488c      	ldr	r0, [pc, #560]	@ (80168b8 <tcp_write+0x5ac>)
 8016686:	f005 f929 	bl	801b8dc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801668a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801668c:	685a      	ldr	r2, [r3, #4]
 801668e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8016692:	18d0      	adds	r0, r2, r3
 8016694:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016698:	68ba      	ldr	r2, [r7, #8]
 801669a:	4413      	add	r3, r2
 801669c:	8b3a      	ldrh	r2, [r7, #24]
 801669e:	4619      	mov	r1, r3
 80166a0:	f005 fabb 	bl	801bc1a <memcpy>
 80166a4:	e02f      	b.n	8016706 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80166a6:	8a7b      	ldrh	r3, [r7, #18]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d006      	beq.n	80166ba <tcp_write+0x3ae>
 80166ac:	4b80      	ldr	r3, [pc, #512]	@ (80168b0 <tcp_write+0x5a4>)
 80166ae:	f240 2271 	movw	r2, #625	@ 0x271
 80166b2:	4982      	ldr	r1, [pc, #520]	@ (80168bc <tcp_write+0x5b0>)
 80166b4:	4880      	ldr	r0, [pc, #512]	@ (80168b8 <tcp_write+0x5ac>)
 80166b6:	f005 f911 	bl	801b8dc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80166ba:	8b3b      	ldrh	r3, [r7, #24]
 80166bc:	2201      	movs	r2, #1
 80166be:	4619      	mov	r1, r3
 80166c0:	2036      	movs	r0, #54	@ 0x36
 80166c2:	f7fa fdf7 	bl	80112b4 <pbuf_alloc>
 80166c6:	6178      	str	r0, [r7, #20]
 80166c8:	697b      	ldr	r3, [r7, #20]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	f000 814b 	beq.w	8016966 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80166d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80166d4:	68ba      	ldr	r2, [r7, #8]
 80166d6:	441a      	add	r2, r3
 80166d8:	697b      	ldr	r3, [r7, #20]
 80166da:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80166dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80166e0:	b29b      	uxth	r3, r3
 80166e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80166e6:	4619      	mov	r1, r3
 80166e8:	2036      	movs	r0, #54	@ 0x36
 80166ea:	f7fa fde3 	bl	80112b4 <pbuf_alloc>
 80166ee:	6338      	str	r0, [r7, #48]	@ 0x30
 80166f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d103      	bne.n	80166fe <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80166f6:	6978      	ldr	r0, [r7, #20]
 80166f8:	f7fb f8c0 	bl	801187c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80166fc:	e136      	b.n	801696c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80166fe:	6979      	ldr	r1, [r7, #20]
 8016700:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016702:	f7fb f989 	bl	8011a18 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8016706:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016708:	f7fb f946 	bl	8011998 <pbuf_clen>
 801670c:	4603      	mov	r3, r0
 801670e:	461a      	mov	r2, r3
 8016710:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016714:	4413      	add	r3, r2
 8016716:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801671a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801671e:	2b09      	cmp	r3, #9
 8016720:	d903      	bls.n	801672a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8016722:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016724:	f7fb f8aa 	bl	801187c <pbuf_free>
      goto memerr;
 8016728:	e120      	b.n	801696c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801672e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016732:	441a      	add	r2, r3
 8016734:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016738:	9300      	str	r3, [sp, #0]
 801673a:	4613      	mov	r3, r2
 801673c:	2200      	movs	r2, #0
 801673e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016740:	68f8      	ldr	r0, [r7, #12]
 8016742:	f7ff fc53 	bl	8015fec <tcp_create_segment>
 8016746:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8016748:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801674a:	2b00      	cmp	r3, #0
 801674c:	f000 810d 	beq.w	801696a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8016750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016752:	2b00      	cmp	r3, #0
 8016754:	d102      	bne.n	801675c <tcp_write+0x450>
      queue = seg;
 8016756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016758:	647b      	str	r3, [r7, #68]	@ 0x44
 801675a:	e00c      	b.n	8016776 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801675c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801675e:	2b00      	cmp	r3, #0
 8016760:	d106      	bne.n	8016770 <tcp_write+0x464>
 8016762:	4b53      	ldr	r3, [pc, #332]	@ (80168b0 <tcp_write+0x5a4>)
 8016764:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8016768:	4955      	ldr	r1, [pc, #340]	@ (80168c0 <tcp_write+0x5b4>)
 801676a:	4853      	ldr	r0, [pc, #332]	@ (80168b8 <tcp_write+0x5ac>)
 801676c:	f005 f8b6 	bl	801b8dc <iprintf>
      prev_seg->next = seg;
 8016770:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016772:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016774:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8016776:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016778:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801677a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801677e:	8b3b      	ldrh	r3, [r7, #24]
 8016780:	4413      	add	r3, r2
 8016782:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8016786:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801678a:	88fb      	ldrh	r3, [r7, #6]
 801678c:	429a      	cmp	r2, r3
 801678e:	f4ff af3d 	bcc.w	801660c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8016792:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016794:	2b00      	cmp	r3, #0
 8016796:	d02c      	beq.n	80167f2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8016798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801679a:	685b      	ldr	r3, [r3, #4]
 801679c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801679e:	e01e      	b.n	80167de <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80167a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167a2:	891a      	ldrh	r2, [r3, #8]
 80167a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80167a6:	4413      	add	r3, r2
 80167a8:	b29a      	uxth	r2, r3
 80167aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167ac:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80167ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d110      	bne.n	80167d8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80167b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167b8:	685b      	ldr	r3, [r3, #4]
 80167ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80167bc:	8952      	ldrh	r2, [r2, #10]
 80167be:	4413      	add	r3, r2
 80167c0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80167c2:	68b9      	ldr	r1, [r7, #8]
 80167c4:	4618      	mov	r0, r3
 80167c6:	f005 fa28 	bl	801bc1a <memcpy>
        p->len += oversize_used;
 80167ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167cc:	895a      	ldrh	r2, [r3, #10]
 80167ce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80167d0:	4413      	add	r3, r2
 80167d2:	b29a      	uxth	r2, r3
 80167d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167d6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80167d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80167de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d1dd      	bne.n	80167a0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80167e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80167e6:	891a      	ldrh	r2, [r3, #8]
 80167e8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80167ea:	4413      	add	r3, r2
 80167ec:	b29a      	uxth	r2, r3
 80167ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80167f0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80167f2:	8a7a      	ldrh	r2, [r7, #18]
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80167fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d018      	beq.n	8016832 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8016800:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016802:	2b00      	cmp	r3, #0
 8016804:	d106      	bne.n	8016814 <tcp_write+0x508>
 8016806:	4b2a      	ldr	r3, [pc, #168]	@ (80168b0 <tcp_write+0x5a4>)
 8016808:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801680c:	492d      	ldr	r1, [pc, #180]	@ (80168c4 <tcp_write+0x5b8>)
 801680e:	482a      	ldr	r0, [pc, #168]	@ (80168b8 <tcp_write+0x5ac>)
 8016810:	f005 f864 	bl	801b8dc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016816:	685b      	ldr	r3, [r3, #4]
 8016818:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801681a:	4618      	mov	r0, r3
 801681c:	f7fb f8fc 	bl	8011a18 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8016820:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016822:	891a      	ldrh	r2, [r3, #8]
 8016824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016826:	891b      	ldrh	r3, [r3, #8]
 8016828:	4413      	add	r3, r2
 801682a:	b29a      	uxth	r2, r3
 801682c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801682e:	811a      	strh	r2, [r3, #8]
 8016830:	e037      	b.n	80168a2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8016832:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016834:	2b00      	cmp	r3, #0
 8016836:	d034      	beq.n	80168a2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8016838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801683a:	2b00      	cmp	r3, #0
 801683c:	d003      	beq.n	8016846 <tcp_write+0x53a>
 801683e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016840:	685b      	ldr	r3, [r3, #4]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d106      	bne.n	8016854 <tcp_write+0x548>
 8016846:	4b1a      	ldr	r3, [pc, #104]	@ (80168b0 <tcp_write+0x5a4>)
 8016848:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801684c:	491e      	ldr	r1, [pc, #120]	@ (80168c8 <tcp_write+0x5bc>)
 801684e:	481a      	ldr	r0, [pc, #104]	@ (80168b8 <tcp_write+0x5ac>)
 8016850:	f005 f844 	bl	801b8dc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016856:	685b      	ldr	r3, [r3, #4]
 8016858:	62bb      	str	r3, [r7, #40]	@ 0x28
 801685a:	e009      	b.n	8016870 <tcp_write+0x564>
      p->tot_len += extendlen;
 801685c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801685e:	891a      	ldrh	r2, [r3, #8]
 8016860:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016862:	4413      	add	r3, r2
 8016864:	b29a      	uxth	r2, r3
 8016866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016868:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801686a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d1f1      	bne.n	801685c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8016878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801687a:	891a      	ldrh	r2, [r3, #8]
 801687c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801687e:	4413      	add	r3, r2
 8016880:	b29a      	uxth	r2, r3
 8016882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016884:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8016886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016888:	895a      	ldrh	r2, [r3, #10]
 801688a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801688c:	4413      	add	r3, r2
 801688e:	b29a      	uxth	r2, r3
 8016890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016892:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8016894:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016896:	891a      	ldrh	r2, [r3, #8]
 8016898:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801689a:	4413      	add	r3, r2
 801689c:	b29a      	uxth	r2, r3
 801689e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80168a0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80168a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d111      	bne.n	80168cc <tcp_write+0x5c0>
    pcb->unsent = queue;
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80168ac:	66da      	str	r2, [r3, #108]	@ 0x6c
 80168ae:	e010      	b.n	80168d2 <tcp_write+0x5c6>
 80168b0:	0801fadc 	.word	0x0801fadc
 80168b4:	0801fd7c 	.word	0x0801fd7c
 80168b8:	0801fb30 	.word	0x0801fb30
 80168bc:	0801fdbc 	.word	0x0801fdbc
 80168c0:	0801fdcc 	.word	0x0801fdcc
 80168c4:	0801fde0 	.word	0x0801fde0
 80168c8:	0801fe18 	.word	0x0801fe18
  } else {
    last_unsent->next = queue;
 80168cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80168ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80168d0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80168d6:	88fb      	ldrh	r3, [r7, #6]
 80168d8:	441a      	add	r2, r3
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80168e4:	88fb      	ldrh	r3, [r7, #6]
 80168e6:	1ad3      	subs	r3, r2, r3
 80168e8:	b29a      	uxth	r2, r3
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80168f0:	68fb      	ldr	r3, [r7, #12]
 80168f2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80168f6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016900:	2b00      	cmp	r3, #0
 8016902:	d00e      	beq.n	8016922 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016908:	2b00      	cmp	r3, #0
 801690a:	d10a      	bne.n	8016922 <tcp_write+0x616>
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016910:	2b00      	cmp	r3, #0
 8016912:	d106      	bne.n	8016922 <tcp_write+0x616>
 8016914:	4b2c      	ldr	r3, [pc, #176]	@ (80169c8 <tcp_write+0x6bc>)
 8016916:	f240 3212 	movw	r2, #786	@ 0x312
 801691a:	492c      	ldr	r1, [pc, #176]	@ (80169cc <tcp_write+0x6c0>)
 801691c:	482c      	ldr	r0, [pc, #176]	@ (80169d0 <tcp_write+0x6c4>)
 801691e:	f004 ffdd 	bl	801b8dc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8016922:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016924:	2b00      	cmp	r3, #0
 8016926:	d016      	beq.n	8016956 <tcp_write+0x64a>
 8016928:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801692a:	68db      	ldr	r3, [r3, #12]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d012      	beq.n	8016956 <tcp_write+0x64a>
 8016930:	797b      	ldrb	r3, [r7, #5]
 8016932:	f003 0302 	and.w	r3, r3, #2
 8016936:	2b00      	cmp	r3, #0
 8016938:	d10d      	bne.n	8016956 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801693a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801693c:	68db      	ldr	r3, [r3, #12]
 801693e:	899b      	ldrh	r3, [r3, #12]
 8016940:	b29c      	uxth	r4, r3
 8016942:	2008      	movs	r0, #8
 8016944:	f7f9 fbda 	bl	80100fc <lwip_htons>
 8016948:	4603      	mov	r3, r0
 801694a:	461a      	mov	r2, r3
 801694c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801694e:	68db      	ldr	r3, [r3, #12]
 8016950:	4322      	orrs	r2, r4
 8016952:	b292      	uxth	r2, r2
 8016954:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8016956:	2300      	movs	r3, #0
 8016958:	e031      	b.n	80169be <tcp_write+0x6b2>
          goto memerr;
 801695a:	bf00      	nop
 801695c:	e006      	b.n	801696c <tcp_write+0x660>
            goto memerr;
 801695e:	bf00      	nop
 8016960:	e004      	b.n	801696c <tcp_write+0x660>
        goto memerr;
 8016962:	bf00      	nop
 8016964:	e002      	b.n	801696c <tcp_write+0x660>
        goto memerr;
 8016966:	bf00      	nop
 8016968:	e000      	b.n	801696c <tcp_write+0x660>
      goto memerr;
 801696a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	8b5b      	ldrh	r3, [r3, #26]
 8016970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016974:	b29a      	uxth	r2, r3
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801697a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801697c:	2b00      	cmp	r3, #0
 801697e:	d002      	beq.n	8016986 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8016980:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016982:	f7fa ff7b 	bl	801187c <pbuf_free>
  }
  if (queue != NULL) {
 8016986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016988:	2b00      	cmp	r3, #0
 801698a:	d002      	beq.n	8016992 <tcp_write+0x686>
    tcp_segs_free(queue);
 801698c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801698e:	f7fc fb9b 	bl	80130c8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016998:	2b00      	cmp	r3, #0
 801699a:	d00e      	beq.n	80169ba <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d10a      	bne.n	80169ba <tcp_write+0x6ae>
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d106      	bne.n	80169ba <tcp_write+0x6ae>
 80169ac:	4b06      	ldr	r3, [pc, #24]	@ (80169c8 <tcp_write+0x6bc>)
 80169ae:	f240 3227 	movw	r2, #807	@ 0x327
 80169b2:	4906      	ldr	r1, [pc, #24]	@ (80169cc <tcp_write+0x6c0>)
 80169b4:	4806      	ldr	r0, [pc, #24]	@ (80169d0 <tcp_write+0x6c4>)
 80169b6:	f004 ff91 	bl	801b8dc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80169ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80169be:	4618      	mov	r0, r3
 80169c0:	375c      	adds	r7, #92	@ 0x5c
 80169c2:	46bd      	mov	sp, r7
 80169c4:	bd90      	pop	{r4, r7, pc}
 80169c6:	bf00      	nop
 80169c8:	0801fadc 	.word	0x0801fadc
 80169cc:	0801fe50 	.word	0x0801fe50
 80169d0:	0801fb30 	.word	0x0801fb30

080169d4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80169d4:	b590      	push	{r4, r7, lr}
 80169d6:	b08b      	sub	sp, #44	@ 0x2c
 80169d8:	af02      	add	r7, sp, #8
 80169da:	6078      	str	r0, [r7, #4]
 80169dc:	460b      	mov	r3, r1
 80169de:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80169e0:	2300      	movs	r3, #0
 80169e2:	61fb      	str	r3, [r7, #28]
 80169e4:	2300      	movs	r3, #0
 80169e6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80169e8:	2300      	movs	r3, #0
 80169ea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d106      	bne.n	8016a00 <tcp_split_unsent_seg+0x2c>
 80169f2:	4b95      	ldr	r3, [pc, #596]	@ (8016c48 <tcp_split_unsent_seg+0x274>)
 80169f4:	f240 324b 	movw	r2, #843	@ 0x34b
 80169f8:	4994      	ldr	r1, [pc, #592]	@ (8016c4c <tcp_split_unsent_seg+0x278>)
 80169fa:	4895      	ldr	r0, [pc, #596]	@ (8016c50 <tcp_split_unsent_seg+0x27c>)
 80169fc:	f004 ff6e 	bl	801b8dc <iprintf>

  useg = pcb->unsent;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a04:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016a06:	697b      	ldr	r3, [r7, #20]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d102      	bne.n	8016a12 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8016a10:	e116      	b.n	8016c40 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016a12:	887b      	ldrh	r3, [r7, #2]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d109      	bne.n	8016a2c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016a18:	4b8b      	ldr	r3, [pc, #556]	@ (8016c48 <tcp_split_unsent_seg+0x274>)
 8016a1a:	f240 3253 	movw	r2, #851	@ 0x353
 8016a1e:	498d      	ldr	r1, [pc, #564]	@ (8016c54 <tcp_split_unsent_seg+0x280>)
 8016a20:	488b      	ldr	r0, [pc, #556]	@ (8016c50 <tcp_split_unsent_seg+0x27c>)
 8016a22:	f004 ff5b 	bl	801b8dc <iprintf>
    return ERR_VAL;
 8016a26:	f06f 0305 	mvn.w	r3, #5
 8016a2a:	e109      	b.n	8016c40 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016a2c:	697b      	ldr	r3, [r7, #20]
 8016a2e:	891b      	ldrh	r3, [r3, #8]
 8016a30:	887a      	ldrh	r2, [r7, #2]
 8016a32:	429a      	cmp	r2, r3
 8016a34:	d301      	bcc.n	8016a3a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016a36:	2300      	movs	r3, #0
 8016a38:	e102      	b.n	8016c40 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016a3e:	887a      	ldrh	r2, [r7, #2]
 8016a40:	429a      	cmp	r2, r3
 8016a42:	d906      	bls.n	8016a52 <tcp_split_unsent_seg+0x7e>
 8016a44:	4b80      	ldr	r3, [pc, #512]	@ (8016c48 <tcp_split_unsent_seg+0x274>)
 8016a46:	f240 325b 	movw	r2, #859	@ 0x35b
 8016a4a:	4983      	ldr	r1, [pc, #524]	@ (8016c58 <tcp_split_unsent_seg+0x284>)
 8016a4c:	4880      	ldr	r0, [pc, #512]	@ (8016c50 <tcp_split_unsent_seg+0x27c>)
 8016a4e:	f004 ff45 	bl	801b8dc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8016a52:	697b      	ldr	r3, [r7, #20]
 8016a54:	891b      	ldrh	r3, [r3, #8]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d106      	bne.n	8016a68 <tcp_split_unsent_seg+0x94>
 8016a5a:	4b7b      	ldr	r3, [pc, #492]	@ (8016c48 <tcp_split_unsent_seg+0x274>)
 8016a5c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8016a60:	497e      	ldr	r1, [pc, #504]	@ (8016c5c <tcp_split_unsent_seg+0x288>)
 8016a62:	487b      	ldr	r0, [pc, #492]	@ (8016c50 <tcp_split_unsent_seg+0x27c>)
 8016a64:	f004 ff3a 	bl	801b8dc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016a68:	697b      	ldr	r3, [r7, #20]
 8016a6a:	7a9b      	ldrb	r3, [r3, #10]
 8016a6c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016a6e:	7bfb      	ldrb	r3, [r7, #15]
 8016a70:	009b      	lsls	r3, r3, #2
 8016a72:	b2db      	uxtb	r3, r3
 8016a74:	f003 0304 	and.w	r3, r3, #4
 8016a78:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8016a7a:	697b      	ldr	r3, [r7, #20]
 8016a7c:	891a      	ldrh	r2, [r3, #8]
 8016a7e:	887b      	ldrh	r3, [r7, #2]
 8016a80:	1ad3      	subs	r3, r2, r3
 8016a82:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016a84:	7bbb      	ldrb	r3, [r7, #14]
 8016a86:	b29a      	uxth	r2, r3
 8016a88:	89bb      	ldrh	r3, [r7, #12]
 8016a8a:	4413      	add	r3, r2
 8016a8c:	b29b      	uxth	r3, r3
 8016a8e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016a92:	4619      	mov	r1, r3
 8016a94:	2036      	movs	r0, #54	@ 0x36
 8016a96:	f7fa fc0d 	bl	80112b4 <pbuf_alloc>
 8016a9a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016a9c:	693b      	ldr	r3, [r7, #16]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	f000 80b7 	beq.w	8016c12 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016aa4:	697b      	ldr	r3, [r7, #20]
 8016aa6:	685b      	ldr	r3, [r3, #4]
 8016aa8:	891a      	ldrh	r2, [r3, #8]
 8016aaa:	697b      	ldr	r3, [r7, #20]
 8016aac:	891b      	ldrh	r3, [r3, #8]
 8016aae:	1ad3      	subs	r3, r2, r3
 8016ab0:	b29a      	uxth	r2, r3
 8016ab2:	887b      	ldrh	r3, [r7, #2]
 8016ab4:	4413      	add	r3, r2
 8016ab6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8016ab8:	697b      	ldr	r3, [r7, #20]
 8016aba:	6858      	ldr	r0, [r3, #4]
 8016abc:	693b      	ldr	r3, [r7, #16]
 8016abe:	685a      	ldr	r2, [r3, #4]
 8016ac0:	7bbb      	ldrb	r3, [r7, #14]
 8016ac2:	18d1      	adds	r1, r2, r3
 8016ac4:	897b      	ldrh	r3, [r7, #10]
 8016ac6:	89ba      	ldrh	r2, [r7, #12]
 8016ac8:	f7fb f8ce 	bl	8011c68 <pbuf_copy_partial>
 8016acc:	4603      	mov	r3, r0
 8016ace:	461a      	mov	r2, r3
 8016ad0:	89bb      	ldrh	r3, [r7, #12]
 8016ad2:	4293      	cmp	r3, r2
 8016ad4:	f040 809f 	bne.w	8016c16 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016ad8:	697b      	ldr	r3, [r7, #20]
 8016ada:	68db      	ldr	r3, [r3, #12]
 8016adc:	899b      	ldrh	r3, [r3, #12]
 8016ade:	b29b      	uxth	r3, r3
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	f7f9 fb0b 	bl	80100fc <lwip_htons>
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	b2db      	uxtb	r3, r3
 8016aea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016aee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016af0:	2300      	movs	r3, #0
 8016af2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016af4:	7efb      	ldrb	r3, [r7, #27]
 8016af6:	f003 0308 	and.w	r3, r3, #8
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d007      	beq.n	8016b0e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8016afe:	7efb      	ldrb	r3, [r7, #27]
 8016b00:	f023 0308 	bic.w	r3, r3, #8
 8016b04:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016b06:	7ebb      	ldrb	r3, [r7, #26]
 8016b08:	f043 0308 	orr.w	r3, r3, #8
 8016b0c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8016b0e:	7efb      	ldrb	r3, [r7, #27]
 8016b10:	f003 0301 	and.w	r3, r3, #1
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d007      	beq.n	8016b28 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016b18:	7efb      	ldrb	r3, [r7, #27]
 8016b1a:	f023 0301 	bic.w	r3, r3, #1
 8016b1e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016b20:	7ebb      	ldrb	r3, [r7, #26]
 8016b22:	f043 0301 	orr.w	r3, r3, #1
 8016b26:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016b28:	697b      	ldr	r3, [r7, #20]
 8016b2a:	68db      	ldr	r3, [r3, #12]
 8016b2c:	685b      	ldr	r3, [r3, #4]
 8016b2e:	4618      	mov	r0, r3
 8016b30:	f7f9 fafa 	bl	8010128 <lwip_htonl>
 8016b34:	4602      	mov	r2, r0
 8016b36:	887b      	ldrh	r3, [r7, #2]
 8016b38:	18d1      	adds	r1, r2, r3
 8016b3a:	7eba      	ldrb	r2, [r7, #26]
 8016b3c:	7bfb      	ldrb	r3, [r7, #15]
 8016b3e:	9300      	str	r3, [sp, #0]
 8016b40:	460b      	mov	r3, r1
 8016b42:	6939      	ldr	r1, [r7, #16]
 8016b44:	6878      	ldr	r0, [r7, #4]
 8016b46:	f7ff fa51 	bl	8015fec <tcp_create_segment>
 8016b4a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016b4c:	69fb      	ldr	r3, [r7, #28]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d063      	beq.n	8016c1a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016b52:	697b      	ldr	r3, [r7, #20]
 8016b54:	685b      	ldr	r3, [r3, #4]
 8016b56:	4618      	mov	r0, r3
 8016b58:	f7fa ff1e 	bl	8011998 <pbuf_clen>
 8016b5c:	4603      	mov	r3, r0
 8016b5e:	461a      	mov	r2, r3
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016b66:	1a9b      	subs	r3, r3, r2
 8016b68:	b29a      	uxth	r2, r3
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016b70:	697b      	ldr	r3, [r7, #20]
 8016b72:	6858      	ldr	r0, [r3, #4]
 8016b74:	697b      	ldr	r3, [r7, #20]
 8016b76:	685b      	ldr	r3, [r3, #4]
 8016b78:	891a      	ldrh	r2, [r3, #8]
 8016b7a:	89bb      	ldrh	r3, [r7, #12]
 8016b7c:	1ad3      	subs	r3, r2, r3
 8016b7e:	b29b      	uxth	r3, r3
 8016b80:	4619      	mov	r1, r3
 8016b82:	f7fa fcf5 	bl	8011570 <pbuf_realloc>
  useg->len -= remainder;
 8016b86:	697b      	ldr	r3, [r7, #20]
 8016b88:	891a      	ldrh	r2, [r3, #8]
 8016b8a:	89bb      	ldrh	r3, [r7, #12]
 8016b8c:	1ad3      	subs	r3, r2, r3
 8016b8e:	b29a      	uxth	r2, r3
 8016b90:	697b      	ldr	r3, [r7, #20]
 8016b92:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016b94:	697b      	ldr	r3, [r7, #20]
 8016b96:	68db      	ldr	r3, [r3, #12]
 8016b98:	899b      	ldrh	r3, [r3, #12]
 8016b9a:	b29c      	uxth	r4, r3
 8016b9c:	7efb      	ldrb	r3, [r7, #27]
 8016b9e:	b29b      	uxth	r3, r3
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	f7f9 faab 	bl	80100fc <lwip_htons>
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	461a      	mov	r2, r3
 8016baa:	697b      	ldr	r3, [r7, #20]
 8016bac:	68db      	ldr	r3, [r3, #12]
 8016bae:	4322      	orrs	r2, r4
 8016bb0:	b292      	uxth	r2, r2
 8016bb2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016bb4:	697b      	ldr	r3, [r7, #20]
 8016bb6:	685b      	ldr	r3, [r3, #4]
 8016bb8:	4618      	mov	r0, r3
 8016bba:	f7fa feed 	bl	8011998 <pbuf_clen>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	461a      	mov	r2, r3
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016bc8:	4413      	add	r3, r2
 8016bca:	b29a      	uxth	r2, r3
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016bd2:	69fb      	ldr	r3, [r7, #28]
 8016bd4:	685b      	ldr	r3, [r3, #4]
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	f7fa fede 	bl	8011998 <pbuf_clen>
 8016bdc:	4603      	mov	r3, r0
 8016bde:	461a      	mov	r2, r3
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016be6:	4413      	add	r3, r2
 8016be8:	b29a      	uxth	r2, r3
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016bf0:	697b      	ldr	r3, [r7, #20]
 8016bf2:	681a      	ldr	r2, [r3, #0]
 8016bf4:	69fb      	ldr	r3, [r7, #28]
 8016bf6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016bf8:	697b      	ldr	r3, [r7, #20]
 8016bfa:	69fa      	ldr	r2, [r7, #28]
 8016bfc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016bfe:	69fb      	ldr	r3, [r7, #28]
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d103      	bne.n	8016c0e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	2200      	movs	r2, #0
 8016c0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8016c0e:	2300      	movs	r3, #0
 8016c10:	e016      	b.n	8016c40 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016c12:	bf00      	nop
 8016c14:	e002      	b.n	8016c1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016c16:	bf00      	nop
 8016c18:	e000      	b.n	8016c1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016c1a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016c1c:	69fb      	ldr	r3, [r7, #28]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d006      	beq.n	8016c30 <tcp_split_unsent_seg+0x25c>
 8016c22:	4b09      	ldr	r3, [pc, #36]	@ (8016c48 <tcp_split_unsent_seg+0x274>)
 8016c24:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8016c28:	490d      	ldr	r1, [pc, #52]	@ (8016c60 <tcp_split_unsent_seg+0x28c>)
 8016c2a:	4809      	ldr	r0, [pc, #36]	@ (8016c50 <tcp_split_unsent_seg+0x27c>)
 8016c2c:	f004 fe56 	bl	801b8dc <iprintf>
  if (p != NULL) {
 8016c30:	693b      	ldr	r3, [r7, #16]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d002      	beq.n	8016c3c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016c36:	6938      	ldr	r0, [r7, #16]
 8016c38:	f7fa fe20 	bl	801187c <pbuf_free>
  }

  return ERR_MEM;
 8016c3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016c40:	4618      	mov	r0, r3
 8016c42:	3724      	adds	r7, #36	@ 0x24
 8016c44:	46bd      	mov	sp, r7
 8016c46:	bd90      	pop	{r4, r7, pc}
 8016c48:	0801fadc 	.word	0x0801fadc
 8016c4c:	0801fe70 	.word	0x0801fe70
 8016c50:	0801fb30 	.word	0x0801fb30
 8016c54:	0801fe94 	.word	0x0801fe94
 8016c58:	0801feb8 	.word	0x0801feb8
 8016c5c:	0801fec8 	.word	0x0801fec8
 8016c60:	0801fed8 	.word	0x0801fed8

08016c64 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016c64:	b590      	push	{r4, r7, lr}
 8016c66:	b085      	sub	sp, #20
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d106      	bne.n	8016c80 <tcp_send_fin+0x1c>
 8016c72:	4b21      	ldr	r3, [pc, #132]	@ (8016cf8 <tcp_send_fin+0x94>)
 8016c74:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8016c78:	4920      	ldr	r1, [pc, #128]	@ (8016cfc <tcp_send_fin+0x98>)
 8016c7a:	4821      	ldr	r0, [pc, #132]	@ (8016d00 <tcp_send_fin+0x9c>)
 8016c7c:	f004 fe2e 	bl	801b8dc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d02e      	beq.n	8016ce6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016c8c:	60fb      	str	r3, [r7, #12]
 8016c8e:	e002      	b.n	8016c96 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d1f8      	bne.n	8016c90 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016c9e:	68fb      	ldr	r3, [r7, #12]
 8016ca0:	68db      	ldr	r3, [r3, #12]
 8016ca2:	899b      	ldrh	r3, [r3, #12]
 8016ca4:	b29b      	uxth	r3, r3
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	f7f9 fa28 	bl	80100fc <lwip_htons>
 8016cac:	4603      	mov	r3, r0
 8016cae:	b2db      	uxtb	r3, r3
 8016cb0:	f003 0307 	and.w	r3, r3, #7
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d116      	bne.n	8016ce6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	68db      	ldr	r3, [r3, #12]
 8016cbc:	899b      	ldrh	r3, [r3, #12]
 8016cbe:	b29c      	uxth	r4, r3
 8016cc0:	2001      	movs	r0, #1
 8016cc2:	f7f9 fa1b 	bl	80100fc <lwip_htons>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	461a      	mov	r2, r3
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	68db      	ldr	r3, [r3, #12]
 8016cce:	4322      	orrs	r2, r4
 8016cd0:	b292      	uxth	r2, r2
 8016cd2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	8b5b      	ldrh	r3, [r3, #26]
 8016cd8:	f043 0320 	orr.w	r3, r3, #32
 8016cdc:	b29a      	uxth	r2, r3
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	e004      	b.n	8016cf0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016ce6:	2101      	movs	r1, #1
 8016ce8:	6878      	ldr	r0, [r7, #4]
 8016cea:	f000 f80b 	bl	8016d04 <tcp_enqueue_flags>
 8016cee:	4603      	mov	r3, r0
}
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	3714      	adds	r7, #20
 8016cf4:	46bd      	mov	sp, r7
 8016cf6:	bd90      	pop	{r4, r7, pc}
 8016cf8:	0801fadc 	.word	0x0801fadc
 8016cfc:	0801fee4 	.word	0x0801fee4
 8016d00:	0801fb30 	.word	0x0801fb30

08016d04 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b08a      	sub	sp, #40	@ 0x28
 8016d08:	af02      	add	r7, sp, #8
 8016d0a:	6078      	str	r0, [r7, #4]
 8016d0c:	460b      	mov	r3, r1
 8016d0e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016d10:	2300      	movs	r3, #0
 8016d12:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016d14:	2300      	movs	r3, #0
 8016d16:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016d18:	78fb      	ldrb	r3, [r7, #3]
 8016d1a:	f003 0303 	and.w	r3, r3, #3
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d106      	bne.n	8016d30 <tcp_enqueue_flags+0x2c>
 8016d22:	4b67      	ldr	r3, [pc, #412]	@ (8016ec0 <tcp_enqueue_flags+0x1bc>)
 8016d24:	f240 4211 	movw	r2, #1041	@ 0x411
 8016d28:	4966      	ldr	r1, [pc, #408]	@ (8016ec4 <tcp_enqueue_flags+0x1c0>)
 8016d2a:	4867      	ldr	r0, [pc, #412]	@ (8016ec8 <tcp_enqueue_flags+0x1c4>)
 8016d2c:	f004 fdd6 	bl	801b8dc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d106      	bne.n	8016d44 <tcp_enqueue_flags+0x40>
 8016d36:	4b62      	ldr	r3, [pc, #392]	@ (8016ec0 <tcp_enqueue_flags+0x1bc>)
 8016d38:	f240 4213 	movw	r2, #1043	@ 0x413
 8016d3c:	4963      	ldr	r1, [pc, #396]	@ (8016ecc <tcp_enqueue_flags+0x1c8>)
 8016d3e:	4862      	ldr	r0, [pc, #392]	@ (8016ec8 <tcp_enqueue_flags+0x1c4>)
 8016d40:	f004 fdcc 	bl	801b8dc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016d44:	78fb      	ldrb	r3, [r7, #3]
 8016d46:	f003 0302 	and.w	r3, r3, #2
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d001      	beq.n	8016d52 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016d4e:	2301      	movs	r3, #1
 8016d50:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016d52:	7ffb      	ldrb	r3, [r7, #31]
 8016d54:	009b      	lsls	r3, r3, #2
 8016d56:	b2db      	uxtb	r3, r3
 8016d58:	f003 0304 	and.w	r3, r3, #4
 8016d5c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016d5e:	7dfb      	ldrb	r3, [r7, #23]
 8016d60:	b29b      	uxth	r3, r3
 8016d62:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016d66:	4619      	mov	r1, r3
 8016d68:	2036      	movs	r0, #54	@ 0x36
 8016d6a:	f7fa faa3 	bl	80112b4 <pbuf_alloc>
 8016d6e:	6138      	str	r0, [r7, #16]
 8016d70:	693b      	ldr	r3, [r7, #16]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d109      	bne.n	8016d8a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	8b5b      	ldrh	r3, [r3, #26]
 8016d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016d7e:	b29a      	uxth	r2, r3
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016d84:	f04f 33ff 	mov.w	r3, #4294967295
 8016d88:	e095      	b.n	8016eb6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016d8a:	693b      	ldr	r3, [r7, #16]
 8016d8c:	895a      	ldrh	r2, [r3, #10]
 8016d8e:	7dfb      	ldrb	r3, [r7, #23]
 8016d90:	b29b      	uxth	r3, r3
 8016d92:	429a      	cmp	r2, r3
 8016d94:	d206      	bcs.n	8016da4 <tcp_enqueue_flags+0xa0>
 8016d96:	4b4a      	ldr	r3, [pc, #296]	@ (8016ec0 <tcp_enqueue_flags+0x1bc>)
 8016d98:	f240 4239 	movw	r2, #1081	@ 0x439
 8016d9c:	494c      	ldr	r1, [pc, #304]	@ (8016ed0 <tcp_enqueue_flags+0x1cc>)
 8016d9e:	484a      	ldr	r0, [pc, #296]	@ (8016ec8 <tcp_enqueue_flags+0x1c4>)
 8016da0:	f004 fd9c 	bl	801b8dc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8016da8:	78fa      	ldrb	r2, [r7, #3]
 8016daa:	7ffb      	ldrb	r3, [r7, #31]
 8016dac:	9300      	str	r3, [sp, #0]
 8016dae:	460b      	mov	r3, r1
 8016db0:	6939      	ldr	r1, [r7, #16]
 8016db2:	6878      	ldr	r0, [r7, #4]
 8016db4:	f7ff f91a 	bl	8015fec <tcp_create_segment>
 8016db8:	60f8      	str	r0, [r7, #12]
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d109      	bne.n	8016dd4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	8b5b      	ldrh	r3, [r3, #26]
 8016dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016dc8:	b29a      	uxth	r2, r3
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016dce:	f04f 33ff 	mov.w	r3, #4294967295
 8016dd2:	e070      	b.n	8016eb6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	68db      	ldr	r3, [r3, #12]
 8016dd8:	f003 0303 	and.w	r3, r3, #3
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d006      	beq.n	8016dee <tcp_enqueue_flags+0xea>
 8016de0:	4b37      	ldr	r3, [pc, #220]	@ (8016ec0 <tcp_enqueue_flags+0x1bc>)
 8016de2:	f240 4242 	movw	r2, #1090	@ 0x442
 8016de6:	493b      	ldr	r1, [pc, #236]	@ (8016ed4 <tcp_enqueue_flags+0x1d0>)
 8016de8:	4837      	ldr	r0, [pc, #220]	@ (8016ec8 <tcp_enqueue_flags+0x1c4>)
 8016dea:	f004 fd77 	bl	801b8dc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	891b      	ldrh	r3, [r3, #8]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d006      	beq.n	8016e04 <tcp_enqueue_flags+0x100>
 8016df6:	4b32      	ldr	r3, [pc, #200]	@ (8016ec0 <tcp_enqueue_flags+0x1bc>)
 8016df8:	f240 4243 	movw	r2, #1091	@ 0x443
 8016dfc:	4936      	ldr	r1, [pc, #216]	@ (8016ed8 <tcp_enqueue_flags+0x1d4>)
 8016dfe:	4832      	ldr	r0, [pc, #200]	@ (8016ec8 <tcp_enqueue_flags+0x1c4>)
 8016e00:	f004 fd6c 	bl	801b8dc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d103      	bne.n	8016e14 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	68fa      	ldr	r2, [r7, #12]
 8016e10:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016e12:	e00d      	b.n	8016e30 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016e18:	61bb      	str	r3, [r7, #24]
 8016e1a:	e002      	b.n	8016e22 <tcp_enqueue_flags+0x11e>
 8016e1c:	69bb      	ldr	r3, [r7, #24]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	61bb      	str	r3, [r7, #24]
 8016e22:	69bb      	ldr	r3, [r7, #24]
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d1f8      	bne.n	8016e1c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016e2a:	69bb      	ldr	r3, [r7, #24]
 8016e2c:	68fa      	ldr	r2, [r7, #12]
 8016e2e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	2200      	movs	r2, #0
 8016e34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016e38:	78fb      	ldrb	r3, [r7, #3]
 8016e3a:	f003 0302 	and.w	r3, r3, #2
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d104      	bne.n	8016e4c <tcp_enqueue_flags+0x148>
 8016e42:	78fb      	ldrb	r3, [r7, #3]
 8016e44:	f003 0301 	and.w	r3, r3, #1
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d004      	beq.n	8016e56 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016e50:	1c5a      	adds	r2, r3, #1
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016e56:	78fb      	ldrb	r3, [r7, #3]
 8016e58:	f003 0301 	and.w	r3, r3, #1
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d006      	beq.n	8016e6e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	8b5b      	ldrh	r3, [r3, #26]
 8016e64:	f043 0320 	orr.w	r3, r3, #32
 8016e68:	b29a      	uxth	r2, r3
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	685b      	ldr	r3, [r3, #4]
 8016e72:	4618      	mov	r0, r3
 8016e74:	f7fa fd90 	bl	8011998 <pbuf_clen>
 8016e78:	4603      	mov	r3, r0
 8016e7a:	461a      	mov	r2, r3
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016e82:	4413      	add	r3, r2
 8016e84:	b29a      	uxth	r2, r3
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d00e      	beq.n	8016eb4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d10a      	bne.n	8016eb4 <tcp_enqueue_flags+0x1b0>
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d106      	bne.n	8016eb4 <tcp_enqueue_flags+0x1b0>
 8016ea6:	4b06      	ldr	r3, [pc, #24]	@ (8016ec0 <tcp_enqueue_flags+0x1bc>)
 8016ea8:	f240 4265 	movw	r2, #1125	@ 0x465
 8016eac:	490b      	ldr	r1, [pc, #44]	@ (8016edc <tcp_enqueue_flags+0x1d8>)
 8016eae:	4806      	ldr	r0, [pc, #24]	@ (8016ec8 <tcp_enqueue_flags+0x1c4>)
 8016eb0:	f004 fd14 	bl	801b8dc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016eb4:	2300      	movs	r3, #0
}
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	3720      	adds	r7, #32
 8016eba:	46bd      	mov	sp, r7
 8016ebc:	bd80      	pop	{r7, pc}
 8016ebe:	bf00      	nop
 8016ec0:	0801fadc 	.word	0x0801fadc
 8016ec4:	0801ff00 	.word	0x0801ff00
 8016ec8:	0801fb30 	.word	0x0801fb30
 8016ecc:	0801ff58 	.word	0x0801ff58
 8016ed0:	0801ff78 	.word	0x0801ff78
 8016ed4:	0801ffb4 	.word	0x0801ffb4
 8016ed8:	0801ffcc 	.word	0x0801ffcc
 8016edc:	0801fff8 	.word	0x0801fff8

08016ee0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016ee0:	b5b0      	push	{r4, r5, r7, lr}
 8016ee2:	b08a      	sub	sp, #40	@ 0x28
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d106      	bne.n	8016efc <tcp_output+0x1c>
 8016eee:	4b8a      	ldr	r3, [pc, #552]	@ (8017118 <tcp_output+0x238>)
 8016ef0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8016ef4:	4989      	ldr	r1, [pc, #548]	@ (801711c <tcp_output+0x23c>)
 8016ef6:	488a      	ldr	r0, [pc, #552]	@ (8017120 <tcp_output+0x240>)
 8016ef8:	f004 fcf0 	bl	801b8dc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	7d1b      	ldrb	r3, [r3, #20]
 8016f00:	2b01      	cmp	r3, #1
 8016f02:	d106      	bne.n	8016f12 <tcp_output+0x32>
 8016f04:	4b84      	ldr	r3, [pc, #528]	@ (8017118 <tcp_output+0x238>)
 8016f06:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8016f0a:	4986      	ldr	r1, [pc, #536]	@ (8017124 <tcp_output+0x244>)
 8016f0c:	4884      	ldr	r0, [pc, #528]	@ (8017120 <tcp_output+0x240>)
 8016f0e:	f004 fce5 	bl	801b8dc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016f12:	4b85      	ldr	r3, [pc, #532]	@ (8017128 <tcp_output+0x248>)
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	687a      	ldr	r2, [r7, #4]
 8016f18:	429a      	cmp	r2, r3
 8016f1a:	d101      	bne.n	8016f20 <tcp_output+0x40>
    return ERR_OK;
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	e1ce      	b.n	80172be <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016f2c:	4293      	cmp	r3, r2
 8016f2e:	bf28      	it	cs
 8016f30:	4613      	movcs	r3, r2
 8016f32:	b29b      	uxth	r3, r3
 8016f34:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016f3a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8016f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d10b      	bne.n	8016f5a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	8b5b      	ldrh	r3, [r3, #26]
 8016f46:	f003 0302 	and.w	r3, r3, #2
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	f000 81aa 	beq.w	80172a4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016f50:	6878      	ldr	r0, [r7, #4]
 8016f52:	f000 fdcb 	bl	8017aec <tcp_send_empty_ack>
 8016f56:	4603      	mov	r3, r0
 8016f58:	e1b1      	b.n	80172be <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016f5a:	6879      	ldr	r1, [r7, #4]
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	3304      	adds	r3, #4
 8016f60:	461a      	mov	r2, r3
 8016f62:	6878      	ldr	r0, [r7, #4]
 8016f64:	f7ff f826 	bl	8015fb4 <tcp_route>
 8016f68:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016f6a:	697b      	ldr	r3, [r7, #20]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d102      	bne.n	8016f76 <tcp_output+0x96>
    return ERR_RTE;
 8016f70:	f06f 0303 	mvn.w	r3, #3
 8016f74:	e1a3      	b.n	80172be <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d003      	beq.n	8016f84 <tcp_output+0xa4>
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d111      	bne.n	8016fa8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016f84:	697b      	ldr	r3, [r7, #20]
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d002      	beq.n	8016f90 <tcp_output+0xb0>
 8016f8a:	697b      	ldr	r3, [r7, #20]
 8016f8c:	3304      	adds	r3, #4
 8016f8e:	e000      	b.n	8016f92 <tcp_output+0xb2>
 8016f90:	2300      	movs	r3, #0
 8016f92:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016f94:	693b      	ldr	r3, [r7, #16]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d102      	bne.n	8016fa0 <tcp_output+0xc0>
      return ERR_RTE;
 8016f9a:	f06f 0303 	mvn.w	r3, #3
 8016f9e:	e18e      	b.n	80172be <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016fa0:	693b      	ldr	r3, [r7, #16]
 8016fa2:	681a      	ldr	r2, [r3, #0]
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016faa:	68db      	ldr	r3, [r3, #12]
 8016fac:	685b      	ldr	r3, [r3, #4]
 8016fae:	4618      	mov	r0, r3
 8016fb0:	f7f9 f8ba 	bl	8010128 <lwip_htonl>
 8016fb4:	4602      	mov	r2, r0
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016fba:	1ad3      	subs	r3, r2, r3
 8016fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016fbe:	8912      	ldrh	r2, [r2, #8]
 8016fc0:	4413      	add	r3, r2
 8016fc2:	69ba      	ldr	r2, [r7, #24]
 8016fc4:	429a      	cmp	r2, r3
 8016fc6:	d227      	bcs.n	8017018 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016fce:	461a      	mov	r2, r3
 8016fd0:	69bb      	ldr	r3, [r7, #24]
 8016fd2:	4293      	cmp	r3, r2
 8016fd4:	d114      	bne.n	8017000 <tcp_output+0x120>
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d110      	bne.n	8017000 <tcp_output+0x120>
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d10b      	bne.n	8017000 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	2200      	movs	r2, #0
 8016fec:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	2201      	movs	r2, #1
 8016ff4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	2200      	movs	r2, #0
 8016ffc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	8b5b      	ldrh	r3, [r3, #26]
 8017004:	f003 0302 	and.w	r3, r3, #2
 8017008:	2b00      	cmp	r3, #0
 801700a:	f000 814d 	beq.w	80172a8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801700e:	6878      	ldr	r0, [r7, #4]
 8017010:	f000 fd6c 	bl	8017aec <tcp_send_empty_ack>
 8017014:	4603      	mov	r3, r0
 8017016:	e152      	b.n	80172be <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	2200      	movs	r2, #0
 801701c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017024:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8017026:	6a3b      	ldr	r3, [r7, #32]
 8017028:	2b00      	cmp	r3, #0
 801702a:	f000 811c 	beq.w	8017266 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801702e:	e002      	b.n	8017036 <tcp_output+0x156>
 8017030:	6a3b      	ldr	r3, [r7, #32]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	623b      	str	r3, [r7, #32]
 8017036:	6a3b      	ldr	r3, [r7, #32]
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d1f8      	bne.n	8017030 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801703e:	e112      	b.n	8017266 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8017040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017042:	68db      	ldr	r3, [r3, #12]
 8017044:	899b      	ldrh	r3, [r3, #12]
 8017046:	b29b      	uxth	r3, r3
 8017048:	4618      	mov	r0, r3
 801704a:	f7f9 f857 	bl	80100fc <lwip_htons>
 801704e:	4603      	mov	r3, r0
 8017050:	b2db      	uxtb	r3, r3
 8017052:	f003 0304 	and.w	r3, r3, #4
 8017056:	2b00      	cmp	r3, #0
 8017058:	d006      	beq.n	8017068 <tcp_output+0x188>
 801705a:	4b2f      	ldr	r3, [pc, #188]	@ (8017118 <tcp_output+0x238>)
 801705c:	f240 5236 	movw	r2, #1334	@ 0x536
 8017060:	4932      	ldr	r1, [pc, #200]	@ (801712c <tcp_output+0x24c>)
 8017062:	482f      	ldr	r0, [pc, #188]	@ (8017120 <tcp_output+0x240>)
 8017064:	f004 fc3a 	bl	801b8dc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801706c:	2b00      	cmp	r3, #0
 801706e:	d01f      	beq.n	80170b0 <tcp_output+0x1d0>
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	8b5b      	ldrh	r3, [r3, #26]
 8017074:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8017078:	2b00      	cmp	r3, #0
 801707a:	d119      	bne.n	80170b0 <tcp_output+0x1d0>
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017080:	2b00      	cmp	r3, #0
 8017082:	d00b      	beq.n	801709c <tcp_output+0x1bc>
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d110      	bne.n	80170b0 <tcp_output+0x1d0>
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017092:	891a      	ldrh	r2, [r3, #8]
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017098:	429a      	cmp	r2, r3
 801709a:	d209      	bcs.n	80170b0 <tcp_output+0x1d0>
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d004      	beq.n	80170b0 <tcp_output+0x1d0>
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80170ac:	2b08      	cmp	r3, #8
 80170ae:	d901      	bls.n	80170b4 <tcp_output+0x1d4>
 80170b0:	2301      	movs	r3, #1
 80170b2:	e000      	b.n	80170b6 <tcp_output+0x1d6>
 80170b4:	2300      	movs	r3, #0
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d106      	bne.n	80170c8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	8b5b      	ldrh	r3, [r3, #26]
 80170be:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	f000 80e4 	beq.w	8017290 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	7d1b      	ldrb	r3, [r3, #20]
 80170cc:	2b02      	cmp	r3, #2
 80170ce:	d00d      	beq.n	80170ec <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80170d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170d2:	68db      	ldr	r3, [r3, #12]
 80170d4:	899b      	ldrh	r3, [r3, #12]
 80170d6:	b29c      	uxth	r4, r3
 80170d8:	2010      	movs	r0, #16
 80170da:	f7f9 f80f 	bl	80100fc <lwip_htons>
 80170de:	4603      	mov	r3, r0
 80170e0:	461a      	mov	r2, r3
 80170e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170e4:	68db      	ldr	r3, [r3, #12]
 80170e6:	4322      	orrs	r2, r4
 80170e8:	b292      	uxth	r2, r2
 80170ea:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80170ec:	697a      	ldr	r2, [r7, #20]
 80170ee:	6879      	ldr	r1, [r7, #4]
 80170f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80170f2:	f000 f909 	bl	8017308 <tcp_output_segment>
 80170f6:	4603      	mov	r3, r0
 80170f8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80170fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d016      	beq.n	8017130 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	8b5b      	ldrh	r3, [r3, #26]
 8017106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801710a:	b29a      	uxth	r2, r3
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	835a      	strh	r2, [r3, #26]
      return err;
 8017110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017114:	e0d3      	b.n	80172be <tcp_output+0x3de>
 8017116:	bf00      	nop
 8017118:	0801fadc 	.word	0x0801fadc
 801711c:	08020020 	.word	0x08020020
 8017120:	0801fb30 	.word	0x0801fb30
 8017124:	08020038 	.word	0x08020038
 8017128:	2000c8fc 	.word	0x2000c8fc
 801712c:	08020060 	.word	0x08020060
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8017130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017132:	681a      	ldr	r2, [r3, #0]
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	7d1b      	ldrb	r3, [r3, #20]
 801713c:	2b02      	cmp	r3, #2
 801713e:	d006      	beq.n	801714e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	8b5b      	ldrh	r3, [r3, #26]
 8017144:	f023 0303 	bic.w	r3, r3, #3
 8017148:	b29a      	uxth	r2, r3
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017150:	68db      	ldr	r3, [r3, #12]
 8017152:	685b      	ldr	r3, [r3, #4]
 8017154:	4618      	mov	r0, r3
 8017156:	f7f8 ffe7 	bl	8010128 <lwip_htonl>
 801715a:	4604      	mov	r4, r0
 801715c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801715e:	891b      	ldrh	r3, [r3, #8]
 8017160:	461d      	mov	r5, r3
 8017162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017164:	68db      	ldr	r3, [r3, #12]
 8017166:	899b      	ldrh	r3, [r3, #12]
 8017168:	b29b      	uxth	r3, r3
 801716a:	4618      	mov	r0, r3
 801716c:	f7f8 ffc6 	bl	80100fc <lwip_htons>
 8017170:	4603      	mov	r3, r0
 8017172:	b2db      	uxtb	r3, r3
 8017174:	f003 0303 	and.w	r3, r3, #3
 8017178:	2b00      	cmp	r3, #0
 801717a:	d001      	beq.n	8017180 <tcp_output+0x2a0>
 801717c:	2301      	movs	r3, #1
 801717e:	e000      	b.n	8017182 <tcp_output+0x2a2>
 8017180:	2300      	movs	r3, #0
 8017182:	442b      	add	r3, r5
 8017184:	4423      	add	r3, r4
 8017186:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801718c:	68bb      	ldr	r3, [r7, #8]
 801718e:	1ad3      	subs	r3, r2, r3
 8017190:	2b00      	cmp	r3, #0
 8017192:	da02      	bge.n	801719a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	68ba      	ldr	r2, [r7, #8]
 8017198:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801719a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801719c:	891b      	ldrh	r3, [r3, #8]
 801719e:	461c      	mov	r4, r3
 80171a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171a2:	68db      	ldr	r3, [r3, #12]
 80171a4:	899b      	ldrh	r3, [r3, #12]
 80171a6:	b29b      	uxth	r3, r3
 80171a8:	4618      	mov	r0, r3
 80171aa:	f7f8 ffa7 	bl	80100fc <lwip_htons>
 80171ae:	4603      	mov	r3, r0
 80171b0:	b2db      	uxtb	r3, r3
 80171b2:	f003 0303 	and.w	r3, r3, #3
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d001      	beq.n	80171be <tcp_output+0x2de>
 80171ba:	2301      	movs	r3, #1
 80171bc:	e000      	b.n	80171c0 <tcp_output+0x2e0>
 80171be:	2300      	movs	r3, #0
 80171c0:	4423      	add	r3, r4
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d049      	beq.n	801725a <tcp_output+0x37a>
      seg->next = NULL;
 80171c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171c8:	2200      	movs	r2, #0
 80171ca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d105      	bne.n	80171e0 <tcp_output+0x300>
        pcb->unacked = seg;
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80171d8:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80171da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171dc:	623b      	str	r3, [r7, #32]
 80171de:	e03f      	b.n	8017260 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80171e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171e2:	68db      	ldr	r3, [r3, #12]
 80171e4:	685b      	ldr	r3, [r3, #4]
 80171e6:	4618      	mov	r0, r3
 80171e8:	f7f8 ff9e 	bl	8010128 <lwip_htonl>
 80171ec:	4604      	mov	r4, r0
 80171ee:	6a3b      	ldr	r3, [r7, #32]
 80171f0:	68db      	ldr	r3, [r3, #12]
 80171f2:	685b      	ldr	r3, [r3, #4]
 80171f4:	4618      	mov	r0, r3
 80171f6:	f7f8 ff97 	bl	8010128 <lwip_htonl>
 80171fa:	4603      	mov	r3, r0
 80171fc:	1ae3      	subs	r3, r4, r3
 80171fe:	2b00      	cmp	r3, #0
 8017200:	da24      	bge.n	801724c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	3370      	adds	r3, #112	@ 0x70
 8017206:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017208:	e002      	b.n	8017210 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801720a:	69fb      	ldr	r3, [r7, #28]
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017210:	69fb      	ldr	r3, [r7, #28]
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	2b00      	cmp	r3, #0
 8017216:	d011      	beq.n	801723c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017218:	69fb      	ldr	r3, [r7, #28]
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	68db      	ldr	r3, [r3, #12]
 801721e:	685b      	ldr	r3, [r3, #4]
 8017220:	4618      	mov	r0, r3
 8017222:	f7f8 ff81 	bl	8010128 <lwip_htonl>
 8017226:	4604      	mov	r4, r0
 8017228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801722a:	68db      	ldr	r3, [r3, #12]
 801722c:	685b      	ldr	r3, [r3, #4]
 801722e:	4618      	mov	r0, r3
 8017230:	f7f8 ff7a 	bl	8010128 <lwip_htonl>
 8017234:	4603      	mov	r3, r0
 8017236:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8017238:	2b00      	cmp	r3, #0
 801723a:	dbe6      	blt.n	801720a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801723c:	69fb      	ldr	r3, [r7, #28]
 801723e:	681a      	ldr	r2, [r3, #0]
 8017240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017242:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8017244:	69fb      	ldr	r3, [r7, #28]
 8017246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017248:	601a      	str	r2, [r3, #0]
 801724a:	e009      	b.n	8017260 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801724c:	6a3b      	ldr	r3, [r7, #32]
 801724e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017250:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8017252:	6a3b      	ldr	r3, [r7, #32]
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	623b      	str	r3, [r7, #32]
 8017258:	e002      	b.n	8017260 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801725a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801725c:	f7fb ff49 	bl	80130f2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017264:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8017266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017268:	2b00      	cmp	r3, #0
 801726a:	d012      	beq.n	8017292 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801726c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801726e:	68db      	ldr	r3, [r3, #12]
 8017270:	685b      	ldr	r3, [r3, #4]
 8017272:	4618      	mov	r0, r3
 8017274:	f7f8 ff58 	bl	8010128 <lwip_htonl>
 8017278:	4602      	mov	r2, r0
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801727e:	1ad3      	subs	r3, r2, r3
 8017280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017282:	8912      	ldrh	r2, [r2, #8]
 8017284:	4413      	add	r3, r2
  while (seg != NULL &&
 8017286:	69ba      	ldr	r2, [r7, #24]
 8017288:	429a      	cmp	r2, r3
 801728a:	f4bf aed9 	bcs.w	8017040 <tcp_output+0x160>
 801728e:	e000      	b.n	8017292 <tcp_output+0x3b2>
      break;
 8017290:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017296:	2b00      	cmp	r3, #0
 8017298:	d108      	bne.n	80172ac <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	2200      	movs	r2, #0
 801729e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80172a2:	e004      	b.n	80172ae <tcp_output+0x3ce>
    goto output_done;
 80172a4:	bf00      	nop
 80172a6:	e002      	b.n	80172ae <tcp_output+0x3ce>
    goto output_done;
 80172a8:	bf00      	nop
 80172aa:	e000      	b.n	80172ae <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80172ac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	8b5b      	ldrh	r3, [r3, #26]
 80172b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80172b6:	b29a      	uxth	r2, r3
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80172bc:	2300      	movs	r3, #0
}
 80172be:	4618      	mov	r0, r3
 80172c0:	3728      	adds	r7, #40	@ 0x28
 80172c2:	46bd      	mov	sp, r7
 80172c4:	bdb0      	pop	{r4, r5, r7, pc}
 80172c6:	bf00      	nop

080172c8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80172c8:	b580      	push	{r7, lr}
 80172ca:	b082      	sub	sp, #8
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d106      	bne.n	80172e4 <tcp_output_segment_busy+0x1c>
 80172d6:	4b09      	ldr	r3, [pc, #36]	@ (80172fc <tcp_output_segment_busy+0x34>)
 80172d8:	f240 529a 	movw	r2, #1434	@ 0x59a
 80172dc:	4908      	ldr	r1, [pc, #32]	@ (8017300 <tcp_output_segment_busy+0x38>)
 80172de:	4809      	ldr	r0, [pc, #36]	@ (8017304 <tcp_output_segment_busy+0x3c>)
 80172e0:	f004 fafc 	bl	801b8dc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	685b      	ldr	r3, [r3, #4]
 80172e8:	7b9b      	ldrb	r3, [r3, #14]
 80172ea:	2b01      	cmp	r3, #1
 80172ec:	d001      	beq.n	80172f2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80172ee:	2301      	movs	r3, #1
 80172f0:	e000      	b.n	80172f4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80172f2:	2300      	movs	r3, #0
}
 80172f4:	4618      	mov	r0, r3
 80172f6:	3708      	adds	r7, #8
 80172f8:	46bd      	mov	sp, r7
 80172fa:	bd80      	pop	{r7, pc}
 80172fc:	0801fadc 	.word	0x0801fadc
 8017300:	08020078 	.word	0x08020078
 8017304:	0801fb30 	.word	0x0801fb30

08017308 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8017308:	b5b0      	push	{r4, r5, r7, lr}
 801730a:	b08c      	sub	sp, #48	@ 0x30
 801730c:	af04      	add	r7, sp, #16
 801730e:	60f8      	str	r0, [r7, #12]
 8017310:	60b9      	str	r1, [r7, #8]
 8017312:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	2b00      	cmp	r3, #0
 8017318:	d106      	bne.n	8017328 <tcp_output_segment+0x20>
 801731a:	4b64      	ldr	r3, [pc, #400]	@ (80174ac <tcp_output_segment+0x1a4>)
 801731c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8017320:	4963      	ldr	r1, [pc, #396]	@ (80174b0 <tcp_output_segment+0x1a8>)
 8017322:	4864      	ldr	r0, [pc, #400]	@ (80174b4 <tcp_output_segment+0x1ac>)
 8017324:	f004 fada 	bl	801b8dc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8017328:	68bb      	ldr	r3, [r7, #8]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d106      	bne.n	801733c <tcp_output_segment+0x34>
 801732e:	4b5f      	ldr	r3, [pc, #380]	@ (80174ac <tcp_output_segment+0x1a4>)
 8017330:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8017334:	4960      	ldr	r1, [pc, #384]	@ (80174b8 <tcp_output_segment+0x1b0>)
 8017336:	485f      	ldr	r0, [pc, #380]	@ (80174b4 <tcp_output_segment+0x1ac>)
 8017338:	f004 fad0 	bl	801b8dc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d106      	bne.n	8017350 <tcp_output_segment+0x48>
 8017342:	4b5a      	ldr	r3, [pc, #360]	@ (80174ac <tcp_output_segment+0x1a4>)
 8017344:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8017348:	495c      	ldr	r1, [pc, #368]	@ (80174bc <tcp_output_segment+0x1b4>)
 801734a:	485a      	ldr	r0, [pc, #360]	@ (80174b4 <tcp_output_segment+0x1ac>)
 801734c:	f004 fac6 	bl	801b8dc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8017350:	68f8      	ldr	r0, [r7, #12]
 8017352:	f7ff ffb9 	bl	80172c8 <tcp_output_segment_busy>
 8017356:	4603      	mov	r3, r0
 8017358:	2b00      	cmp	r3, #0
 801735a:	d001      	beq.n	8017360 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801735c:	2300      	movs	r3, #0
 801735e:	e0a1      	b.n	80174a4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017360:	68bb      	ldr	r3, [r7, #8]
 8017362:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	68dc      	ldr	r4, [r3, #12]
 8017368:	4610      	mov	r0, r2
 801736a:	f7f8 fedd 	bl	8010128 <lwip_htonl>
 801736e:	4603      	mov	r3, r0
 8017370:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017372:	68bb      	ldr	r3, [r7, #8]
 8017374:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	68dc      	ldr	r4, [r3, #12]
 801737a:	4610      	mov	r0, r2
 801737c:	f7f8 febe 	bl	80100fc <lwip_htons>
 8017380:	4603      	mov	r3, r0
 8017382:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017384:	68bb      	ldr	r3, [r7, #8]
 8017386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017388:	68ba      	ldr	r2, [r7, #8]
 801738a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801738c:	441a      	add	r2, r3
 801738e:	68bb      	ldr	r3, [r7, #8]
 8017390:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	68db      	ldr	r3, [r3, #12]
 8017396:	3314      	adds	r3, #20
 8017398:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	7a9b      	ldrb	r3, [r3, #10]
 801739e:	f003 0301 	and.w	r3, r3, #1
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d015      	beq.n	80173d2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80173a6:	68bb      	ldr	r3, [r7, #8]
 80173a8:	3304      	adds	r3, #4
 80173aa:	461a      	mov	r2, r3
 80173ac:	6879      	ldr	r1, [r7, #4]
 80173ae:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80173b2:	f7fc fa39 	bl	8013828 <tcp_eff_send_mss_netif>
 80173b6:	4603      	mov	r3, r0
 80173b8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80173ba:	8b7b      	ldrh	r3, [r7, #26]
 80173bc:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80173c0:	4618      	mov	r0, r3
 80173c2:	f7f8 feb1 	bl	8010128 <lwip_htonl>
 80173c6:	4602      	mov	r2, r0
 80173c8:	69fb      	ldr	r3, [r7, #28]
 80173ca:	601a      	str	r2, [r3, #0]
    opts += 1;
 80173cc:	69fb      	ldr	r3, [r7, #28]
 80173ce:	3304      	adds	r3, #4
 80173d0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80173d2:	68bb      	ldr	r3, [r7, #8]
 80173d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80173d8:	2b00      	cmp	r3, #0
 80173da:	da02      	bge.n	80173e2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80173dc:	68bb      	ldr	r3, [r7, #8]
 80173de:	2200      	movs	r2, #0
 80173e0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80173e2:	68bb      	ldr	r3, [r7, #8]
 80173e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d10c      	bne.n	8017404 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80173ea:	4b35      	ldr	r3, [pc, #212]	@ (80174c0 <tcp_output_segment+0x1b8>)
 80173ec:	681a      	ldr	r2, [r3, #0]
 80173ee:	68bb      	ldr	r3, [r7, #8]
 80173f0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	68db      	ldr	r3, [r3, #12]
 80173f6:	685b      	ldr	r3, [r3, #4]
 80173f8:	4618      	mov	r0, r3
 80173fa:	f7f8 fe95 	bl	8010128 <lwip_htonl>
 80173fe:	4602      	mov	r2, r0
 8017400:	68bb      	ldr	r3, [r7, #8]
 8017402:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	68da      	ldr	r2, [r3, #12]
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	685b      	ldr	r3, [r3, #4]
 801740c:	685b      	ldr	r3, [r3, #4]
 801740e:	1ad3      	subs	r3, r2, r3
 8017410:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	685b      	ldr	r3, [r3, #4]
 8017416:	8959      	ldrh	r1, [r3, #10]
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	685b      	ldr	r3, [r3, #4]
 801741c:	8b3a      	ldrh	r2, [r7, #24]
 801741e:	1a8a      	subs	r2, r1, r2
 8017420:	b292      	uxth	r2, r2
 8017422:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	685b      	ldr	r3, [r3, #4]
 8017428:	8919      	ldrh	r1, [r3, #8]
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	685b      	ldr	r3, [r3, #4]
 801742e:	8b3a      	ldrh	r2, [r7, #24]
 8017430:	1a8a      	subs	r2, r1, r2
 8017432:	b292      	uxth	r2, r2
 8017434:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	685b      	ldr	r3, [r3, #4]
 801743a:	68fa      	ldr	r2, [r7, #12]
 801743c:	68d2      	ldr	r2, [r2, #12]
 801743e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	68db      	ldr	r3, [r3, #12]
 8017444:	2200      	movs	r2, #0
 8017446:	741a      	strb	r2, [r3, #16]
 8017448:	2200      	movs	r2, #0
 801744a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	68da      	ldr	r2, [r3, #12]
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	7a9b      	ldrb	r3, [r3, #10]
 8017454:	f003 0301 	and.w	r3, r3, #1
 8017458:	2b00      	cmp	r3, #0
 801745a:	d001      	beq.n	8017460 <tcp_output_segment+0x158>
 801745c:	2318      	movs	r3, #24
 801745e:	e000      	b.n	8017462 <tcp_output_segment+0x15a>
 8017460:	2314      	movs	r3, #20
 8017462:	4413      	add	r3, r2
 8017464:	69fa      	ldr	r2, [r7, #28]
 8017466:	429a      	cmp	r2, r3
 8017468:	d006      	beq.n	8017478 <tcp_output_segment+0x170>
 801746a:	4b10      	ldr	r3, [pc, #64]	@ (80174ac <tcp_output_segment+0x1a4>)
 801746c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8017470:	4914      	ldr	r1, [pc, #80]	@ (80174c4 <tcp_output_segment+0x1bc>)
 8017472:	4810      	ldr	r0, [pc, #64]	@ (80174b4 <tcp_output_segment+0x1ac>)
 8017474:	f004 fa32 	bl	801b8dc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	6858      	ldr	r0, [r3, #4]
 801747c:	68b9      	ldr	r1, [r7, #8]
 801747e:	68bb      	ldr	r3, [r7, #8]
 8017480:	1d1c      	adds	r4, r3, #4
 8017482:	68bb      	ldr	r3, [r7, #8]
 8017484:	7add      	ldrb	r5, [r3, #11]
 8017486:	68bb      	ldr	r3, [r7, #8]
 8017488:	7a9b      	ldrb	r3, [r3, #10]
 801748a:	687a      	ldr	r2, [r7, #4]
 801748c:	9202      	str	r2, [sp, #8]
 801748e:	2206      	movs	r2, #6
 8017490:	9201      	str	r2, [sp, #4]
 8017492:	9300      	str	r3, [sp, #0]
 8017494:	462b      	mov	r3, r5
 8017496:	4622      	mov	r2, r4
 8017498:	f002 fa32 	bl	8019900 <ip4_output_if>
 801749c:	4603      	mov	r3, r0
 801749e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80174a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80174a4:	4618      	mov	r0, r3
 80174a6:	3720      	adds	r7, #32
 80174a8:	46bd      	mov	sp, r7
 80174aa:	bdb0      	pop	{r4, r5, r7, pc}
 80174ac:	0801fadc 	.word	0x0801fadc
 80174b0:	080200a0 	.word	0x080200a0
 80174b4:	0801fb30 	.word	0x0801fb30
 80174b8:	080200c0 	.word	0x080200c0
 80174bc:	080200e0 	.word	0x080200e0
 80174c0:	2000c8b0 	.word	0x2000c8b0
 80174c4:	08020104 	.word	0x08020104

080174c8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80174c8:	b5b0      	push	{r4, r5, r7, lr}
 80174ca:	b084      	sub	sp, #16
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d106      	bne.n	80174e4 <tcp_rexmit_rto_prepare+0x1c>
 80174d6:	4b31      	ldr	r3, [pc, #196]	@ (801759c <tcp_rexmit_rto_prepare+0xd4>)
 80174d8:	f240 6263 	movw	r2, #1635	@ 0x663
 80174dc:	4930      	ldr	r1, [pc, #192]	@ (80175a0 <tcp_rexmit_rto_prepare+0xd8>)
 80174de:	4831      	ldr	r0, [pc, #196]	@ (80175a4 <tcp_rexmit_rto_prepare+0xdc>)
 80174e0:	f004 f9fc 	bl	801b8dc <iprintf>

  if (pcb->unacked == NULL) {
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d102      	bne.n	80174f2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80174ec:	f06f 0305 	mvn.w	r3, #5
 80174f0:	e050      	b.n	8017594 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80174f6:	60fb      	str	r3, [r7, #12]
 80174f8:	e00b      	b.n	8017512 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80174fa:	68f8      	ldr	r0, [r7, #12]
 80174fc:	f7ff fee4 	bl	80172c8 <tcp_output_segment_busy>
 8017500:	4603      	mov	r3, r0
 8017502:	2b00      	cmp	r3, #0
 8017504:	d002      	beq.n	801750c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8017506:	f06f 0305 	mvn.w	r3, #5
 801750a:	e043      	b.n	8017594 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	60fb      	str	r3, [r7, #12]
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	2b00      	cmp	r3, #0
 8017518:	d1ef      	bne.n	80174fa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801751a:	68f8      	ldr	r0, [r7, #12]
 801751c:	f7ff fed4 	bl	80172c8 <tcp_output_segment_busy>
 8017520:	4603      	mov	r3, r0
 8017522:	2b00      	cmp	r3, #0
 8017524:	d002      	beq.n	801752c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8017526:	f06f 0305 	mvn.w	r3, #5
 801752a:	e033      	b.n	8017594 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	2200      	movs	r2, #0
 8017540:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	8b5b      	ldrh	r3, [r3, #26]
 8017546:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801754a:	b29a      	uxth	r2, r3
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	68db      	ldr	r3, [r3, #12]
 8017554:	685b      	ldr	r3, [r3, #4]
 8017556:	4618      	mov	r0, r3
 8017558:	f7f8 fde6 	bl	8010128 <lwip_htonl>
 801755c:	4604      	mov	r4, r0
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	891b      	ldrh	r3, [r3, #8]
 8017562:	461d      	mov	r5, r3
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	68db      	ldr	r3, [r3, #12]
 8017568:	899b      	ldrh	r3, [r3, #12]
 801756a:	b29b      	uxth	r3, r3
 801756c:	4618      	mov	r0, r3
 801756e:	f7f8 fdc5 	bl	80100fc <lwip_htons>
 8017572:	4603      	mov	r3, r0
 8017574:	b2db      	uxtb	r3, r3
 8017576:	f003 0303 	and.w	r3, r3, #3
 801757a:	2b00      	cmp	r3, #0
 801757c:	d001      	beq.n	8017582 <tcp_rexmit_rto_prepare+0xba>
 801757e:	2301      	movs	r3, #1
 8017580:	e000      	b.n	8017584 <tcp_rexmit_rto_prepare+0xbc>
 8017582:	2300      	movs	r3, #0
 8017584:	442b      	add	r3, r5
 8017586:	18e2      	adds	r2, r4, r3
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	2200      	movs	r2, #0
 8017590:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8017592:	2300      	movs	r3, #0
}
 8017594:	4618      	mov	r0, r3
 8017596:	3710      	adds	r7, #16
 8017598:	46bd      	mov	sp, r7
 801759a:	bdb0      	pop	{r4, r5, r7, pc}
 801759c:	0801fadc 	.word	0x0801fadc
 80175a0:	08020118 	.word	0x08020118
 80175a4:	0801fb30 	.word	0x0801fb30

080175a8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80175a8:	b580      	push	{r7, lr}
 80175aa:	b082      	sub	sp, #8
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d106      	bne.n	80175c4 <tcp_rexmit_rto_commit+0x1c>
 80175b6:	4b0d      	ldr	r3, [pc, #52]	@ (80175ec <tcp_rexmit_rto_commit+0x44>)
 80175b8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80175bc:	490c      	ldr	r1, [pc, #48]	@ (80175f0 <tcp_rexmit_rto_commit+0x48>)
 80175be:	480d      	ldr	r0, [pc, #52]	@ (80175f4 <tcp_rexmit_rto_commit+0x4c>)
 80175c0:	f004 f98c 	bl	801b8dc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80175ca:	2bff      	cmp	r3, #255	@ 0xff
 80175cc:	d007      	beq.n	80175de <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80175d4:	3301      	adds	r3, #1
 80175d6:	b2da      	uxtb	r2, r3
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80175de:	6878      	ldr	r0, [r7, #4]
 80175e0:	f7ff fc7e 	bl	8016ee0 <tcp_output>
}
 80175e4:	bf00      	nop
 80175e6:	3708      	adds	r7, #8
 80175e8:	46bd      	mov	sp, r7
 80175ea:	bd80      	pop	{r7, pc}
 80175ec:	0801fadc 	.word	0x0801fadc
 80175f0:	0802013c 	.word	0x0802013c
 80175f4:	0801fb30 	.word	0x0801fb30

080175f8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80175f8:	b580      	push	{r7, lr}
 80175fa:	b082      	sub	sp, #8
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d106      	bne.n	8017614 <tcp_rexmit_rto+0x1c>
 8017606:	4b0a      	ldr	r3, [pc, #40]	@ (8017630 <tcp_rexmit_rto+0x38>)
 8017608:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801760c:	4909      	ldr	r1, [pc, #36]	@ (8017634 <tcp_rexmit_rto+0x3c>)
 801760e:	480a      	ldr	r0, [pc, #40]	@ (8017638 <tcp_rexmit_rto+0x40>)
 8017610:	f004 f964 	bl	801b8dc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017614:	6878      	ldr	r0, [r7, #4]
 8017616:	f7ff ff57 	bl	80174c8 <tcp_rexmit_rto_prepare>
 801761a:	4603      	mov	r3, r0
 801761c:	2b00      	cmp	r3, #0
 801761e:	d102      	bne.n	8017626 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017620:	6878      	ldr	r0, [r7, #4]
 8017622:	f7ff ffc1 	bl	80175a8 <tcp_rexmit_rto_commit>
  }
}
 8017626:	bf00      	nop
 8017628:	3708      	adds	r7, #8
 801762a:	46bd      	mov	sp, r7
 801762c:	bd80      	pop	{r7, pc}
 801762e:	bf00      	nop
 8017630:	0801fadc 	.word	0x0801fadc
 8017634:	08020160 	.word	0x08020160
 8017638:	0801fb30 	.word	0x0801fb30

0801763c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801763c:	b590      	push	{r4, r7, lr}
 801763e:	b085      	sub	sp, #20
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d106      	bne.n	8017658 <tcp_rexmit+0x1c>
 801764a:	4b2f      	ldr	r3, [pc, #188]	@ (8017708 <tcp_rexmit+0xcc>)
 801764c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8017650:	492e      	ldr	r1, [pc, #184]	@ (801770c <tcp_rexmit+0xd0>)
 8017652:	482f      	ldr	r0, [pc, #188]	@ (8017710 <tcp_rexmit+0xd4>)
 8017654:	f004 f942 	bl	801b8dc <iprintf>

  if (pcb->unacked == NULL) {
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801765c:	2b00      	cmp	r3, #0
 801765e:	d102      	bne.n	8017666 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017660:	f06f 0305 	mvn.w	r3, #5
 8017664:	e04c      	b.n	8017700 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801766a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801766c:	68b8      	ldr	r0, [r7, #8]
 801766e:	f7ff fe2b 	bl	80172c8 <tcp_output_segment_busy>
 8017672:	4603      	mov	r3, r0
 8017674:	2b00      	cmp	r3, #0
 8017676:	d002      	beq.n	801767e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017678:	f06f 0305 	mvn.w	r3, #5
 801767c:	e040      	b.n	8017700 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801767e:	68bb      	ldr	r3, [r7, #8]
 8017680:	681a      	ldr	r2, [r3, #0]
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	336c      	adds	r3, #108	@ 0x6c
 801768a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801768c:	e002      	b.n	8017694 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	2b00      	cmp	r3, #0
 801769a:	d011      	beq.n	80176c0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	68db      	ldr	r3, [r3, #12]
 80176a2:	685b      	ldr	r3, [r3, #4]
 80176a4:	4618      	mov	r0, r3
 80176a6:	f7f8 fd3f 	bl	8010128 <lwip_htonl>
 80176aa:	4604      	mov	r4, r0
 80176ac:	68bb      	ldr	r3, [r7, #8]
 80176ae:	68db      	ldr	r3, [r3, #12]
 80176b0:	685b      	ldr	r3, [r3, #4]
 80176b2:	4618      	mov	r0, r3
 80176b4:	f7f8 fd38 	bl	8010128 <lwip_htonl>
 80176b8:	4603      	mov	r3, r0
 80176ba:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80176bc:	2b00      	cmp	r3, #0
 80176be:	dbe6      	blt.n	801768e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	681a      	ldr	r2, [r3, #0]
 80176c4:	68bb      	ldr	r3, [r7, #8]
 80176c6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	68ba      	ldr	r2, [r7, #8]
 80176cc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80176ce:	68bb      	ldr	r3, [r7, #8]
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d103      	bne.n	80176de <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	2200      	movs	r2, #0
 80176da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80176e4:	2bff      	cmp	r3, #255	@ 0xff
 80176e6:	d007      	beq.n	80176f8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80176ee:	3301      	adds	r3, #1
 80176f0:	b2da      	uxtb	r2, r3
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	2200      	movs	r2, #0
 80176fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80176fe:	2300      	movs	r3, #0
}
 8017700:	4618      	mov	r0, r3
 8017702:	3714      	adds	r7, #20
 8017704:	46bd      	mov	sp, r7
 8017706:	bd90      	pop	{r4, r7, pc}
 8017708:	0801fadc 	.word	0x0801fadc
 801770c:	0802017c 	.word	0x0802017c
 8017710:	0801fb30 	.word	0x0801fb30

08017714 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017714:	b580      	push	{r7, lr}
 8017716:	b082      	sub	sp, #8
 8017718:	af00      	add	r7, sp, #0
 801771a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	2b00      	cmp	r3, #0
 8017720:	d106      	bne.n	8017730 <tcp_rexmit_fast+0x1c>
 8017722:	4b2a      	ldr	r3, [pc, #168]	@ (80177cc <tcp_rexmit_fast+0xb8>)
 8017724:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8017728:	4929      	ldr	r1, [pc, #164]	@ (80177d0 <tcp_rexmit_fast+0xbc>)
 801772a:	482a      	ldr	r0, [pc, #168]	@ (80177d4 <tcp_rexmit_fast+0xc0>)
 801772c:	f004 f8d6 	bl	801b8dc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017734:	2b00      	cmp	r3, #0
 8017736:	d044      	beq.n	80177c2 <tcp_rexmit_fast+0xae>
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	8b5b      	ldrh	r3, [r3, #26]
 801773c:	f003 0304 	and.w	r3, r3, #4
 8017740:	2b00      	cmp	r3, #0
 8017742:	d13e      	bne.n	80177c2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017744:	6878      	ldr	r0, [r7, #4]
 8017746:	f7ff ff79 	bl	801763c <tcp_rexmit>
 801774a:	4603      	mov	r3, r0
 801774c:	2b00      	cmp	r3, #0
 801774e:	d138      	bne.n	80177c2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801775c:	4293      	cmp	r3, r2
 801775e:	bf28      	it	cs
 8017760:	4613      	movcs	r3, r2
 8017762:	b29b      	uxth	r3, r3
 8017764:	0fda      	lsrs	r2, r3, #31
 8017766:	4413      	add	r3, r2
 8017768:	105b      	asrs	r3, r3, #1
 801776a:	b29a      	uxth	r2, r3
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8017778:	461a      	mov	r2, r3
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801777e:	005b      	lsls	r3, r3, #1
 8017780:	429a      	cmp	r2, r3
 8017782:	d206      	bcs.n	8017792 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017788:	005b      	lsls	r3, r3, #1
 801778a:	b29a      	uxth	r2, r3
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801779c:	4619      	mov	r1, r3
 801779e:	0049      	lsls	r1, r1, #1
 80177a0:	440b      	add	r3, r1
 80177a2:	b29b      	uxth	r3, r3
 80177a4:	4413      	add	r3, r2
 80177a6:	b29a      	uxth	r2, r3
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	8b5b      	ldrh	r3, [r3, #26]
 80177b2:	f043 0304 	orr.w	r3, r3, #4
 80177b6:	b29a      	uxth	r2, r3
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	2200      	movs	r2, #0
 80177c0:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80177c2:	bf00      	nop
 80177c4:	3708      	adds	r7, #8
 80177c6:	46bd      	mov	sp, r7
 80177c8:	bd80      	pop	{r7, pc}
 80177ca:	bf00      	nop
 80177cc:	0801fadc 	.word	0x0801fadc
 80177d0:	08020194 	.word	0x08020194
 80177d4:	0801fb30 	.word	0x0801fb30

080177d8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80177d8:	b580      	push	{r7, lr}
 80177da:	b086      	sub	sp, #24
 80177dc:	af00      	add	r7, sp, #0
 80177de:	60f8      	str	r0, [r7, #12]
 80177e0:	607b      	str	r3, [r7, #4]
 80177e2:	460b      	mov	r3, r1
 80177e4:	817b      	strh	r3, [r7, #10]
 80177e6:	4613      	mov	r3, r2
 80177e8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80177ea:	897a      	ldrh	r2, [r7, #10]
 80177ec:	893b      	ldrh	r3, [r7, #8]
 80177ee:	4413      	add	r3, r2
 80177f0:	b29b      	uxth	r3, r3
 80177f2:	3314      	adds	r3, #20
 80177f4:	b29b      	uxth	r3, r3
 80177f6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80177fa:	4619      	mov	r1, r3
 80177fc:	2022      	movs	r0, #34	@ 0x22
 80177fe:	f7f9 fd59 	bl	80112b4 <pbuf_alloc>
 8017802:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017804:	697b      	ldr	r3, [r7, #20]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d04d      	beq.n	80178a6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801780a:	897b      	ldrh	r3, [r7, #10]
 801780c:	3313      	adds	r3, #19
 801780e:	697a      	ldr	r2, [r7, #20]
 8017810:	8952      	ldrh	r2, [r2, #10]
 8017812:	4293      	cmp	r3, r2
 8017814:	db06      	blt.n	8017824 <tcp_output_alloc_header_common+0x4c>
 8017816:	4b26      	ldr	r3, [pc, #152]	@ (80178b0 <tcp_output_alloc_header_common+0xd8>)
 8017818:	f240 7223 	movw	r2, #1827	@ 0x723
 801781c:	4925      	ldr	r1, [pc, #148]	@ (80178b4 <tcp_output_alloc_header_common+0xdc>)
 801781e:	4826      	ldr	r0, [pc, #152]	@ (80178b8 <tcp_output_alloc_header_common+0xe0>)
 8017820:	f004 f85c 	bl	801b8dc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017824:	697b      	ldr	r3, [r7, #20]
 8017826:	685b      	ldr	r3, [r3, #4]
 8017828:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801782a:	8c3b      	ldrh	r3, [r7, #32]
 801782c:	4618      	mov	r0, r3
 801782e:	f7f8 fc65 	bl	80100fc <lwip_htons>
 8017832:	4603      	mov	r3, r0
 8017834:	461a      	mov	r2, r3
 8017836:	693b      	ldr	r3, [r7, #16]
 8017838:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801783a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801783c:	4618      	mov	r0, r3
 801783e:	f7f8 fc5d 	bl	80100fc <lwip_htons>
 8017842:	4603      	mov	r3, r0
 8017844:	461a      	mov	r2, r3
 8017846:	693b      	ldr	r3, [r7, #16]
 8017848:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801784a:	693b      	ldr	r3, [r7, #16]
 801784c:	687a      	ldr	r2, [r7, #4]
 801784e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017850:	68f8      	ldr	r0, [r7, #12]
 8017852:	f7f8 fc69 	bl	8010128 <lwip_htonl>
 8017856:	4602      	mov	r2, r0
 8017858:	693b      	ldr	r3, [r7, #16]
 801785a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801785c:	897b      	ldrh	r3, [r7, #10]
 801785e:	089b      	lsrs	r3, r3, #2
 8017860:	b29b      	uxth	r3, r3
 8017862:	3305      	adds	r3, #5
 8017864:	b29b      	uxth	r3, r3
 8017866:	031b      	lsls	r3, r3, #12
 8017868:	b29a      	uxth	r2, r3
 801786a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801786e:	b29b      	uxth	r3, r3
 8017870:	4313      	orrs	r3, r2
 8017872:	b29b      	uxth	r3, r3
 8017874:	4618      	mov	r0, r3
 8017876:	f7f8 fc41 	bl	80100fc <lwip_htons>
 801787a:	4603      	mov	r3, r0
 801787c:	461a      	mov	r2, r3
 801787e:	693b      	ldr	r3, [r7, #16]
 8017880:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017882:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017884:	4618      	mov	r0, r3
 8017886:	f7f8 fc39 	bl	80100fc <lwip_htons>
 801788a:	4603      	mov	r3, r0
 801788c:	461a      	mov	r2, r3
 801788e:	693b      	ldr	r3, [r7, #16]
 8017890:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017892:	693b      	ldr	r3, [r7, #16]
 8017894:	2200      	movs	r2, #0
 8017896:	741a      	strb	r2, [r3, #16]
 8017898:	2200      	movs	r2, #0
 801789a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801789c:	693b      	ldr	r3, [r7, #16]
 801789e:	2200      	movs	r2, #0
 80178a0:	749a      	strb	r2, [r3, #18]
 80178a2:	2200      	movs	r2, #0
 80178a4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80178a6:	697b      	ldr	r3, [r7, #20]
}
 80178a8:	4618      	mov	r0, r3
 80178aa:	3718      	adds	r7, #24
 80178ac:	46bd      	mov	sp, r7
 80178ae:	bd80      	pop	{r7, pc}
 80178b0:	0801fadc 	.word	0x0801fadc
 80178b4:	080201b4 	.word	0x080201b4
 80178b8:	0801fb30 	.word	0x0801fb30

080178bc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80178bc:	b5b0      	push	{r4, r5, r7, lr}
 80178be:	b08a      	sub	sp, #40	@ 0x28
 80178c0:	af04      	add	r7, sp, #16
 80178c2:	60f8      	str	r0, [r7, #12]
 80178c4:	607b      	str	r3, [r7, #4]
 80178c6:	460b      	mov	r3, r1
 80178c8:	817b      	strh	r3, [r7, #10]
 80178ca:	4613      	mov	r3, r2
 80178cc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d106      	bne.n	80178e2 <tcp_output_alloc_header+0x26>
 80178d4:	4b15      	ldr	r3, [pc, #84]	@ (801792c <tcp_output_alloc_header+0x70>)
 80178d6:	f240 7242 	movw	r2, #1858	@ 0x742
 80178da:	4915      	ldr	r1, [pc, #84]	@ (8017930 <tcp_output_alloc_header+0x74>)
 80178dc:	4815      	ldr	r0, [pc, #84]	@ (8017934 <tcp_output_alloc_header+0x78>)
 80178de:	f003 fffd 	bl	801b8dc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	8adb      	ldrh	r3, [r3, #22]
 80178ea:	68fa      	ldr	r2, [r7, #12]
 80178ec:	8b12      	ldrh	r2, [r2, #24]
 80178ee:	68f9      	ldr	r1, [r7, #12]
 80178f0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80178f2:	893d      	ldrh	r5, [r7, #8]
 80178f4:	897c      	ldrh	r4, [r7, #10]
 80178f6:	9103      	str	r1, [sp, #12]
 80178f8:	2110      	movs	r1, #16
 80178fa:	9102      	str	r1, [sp, #8]
 80178fc:	9201      	str	r2, [sp, #4]
 80178fe:	9300      	str	r3, [sp, #0]
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	462a      	mov	r2, r5
 8017904:	4621      	mov	r1, r4
 8017906:	f7ff ff67 	bl	80177d8 <tcp_output_alloc_header_common>
 801790a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801790c:	697b      	ldr	r3, [r7, #20]
 801790e:	2b00      	cmp	r3, #0
 8017910:	d006      	beq.n	8017920 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017916:	68fa      	ldr	r2, [r7, #12]
 8017918:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801791a:	441a      	add	r2, r3
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8017920:	697b      	ldr	r3, [r7, #20]
}
 8017922:	4618      	mov	r0, r3
 8017924:	3718      	adds	r7, #24
 8017926:	46bd      	mov	sp, r7
 8017928:	bdb0      	pop	{r4, r5, r7, pc}
 801792a:	bf00      	nop
 801792c:	0801fadc 	.word	0x0801fadc
 8017930:	080201e4 	.word	0x080201e4
 8017934:	0801fb30 	.word	0x0801fb30

08017938 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017938:	b580      	push	{r7, lr}
 801793a:	b088      	sub	sp, #32
 801793c:	af00      	add	r7, sp, #0
 801793e:	60f8      	str	r0, [r7, #12]
 8017940:	60b9      	str	r1, [r7, #8]
 8017942:	4611      	mov	r1, r2
 8017944:	461a      	mov	r2, r3
 8017946:	460b      	mov	r3, r1
 8017948:	71fb      	strb	r3, [r7, #7]
 801794a:	4613      	mov	r3, r2
 801794c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801794e:	2300      	movs	r3, #0
 8017950:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8017952:	68bb      	ldr	r3, [r7, #8]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d106      	bne.n	8017966 <tcp_output_fill_options+0x2e>
 8017958:	4b12      	ldr	r3, [pc, #72]	@ (80179a4 <tcp_output_fill_options+0x6c>)
 801795a:	f240 7256 	movw	r2, #1878	@ 0x756
 801795e:	4912      	ldr	r1, [pc, #72]	@ (80179a8 <tcp_output_fill_options+0x70>)
 8017960:	4812      	ldr	r0, [pc, #72]	@ (80179ac <tcp_output_fill_options+0x74>)
 8017962:	f003 ffbb 	bl	801b8dc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8017966:	68bb      	ldr	r3, [r7, #8]
 8017968:	685b      	ldr	r3, [r3, #4]
 801796a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801796c:	69bb      	ldr	r3, [r7, #24]
 801796e:	3314      	adds	r3, #20
 8017970:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017972:	8bfb      	ldrh	r3, [r7, #30]
 8017974:	009b      	lsls	r3, r3, #2
 8017976:	461a      	mov	r2, r3
 8017978:	79fb      	ldrb	r3, [r7, #7]
 801797a:	009b      	lsls	r3, r3, #2
 801797c:	f003 0304 	and.w	r3, r3, #4
 8017980:	4413      	add	r3, r2
 8017982:	3314      	adds	r3, #20
 8017984:	69ba      	ldr	r2, [r7, #24]
 8017986:	4413      	add	r3, r2
 8017988:	697a      	ldr	r2, [r7, #20]
 801798a:	429a      	cmp	r2, r3
 801798c:	d006      	beq.n	801799c <tcp_output_fill_options+0x64>
 801798e:	4b05      	ldr	r3, [pc, #20]	@ (80179a4 <tcp_output_fill_options+0x6c>)
 8017990:	f240 7275 	movw	r2, #1909	@ 0x775
 8017994:	4906      	ldr	r1, [pc, #24]	@ (80179b0 <tcp_output_fill_options+0x78>)
 8017996:	4805      	ldr	r0, [pc, #20]	@ (80179ac <tcp_output_fill_options+0x74>)
 8017998:	f003 ffa0 	bl	801b8dc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801799c:	bf00      	nop
 801799e:	3720      	adds	r7, #32
 80179a0:	46bd      	mov	sp, r7
 80179a2:	bd80      	pop	{r7, pc}
 80179a4:	0801fadc 	.word	0x0801fadc
 80179a8:	0802020c 	.word	0x0802020c
 80179ac:	0801fb30 	.word	0x0801fb30
 80179b0:	08020104 	.word	0x08020104

080179b4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80179b4:	b580      	push	{r7, lr}
 80179b6:	b08a      	sub	sp, #40	@ 0x28
 80179b8:	af04      	add	r7, sp, #16
 80179ba:	60f8      	str	r0, [r7, #12]
 80179bc:	60b9      	str	r1, [r7, #8]
 80179be:	607a      	str	r2, [r7, #4]
 80179c0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80179c2:	68bb      	ldr	r3, [r7, #8]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d106      	bne.n	80179d6 <tcp_output_control_segment+0x22>
 80179c8:	4b1c      	ldr	r3, [pc, #112]	@ (8017a3c <tcp_output_control_segment+0x88>)
 80179ca:	f240 7287 	movw	r2, #1927	@ 0x787
 80179ce:	491c      	ldr	r1, [pc, #112]	@ (8017a40 <tcp_output_control_segment+0x8c>)
 80179d0:	481c      	ldr	r0, [pc, #112]	@ (8017a44 <tcp_output_control_segment+0x90>)
 80179d2:	f003 ff83 	bl	801b8dc <iprintf>

  netif = tcp_route(pcb, src, dst);
 80179d6:	683a      	ldr	r2, [r7, #0]
 80179d8:	6879      	ldr	r1, [r7, #4]
 80179da:	68f8      	ldr	r0, [r7, #12]
 80179dc:	f7fe faea 	bl	8015fb4 <tcp_route>
 80179e0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80179e2:	693b      	ldr	r3, [r7, #16]
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d102      	bne.n	80179ee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80179e8:	23fc      	movs	r3, #252	@ 0xfc
 80179ea:	75fb      	strb	r3, [r7, #23]
 80179ec:	e01c      	b.n	8017a28 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d006      	beq.n	8017a02 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	7adb      	ldrb	r3, [r3, #11]
 80179f8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	7a9b      	ldrb	r3, [r3, #10]
 80179fe:	757b      	strb	r3, [r7, #21]
 8017a00:	e003      	b.n	8017a0a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017a02:	23ff      	movs	r3, #255	@ 0xff
 8017a04:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017a06:	2300      	movs	r3, #0
 8017a08:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8017a0a:	7dba      	ldrb	r2, [r7, #22]
 8017a0c:	693b      	ldr	r3, [r7, #16]
 8017a0e:	9302      	str	r3, [sp, #8]
 8017a10:	2306      	movs	r3, #6
 8017a12:	9301      	str	r3, [sp, #4]
 8017a14:	7d7b      	ldrb	r3, [r7, #21]
 8017a16:	9300      	str	r3, [sp, #0]
 8017a18:	4613      	mov	r3, r2
 8017a1a:	683a      	ldr	r2, [r7, #0]
 8017a1c:	6879      	ldr	r1, [r7, #4]
 8017a1e:	68b8      	ldr	r0, [r7, #8]
 8017a20:	f001 ff6e 	bl	8019900 <ip4_output_if>
 8017a24:	4603      	mov	r3, r0
 8017a26:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017a28:	68b8      	ldr	r0, [r7, #8]
 8017a2a:	f7f9 ff27 	bl	801187c <pbuf_free>
  return err;
 8017a2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017a32:	4618      	mov	r0, r3
 8017a34:	3718      	adds	r7, #24
 8017a36:	46bd      	mov	sp, r7
 8017a38:	bd80      	pop	{r7, pc}
 8017a3a:	bf00      	nop
 8017a3c:	0801fadc 	.word	0x0801fadc
 8017a40:	08020234 	.word	0x08020234
 8017a44:	0801fb30 	.word	0x0801fb30

08017a48 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017a48:	b590      	push	{r4, r7, lr}
 8017a4a:	b08b      	sub	sp, #44	@ 0x2c
 8017a4c:	af04      	add	r7, sp, #16
 8017a4e:	60f8      	str	r0, [r7, #12]
 8017a50:	60b9      	str	r1, [r7, #8]
 8017a52:	607a      	str	r2, [r7, #4]
 8017a54:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017a56:	683b      	ldr	r3, [r7, #0]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d106      	bne.n	8017a6a <tcp_rst+0x22>
 8017a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8017adc <tcp_rst+0x94>)
 8017a5e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8017a62:	491f      	ldr	r1, [pc, #124]	@ (8017ae0 <tcp_rst+0x98>)
 8017a64:	481f      	ldr	r0, [pc, #124]	@ (8017ae4 <tcp_rst+0x9c>)
 8017a66:	f003 ff39 	bl	801b8dc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8017a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d106      	bne.n	8017a7e <tcp_rst+0x36>
 8017a70:	4b1a      	ldr	r3, [pc, #104]	@ (8017adc <tcp_rst+0x94>)
 8017a72:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8017a76:	491c      	ldr	r1, [pc, #112]	@ (8017ae8 <tcp_rst+0xa0>)
 8017a78:	481a      	ldr	r0, [pc, #104]	@ (8017ae4 <tcp_rst+0x9c>)
 8017a7a:	f003 ff2f 	bl	801b8dc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017a7e:	2300      	movs	r3, #0
 8017a80:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8017a82:	f246 0308 	movw	r3, #24584	@ 0x6008
 8017a86:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017a88:	7dfb      	ldrb	r3, [r7, #23]
 8017a8a:	b29c      	uxth	r4, r3
 8017a8c:	68b8      	ldr	r0, [r7, #8]
 8017a8e:	f7f8 fb4b 	bl	8010128 <lwip_htonl>
 8017a92:	4602      	mov	r2, r0
 8017a94:	8abb      	ldrh	r3, [r7, #20]
 8017a96:	9303      	str	r3, [sp, #12]
 8017a98:	2314      	movs	r3, #20
 8017a9a:	9302      	str	r3, [sp, #8]
 8017a9c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017a9e:	9301      	str	r3, [sp, #4]
 8017aa0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017aa2:	9300      	str	r3, [sp, #0]
 8017aa4:	4613      	mov	r3, r2
 8017aa6:	2200      	movs	r2, #0
 8017aa8:	4621      	mov	r1, r4
 8017aaa:	6878      	ldr	r0, [r7, #4]
 8017aac:	f7ff fe94 	bl	80177d8 <tcp_output_alloc_header_common>
 8017ab0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017ab2:	693b      	ldr	r3, [r7, #16]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d00c      	beq.n	8017ad2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017ab8:	7dfb      	ldrb	r3, [r7, #23]
 8017aba:	2200      	movs	r2, #0
 8017abc:	6939      	ldr	r1, [r7, #16]
 8017abe:	68f8      	ldr	r0, [r7, #12]
 8017ac0:	f7ff ff3a 	bl	8017938 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ac6:	683a      	ldr	r2, [r7, #0]
 8017ac8:	6939      	ldr	r1, [r7, #16]
 8017aca:	68f8      	ldr	r0, [r7, #12]
 8017acc:	f7ff ff72 	bl	80179b4 <tcp_output_control_segment>
 8017ad0:	e000      	b.n	8017ad4 <tcp_rst+0x8c>
    return;
 8017ad2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017ad4:	371c      	adds	r7, #28
 8017ad6:	46bd      	mov	sp, r7
 8017ad8:	bd90      	pop	{r4, r7, pc}
 8017ada:	bf00      	nop
 8017adc:	0801fadc 	.word	0x0801fadc
 8017ae0:	08020260 	.word	0x08020260
 8017ae4:	0801fb30 	.word	0x0801fb30
 8017ae8:	0802027c 	.word	0x0802027c

08017aec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017aec:	b590      	push	{r4, r7, lr}
 8017aee:	b087      	sub	sp, #28
 8017af0:	af00      	add	r7, sp, #0
 8017af2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017af4:	2300      	movs	r3, #0
 8017af6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017af8:	2300      	movs	r3, #0
 8017afa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d106      	bne.n	8017b10 <tcp_send_empty_ack+0x24>
 8017b02:	4b28      	ldr	r3, [pc, #160]	@ (8017ba4 <tcp_send_empty_ack+0xb8>)
 8017b04:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8017b08:	4927      	ldr	r1, [pc, #156]	@ (8017ba8 <tcp_send_empty_ack+0xbc>)
 8017b0a:	4828      	ldr	r0, [pc, #160]	@ (8017bac <tcp_send_empty_ack+0xc0>)
 8017b0c:	f003 fee6 	bl	801b8dc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017b10:	7dfb      	ldrb	r3, [r7, #23]
 8017b12:	009b      	lsls	r3, r3, #2
 8017b14:	b2db      	uxtb	r3, r3
 8017b16:	f003 0304 	and.w	r3, r3, #4
 8017b1a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017b1c:	7d7b      	ldrb	r3, [r7, #21]
 8017b1e:	b29c      	uxth	r4, r3
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017b24:	4618      	mov	r0, r3
 8017b26:	f7f8 faff 	bl	8010128 <lwip_htonl>
 8017b2a:	4603      	mov	r3, r0
 8017b2c:	2200      	movs	r2, #0
 8017b2e:	4621      	mov	r1, r4
 8017b30:	6878      	ldr	r0, [r7, #4]
 8017b32:	f7ff fec3 	bl	80178bc <tcp_output_alloc_header>
 8017b36:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017b38:	693b      	ldr	r3, [r7, #16]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d109      	bne.n	8017b52 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	8b5b      	ldrh	r3, [r3, #26]
 8017b42:	f043 0303 	orr.w	r3, r3, #3
 8017b46:	b29a      	uxth	r2, r3
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017b4c:	f06f 0301 	mvn.w	r3, #1
 8017b50:	e023      	b.n	8017b9a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017b52:	7dbb      	ldrb	r3, [r7, #22]
 8017b54:	7dfa      	ldrb	r2, [r7, #23]
 8017b56:	6939      	ldr	r1, [r7, #16]
 8017b58:	6878      	ldr	r0, [r7, #4]
 8017b5a:	f7ff feed 	bl	8017938 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017b5e:	687a      	ldr	r2, [r7, #4]
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	3304      	adds	r3, #4
 8017b64:	6939      	ldr	r1, [r7, #16]
 8017b66:	6878      	ldr	r0, [r7, #4]
 8017b68:	f7ff ff24 	bl	80179b4 <tcp_output_control_segment>
 8017b6c:	4603      	mov	r3, r0
 8017b6e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d007      	beq.n	8017b88 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	8b5b      	ldrh	r3, [r3, #26]
 8017b7c:	f043 0303 	orr.w	r3, r3, #3
 8017b80:	b29a      	uxth	r2, r3
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	835a      	strh	r2, [r3, #26]
 8017b86:	e006      	b.n	8017b96 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	8b5b      	ldrh	r3, [r3, #26]
 8017b8c:	f023 0303 	bic.w	r3, r3, #3
 8017b90:	b29a      	uxth	r2, r3
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8017b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	371c      	adds	r7, #28
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	bd90      	pop	{r4, r7, pc}
 8017ba2:	bf00      	nop
 8017ba4:	0801fadc 	.word	0x0801fadc
 8017ba8:	08020298 	.word	0x08020298
 8017bac:	0801fb30 	.word	0x0801fb30

08017bb0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017bb0:	b590      	push	{r4, r7, lr}
 8017bb2:	b087      	sub	sp, #28
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017bb8:	2300      	movs	r3, #0
 8017bba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d106      	bne.n	8017bd0 <tcp_keepalive+0x20>
 8017bc2:	4b18      	ldr	r3, [pc, #96]	@ (8017c24 <tcp_keepalive+0x74>)
 8017bc4:	f640 0224 	movw	r2, #2084	@ 0x824
 8017bc8:	4917      	ldr	r1, [pc, #92]	@ (8017c28 <tcp_keepalive+0x78>)
 8017bca:	4818      	ldr	r0, [pc, #96]	@ (8017c2c <tcp_keepalive+0x7c>)
 8017bcc:	f003 fe86 	bl	801b8dc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017bd0:	7dfb      	ldrb	r3, [r7, #23]
 8017bd2:	b29c      	uxth	r4, r3
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017bd8:	3b01      	subs	r3, #1
 8017bda:	4618      	mov	r0, r3
 8017bdc:	f7f8 faa4 	bl	8010128 <lwip_htonl>
 8017be0:	4603      	mov	r3, r0
 8017be2:	2200      	movs	r2, #0
 8017be4:	4621      	mov	r1, r4
 8017be6:	6878      	ldr	r0, [r7, #4]
 8017be8:	f7ff fe68 	bl	80178bc <tcp_output_alloc_header>
 8017bec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017bee:	693b      	ldr	r3, [r7, #16]
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d102      	bne.n	8017bfa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8017bf8:	e010      	b.n	8017c1c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017bfa:	7dfb      	ldrb	r3, [r7, #23]
 8017bfc:	2200      	movs	r2, #0
 8017bfe:	6939      	ldr	r1, [r7, #16]
 8017c00:	6878      	ldr	r0, [r7, #4]
 8017c02:	f7ff fe99 	bl	8017938 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017c06:	687a      	ldr	r2, [r7, #4]
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	3304      	adds	r3, #4
 8017c0c:	6939      	ldr	r1, [r7, #16]
 8017c0e:	6878      	ldr	r0, [r7, #4]
 8017c10:	f7ff fed0 	bl	80179b4 <tcp_output_control_segment>
 8017c14:	4603      	mov	r3, r0
 8017c16:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	371c      	adds	r7, #28
 8017c20:	46bd      	mov	sp, r7
 8017c22:	bd90      	pop	{r4, r7, pc}
 8017c24:	0801fadc 	.word	0x0801fadc
 8017c28:	080202b8 	.word	0x080202b8
 8017c2c:	0801fb30 	.word	0x0801fb30

08017c30 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017c30:	b590      	push	{r4, r7, lr}
 8017c32:	b08b      	sub	sp, #44	@ 0x2c
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017c38:	2300      	movs	r3, #0
 8017c3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d106      	bne.n	8017c52 <tcp_zero_window_probe+0x22>
 8017c44:	4b4c      	ldr	r3, [pc, #304]	@ (8017d78 <tcp_zero_window_probe+0x148>)
 8017c46:	f640 024f 	movw	r2, #2127	@ 0x84f
 8017c4a:	494c      	ldr	r1, [pc, #304]	@ (8017d7c <tcp_zero_window_probe+0x14c>)
 8017c4c:	484c      	ldr	r0, [pc, #304]	@ (8017d80 <tcp_zero_window_probe+0x150>)
 8017c4e:	f003 fe45 	bl	801b8dc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017c56:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017c58:	6a3b      	ldr	r3, [r7, #32]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d101      	bne.n	8017c62 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017c5e:	2300      	movs	r3, #0
 8017c60:	e086      	b.n	8017d70 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017c68:	2bff      	cmp	r3, #255	@ 0xff
 8017c6a:	d007      	beq.n	8017c7c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017c72:	3301      	adds	r3, #1
 8017c74:	b2da      	uxtb	r2, r3
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017c7c:	6a3b      	ldr	r3, [r7, #32]
 8017c7e:	68db      	ldr	r3, [r3, #12]
 8017c80:	899b      	ldrh	r3, [r3, #12]
 8017c82:	b29b      	uxth	r3, r3
 8017c84:	4618      	mov	r0, r3
 8017c86:	f7f8 fa39 	bl	80100fc <lwip_htons>
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	b2db      	uxtb	r3, r3
 8017c8e:	f003 0301 	and.w	r3, r3, #1
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d005      	beq.n	8017ca2 <tcp_zero_window_probe+0x72>
 8017c96:	6a3b      	ldr	r3, [r7, #32]
 8017c98:	891b      	ldrh	r3, [r3, #8]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d101      	bne.n	8017ca2 <tcp_zero_window_probe+0x72>
 8017c9e:	2301      	movs	r3, #1
 8017ca0:	e000      	b.n	8017ca4 <tcp_zero_window_probe+0x74>
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8017ca6:	7ffb      	ldrb	r3, [r7, #31]
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	bf0c      	ite	eq
 8017cac:	2301      	moveq	r3, #1
 8017cae:	2300      	movne	r3, #0
 8017cb0:	b2db      	uxtb	r3, r3
 8017cb2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017cb8:	b299      	uxth	r1, r3
 8017cba:	6a3b      	ldr	r3, [r7, #32]
 8017cbc:	68db      	ldr	r3, [r3, #12]
 8017cbe:	685b      	ldr	r3, [r3, #4]
 8017cc0:	8bba      	ldrh	r2, [r7, #28]
 8017cc2:	6878      	ldr	r0, [r7, #4]
 8017cc4:	f7ff fdfa 	bl	80178bc <tcp_output_alloc_header>
 8017cc8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8017cca:	69bb      	ldr	r3, [r7, #24]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d102      	bne.n	8017cd6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8017cd4:	e04c      	b.n	8017d70 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017cd6:	69bb      	ldr	r3, [r7, #24]
 8017cd8:	685b      	ldr	r3, [r3, #4]
 8017cda:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017cdc:	7ffb      	ldrb	r3, [r7, #31]
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d011      	beq.n	8017d06 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017ce2:	697b      	ldr	r3, [r7, #20]
 8017ce4:	899b      	ldrh	r3, [r3, #12]
 8017ce6:	b29b      	uxth	r3, r3
 8017ce8:	b21b      	sxth	r3, r3
 8017cea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017cee:	b21c      	sxth	r4, r3
 8017cf0:	2011      	movs	r0, #17
 8017cf2:	f7f8 fa03 	bl	80100fc <lwip_htons>
 8017cf6:	4603      	mov	r3, r0
 8017cf8:	b21b      	sxth	r3, r3
 8017cfa:	4323      	orrs	r3, r4
 8017cfc:	b21b      	sxth	r3, r3
 8017cfe:	b29a      	uxth	r2, r3
 8017d00:	697b      	ldr	r3, [r7, #20]
 8017d02:	819a      	strh	r2, [r3, #12]
 8017d04:	e010      	b.n	8017d28 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017d06:	69bb      	ldr	r3, [r7, #24]
 8017d08:	685b      	ldr	r3, [r3, #4]
 8017d0a:	3314      	adds	r3, #20
 8017d0c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017d0e:	6a3b      	ldr	r3, [r7, #32]
 8017d10:	6858      	ldr	r0, [r3, #4]
 8017d12:	6a3b      	ldr	r3, [r7, #32]
 8017d14:	685b      	ldr	r3, [r3, #4]
 8017d16:	891a      	ldrh	r2, [r3, #8]
 8017d18:	6a3b      	ldr	r3, [r7, #32]
 8017d1a:	891b      	ldrh	r3, [r3, #8]
 8017d1c:	1ad3      	subs	r3, r2, r3
 8017d1e:	b29b      	uxth	r3, r3
 8017d20:	2201      	movs	r2, #1
 8017d22:	6939      	ldr	r1, [r7, #16]
 8017d24:	f7f9 ffa0 	bl	8011c68 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017d28:	6a3b      	ldr	r3, [r7, #32]
 8017d2a:	68db      	ldr	r3, [r3, #12]
 8017d2c:	685b      	ldr	r3, [r3, #4]
 8017d2e:	4618      	mov	r0, r3
 8017d30:	f7f8 f9fa 	bl	8010128 <lwip_htonl>
 8017d34:	4603      	mov	r3, r0
 8017d36:	3301      	adds	r3, #1
 8017d38:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	1ad3      	subs	r3, r2, r3
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	da02      	bge.n	8017d4c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	68fa      	ldr	r2, [r7, #12]
 8017d4a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d50:	2200      	movs	r2, #0
 8017d52:	69b9      	ldr	r1, [r7, #24]
 8017d54:	6878      	ldr	r0, [r7, #4]
 8017d56:	f7ff fdef 	bl	8017938 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017d5a:	687a      	ldr	r2, [r7, #4]
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	3304      	adds	r3, #4
 8017d60:	69b9      	ldr	r1, [r7, #24]
 8017d62:	6878      	ldr	r0, [r7, #4]
 8017d64:	f7ff fe26 	bl	80179b4 <tcp_output_control_segment>
 8017d68:	4603      	mov	r3, r0
 8017d6a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017d6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017d70:	4618      	mov	r0, r3
 8017d72:	372c      	adds	r7, #44	@ 0x2c
 8017d74:	46bd      	mov	sp, r7
 8017d76:	bd90      	pop	{r4, r7, pc}
 8017d78:	0801fadc 	.word	0x0801fadc
 8017d7c:	080202d4 	.word	0x080202d4
 8017d80:	0801fb30 	.word	0x0801fb30

08017d84 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017d84:	b580      	push	{r7, lr}
 8017d86:	b082      	sub	sp, #8
 8017d88:	af00      	add	r7, sp, #0
 8017d8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017d8c:	f7fa f85a 	bl	8011e44 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017d90:	4b0a      	ldr	r3, [pc, #40]	@ (8017dbc <tcpip_tcp_timer+0x38>)
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d103      	bne.n	8017da0 <tcpip_tcp_timer+0x1c>
 8017d98:	4b09      	ldr	r3, [pc, #36]	@ (8017dc0 <tcpip_tcp_timer+0x3c>)
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d005      	beq.n	8017dac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017da0:	2200      	movs	r2, #0
 8017da2:	4908      	ldr	r1, [pc, #32]	@ (8017dc4 <tcpip_tcp_timer+0x40>)
 8017da4:	20fa      	movs	r0, #250	@ 0xfa
 8017da6:	f000 f8f3 	bl	8017f90 <sys_timeout>
 8017daa:	e003      	b.n	8017db4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017dac:	4b06      	ldr	r3, [pc, #24]	@ (8017dc8 <tcpip_tcp_timer+0x44>)
 8017dae:	2200      	movs	r2, #0
 8017db0:	601a      	str	r2, [r3, #0]
  }
}
 8017db2:	bf00      	nop
 8017db4:	bf00      	nop
 8017db6:	3708      	adds	r7, #8
 8017db8:	46bd      	mov	sp, r7
 8017dba:	bd80      	pop	{r7, pc}
 8017dbc:	2000c8bc 	.word	0x2000c8bc
 8017dc0:	2000c8c0 	.word	0x2000c8c0
 8017dc4:	08017d85 	.word	0x08017d85
 8017dc8:	2000c908 	.word	0x2000c908

08017dcc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017dcc:	b580      	push	{r7, lr}
 8017dce:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8017dfc <tcp_timer_needed+0x30>)
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d10f      	bne.n	8017df8 <tcp_timer_needed+0x2c>
 8017dd8:	4b09      	ldr	r3, [pc, #36]	@ (8017e00 <tcp_timer_needed+0x34>)
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d103      	bne.n	8017de8 <tcp_timer_needed+0x1c>
 8017de0:	4b08      	ldr	r3, [pc, #32]	@ (8017e04 <tcp_timer_needed+0x38>)
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d007      	beq.n	8017df8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017de8:	4b04      	ldr	r3, [pc, #16]	@ (8017dfc <tcp_timer_needed+0x30>)
 8017dea:	2201      	movs	r2, #1
 8017dec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017dee:	2200      	movs	r2, #0
 8017df0:	4905      	ldr	r1, [pc, #20]	@ (8017e08 <tcp_timer_needed+0x3c>)
 8017df2:	20fa      	movs	r0, #250	@ 0xfa
 8017df4:	f000 f8cc 	bl	8017f90 <sys_timeout>
  }
}
 8017df8:	bf00      	nop
 8017dfa:	bd80      	pop	{r7, pc}
 8017dfc:	2000c908 	.word	0x2000c908
 8017e00:	2000c8bc 	.word	0x2000c8bc
 8017e04:	2000c8c0 	.word	0x2000c8c0
 8017e08:	08017d85 	.word	0x08017d85

08017e0c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b086      	sub	sp, #24
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	60f8      	str	r0, [r7, #12]
 8017e14:	60b9      	str	r1, [r7, #8]
 8017e16:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017e18:	200a      	movs	r0, #10
 8017e1a:	f7f8 fe47 	bl	8010aac <memp_malloc>
 8017e1e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017e20:	693b      	ldr	r3, [r7, #16]
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d109      	bne.n	8017e3a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017e26:	693b      	ldr	r3, [r7, #16]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d151      	bne.n	8017ed0 <sys_timeout_abs+0xc4>
 8017e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8017ed8 <sys_timeout_abs+0xcc>)
 8017e2e:	22be      	movs	r2, #190	@ 0xbe
 8017e30:	492a      	ldr	r1, [pc, #168]	@ (8017edc <sys_timeout_abs+0xd0>)
 8017e32:	482b      	ldr	r0, [pc, #172]	@ (8017ee0 <sys_timeout_abs+0xd4>)
 8017e34:	f003 fd52 	bl	801b8dc <iprintf>
    return;
 8017e38:	e04a      	b.n	8017ed0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017e3a:	693b      	ldr	r3, [r7, #16]
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017e40:	693b      	ldr	r3, [r7, #16]
 8017e42:	68ba      	ldr	r2, [r7, #8]
 8017e44:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017e46:	693b      	ldr	r3, [r7, #16]
 8017e48:	687a      	ldr	r2, [r7, #4]
 8017e4a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017e4c:	693b      	ldr	r3, [r7, #16]
 8017e4e:	68fa      	ldr	r2, [r7, #12]
 8017e50:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017e52:	4b24      	ldr	r3, [pc, #144]	@ (8017ee4 <sys_timeout_abs+0xd8>)
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d103      	bne.n	8017e62 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017e5a:	4a22      	ldr	r2, [pc, #136]	@ (8017ee4 <sys_timeout_abs+0xd8>)
 8017e5c:	693b      	ldr	r3, [r7, #16]
 8017e5e:	6013      	str	r3, [r2, #0]
    return;
 8017e60:	e037      	b.n	8017ed2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017e62:	693b      	ldr	r3, [r7, #16]
 8017e64:	685a      	ldr	r2, [r3, #4]
 8017e66:	4b1f      	ldr	r3, [pc, #124]	@ (8017ee4 <sys_timeout_abs+0xd8>)
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	685b      	ldr	r3, [r3, #4]
 8017e6c:	1ad3      	subs	r3, r2, r3
 8017e6e:	0fdb      	lsrs	r3, r3, #31
 8017e70:	f003 0301 	and.w	r3, r3, #1
 8017e74:	b2db      	uxtb	r3, r3
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d007      	beq.n	8017e8a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8017ee4 <sys_timeout_abs+0xd8>)
 8017e7c:	681a      	ldr	r2, [r3, #0]
 8017e7e:	693b      	ldr	r3, [r7, #16]
 8017e80:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017e82:	4a18      	ldr	r2, [pc, #96]	@ (8017ee4 <sys_timeout_abs+0xd8>)
 8017e84:	693b      	ldr	r3, [r7, #16]
 8017e86:	6013      	str	r3, [r2, #0]
 8017e88:	e023      	b.n	8017ed2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017e8a:	4b16      	ldr	r3, [pc, #88]	@ (8017ee4 <sys_timeout_abs+0xd8>)
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	617b      	str	r3, [r7, #20]
 8017e90:	e01a      	b.n	8017ec8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017e92:	697b      	ldr	r3, [r7, #20]
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d00b      	beq.n	8017eb2 <sys_timeout_abs+0xa6>
 8017e9a:	693b      	ldr	r3, [r7, #16]
 8017e9c:	685a      	ldr	r2, [r3, #4]
 8017e9e:	697b      	ldr	r3, [r7, #20]
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	685b      	ldr	r3, [r3, #4]
 8017ea4:	1ad3      	subs	r3, r2, r3
 8017ea6:	0fdb      	lsrs	r3, r3, #31
 8017ea8:	f003 0301 	and.w	r3, r3, #1
 8017eac:	b2db      	uxtb	r3, r3
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d007      	beq.n	8017ec2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017eb2:	697b      	ldr	r3, [r7, #20]
 8017eb4:	681a      	ldr	r2, [r3, #0]
 8017eb6:	693b      	ldr	r3, [r7, #16]
 8017eb8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017eba:	697b      	ldr	r3, [r7, #20]
 8017ebc:	693a      	ldr	r2, [r7, #16]
 8017ebe:	601a      	str	r2, [r3, #0]
        break;
 8017ec0:	e007      	b.n	8017ed2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017ec2:	697b      	ldr	r3, [r7, #20]
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	617b      	str	r3, [r7, #20]
 8017ec8:	697b      	ldr	r3, [r7, #20]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d1e1      	bne.n	8017e92 <sys_timeout_abs+0x86>
 8017ece:	e000      	b.n	8017ed2 <sys_timeout_abs+0xc6>
    return;
 8017ed0:	bf00      	nop
      }
    }
  }
}
 8017ed2:	3718      	adds	r7, #24
 8017ed4:	46bd      	mov	sp, r7
 8017ed6:	bd80      	pop	{r7, pc}
 8017ed8:	080202f8 	.word	0x080202f8
 8017edc:	0802032c 	.word	0x0802032c
 8017ee0:	0802036c 	.word	0x0802036c
 8017ee4:	2000c900 	.word	0x2000c900

08017ee8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b086      	sub	sp, #24
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017ef4:	697b      	ldr	r3, [r7, #20]
 8017ef6:	685b      	ldr	r3, [r3, #4]
 8017ef8:	4798      	blx	r3

  now = sys_now();
 8017efa:	f7f2 fccb 	bl	800a894 <sys_now>
 8017efe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017f00:	697b      	ldr	r3, [r7, #20]
 8017f02:	681a      	ldr	r2, [r3, #0]
 8017f04:	4b0f      	ldr	r3, [pc, #60]	@ (8017f44 <lwip_cyclic_timer+0x5c>)
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	4413      	add	r3, r2
 8017f0a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017f0c:	68fa      	ldr	r2, [r7, #12]
 8017f0e:	693b      	ldr	r3, [r7, #16]
 8017f10:	1ad3      	subs	r3, r2, r3
 8017f12:	0fdb      	lsrs	r3, r3, #31
 8017f14:	f003 0301 	and.w	r3, r3, #1
 8017f18:	b2db      	uxtb	r3, r3
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d009      	beq.n	8017f32 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017f1e:	697b      	ldr	r3, [r7, #20]
 8017f20:	681a      	ldr	r2, [r3, #0]
 8017f22:	693b      	ldr	r3, [r7, #16]
 8017f24:	4413      	add	r3, r2
 8017f26:	687a      	ldr	r2, [r7, #4]
 8017f28:	4907      	ldr	r1, [pc, #28]	@ (8017f48 <lwip_cyclic_timer+0x60>)
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	f7ff ff6e 	bl	8017e0c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017f30:	e004      	b.n	8017f3c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017f32:	687a      	ldr	r2, [r7, #4]
 8017f34:	4904      	ldr	r1, [pc, #16]	@ (8017f48 <lwip_cyclic_timer+0x60>)
 8017f36:	68f8      	ldr	r0, [r7, #12]
 8017f38:	f7ff ff68 	bl	8017e0c <sys_timeout_abs>
}
 8017f3c:	bf00      	nop
 8017f3e:	3718      	adds	r7, #24
 8017f40:	46bd      	mov	sp, r7
 8017f42:	bd80      	pop	{r7, pc}
 8017f44:	2000c904 	.word	0x2000c904
 8017f48:	08017ee9 	.word	0x08017ee9

08017f4c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017f4c:	b580      	push	{r7, lr}
 8017f4e:	b082      	sub	sp, #8
 8017f50:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017f52:	2301      	movs	r3, #1
 8017f54:	607b      	str	r3, [r7, #4]
 8017f56:	e00e      	b.n	8017f76 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017f58:	4a0b      	ldr	r2, [pc, #44]	@ (8017f88 <sys_timeouts_init+0x3c>)
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	00db      	lsls	r3, r3, #3
 8017f64:	4a08      	ldr	r2, [pc, #32]	@ (8017f88 <sys_timeouts_init+0x3c>)
 8017f66:	4413      	add	r3, r2
 8017f68:	461a      	mov	r2, r3
 8017f6a:	4908      	ldr	r1, [pc, #32]	@ (8017f8c <sys_timeouts_init+0x40>)
 8017f6c:	f000 f810 	bl	8017f90 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	3301      	adds	r3, #1
 8017f74:	607b      	str	r3, [r7, #4]
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	2b02      	cmp	r3, #2
 8017f7a:	d9ed      	bls.n	8017f58 <sys_timeouts_init+0xc>
  }
}
 8017f7c:	bf00      	nop
 8017f7e:	bf00      	nop
 8017f80:	3708      	adds	r7, #8
 8017f82:	46bd      	mov	sp, r7
 8017f84:	bd80      	pop	{r7, pc}
 8017f86:	bf00      	nop
 8017f88:	08020f6c 	.word	0x08020f6c
 8017f8c:	08017ee9 	.word	0x08017ee9

08017f90 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017f90:	b580      	push	{r7, lr}
 8017f92:	b086      	sub	sp, #24
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	60f8      	str	r0, [r7, #12]
 8017f98:	60b9      	str	r1, [r7, #8]
 8017f9a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017fa2:	d306      	bcc.n	8017fb2 <sys_timeout+0x22>
 8017fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8017fd0 <sys_timeout+0x40>)
 8017fa6:	f240 1229 	movw	r2, #297	@ 0x129
 8017faa:	490a      	ldr	r1, [pc, #40]	@ (8017fd4 <sys_timeout+0x44>)
 8017fac:	480a      	ldr	r0, [pc, #40]	@ (8017fd8 <sys_timeout+0x48>)
 8017fae:	f003 fc95 	bl	801b8dc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017fb2:	f7f2 fc6f 	bl	800a894 <sys_now>
 8017fb6:	4602      	mov	r2, r0
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	4413      	add	r3, r2
 8017fbc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017fbe:	687a      	ldr	r2, [r7, #4]
 8017fc0:	68b9      	ldr	r1, [r7, #8]
 8017fc2:	6978      	ldr	r0, [r7, #20]
 8017fc4:	f7ff ff22 	bl	8017e0c <sys_timeout_abs>
#endif
}
 8017fc8:	bf00      	nop
 8017fca:	3718      	adds	r7, #24
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	bd80      	pop	{r7, pc}
 8017fd0:	080202f8 	.word	0x080202f8
 8017fd4:	08020394 	.word	0x08020394
 8017fd8:	0802036c 	.word	0x0802036c

08017fdc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017fdc:	b580      	push	{r7, lr}
 8017fde:	b084      	sub	sp, #16
 8017fe0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017fe2:	f7f2 fc57 	bl	800a894 <sys_now>
 8017fe6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017fe8:	4b17      	ldr	r3, [pc, #92]	@ (8018048 <sys_check_timeouts+0x6c>)
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017fee:	68bb      	ldr	r3, [r7, #8]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d022      	beq.n	801803a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017ff4:	68bb      	ldr	r3, [r7, #8]
 8017ff6:	685b      	ldr	r3, [r3, #4]
 8017ff8:	68fa      	ldr	r2, [r7, #12]
 8017ffa:	1ad3      	subs	r3, r2, r3
 8017ffc:	0fdb      	lsrs	r3, r3, #31
 8017ffe:	f003 0301 	and.w	r3, r3, #1
 8018002:	b2db      	uxtb	r3, r3
 8018004:	2b00      	cmp	r3, #0
 8018006:	d11a      	bne.n	801803e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8018008:	68bb      	ldr	r3, [r7, #8]
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	4a0e      	ldr	r2, [pc, #56]	@ (8018048 <sys_check_timeouts+0x6c>)
 801800e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8018010:	68bb      	ldr	r3, [r7, #8]
 8018012:	689b      	ldr	r3, [r3, #8]
 8018014:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8018016:	68bb      	ldr	r3, [r7, #8]
 8018018:	68db      	ldr	r3, [r3, #12]
 801801a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801801c:	68bb      	ldr	r3, [r7, #8]
 801801e:	685b      	ldr	r3, [r3, #4]
 8018020:	4a0a      	ldr	r2, [pc, #40]	@ (801804c <sys_check_timeouts+0x70>)
 8018022:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8018024:	68b9      	ldr	r1, [r7, #8]
 8018026:	200a      	movs	r0, #10
 8018028:	f7f8 fdb6 	bl	8010b98 <memp_free>
    if (handler != NULL) {
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	2b00      	cmp	r3, #0
 8018030:	d0da      	beq.n	8017fe8 <sys_check_timeouts+0xc>
      handler(arg);
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	6838      	ldr	r0, [r7, #0]
 8018036:	4798      	blx	r3
  do {
 8018038:	e7d6      	b.n	8017fe8 <sys_check_timeouts+0xc>
      return;
 801803a:	bf00      	nop
 801803c:	e000      	b.n	8018040 <sys_check_timeouts+0x64>
      return;
 801803e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8018040:	3710      	adds	r7, #16
 8018042:	46bd      	mov	sp, r7
 8018044:	bd80      	pop	{r7, pc}
 8018046:	bf00      	nop
 8018048:	2000c900 	.word	0x2000c900
 801804c:	2000c904 	.word	0x2000c904

08018050 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8018050:	b580      	push	{r7, lr}
 8018052:	b082      	sub	sp, #8
 8018054:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8018056:	4b16      	ldr	r3, [pc, #88]	@ (80180b0 <sys_timeouts_sleeptime+0x60>)
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	2b00      	cmp	r3, #0
 801805c:	d102      	bne.n	8018064 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801805e:	f04f 33ff 	mov.w	r3, #4294967295
 8018062:	e020      	b.n	80180a6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8018064:	f7f2 fc16 	bl	800a894 <sys_now>
 8018068:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801806a:	4b11      	ldr	r3, [pc, #68]	@ (80180b0 <sys_timeouts_sleeptime+0x60>)
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	685a      	ldr	r2, [r3, #4]
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	1ad3      	subs	r3, r2, r3
 8018074:	0fdb      	lsrs	r3, r3, #31
 8018076:	f003 0301 	and.w	r3, r3, #1
 801807a:	b2db      	uxtb	r3, r3
 801807c:	2b00      	cmp	r3, #0
 801807e:	d001      	beq.n	8018084 <sys_timeouts_sleeptime+0x34>
    return 0;
 8018080:	2300      	movs	r3, #0
 8018082:	e010      	b.n	80180a6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8018084:	4b0a      	ldr	r3, [pc, #40]	@ (80180b0 <sys_timeouts_sleeptime+0x60>)
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	685a      	ldr	r2, [r3, #4]
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	1ad3      	subs	r3, r2, r3
 801808e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8018090:	683b      	ldr	r3, [r7, #0]
 8018092:	2b00      	cmp	r3, #0
 8018094:	da06      	bge.n	80180a4 <sys_timeouts_sleeptime+0x54>
 8018096:	4b07      	ldr	r3, [pc, #28]	@ (80180b4 <sys_timeouts_sleeptime+0x64>)
 8018098:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801809c:	4906      	ldr	r1, [pc, #24]	@ (80180b8 <sys_timeouts_sleeptime+0x68>)
 801809e:	4807      	ldr	r0, [pc, #28]	@ (80180bc <sys_timeouts_sleeptime+0x6c>)
 80180a0:	f003 fc1c 	bl	801b8dc <iprintf>
    return ret;
 80180a4:	683b      	ldr	r3, [r7, #0]
  }
}
 80180a6:	4618      	mov	r0, r3
 80180a8:	3708      	adds	r7, #8
 80180aa:	46bd      	mov	sp, r7
 80180ac:	bd80      	pop	{r7, pc}
 80180ae:	bf00      	nop
 80180b0:	2000c900 	.word	0x2000c900
 80180b4:	080202f8 	.word	0x080202f8
 80180b8:	080203cc 	.word	0x080203cc
 80180bc:	0802036c 	.word	0x0802036c

080180c0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80180c4:	f003 fb0a 	bl	801b6dc <rand>
 80180c8:	4603      	mov	r3, r0
 80180ca:	b29b      	uxth	r3, r3
 80180cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80180d0:	b29b      	uxth	r3, r3
 80180d2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80180d6:	b29a      	uxth	r2, r3
 80180d8:	4b01      	ldr	r3, [pc, #4]	@ (80180e0 <udp_init+0x20>)
 80180da:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80180dc:	bf00      	nop
 80180de:	bd80      	pop	{r7, pc}
 80180e0:	200000a4 	.word	0x200000a4

080180e4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	b084      	sub	sp, #16
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	60f8      	str	r0, [r7, #12]
 80180ec:	60b9      	str	r1, [r7, #8]
 80180ee:	4613      	mov	r3, r2
 80180f0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80180f2:	68fb      	ldr	r3, [r7, #12]
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d105      	bne.n	8018104 <udp_input_local_match+0x20>
 80180f8:	4b27      	ldr	r3, [pc, #156]	@ (8018198 <udp_input_local_match+0xb4>)
 80180fa:	2287      	movs	r2, #135	@ 0x87
 80180fc:	4927      	ldr	r1, [pc, #156]	@ (801819c <udp_input_local_match+0xb8>)
 80180fe:	4828      	ldr	r0, [pc, #160]	@ (80181a0 <udp_input_local_match+0xbc>)
 8018100:	f003 fbec 	bl	801b8dc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8018104:	68bb      	ldr	r3, [r7, #8]
 8018106:	2b00      	cmp	r3, #0
 8018108:	d105      	bne.n	8018116 <udp_input_local_match+0x32>
 801810a:	4b23      	ldr	r3, [pc, #140]	@ (8018198 <udp_input_local_match+0xb4>)
 801810c:	2288      	movs	r2, #136	@ 0x88
 801810e:	4925      	ldr	r1, [pc, #148]	@ (80181a4 <udp_input_local_match+0xc0>)
 8018110:	4823      	ldr	r0, [pc, #140]	@ (80181a0 <udp_input_local_match+0xbc>)
 8018112:	f003 fbe3 	bl	801b8dc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	7a1b      	ldrb	r3, [r3, #8]
 801811a:	2b00      	cmp	r3, #0
 801811c:	d00b      	beq.n	8018136 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	7a1a      	ldrb	r2, [r3, #8]
 8018122:	4b21      	ldr	r3, [pc, #132]	@ (80181a8 <udp_input_local_match+0xc4>)
 8018124:	685b      	ldr	r3, [r3, #4]
 8018126:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801812a:	3301      	adds	r3, #1
 801812c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801812e:	429a      	cmp	r2, r3
 8018130:	d001      	beq.n	8018136 <udp_input_local_match+0x52>
    return 0;
 8018132:	2300      	movs	r3, #0
 8018134:	e02b      	b.n	801818e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8018136:	79fb      	ldrb	r3, [r7, #7]
 8018138:	2b00      	cmp	r3, #0
 801813a:	d018      	beq.n	801816e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	2b00      	cmp	r3, #0
 8018140:	d013      	beq.n	801816a <udp_input_local_match+0x86>
 8018142:	68fb      	ldr	r3, [r7, #12]
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d00f      	beq.n	801816a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801814a:	4b17      	ldr	r3, [pc, #92]	@ (80181a8 <udp_input_local_match+0xc4>)
 801814c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801814e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018152:	d00a      	beq.n	801816a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	681a      	ldr	r2, [r3, #0]
 8018158:	4b13      	ldr	r3, [pc, #76]	@ (80181a8 <udp_input_local_match+0xc4>)
 801815a:	695b      	ldr	r3, [r3, #20]
 801815c:	405a      	eors	r2, r3
 801815e:	68bb      	ldr	r3, [r7, #8]
 8018160:	3308      	adds	r3, #8
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018166:	2b00      	cmp	r3, #0
 8018168:	d110      	bne.n	801818c <udp_input_local_match+0xa8>
          return 1;
 801816a:	2301      	movs	r3, #1
 801816c:	e00f      	b.n	801818e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801816e:	68fb      	ldr	r3, [r7, #12]
 8018170:	2b00      	cmp	r3, #0
 8018172:	d009      	beq.n	8018188 <udp_input_local_match+0xa4>
 8018174:	68fb      	ldr	r3, [r7, #12]
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	2b00      	cmp	r3, #0
 801817a:	d005      	beq.n	8018188 <udp_input_local_match+0xa4>
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	681a      	ldr	r2, [r3, #0]
 8018180:	4b09      	ldr	r3, [pc, #36]	@ (80181a8 <udp_input_local_match+0xc4>)
 8018182:	695b      	ldr	r3, [r3, #20]
 8018184:	429a      	cmp	r2, r3
 8018186:	d101      	bne.n	801818c <udp_input_local_match+0xa8>
        return 1;
 8018188:	2301      	movs	r3, #1
 801818a:	e000      	b.n	801818e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801818c:	2300      	movs	r3, #0
}
 801818e:	4618      	mov	r0, r3
 8018190:	3710      	adds	r7, #16
 8018192:	46bd      	mov	sp, r7
 8018194:	bd80      	pop	{r7, pc}
 8018196:	bf00      	nop
 8018198:	080203e0 	.word	0x080203e0
 801819c:	08020410 	.word	0x08020410
 80181a0:	08020434 	.word	0x08020434
 80181a4:	0802045c 	.word	0x0802045c
 80181a8:	2000915c 	.word	0x2000915c

080181ac <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80181ac:	b590      	push	{r4, r7, lr}
 80181ae:	b08d      	sub	sp, #52	@ 0x34
 80181b0:	af02      	add	r7, sp, #8
 80181b2:	6078      	str	r0, [r7, #4]
 80181b4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80181b6:	2300      	movs	r3, #0
 80181b8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d105      	bne.n	80181cc <udp_input+0x20>
 80181c0:	4b7c      	ldr	r3, [pc, #496]	@ (80183b4 <udp_input+0x208>)
 80181c2:	22cf      	movs	r2, #207	@ 0xcf
 80181c4:	497c      	ldr	r1, [pc, #496]	@ (80183b8 <udp_input+0x20c>)
 80181c6:	487d      	ldr	r0, [pc, #500]	@ (80183bc <udp_input+0x210>)
 80181c8:	f003 fb88 	bl	801b8dc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80181cc:	683b      	ldr	r3, [r7, #0]
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d105      	bne.n	80181de <udp_input+0x32>
 80181d2:	4b78      	ldr	r3, [pc, #480]	@ (80183b4 <udp_input+0x208>)
 80181d4:	22d0      	movs	r2, #208	@ 0xd0
 80181d6:	497a      	ldr	r1, [pc, #488]	@ (80183c0 <udp_input+0x214>)
 80181d8:	4878      	ldr	r0, [pc, #480]	@ (80183bc <udp_input+0x210>)
 80181da:	f003 fb7f 	bl	801b8dc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	895b      	ldrh	r3, [r3, #10]
 80181e2:	2b07      	cmp	r3, #7
 80181e4:	d803      	bhi.n	80181ee <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80181e6:	6878      	ldr	r0, [r7, #4]
 80181e8:	f7f9 fb48 	bl	801187c <pbuf_free>
    goto end;
 80181ec:	e0de      	b.n	80183ac <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	685b      	ldr	r3, [r3, #4]
 80181f2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80181f4:	4b73      	ldr	r3, [pc, #460]	@ (80183c4 <udp_input+0x218>)
 80181f6:	695b      	ldr	r3, [r3, #20]
 80181f8:	4a72      	ldr	r2, [pc, #456]	@ (80183c4 <udp_input+0x218>)
 80181fa:	6812      	ldr	r2, [r2, #0]
 80181fc:	4611      	mov	r1, r2
 80181fe:	4618      	mov	r0, r3
 8018200:	f001 fc56 	bl	8019ab0 <ip4_addr_isbroadcast_u32>
 8018204:	4603      	mov	r3, r0
 8018206:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8018208:	697b      	ldr	r3, [r7, #20]
 801820a:	881b      	ldrh	r3, [r3, #0]
 801820c:	b29b      	uxth	r3, r3
 801820e:	4618      	mov	r0, r3
 8018210:	f7f7 ff74 	bl	80100fc <lwip_htons>
 8018214:	4603      	mov	r3, r0
 8018216:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8018218:	697b      	ldr	r3, [r7, #20]
 801821a:	885b      	ldrh	r3, [r3, #2]
 801821c:	b29b      	uxth	r3, r3
 801821e:	4618      	mov	r0, r3
 8018220:	f7f7 ff6c 	bl	80100fc <lwip_htons>
 8018224:	4603      	mov	r3, r0
 8018226:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8018228:	2300      	movs	r3, #0
 801822a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801822c:	2300      	movs	r3, #0
 801822e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8018230:	2300      	movs	r3, #0
 8018232:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018234:	4b64      	ldr	r3, [pc, #400]	@ (80183c8 <udp_input+0x21c>)
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	627b      	str	r3, [r7, #36]	@ 0x24
 801823a:	e054      	b.n	80182e6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801823c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801823e:	8a5b      	ldrh	r3, [r3, #18]
 8018240:	89fa      	ldrh	r2, [r7, #14]
 8018242:	429a      	cmp	r2, r3
 8018244:	d14a      	bne.n	80182dc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8018246:	7cfb      	ldrb	r3, [r7, #19]
 8018248:	461a      	mov	r2, r3
 801824a:	6839      	ldr	r1, [r7, #0]
 801824c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801824e:	f7ff ff49 	bl	80180e4 <udp_input_local_match>
 8018252:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8018254:	2b00      	cmp	r3, #0
 8018256:	d041      	beq.n	80182dc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8018258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801825a:	7c1b      	ldrb	r3, [r3, #16]
 801825c:	f003 0304 	and.w	r3, r3, #4
 8018260:	2b00      	cmp	r3, #0
 8018262:	d11d      	bne.n	80182a0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8018264:	69fb      	ldr	r3, [r7, #28]
 8018266:	2b00      	cmp	r3, #0
 8018268:	d102      	bne.n	8018270 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801826a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801826c:	61fb      	str	r3, [r7, #28]
 801826e:	e017      	b.n	80182a0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8018270:	7cfb      	ldrb	r3, [r7, #19]
 8018272:	2b00      	cmp	r3, #0
 8018274:	d014      	beq.n	80182a0 <udp_input+0xf4>
 8018276:	4b53      	ldr	r3, [pc, #332]	@ (80183c4 <udp_input+0x218>)
 8018278:	695b      	ldr	r3, [r3, #20]
 801827a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801827e:	d10f      	bne.n	80182a0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8018280:	69fb      	ldr	r3, [r7, #28]
 8018282:	681a      	ldr	r2, [r3, #0]
 8018284:	683b      	ldr	r3, [r7, #0]
 8018286:	3304      	adds	r3, #4
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	429a      	cmp	r2, r3
 801828c:	d008      	beq.n	80182a0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801828e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018290:	681a      	ldr	r2, [r3, #0]
 8018292:	683b      	ldr	r3, [r7, #0]
 8018294:	3304      	adds	r3, #4
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	429a      	cmp	r2, r3
 801829a:	d101      	bne.n	80182a0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801829c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801829e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80182a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182a2:	8a9b      	ldrh	r3, [r3, #20]
 80182a4:	8a3a      	ldrh	r2, [r7, #16]
 80182a6:	429a      	cmp	r2, r3
 80182a8:	d118      	bne.n	80182dc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80182aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182ac:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d005      	beq.n	80182be <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80182b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182b4:	685a      	ldr	r2, [r3, #4]
 80182b6:	4b43      	ldr	r3, [pc, #268]	@ (80183c4 <udp_input+0x218>)
 80182b8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80182ba:	429a      	cmp	r2, r3
 80182bc:	d10e      	bne.n	80182dc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80182be:	6a3b      	ldr	r3, [r7, #32]
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d014      	beq.n	80182ee <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80182c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182c6:	68da      	ldr	r2, [r3, #12]
 80182c8:	6a3b      	ldr	r3, [r7, #32]
 80182ca:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80182cc:	4b3e      	ldr	r3, [pc, #248]	@ (80183c8 <udp_input+0x21c>)
 80182ce:	681a      	ldr	r2, [r3, #0]
 80182d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182d2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80182d4:	4a3c      	ldr	r2, [pc, #240]	@ (80183c8 <udp_input+0x21c>)
 80182d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182d8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80182da:	e008      	b.n	80182ee <udp_input+0x142>
      }
    }

    prev = pcb;
 80182dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182de:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80182e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182e2:	68db      	ldr	r3, [r3, #12]
 80182e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80182e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d1a7      	bne.n	801823c <udp_input+0x90>
 80182ec:	e000      	b.n	80182f0 <udp_input+0x144>
        break;
 80182ee:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80182f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d101      	bne.n	80182fa <udp_input+0x14e>
    pcb = uncon_pcb;
 80182f6:	69fb      	ldr	r3, [r7, #28]
 80182f8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80182fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d002      	beq.n	8018306 <udp_input+0x15a>
    for_us = 1;
 8018300:	2301      	movs	r3, #1
 8018302:	76fb      	strb	r3, [r7, #27]
 8018304:	e00a      	b.n	801831c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8018306:	683b      	ldr	r3, [r7, #0]
 8018308:	3304      	adds	r3, #4
 801830a:	681a      	ldr	r2, [r3, #0]
 801830c:	4b2d      	ldr	r3, [pc, #180]	@ (80183c4 <udp_input+0x218>)
 801830e:	695b      	ldr	r3, [r3, #20]
 8018310:	429a      	cmp	r2, r3
 8018312:	bf0c      	ite	eq
 8018314:	2301      	moveq	r3, #1
 8018316:	2300      	movne	r3, #0
 8018318:	b2db      	uxtb	r3, r3
 801831a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801831c:	7efb      	ldrb	r3, [r7, #27]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d041      	beq.n	80183a6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8018322:	2108      	movs	r1, #8
 8018324:	6878      	ldr	r0, [r7, #4]
 8018326:	f7f9 fa23 	bl	8011770 <pbuf_remove_header>
 801832a:	4603      	mov	r3, r0
 801832c:	2b00      	cmp	r3, #0
 801832e:	d00a      	beq.n	8018346 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018330:	4b20      	ldr	r3, [pc, #128]	@ (80183b4 <udp_input+0x208>)
 8018332:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8018336:	4925      	ldr	r1, [pc, #148]	@ (80183cc <udp_input+0x220>)
 8018338:	4820      	ldr	r0, [pc, #128]	@ (80183bc <udp_input+0x210>)
 801833a:	f003 facf 	bl	801b8dc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801833e:	6878      	ldr	r0, [r7, #4]
 8018340:	f7f9 fa9c 	bl	801187c <pbuf_free>
      goto end;
 8018344:	e032      	b.n	80183ac <udp_input+0x200>
    }

    if (pcb != NULL) {
 8018346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018348:	2b00      	cmp	r3, #0
 801834a:	d012      	beq.n	8018372 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801834c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801834e:	699b      	ldr	r3, [r3, #24]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d00a      	beq.n	801836a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018356:	699c      	ldr	r4, [r3, #24]
 8018358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801835a:	69d8      	ldr	r0, [r3, #28]
 801835c:	8a3b      	ldrh	r3, [r7, #16]
 801835e:	9300      	str	r3, [sp, #0]
 8018360:	4b1b      	ldr	r3, [pc, #108]	@ (80183d0 <udp_input+0x224>)
 8018362:	687a      	ldr	r2, [r7, #4]
 8018364:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018366:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018368:	e021      	b.n	80183ae <udp_input+0x202>
        pbuf_free(p);
 801836a:	6878      	ldr	r0, [r7, #4]
 801836c:	f7f9 fa86 	bl	801187c <pbuf_free>
        goto end;
 8018370:	e01c      	b.n	80183ac <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018372:	7cfb      	ldrb	r3, [r7, #19]
 8018374:	2b00      	cmp	r3, #0
 8018376:	d112      	bne.n	801839e <udp_input+0x1f2>
 8018378:	4b12      	ldr	r3, [pc, #72]	@ (80183c4 <udp_input+0x218>)
 801837a:	695b      	ldr	r3, [r3, #20]
 801837c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018380:	2be0      	cmp	r3, #224	@ 0xe0
 8018382:	d00c      	beq.n	801839e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018384:	4b0f      	ldr	r3, [pc, #60]	@ (80183c4 <udp_input+0x218>)
 8018386:	899b      	ldrh	r3, [r3, #12]
 8018388:	3308      	adds	r3, #8
 801838a:	b29b      	uxth	r3, r3
 801838c:	b21b      	sxth	r3, r3
 801838e:	4619      	mov	r1, r3
 8018390:	6878      	ldr	r0, [r7, #4]
 8018392:	f7f9 fa60 	bl	8011856 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8018396:	2103      	movs	r1, #3
 8018398:	6878      	ldr	r0, [r7, #4]
 801839a:	f001 f869 	bl	8019470 <icmp_dest_unreach>
      pbuf_free(p);
 801839e:	6878      	ldr	r0, [r7, #4]
 80183a0:	f7f9 fa6c 	bl	801187c <pbuf_free>
  return;
 80183a4:	e003      	b.n	80183ae <udp_input+0x202>
    pbuf_free(p);
 80183a6:	6878      	ldr	r0, [r7, #4]
 80183a8:	f7f9 fa68 	bl	801187c <pbuf_free>
  return;
 80183ac:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80183ae:	372c      	adds	r7, #44	@ 0x2c
 80183b0:	46bd      	mov	sp, r7
 80183b2:	bd90      	pop	{r4, r7, pc}
 80183b4:	080203e0 	.word	0x080203e0
 80183b8:	08020484 	.word	0x08020484
 80183bc:	08020434 	.word	0x08020434
 80183c0:	0802049c 	.word	0x0802049c
 80183c4:	2000915c 	.word	0x2000915c
 80183c8:	2000c90c 	.word	0x2000c90c
 80183cc:	080204b8 	.word	0x080204b8
 80183d0:	2000916c 	.word	0x2000916c

080183d4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80183d4:	b480      	push	{r7}
 80183d6:	b085      	sub	sp, #20
 80183d8:	af00      	add	r7, sp, #0
 80183da:	6078      	str	r0, [r7, #4]
 80183dc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d01e      	beq.n	8018422 <udp_netif_ip_addr_changed+0x4e>
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d01a      	beq.n	8018422 <udp_netif_ip_addr_changed+0x4e>
 80183ec:	683b      	ldr	r3, [r7, #0]
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d017      	beq.n	8018422 <udp_netif_ip_addr_changed+0x4e>
 80183f2:	683b      	ldr	r3, [r7, #0]
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d013      	beq.n	8018422 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80183fa:	4b0d      	ldr	r3, [pc, #52]	@ (8018430 <udp_netif_ip_addr_changed+0x5c>)
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	60fb      	str	r3, [r7, #12]
 8018400:	e00c      	b.n	801841c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018402:	68fb      	ldr	r3, [r7, #12]
 8018404:	681a      	ldr	r2, [r3, #0]
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	429a      	cmp	r2, r3
 801840c:	d103      	bne.n	8018416 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801840e:	683b      	ldr	r3, [r7, #0]
 8018410:	681a      	ldr	r2, [r3, #0]
 8018412:	68fb      	ldr	r3, [r7, #12]
 8018414:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	68db      	ldr	r3, [r3, #12]
 801841a:	60fb      	str	r3, [r7, #12]
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	2b00      	cmp	r3, #0
 8018420:	d1ef      	bne.n	8018402 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018422:	bf00      	nop
 8018424:	3714      	adds	r7, #20
 8018426:	46bd      	mov	sp, r7
 8018428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801842c:	4770      	bx	lr
 801842e:	bf00      	nop
 8018430:	2000c90c 	.word	0x2000c90c

08018434 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018434:	b580      	push	{r7, lr}
 8018436:	b082      	sub	sp, #8
 8018438:	af00      	add	r7, sp, #0
 801843a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801843c:	4915      	ldr	r1, [pc, #84]	@ (8018494 <etharp_free_entry+0x60>)
 801843e:	687a      	ldr	r2, [r7, #4]
 8018440:	4613      	mov	r3, r2
 8018442:	005b      	lsls	r3, r3, #1
 8018444:	4413      	add	r3, r2
 8018446:	00db      	lsls	r3, r3, #3
 8018448:	440b      	add	r3, r1
 801844a:	681b      	ldr	r3, [r3, #0]
 801844c:	2b00      	cmp	r3, #0
 801844e:	d013      	beq.n	8018478 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018450:	4910      	ldr	r1, [pc, #64]	@ (8018494 <etharp_free_entry+0x60>)
 8018452:	687a      	ldr	r2, [r7, #4]
 8018454:	4613      	mov	r3, r2
 8018456:	005b      	lsls	r3, r3, #1
 8018458:	4413      	add	r3, r2
 801845a:	00db      	lsls	r3, r3, #3
 801845c:	440b      	add	r3, r1
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	4618      	mov	r0, r3
 8018462:	f7f9 fa0b 	bl	801187c <pbuf_free>
    arp_table[i].q = NULL;
 8018466:	490b      	ldr	r1, [pc, #44]	@ (8018494 <etharp_free_entry+0x60>)
 8018468:	687a      	ldr	r2, [r7, #4]
 801846a:	4613      	mov	r3, r2
 801846c:	005b      	lsls	r3, r3, #1
 801846e:	4413      	add	r3, r2
 8018470:	00db      	lsls	r3, r3, #3
 8018472:	440b      	add	r3, r1
 8018474:	2200      	movs	r2, #0
 8018476:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018478:	4906      	ldr	r1, [pc, #24]	@ (8018494 <etharp_free_entry+0x60>)
 801847a:	687a      	ldr	r2, [r7, #4]
 801847c:	4613      	mov	r3, r2
 801847e:	005b      	lsls	r3, r3, #1
 8018480:	4413      	add	r3, r2
 8018482:	00db      	lsls	r3, r3, #3
 8018484:	440b      	add	r3, r1
 8018486:	3314      	adds	r3, #20
 8018488:	2200      	movs	r2, #0
 801848a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801848c:	bf00      	nop
 801848e:	3708      	adds	r7, #8
 8018490:	46bd      	mov	sp, r7
 8018492:	bd80      	pop	{r7, pc}
 8018494:	2000c910 	.word	0x2000c910

08018498 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018498:	b580      	push	{r7, lr}
 801849a:	b082      	sub	sp, #8
 801849c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801849e:	2300      	movs	r3, #0
 80184a0:	607b      	str	r3, [r7, #4]
 80184a2:	e096      	b.n	80185d2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80184a4:	494f      	ldr	r1, [pc, #316]	@ (80185e4 <etharp_tmr+0x14c>)
 80184a6:	687a      	ldr	r2, [r7, #4]
 80184a8:	4613      	mov	r3, r2
 80184aa:	005b      	lsls	r3, r3, #1
 80184ac:	4413      	add	r3, r2
 80184ae:	00db      	lsls	r3, r3, #3
 80184b0:	440b      	add	r3, r1
 80184b2:	3314      	adds	r3, #20
 80184b4:	781b      	ldrb	r3, [r3, #0]
 80184b6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80184b8:	78fb      	ldrb	r3, [r7, #3]
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	f000 8086 	beq.w	80185cc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80184c0:	4948      	ldr	r1, [pc, #288]	@ (80185e4 <etharp_tmr+0x14c>)
 80184c2:	687a      	ldr	r2, [r7, #4]
 80184c4:	4613      	mov	r3, r2
 80184c6:	005b      	lsls	r3, r3, #1
 80184c8:	4413      	add	r3, r2
 80184ca:	00db      	lsls	r3, r3, #3
 80184cc:	440b      	add	r3, r1
 80184ce:	3312      	adds	r3, #18
 80184d0:	881b      	ldrh	r3, [r3, #0]
 80184d2:	3301      	adds	r3, #1
 80184d4:	b298      	uxth	r0, r3
 80184d6:	4943      	ldr	r1, [pc, #268]	@ (80185e4 <etharp_tmr+0x14c>)
 80184d8:	687a      	ldr	r2, [r7, #4]
 80184da:	4613      	mov	r3, r2
 80184dc:	005b      	lsls	r3, r3, #1
 80184de:	4413      	add	r3, r2
 80184e0:	00db      	lsls	r3, r3, #3
 80184e2:	440b      	add	r3, r1
 80184e4:	3312      	adds	r3, #18
 80184e6:	4602      	mov	r2, r0
 80184e8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80184ea:	493e      	ldr	r1, [pc, #248]	@ (80185e4 <etharp_tmr+0x14c>)
 80184ec:	687a      	ldr	r2, [r7, #4]
 80184ee:	4613      	mov	r3, r2
 80184f0:	005b      	lsls	r3, r3, #1
 80184f2:	4413      	add	r3, r2
 80184f4:	00db      	lsls	r3, r3, #3
 80184f6:	440b      	add	r3, r1
 80184f8:	3312      	adds	r3, #18
 80184fa:	881b      	ldrh	r3, [r3, #0]
 80184fc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8018500:	d215      	bcs.n	801852e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018502:	4938      	ldr	r1, [pc, #224]	@ (80185e4 <etharp_tmr+0x14c>)
 8018504:	687a      	ldr	r2, [r7, #4]
 8018506:	4613      	mov	r3, r2
 8018508:	005b      	lsls	r3, r3, #1
 801850a:	4413      	add	r3, r2
 801850c:	00db      	lsls	r3, r3, #3
 801850e:	440b      	add	r3, r1
 8018510:	3314      	adds	r3, #20
 8018512:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018514:	2b01      	cmp	r3, #1
 8018516:	d10e      	bne.n	8018536 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018518:	4932      	ldr	r1, [pc, #200]	@ (80185e4 <etharp_tmr+0x14c>)
 801851a:	687a      	ldr	r2, [r7, #4]
 801851c:	4613      	mov	r3, r2
 801851e:	005b      	lsls	r3, r3, #1
 8018520:	4413      	add	r3, r2
 8018522:	00db      	lsls	r3, r3, #3
 8018524:	440b      	add	r3, r1
 8018526:	3312      	adds	r3, #18
 8018528:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801852a:	2b04      	cmp	r3, #4
 801852c:	d903      	bls.n	8018536 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801852e:	6878      	ldr	r0, [r7, #4]
 8018530:	f7ff ff80 	bl	8018434 <etharp_free_entry>
 8018534:	e04a      	b.n	80185cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8018536:	492b      	ldr	r1, [pc, #172]	@ (80185e4 <etharp_tmr+0x14c>)
 8018538:	687a      	ldr	r2, [r7, #4]
 801853a:	4613      	mov	r3, r2
 801853c:	005b      	lsls	r3, r3, #1
 801853e:	4413      	add	r3, r2
 8018540:	00db      	lsls	r3, r3, #3
 8018542:	440b      	add	r3, r1
 8018544:	3314      	adds	r3, #20
 8018546:	781b      	ldrb	r3, [r3, #0]
 8018548:	2b03      	cmp	r3, #3
 801854a:	d10a      	bne.n	8018562 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801854c:	4925      	ldr	r1, [pc, #148]	@ (80185e4 <etharp_tmr+0x14c>)
 801854e:	687a      	ldr	r2, [r7, #4]
 8018550:	4613      	mov	r3, r2
 8018552:	005b      	lsls	r3, r3, #1
 8018554:	4413      	add	r3, r2
 8018556:	00db      	lsls	r3, r3, #3
 8018558:	440b      	add	r3, r1
 801855a:	3314      	adds	r3, #20
 801855c:	2204      	movs	r2, #4
 801855e:	701a      	strb	r2, [r3, #0]
 8018560:	e034      	b.n	80185cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8018562:	4920      	ldr	r1, [pc, #128]	@ (80185e4 <etharp_tmr+0x14c>)
 8018564:	687a      	ldr	r2, [r7, #4]
 8018566:	4613      	mov	r3, r2
 8018568:	005b      	lsls	r3, r3, #1
 801856a:	4413      	add	r3, r2
 801856c:	00db      	lsls	r3, r3, #3
 801856e:	440b      	add	r3, r1
 8018570:	3314      	adds	r3, #20
 8018572:	781b      	ldrb	r3, [r3, #0]
 8018574:	2b04      	cmp	r3, #4
 8018576:	d10a      	bne.n	801858e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018578:	491a      	ldr	r1, [pc, #104]	@ (80185e4 <etharp_tmr+0x14c>)
 801857a:	687a      	ldr	r2, [r7, #4]
 801857c:	4613      	mov	r3, r2
 801857e:	005b      	lsls	r3, r3, #1
 8018580:	4413      	add	r3, r2
 8018582:	00db      	lsls	r3, r3, #3
 8018584:	440b      	add	r3, r1
 8018586:	3314      	adds	r3, #20
 8018588:	2202      	movs	r2, #2
 801858a:	701a      	strb	r2, [r3, #0]
 801858c:	e01e      	b.n	80185cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801858e:	4915      	ldr	r1, [pc, #84]	@ (80185e4 <etharp_tmr+0x14c>)
 8018590:	687a      	ldr	r2, [r7, #4]
 8018592:	4613      	mov	r3, r2
 8018594:	005b      	lsls	r3, r3, #1
 8018596:	4413      	add	r3, r2
 8018598:	00db      	lsls	r3, r3, #3
 801859a:	440b      	add	r3, r1
 801859c:	3314      	adds	r3, #20
 801859e:	781b      	ldrb	r3, [r3, #0]
 80185a0:	2b01      	cmp	r3, #1
 80185a2:	d113      	bne.n	80185cc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80185a4:	490f      	ldr	r1, [pc, #60]	@ (80185e4 <etharp_tmr+0x14c>)
 80185a6:	687a      	ldr	r2, [r7, #4]
 80185a8:	4613      	mov	r3, r2
 80185aa:	005b      	lsls	r3, r3, #1
 80185ac:	4413      	add	r3, r2
 80185ae:	00db      	lsls	r3, r3, #3
 80185b0:	440b      	add	r3, r1
 80185b2:	3308      	adds	r3, #8
 80185b4:	6818      	ldr	r0, [r3, #0]
 80185b6:	687a      	ldr	r2, [r7, #4]
 80185b8:	4613      	mov	r3, r2
 80185ba:	005b      	lsls	r3, r3, #1
 80185bc:	4413      	add	r3, r2
 80185be:	00db      	lsls	r3, r3, #3
 80185c0:	4a08      	ldr	r2, [pc, #32]	@ (80185e4 <etharp_tmr+0x14c>)
 80185c2:	4413      	add	r3, r2
 80185c4:	3304      	adds	r3, #4
 80185c6:	4619      	mov	r1, r3
 80185c8:	f000 fe3e 	bl	8019248 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	3301      	adds	r3, #1
 80185d0:	607b      	str	r3, [r7, #4]
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	2b09      	cmp	r3, #9
 80185d6:	f77f af65 	ble.w	80184a4 <etharp_tmr+0xc>
      }
    }
  }
}
 80185da:	bf00      	nop
 80185dc:	bf00      	nop
 80185de:	3708      	adds	r7, #8
 80185e0:	46bd      	mov	sp, r7
 80185e2:	bd80      	pop	{r7, pc}
 80185e4:	2000c910 	.word	0x2000c910

080185e8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80185e8:	b580      	push	{r7, lr}
 80185ea:	b08a      	sub	sp, #40	@ 0x28
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	60f8      	str	r0, [r7, #12]
 80185f0:	460b      	mov	r3, r1
 80185f2:	607a      	str	r2, [r7, #4]
 80185f4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80185f6:	230a      	movs	r3, #10
 80185f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80185fa:	230a      	movs	r3, #10
 80185fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80185fe:	230a      	movs	r3, #10
 8018600:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8018602:	2300      	movs	r3, #0
 8018604:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018606:	230a      	movs	r3, #10
 8018608:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801860a:	2300      	movs	r3, #0
 801860c:	83bb      	strh	r3, [r7, #28]
 801860e:	2300      	movs	r3, #0
 8018610:	837b      	strh	r3, [r7, #26]
 8018612:	2300      	movs	r3, #0
 8018614:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018616:	2300      	movs	r3, #0
 8018618:	843b      	strh	r3, [r7, #32]
 801861a:	e0ae      	b.n	801877a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801861c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018620:	49a6      	ldr	r1, [pc, #664]	@ (80188bc <etharp_find_entry+0x2d4>)
 8018622:	4613      	mov	r3, r2
 8018624:	005b      	lsls	r3, r3, #1
 8018626:	4413      	add	r3, r2
 8018628:	00db      	lsls	r3, r3, #3
 801862a:	440b      	add	r3, r1
 801862c:	3314      	adds	r3, #20
 801862e:	781b      	ldrb	r3, [r3, #0]
 8018630:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8018632:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8018636:	2b0a      	cmp	r3, #10
 8018638:	d105      	bne.n	8018646 <etharp_find_entry+0x5e>
 801863a:	7dfb      	ldrb	r3, [r7, #23]
 801863c:	2b00      	cmp	r3, #0
 801863e:	d102      	bne.n	8018646 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018640:	8c3b      	ldrh	r3, [r7, #32]
 8018642:	847b      	strh	r3, [r7, #34]	@ 0x22
 8018644:	e095      	b.n	8018772 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018646:	7dfb      	ldrb	r3, [r7, #23]
 8018648:	2b00      	cmp	r3, #0
 801864a:	f000 8092 	beq.w	8018772 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801864e:	7dfb      	ldrb	r3, [r7, #23]
 8018650:	2b01      	cmp	r3, #1
 8018652:	d009      	beq.n	8018668 <etharp_find_entry+0x80>
 8018654:	7dfb      	ldrb	r3, [r7, #23]
 8018656:	2b01      	cmp	r3, #1
 8018658:	d806      	bhi.n	8018668 <etharp_find_entry+0x80>
 801865a:	4b99      	ldr	r3, [pc, #612]	@ (80188c0 <etharp_find_entry+0x2d8>)
 801865c:	f240 1223 	movw	r2, #291	@ 0x123
 8018660:	4998      	ldr	r1, [pc, #608]	@ (80188c4 <etharp_find_entry+0x2dc>)
 8018662:	4899      	ldr	r0, [pc, #612]	@ (80188c8 <etharp_find_entry+0x2e0>)
 8018664:	f003 f93a 	bl	801b8dc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	2b00      	cmp	r3, #0
 801866c:	d020      	beq.n	80186b0 <etharp_find_entry+0xc8>
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	6819      	ldr	r1, [r3, #0]
 8018672:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018676:	4891      	ldr	r0, [pc, #580]	@ (80188bc <etharp_find_entry+0x2d4>)
 8018678:	4613      	mov	r3, r2
 801867a:	005b      	lsls	r3, r3, #1
 801867c:	4413      	add	r3, r2
 801867e:	00db      	lsls	r3, r3, #3
 8018680:	4403      	add	r3, r0
 8018682:	3304      	adds	r3, #4
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	4299      	cmp	r1, r3
 8018688:	d112      	bne.n	80186b0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d00c      	beq.n	80186aa <etharp_find_entry+0xc2>
 8018690:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018694:	4989      	ldr	r1, [pc, #548]	@ (80188bc <etharp_find_entry+0x2d4>)
 8018696:	4613      	mov	r3, r2
 8018698:	005b      	lsls	r3, r3, #1
 801869a:	4413      	add	r3, r2
 801869c:	00db      	lsls	r3, r3, #3
 801869e:	440b      	add	r3, r1
 80186a0:	3308      	adds	r3, #8
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	687a      	ldr	r2, [r7, #4]
 80186a6:	429a      	cmp	r2, r3
 80186a8:	d102      	bne.n	80186b0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80186aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80186ae:	e100      	b.n	80188b2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80186b0:	7dfb      	ldrb	r3, [r7, #23]
 80186b2:	2b01      	cmp	r3, #1
 80186b4:	d140      	bne.n	8018738 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80186b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80186ba:	4980      	ldr	r1, [pc, #512]	@ (80188bc <etharp_find_entry+0x2d4>)
 80186bc:	4613      	mov	r3, r2
 80186be:	005b      	lsls	r3, r3, #1
 80186c0:	4413      	add	r3, r2
 80186c2:	00db      	lsls	r3, r3, #3
 80186c4:	440b      	add	r3, r1
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	d01a      	beq.n	8018702 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80186cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80186d0:	497a      	ldr	r1, [pc, #488]	@ (80188bc <etharp_find_entry+0x2d4>)
 80186d2:	4613      	mov	r3, r2
 80186d4:	005b      	lsls	r3, r3, #1
 80186d6:	4413      	add	r3, r2
 80186d8:	00db      	lsls	r3, r3, #3
 80186da:	440b      	add	r3, r1
 80186dc:	3312      	adds	r3, #18
 80186de:	881b      	ldrh	r3, [r3, #0]
 80186e0:	8bba      	ldrh	r2, [r7, #28]
 80186e2:	429a      	cmp	r2, r3
 80186e4:	d845      	bhi.n	8018772 <etharp_find_entry+0x18a>
            old_queue = i;
 80186e6:	8c3b      	ldrh	r3, [r7, #32]
 80186e8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80186ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80186ee:	4973      	ldr	r1, [pc, #460]	@ (80188bc <etharp_find_entry+0x2d4>)
 80186f0:	4613      	mov	r3, r2
 80186f2:	005b      	lsls	r3, r3, #1
 80186f4:	4413      	add	r3, r2
 80186f6:	00db      	lsls	r3, r3, #3
 80186f8:	440b      	add	r3, r1
 80186fa:	3312      	adds	r3, #18
 80186fc:	881b      	ldrh	r3, [r3, #0]
 80186fe:	83bb      	strh	r3, [r7, #28]
 8018700:	e037      	b.n	8018772 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018702:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018706:	496d      	ldr	r1, [pc, #436]	@ (80188bc <etharp_find_entry+0x2d4>)
 8018708:	4613      	mov	r3, r2
 801870a:	005b      	lsls	r3, r3, #1
 801870c:	4413      	add	r3, r2
 801870e:	00db      	lsls	r3, r3, #3
 8018710:	440b      	add	r3, r1
 8018712:	3312      	adds	r3, #18
 8018714:	881b      	ldrh	r3, [r3, #0]
 8018716:	8b7a      	ldrh	r2, [r7, #26]
 8018718:	429a      	cmp	r2, r3
 801871a:	d82a      	bhi.n	8018772 <etharp_find_entry+0x18a>
            old_pending = i;
 801871c:	8c3b      	ldrh	r3, [r7, #32]
 801871e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8018720:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018724:	4965      	ldr	r1, [pc, #404]	@ (80188bc <etharp_find_entry+0x2d4>)
 8018726:	4613      	mov	r3, r2
 8018728:	005b      	lsls	r3, r3, #1
 801872a:	4413      	add	r3, r2
 801872c:	00db      	lsls	r3, r3, #3
 801872e:	440b      	add	r3, r1
 8018730:	3312      	adds	r3, #18
 8018732:	881b      	ldrh	r3, [r3, #0]
 8018734:	837b      	strh	r3, [r7, #26]
 8018736:	e01c      	b.n	8018772 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018738:	7dfb      	ldrb	r3, [r7, #23]
 801873a:	2b01      	cmp	r3, #1
 801873c:	d919      	bls.n	8018772 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801873e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018742:	495e      	ldr	r1, [pc, #376]	@ (80188bc <etharp_find_entry+0x2d4>)
 8018744:	4613      	mov	r3, r2
 8018746:	005b      	lsls	r3, r3, #1
 8018748:	4413      	add	r3, r2
 801874a:	00db      	lsls	r3, r3, #3
 801874c:	440b      	add	r3, r1
 801874e:	3312      	adds	r3, #18
 8018750:	881b      	ldrh	r3, [r3, #0]
 8018752:	8b3a      	ldrh	r2, [r7, #24]
 8018754:	429a      	cmp	r2, r3
 8018756:	d80c      	bhi.n	8018772 <etharp_find_entry+0x18a>
            old_stable = i;
 8018758:	8c3b      	ldrh	r3, [r7, #32]
 801875a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801875c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018760:	4956      	ldr	r1, [pc, #344]	@ (80188bc <etharp_find_entry+0x2d4>)
 8018762:	4613      	mov	r3, r2
 8018764:	005b      	lsls	r3, r3, #1
 8018766:	4413      	add	r3, r2
 8018768:	00db      	lsls	r3, r3, #3
 801876a:	440b      	add	r3, r1
 801876c:	3312      	adds	r3, #18
 801876e:	881b      	ldrh	r3, [r3, #0]
 8018770:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018772:	8c3b      	ldrh	r3, [r7, #32]
 8018774:	3301      	adds	r3, #1
 8018776:	b29b      	uxth	r3, r3
 8018778:	843b      	strh	r3, [r7, #32]
 801877a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801877e:	2b09      	cmp	r3, #9
 8018780:	f77f af4c 	ble.w	801861c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018784:	7afb      	ldrb	r3, [r7, #11]
 8018786:	f003 0302 	and.w	r3, r3, #2
 801878a:	2b00      	cmp	r3, #0
 801878c:	d108      	bne.n	80187a0 <etharp_find_entry+0x1b8>
 801878e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8018792:	2b0a      	cmp	r3, #10
 8018794:	d107      	bne.n	80187a6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018796:	7afb      	ldrb	r3, [r7, #11]
 8018798:	f003 0301 	and.w	r3, r3, #1
 801879c:	2b00      	cmp	r3, #0
 801879e:	d102      	bne.n	80187a6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80187a0:	f04f 33ff 	mov.w	r3, #4294967295
 80187a4:	e085      	b.n	80188b2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80187a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80187aa:	2b09      	cmp	r3, #9
 80187ac:	dc02      	bgt.n	80187b4 <etharp_find_entry+0x1cc>
    i = empty;
 80187ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80187b0:	843b      	strh	r3, [r7, #32]
 80187b2:	e039      	b.n	8018828 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80187b4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80187b8:	2b09      	cmp	r3, #9
 80187ba:	dc14      	bgt.n	80187e6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80187bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80187be:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80187c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80187c4:	493d      	ldr	r1, [pc, #244]	@ (80188bc <etharp_find_entry+0x2d4>)
 80187c6:	4613      	mov	r3, r2
 80187c8:	005b      	lsls	r3, r3, #1
 80187ca:	4413      	add	r3, r2
 80187cc:	00db      	lsls	r3, r3, #3
 80187ce:	440b      	add	r3, r1
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d018      	beq.n	8018808 <etharp_find_entry+0x220>
 80187d6:	4b3a      	ldr	r3, [pc, #232]	@ (80188c0 <etharp_find_entry+0x2d8>)
 80187d8:	f240 126d 	movw	r2, #365	@ 0x16d
 80187dc:	493b      	ldr	r1, [pc, #236]	@ (80188cc <etharp_find_entry+0x2e4>)
 80187de:	483a      	ldr	r0, [pc, #232]	@ (80188c8 <etharp_find_entry+0x2e0>)
 80187e0:	f003 f87c 	bl	801b8dc <iprintf>
 80187e4:	e010      	b.n	8018808 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80187e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80187ea:	2b09      	cmp	r3, #9
 80187ec:	dc02      	bgt.n	80187f4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80187ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80187f0:	843b      	strh	r3, [r7, #32]
 80187f2:	e009      	b.n	8018808 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80187f4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80187f8:	2b09      	cmp	r3, #9
 80187fa:	dc02      	bgt.n	8018802 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80187fc:	8bfb      	ldrh	r3, [r7, #30]
 80187fe:	843b      	strh	r3, [r7, #32]
 8018800:	e002      	b.n	8018808 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018802:	f04f 33ff 	mov.w	r3, #4294967295
 8018806:	e054      	b.n	80188b2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018808:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801880c:	2b09      	cmp	r3, #9
 801880e:	dd06      	ble.n	801881e <etharp_find_entry+0x236>
 8018810:	4b2b      	ldr	r3, [pc, #172]	@ (80188c0 <etharp_find_entry+0x2d8>)
 8018812:	f240 127f 	movw	r2, #383	@ 0x17f
 8018816:	492e      	ldr	r1, [pc, #184]	@ (80188d0 <etharp_find_entry+0x2e8>)
 8018818:	482b      	ldr	r0, [pc, #172]	@ (80188c8 <etharp_find_entry+0x2e0>)
 801881a:	f003 f85f 	bl	801b8dc <iprintf>
    etharp_free_entry(i);
 801881e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018822:	4618      	mov	r0, r3
 8018824:	f7ff fe06 	bl	8018434 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018828:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801882c:	2b09      	cmp	r3, #9
 801882e:	dd06      	ble.n	801883e <etharp_find_entry+0x256>
 8018830:	4b23      	ldr	r3, [pc, #140]	@ (80188c0 <etharp_find_entry+0x2d8>)
 8018832:	f240 1283 	movw	r2, #387	@ 0x183
 8018836:	4926      	ldr	r1, [pc, #152]	@ (80188d0 <etharp_find_entry+0x2e8>)
 8018838:	4823      	ldr	r0, [pc, #140]	@ (80188c8 <etharp_find_entry+0x2e0>)
 801883a:	f003 f84f 	bl	801b8dc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801883e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018842:	491e      	ldr	r1, [pc, #120]	@ (80188bc <etharp_find_entry+0x2d4>)
 8018844:	4613      	mov	r3, r2
 8018846:	005b      	lsls	r3, r3, #1
 8018848:	4413      	add	r3, r2
 801884a:	00db      	lsls	r3, r3, #3
 801884c:	440b      	add	r3, r1
 801884e:	3314      	adds	r3, #20
 8018850:	781b      	ldrb	r3, [r3, #0]
 8018852:	2b00      	cmp	r3, #0
 8018854:	d006      	beq.n	8018864 <etharp_find_entry+0x27c>
 8018856:	4b1a      	ldr	r3, [pc, #104]	@ (80188c0 <etharp_find_entry+0x2d8>)
 8018858:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801885c:	491d      	ldr	r1, [pc, #116]	@ (80188d4 <etharp_find_entry+0x2ec>)
 801885e:	481a      	ldr	r0, [pc, #104]	@ (80188c8 <etharp_find_entry+0x2e0>)
 8018860:	f003 f83c 	bl	801b8dc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018864:	68fb      	ldr	r3, [r7, #12]
 8018866:	2b00      	cmp	r3, #0
 8018868:	d00b      	beq.n	8018882 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801886a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801886e:	68fb      	ldr	r3, [r7, #12]
 8018870:	6819      	ldr	r1, [r3, #0]
 8018872:	4812      	ldr	r0, [pc, #72]	@ (80188bc <etharp_find_entry+0x2d4>)
 8018874:	4613      	mov	r3, r2
 8018876:	005b      	lsls	r3, r3, #1
 8018878:	4413      	add	r3, r2
 801887a:	00db      	lsls	r3, r3, #3
 801887c:	4403      	add	r3, r0
 801887e:	3304      	adds	r3, #4
 8018880:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018882:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018886:	490d      	ldr	r1, [pc, #52]	@ (80188bc <etharp_find_entry+0x2d4>)
 8018888:	4613      	mov	r3, r2
 801888a:	005b      	lsls	r3, r3, #1
 801888c:	4413      	add	r3, r2
 801888e:	00db      	lsls	r3, r3, #3
 8018890:	440b      	add	r3, r1
 8018892:	3312      	adds	r3, #18
 8018894:	2200      	movs	r2, #0
 8018896:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018898:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801889c:	4907      	ldr	r1, [pc, #28]	@ (80188bc <etharp_find_entry+0x2d4>)
 801889e:	4613      	mov	r3, r2
 80188a0:	005b      	lsls	r3, r3, #1
 80188a2:	4413      	add	r3, r2
 80188a4:	00db      	lsls	r3, r3, #3
 80188a6:	440b      	add	r3, r1
 80188a8:	3308      	adds	r3, #8
 80188aa:	687a      	ldr	r2, [r7, #4]
 80188ac:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80188ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80188b2:	4618      	mov	r0, r3
 80188b4:	3728      	adds	r7, #40	@ 0x28
 80188b6:	46bd      	mov	sp, r7
 80188b8:	bd80      	pop	{r7, pc}
 80188ba:	bf00      	nop
 80188bc:	2000c910 	.word	0x2000c910
 80188c0:	08020744 	.word	0x08020744
 80188c4:	0802077c 	.word	0x0802077c
 80188c8:	080207bc 	.word	0x080207bc
 80188cc:	080207e4 	.word	0x080207e4
 80188d0:	080207fc 	.word	0x080207fc
 80188d4:	08020810 	.word	0x08020810

080188d8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80188d8:	b580      	push	{r7, lr}
 80188da:	b088      	sub	sp, #32
 80188dc:	af02      	add	r7, sp, #8
 80188de:	60f8      	str	r0, [r7, #12]
 80188e0:	60b9      	str	r1, [r7, #8]
 80188e2:	607a      	str	r2, [r7, #4]
 80188e4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80188e6:	68fb      	ldr	r3, [r7, #12]
 80188e8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80188ec:	2b06      	cmp	r3, #6
 80188ee:	d006      	beq.n	80188fe <etharp_update_arp_entry+0x26>
 80188f0:	4b48      	ldr	r3, [pc, #288]	@ (8018a14 <etharp_update_arp_entry+0x13c>)
 80188f2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80188f6:	4948      	ldr	r1, [pc, #288]	@ (8018a18 <etharp_update_arp_entry+0x140>)
 80188f8:	4848      	ldr	r0, [pc, #288]	@ (8018a1c <etharp_update_arp_entry+0x144>)
 80188fa:	f002 ffef 	bl	801b8dc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80188fe:	68bb      	ldr	r3, [r7, #8]
 8018900:	2b00      	cmp	r3, #0
 8018902:	d012      	beq.n	801892a <etharp_update_arp_entry+0x52>
 8018904:	68bb      	ldr	r3, [r7, #8]
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	2b00      	cmp	r3, #0
 801890a:	d00e      	beq.n	801892a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801890c:	68bb      	ldr	r3, [r7, #8]
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	68f9      	ldr	r1, [r7, #12]
 8018912:	4618      	mov	r0, r3
 8018914:	f001 f8cc 	bl	8019ab0 <ip4_addr_isbroadcast_u32>
 8018918:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801891a:	2b00      	cmp	r3, #0
 801891c:	d105      	bne.n	801892a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801891e:	68bb      	ldr	r3, [r7, #8]
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018926:	2be0      	cmp	r3, #224	@ 0xe0
 8018928:	d102      	bne.n	8018930 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801892a:	f06f 030f 	mvn.w	r3, #15
 801892e:	e06c      	b.n	8018a0a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018930:	78fb      	ldrb	r3, [r7, #3]
 8018932:	68fa      	ldr	r2, [r7, #12]
 8018934:	4619      	mov	r1, r3
 8018936:	68b8      	ldr	r0, [r7, #8]
 8018938:	f7ff fe56 	bl	80185e8 <etharp_find_entry>
 801893c:	4603      	mov	r3, r0
 801893e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018940:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018944:	2b00      	cmp	r3, #0
 8018946:	da02      	bge.n	801894e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018948:	8afb      	ldrh	r3, [r7, #22]
 801894a:	b25b      	sxtb	r3, r3
 801894c:	e05d      	b.n	8018a0a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801894e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018952:	4933      	ldr	r1, [pc, #204]	@ (8018a20 <etharp_update_arp_entry+0x148>)
 8018954:	4613      	mov	r3, r2
 8018956:	005b      	lsls	r3, r3, #1
 8018958:	4413      	add	r3, r2
 801895a:	00db      	lsls	r3, r3, #3
 801895c:	440b      	add	r3, r1
 801895e:	3314      	adds	r3, #20
 8018960:	2202      	movs	r2, #2
 8018962:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018964:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018968:	492d      	ldr	r1, [pc, #180]	@ (8018a20 <etharp_update_arp_entry+0x148>)
 801896a:	4613      	mov	r3, r2
 801896c:	005b      	lsls	r3, r3, #1
 801896e:	4413      	add	r3, r2
 8018970:	00db      	lsls	r3, r3, #3
 8018972:	440b      	add	r3, r1
 8018974:	3308      	adds	r3, #8
 8018976:	68fa      	ldr	r2, [r7, #12]
 8018978:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801897a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801897e:	4613      	mov	r3, r2
 8018980:	005b      	lsls	r3, r3, #1
 8018982:	4413      	add	r3, r2
 8018984:	00db      	lsls	r3, r3, #3
 8018986:	3308      	adds	r3, #8
 8018988:	4a25      	ldr	r2, [pc, #148]	@ (8018a20 <etharp_update_arp_entry+0x148>)
 801898a:	4413      	add	r3, r2
 801898c:	3304      	adds	r3, #4
 801898e:	2206      	movs	r2, #6
 8018990:	6879      	ldr	r1, [r7, #4]
 8018992:	4618      	mov	r0, r3
 8018994:	f003 f941 	bl	801bc1a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018998:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801899c:	4920      	ldr	r1, [pc, #128]	@ (8018a20 <etharp_update_arp_entry+0x148>)
 801899e:	4613      	mov	r3, r2
 80189a0:	005b      	lsls	r3, r3, #1
 80189a2:	4413      	add	r3, r2
 80189a4:	00db      	lsls	r3, r3, #3
 80189a6:	440b      	add	r3, r1
 80189a8:	3312      	adds	r3, #18
 80189aa:	2200      	movs	r2, #0
 80189ac:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80189ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80189b2:	491b      	ldr	r1, [pc, #108]	@ (8018a20 <etharp_update_arp_entry+0x148>)
 80189b4:	4613      	mov	r3, r2
 80189b6:	005b      	lsls	r3, r3, #1
 80189b8:	4413      	add	r3, r2
 80189ba:	00db      	lsls	r3, r3, #3
 80189bc:	440b      	add	r3, r1
 80189be:	681b      	ldr	r3, [r3, #0]
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d021      	beq.n	8018a08 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80189c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80189c8:	4915      	ldr	r1, [pc, #84]	@ (8018a20 <etharp_update_arp_entry+0x148>)
 80189ca:	4613      	mov	r3, r2
 80189cc:	005b      	lsls	r3, r3, #1
 80189ce:	4413      	add	r3, r2
 80189d0:	00db      	lsls	r3, r3, #3
 80189d2:	440b      	add	r3, r1
 80189d4:	681b      	ldr	r3, [r3, #0]
 80189d6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80189d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80189dc:	4910      	ldr	r1, [pc, #64]	@ (8018a20 <etharp_update_arp_entry+0x148>)
 80189de:	4613      	mov	r3, r2
 80189e0:	005b      	lsls	r3, r3, #1
 80189e2:	4413      	add	r3, r2
 80189e4:	00db      	lsls	r3, r3, #3
 80189e6:	440b      	add	r3, r1
 80189e8:	2200      	movs	r2, #0
 80189ea:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80189f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80189f6:	9300      	str	r3, [sp, #0]
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	6939      	ldr	r1, [r7, #16]
 80189fc:	68f8      	ldr	r0, [r7, #12]
 80189fe:	f001 fff5 	bl	801a9ec <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018a02:	6938      	ldr	r0, [r7, #16]
 8018a04:	f7f8 ff3a 	bl	801187c <pbuf_free>
  }
  return ERR_OK;
 8018a08:	2300      	movs	r3, #0
}
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	3718      	adds	r7, #24
 8018a0e:	46bd      	mov	sp, r7
 8018a10:	bd80      	pop	{r7, pc}
 8018a12:	bf00      	nop
 8018a14:	08020744 	.word	0x08020744
 8018a18:	0802083c 	.word	0x0802083c
 8018a1c:	080207bc 	.word	0x080207bc
 8018a20:	2000c910 	.word	0x2000c910

08018a24 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018a24:	b5b0      	push	{r4, r5, r7, lr}
 8018a26:	b08a      	sub	sp, #40	@ 0x28
 8018a28:	af04      	add	r7, sp, #16
 8018a2a:	6078      	str	r0, [r7, #4]
 8018a2c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018a2e:	683b      	ldr	r3, [r7, #0]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d107      	bne.n	8018a44 <etharp_input+0x20>
 8018a34:	4b3d      	ldr	r3, [pc, #244]	@ (8018b2c <etharp_input+0x108>)
 8018a36:	f240 228a 	movw	r2, #650	@ 0x28a
 8018a3a:	493d      	ldr	r1, [pc, #244]	@ (8018b30 <etharp_input+0x10c>)
 8018a3c:	483d      	ldr	r0, [pc, #244]	@ (8018b34 <etharp_input+0x110>)
 8018a3e:	f002 ff4d 	bl	801b8dc <iprintf>
 8018a42:	e06f      	b.n	8018b24 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	685b      	ldr	r3, [r3, #4]
 8018a48:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018a4a:	693b      	ldr	r3, [r7, #16]
 8018a4c:	881b      	ldrh	r3, [r3, #0]
 8018a4e:	b29b      	uxth	r3, r3
 8018a50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018a54:	d10c      	bne.n	8018a70 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018a56:	693b      	ldr	r3, [r7, #16]
 8018a58:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018a5a:	2b06      	cmp	r3, #6
 8018a5c:	d108      	bne.n	8018a70 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018a5e:	693b      	ldr	r3, [r7, #16]
 8018a60:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018a62:	2b04      	cmp	r3, #4
 8018a64:	d104      	bne.n	8018a70 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018a66:	693b      	ldr	r3, [r7, #16]
 8018a68:	885b      	ldrh	r3, [r3, #2]
 8018a6a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018a6c:	2b08      	cmp	r3, #8
 8018a6e:	d003      	beq.n	8018a78 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018a70:	6878      	ldr	r0, [r7, #4]
 8018a72:	f7f8 ff03 	bl	801187c <pbuf_free>
    return;
 8018a76:	e055      	b.n	8018b24 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018a78:	693b      	ldr	r3, [r7, #16]
 8018a7a:	330e      	adds	r3, #14
 8018a7c:	681b      	ldr	r3, [r3, #0]
 8018a7e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018a80:	693b      	ldr	r3, [r7, #16]
 8018a82:	3318      	adds	r3, #24
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018a88:	683b      	ldr	r3, [r7, #0]
 8018a8a:	3304      	adds	r3, #4
 8018a8c:	681b      	ldr	r3, [r3, #0]
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d102      	bne.n	8018a98 <etharp_input+0x74>
    for_us = 0;
 8018a92:	2300      	movs	r3, #0
 8018a94:	75fb      	strb	r3, [r7, #23]
 8018a96:	e009      	b.n	8018aac <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018a98:	68ba      	ldr	r2, [r7, #8]
 8018a9a:	683b      	ldr	r3, [r7, #0]
 8018a9c:	3304      	adds	r3, #4
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	429a      	cmp	r2, r3
 8018aa2:	bf0c      	ite	eq
 8018aa4:	2301      	moveq	r3, #1
 8018aa6:	2300      	movne	r3, #0
 8018aa8:	b2db      	uxtb	r3, r3
 8018aaa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018aac:	693b      	ldr	r3, [r7, #16]
 8018aae:	f103 0208 	add.w	r2, r3, #8
 8018ab2:	7dfb      	ldrb	r3, [r7, #23]
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d001      	beq.n	8018abc <etharp_input+0x98>
 8018ab8:	2301      	movs	r3, #1
 8018aba:	e000      	b.n	8018abe <etharp_input+0x9a>
 8018abc:	2302      	movs	r3, #2
 8018abe:	f107 010c 	add.w	r1, r7, #12
 8018ac2:	6838      	ldr	r0, [r7, #0]
 8018ac4:	f7ff ff08 	bl	80188d8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018ac8:	693b      	ldr	r3, [r7, #16]
 8018aca:	88db      	ldrh	r3, [r3, #6]
 8018acc:	b29b      	uxth	r3, r3
 8018ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018ad2:	d003      	beq.n	8018adc <etharp_input+0xb8>
 8018ad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018ad8:	d01e      	beq.n	8018b18 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018ada:	e020      	b.n	8018b1e <etharp_input+0xfa>
      if (for_us) {
 8018adc:	7dfb      	ldrb	r3, [r7, #23]
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	d01c      	beq.n	8018b1c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018ae2:	683b      	ldr	r3, [r7, #0]
 8018ae4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8018ae8:	693b      	ldr	r3, [r7, #16]
 8018aea:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018aee:	683b      	ldr	r3, [r7, #0]
 8018af0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8018af4:	683b      	ldr	r3, [r7, #0]
 8018af6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018af8:	693a      	ldr	r2, [r7, #16]
 8018afa:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018afc:	2102      	movs	r1, #2
 8018afe:	9103      	str	r1, [sp, #12]
 8018b00:	f107 010c 	add.w	r1, r7, #12
 8018b04:	9102      	str	r1, [sp, #8]
 8018b06:	9201      	str	r2, [sp, #4]
 8018b08:	9300      	str	r3, [sp, #0]
 8018b0a:	462b      	mov	r3, r5
 8018b0c:	4622      	mov	r2, r4
 8018b0e:	4601      	mov	r1, r0
 8018b10:	6838      	ldr	r0, [r7, #0]
 8018b12:	f000 faeb 	bl	80190ec <etharp_raw>
      break;
 8018b16:	e001      	b.n	8018b1c <etharp_input+0xf8>
      break;
 8018b18:	bf00      	nop
 8018b1a:	e000      	b.n	8018b1e <etharp_input+0xfa>
      break;
 8018b1c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018b1e:	6878      	ldr	r0, [r7, #4]
 8018b20:	f7f8 feac 	bl	801187c <pbuf_free>
}
 8018b24:	3718      	adds	r7, #24
 8018b26:	46bd      	mov	sp, r7
 8018b28:	bdb0      	pop	{r4, r5, r7, pc}
 8018b2a:	bf00      	nop
 8018b2c:	08020744 	.word	0x08020744
 8018b30:	08020894 	.word	0x08020894
 8018b34:	080207bc 	.word	0x080207bc

08018b38 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018b38:	b580      	push	{r7, lr}
 8018b3a:	b086      	sub	sp, #24
 8018b3c:	af02      	add	r7, sp, #8
 8018b3e:	60f8      	str	r0, [r7, #12]
 8018b40:	60b9      	str	r1, [r7, #8]
 8018b42:	4613      	mov	r3, r2
 8018b44:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018b46:	79fa      	ldrb	r2, [r7, #7]
 8018b48:	4944      	ldr	r1, [pc, #272]	@ (8018c5c <etharp_output_to_arp_index+0x124>)
 8018b4a:	4613      	mov	r3, r2
 8018b4c:	005b      	lsls	r3, r3, #1
 8018b4e:	4413      	add	r3, r2
 8018b50:	00db      	lsls	r3, r3, #3
 8018b52:	440b      	add	r3, r1
 8018b54:	3314      	adds	r3, #20
 8018b56:	781b      	ldrb	r3, [r3, #0]
 8018b58:	2b01      	cmp	r3, #1
 8018b5a:	d806      	bhi.n	8018b6a <etharp_output_to_arp_index+0x32>
 8018b5c:	4b40      	ldr	r3, [pc, #256]	@ (8018c60 <etharp_output_to_arp_index+0x128>)
 8018b5e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8018b62:	4940      	ldr	r1, [pc, #256]	@ (8018c64 <etharp_output_to_arp_index+0x12c>)
 8018b64:	4840      	ldr	r0, [pc, #256]	@ (8018c68 <etharp_output_to_arp_index+0x130>)
 8018b66:	f002 feb9 	bl	801b8dc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018b6a:	79fa      	ldrb	r2, [r7, #7]
 8018b6c:	493b      	ldr	r1, [pc, #236]	@ (8018c5c <etharp_output_to_arp_index+0x124>)
 8018b6e:	4613      	mov	r3, r2
 8018b70:	005b      	lsls	r3, r3, #1
 8018b72:	4413      	add	r3, r2
 8018b74:	00db      	lsls	r3, r3, #3
 8018b76:	440b      	add	r3, r1
 8018b78:	3314      	adds	r3, #20
 8018b7a:	781b      	ldrb	r3, [r3, #0]
 8018b7c:	2b02      	cmp	r3, #2
 8018b7e:	d153      	bne.n	8018c28 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018b80:	79fa      	ldrb	r2, [r7, #7]
 8018b82:	4936      	ldr	r1, [pc, #216]	@ (8018c5c <etharp_output_to_arp_index+0x124>)
 8018b84:	4613      	mov	r3, r2
 8018b86:	005b      	lsls	r3, r3, #1
 8018b88:	4413      	add	r3, r2
 8018b8a:	00db      	lsls	r3, r3, #3
 8018b8c:	440b      	add	r3, r1
 8018b8e:	3312      	adds	r3, #18
 8018b90:	881b      	ldrh	r3, [r3, #0]
 8018b92:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8018b96:	d919      	bls.n	8018bcc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018b98:	79fa      	ldrb	r2, [r7, #7]
 8018b9a:	4613      	mov	r3, r2
 8018b9c:	005b      	lsls	r3, r3, #1
 8018b9e:	4413      	add	r3, r2
 8018ba0:	00db      	lsls	r3, r3, #3
 8018ba2:	4a2e      	ldr	r2, [pc, #184]	@ (8018c5c <etharp_output_to_arp_index+0x124>)
 8018ba4:	4413      	add	r3, r2
 8018ba6:	3304      	adds	r3, #4
 8018ba8:	4619      	mov	r1, r3
 8018baa:	68f8      	ldr	r0, [r7, #12]
 8018bac:	f000 fb4c 	bl	8019248 <etharp_request>
 8018bb0:	4603      	mov	r3, r0
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d138      	bne.n	8018c28 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018bb6:	79fa      	ldrb	r2, [r7, #7]
 8018bb8:	4928      	ldr	r1, [pc, #160]	@ (8018c5c <etharp_output_to_arp_index+0x124>)
 8018bba:	4613      	mov	r3, r2
 8018bbc:	005b      	lsls	r3, r3, #1
 8018bbe:	4413      	add	r3, r2
 8018bc0:	00db      	lsls	r3, r3, #3
 8018bc2:	440b      	add	r3, r1
 8018bc4:	3314      	adds	r3, #20
 8018bc6:	2203      	movs	r2, #3
 8018bc8:	701a      	strb	r2, [r3, #0]
 8018bca:	e02d      	b.n	8018c28 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018bcc:	79fa      	ldrb	r2, [r7, #7]
 8018bce:	4923      	ldr	r1, [pc, #140]	@ (8018c5c <etharp_output_to_arp_index+0x124>)
 8018bd0:	4613      	mov	r3, r2
 8018bd2:	005b      	lsls	r3, r3, #1
 8018bd4:	4413      	add	r3, r2
 8018bd6:	00db      	lsls	r3, r3, #3
 8018bd8:	440b      	add	r3, r1
 8018bda:	3312      	adds	r3, #18
 8018bdc:	881b      	ldrh	r3, [r3, #0]
 8018bde:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8018be2:	d321      	bcc.n	8018c28 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018be4:	79fa      	ldrb	r2, [r7, #7]
 8018be6:	4613      	mov	r3, r2
 8018be8:	005b      	lsls	r3, r3, #1
 8018bea:	4413      	add	r3, r2
 8018bec:	00db      	lsls	r3, r3, #3
 8018bee:	4a1b      	ldr	r2, [pc, #108]	@ (8018c5c <etharp_output_to_arp_index+0x124>)
 8018bf0:	4413      	add	r3, r2
 8018bf2:	1d19      	adds	r1, r3, #4
 8018bf4:	79fa      	ldrb	r2, [r7, #7]
 8018bf6:	4613      	mov	r3, r2
 8018bf8:	005b      	lsls	r3, r3, #1
 8018bfa:	4413      	add	r3, r2
 8018bfc:	00db      	lsls	r3, r3, #3
 8018bfe:	3308      	adds	r3, #8
 8018c00:	4a16      	ldr	r2, [pc, #88]	@ (8018c5c <etharp_output_to_arp_index+0x124>)
 8018c02:	4413      	add	r3, r2
 8018c04:	3304      	adds	r3, #4
 8018c06:	461a      	mov	r2, r3
 8018c08:	68f8      	ldr	r0, [r7, #12]
 8018c0a:	f000 fafb 	bl	8019204 <etharp_request_dst>
 8018c0e:	4603      	mov	r3, r0
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d109      	bne.n	8018c28 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018c14:	79fa      	ldrb	r2, [r7, #7]
 8018c16:	4911      	ldr	r1, [pc, #68]	@ (8018c5c <etharp_output_to_arp_index+0x124>)
 8018c18:	4613      	mov	r3, r2
 8018c1a:	005b      	lsls	r3, r3, #1
 8018c1c:	4413      	add	r3, r2
 8018c1e:	00db      	lsls	r3, r3, #3
 8018c20:	440b      	add	r3, r1
 8018c22:	3314      	adds	r3, #20
 8018c24:	2203      	movs	r2, #3
 8018c26:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8018c2e:	79fa      	ldrb	r2, [r7, #7]
 8018c30:	4613      	mov	r3, r2
 8018c32:	005b      	lsls	r3, r3, #1
 8018c34:	4413      	add	r3, r2
 8018c36:	00db      	lsls	r3, r3, #3
 8018c38:	3308      	adds	r3, #8
 8018c3a:	4a08      	ldr	r2, [pc, #32]	@ (8018c5c <etharp_output_to_arp_index+0x124>)
 8018c3c:	4413      	add	r3, r2
 8018c3e:	3304      	adds	r3, #4
 8018c40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018c44:	9200      	str	r2, [sp, #0]
 8018c46:	460a      	mov	r2, r1
 8018c48:	68b9      	ldr	r1, [r7, #8]
 8018c4a:	68f8      	ldr	r0, [r7, #12]
 8018c4c:	f001 fece 	bl	801a9ec <ethernet_output>
 8018c50:	4603      	mov	r3, r0
}
 8018c52:	4618      	mov	r0, r3
 8018c54:	3710      	adds	r7, #16
 8018c56:	46bd      	mov	sp, r7
 8018c58:	bd80      	pop	{r7, pc}
 8018c5a:	bf00      	nop
 8018c5c:	2000c910 	.word	0x2000c910
 8018c60:	08020744 	.word	0x08020744
 8018c64:	080208b4 	.word	0x080208b4
 8018c68:	080207bc 	.word	0x080207bc

08018c6c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018c6c:	b580      	push	{r7, lr}
 8018c6e:	b08a      	sub	sp, #40	@ 0x28
 8018c70:	af02      	add	r7, sp, #8
 8018c72:	60f8      	str	r0, [r7, #12]
 8018c74:	60b9      	str	r1, [r7, #8]
 8018c76:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018c7c:	68fb      	ldr	r3, [r7, #12]
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	d106      	bne.n	8018c90 <etharp_output+0x24>
 8018c82:	4b73      	ldr	r3, [pc, #460]	@ (8018e50 <etharp_output+0x1e4>)
 8018c84:	f240 321e 	movw	r2, #798	@ 0x31e
 8018c88:	4972      	ldr	r1, [pc, #456]	@ (8018e54 <etharp_output+0x1e8>)
 8018c8a:	4873      	ldr	r0, [pc, #460]	@ (8018e58 <etharp_output+0x1ec>)
 8018c8c:	f002 fe26 	bl	801b8dc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018c90:	68bb      	ldr	r3, [r7, #8]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d106      	bne.n	8018ca4 <etharp_output+0x38>
 8018c96:	4b6e      	ldr	r3, [pc, #440]	@ (8018e50 <etharp_output+0x1e4>)
 8018c98:	f240 321f 	movw	r2, #799	@ 0x31f
 8018c9c:	496f      	ldr	r1, [pc, #444]	@ (8018e5c <etharp_output+0x1f0>)
 8018c9e:	486e      	ldr	r0, [pc, #440]	@ (8018e58 <etharp_output+0x1ec>)
 8018ca0:	f002 fe1c 	bl	801b8dc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d106      	bne.n	8018cb8 <etharp_output+0x4c>
 8018caa:	4b69      	ldr	r3, [pc, #420]	@ (8018e50 <etharp_output+0x1e4>)
 8018cac:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8018cb0:	496b      	ldr	r1, [pc, #428]	@ (8018e60 <etharp_output+0x1f4>)
 8018cb2:	4869      	ldr	r0, [pc, #420]	@ (8018e58 <etharp_output+0x1ec>)
 8018cb4:	f002 fe12 	bl	801b8dc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	68f9      	ldr	r1, [r7, #12]
 8018cbe:	4618      	mov	r0, r3
 8018cc0:	f000 fef6 	bl	8019ab0 <ip4_addr_isbroadcast_u32>
 8018cc4:	4603      	mov	r3, r0
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d002      	beq.n	8018cd0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018cca:	4b66      	ldr	r3, [pc, #408]	@ (8018e64 <etharp_output+0x1f8>)
 8018ccc:	61fb      	str	r3, [r7, #28]
 8018cce:	e0af      	b.n	8018e30 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018cd8:	2be0      	cmp	r3, #224	@ 0xe0
 8018cda:	d118      	bne.n	8018d0e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018cdc:	2301      	movs	r3, #1
 8018cde:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018ce0:	2300      	movs	r3, #0
 8018ce2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018ce4:	235e      	movs	r3, #94	@ 0x5e
 8018ce6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	3301      	adds	r3, #1
 8018cec:	781b      	ldrb	r3, [r3, #0]
 8018cee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018cf2:	b2db      	uxtb	r3, r3
 8018cf4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	3302      	adds	r3, #2
 8018cfa:	781b      	ldrb	r3, [r3, #0]
 8018cfc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	3303      	adds	r3, #3
 8018d02:	781b      	ldrb	r3, [r3, #0]
 8018d04:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018d06:	f107 0310 	add.w	r3, r7, #16
 8018d0a:	61fb      	str	r3, [r7, #28]
 8018d0c:	e090      	b.n	8018e30 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	681a      	ldr	r2, [r3, #0]
 8018d12:	68fb      	ldr	r3, [r7, #12]
 8018d14:	3304      	adds	r3, #4
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	405a      	eors	r2, r3
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	3308      	adds	r3, #8
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	4013      	ands	r3, r2
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d012      	beq.n	8018d4c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	681b      	ldr	r3, [r3, #0]
 8018d2a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018d2c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8018d30:	4293      	cmp	r3, r2
 8018d32:	d00b      	beq.n	8018d4c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	330c      	adds	r3, #12
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d003      	beq.n	8018d46 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	330c      	adds	r3, #12
 8018d42:	61bb      	str	r3, [r7, #24]
 8018d44:	e002      	b.n	8018d4c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018d46:	f06f 0303 	mvn.w	r3, #3
 8018d4a:	e07d      	b.n	8018e48 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018d4c:	4b46      	ldr	r3, [pc, #280]	@ (8018e68 <etharp_output+0x1fc>)
 8018d4e:	781b      	ldrb	r3, [r3, #0]
 8018d50:	4619      	mov	r1, r3
 8018d52:	4a46      	ldr	r2, [pc, #280]	@ (8018e6c <etharp_output+0x200>)
 8018d54:	460b      	mov	r3, r1
 8018d56:	005b      	lsls	r3, r3, #1
 8018d58:	440b      	add	r3, r1
 8018d5a:	00db      	lsls	r3, r3, #3
 8018d5c:	4413      	add	r3, r2
 8018d5e:	3314      	adds	r3, #20
 8018d60:	781b      	ldrb	r3, [r3, #0]
 8018d62:	2b01      	cmp	r3, #1
 8018d64:	d925      	bls.n	8018db2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018d66:	4b40      	ldr	r3, [pc, #256]	@ (8018e68 <etharp_output+0x1fc>)
 8018d68:	781b      	ldrb	r3, [r3, #0]
 8018d6a:	4619      	mov	r1, r3
 8018d6c:	4a3f      	ldr	r2, [pc, #252]	@ (8018e6c <etharp_output+0x200>)
 8018d6e:	460b      	mov	r3, r1
 8018d70:	005b      	lsls	r3, r3, #1
 8018d72:	440b      	add	r3, r1
 8018d74:	00db      	lsls	r3, r3, #3
 8018d76:	4413      	add	r3, r2
 8018d78:	3308      	adds	r3, #8
 8018d7a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018d7c:	68fa      	ldr	r2, [r7, #12]
 8018d7e:	429a      	cmp	r2, r3
 8018d80:	d117      	bne.n	8018db2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018d82:	69bb      	ldr	r3, [r7, #24]
 8018d84:	681a      	ldr	r2, [r3, #0]
 8018d86:	4b38      	ldr	r3, [pc, #224]	@ (8018e68 <etharp_output+0x1fc>)
 8018d88:	781b      	ldrb	r3, [r3, #0]
 8018d8a:	4618      	mov	r0, r3
 8018d8c:	4937      	ldr	r1, [pc, #220]	@ (8018e6c <etharp_output+0x200>)
 8018d8e:	4603      	mov	r3, r0
 8018d90:	005b      	lsls	r3, r3, #1
 8018d92:	4403      	add	r3, r0
 8018d94:	00db      	lsls	r3, r3, #3
 8018d96:	440b      	add	r3, r1
 8018d98:	3304      	adds	r3, #4
 8018d9a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018d9c:	429a      	cmp	r2, r3
 8018d9e:	d108      	bne.n	8018db2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018da0:	4b31      	ldr	r3, [pc, #196]	@ (8018e68 <etharp_output+0x1fc>)
 8018da2:	781b      	ldrb	r3, [r3, #0]
 8018da4:	461a      	mov	r2, r3
 8018da6:	68b9      	ldr	r1, [r7, #8]
 8018da8:	68f8      	ldr	r0, [r7, #12]
 8018daa:	f7ff fec5 	bl	8018b38 <etharp_output_to_arp_index>
 8018dae:	4603      	mov	r3, r0
 8018db0:	e04a      	b.n	8018e48 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018db2:	2300      	movs	r3, #0
 8018db4:	75fb      	strb	r3, [r7, #23]
 8018db6:	e031      	b.n	8018e1c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018db8:	7dfa      	ldrb	r2, [r7, #23]
 8018dba:	492c      	ldr	r1, [pc, #176]	@ (8018e6c <etharp_output+0x200>)
 8018dbc:	4613      	mov	r3, r2
 8018dbe:	005b      	lsls	r3, r3, #1
 8018dc0:	4413      	add	r3, r2
 8018dc2:	00db      	lsls	r3, r3, #3
 8018dc4:	440b      	add	r3, r1
 8018dc6:	3314      	adds	r3, #20
 8018dc8:	781b      	ldrb	r3, [r3, #0]
 8018dca:	2b01      	cmp	r3, #1
 8018dcc:	d923      	bls.n	8018e16 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018dce:	7dfa      	ldrb	r2, [r7, #23]
 8018dd0:	4926      	ldr	r1, [pc, #152]	@ (8018e6c <etharp_output+0x200>)
 8018dd2:	4613      	mov	r3, r2
 8018dd4:	005b      	lsls	r3, r3, #1
 8018dd6:	4413      	add	r3, r2
 8018dd8:	00db      	lsls	r3, r3, #3
 8018dda:	440b      	add	r3, r1
 8018ddc:	3308      	adds	r3, #8
 8018dde:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018de0:	68fa      	ldr	r2, [r7, #12]
 8018de2:	429a      	cmp	r2, r3
 8018de4:	d117      	bne.n	8018e16 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018de6:	69bb      	ldr	r3, [r7, #24]
 8018de8:	6819      	ldr	r1, [r3, #0]
 8018dea:	7dfa      	ldrb	r2, [r7, #23]
 8018dec:	481f      	ldr	r0, [pc, #124]	@ (8018e6c <etharp_output+0x200>)
 8018dee:	4613      	mov	r3, r2
 8018df0:	005b      	lsls	r3, r3, #1
 8018df2:	4413      	add	r3, r2
 8018df4:	00db      	lsls	r3, r3, #3
 8018df6:	4403      	add	r3, r0
 8018df8:	3304      	adds	r3, #4
 8018dfa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018dfc:	4299      	cmp	r1, r3
 8018dfe:	d10a      	bne.n	8018e16 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018e00:	4a19      	ldr	r2, [pc, #100]	@ (8018e68 <etharp_output+0x1fc>)
 8018e02:	7dfb      	ldrb	r3, [r7, #23]
 8018e04:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018e06:	7dfb      	ldrb	r3, [r7, #23]
 8018e08:	461a      	mov	r2, r3
 8018e0a:	68b9      	ldr	r1, [r7, #8]
 8018e0c:	68f8      	ldr	r0, [r7, #12]
 8018e0e:	f7ff fe93 	bl	8018b38 <etharp_output_to_arp_index>
 8018e12:	4603      	mov	r3, r0
 8018e14:	e018      	b.n	8018e48 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018e16:	7dfb      	ldrb	r3, [r7, #23]
 8018e18:	3301      	adds	r3, #1
 8018e1a:	75fb      	strb	r3, [r7, #23]
 8018e1c:	7dfb      	ldrb	r3, [r7, #23]
 8018e1e:	2b09      	cmp	r3, #9
 8018e20:	d9ca      	bls.n	8018db8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018e22:	68ba      	ldr	r2, [r7, #8]
 8018e24:	69b9      	ldr	r1, [r7, #24]
 8018e26:	68f8      	ldr	r0, [r7, #12]
 8018e28:	f000 f822 	bl	8018e70 <etharp_query>
 8018e2c:	4603      	mov	r3, r0
 8018e2e:	e00b      	b.n	8018e48 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8018e36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018e3a:	9300      	str	r3, [sp, #0]
 8018e3c:	69fb      	ldr	r3, [r7, #28]
 8018e3e:	68b9      	ldr	r1, [r7, #8]
 8018e40:	68f8      	ldr	r0, [r7, #12]
 8018e42:	f001 fdd3 	bl	801a9ec <ethernet_output>
 8018e46:	4603      	mov	r3, r0
}
 8018e48:	4618      	mov	r0, r3
 8018e4a:	3720      	adds	r7, #32
 8018e4c:	46bd      	mov	sp, r7
 8018e4e:	bd80      	pop	{r7, pc}
 8018e50:	08020744 	.word	0x08020744
 8018e54:	08020894 	.word	0x08020894
 8018e58:	080207bc 	.word	0x080207bc
 8018e5c:	080208e4 	.word	0x080208e4
 8018e60:	08020884 	.word	0x08020884
 8018e64:	08020f88 	.word	0x08020f88
 8018e68:	2000ca00 	.word	0x2000ca00
 8018e6c:	2000c910 	.word	0x2000c910

08018e70 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018e70:	b580      	push	{r7, lr}
 8018e72:	b08c      	sub	sp, #48	@ 0x30
 8018e74:	af02      	add	r7, sp, #8
 8018e76:	60f8      	str	r0, [r7, #12]
 8018e78:	60b9      	str	r1, [r7, #8]
 8018e7a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018e7c:	68fb      	ldr	r3, [r7, #12]
 8018e7e:	3326      	adds	r3, #38	@ 0x26
 8018e80:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018e82:	23ff      	movs	r3, #255	@ 0xff
 8018e84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8018e88:	2300      	movs	r3, #0
 8018e8a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018e8c:	68bb      	ldr	r3, [r7, #8]
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	68f9      	ldr	r1, [r7, #12]
 8018e92:	4618      	mov	r0, r3
 8018e94:	f000 fe0c 	bl	8019ab0 <ip4_addr_isbroadcast_u32>
 8018e98:	4603      	mov	r3, r0
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d10c      	bne.n	8018eb8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018e9e:	68bb      	ldr	r3, [r7, #8]
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018ea6:	2be0      	cmp	r3, #224	@ 0xe0
 8018ea8:	d006      	beq.n	8018eb8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018eaa:	68bb      	ldr	r3, [r7, #8]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d003      	beq.n	8018eb8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018eb0:	68bb      	ldr	r3, [r7, #8]
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d102      	bne.n	8018ebe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018eb8:	f06f 030f 	mvn.w	r3, #15
 8018ebc:	e101      	b.n	80190c2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018ebe:	68fa      	ldr	r2, [r7, #12]
 8018ec0:	2101      	movs	r1, #1
 8018ec2:	68b8      	ldr	r0, [r7, #8]
 8018ec4:	f7ff fb90 	bl	80185e8 <etharp_find_entry>
 8018ec8:	4603      	mov	r3, r0
 8018eca:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018ecc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	da02      	bge.n	8018eda <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018ed4:	8a7b      	ldrh	r3, [r7, #18]
 8018ed6:	b25b      	sxtb	r3, r3
 8018ed8:	e0f3      	b.n	80190c2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018eda:	8a7b      	ldrh	r3, [r7, #18]
 8018edc:	2b7e      	cmp	r3, #126	@ 0x7e
 8018ede:	d906      	bls.n	8018eee <etharp_query+0x7e>
 8018ee0:	4b7a      	ldr	r3, [pc, #488]	@ (80190cc <etharp_query+0x25c>)
 8018ee2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8018ee6:	497a      	ldr	r1, [pc, #488]	@ (80190d0 <etharp_query+0x260>)
 8018ee8:	487a      	ldr	r0, [pc, #488]	@ (80190d4 <etharp_query+0x264>)
 8018eea:	f002 fcf7 	bl	801b8dc <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018eee:	8a7b      	ldrh	r3, [r7, #18]
 8018ef0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018ef2:	7c7a      	ldrb	r2, [r7, #17]
 8018ef4:	4978      	ldr	r1, [pc, #480]	@ (80190d8 <etharp_query+0x268>)
 8018ef6:	4613      	mov	r3, r2
 8018ef8:	005b      	lsls	r3, r3, #1
 8018efa:	4413      	add	r3, r2
 8018efc:	00db      	lsls	r3, r3, #3
 8018efe:	440b      	add	r3, r1
 8018f00:	3314      	adds	r3, #20
 8018f02:	781b      	ldrb	r3, [r3, #0]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d115      	bne.n	8018f34 <etharp_query+0xc4>
    is_new_entry = 1;
 8018f08:	2301      	movs	r3, #1
 8018f0a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018f0c:	7c7a      	ldrb	r2, [r7, #17]
 8018f0e:	4972      	ldr	r1, [pc, #456]	@ (80190d8 <etharp_query+0x268>)
 8018f10:	4613      	mov	r3, r2
 8018f12:	005b      	lsls	r3, r3, #1
 8018f14:	4413      	add	r3, r2
 8018f16:	00db      	lsls	r3, r3, #3
 8018f18:	440b      	add	r3, r1
 8018f1a:	3314      	adds	r3, #20
 8018f1c:	2201      	movs	r2, #1
 8018f1e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018f20:	7c7a      	ldrb	r2, [r7, #17]
 8018f22:	496d      	ldr	r1, [pc, #436]	@ (80190d8 <etharp_query+0x268>)
 8018f24:	4613      	mov	r3, r2
 8018f26:	005b      	lsls	r3, r3, #1
 8018f28:	4413      	add	r3, r2
 8018f2a:	00db      	lsls	r3, r3, #3
 8018f2c:	440b      	add	r3, r1
 8018f2e:	3308      	adds	r3, #8
 8018f30:	68fa      	ldr	r2, [r7, #12]
 8018f32:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018f34:	7c7a      	ldrb	r2, [r7, #17]
 8018f36:	4968      	ldr	r1, [pc, #416]	@ (80190d8 <etharp_query+0x268>)
 8018f38:	4613      	mov	r3, r2
 8018f3a:	005b      	lsls	r3, r3, #1
 8018f3c:	4413      	add	r3, r2
 8018f3e:	00db      	lsls	r3, r3, #3
 8018f40:	440b      	add	r3, r1
 8018f42:	3314      	adds	r3, #20
 8018f44:	781b      	ldrb	r3, [r3, #0]
 8018f46:	2b01      	cmp	r3, #1
 8018f48:	d011      	beq.n	8018f6e <etharp_query+0xfe>
 8018f4a:	7c7a      	ldrb	r2, [r7, #17]
 8018f4c:	4962      	ldr	r1, [pc, #392]	@ (80190d8 <etharp_query+0x268>)
 8018f4e:	4613      	mov	r3, r2
 8018f50:	005b      	lsls	r3, r3, #1
 8018f52:	4413      	add	r3, r2
 8018f54:	00db      	lsls	r3, r3, #3
 8018f56:	440b      	add	r3, r1
 8018f58:	3314      	adds	r3, #20
 8018f5a:	781b      	ldrb	r3, [r3, #0]
 8018f5c:	2b01      	cmp	r3, #1
 8018f5e:	d806      	bhi.n	8018f6e <etharp_query+0xfe>
 8018f60:	4b5a      	ldr	r3, [pc, #360]	@ (80190cc <etharp_query+0x25c>)
 8018f62:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8018f66:	495d      	ldr	r1, [pc, #372]	@ (80190dc <etharp_query+0x26c>)
 8018f68:	485a      	ldr	r0, [pc, #360]	@ (80190d4 <etharp_query+0x264>)
 8018f6a:	f002 fcb7 	bl	801b8dc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018f6e:	6a3b      	ldr	r3, [r7, #32]
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d102      	bne.n	8018f7a <etharp_query+0x10a>
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d10c      	bne.n	8018f94 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018f7a:	68b9      	ldr	r1, [r7, #8]
 8018f7c:	68f8      	ldr	r0, [r7, #12]
 8018f7e:	f000 f963 	bl	8019248 <etharp_request>
 8018f82:	4603      	mov	r3, r0
 8018f84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d102      	bne.n	8018f94 <etharp_query+0x124>
      return result;
 8018f8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8018f92:	e096      	b.n	80190c2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d106      	bne.n	8018fa8 <etharp_query+0x138>
 8018f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80190cc <etharp_query+0x25c>)
 8018f9c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8018fa0:	494f      	ldr	r1, [pc, #316]	@ (80190e0 <etharp_query+0x270>)
 8018fa2:	484c      	ldr	r0, [pc, #304]	@ (80190d4 <etharp_query+0x264>)
 8018fa4:	f002 fc9a 	bl	801b8dc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018fa8:	7c7a      	ldrb	r2, [r7, #17]
 8018faa:	494b      	ldr	r1, [pc, #300]	@ (80190d8 <etharp_query+0x268>)
 8018fac:	4613      	mov	r3, r2
 8018fae:	005b      	lsls	r3, r3, #1
 8018fb0:	4413      	add	r3, r2
 8018fb2:	00db      	lsls	r3, r3, #3
 8018fb4:	440b      	add	r3, r1
 8018fb6:	3314      	adds	r3, #20
 8018fb8:	781b      	ldrb	r3, [r3, #0]
 8018fba:	2b01      	cmp	r3, #1
 8018fbc:	d917      	bls.n	8018fee <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018fbe:	4a49      	ldr	r2, [pc, #292]	@ (80190e4 <etharp_query+0x274>)
 8018fc0:	7c7b      	ldrb	r3, [r7, #17]
 8018fc2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018fc4:	7c7a      	ldrb	r2, [r7, #17]
 8018fc6:	4613      	mov	r3, r2
 8018fc8:	005b      	lsls	r3, r3, #1
 8018fca:	4413      	add	r3, r2
 8018fcc:	00db      	lsls	r3, r3, #3
 8018fce:	3308      	adds	r3, #8
 8018fd0:	4a41      	ldr	r2, [pc, #260]	@ (80190d8 <etharp_query+0x268>)
 8018fd2:	4413      	add	r3, r2
 8018fd4:	3304      	adds	r3, #4
 8018fd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018fda:	9200      	str	r2, [sp, #0]
 8018fdc:	697a      	ldr	r2, [r7, #20]
 8018fde:	6879      	ldr	r1, [r7, #4]
 8018fe0:	68f8      	ldr	r0, [r7, #12]
 8018fe2:	f001 fd03 	bl	801a9ec <ethernet_output>
 8018fe6:	4603      	mov	r3, r0
 8018fe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018fec:	e067      	b.n	80190be <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018fee:	7c7a      	ldrb	r2, [r7, #17]
 8018ff0:	4939      	ldr	r1, [pc, #228]	@ (80190d8 <etharp_query+0x268>)
 8018ff2:	4613      	mov	r3, r2
 8018ff4:	005b      	lsls	r3, r3, #1
 8018ff6:	4413      	add	r3, r2
 8018ff8:	00db      	lsls	r3, r3, #3
 8018ffa:	440b      	add	r3, r1
 8018ffc:	3314      	adds	r3, #20
 8018ffe:	781b      	ldrb	r3, [r3, #0]
 8019000:	2b01      	cmp	r3, #1
 8019002:	d15c      	bne.n	80190be <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019004:	2300      	movs	r3, #0
 8019006:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801900c:	e01c      	b.n	8019048 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801900e:	69fb      	ldr	r3, [r7, #28]
 8019010:	895a      	ldrh	r2, [r3, #10]
 8019012:	69fb      	ldr	r3, [r7, #28]
 8019014:	891b      	ldrh	r3, [r3, #8]
 8019016:	429a      	cmp	r2, r3
 8019018:	d10a      	bne.n	8019030 <etharp_query+0x1c0>
 801901a:	69fb      	ldr	r3, [r7, #28]
 801901c:	681b      	ldr	r3, [r3, #0]
 801901e:	2b00      	cmp	r3, #0
 8019020:	d006      	beq.n	8019030 <etharp_query+0x1c0>
 8019022:	4b2a      	ldr	r3, [pc, #168]	@ (80190cc <etharp_query+0x25c>)
 8019024:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8019028:	492f      	ldr	r1, [pc, #188]	@ (80190e8 <etharp_query+0x278>)
 801902a:	482a      	ldr	r0, [pc, #168]	@ (80190d4 <etharp_query+0x264>)
 801902c:	f002 fc56 	bl	801b8dc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019030:	69fb      	ldr	r3, [r7, #28]
 8019032:	7b1b      	ldrb	r3, [r3, #12]
 8019034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019038:	2b00      	cmp	r3, #0
 801903a:	d002      	beq.n	8019042 <etharp_query+0x1d2>
        copy_needed = 1;
 801903c:	2301      	movs	r3, #1
 801903e:	61bb      	str	r3, [r7, #24]
        break;
 8019040:	e005      	b.n	801904e <etharp_query+0x1de>
      }
      p = p->next;
 8019042:	69fb      	ldr	r3, [r7, #28]
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019048:	69fb      	ldr	r3, [r7, #28]
 801904a:	2b00      	cmp	r3, #0
 801904c:	d1df      	bne.n	801900e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801904e:	69bb      	ldr	r3, [r7, #24]
 8019050:	2b00      	cmp	r3, #0
 8019052:	d007      	beq.n	8019064 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019054:	687a      	ldr	r2, [r7, #4]
 8019056:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801905a:	200e      	movs	r0, #14
 801905c:	f7f8 fe76 	bl	8011d4c <pbuf_clone>
 8019060:	61f8      	str	r0, [r7, #28]
 8019062:	e004      	b.n	801906e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019068:	69f8      	ldr	r0, [r7, #28]
 801906a:	f7f8 fcad 	bl	80119c8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801906e:	69fb      	ldr	r3, [r7, #28]
 8019070:	2b00      	cmp	r3, #0
 8019072:	d021      	beq.n	80190b8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019074:	7c7a      	ldrb	r2, [r7, #17]
 8019076:	4918      	ldr	r1, [pc, #96]	@ (80190d8 <etharp_query+0x268>)
 8019078:	4613      	mov	r3, r2
 801907a:	005b      	lsls	r3, r3, #1
 801907c:	4413      	add	r3, r2
 801907e:	00db      	lsls	r3, r3, #3
 8019080:	440b      	add	r3, r1
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	2b00      	cmp	r3, #0
 8019086:	d00a      	beq.n	801909e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8019088:	7c7a      	ldrb	r2, [r7, #17]
 801908a:	4913      	ldr	r1, [pc, #76]	@ (80190d8 <etharp_query+0x268>)
 801908c:	4613      	mov	r3, r2
 801908e:	005b      	lsls	r3, r3, #1
 8019090:	4413      	add	r3, r2
 8019092:	00db      	lsls	r3, r3, #3
 8019094:	440b      	add	r3, r1
 8019096:	681b      	ldr	r3, [r3, #0]
 8019098:	4618      	mov	r0, r3
 801909a:	f7f8 fbef 	bl	801187c <pbuf_free>
      }
      arp_table[i].q = p;
 801909e:	7c7a      	ldrb	r2, [r7, #17]
 80190a0:	490d      	ldr	r1, [pc, #52]	@ (80190d8 <etharp_query+0x268>)
 80190a2:	4613      	mov	r3, r2
 80190a4:	005b      	lsls	r3, r3, #1
 80190a6:	4413      	add	r3, r2
 80190a8:	00db      	lsls	r3, r3, #3
 80190aa:	440b      	add	r3, r1
 80190ac:	69fa      	ldr	r2, [r7, #28]
 80190ae:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80190b0:	2300      	movs	r3, #0
 80190b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80190b6:	e002      	b.n	80190be <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80190b8:	23ff      	movs	r3, #255	@ 0xff
 80190ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80190be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80190c2:	4618      	mov	r0, r3
 80190c4:	3728      	adds	r7, #40	@ 0x28
 80190c6:	46bd      	mov	sp, r7
 80190c8:	bd80      	pop	{r7, pc}
 80190ca:	bf00      	nop
 80190cc:	08020744 	.word	0x08020744
 80190d0:	080208f0 	.word	0x080208f0
 80190d4:	080207bc 	.word	0x080207bc
 80190d8:	2000c910 	.word	0x2000c910
 80190dc:	08020900 	.word	0x08020900
 80190e0:	080208e4 	.word	0x080208e4
 80190e4:	2000ca00 	.word	0x2000ca00
 80190e8:	08020928 	.word	0x08020928

080190ec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80190ec:	b580      	push	{r7, lr}
 80190ee:	b08a      	sub	sp, #40	@ 0x28
 80190f0:	af02      	add	r7, sp, #8
 80190f2:	60f8      	str	r0, [r7, #12]
 80190f4:	60b9      	str	r1, [r7, #8]
 80190f6:	607a      	str	r2, [r7, #4]
 80190f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80190fa:	2300      	movs	r3, #0
 80190fc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	2b00      	cmp	r3, #0
 8019102:	d106      	bne.n	8019112 <etharp_raw+0x26>
 8019104:	4b3a      	ldr	r3, [pc, #232]	@ (80191f0 <etharp_raw+0x104>)
 8019106:	f240 4257 	movw	r2, #1111	@ 0x457
 801910a:	493a      	ldr	r1, [pc, #232]	@ (80191f4 <etharp_raw+0x108>)
 801910c:	483a      	ldr	r0, [pc, #232]	@ (80191f8 <etharp_raw+0x10c>)
 801910e:	f002 fbe5 	bl	801b8dc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8019112:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019116:	211c      	movs	r1, #28
 8019118:	200e      	movs	r0, #14
 801911a:	f7f8 f8cb 	bl	80112b4 <pbuf_alloc>
 801911e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019120:	69bb      	ldr	r3, [r7, #24]
 8019122:	2b00      	cmp	r3, #0
 8019124:	d102      	bne.n	801912c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8019126:	f04f 33ff 	mov.w	r3, #4294967295
 801912a:	e05d      	b.n	80191e8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801912c:	69bb      	ldr	r3, [r7, #24]
 801912e:	895b      	ldrh	r3, [r3, #10]
 8019130:	2b1b      	cmp	r3, #27
 8019132:	d806      	bhi.n	8019142 <etharp_raw+0x56>
 8019134:	4b2e      	ldr	r3, [pc, #184]	@ (80191f0 <etharp_raw+0x104>)
 8019136:	f240 4262 	movw	r2, #1122	@ 0x462
 801913a:	4930      	ldr	r1, [pc, #192]	@ (80191fc <etharp_raw+0x110>)
 801913c:	482e      	ldr	r0, [pc, #184]	@ (80191f8 <etharp_raw+0x10c>)
 801913e:	f002 fbcd 	bl	801b8dc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8019142:	69bb      	ldr	r3, [r7, #24]
 8019144:	685b      	ldr	r3, [r3, #4]
 8019146:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019148:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801914a:	4618      	mov	r0, r3
 801914c:	f7f6 ffd6 	bl	80100fc <lwip_htons>
 8019150:	4603      	mov	r3, r0
 8019152:	461a      	mov	r2, r3
 8019154:	697b      	ldr	r3, [r7, #20]
 8019156:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019158:	68fb      	ldr	r3, [r7, #12]
 801915a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801915e:	2b06      	cmp	r3, #6
 8019160:	d006      	beq.n	8019170 <etharp_raw+0x84>
 8019162:	4b23      	ldr	r3, [pc, #140]	@ (80191f0 <etharp_raw+0x104>)
 8019164:	f240 4269 	movw	r2, #1129	@ 0x469
 8019168:	4925      	ldr	r1, [pc, #148]	@ (8019200 <etharp_raw+0x114>)
 801916a:	4823      	ldr	r0, [pc, #140]	@ (80191f8 <etharp_raw+0x10c>)
 801916c:	f002 fbb6 	bl	801b8dc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8019170:	697b      	ldr	r3, [r7, #20]
 8019172:	3308      	adds	r3, #8
 8019174:	2206      	movs	r2, #6
 8019176:	6839      	ldr	r1, [r7, #0]
 8019178:	4618      	mov	r0, r3
 801917a:	f002 fd4e 	bl	801bc1a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801917e:	697b      	ldr	r3, [r7, #20]
 8019180:	3312      	adds	r3, #18
 8019182:	2206      	movs	r2, #6
 8019184:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019186:	4618      	mov	r0, r3
 8019188:	f002 fd47 	bl	801bc1a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801918c:	697b      	ldr	r3, [r7, #20]
 801918e:	330e      	adds	r3, #14
 8019190:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019192:	6812      	ldr	r2, [r2, #0]
 8019194:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8019196:	697b      	ldr	r3, [r7, #20]
 8019198:	3318      	adds	r3, #24
 801919a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801919c:	6812      	ldr	r2, [r2, #0]
 801919e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80191a0:	697b      	ldr	r3, [r7, #20]
 80191a2:	2200      	movs	r2, #0
 80191a4:	701a      	strb	r2, [r3, #0]
 80191a6:	2200      	movs	r2, #0
 80191a8:	f042 0201 	orr.w	r2, r2, #1
 80191ac:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80191ae:	697b      	ldr	r3, [r7, #20]
 80191b0:	2200      	movs	r2, #0
 80191b2:	f042 0208 	orr.w	r2, r2, #8
 80191b6:	709a      	strb	r2, [r3, #2]
 80191b8:	2200      	movs	r2, #0
 80191ba:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80191bc:	697b      	ldr	r3, [r7, #20]
 80191be:	2206      	movs	r2, #6
 80191c0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80191c2:	697b      	ldr	r3, [r7, #20]
 80191c4:	2204      	movs	r2, #4
 80191c6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80191c8:	f640 0306 	movw	r3, #2054	@ 0x806
 80191cc:	9300      	str	r3, [sp, #0]
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	68ba      	ldr	r2, [r7, #8]
 80191d2:	69b9      	ldr	r1, [r7, #24]
 80191d4:	68f8      	ldr	r0, [r7, #12]
 80191d6:	f001 fc09 	bl	801a9ec <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80191da:	69b8      	ldr	r0, [r7, #24]
 80191dc:	f7f8 fb4e 	bl	801187c <pbuf_free>
  p = NULL;
 80191e0:	2300      	movs	r3, #0
 80191e2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80191e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80191e8:	4618      	mov	r0, r3
 80191ea:	3720      	adds	r7, #32
 80191ec:	46bd      	mov	sp, r7
 80191ee:	bd80      	pop	{r7, pc}
 80191f0:	08020744 	.word	0x08020744
 80191f4:	08020894 	.word	0x08020894
 80191f8:	080207bc 	.word	0x080207bc
 80191fc:	08020944 	.word	0x08020944
 8019200:	08020978 	.word	0x08020978

08019204 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019204:	b580      	push	{r7, lr}
 8019206:	b088      	sub	sp, #32
 8019208:	af04      	add	r7, sp, #16
 801920a:	60f8      	str	r0, [r7, #12]
 801920c:	60b9      	str	r1, [r7, #8]
 801920e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8019216:	68fb      	ldr	r3, [r7, #12]
 8019218:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019220:	2201      	movs	r2, #1
 8019222:	9203      	str	r2, [sp, #12]
 8019224:	68ba      	ldr	r2, [r7, #8]
 8019226:	9202      	str	r2, [sp, #8]
 8019228:	4a06      	ldr	r2, [pc, #24]	@ (8019244 <etharp_request_dst+0x40>)
 801922a:	9201      	str	r2, [sp, #4]
 801922c:	9300      	str	r3, [sp, #0]
 801922e:	4603      	mov	r3, r0
 8019230:	687a      	ldr	r2, [r7, #4]
 8019232:	68f8      	ldr	r0, [r7, #12]
 8019234:	f7ff ff5a 	bl	80190ec <etharp_raw>
 8019238:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801923a:	4618      	mov	r0, r3
 801923c:	3710      	adds	r7, #16
 801923e:	46bd      	mov	sp, r7
 8019240:	bd80      	pop	{r7, pc}
 8019242:	bf00      	nop
 8019244:	08020f90 	.word	0x08020f90

08019248 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019248:	b580      	push	{r7, lr}
 801924a:	b082      	sub	sp, #8
 801924c:	af00      	add	r7, sp, #0
 801924e:	6078      	str	r0, [r7, #4]
 8019250:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8019252:	4a05      	ldr	r2, [pc, #20]	@ (8019268 <etharp_request+0x20>)
 8019254:	6839      	ldr	r1, [r7, #0]
 8019256:	6878      	ldr	r0, [r7, #4]
 8019258:	f7ff ffd4 	bl	8019204 <etharp_request_dst>
 801925c:	4603      	mov	r3, r0
}
 801925e:	4618      	mov	r0, r3
 8019260:	3708      	adds	r7, #8
 8019262:	46bd      	mov	sp, r7
 8019264:	bd80      	pop	{r7, pc}
 8019266:	bf00      	nop
 8019268:	08020f88 	.word	0x08020f88

0801926c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801926c:	b580      	push	{r7, lr}
 801926e:	b08e      	sub	sp, #56	@ 0x38
 8019270:	af04      	add	r7, sp, #16
 8019272:	6078      	str	r0, [r7, #4]
 8019274:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019276:	4b78      	ldr	r3, [pc, #480]	@ (8019458 <icmp_input+0x1ec>)
 8019278:	689b      	ldr	r3, [r3, #8]
 801927a:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 801927c:	6a3b      	ldr	r3, [r7, #32]
 801927e:	781b      	ldrb	r3, [r3, #0]
 8019280:	f003 030f 	and.w	r3, r3, #15
 8019284:	b2db      	uxtb	r3, r3
 8019286:	009b      	lsls	r3, r3, #2
 8019288:	b2db      	uxtb	r3, r3
 801928a:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 801928c:	8bfb      	ldrh	r3, [r7, #30]
 801928e:	2b13      	cmp	r3, #19
 8019290:	f240 80cf 	bls.w	8019432 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	895b      	ldrh	r3, [r3, #10]
 8019298:	2b03      	cmp	r3, #3
 801929a:	f240 80cc 	bls.w	8019436 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	685b      	ldr	r3, [r3, #4]
 80192a2:	781b      	ldrb	r3, [r3, #0]
 80192a4:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80192a6:	7f7b      	ldrb	r3, [r7, #29]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	f000 80bb 	beq.w	8019424 <icmp_input+0x1b8>
 80192ae:	2b08      	cmp	r3, #8
 80192b0:	f040 80bb 	bne.w	801942a <icmp_input+0x1be>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80192b4:	4b69      	ldr	r3, [pc, #420]	@ (801945c <icmp_input+0x1f0>)
 80192b6:	627b      	str	r3, [r7, #36]	@ 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80192b8:	4b67      	ldr	r3, [pc, #412]	@ (8019458 <icmp_input+0x1ec>)
 80192ba:	695b      	ldr	r3, [r3, #20]
 80192bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80192c0:	2be0      	cmp	r3, #224	@ 0xe0
 80192c2:	d102      	bne.n	80192ca <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 80192c4:	683b      	ldr	r3, [r7, #0]
 80192c6:	3304      	adds	r3, #4
 80192c8:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80192ca:	4b63      	ldr	r3, [pc, #396]	@ (8019458 <icmp_input+0x1ec>)
 80192cc:	695b      	ldr	r3, [r3, #20]
 80192ce:	4a62      	ldr	r2, [pc, #392]	@ (8019458 <icmp_input+0x1ec>)
 80192d0:	6812      	ldr	r2, [r2, #0]
 80192d2:	4611      	mov	r1, r2
 80192d4:	4618      	mov	r0, r3
 80192d6:	f000 fbeb 	bl	8019ab0 <ip4_addr_isbroadcast_u32>
 80192da:	4603      	mov	r3, r0
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d002      	beq.n	80192e6 <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 80192e0:	683b      	ldr	r3, [r7, #0]
 80192e2:	3304      	adds	r3, #4
 80192e4:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	891b      	ldrh	r3, [r3, #8]
 80192ea:	2b07      	cmp	r3, #7
 80192ec:	f240 80a5 	bls.w	801943a <icmp_input+0x1ce>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80192f0:	8bfb      	ldrh	r3, [r7, #30]
 80192f2:	330e      	adds	r3, #14
 80192f4:	4619      	mov	r1, r3
 80192f6:	6878      	ldr	r0, [r7, #4]
 80192f8:	f7f8 fa2a 	bl	8011750 <pbuf_add_header>
 80192fc:	4603      	mov	r3, r0
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d04b      	beq.n	801939a <icmp_input+0x12e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	891a      	ldrh	r2, [r3, #8]
 8019306:	8bfb      	ldrh	r3, [r7, #30]
 8019308:	4413      	add	r3, r2
 801930a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	891b      	ldrh	r3, [r3, #8]
 8019310:	8b7a      	ldrh	r2, [r7, #26]
 8019312:	429a      	cmp	r2, r3
 8019314:	f0c0 8096 	bcc.w	8019444 <icmp_input+0x1d8>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019318:	8b7b      	ldrh	r3, [r7, #26]
 801931a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801931e:	4619      	mov	r1, r3
 8019320:	200e      	movs	r0, #14
 8019322:	f7f7 ffc7 	bl	80112b4 <pbuf_alloc>
 8019326:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019328:	697b      	ldr	r3, [r7, #20]
 801932a:	2b00      	cmp	r3, #0
 801932c:	f000 808c 	beq.w	8019448 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019330:	697b      	ldr	r3, [r7, #20]
 8019332:	895b      	ldrh	r3, [r3, #10]
 8019334:	461a      	mov	r2, r3
 8019336:	8bfb      	ldrh	r3, [r7, #30]
 8019338:	3308      	adds	r3, #8
 801933a:	429a      	cmp	r2, r3
 801933c:	d203      	bcs.n	8019346 <icmp_input+0xda>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801933e:	6978      	ldr	r0, [r7, #20]
 8019340:	f7f8 fa9c 	bl	801187c <pbuf_free>
          goto icmperr;
 8019344:	e081      	b.n	801944a <icmp_input+0x1de>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019346:	697b      	ldr	r3, [r7, #20]
 8019348:	685b      	ldr	r3, [r3, #4]
 801934a:	8bfa      	ldrh	r2, [r7, #30]
 801934c:	6a39      	ldr	r1, [r7, #32]
 801934e:	4618      	mov	r0, r3
 8019350:	f002 fc63 	bl	801bc1a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019354:	8bfb      	ldrh	r3, [r7, #30]
 8019356:	4619      	mov	r1, r3
 8019358:	6978      	ldr	r0, [r7, #20]
 801935a:	f7f8 fa09 	bl	8011770 <pbuf_remove_header>
 801935e:	4603      	mov	r3, r0
 8019360:	2b00      	cmp	r3, #0
 8019362:	d009      	beq.n	8019378 <icmp_input+0x10c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019364:	4b3e      	ldr	r3, [pc, #248]	@ (8019460 <icmp_input+0x1f4>)
 8019366:	22b6      	movs	r2, #182	@ 0xb6
 8019368:	493e      	ldr	r1, [pc, #248]	@ (8019464 <icmp_input+0x1f8>)
 801936a:	483f      	ldr	r0, [pc, #252]	@ (8019468 <icmp_input+0x1fc>)
 801936c:	f002 fab6 	bl	801b8dc <iprintf>
          pbuf_free(r);
 8019370:	6978      	ldr	r0, [r7, #20]
 8019372:	f7f8 fa83 	bl	801187c <pbuf_free>
          goto icmperr;
 8019376:	e068      	b.n	801944a <icmp_input+0x1de>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019378:	6879      	ldr	r1, [r7, #4]
 801937a:	6978      	ldr	r0, [r7, #20]
 801937c:	f7f8 fba2 	bl	8011ac4 <pbuf_copy>
 8019380:	4603      	mov	r3, r0
 8019382:	2b00      	cmp	r3, #0
 8019384:	d003      	beq.n	801938e <icmp_input+0x122>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019386:	6978      	ldr	r0, [r7, #20]
 8019388:	f7f8 fa78 	bl	801187c <pbuf_free>
          goto icmperr;
 801938c:	e05d      	b.n	801944a <icmp_input+0x1de>
        }
        /* free the original p */
        pbuf_free(p);
 801938e:	6878      	ldr	r0, [r7, #4]
 8019390:	f7f8 fa74 	bl	801187c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019394:	697b      	ldr	r3, [r7, #20]
 8019396:	607b      	str	r3, [r7, #4]
 8019398:	e00f      	b.n	80193ba <icmp_input+0x14e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801939a:	8bfb      	ldrh	r3, [r7, #30]
 801939c:	330e      	adds	r3, #14
 801939e:	4619      	mov	r1, r3
 80193a0:	6878      	ldr	r0, [r7, #4]
 80193a2:	f7f8 f9e5 	bl	8011770 <pbuf_remove_header>
 80193a6:	4603      	mov	r3, r0
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d006      	beq.n	80193ba <icmp_input+0x14e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80193ac:	4b2c      	ldr	r3, [pc, #176]	@ (8019460 <icmp_input+0x1f4>)
 80193ae:	22c7      	movs	r2, #199	@ 0xc7
 80193b0:	492e      	ldr	r1, [pc, #184]	@ (801946c <icmp_input+0x200>)
 80193b2:	482d      	ldr	r0, [pc, #180]	@ (8019468 <icmp_input+0x1fc>)
 80193b4:	f002 fa92 	bl	801b8dc <iprintf>
          goto icmperr;
 80193b8:	e047      	b.n	801944a <icmp_input+0x1de>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	685b      	ldr	r3, [r3, #4]
 80193be:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80193c0:	8bfb      	ldrh	r3, [r7, #30]
 80193c2:	4619      	mov	r1, r3
 80193c4:	6878      	ldr	r0, [r7, #4]
 80193c6:	f7f8 f9c3 	bl	8011750 <pbuf_add_header>
 80193ca:	4603      	mov	r3, r0
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d12b      	bne.n	8019428 <icmp_input+0x1bc>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	685b      	ldr	r3, [r3, #4]
 80193d4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80193d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193d8:	681a      	ldr	r2, [r3, #0]
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80193de:	4b1e      	ldr	r3, [pc, #120]	@ (8019458 <icmp_input+0x1ec>)
 80193e0:	691a      	ldr	r2, [r3, #16]
 80193e2:	68fb      	ldr	r3, [r7, #12]
 80193e4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80193e6:	693b      	ldr	r3, [r7, #16]
 80193e8:	2200      	movs	r2, #0
 80193ea:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80193ec:	693b      	ldr	r3, [r7, #16]
 80193ee:	2200      	movs	r2, #0
 80193f0:	709a      	strb	r2, [r3, #2]
 80193f2:	2200      	movs	r2, #0
 80193f4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	22ff      	movs	r2, #255	@ 0xff
 80193fa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	2200      	movs	r2, #0
 8019400:	729a      	strb	r2, [r3, #10]
 8019402:	2200      	movs	r2, #0
 8019404:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019406:	683b      	ldr	r3, [r7, #0]
 8019408:	9302      	str	r3, [sp, #8]
 801940a:	2301      	movs	r3, #1
 801940c:	9301      	str	r3, [sp, #4]
 801940e:	2300      	movs	r3, #0
 8019410:	9300      	str	r3, [sp, #0]
 8019412:	23ff      	movs	r3, #255	@ 0xff
 8019414:	2200      	movs	r2, #0
 8019416:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019418:	6878      	ldr	r0, [r7, #4]
 801941a:	f000 fa71 	bl	8019900 <ip4_output_if>
 801941e:	4603      	mov	r3, r0
 8019420:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019422:	e001      	b.n	8019428 <icmp_input+0x1bc>
      break;
 8019424:	bf00      	nop
 8019426:	e000      	b.n	801942a <icmp_input+0x1be>
      break;
 8019428:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801942a:	6878      	ldr	r0, [r7, #4]
 801942c:	f7f8 fa26 	bl	801187c <pbuf_free>
  return;
 8019430:	e00f      	b.n	8019452 <icmp_input+0x1e6>
    goto lenerr;
 8019432:	bf00      	nop
 8019434:	e002      	b.n	801943c <icmp_input+0x1d0>
    goto lenerr;
 8019436:	bf00      	nop
 8019438:	e000      	b.n	801943c <icmp_input+0x1d0>
        goto lenerr;
 801943a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801943c:	6878      	ldr	r0, [r7, #4]
 801943e:	f7f8 fa1d 	bl	801187c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019442:	e006      	b.n	8019452 <icmp_input+0x1e6>
          goto icmperr;
 8019444:	bf00      	nop
 8019446:	e000      	b.n	801944a <icmp_input+0x1de>
          goto icmperr;
 8019448:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801944a:	6878      	ldr	r0, [r7, #4]
 801944c:	f7f8 fa16 	bl	801187c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019450:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019452:	3728      	adds	r7, #40	@ 0x28
 8019454:	46bd      	mov	sp, r7
 8019456:	bd80      	pop	{r7, pc}
 8019458:	2000915c 	.word	0x2000915c
 801945c:	20009170 	.word	0x20009170
 8019460:	080209bc 	.word	0x080209bc
 8019464:	080209f4 	.word	0x080209f4
 8019468:	08020a2c 	.word	0x08020a2c
 801946c:	08020a54 	.word	0x08020a54

08019470 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019470:	b580      	push	{r7, lr}
 8019472:	b082      	sub	sp, #8
 8019474:	af00      	add	r7, sp, #0
 8019476:	6078      	str	r0, [r7, #4]
 8019478:	460b      	mov	r3, r1
 801947a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801947c:	78fb      	ldrb	r3, [r7, #3]
 801947e:	461a      	mov	r2, r3
 8019480:	2103      	movs	r1, #3
 8019482:	6878      	ldr	r0, [r7, #4]
 8019484:	f000 f814 	bl	80194b0 <icmp_send_response>
}
 8019488:	bf00      	nop
 801948a:	3708      	adds	r7, #8
 801948c:	46bd      	mov	sp, r7
 801948e:	bd80      	pop	{r7, pc}

08019490 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019490:	b580      	push	{r7, lr}
 8019492:	b082      	sub	sp, #8
 8019494:	af00      	add	r7, sp, #0
 8019496:	6078      	str	r0, [r7, #4]
 8019498:	460b      	mov	r3, r1
 801949a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801949c:	78fb      	ldrb	r3, [r7, #3]
 801949e:	461a      	mov	r2, r3
 80194a0:	210b      	movs	r1, #11
 80194a2:	6878      	ldr	r0, [r7, #4]
 80194a4:	f000 f804 	bl	80194b0 <icmp_send_response>
}
 80194a8:	bf00      	nop
 80194aa:	3708      	adds	r7, #8
 80194ac:	46bd      	mov	sp, r7
 80194ae:	bd80      	pop	{r7, pc}

080194b0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80194b0:	b580      	push	{r7, lr}
 80194b2:	b08c      	sub	sp, #48	@ 0x30
 80194b4:	af04      	add	r7, sp, #16
 80194b6:	6078      	str	r0, [r7, #4]
 80194b8:	460b      	mov	r3, r1
 80194ba:	70fb      	strb	r3, [r7, #3]
 80194bc:	4613      	mov	r3, r2
 80194be:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80194c0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80194c4:	2124      	movs	r1, #36	@ 0x24
 80194c6:	2022      	movs	r0, #34	@ 0x22
 80194c8:	f7f7 fef4 	bl	80112b4 <pbuf_alloc>
 80194cc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80194ce:	69fb      	ldr	r3, [r7, #28]
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d04c      	beq.n	801956e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80194d4:	69fb      	ldr	r3, [r7, #28]
 80194d6:	895b      	ldrh	r3, [r3, #10]
 80194d8:	2b23      	cmp	r3, #35	@ 0x23
 80194da:	d806      	bhi.n	80194ea <icmp_send_response+0x3a>
 80194dc:	4b26      	ldr	r3, [pc, #152]	@ (8019578 <icmp_send_response+0xc8>)
 80194de:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80194e2:	4926      	ldr	r1, [pc, #152]	@ (801957c <icmp_send_response+0xcc>)
 80194e4:	4826      	ldr	r0, [pc, #152]	@ (8019580 <icmp_send_response+0xd0>)
 80194e6:	f002 f9f9 	bl	801b8dc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	685b      	ldr	r3, [r3, #4]
 80194ee:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80194f0:	69fb      	ldr	r3, [r7, #28]
 80194f2:	685b      	ldr	r3, [r3, #4]
 80194f4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80194f6:	697b      	ldr	r3, [r7, #20]
 80194f8:	78fa      	ldrb	r2, [r7, #3]
 80194fa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80194fc:	697b      	ldr	r3, [r7, #20]
 80194fe:	78ba      	ldrb	r2, [r7, #2]
 8019500:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019502:	697b      	ldr	r3, [r7, #20]
 8019504:	2200      	movs	r2, #0
 8019506:	711a      	strb	r2, [r3, #4]
 8019508:	2200      	movs	r2, #0
 801950a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801950c:	697b      	ldr	r3, [r7, #20]
 801950e:	2200      	movs	r2, #0
 8019510:	719a      	strb	r2, [r3, #6]
 8019512:	2200      	movs	r2, #0
 8019514:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019516:	69fb      	ldr	r3, [r7, #28]
 8019518:	685b      	ldr	r3, [r3, #4]
 801951a:	f103 0008 	add.w	r0, r3, #8
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	685b      	ldr	r3, [r3, #4]
 8019522:	221c      	movs	r2, #28
 8019524:	4619      	mov	r1, r3
 8019526:	f002 fb78 	bl	801bc1a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801952a:	69bb      	ldr	r3, [r7, #24]
 801952c:	68db      	ldr	r3, [r3, #12]
 801952e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019530:	f107 030c 	add.w	r3, r7, #12
 8019534:	4618      	mov	r0, r3
 8019536:	f000 f825 	bl	8019584 <ip4_route>
 801953a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801953c:	693b      	ldr	r3, [r7, #16]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d011      	beq.n	8019566 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8019542:	697b      	ldr	r3, [r7, #20]
 8019544:	2200      	movs	r2, #0
 8019546:	709a      	strb	r2, [r3, #2]
 8019548:	2200      	movs	r2, #0
 801954a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801954c:	f107 020c 	add.w	r2, r7, #12
 8019550:	693b      	ldr	r3, [r7, #16]
 8019552:	9302      	str	r3, [sp, #8]
 8019554:	2301      	movs	r3, #1
 8019556:	9301      	str	r3, [sp, #4]
 8019558:	2300      	movs	r3, #0
 801955a:	9300      	str	r3, [sp, #0]
 801955c:	23ff      	movs	r3, #255	@ 0xff
 801955e:	2100      	movs	r1, #0
 8019560:	69f8      	ldr	r0, [r7, #28]
 8019562:	f000 f9cd 	bl	8019900 <ip4_output_if>
  }
  pbuf_free(q);
 8019566:	69f8      	ldr	r0, [r7, #28]
 8019568:	f7f8 f988 	bl	801187c <pbuf_free>
 801956c:	e000      	b.n	8019570 <icmp_send_response+0xc0>
    return;
 801956e:	bf00      	nop
}
 8019570:	3720      	adds	r7, #32
 8019572:	46bd      	mov	sp, r7
 8019574:	bd80      	pop	{r7, pc}
 8019576:	bf00      	nop
 8019578:	080209bc 	.word	0x080209bc
 801957c:	08020a88 	.word	0x08020a88
 8019580:	08020a2c 	.word	0x08020a2c

08019584 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019584:	b480      	push	{r7}
 8019586:	b085      	sub	sp, #20
 8019588:	af00      	add	r7, sp, #0
 801958a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801958c:	4b33      	ldr	r3, [pc, #204]	@ (801965c <ip4_route+0xd8>)
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	60fb      	str	r3, [r7, #12]
 8019592:	e036      	b.n	8019602 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019594:	68fb      	ldr	r3, [r7, #12]
 8019596:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801959a:	f003 0301 	and.w	r3, r3, #1
 801959e:	b2db      	uxtb	r3, r3
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d02b      	beq.n	80195fc <ip4_route+0x78>
 80195a4:	68fb      	ldr	r3, [r7, #12]
 80195a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80195aa:	089b      	lsrs	r3, r3, #2
 80195ac:	f003 0301 	and.w	r3, r3, #1
 80195b0:	b2db      	uxtb	r3, r3
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d022      	beq.n	80195fc <ip4_route+0x78>
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	3304      	adds	r3, #4
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d01d      	beq.n	80195fc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	681a      	ldr	r2, [r3, #0]
 80195c4:	68fb      	ldr	r3, [r7, #12]
 80195c6:	3304      	adds	r3, #4
 80195c8:	681b      	ldr	r3, [r3, #0]
 80195ca:	405a      	eors	r2, r3
 80195cc:	68fb      	ldr	r3, [r7, #12]
 80195ce:	3308      	adds	r3, #8
 80195d0:	681b      	ldr	r3, [r3, #0]
 80195d2:	4013      	ands	r3, r2
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d101      	bne.n	80195dc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	e038      	b.n	801964e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80195dc:	68fb      	ldr	r3, [r7, #12]
 80195de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80195e2:	f003 0302 	and.w	r3, r3, #2
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d108      	bne.n	80195fc <ip4_route+0x78>
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	681a      	ldr	r2, [r3, #0]
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	330c      	adds	r3, #12
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	429a      	cmp	r2, r3
 80195f6:	d101      	bne.n	80195fc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80195f8:	68fb      	ldr	r3, [r7, #12]
 80195fa:	e028      	b.n	801964e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80195fc:	68fb      	ldr	r3, [r7, #12]
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	60fb      	str	r3, [r7, #12]
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	2b00      	cmp	r3, #0
 8019606:	d1c5      	bne.n	8019594 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019608:	4b15      	ldr	r3, [pc, #84]	@ (8019660 <ip4_route+0xdc>)
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	2b00      	cmp	r3, #0
 801960e:	d01a      	beq.n	8019646 <ip4_route+0xc2>
 8019610:	4b13      	ldr	r3, [pc, #76]	@ (8019660 <ip4_route+0xdc>)
 8019612:	681b      	ldr	r3, [r3, #0]
 8019614:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019618:	f003 0301 	and.w	r3, r3, #1
 801961c:	2b00      	cmp	r3, #0
 801961e:	d012      	beq.n	8019646 <ip4_route+0xc2>
 8019620:	4b0f      	ldr	r3, [pc, #60]	@ (8019660 <ip4_route+0xdc>)
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019628:	f003 0304 	and.w	r3, r3, #4
 801962c:	2b00      	cmp	r3, #0
 801962e:	d00a      	beq.n	8019646 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019630:	4b0b      	ldr	r3, [pc, #44]	@ (8019660 <ip4_route+0xdc>)
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	3304      	adds	r3, #4
 8019636:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019638:	2b00      	cmp	r3, #0
 801963a:	d004      	beq.n	8019646 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	b2db      	uxtb	r3, r3
 8019642:	2b7f      	cmp	r3, #127	@ 0x7f
 8019644:	d101      	bne.n	801964a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019646:	2300      	movs	r3, #0
 8019648:	e001      	b.n	801964e <ip4_route+0xca>
  }

  return netif_default;
 801964a:	4b05      	ldr	r3, [pc, #20]	@ (8019660 <ip4_route+0xdc>)
 801964c:	681b      	ldr	r3, [r3, #0]
}
 801964e:	4618      	mov	r0, r3
 8019650:	3714      	adds	r7, #20
 8019652:	46bd      	mov	sp, r7
 8019654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019658:	4770      	bx	lr
 801965a:	bf00      	nop
 801965c:	2000c8a4 	.word	0x2000c8a4
 8019660:	2000c8a8 	.word	0x2000c8a8

08019664 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019664:	b580      	push	{r7, lr}
 8019666:	b082      	sub	sp, #8
 8019668:	af00      	add	r7, sp, #0
 801966a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019672:	f003 0301 	and.w	r3, r3, #1
 8019676:	b2db      	uxtb	r3, r3
 8019678:	2b00      	cmp	r3, #0
 801967a:	d016      	beq.n	80196aa <ip4_input_accept+0x46>
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	3304      	adds	r3, #4
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	2b00      	cmp	r3, #0
 8019684:	d011      	beq.n	80196aa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019686:	4b0b      	ldr	r3, [pc, #44]	@ (80196b4 <ip4_input_accept+0x50>)
 8019688:	695a      	ldr	r2, [r3, #20]
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	3304      	adds	r3, #4
 801968e:	681b      	ldr	r3, [r3, #0]
 8019690:	429a      	cmp	r2, r3
 8019692:	d008      	beq.n	80196a6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019694:	4b07      	ldr	r3, [pc, #28]	@ (80196b4 <ip4_input_accept+0x50>)
 8019696:	695b      	ldr	r3, [r3, #20]
 8019698:	6879      	ldr	r1, [r7, #4]
 801969a:	4618      	mov	r0, r3
 801969c:	f000 fa08 	bl	8019ab0 <ip4_addr_isbroadcast_u32>
 80196a0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d001      	beq.n	80196aa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80196a6:	2301      	movs	r3, #1
 80196a8:	e000      	b.n	80196ac <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80196aa:	2300      	movs	r3, #0
}
 80196ac:	4618      	mov	r0, r3
 80196ae:	3708      	adds	r7, #8
 80196b0:	46bd      	mov	sp, r7
 80196b2:	bd80      	pop	{r7, pc}
 80196b4:	2000915c 	.word	0x2000915c

080196b8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80196b8:	b580      	push	{r7, lr}
 80196ba:	b086      	sub	sp, #24
 80196bc:	af00      	add	r7, sp, #0
 80196be:	6078      	str	r0, [r7, #4]
 80196c0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	685b      	ldr	r3, [r3, #4]
 80196c6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80196c8:	697b      	ldr	r3, [r7, #20]
 80196ca:	781b      	ldrb	r3, [r3, #0]
 80196cc:	091b      	lsrs	r3, r3, #4
 80196ce:	b2db      	uxtb	r3, r3
 80196d0:	2b04      	cmp	r3, #4
 80196d2:	d004      	beq.n	80196de <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80196d4:	6878      	ldr	r0, [r7, #4]
 80196d6:	f7f8 f8d1 	bl	801187c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80196da:	2300      	movs	r3, #0
 80196dc:	e107      	b.n	80198ee <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80196de:	697b      	ldr	r3, [r7, #20]
 80196e0:	781b      	ldrb	r3, [r3, #0]
 80196e2:	f003 030f 	and.w	r3, r3, #15
 80196e6:	b2db      	uxtb	r3, r3
 80196e8:	009b      	lsls	r3, r3, #2
 80196ea:	b2db      	uxtb	r3, r3
 80196ec:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80196ee:	697b      	ldr	r3, [r7, #20]
 80196f0:	885b      	ldrh	r3, [r3, #2]
 80196f2:	b29b      	uxth	r3, r3
 80196f4:	4618      	mov	r0, r3
 80196f6:	f7f6 fd01 	bl	80100fc <lwip_htons>
 80196fa:	4603      	mov	r3, r0
 80196fc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	891b      	ldrh	r3, [r3, #8]
 8019702:	89ba      	ldrh	r2, [r7, #12]
 8019704:	429a      	cmp	r2, r3
 8019706:	d204      	bcs.n	8019712 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8019708:	89bb      	ldrh	r3, [r7, #12]
 801970a:	4619      	mov	r1, r3
 801970c:	6878      	ldr	r0, [r7, #4]
 801970e:	f7f7 ff2f 	bl	8011570 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	895b      	ldrh	r3, [r3, #10]
 8019716:	89fa      	ldrh	r2, [r7, #14]
 8019718:	429a      	cmp	r2, r3
 801971a:	d807      	bhi.n	801972c <ip4_input+0x74>
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	891b      	ldrh	r3, [r3, #8]
 8019720:	89ba      	ldrh	r2, [r7, #12]
 8019722:	429a      	cmp	r2, r3
 8019724:	d802      	bhi.n	801972c <ip4_input+0x74>
 8019726:	89fb      	ldrh	r3, [r7, #14]
 8019728:	2b13      	cmp	r3, #19
 801972a:	d804      	bhi.n	8019736 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801972c:	6878      	ldr	r0, [r7, #4]
 801972e:	f7f8 f8a5 	bl	801187c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8019732:	2300      	movs	r3, #0
 8019734:	e0db      	b.n	80198ee <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019736:	697b      	ldr	r3, [r7, #20]
 8019738:	691b      	ldr	r3, [r3, #16]
 801973a:	4a6f      	ldr	r2, [pc, #444]	@ (80198f8 <ip4_input+0x240>)
 801973c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801973e:	697b      	ldr	r3, [r7, #20]
 8019740:	68db      	ldr	r3, [r3, #12]
 8019742:	4a6d      	ldr	r2, [pc, #436]	@ (80198f8 <ip4_input+0x240>)
 8019744:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019746:	4b6c      	ldr	r3, [pc, #432]	@ (80198f8 <ip4_input+0x240>)
 8019748:	695b      	ldr	r3, [r3, #20]
 801974a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801974e:	2be0      	cmp	r3, #224	@ 0xe0
 8019750:	d112      	bne.n	8019778 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019752:	683b      	ldr	r3, [r7, #0]
 8019754:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019758:	f003 0301 	and.w	r3, r3, #1
 801975c:	b2db      	uxtb	r3, r3
 801975e:	2b00      	cmp	r3, #0
 8019760:	d007      	beq.n	8019772 <ip4_input+0xba>
 8019762:	683b      	ldr	r3, [r7, #0]
 8019764:	3304      	adds	r3, #4
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	2b00      	cmp	r3, #0
 801976a:	d002      	beq.n	8019772 <ip4_input+0xba>
      netif = inp;
 801976c:	683b      	ldr	r3, [r7, #0]
 801976e:	613b      	str	r3, [r7, #16]
 8019770:	e02a      	b.n	80197c8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019772:	2300      	movs	r3, #0
 8019774:	613b      	str	r3, [r7, #16]
 8019776:	e027      	b.n	80197c8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019778:	6838      	ldr	r0, [r7, #0]
 801977a:	f7ff ff73 	bl	8019664 <ip4_input_accept>
 801977e:	4603      	mov	r3, r0
 8019780:	2b00      	cmp	r3, #0
 8019782:	d002      	beq.n	801978a <ip4_input+0xd2>
      netif = inp;
 8019784:	683b      	ldr	r3, [r7, #0]
 8019786:	613b      	str	r3, [r7, #16]
 8019788:	e01e      	b.n	80197c8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801978a:	2300      	movs	r3, #0
 801978c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801978e:	4b5a      	ldr	r3, [pc, #360]	@ (80198f8 <ip4_input+0x240>)
 8019790:	695b      	ldr	r3, [r3, #20]
 8019792:	b2db      	uxtb	r3, r3
 8019794:	2b7f      	cmp	r3, #127	@ 0x7f
 8019796:	d017      	beq.n	80197c8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019798:	4b58      	ldr	r3, [pc, #352]	@ (80198fc <ip4_input+0x244>)
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	613b      	str	r3, [r7, #16]
 801979e:	e00e      	b.n	80197be <ip4_input+0x106>
          if (netif == inp) {
 80197a0:	693a      	ldr	r2, [r7, #16]
 80197a2:	683b      	ldr	r3, [r7, #0]
 80197a4:	429a      	cmp	r2, r3
 80197a6:	d006      	beq.n	80197b6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80197a8:	6938      	ldr	r0, [r7, #16]
 80197aa:	f7ff ff5b 	bl	8019664 <ip4_input_accept>
 80197ae:	4603      	mov	r3, r0
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d108      	bne.n	80197c6 <ip4_input+0x10e>
 80197b4:	e000      	b.n	80197b8 <ip4_input+0x100>
            continue;
 80197b6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80197b8:	693b      	ldr	r3, [r7, #16]
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	613b      	str	r3, [r7, #16]
 80197be:	693b      	ldr	r3, [r7, #16]
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d1ed      	bne.n	80197a0 <ip4_input+0xe8>
 80197c4:	e000      	b.n	80197c8 <ip4_input+0x110>
            break;
 80197c6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80197c8:	4b4b      	ldr	r3, [pc, #300]	@ (80198f8 <ip4_input+0x240>)
 80197ca:	691b      	ldr	r3, [r3, #16]
 80197cc:	6839      	ldr	r1, [r7, #0]
 80197ce:	4618      	mov	r0, r3
 80197d0:	f000 f96e 	bl	8019ab0 <ip4_addr_isbroadcast_u32>
 80197d4:	4603      	mov	r3, r0
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d105      	bne.n	80197e6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80197da:	4b47      	ldr	r3, [pc, #284]	@ (80198f8 <ip4_input+0x240>)
 80197dc:	691b      	ldr	r3, [r3, #16]
 80197de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80197e2:	2be0      	cmp	r3, #224	@ 0xe0
 80197e4:	d104      	bne.n	80197f0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80197e6:	6878      	ldr	r0, [r7, #4]
 80197e8:	f7f8 f848 	bl	801187c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80197ec:	2300      	movs	r3, #0
 80197ee:	e07e      	b.n	80198ee <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80197f0:	693b      	ldr	r3, [r7, #16]
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d104      	bne.n	8019800 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80197f6:	6878      	ldr	r0, [r7, #4]
 80197f8:	f7f8 f840 	bl	801187c <pbuf_free>
    return ERR_OK;
 80197fc:	2300      	movs	r3, #0
 80197fe:	e076      	b.n	80198ee <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019800:	697b      	ldr	r3, [r7, #20]
 8019802:	88db      	ldrh	r3, [r3, #6]
 8019804:	b29b      	uxth	r3, r3
 8019806:	461a      	mov	r2, r3
 8019808:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801980c:	4013      	ands	r3, r2
 801980e:	2b00      	cmp	r3, #0
 8019810:	d00b      	beq.n	801982a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019812:	6878      	ldr	r0, [r7, #4]
 8019814:	f000 fd22 	bl	801a25c <ip4_reass>
 8019818:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	2b00      	cmp	r3, #0
 801981e:	d101      	bne.n	8019824 <ip4_input+0x16c>
      return ERR_OK;
 8019820:	2300      	movs	r3, #0
 8019822:	e064      	b.n	80198ee <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	685b      	ldr	r3, [r3, #4]
 8019828:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801982a:	4a33      	ldr	r2, [pc, #204]	@ (80198f8 <ip4_input+0x240>)
 801982c:	693b      	ldr	r3, [r7, #16]
 801982e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019830:	4a31      	ldr	r2, [pc, #196]	@ (80198f8 <ip4_input+0x240>)
 8019832:	683b      	ldr	r3, [r7, #0]
 8019834:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019836:	4a30      	ldr	r2, [pc, #192]	@ (80198f8 <ip4_input+0x240>)
 8019838:	697b      	ldr	r3, [r7, #20]
 801983a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801983c:	697b      	ldr	r3, [r7, #20]
 801983e:	781b      	ldrb	r3, [r3, #0]
 8019840:	f003 030f 	and.w	r3, r3, #15
 8019844:	b2db      	uxtb	r3, r3
 8019846:	009b      	lsls	r3, r3, #2
 8019848:	b2db      	uxtb	r3, r3
 801984a:	461a      	mov	r2, r3
 801984c:	4b2a      	ldr	r3, [pc, #168]	@ (80198f8 <ip4_input+0x240>)
 801984e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019850:	89fb      	ldrh	r3, [r7, #14]
 8019852:	4619      	mov	r1, r3
 8019854:	6878      	ldr	r0, [r7, #4]
 8019856:	f7f7 ff8b 	bl	8011770 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801985a:	697b      	ldr	r3, [r7, #20]
 801985c:	7a5b      	ldrb	r3, [r3, #9]
 801985e:	2b11      	cmp	r3, #17
 8019860:	d006      	beq.n	8019870 <ip4_input+0x1b8>
 8019862:	2b11      	cmp	r3, #17
 8019864:	dc13      	bgt.n	801988e <ip4_input+0x1d6>
 8019866:	2b01      	cmp	r3, #1
 8019868:	d00c      	beq.n	8019884 <ip4_input+0x1cc>
 801986a:	2b06      	cmp	r3, #6
 801986c:	d005      	beq.n	801987a <ip4_input+0x1c2>
 801986e:	e00e      	b.n	801988e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019870:	6839      	ldr	r1, [r7, #0]
 8019872:	6878      	ldr	r0, [r7, #4]
 8019874:	f7fe fc9a 	bl	80181ac <udp_input>
        break;
 8019878:	e026      	b.n	80198c8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801987a:	6839      	ldr	r1, [r7, #0]
 801987c:	6878      	ldr	r0, [r7, #4]
 801987e:	f7fa f891 	bl	80139a4 <tcp_input>
        break;
 8019882:	e021      	b.n	80198c8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019884:	6839      	ldr	r1, [r7, #0]
 8019886:	6878      	ldr	r0, [r7, #4]
 8019888:	f7ff fcf0 	bl	801926c <icmp_input>
        break;
 801988c:	e01c      	b.n	80198c8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801988e:	4b1a      	ldr	r3, [pc, #104]	@ (80198f8 <ip4_input+0x240>)
 8019890:	695b      	ldr	r3, [r3, #20]
 8019892:	6939      	ldr	r1, [r7, #16]
 8019894:	4618      	mov	r0, r3
 8019896:	f000 f90b 	bl	8019ab0 <ip4_addr_isbroadcast_u32>
 801989a:	4603      	mov	r3, r0
 801989c:	2b00      	cmp	r3, #0
 801989e:	d10f      	bne.n	80198c0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80198a0:	4b15      	ldr	r3, [pc, #84]	@ (80198f8 <ip4_input+0x240>)
 80198a2:	695b      	ldr	r3, [r3, #20]
 80198a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80198a8:	2be0      	cmp	r3, #224	@ 0xe0
 80198aa:	d009      	beq.n	80198c0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80198ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80198b0:	4619      	mov	r1, r3
 80198b2:	6878      	ldr	r0, [r7, #4]
 80198b4:	f7f7 ffcf 	bl	8011856 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80198b8:	2102      	movs	r1, #2
 80198ba:	6878      	ldr	r0, [r7, #4]
 80198bc:	f7ff fdd8 	bl	8019470 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80198c0:	6878      	ldr	r0, [r7, #4]
 80198c2:	f7f7 ffdb 	bl	801187c <pbuf_free>
        break;
 80198c6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80198c8:	4b0b      	ldr	r3, [pc, #44]	@ (80198f8 <ip4_input+0x240>)
 80198ca:	2200      	movs	r2, #0
 80198cc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80198ce:	4b0a      	ldr	r3, [pc, #40]	@ (80198f8 <ip4_input+0x240>)
 80198d0:	2200      	movs	r2, #0
 80198d2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80198d4:	4b08      	ldr	r3, [pc, #32]	@ (80198f8 <ip4_input+0x240>)
 80198d6:	2200      	movs	r2, #0
 80198d8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80198da:	4b07      	ldr	r3, [pc, #28]	@ (80198f8 <ip4_input+0x240>)
 80198dc:	2200      	movs	r2, #0
 80198de:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80198e0:	4b05      	ldr	r3, [pc, #20]	@ (80198f8 <ip4_input+0x240>)
 80198e2:	2200      	movs	r2, #0
 80198e4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80198e6:	4b04      	ldr	r3, [pc, #16]	@ (80198f8 <ip4_input+0x240>)
 80198e8:	2200      	movs	r2, #0
 80198ea:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80198ec:	2300      	movs	r3, #0
}
 80198ee:	4618      	mov	r0, r3
 80198f0:	3718      	adds	r7, #24
 80198f2:	46bd      	mov	sp, r7
 80198f4:	bd80      	pop	{r7, pc}
 80198f6:	bf00      	nop
 80198f8:	2000915c 	.word	0x2000915c
 80198fc:	2000c8a4 	.word	0x2000c8a4

08019900 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019900:	b580      	push	{r7, lr}
 8019902:	b08a      	sub	sp, #40	@ 0x28
 8019904:	af04      	add	r7, sp, #16
 8019906:	60f8      	str	r0, [r7, #12]
 8019908:	60b9      	str	r1, [r7, #8]
 801990a:	607a      	str	r2, [r7, #4]
 801990c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801990e:	68bb      	ldr	r3, [r7, #8]
 8019910:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	2b00      	cmp	r3, #0
 8019916:	d009      	beq.n	801992c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019918:	68bb      	ldr	r3, [r7, #8]
 801991a:	2b00      	cmp	r3, #0
 801991c:	d003      	beq.n	8019926 <ip4_output_if+0x26>
 801991e:	68bb      	ldr	r3, [r7, #8]
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	2b00      	cmp	r3, #0
 8019924:	d102      	bne.n	801992c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019928:	3304      	adds	r3, #4
 801992a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801992c:	78fa      	ldrb	r2, [r7, #3]
 801992e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019930:	9302      	str	r3, [sp, #8]
 8019932:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019936:	9301      	str	r3, [sp, #4]
 8019938:	f897 3020 	ldrb.w	r3, [r7, #32]
 801993c:	9300      	str	r3, [sp, #0]
 801993e:	4613      	mov	r3, r2
 8019940:	687a      	ldr	r2, [r7, #4]
 8019942:	6979      	ldr	r1, [r7, #20]
 8019944:	68f8      	ldr	r0, [r7, #12]
 8019946:	f000 f805 	bl	8019954 <ip4_output_if_src>
 801994a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801994c:	4618      	mov	r0, r3
 801994e:	3718      	adds	r7, #24
 8019950:	46bd      	mov	sp, r7
 8019952:	bd80      	pop	{r7, pc}

08019954 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019954:	b580      	push	{r7, lr}
 8019956:	b088      	sub	sp, #32
 8019958:	af00      	add	r7, sp, #0
 801995a:	60f8      	str	r0, [r7, #12]
 801995c:	60b9      	str	r1, [r7, #8]
 801995e:	607a      	str	r2, [r7, #4]
 8019960:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	7b9b      	ldrb	r3, [r3, #14]
 8019966:	2b01      	cmp	r3, #1
 8019968:	d006      	beq.n	8019978 <ip4_output_if_src+0x24>
 801996a:	4b4b      	ldr	r3, [pc, #300]	@ (8019a98 <ip4_output_if_src+0x144>)
 801996c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8019970:	494a      	ldr	r1, [pc, #296]	@ (8019a9c <ip4_output_if_src+0x148>)
 8019972:	484b      	ldr	r0, [pc, #300]	@ (8019aa0 <ip4_output_if_src+0x14c>)
 8019974:	f001 ffb2 	bl	801b8dc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	2b00      	cmp	r3, #0
 801997c:	d060      	beq.n	8019a40 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801997e:	2314      	movs	r3, #20
 8019980:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019982:	2114      	movs	r1, #20
 8019984:	68f8      	ldr	r0, [r7, #12]
 8019986:	f7f7 fee3 	bl	8011750 <pbuf_add_header>
 801998a:	4603      	mov	r3, r0
 801998c:	2b00      	cmp	r3, #0
 801998e:	d002      	beq.n	8019996 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019990:	f06f 0301 	mvn.w	r3, #1
 8019994:	e07c      	b.n	8019a90 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	685b      	ldr	r3, [r3, #4]
 801999a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801999c:	68fb      	ldr	r3, [r7, #12]
 801999e:	895b      	ldrh	r3, [r3, #10]
 80199a0:	2b13      	cmp	r3, #19
 80199a2:	d806      	bhi.n	80199b2 <ip4_output_if_src+0x5e>
 80199a4:	4b3c      	ldr	r3, [pc, #240]	@ (8019a98 <ip4_output_if_src+0x144>)
 80199a6:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80199aa:	493e      	ldr	r1, [pc, #248]	@ (8019aa4 <ip4_output_if_src+0x150>)
 80199ac:	483c      	ldr	r0, [pc, #240]	@ (8019aa0 <ip4_output_if_src+0x14c>)
 80199ae:	f001 ff95 	bl	801b8dc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80199b2:	69fb      	ldr	r3, [r7, #28]
 80199b4:	78fa      	ldrb	r2, [r7, #3]
 80199b6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80199b8:	69fb      	ldr	r3, [r7, #28]
 80199ba:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80199be:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	681a      	ldr	r2, [r3, #0]
 80199c4:	69fb      	ldr	r3, [r7, #28]
 80199c6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80199c8:	8b7b      	ldrh	r3, [r7, #26]
 80199ca:	089b      	lsrs	r3, r3, #2
 80199cc:	b29b      	uxth	r3, r3
 80199ce:	b2db      	uxtb	r3, r3
 80199d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80199d4:	b2da      	uxtb	r2, r3
 80199d6:	69fb      	ldr	r3, [r7, #28]
 80199d8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80199da:	69fb      	ldr	r3, [r7, #28]
 80199dc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80199e0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80199e2:	68fb      	ldr	r3, [r7, #12]
 80199e4:	891b      	ldrh	r3, [r3, #8]
 80199e6:	4618      	mov	r0, r3
 80199e8:	f7f6 fb88 	bl	80100fc <lwip_htons>
 80199ec:	4603      	mov	r3, r0
 80199ee:	461a      	mov	r2, r3
 80199f0:	69fb      	ldr	r3, [r7, #28]
 80199f2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80199f4:	69fb      	ldr	r3, [r7, #28]
 80199f6:	2200      	movs	r2, #0
 80199f8:	719a      	strb	r2, [r3, #6]
 80199fa:	2200      	movs	r2, #0
 80199fc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80199fe:	4b2a      	ldr	r3, [pc, #168]	@ (8019aa8 <ip4_output_if_src+0x154>)
 8019a00:	881b      	ldrh	r3, [r3, #0]
 8019a02:	4618      	mov	r0, r3
 8019a04:	f7f6 fb7a 	bl	80100fc <lwip_htons>
 8019a08:	4603      	mov	r3, r0
 8019a0a:	461a      	mov	r2, r3
 8019a0c:	69fb      	ldr	r3, [r7, #28]
 8019a0e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019a10:	4b25      	ldr	r3, [pc, #148]	@ (8019aa8 <ip4_output_if_src+0x154>)
 8019a12:	881b      	ldrh	r3, [r3, #0]
 8019a14:	3301      	adds	r3, #1
 8019a16:	b29a      	uxth	r2, r3
 8019a18:	4b23      	ldr	r3, [pc, #140]	@ (8019aa8 <ip4_output_if_src+0x154>)
 8019a1a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019a1c:	68bb      	ldr	r3, [r7, #8]
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d104      	bne.n	8019a2c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019a22:	4b22      	ldr	r3, [pc, #136]	@ (8019aac <ip4_output_if_src+0x158>)
 8019a24:	681a      	ldr	r2, [r3, #0]
 8019a26:	69fb      	ldr	r3, [r7, #28]
 8019a28:	60da      	str	r2, [r3, #12]
 8019a2a:	e003      	b.n	8019a34 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019a2c:	68bb      	ldr	r3, [r7, #8]
 8019a2e:	681a      	ldr	r2, [r3, #0]
 8019a30:	69fb      	ldr	r3, [r7, #28]
 8019a32:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019a34:	69fb      	ldr	r3, [r7, #28]
 8019a36:	2200      	movs	r2, #0
 8019a38:	729a      	strb	r2, [r3, #10]
 8019a3a:	2200      	movs	r2, #0
 8019a3c:	72da      	strb	r2, [r3, #11]
 8019a3e:	e00f      	b.n	8019a60 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019a40:	68fb      	ldr	r3, [r7, #12]
 8019a42:	895b      	ldrh	r3, [r3, #10]
 8019a44:	2b13      	cmp	r3, #19
 8019a46:	d802      	bhi.n	8019a4e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019a48:	f06f 0301 	mvn.w	r3, #1
 8019a4c:	e020      	b.n	8019a90 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	685b      	ldr	r3, [r3, #4]
 8019a52:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019a54:	69fb      	ldr	r3, [r7, #28]
 8019a56:	691b      	ldr	r3, [r3, #16]
 8019a58:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019a5a:	f107 0314 	add.w	r3, r7, #20
 8019a5e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a62:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	d00c      	beq.n	8019a82 <ip4_output_if_src+0x12e>
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	891a      	ldrh	r2, [r3, #8]
 8019a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a6e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8019a70:	429a      	cmp	r2, r3
 8019a72:	d906      	bls.n	8019a82 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019a74:	687a      	ldr	r2, [r7, #4]
 8019a76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019a78:	68f8      	ldr	r0, [r7, #12]
 8019a7a:	f000 fde3 	bl	801a644 <ip4_frag>
 8019a7e:	4603      	mov	r3, r0
 8019a80:	e006      	b.n	8019a90 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a84:	695b      	ldr	r3, [r3, #20]
 8019a86:	687a      	ldr	r2, [r7, #4]
 8019a88:	68f9      	ldr	r1, [r7, #12]
 8019a8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019a8c:	4798      	blx	r3
 8019a8e:	4603      	mov	r3, r0
}
 8019a90:	4618      	mov	r0, r3
 8019a92:	3720      	adds	r7, #32
 8019a94:	46bd      	mov	sp, r7
 8019a96:	bd80      	pop	{r7, pc}
 8019a98:	08020ab4 	.word	0x08020ab4
 8019a9c:	08020ae8 	.word	0x08020ae8
 8019aa0:	08020af4 	.word	0x08020af4
 8019aa4:	08020b1c 	.word	0x08020b1c
 8019aa8:	2000ca02 	.word	0x2000ca02
 8019aac:	08020f84 	.word	0x08020f84

08019ab0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019ab0:	b480      	push	{r7}
 8019ab2:	b085      	sub	sp, #20
 8019ab4:	af00      	add	r7, sp, #0
 8019ab6:	6078      	str	r0, [r7, #4]
 8019ab8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ac4:	d002      	beq.n	8019acc <ip4_addr_isbroadcast_u32+0x1c>
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	d101      	bne.n	8019ad0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019acc:	2301      	movs	r3, #1
 8019ace:	e02a      	b.n	8019b26 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019ad0:	683b      	ldr	r3, [r7, #0]
 8019ad2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019ad6:	f003 0302 	and.w	r3, r3, #2
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	d101      	bne.n	8019ae2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019ade:	2300      	movs	r3, #0
 8019ae0:	e021      	b.n	8019b26 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019ae2:	683b      	ldr	r3, [r7, #0]
 8019ae4:	3304      	adds	r3, #4
 8019ae6:	681b      	ldr	r3, [r3, #0]
 8019ae8:	687a      	ldr	r2, [r7, #4]
 8019aea:	429a      	cmp	r2, r3
 8019aec:	d101      	bne.n	8019af2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019aee:	2300      	movs	r3, #0
 8019af0:	e019      	b.n	8019b26 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019af2:	68fa      	ldr	r2, [r7, #12]
 8019af4:	683b      	ldr	r3, [r7, #0]
 8019af6:	3304      	adds	r3, #4
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	405a      	eors	r2, r3
 8019afc:	683b      	ldr	r3, [r7, #0]
 8019afe:	3308      	adds	r3, #8
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	4013      	ands	r3, r2
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d10d      	bne.n	8019b24 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019b08:	683b      	ldr	r3, [r7, #0]
 8019b0a:	3308      	adds	r3, #8
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	43da      	mvns	r2, r3
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019b14:	683b      	ldr	r3, [r7, #0]
 8019b16:	3308      	adds	r3, #8
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019b1c:	429a      	cmp	r2, r3
 8019b1e:	d101      	bne.n	8019b24 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019b20:	2301      	movs	r3, #1
 8019b22:	e000      	b.n	8019b26 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019b24:	2300      	movs	r3, #0
  }
}
 8019b26:	4618      	mov	r0, r3
 8019b28:	3714      	adds	r7, #20
 8019b2a:	46bd      	mov	sp, r7
 8019b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b30:	4770      	bx	lr
	...

08019b34 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8019b34:	b580      	push	{r7, lr}
 8019b36:	b082      	sub	sp, #8
 8019b38:	af00      	add	r7, sp, #0
 8019b3a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8019b3c:	2210      	movs	r2, #16
 8019b3e:	4904      	ldr	r1, [pc, #16]	@ (8019b50 <ip4addr_ntoa+0x1c>)
 8019b40:	6878      	ldr	r0, [r7, #4]
 8019b42:	f000 f807 	bl	8019b54 <ip4addr_ntoa_r>
 8019b46:	4603      	mov	r3, r0
}
 8019b48:	4618      	mov	r0, r3
 8019b4a:	3708      	adds	r7, #8
 8019b4c:	46bd      	mov	sp, r7
 8019b4e:	bd80      	pop	{r7, pc}
 8019b50:	2000ca04 	.word	0x2000ca04

08019b54 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8019b54:	b480      	push	{r7}
 8019b56:	b08d      	sub	sp, #52	@ 0x34
 8019b58:	af00      	add	r7, sp, #0
 8019b5a:	60f8      	str	r0, [r7, #12]
 8019b5c:	60b9      	str	r1, [r7, #8]
 8019b5e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8019b60:	2300      	movs	r3, #0
 8019b62:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	681b      	ldr	r3, [r3, #0]
 8019b68:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8019b6a:	68bb      	ldr	r3, [r7, #8]
 8019b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 8019b6e:	f107 0318 	add.w	r3, r7, #24
 8019b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8019b74:	2300      	movs	r3, #0
 8019b76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019b7a:	e058      	b.n	8019c2e <ip4addr_ntoa_r+0xda>
    i = 0;
 8019b7c:	2300      	movs	r3, #0
 8019b7e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 8019b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b84:	781a      	ldrb	r2, [r3, #0]
 8019b86:	4b32      	ldr	r3, [pc, #200]	@ (8019c50 <ip4addr_ntoa_r+0xfc>)
 8019b88:	fba3 1302 	umull	r1, r3, r3, r2
 8019b8c:	08d9      	lsrs	r1, r3, #3
 8019b8e:	460b      	mov	r3, r1
 8019b90:	009b      	lsls	r3, r3, #2
 8019b92:	440b      	add	r3, r1
 8019b94:	005b      	lsls	r3, r3, #1
 8019b96:	1ad3      	subs	r3, r2, r3
 8019b98:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8019b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b9c:	781b      	ldrb	r3, [r3, #0]
 8019b9e:	4a2c      	ldr	r2, [pc, #176]	@ (8019c50 <ip4addr_ntoa_r+0xfc>)
 8019ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8019ba4:	08db      	lsrs	r3, r3, #3
 8019ba6:	b2da      	uxtb	r2, r3
 8019ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019baa:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8019bac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019bb0:	1c5a      	adds	r2, r3, #1
 8019bb2:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8019bb6:	4619      	mov	r1, r3
 8019bb8:	7ffb      	ldrb	r3, [r7, #31]
 8019bba:	3330      	adds	r3, #48	@ 0x30
 8019bbc:	b2da      	uxtb	r2, r3
 8019bbe:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8019bc2:	443b      	add	r3, r7
 8019bc4:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8019bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019bca:	781b      	ldrb	r3, [r3, #0]
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d1d8      	bne.n	8019b82 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8019bd0:	e011      	b.n	8019bf6 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8019bd2:	6a3b      	ldr	r3, [r7, #32]
 8019bd4:	1c5a      	adds	r2, r3, #1
 8019bd6:	623a      	str	r2, [r7, #32]
 8019bd8:	687a      	ldr	r2, [r7, #4]
 8019bda:	429a      	cmp	r2, r3
 8019bdc:	dc01      	bgt.n	8019be2 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8019bde:	2300      	movs	r3, #0
 8019be0:	e030      	b.n	8019c44 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8019be2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8019be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019be8:	1c59      	adds	r1, r3, #1
 8019bea:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8019bec:	3230      	adds	r2, #48	@ 0x30
 8019bee:	443a      	add	r2, r7
 8019bf0:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8019bf4:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8019bf6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019bfa:	1e5a      	subs	r2, r3, #1
 8019bfc:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d1e6      	bne.n	8019bd2 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8019c04:	6a3b      	ldr	r3, [r7, #32]
 8019c06:	1c5a      	adds	r2, r3, #1
 8019c08:	623a      	str	r2, [r7, #32]
 8019c0a:	687a      	ldr	r2, [r7, #4]
 8019c0c:	429a      	cmp	r2, r3
 8019c0e:	dc01      	bgt.n	8019c14 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8019c10:	2300      	movs	r3, #0
 8019c12:	e017      	b.n	8019c44 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8019c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c16:	1c5a      	adds	r2, r3, #1
 8019c18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019c1a:	222e      	movs	r2, #46	@ 0x2e
 8019c1c:	701a      	strb	r2, [r3, #0]
    ap++;
 8019c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c20:	3301      	adds	r3, #1
 8019c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8019c24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019c28:	3301      	adds	r3, #1
 8019c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019c2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019c32:	2b03      	cmp	r3, #3
 8019c34:	d9a2      	bls.n	8019b7c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8019c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c38:	3b01      	subs	r3, #1
 8019c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c3e:	2200      	movs	r2, #0
 8019c40:	701a      	strb	r2, [r3, #0]
  return buf;
 8019c42:	68bb      	ldr	r3, [r7, #8]
}
 8019c44:	4618      	mov	r0, r3
 8019c46:	3734      	adds	r7, #52	@ 0x34
 8019c48:	46bd      	mov	sp, r7
 8019c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c4e:	4770      	bx	lr
 8019c50:	cccccccd 	.word	0xcccccccd

08019c54 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019c54:	b580      	push	{r7, lr}
 8019c56:	b084      	sub	sp, #16
 8019c58:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019c5a:	2300      	movs	r3, #0
 8019c5c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019c5e:	4b12      	ldr	r3, [pc, #72]	@ (8019ca8 <ip_reass_tmr+0x54>)
 8019c60:	681b      	ldr	r3, [r3, #0]
 8019c62:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019c64:	e018      	b.n	8019c98 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019c66:	68fb      	ldr	r3, [r7, #12]
 8019c68:	7fdb      	ldrb	r3, [r3, #31]
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	d00b      	beq.n	8019c86 <ip_reass_tmr+0x32>
      r->timer--;
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	7fdb      	ldrb	r3, [r3, #31]
 8019c72:	3b01      	subs	r3, #1
 8019c74:	b2da      	uxtb	r2, r3
 8019c76:	68fb      	ldr	r3, [r7, #12]
 8019c78:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019c7a:	68fb      	ldr	r3, [r7, #12]
 8019c7c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	681b      	ldr	r3, [r3, #0]
 8019c82:	60fb      	str	r3, [r7, #12]
 8019c84:	e008      	b.n	8019c98 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019c8a:	68fb      	ldr	r3, [r7, #12]
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019c90:	68b9      	ldr	r1, [r7, #8]
 8019c92:	6878      	ldr	r0, [r7, #4]
 8019c94:	f000 f80a 	bl	8019cac <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019c98:	68fb      	ldr	r3, [r7, #12]
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d1e3      	bne.n	8019c66 <ip_reass_tmr+0x12>
    }
  }
}
 8019c9e:	bf00      	nop
 8019ca0:	bf00      	nop
 8019ca2:	3710      	adds	r7, #16
 8019ca4:	46bd      	mov	sp, r7
 8019ca6:	bd80      	pop	{r7, pc}
 8019ca8:	2000ca14 	.word	0x2000ca14

08019cac <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019cac:	b580      	push	{r7, lr}
 8019cae:	b088      	sub	sp, #32
 8019cb0:	af00      	add	r7, sp, #0
 8019cb2:	6078      	str	r0, [r7, #4]
 8019cb4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019cb6:	2300      	movs	r3, #0
 8019cb8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019cba:	683a      	ldr	r2, [r7, #0]
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	429a      	cmp	r2, r3
 8019cc0:	d105      	bne.n	8019cce <ip_reass_free_complete_datagram+0x22>
 8019cc2:	4b45      	ldr	r3, [pc, #276]	@ (8019dd8 <ip_reass_free_complete_datagram+0x12c>)
 8019cc4:	22ab      	movs	r2, #171	@ 0xab
 8019cc6:	4945      	ldr	r1, [pc, #276]	@ (8019ddc <ip_reass_free_complete_datagram+0x130>)
 8019cc8:	4845      	ldr	r0, [pc, #276]	@ (8019de0 <ip_reass_free_complete_datagram+0x134>)
 8019cca:	f001 fe07 	bl	801b8dc <iprintf>
  if (prev != NULL) {
 8019cce:	683b      	ldr	r3, [r7, #0]
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d00a      	beq.n	8019cea <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019cd4:	683b      	ldr	r3, [r7, #0]
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	687a      	ldr	r2, [r7, #4]
 8019cda:	429a      	cmp	r2, r3
 8019cdc:	d005      	beq.n	8019cea <ip_reass_free_complete_datagram+0x3e>
 8019cde:	4b3e      	ldr	r3, [pc, #248]	@ (8019dd8 <ip_reass_free_complete_datagram+0x12c>)
 8019ce0:	22ad      	movs	r2, #173	@ 0xad
 8019ce2:	4940      	ldr	r1, [pc, #256]	@ (8019de4 <ip_reass_free_complete_datagram+0x138>)
 8019ce4:	483e      	ldr	r0, [pc, #248]	@ (8019de0 <ip_reass_free_complete_datagram+0x134>)
 8019ce6:	f001 fdf9 	bl	801b8dc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	685b      	ldr	r3, [r3, #4]
 8019cee:	685b      	ldr	r3, [r3, #4]
 8019cf0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019cf2:	697b      	ldr	r3, [r7, #20]
 8019cf4:	889b      	ldrh	r3, [r3, #4]
 8019cf6:	b29b      	uxth	r3, r3
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d12a      	bne.n	8019d52 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	685b      	ldr	r3, [r3, #4]
 8019d00:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019d02:	697b      	ldr	r3, [r7, #20]
 8019d04:	681a      	ldr	r2, [r3, #0]
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019d0a:	69bb      	ldr	r3, [r7, #24]
 8019d0c:	6858      	ldr	r0, [r3, #4]
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	3308      	adds	r3, #8
 8019d12:	2214      	movs	r2, #20
 8019d14:	4619      	mov	r1, r3
 8019d16:	f001 ff80 	bl	801bc1a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019d1a:	2101      	movs	r1, #1
 8019d1c:	69b8      	ldr	r0, [r7, #24]
 8019d1e:	f7ff fbb7 	bl	8019490 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019d22:	69b8      	ldr	r0, [r7, #24]
 8019d24:	f7f7 fe38 	bl	8011998 <pbuf_clen>
 8019d28:	4603      	mov	r3, r0
 8019d2a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019d2c:	8bfa      	ldrh	r2, [r7, #30]
 8019d2e:	8a7b      	ldrh	r3, [r7, #18]
 8019d30:	4413      	add	r3, r2
 8019d32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019d36:	db05      	blt.n	8019d44 <ip_reass_free_complete_datagram+0x98>
 8019d38:	4b27      	ldr	r3, [pc, #156]	@ (8019dd8 <ip_reass_free_complete_datagram+0x12c>)
 8019d3a:	22bc      	movs	r2, #188	@ 0xbc
 8019d3c:	492a      	ldr	r1, [pc, #168]	@ (8019de8 <ip_reass_free_complete_datagram+0x13c>)
 8019d3e:	4828      	ldr	r0, [pc, #160]	@ (8019de0 <ip_reass_free_complete_datagram+0x134>)
 8019d40:	f001 fdcc 	bl	801b8dc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019d44:	8bfa      	ldrh	r2, [r7, #30]
 8019d46:	8a7b      	ldrh	r3, [r7, #18]
 8019d48:	4413      	add	r3, r2
 8019d4a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019d4c:	69b8      	ldr	r0, [r7, #24]
 8019d4e:	f7f7 fd95 	bl	801187c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	685b      	ldr	r3, [r3, #4]
 8019d56:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019d58:	e01f      	b.n	8019d9a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019d5a:	69bb      	ldr	r3, [r7, #24]
 8019d5c:	685b      	ldr	r3, [r3, #4]
 8019d5e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019d60:	69bb      	ldr	r3, [r7, #24]
 8019d62:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019d64:	697b      	ldr	r3, [r7, #20]
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019d6a:	68f8      	ldr	r0, [r7, #12]
 8019d6c:	f7f7 fe14 	bl	8011998 <pbuf_clen>
 8019d70:	4603      	mov	r3, r0
 8019d72:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019d74:	8bfa      	ldrh	r2, [r7, #30]
 8019d76:	8a7b      	ldrh	r3, [r7, #18]
 8019d78:	4413      	add	r3, r2
 8019d7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019d7e:	db05      	blt.n	8019d8c <ip_reass_free_complete_datagram+0xe0>
 8019d80:	4b15      	ldr	r3, [pc, #84]	@ (8019dd8 <ip_reass_free_complete_datagram+0x12c>)
 8019d82:	22cc      	movs	r2, #204	@ 0xcc
 8019d84:	4918      	ldr	r1, [pc, #96]	@ (8019de8 <ip_reass_free_complete_datagram+0x13c>)
 8019d86:	4816      	ldr	r0, [pc, #88]	@ (8019de0 <ip_reass_free_complete_datagram+0x134>)
 8019d88:	f001 fda8 	bl	801b8dc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019d8c:	8bfa      	ldrh	r2, [r7, #30]
 8019d8e:	8a7b      	ldrh	r3, [r7, #18]
 8019d90:	4413      	add	r3, r2
 8019d92:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019d94:	68f8      	ldr	r0, [r7, #12]
 8019d96:	f7f7 fd71 	bl	801187c <pbuf_free>
  while (p != NULL) {
 8019d9a:	69bb      	ldr	r3, [r7, #24]
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d1dc      	bne.n	8019d5a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019da0:	6839      	ldr	r1, [r7, #0]
 8019da2:	6878      	ldr	r0, [r7, #4]
 8019da4:	f000 f8c2 	bl	8019f2c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019da8:	4b10      	ldr	r3, [pc, #64]	@ (8019dec <ip_reass_free_complete_datagram+0x140>)
 8019daa:	881b      	ldrh	r3, [r3, #0]
 8019dac:	8bfa      	ldrh	r2, [r7, #30]
 8019dae:	429a      	cmp	r2, r3
 8019db0:	d905      	bls.n	8019dbe <ip_reass_free_complete_datagram+0x112>
 8019db2:	4b09      	ldr	r3, [pc, #36]	@ (8019dd8 <ip_reass_free_complete_datagram+0x12c>)
 8019db4:	22d2      	movs	r2, #210	@ 0xd2
 8019db6:	490e      	ldr	r1, [pc, #56]	@ (8019df0 <ip_reass_free_complete_datagram+0x144>)
 8019db8:	4809      	ldr	r0, [pc, #36]	@ (8019de0 <ip_reass_free_complete_datagram+0x134>)
 8019dba:	f001 fd8f 	bl	801b8dc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8019dec <ip_reass_free_complete_datagram+0x140>)
 8019dc0:	881a      	ldrh	r2, [r3, #0]
 8019dc2:	8bfb      	ldrh	r3, [r7, #30]
 8019dc4:	1ad3      	subs	r3, r2, r3
 8019dc6:	b29a      	uxth	r2, r3
 8019dc8:	4b08      	ldr	r3, [pc, #32]	@ (8019dec <ip_reass_free_complete_datagram+0x140>)
 8019dca:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019dcc:	8bfb      	ldrh	r3, [r7, #30]
}
 8019dce:	4618      	mov	r0, r3
 8019dd0:	3720      	adds	r7, #32
 8019dd2:	46bd      	mov	sp, r7
 8019dd4:	bd80      	pop	{r7, pc}
 8019dd6:	bf00      	nop
 8019dd8:	08020b4c 	.word	0x08020b4c
 8019ddc:	08020b88 	.word	0x08020b88
 8019de0:	08020b94 	.word	0x08020b94
 8019de4:	08020bbc 	.word	0x08020bbc
 8019de8:	08020bd0 	.word	0x08020bd0
 8019dec:	2000ca18 	.word	0x2000ca18
 8019df0:	08020bf0 	.word	0x08020bf0

08019df4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019df4:	b580      	push	{r7, lr}
 8019df6:	b08a      	sub	sp, #40	@ 0x28
 8019df8:	af00      	add	r7, sp, #0
 8019dfa:	6078      	str	r0, [r7, #4]
 8019dfc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019dfe:	2300      	movs	r3, #0
 8019e00:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019e02:	2300      	movs	r3, #0
 8019e04:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019e06:	2300      	movs	r3, #0
 8019e08:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019e0a:	2300      	movs	r3, #0
 8019e0c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019e0e:	2300      	movs	r3, #0
 8019e10:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019e12:	4b28      	ldr	r3, [pc, #160]	@ (8019eb4 <ip_reass_remove_oldest_datagram+0xc0>)
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8019e18:	e030      	b.n	8019e7c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e1c:	695a      	ldr	r2, [r3, #20]
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	68db      	ldr	r3, [r3, #12]
 8019e22:	429a      	cmp	r2, r3
 8019e24:	d10c      	bne.n	8019e40 <ip_reass_remove_oldest_datagram+0x4c>
 8019e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e28:	699a      	ldr	r2, [r3, #24]
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	691b      	ldr	r3, [r3, #16]
 8019e2e:	429a      	cmp	r2, r3
 8019e30:	d106      	bne.n	8019e40 <ip_reass_remove_oldest_datagram+0x4c>
 8019e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e34:	899a      	ldrh	r2, [r3, #12]
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	889b      	ldrh	r3, [r3, #4]
 8019e3a:	b29b      	uxth	r3, r3
 8019e3c:	429a      	cmp	r2, r3
 8019e3e:	d014      	beq.n	8019e6a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019e40:	693b      	ldr	r3, [r7, #16]
 8019e42:	3301      	adds	r3, #1
 8019e44:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019e46:	6a3b      	ldr	r3, [r7, #32]
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d104      	bne.n	8019e56 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e4e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019e50:	69fb      	ldr	r3, [r7, #28]
 8019e52:	61bb      	str	r3, [r7, #24]
 8019e54:	e009      	b.n	8019e6a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e58:	7fda      	ldrb	r2, [r3, #31]
 8019e5a:	6a3b      	ldr	r3, [r7, #32]
 8019e5c:	7fdb      	ldrb	r3, [r3, #31]
 8019e5e:	429a      	cmp	r2, r3
 8019e60:	d803      	bhi.n	8019e6a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e64:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019e66:	69fb      	ldr	r3, [r7, #28]
 8019e68:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d001      	beq.n	8019e76 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e74:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8019e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d1cb      	bne.n	8019e1a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019e82:	6a3b      	ldr	r3, [r7, #32]
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d008      	beq.n	8019e9a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019e88:	69b9      	ldr	r1, [r7, #24]
 8019e8a:	6a38      	ldr	r0, [r7, #32]
 8019e8c:	f7ff ff0e 	bl	8019cac <ip_reass_free_complete_datagram>
 8019e90:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019e92:	697a      	ldr	r2, [r7, #20]
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	4413      	add	r3, r2
 8019e98:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019e9a:	697a      	ldr	r2, [r7, #20]
 8019e9c:	683b      	ldr	r3, [r7, #0]
 8019e9e:	429a      	cmp	r2, r3
 8019ea0:	da02      	bge.n	8019ea8 <ip_reass_remove_oldest_datagram+0xb4>
 8019ea2:	693b      	ldr	r3, [r7, #16]
 8019ea4:	2b01      	cmp	r3, #1
 8019ea6:	dcac      	bgt.n	8019e02 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019ea8:	697b      	ldr	r3, [r7, #20]
}
 8019eaa:	4618      	mov	r0, r3
 8019eac:	3728      	adds	r7, #40	@ 0x28
 8019eae:	46bd      	mov	sp, r7
 8019eb0:	bd80      	pop	{r7, pc}
 8019eb2:	bf00      	nop
 8019eb4:	2000ca14 	.word	0x2000ca14

08019eb8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019eb8:	b580      	push	{r7, lr}
 8019eba:	b084      	sub	sp, #16
 8019ebc:	af00      	add	r7, sp, #0
 8019ebe:	6078      	str	r0, [r7, #4]
 8019ec0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019ec2:	2004      	movs	r0, #4
 8019ec4:	f7f6 fdf2 	bl	8010aac <memp_malloc>
 8019ec8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019eca:	68fb      	ldr	r3, [r7, #12]
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d110      	bne.n	8019ef2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019ed0:	6839      	ldr	r1, [r7, #0]
 8019ed2:	6878      	ldr	r0, [r7, #4]
 8019ed4:	f7ff ff8e 	bl	8019df4 <ip_reass_remove_oldest_datagram>
 8019ed8:	4602      	mov	r2, r0
 8019eda:	683b      	ldr	r3, [r7, #0]
 8019edc:	4293      	cmp	r3, r2
 8019ede:	dc03      	bgt.n	8019ee8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019ee0:	2004      	movs	r0, #4
 8019ee2:	f7f6 fde3 	bl	8010aac <memp_malloc>
 8019ee6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019ee8:	68fb      	ldr	r3, [r7, #12]
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d101      	bne.n	8019ef2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019eee:	2300      	movs	r3, #0
 8019ef0:	e016      	b.n	8019f20 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019ef2:	2220      	movs	r2, #32
 8019ef4:	2100      	movs	r1, #0
 8019ef6:	68f8      	ldr	r0, [r7, #12]
 8019ef8:	f001 fda5 	bl	801ba46 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019efc:	68fb      	ldr	r3, [r7, #12]
 8019efe:	220f      	movs	r2, #15
 8019f00:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019f02:	4b09      	ldr	r3, [pc, #36]	@ (8019f28 <ip_reass_enqueue_new_datagram+0x70>)
 8019f04:	681a      	ldr	r2, [r3, #0]
 8019f06:	68fb      	ldr	r3, [r7, #12]
 8019f08:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019f0a:	4a07      	ldr	r2, [pc, #28]	@ (8019f28 <ip_reass_enqueue_new_datagram+0x70>)
 8019f0c:	68fb      	ldr	r3, [r7, #12]
 8019f0e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	3308      	adds	r3, #8
 8019f14:	2214      	movs	r2, #20
 8019f16:	6879      	ldr	r1, [r7, #4]
 8019f18:	4618      	mov	r0, r3
 8019f1a:	f001 fe7e 	bl	801bc1a <memcpy>
  return ipr;
 8019f1e:	68fb      	ldr	r3, [r7, #12]
}
 8019f20:	4618      	mov	r0, r3
 8019f22:	3710      	adds	r7, #16
 8019f24:	46bd      	mov	sp, r7
 8019f26:	bd80      	pop	{r7, pc}
 8019f28:	2000ca14 	.word	0x2000ca14

08019f2c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019f2c:	b580      	push	{r7, lr}
 8019f2e:	b082      	sub	sp, #8
 8019f30:	af00      	add	r7, sp, #0
 8019f32:	6078      	str	r0, [r7, #4]
 8019f34:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019f36:	4b10      	ldr	r3, [pc, #64]	@ (8019f78 <ip_reass_dequeue_datagram+0x4c>)
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	687a      	ldr	r2, [r7, #4]
 8019f3c:	429a      	cmp	r2, r3
 8019f3e:	d104      	bne.n	8019f4a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	4a0c      	ldr	r2, [pc, #48]	@ (8019f78 <ip_reass_dequeue_datagram+0x4c>)
 8019f46:	6013      	str	r3, [r2, #0]
 8019f48:	e00d      	b.n	8019f66 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019f4a:	683b      	ldr	r3, [r7, #0]
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d106      	bne.n	8019f5e <ip_reass_dequeue_datagram+0x32>
 8019f50:	4b0a      	ldr	r3, [pc, #40]	@ (8019f7c <ip_reass_dequeue_datagram+0x50>)
 8019f52:	f240 1245 	movw	r2, #325	@ 0x145
 8019f56:	490a      	ldr	r1, [pc, #40]	@ (8019f80 <ip_reass_dequeue_datagram+0x54>)
 8019f58:	480a      	ldr	r0, [pc, #40]	@ (8019f84 <ip_reass_dequeue_datagram+0x58>)
 8019f5a:	f001 fcbf 	bl	801b8dc <iprintf>
    prev->next = ipr->next;
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	681a      	ldr	r2, [r3, #0]
 8019f62:	683b      	ldr	r3, [r7, #0]
 8019f64:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019f66:	6879      	ldr	r1, [r7, #4]
 8019f68:	2004      	movs	r0, #4
 8019f6a:	f7f6 fe15 	bl	8010b98 <memp_free>
}
 8019f6e:	bf00      	nop
 8019f70:	3708      	adds	r7, #8
 8019f72:	46bd      	mov	sp, r7
 8019f74:	bd80      	pop	{r7, pc}
 8019f76:	bf00      	nop
 8019f78:	2000ca14 	.word	0x2000ca14
 8019f7c:	08020b4c 	.word	0x08020b4c
 8019f80:	08020c14 	.word	0x08020c14
 8019f84:	08020b94 	.word	0x08020b94

08019f88 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	b08c      	sub	sp, #48	@ 0x30
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	60f8      	str	r0, [r7, #12]
 8019f90:	60b9      	str	r1, [r7, #8]
 8019f92:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019f94:	2300      	movs	r3, #0
 8019f96:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019f98:	2301      	movs	r3, #1
 8019f9a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019f9c:	68bb      	ldr	r3, [r7, #8]
 8019f9e:	685b      	ldr	r3, [r3, #4]
 8019fa0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019fa2:	69fb      	ldr	r3, [r7, #28]
 8019fa4:	885b      	ldrh	r3, [r3, #2]
 8019fa6:	b29b      	uxth	r3, r3
 8019fa8:	4618      	mov	r0, r3
 8019faa:	f7f6 f8a7 	bl	80100fc <lwip_htons>
 8019fae:	4603      	mov	r3, r0
 8019fb0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019fb2:	69fb      	ldr	r3, [r7, #28]
 8019fb4:	781b      	ldrb	r3, [r3, #0]
 8019fb6:	f003 030f 	and.w	r3, r3, #15
 8019fba:	b2db      	uxtb	r3, r3
 8019fbc:	009b      	lsls	r3, r3, #2
 8019fbe:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019fc0:	7e7b      	ldrb	r3, [r7, #25]
 8019fc2:	b29b      	uxth	r3, r3
 8019fc4:	8b7a      	ldrh	r2, [r7, #26]
 8019fc6:	429a      	cmp	r2, r3
 8019fc8:	d202      	bcs.n	8019fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019fca:	f04f 33ff 	mov.w	r3, #4294967295
 8019fce:	e135      	b.n	801a23c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019fd0:	7e7b      	ldrb	r3, [r7, #25]
 8019fd2:	b29b      	uxth	r3, r3
 8019fd4:	8b7a      	ldrh	r2, [r7, #26]
 8019fd6:	1ad3      	subs	r3, r2, r3
 8019fd8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019fda:	69fb      	ldr	r3, [r7, #28]
 8019fdc:	88db      	ldrh	r3, [r3, #6]
 8019fde:	b29b      	uxth	r3, r3
 8019fe0:	4618      	mov	r0, r3
 8019fe2:	f7f6 f88b 	bl	80100fc <lwip_htons>
 8019fe6:	4603      	mov	r3, r0
 8019fe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019fec:	b29b      	uxth	r3, r3
 8019fee:	00db      	lsls	r3, r3, #3
 8019ff0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019ff2:	68bb      	ldr	r3, [r7, #8]
 8019ff4:	685b      	ldr	r3, [r3, #4]
 8019ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8019ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ffa:	2200      	movs	r2, #0
 8019ffc:	701a      	strb	r2, [r3, #0]
 8019ffe:	2200      	movs	r2, #0
 801a000:	705a      	strb	r2, [r3, #1]
 801a002:	2200      	movs	r2, #0
 801a004:	709a      	strb	r2, [r3, #2]
 801a006:	2200      	movs	r2, #0
 801a008:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a00a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a00c:	8afa      	ldrh	r2, [r7, #22]
 801a00e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a010:	8afa      	ldrh	r2, [r7, #22]
 801a012:	8b7b      	ldrh	r3, [r7, #26]
 801a014:	4413      	add	r3, r2
 801a016:	b29a      	uxth	r2, r3
 801a018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a01a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a01e:	88db      	ldrh	r3, [r3, #6]
 801a020:	b29b      	uxth	r3, r3
 801a022:	8afa      	ldrh	r2, [r7, #22]
 801a024:	429a      	cmp	r2, r3
 801a026:	d902      	bls.n	801a02e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a028:	f04f 33ff 	mov.w	r3, #4294967295
 801a02c:	e106      	b.n	801a23c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	685b      	ldr	r3, [r3, #4]
 801a032:	627b      	str	r3, [r7, #36]	@ 0x24
 801a034:	e068      	b.n	801a108 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a038:	685b      	ldr	r3, [r3, #4]
 801a03a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a03e:	889b      	ldrh	r3, [r3, #4]
 801a040:	b29a      	uxth	r2, r3
 801a042:	693b      	ldr	r3, [r7, #16]
 801a044:	889b      	ldrh	r3, [r3, #4]
 801a046:	b29b      	uxth	r3, r3
 801a048:	429a      	cmp	r2, r3
 801a04a:	d235      	bcs.n	801a0b8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a04e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a050:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a054:	2b00      	cmp	r3, #0
 801a056:	d020      	beq.n	801a09a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a05a:	889b      	ldrh	r3, [r3, #4]
 801a05c:	b29a      	uxth	r2, r3
 801a05e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a060:	88db      	ldrh	r3, [r3, #6]
 801a062:	b29b      	uxth	r3, r3
 801a064:	429a      	cmp	r2, r3
 801a066:	d307      	bcc.n	801a078 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a06a:	88db      	ldrh	r3, [r3, #6]
 801a06c:	b29a      	uxth	r2, r3
 801a06e:	693b      	ldr	r3, [r7, #16]
 801a070:	889b      	ldrh	r3, [r3, #4]
 801a072:	b29b      	uxth	r3, r3
 801a074:	429a      	cmp	r2, r3
 801a076:	d902      	bls.n	801a07e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a078:	f04f 33ff 	mov.w	r3, #4294967295
 801a07c:	e0de      	b.n	801a23c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a080:	68ba      	ldr	r2, [r7, #8]
 801a082:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a086:	88db      	ldrh	r3, [r3, #6]
 801a088:	b29a      	uxth	r2, r3
 801a08a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a08c:	889b      	ldrh	r3, [r3, #4]
 801a08e:	b29b      	uxth	r3, r3
 801a090:	429a      	cmp	r2, r3
 801a092:	d03d      	beq.n	801a110 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a094:	2300      	movs	r3, #0
 801a096:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a098:	e03a      	b.n	801a110 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a09a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a09c:	88db      	ldrh	r3, [r3, #6]
 801a09e:	b29a      	uxth	r2, r3
 801a0a0:	693b      	ldr	r3, [r7, #16]
 801a0a2:	889b      	ldrh	r3, [r3, #4]
 801a0a4:	b29b      	uxth	r3, r3
 801a0a6:	429a      	cmp	r2, r3
 801a0a8:	d902      	bls.n	801a0b0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a0aa:	f04f 33ff 	mov.w	r3, #4294967295
 801a0ae:	e0c5      	b.n	801a23c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801a0b0:	68fb      	ldr	r3, [r7, #12]
 801a0b2:	68ba      	ldr	r2, [r7, #8]
 801a0b4:	605a      	str	r2, [r3, #4]
      break;
 801a0b6:	e02b      	b.n	801a110 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a0ba:	889b      	ldrh	r3, [r3, #4]
 801a0bc:	b29a      	uxth	r2, r3
 801a0be:	693b      	ldr	r3, [r7, #16]
 801a0c0:	889b      	ldrh	r3, [r3, #4]
 801a0c2:	b29b      	uxth	r3, r3
 801a0c4:	429a      	cmp	r2, r3
 801a0c6:	d102      	bne.n	801a0ce <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a0c8:	f04f 33ff 	mov.w	r3, #4294967295
 801a0cc:	e0b6      	b.n	801a23c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a0ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a0d0:	889b      	ldrh	r3, [r3, #4]
 801a0d2:	b29a      	uxth	r2, r3
 801a0d4:	693b      	ldr	r3, [r7, #16]
 801a0d6:	88db      	ldrh	r3, [r3, #6]
 801a0d8:	b29b      	uxth	r3, r3
 801a0da:	429a      	cmp	r2, r3
 801a0dc:	d202      	bcs.n	801a0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a0de:	f04f 33ff 	mov.w	r3, #4294967295
 801a0e2:	e0ab      	b.n	801a23c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	d009      	beq.n	801a0fe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a0ec:	88db      	ldrh	r3, [r3, #6]
 801a0ee:	b29a      	uxth	r2, r3
 801a0f0:	693b      	ldr	r3, [r7, #16]
 801a0f2:	889b      	ldrh	r3, [r3, #4]
 801a0f4:	b29b      	uxth	r3, r3
 801a0f6:	429a      	cmp	r2, r3
 801a0f8:	d001      	beq.n	801a0fe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a0fa:	2300      	movs	r3, #0
 801a0fc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a0fe:	693b      	ldr	r3, [r7, #16]
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801a104:	693b      	ldr	r3, [r7, #16]
 801a106:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801a108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	d193      	bne.n	801a036 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a10e:	e000      	b.n	801a112 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a110:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a114:	2b00      	cmp	r3, #0
 801a116:	d12d      	bne.n	801a174 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801a118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	d01c      	beq.n	801a158 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a120:	88db      	ldrh	r3, [r3, #6]
 801a122:	b29a      	uxth	r2, r3
 801a124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a126:	889b      	ldrh	r3, [r3, #4]
 801a128:	b29b      	uxth	r3, r3
 801a12a:	429a      	cmp	r2, r3
 801a12c:	d906      	bls.n	801a13c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801a12e:	4b45      	ldr	r3, [pc, #276]	@ (801a244 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a130:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801a134:	4944      	ldr	r1, [pc, #272]	@ (801a248 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801a136:	4845      	ldr	r0, [pc, #276]	@ (801a24c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a138:	f001 fbd0 	bl	801b8dc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a13e:	68ba      	ldr	r2, [r7, #8]
 801a140:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a144:	88db      	ldrh	r3, [r3, #6]
 801a146:	b29a      	uxth	r2, r3
 801a148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a14a:	889b      	ldrh	r3, [r3, #4]
 801a14c:	b29b      	uxth	r3, r3
 801a14e:	429a      	cmp	r2, r3
 801a150:	d010      	beq.n	801a174 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801a152:	2300      	movs	r3, #0
 801a154:	623b      	str	r3, [r7, #32]
 801a156:	e00d      	b.n	801a174 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	685b      	ldr	r3, [r3, #4]
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d006      	beq.n	801a16e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801a160:	4b38      	ldr	r3, [pc, #224]	@ (801a244 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a162:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801a166:	493a      	ldr	r1, [pc, #232]	@ (801a250 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801a168:	4838      	ldr	r0, [pc, #224]	@ (801a24c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a16a:	f001 fbb7 	bl	801b8dc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	68ba      	ldr	r2, [r7, #8]
 801a172:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	2b00      	cmp	r3, #0
 801a178:	d105      	bne.n	801a186 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801a17a:	68fb      	ldr	r3, [r7, #12]
 801a17c:	7f9b      	ldrb	r3, [r3, #30]
 801a17e:	f003 0301 	and.w	r3, r3, #1
 801a182:	2b00      	cmp	r3, #0
 801a184:	d059      	beq.n	801a23a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801a186:	6a3b      	ldr	r3, [r7, #32]
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d04f      	beq.n	801a22c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a18c:	68fb      	ldr	r3, [r7, #12]
 801a18e:	685b      	ldr	r3, [r3, #4]
 801a190:	2b00      	cmp	r3, #0
 801a192:	d006      	beq.n	801a1a2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	685b      	ldr	r3, [r3, #4]
 801a198:	685b      	ldr	r3, [r3, #4]
 801a19a:	889b      	ldrh	r3, [r3, #4]
 801a19c:	b29b      	uxth	r3, r3
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d002      	beq.n	801a1a8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a1a2:	2300      	movs	r3, #0
 801a1a4:	623b      	str	r3, [r7, #32]
 801a1a6:	e041      	b.n	801a22c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1aa:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801a1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801a1b2:	e012      	b.n	801a1da <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1b6:	685b      	ldr	r3, [r3, #4]
 801a1b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801a1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1bc:	88db      	ldrh	r3, [r3, #6]
 801a1be:	b29a      	uxth	r2, r3
 801a1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1c2:	889b      	ldrh	r3, [r3, #4]
 801a1c4:	b29b      	uxth	r3, r3
 801a1c6:	429a      	cmp	r2, r3
 801a1c8:	d002      	beq.n	801a1d0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a1ca:	2300      	movs	r3, #0
 801a1cc:	623b      	str	r3, [r7, #32]
            break;
 801a1ce:	e007      	b.n	801a1e0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1d2:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801a1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801a1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	d1e9      	bne.n	801a1b4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a1e0:	6a3b      	ldr	r3, [r7, #32]
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d022      	beq.n	801a22c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a1e6:	68fb      	ldr	r3, [r7, #12]
 801a1e8:	685b      	ldr	r3, [r3, #4]
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d106      	bne.n	801a1fc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a1ee:	4b15      	ldr	r3, [pc, #84]	@ (801a244 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a1f0:	f240 12df 	movw	r2, #479	@ 0x1df
 801a1f4:	4917      	ldr	r1, [pc, #92]	@ (801a254 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a1f6:	4815      	ldr	r0, [pc, #84]	@ (801a24c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a1f8:	f001 fb70 	bl	801b8dc <iprintf>
          LWIP_ASSERT("sanity check",
 801a1fc:	68fb      	ldr	r3, [r7, #12]
 801a1fe:	685b      	ldr	r3, [r3, #4]
 801a200:	685b      	ldr	r3, [r3, #4]
 801a202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a204:	429a      	cmp	r2, r3
 801a206:	d106      	bne.n	801a216 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a208:	4b0e      	ldr	r3, [pc, #56]	@ (801a244 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a20a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801a20e:	4911      	ldr	r1, [pc, #68]	@ (801a254 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a210:	480e      	ldr	r0, [pc, #56]	@ (801a24c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a212:	f001 fb63 	bl	801b8dc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a218:	681b      	ldr	r3, [r3, #0]
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d006      	beq.n	801a22c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a21e:	4b09      	ldr	r3, [pc, #36]	@ (801a244 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a220:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801a224:	490c      	ldr	r1, [pc, #48]	@ (801a258 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a226:	4809      	ldr	r0, [pc, #36]	@ (801a24c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a228:	f001 fb58 	bl	801b8dc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a22c:	6a3b      	ldr	r3, [r7, #32]
 801a22e:	2b00      	cmp	r3, #0
 801a230:	bf14      	ite	ne
 801a232:	2301      	movne	r3, #1
 801a234:	2300      	moveq	r3, #0
 801a236:	b2db      	uxtb	r3, r3
 801a238:	e000      	b.n	801a23c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a23a:	2300      	movs	r3, #0
}
 801a23c:	4618      	mov	r0, r3
 801a23e:	3730      	adds	r7, #48	@ 0x30
 801a240:	46bd      	mov	sp, r7
 801a242:	bd80      	pop	{r7, pc}
 801a244:	08020b4c 	.word	0x08020b4c
 801a248:	08020c30 	.word	0x08020c30
 801a24c:	08020b94 	.word	0x08020b94
 801a250:	08020c50 	.word	0x08020c50
 801a254:	08020c88 	.word	0x08020c88
 801a258:	08020c98 	.word	0x08020c98

0801a25c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a25c:	b580      	push	{r7, lr}
 801a25e:	b08e      	sub	sp, #56	@ 0x38
 801a260:	af00      	add	r7, sp, #0
 801a262:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	685b      	ldr	r3, [r3, #4]
 801a268:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a26c:	781b      	ldrb	r3, [r3, #0]
 801a26e:	f003 030f 	and.w	r3, r3, #15
 801a272:	b2db      	uxtb	r3, r3
 801a274:	009b      	lsls	r3, r3, #2
 801a276:	b2db      	uxtb	r3, r3
 801a278:	2b14      	cmp	r3, #20
 801a27a:	f040 8171 	bne.w	801a560 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a280:	88db      	ldrh	r3, [r3, #6]
 801a282:	b29b      	uxth	r3, r3
 801a284:	4618      	mov	r0, r3
 801a286:	f7f5 ff39 	bl	80100fc <lwip_htons>
 801a28a:	4603      	mov	r3, r0
 801a28c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a290:	b29b      	uxth	r3, r3
 801a292:	00db      	lsls	r3, r3, #3
 801a294:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a298:	885b      	ldrh	r3, [r3, #2]
 801a29a:	b29b      	uxth	r3, r3
 801a29c:	4618      	mov	r0, r3
 801a29e:	f7f5 ff2d 	bl	80100fc <lwip_htons>
 801a2a2:	4603      	mov	r3, r0
 801a2a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a2a8:	781b      	ldrb	r3, [r3, #0]
 801a2aa:	f003 030f 	and.w	r3, r3, #15
 801a2ae:	b2db      	uxtb	r3, r3
 801a2b0:	009b      	lsls	r3, r3, #2
 801a2b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801a2b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a2ba:	b29b      	uxth	r3, r3
 801a2bc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a2be:	429a      	cmp	r2, r3
 801a2c0:	f0c0 8150 	bcc.w	801a564 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a2c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a2c8:	b29b      	uxth	r3, r3
 801a2ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a2cc:	1ad3      	subs	r3, r2, r3
 801a2ce:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a2d0:	6878      	ldr	r0, [r7, #4]
 801a2d2:	f7f7 fb61 	bl	8011998 <pbuf_clen>
 801a2d6:	4603      	mov	r3, r0
 801a2d8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a2da:	4b8c      	ldr	r3, [pc, #560]	@ (801a50c <ip4_reass+0x2b0>)
 801a2dc:	881b      	ldrh	r3, [r3, #0]
 801a2de:	461a      	mov	r2, r3
 801a2e0:	8c3b      	ldrh	r3, [r7, #32]
 801a2e2:	4413      	add	r3, r2
 801a2e4:	2b0a      	cmp	r3, #10
 801a2e6:	dd10      	ble.n	801a30a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a2e8:	8c3b      	ldrh	r3, [r7, #32]
 801a2ea:	4619      	mov	r1, r3
 801a2ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a2ee:	f7ff fd81 	bl	8019df4 <ip_reass_remove_oldest_datagram>
 801a2f2:	4603      	mov	r3, r0
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	f000 8137 	beq.w	801a568 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a2fa:	4b84      	ldr	r3, [pc, #528]	@ (801a50c <ip4_reass+0x2b0>)
 801a2fc:	881b      	ldrh	r3, [r3, #0]
 801a2fe:	461a      	mov	r2, r3
 801a300:	8c3b      	ldrh	r3, [r7, #32]
 801a302:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a304:	2b0a      	cmp	r3, #10
 801a306:	f300 812f 	bgt.w	801a568 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a30a:	4b81      	ldr	r3, [pc, #516]	@ (801a510 <ip4_reass+0x2b4>)
 801a30c:	681b      	ldr	r3, [r3, #0]
 801a30e:	633b      	str	r3, [r7, #48]	@ 0x30
 801a310:	e015      	b.n	801a33e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a314:	695a      	ldr	r2, [r3, #20]
 801a316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a318:	68db      	ldr	r3, [r3, #12]
 801a31a:	429a      	cmp	r2, r3
 801a31c:	d10c      	bne.n	801a338 <ip4_reass+0xdc>
 801a31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a320:	699a      	ldr	r2, [r3, #24]
 801a322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a324:	691b      	ldr	r3, [r3, #16]
 801a326:	429a      	cmp	r2, r3
 801a328:	d106      	bne.n	801a338 <ip4_reass+0xdc>
 801a32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a32c:	899a      	ldrh	r2, [r3, #12]
 801a32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a330:	889b      	ldrh	r3, [r3, #4]
 801a332:	b29b      	uxth	r3, r3
 801a334:	429a      	cmp	r2, r3
 801a336:	d006      	beq.n	801a346 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	633b      	str	r3, [r7, #48]	@ 0x30
 801a33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a340:	2b00      	cmp	r3, #0
 801a342:	d1e6      	bne.n	801a312 <ip4_reass+0xb6>
 801a344:	e000      	b.n	801a348 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a346:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d109      	bne.n	801a362 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a34e:	8c3b      	ldrh	r3, [r7, #32]
 801a350:	4619      	mov	r1, r3
 801a352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a354:	f7ff fdb0 	bl	8019eb8 <ip_reass_enqueue_new_datagram>
 801a358:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	d11c      	bne.n	801a39a <ip4_reass+0x13e>
      goto nullreturn;
 801a360:	e105      	b.n	801a56e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a364:	88db      	ldrh	r3, [r3, #6]
 801a366:	b29b      	uxth	r3, r3
 801a368:	4618      	mov	r0, r3
 801a36a:	f7f5 fec7 	bl	80100fc <lwip_htons>
 801a36e:	4603      	mov	r3, r0
 801a370:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a374:	2b00      	cmp	r3, #0
 801a376:	d110      	bne.n	801a39a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a37a:	89db      	ldrh	r3, [r3, #14]
 801a37c:	4618      	mov	r0, r3
 801a37e:	f7f5 febd 	bl	80100fc <lwip_htons>
 801a382:	4603      	mov	r3, r0
 801a384:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d006      	beq.n	801a39a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a38e:	3308      	adds	r3, #8
 801a390:	2214      	movs	r2, #20
 801a392:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a394:	4618      	mov	r0, r3
 801a396:	f001 fc40 	bl	801bc1a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a39c:	88db      	ldrh	r3, [r3, #6]
 801a39e:	b29b      	uxth	r3, r3
 801a3a0:	f003 0320 	and.w	r3, r3, #32
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	bf0c      	ite	eq
 801a3a8:	2301      	moveq	r3, #1
 801a3aa:	2300      	movne	r3, #0
 801a3ac:	b2db      	uxtb	r3, r3
 801a3ae:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a3b0:	69fb      	ldr	r3, [r7, #28]
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d00e      	beq.n	801a3d4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a3b6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a3b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a3ba:	4413      	add	r3, r2
 801a3bc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a3be:	8b7a      	ldrh	r2, [r7, #26]
 801a3c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a3c2:	429a      	cmp	r2, r3
 801a3c4:	f0c0 80a0 	bcc.w	801a508 <ip4_reass+0x2ac>
 801a3c8:	8b7b      	ldrh	r3, [r7, #26]
 801a3ca:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801a3ce:	4293      	cmp	r3, r2
 801a3d0:	f200 809a 	bhi.w	801a508 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a3d4:	69fa      	ldr	r2, [r7, #28]
 801a3d6:	6879      	ldr	r1, [r7, #4]
 801a3d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a3da:	f7ff fdd5 	bl	8019f88 <ip_reass_chain_frag_into_datagram_and_validate>
 801a3de:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a3e0:	697b      	ldr	r3, [r7, #20]
 801a3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a3e6:	f000 809b 	beq.w	801a520 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a3ea:	4b48      	ldr	r3, [pc, #288]	@ (801a50c <ip4_reass+0x2b0>)
 801a3ec:	881a      	ldrh	r2, [r3, #0]
 801a3ee:	8c3b      	ldrh	r3, [r7, #32]
 801a3f0:	4413      	add	r3, r2
 801a3f2:	b29a      	uxth	r2, r3
 801a3f4:	4b45      	ldr	r3, [pc, #276]	@ (801a50c <ip4_reass+0x2b0>)
 801a3f6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a3f8:	69fb      	ldr	r3, [r7, #28]
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d00d      	beq.n	801a41a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a3fe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a400:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a402:	4413      	add	r3, r2
 801a404:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a408:	8a7a      	ldrh	r2, [r7, #18]
 801a40a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a40e:	7f9b      	ldrb	r3, [r3, #30]
 801a410:	f043 0301 	orr.w	r3, r3, #1
 801a414:	b2da      	uxtb	r2, r3
 801a416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a418:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a41a:	697b      	ldr	r3, [r7, #20]
 801a41c:	2b01      	cmp	r3, #1
 801a41e:	d171      	bne.n	801a504 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a422:	8b9b      	ldrh	r3, [r3, #28]
 801a424:	3314      	adds	r3, #20
 801a426:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a42a:	685b      	ldr	r3, [r3, #4]
 801a42c:	685b      	ldr	r3, [r3, #4]
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a434:	685b      	ldr	r3, [r3, #4]
 801a436:	685b      	ldr	r3, [r3, #4]
 801a438:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a43c:	3308      	adds	r3, #8
 801a43e:	2214      	movs	r2, #20
 801a440:	4619      	mov	r1, r3
 801a442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a444:	f001 fbe9 	bl	801bc1a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a448:	8a3b      	ldrh	r3, [r7, #16]
 801a44a:	4618      	mov	r0, r3
 801a44c:	f7f5 fe56 	bl	80100fc <lwip_htons>
 801a450:	4603      	mov	r3, r0
 801a452:	461a      	mov	r2, r3
 801a454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a456:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a45a:	2200      	movs	r2, #0
 801a45c:	719a      	strb	r2, [r3, #6]
 801a45e:	2200      	movs	r2, #0
 801a460:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a464:	2200      	movs	r2, #0
 801a466:	729a      	strb	r2, [r3, #10]
 801a468:	2200      	movs	r2, #0
 801a46a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a46e:	685b      	ldr	r3, [r3, #4]
 801a470:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a472:	e00d      	b.n	801a490 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a476:	685b      	ldr	r3, [r3, #4]
 801a478:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a47a:	2114      	movs	r1, #20
 801a47c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801a47e:	f7f7 f977 	bl	8011770 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a482:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801a484:	6878      	ldr	r0, [r7, #4]
 801a486:	f7f7 fac7 	bl	8011a18 <pbuf_cat>
      r = iprh->next_pbuf;
 801a48a:	68fb      	ldr	r3, [r7, #12]
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801a490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a492:	2b00      	cmp	r3, #0
 801a494:	d1ee      	bne.n	801a474 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a496:	4b1e      	ldr	r3, [pc, #120]	@ (801a510 <ip4_reass+0x2b4>)
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a49c:	429a      	cmp	r2, r3
 801a49e:	d102      	bne.n	801a4a6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a4a0:	2300      	movs	r3, #0
 801a4a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a4a4:	e010      	b.n	801a4c8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a4a6:	4b1a      	ldr	r3, [pc, #104]	@ (801a510 <ip4_reass+0x2b4>)
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a4ac:	e007      	b.n	801a4be <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a4ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a4b4:	429a      	cmp	r2, r3
 801a4b6:	d006      	beq.n	801a4c6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4ba:	681b      	ldr	r3, [r3, #0]
 801a4bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	d1f4      	bne.n	801a4ae <ip4_reass+0x252>
 801a4c4:	e000      	b.n	801a4c8 <ip4_reass+0x26c>
          break;
 801a4c6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a4c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a4ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a4cc:	f7ff fd2e 	bl	8019f2c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a4d0:	6878      	ldr	r0, [r7, #4]
 801a4d2:	f7f7 fa61 	bl	8011998 <pbuf_clen>
 801a4d6:	4603      	mov	r3, r0
 801a4d8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a4da:	4b0c      	ldr	r3, [pc, #48]	@ (801a50c <ip4_reass+0x2b0>)
 801a4dc:	881b      	ldrh	r3, [r3, #0]
 801a4de:	8c3a      	ldrh	r2, [r7, #32]
 801a4e0:	429a      	cmp	r2, r3
 801a4e2:	d906      	bls.n	801a4f2 <ip4_reass+0x296>
 801a4e4:	4b0b      	ldr	r3, [pc, #44]	@ (801a514 <ip4_reass+0x2b8>)
 801a4e6:	f240 229b 	movw	r2, #667	@ 0x29b
 801a4ea:	490b      	ldr	r1, [pc, #44]	@ (801a518 <ip4_reass+0x2bc>)
 801a4ec:	480b      	ldr	r0, [pc, #44]	@ (801a51c <ip4_reass+0x2c0>)
 801a4ee:	f001 f9f5 	bl	801b8dc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a4f2:	4b06      	ldr	r3, [pc, #24]	@ (801a50c <ip4_reass+0x2b0>)
 801a4f4:	881a      	ldrh	r2, [r3, #0]
 801a4f6:	8c3b      	ldrh	r3, [r7, #32]
 801a4f8:	1ad3      	subs	r3, r2, r3
 801a4fa:	b29a      	uxth	r2, r3
 801a4fc:	4b03      	ldr	r3, [pc, #12]	@ (801a50c <ip4_reass+0x2b0>)
 801a4fe:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	e038      	b.n	801a576 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a504:	2300      	movs	r3, #0
 801a506:	e036      	b.n	801a576 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801a508:	bf00      	nop
 801a50a:	e00a      	b.n	801a522 <ip4_reass+0x2c6>
 801a50c:	2000ca18 	.word	0x2000ca18
 801a510:	2000ca14 	.word	0x2000ca14
 801a514:	08020b4c 	.word	0x08020b4c
 801a518:	08020cbc 	.word	0x08020cbc
 801a51c:	08020b94 	.word	0x08020b94
    goto nullreturn_ipr;
 801a520:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a524:	2b00      	cmp	r3, #0
 801a526:	d106      	bne.n	801a536 <ip4_reass+0x2da>
 801a528:	4b15      	ldr	r3, [pc, #84]	@ (801a580 <ip4_reass+0x324>)
 801a52a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801a52e:	4915      	ldr	r1, [pc, #84]	@ (801a584 <ip4_reass+0x328>)
 801a530:	4815      	ldr	r0, [pc, #84]	@ (801a588 <ip4_reass+0x32c>)
 801a532:	f001 f9d3 	bl	801b8dc <iprintf>
  if (ipr->p == NULL) {
 801a536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a538:	685b      	ldr	r3, [r3, #4]
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d116      	bne.n	801a56c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a53e:	4b13      	ldr	r3, [pc, #76]	@ (801a58c <ip4_reass+0x330>)
 801a540:	681b      	ldr	r3, [r3, #0]
 801a542:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a544:	429a      	cmp	r2, r3
 801a546:	d006      	beq.n	801a556 <ip4_reass+0x2fa>
 801a548:	4b0d      	ldr	r3, [pc, #52]	@ (801a580 <ip4_reass+0x324>)
 801a54a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801a54e:	4910      	ldr	r1, [pc, #64]	@ (801a590 <ip4_reass+0x334>)
 801a550:	480d      	ldr	r0, [pc, #52]	@ (801a588 <ip4_reass+0x32c>)
 801a552:	f001 f9c3 	bl	801b8dc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a556:	2100      	movs	r1, #0
 801a558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a55a:	f7ff fce7 	bl	8019f2c <ip_reass_dequeue_datagram>
 801a55e:	e006      	b.n	801a56e <ip4_reass+0x312>
    goto nullreturn;
 801a560:	bf00      	nop
 801a562:	e004      	b.n	801a56e <ip4_reass+0x312>
    goto nullreturn;
 801a564:	bf00      	nop
 801a566:	e002      	b.n	801a56e <ip4_reass+0x312>
      goto nullreturn;
 801a568:	bf00      	nop
 801a56a:	e000      	b.n	801a56e <ip4_reass+0x312>
  }

nullreturn:
 801a56c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a56e:	6878      	ldr	r0, [r7, #4]
 801a570:	f7f7 f984 	bl	801187c <pbuf_free>
  return NULL;
 801a574:	2300      	movs	r3, #0
}
 801a576:	4618      	mov	r0, r3
 801a578:	3738      	adds	r7, #56	@ 0x38
 801a57a:	46bd      	mov	sp, r7
 801a57c:	bd80      	pop	{r7, pc}
 801a57e:	bf00      	nop
 801a580:	08020b4c 	.word	0x08020b4c
 801a584:	08020cd8 	.word	0x08020cd8
 801a588:	08020b94 	.word	0x08020b94
 801a58c:	2000ca14 	.word	0x2000ca14
 801a590:	08020ce4 	.word	0x08020ce4

0801a594 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a594:	b580      	push	{r7, lr}
 801a596:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a598:	2005      	movs	r0, #5
 801a59a:	f7f6 fa87 	bl	8010aac <memp_malloc>
 801a59e:	4603      	mov	r3, r0
}
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	bd80      	pop	{r7, pc}

0801a5a4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a5a4:	b580      	push	{r7, lr}
 801a5a6:	b082      	sub	sp, #8
 801a5a8:	af00      	add	r7, sp, #0
 801a5aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d106      	bne.n	801a5c0 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a5b2:	4b07      	ldr	r3, [pc, #28]	@ (801a5d0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a5b4:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801a5b8:	4906      	ldr	r1, [pc, #24]	@ (801a5d4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801a5ba:	4807      	ldr	r0, [pc, #28]	@ (801a5d8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801a5bc:	f001 f98e 	bl	801b8dc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a5c0:	6879      	ldr	r1, [r7, #4]
 801a5c2:	2005      	movs	r0, #5
 801a5c4:	f7f6 fae8 	bl	8010b98 <memp_free>
}
 801a5c8:	bf00      	nop
 801a5ca:	3708      	adds	r7, #8
 801a5cc:	46bd      	mov	sp, r7
 801a5ce:	bd80      	pop	{r7, pc}
 801a5d0:	08020b4c 	.word	0x08020b4c
 801a5d4:	08020d04 	.word	0x08020d04
 801a5d8:	08020b94 	.word	0x08020b94

0801a5dc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a5dc:	b580      	push	{r7, lr}
 801a5de:	b084      	sub	sp, #16
 801a5e0:	af00      	add	r7, sp, #0
 801a5e2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a5e8:	68fb      	ldr	r3, [r7, #12]
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d106      	bne.n	801a5fc <ipfrag_free_pbuf_custom+0x20>
 801a5ee:	4b11      	ldr	r3, [pc, #68]	@ (801a634 <ipfrag_free_pbuf_custom+0x58>)
 801a5f0:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801a5f4:	4910      	ldr	r1, [pc, #64]	@ (801a638 <ipfrag_free_pbuf_custom+0x5c>)
 801a5f6:	4811      	ldr	r0, [pc, #68]	@ (801a63c <ipfrag_free_pbuf_custom+0x60>)
 801a5f8:	f001 f970 	bl	801b8dc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a5fc:	68fa      	ldr	r2, [r7, #12]
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	429a      	cmp	r2, r3
 801a602:	d006      	beq.n	801a612 <ipfrag_free_pbuf_custom+0x36>
 801a604:	4b0b      	ldr	r3, [pc, #44]	@ (801a634 <ipfrag_free_pbuf_custom+0x58>)
 801a606:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801a60a:	490d      	ldr	r1, [pc, #52]	@ (801a640 <ipfrag_free_pbuf_custom+0x64>)
 801a60c:	480b      	ldr	r0, [pc, #44]	@ (801a63c <ipfrag_free_pbuf_custom+0x60>)
 801a60e:	f001 f965 	bl	801b8dc <iprintf>
  if (pcr->original != NULL) {
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	695b      	ldr	r3, [r3, #20]
 801a616:	2b00      	cmp	r3, #0
 801a618:	d004      	beq.n	801a624 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a61a:	68fb      	ldr	r3, [r7, #12]
 801a61c:	695b      	ldr	r3, [r3, #20]
 801a61e:	4618      	mov	r0, r3
 801a620:	f7f7 f92c 	bl	801187c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a624:	68f8      	ldr	r0, [r7, #12]
 801a626:	f7ff ffbd 	bl	801a5a4 <ip_frag_free_pbuf_custom_ref>
}
 801a62a:	bf00      	nop
 801a62c:	3710      	adds	r7, #16
 801a62e:	46bd      	mov	sp, r7
 801a630:	bd80      	pop	{r7, pc}
 801a632:	bf00      	nop
 801a634:	08020b4c 	.word	0x08020b4c
 801a638:	08020d10 	.word	0x08020d10
 801a63c:	08020b94 	.word	0x08020b94
 801a640:	08020d1c 	.word	0x08020d1c

0801a644 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a644:	b580      	push	{r7, lr}
 801a646:	b094      	sub	sp, #80	@ 0x50
 801a648:	af02      	add	r7, sp, #8
 801a64a:	60f8      	str	r0, [r7, #12]
 801a64c:	60b9      	str	r1, [r7, #8]
 801a64e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a650:	2300      	movs	r3, #0
 801a652:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a656:	68bb      	ldr	r3, [r7, #8]
 801a658:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801a65a:	3b14      	subs	r3, #20
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	da00      	bge.n	801a662 <ip4_frag+0x1e>
 801a660:	3307      	adds	r3, #7
 801a662:	10db      	asrs	r3, r3, #3
 801a664:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a666:	2314      	movs	r3, #20
 801a668:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a66a:	68fb      	ldr	r3, [r7, #12]
 801a66c:	685b      	ldr	r3, [r3, #4]
 801a66e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801a670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a672:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a676:	781b      	ldrb	r3, [r3, #0]
 801a678:	f003 030f 	and.w	r3, r3, #15
 801a67c:	b2db      	uxtb	r3, r3
 801a67e:	009b      	lsls	r3, r3, #2
 801a680:	b2db      	uxtb	r3, r3
 801a682:	2b14      	cmp	r3, #20
 801a684:	d002      	beq.n	801a68c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a686:	f06f 0305 	mvn.w	r3, #5
 801a68a:	e110      	b.n	801a8ae <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a68c:	68fb      	ldr	r3, [r7, #12]
 801a68e:	895b      	ldrh	r3, [r3, #10]
 801a690:	2b13      	cmp	r3, #19
 801a692:	d809      	bhi.n	801a6a8 <ip4_frag+0x64>
 801a694:	4b88      	ldr	r3, [pc, #544]	@ (801a8b8 <ip4_frag+0x274>)
 801a696:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801a69a:	4988      	ldr	r1, [pc, #544]	@ (801a8bc <ip4_frag+0x278>)
 801a69c:	4888      	ldr	r0, [pc, #544]	@ (801a8c0 <ip4_frag+0x27c>)
 801a69e:	f001 f91d 	bl	801b8dc <iprintf>
 801a6a2:	f06f 0305 	mvn.w	r3, #5
 801a6a6:	e102      	b.n	801a8ae <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6aa:	88db      	ldrh	r3, [r3, #6]
 801a6ac:	b29b      	uxth	r3, r3
 801a6ae:	4618      	mov	r0, r3
 801a6b0:	f7f5 fd24 	bl	80100fc <lwip_htons>
 801a6b4:	4603      	mov	r3, r0
 801a6b6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801a6b8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a6ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a6be:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a6c2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a6c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801a6c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a6ca:	68fb      	ldr	r3, [r7, #12]
 801a6cc:	891b      	ldrh	r3, [r3, #8]
 801a6ce:	3b14      	subs	r3, #20
 801a6d0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801a6d4:	e0e1      	b.n	801a89a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a6d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a6d8:	00db      	lsls	r3, r3, #3
 801a6da:	b29b      	uxth	r3, r3
 801a6dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801a6e0:	4293      	cmp	r3, r2
 801a6e2:	bf28      	it	cs
 801a6e4:	4613      	movcs	r3, r2
 801a6e6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a6e8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a6ec:	2114      	movs	r1, #20
 801a6ee:	200e      	movs	r0, #14
 801a6f0:	f7f6 fde0 	bl	80112b4 <pbuf_alloc>
 801a6f4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801a6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	f000 80d5 	beq.w	801a8a8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a700:	895b      	ldrh	r3, [r3, #10]
 801a702:	2b13      	cmp	r3, #19
 801a704:	d806      	bhi.n	801a714 <ip4_frag+0xd0>
 801a706:	4b6c      	ldr	r3, [pc, #432]	@ (801a8b8 <ip4_frag+0x274>)
 801a708:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801a70c:	496d      	ldr	r1, [pc, #436]	@ (801a8c4 <ip4_frag+0x280>)
 801a70e:	486c      	ldr	r0, [pc, #432]	@ (801a8c0 <ip4_frag+0x27c>)
 801a710:	f001 f8e4 	bl	801b8dc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a716:	685b      	ldr	r3, [r3, #4]
 801a718:	2214      	movs	r2, #20
 801a71a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801a71c:	4618      	mov	r0, r3
 801a71e:	f001 fa7c 	bl	801bc1a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a724:	685b      	ldr	r3, [r3, #4]
 801a726:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801a728:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801a72a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801a72e:	e064      	b.n	801a7fa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a730:	68fb      	ldr	r3, [r7, #12]
 801a732:	895a      	ldrh	r2, [r3, #10]
 801a734:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a736:	1ad3      	subs	r3, r2, r3
 801a738:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a73a:	68fb      	ldr	r3, [r7, #12]
 801a73c:	895b      	ldrh	r3, [r3, #10]
 801a73e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801a740:	429a      	cmp	r2, r3
 801a742:	d906      	bls.n	801a752 <ip4_frag+0x10e>
 801a744:	4b5c      	ldr	r3, [pc, #368]	@ (801a8b8 <ip4_frag+0x274>)
 801a746:	f240 322d 	movw	r2, #813	@ 0x32d
 801a74a:	495f      	ldr	r1, [pc, #380]	@ (801a8c8 <ip4_frag+0x284>)
 801a74c:	485c      	ldr	r0, [pc, #368]	@ (801a8c0 <ip4_frag+0x27c>)
 801a74e:	f001 f8c5 	bl	801b8dc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a752:	8bfa      	ldrh	r2, [r7, #30]
 801a754:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801a758:	4293      	cmp	r3, r2
 801a75a:	bf28      	it	cs
 801a75c:	4613      	movcs	r3, r2
 801a75e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a762:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a766:	2b00      	cmp	r3, #0
 801a768:	d105      	bne.n	801a776 <ip4_frag+0x132>
        poff = 0;
 801a76a:	2300      	movs	r3, #0
 801a76c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801a76e:	68fb      	ldr	r3, [r7, #12]
 801a770:	681b      	ldr	r3, [r3, #0]
 801a772:	60fb      	str	r3, [r7, #12]
        continue;
 801a774:	e041      	b.n	801a7fa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a776:	f7ff ff0d 	bl	801a594 <ip_frag_alloc_pbuf_custom_ref>
 801a77a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a77c:	69bb      	ldr	r3, [r7, #24]
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d103      	bne.n	801a78a <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a782:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a784:	f7f7 f87a 	bl	801187c <pbuf_free>
        goto memerr;
 801a788:	e08f      	b.n	801a8aa <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a78a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a790:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a792:	4413      	add	r3, r2
 801a794:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801a798:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801a79c:	9201      	str	r2, [sp, #4]
 801a79e:	9300      	str	r3, [sp, #0]
 801a7a0:	4603      	mov	r3, r0
 801a7a2:	2241      	movs	r2, #65	@ 0x41
 801a7a4:	2000      	movs	r0, #0
 801a7a6:	f7f6 feaf 	bl	8011508 <pbuf_alloced_custom>
 801a7aa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a7ac:	697b      	ldr	r3, [r7, #20]
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	d106      	bne.n	801a7c0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a7b2:	69b8      	ldr	r0, [r7, #24]
 801a7b4:	f7ff fef6 	bl	801a5a4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a7b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a7ba:	f7f7 f85f 	bl	801187c <pbuf_free>
        goto memerr;
 801a7be:	e074      	b.n	801a8aa <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801a7c0:	68f8      	ldr	r0, [r7, #12]
 801a7c2:	f7f7 f901 	bl	80119c8 <pbuf_ref>
      pcr->original = p;
 801a7c6:	69bb      	ldr	r3, [r7, #24]
 801a7c8:	68fa      	ldr	r2, [r7, #12]
 801a7ca:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a7cc:	69bb      	ldr	r3, [r7, #24]
 801a7ce:	4a3f      	ldr	r2, [pc, #252]	@ (801a8cc <ip4_frag+0x288>)
 801a7d0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a7d2:	6979      	ldr	r1, [r7, #20]
 801a7d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a7d6:	f7f7 f91f 	bl	8011a18 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a7da:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801a7de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a7e2:	1ad3      	subs	r3, r2, r3
 801a7e4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801a7e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	d004      	beq.n	801a7fa <ip4_frag+0x1b6>
        poff = 0;
 801a7f0:	2300      	movs	r3, #0
 801a7f2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	681b      	ldr	r3, [r3, #0]
 801a7f8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a7fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d196      	bne.n	801a730 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a802:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801a804:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a808:	4413      	add	r3, r2
 801a80a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a80c:	68bb      	ldr	r3, [r7, #8]
 801a80e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801a810:	f1a3 0213 	sub.w	r2, r3, #19
 801a814:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a818:	429a      	cmp	r2, r3
 801a81a:	bfcc      	ite	gt
 801a81c:	2301      	movgt	r3, #1
 801a81e:	2300      	movle	r3, #0
 801a820:	b2db      	uxtb	r3, r3
 801a822:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a824:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801a828:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a82c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801a82e:	6a3b      	ldr	r3, [r7, #32]
 801a830:	2b00      	cmp	r3, #0
 801a832:	d002      	beq.n	801a83a <ip4_frag+0x1f6>
 801a834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a836:	2b00      	cmp	r3, #0
 801a838:	d003      	beq.n	801a842 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a83a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a83c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801a840:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a842:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801a844:	4618      	mov	r0, r3
 801a846:	f7f5 fc59 	bl	80100fc <lwip_htons>
 801a84a:	4603      	mov	r3, r0
 801a84c:	461a      	mov	r2, r3
 801a84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a850:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a852:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801a854:	3314      	adds	r3, #20
 801a856:	b29b      	uxth	r3, r3
 801a858:	4618      	mov	r0, r3
 801a85a:	f7f5 fc4f 	bl	80100fc <lwip_htons>
 801a85e:	4603      	mov	r3, r0
 801a860:	461a      	mov	r2, r3
 801a862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a864:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a868:	2200      	movs	r2, #0
 801a86a:	729a      	strb	r2, [r3, #10]
 801a86c:	2200      	movs	r2, #0
 801a86e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a870:	68bb      	ldr	r3, [r7, #8]
 801a872:	695b      	ldr	r3, [r3, #20]
 801a874:	687a      	ldr	r2, [r7, #4]
 801a876:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a878:	68b8      	ldr	r0, [r7, #8]
 801a87a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a87c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a87e:	f7f6 fffd 	bl	801187c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a882:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801a886:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801a888:	1ad3      	subs	r3, r2, r3
 801a88a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801a88e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801a892:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a894:	4413      	add	r3, r2
 801a896:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801a89a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	f47f af19 	bne.w	801a6d6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a8a4:	2300      	movs	r3, #0
 801a8a6:	e002      	b.n	801a8ae <ip4_frag+0x26a>
      goto memerr;
 801a8a8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a8aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a8ae:	4618      	mov	r0, r3
 801a8b0:	3748      	adds	r7, #72	@ 0x48
 801a8b2:	46bd      	mov	sp, r7
 801a8b4:	bd80      	pop	{r7, pc}
 801a8b6:	bf00      	nop
 801a8b8:	08020b4c 	.word	0x08020b4c
 801a8bc:	08020d28 	.word	0x08020d28
 801a8c0:	08020b94 	.word	0x08020b94
 801a8c4:	08020d44 	.word	0x08020d44
 801a8c8:	08020d64 	.word	0x08020d64
 801a8cc:	0801a5dd 	.word	0x0801a5dd

0801a8d0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a8d0:	b580      	push	{r7, lr}
 801a8d2:	b086      	sub	sp, #24
 801a8d4:	af00      	add	r7, sp, #0
 801a8d6:	6078      	str	r0, [r7, #4]
 801a8d8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a8da:	230e      	movs	r3, #14
 801a8dc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	895b      	ldrh	r3, [r3, #10]
 801a8e2:	2b0e      	cmp	r3, #14
 801a8e4:	d96e      	bls.n	801a9c4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	7bdb      	ldrb	r3, [r3, #15]
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d106      	bne.n	801a8fc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a8ee:	683b      	ldr	r3, [r7, #0]
 801a8f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a8f4:	3301      	adds	r3, #1
 801a8f6:	b2da      	uxtb	r2, r3
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	685b      	ldr	r3, [r3, #4]
 801a900:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a902:	693b      	ldr	r3, [r7, #16]
 801a904:	7b1a      	ldrb	r2, [r3, #12]
 801a906:	7b5b      	ldrb	r3, [r3, #13]
 801a908:	021b      	lsls	r3, r3, #8
 801a90a:	4313      	orrs	r3, r2
 801a90c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a90e:	693b      	ldr	r3, [r7, #16]
 801a910:	781b      	ldrb	r3, [r3, #0]
 801a912:	f003 0301 	and.w	r3, r3, #1
 801a916:	2b00      	cmp	r3, #0
 801a918:	d023      	beq.n	801a962 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a91a:	693b      	ldr	r3, [r7, #16]
 801a91c:	781b      	ldrb	r3, [r3, #0]
 801a91e:	2b01      	cmp	r3, #1
 801a920:	d10f      	bne.n	801a942 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a922:	693b      	ldr	r3, [r7, #16]
 801a924:	785b      	ldrb	r3, [r3, #1]
 801a926:	2b00      	cmp	r3, #0
 801a928:	d11b      	bne.n	801a962 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a92a:	693b      	ldr	r3, [r7, #16]
 801a92c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a92e:	2b5e      	cmp	r3, #94	@ 0x5e
 801a930:	d117      	bne.n	801a962 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	7b5b      	ldrb	r3, [r3, #13]
 801a936:	f043 0310 	orr.w	r3, r3, #16
 801a93a:	b2da      	uxtb	r2, r3
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	735a      	strb	r2, [r3, #13]
 801a940:	e00f      	b.n	801a962 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a942:	693b      	ldr	r3, [r7, #16]
 801a944:	2206      	movs	r2, #6
 801a946:	4928      	ldr	r1, [pc, #160]	@ (801a9e8 <ethernet_input+0x118>)
 801a948:	4618      	mov	r0, r3
 801a94a:	f001 f852 	bl	801b9f2 <memcmp>
 801a94e:	4603      	mov	r3, r0
 801a950:	2b00      	cmp	r3, #0
 801a952:	d106      	bne.n	801a962 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	7b5b      	ldrb	r3, [r3, #13]
 801a958:	f043 0308 	orr.w	r3, r3, #8
 801a95c:	b2da      	uxtb	r2, r3
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a962:	89fb      	ldrh	r3, [r7, #14]
 801a964:	2b08      	cmp	r3, #8
 801a966:	d003      	beq.n	801a970 <ethernet_input+0xa0>
 801a968:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801a96c:	d014      	beq.n	801a998 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a96e:	e032      	b.n	801a9d6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a970:	683b      	ldr	r3, [r7, #0]
 801a972:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801a976:	f003 0308 	and.w	r3, r3, #8
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d024      	beq.n	801a9c8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a97e:	8afb      	ldrh	r3, [r7, #22]
 801a980:	4619      	mov	r1, r3
 801a982:	6878      	ldr	r0, [r7, #4]
 801a984:	f7f6 fef4 	bl	8011770 <pbuf_remove_header>
 801a988:	4603      	mov	r3, r0
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	d11e      	bne.n	801a9cc <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a98e:	6839      	ldr	r1, [r7, #0]
 801a990:	6878      	ldr	r0, [r7, #4]
 801a992:	f7fe fe91 	bl	80196b8 <ip4_input>
      break;
 801a996:	e013      	b.n	801a9c0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a998:	683b      	ldr	r3, [r7, #0]
 801a99a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801a99e:	f003 0308 	and.w	r3, r3, #8
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d014      	beq.n	801a9d0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a9a6:	8afb      	ldrh	r3, [r7, #22]
 801a9a8:	4619      	mov	r1, r3
 801a9aa:	6878      	ldr	r0, [r7, #4]
 801a9ac:	f7f6 fee0 	bl	8011770 <pbuf_remove_header>
 801a9b0:	4603      	mov	r3, r0
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d10e      	bne.n	801a9d4 <ethernet_input+0x104>
        etharp_input(p, netif);
 801a9b6:	6839      	ldr	r1, [r7, #0]
 801a9b8:	6878      	ldr	r0, [r7, #4]
 801a9ba:	f7fe f833 	bl	8018a24 <etharp_input>
      break;
 801a9be:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a9c0:	2300      	movs	r3, #0
 801a9c2:	e00c      	b.n	801a9de <ethernet_input+0x10e>
    goto free_and_return;
 801a9c4:	bf00      	nop
 801a9c6:	e006      	b.n	801a9d6 <ethernet_input+0x106>
        goto free_and_return;
 801a9c8:	bf00      	nop
 801a9ca:	e004      	b.n	801a9d6 <ethernet_input+0x106>
        goto free_and_return;
 801a9cc:	bf00      	nop
 801a9ce:	e002      	b.n	801a9d6 <ethernet_input+0x106>
        goto free_and_return;
 801a9d0:	bf00      	nop
 801a9d2:	e000      	b.n	801a9d6 <ethernet_input+0x106>
        goto free_and_return;
 801a9d4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a9d6:	6878      	ldr	r0, [r7, #4]
 801a9d8:	f7f6 ff50 	bl	801187c <pbuf_free>
  return ERR_OK;
 801a9dc:	2300      	movs	r3, #0
}
 801a9de:	4618      	mov	r0, r3
 801a9e0:	3718      	adds	r7, #24
 801a9e2:	46bd      	mov	sp, r7
 801a9e4:	bd80      	pop	{r7, pc}
 801a9e6:	bf00      	nop
 801a9e8:	08020f88 	.word	0x08020f88

0801a9ec <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a9ec:	b580      	push	{r7, lr}
 801a9ee:	b086      	sub	sp, #24
 801a9f0:	af00      	add	r7, sp, #0
 801a9f2:	60f8      	str	r0, [r7, #12]
 801a9f4:	60b9      	str	r1, [r7, #8]
 801a9f6:	607a      	str	r2, [r7, #4]
 801a9f8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a9fa:	8c3b      	ldrh	r3, [r7, #32]
 801a9fc:	4618      	mov	r0, r3
 801a9fe:	f7f5 fb7d 	bl	80100fc <lwip_htons>
 801aa02:	4603      	mov	r3, r0
 801aa04:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801aa06:	210e      	movs	r1, #14
 801aa08:	68b8      	ldr	r0, [r7, #8]
 801aa0a:	f7f6 fea1 	bl	8011750 <pbuf_add_header>
 801aa0e:	4603      	mov	r3, r0
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d125      	bne.n	801aa60 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801aa14:	68bb      	ldr	r3, [r7, #8]
 801aa16:	685b      	ldr	r3, [r3, #4]
 801aa18:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801aa1a:	693b      	ldr	r3, [r7, #16]
 801aa1c:	8afa      	ldrh	r2, [r7, #22]
 801aa1e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801aa20:	693b      	ldr	r3, [r7, #16]
 801aa22:	2206      	movs	r2, #6
 801aa24:	6839      	ldr	r1, [r7, #0]
 801aa26:	4618      	mov	r0, r3
 801aa28:	f001 f8f7 	bl	801bc1a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801aa2c:	693b      	ldr	r3, [r7, #16]
 801aa2e:	3306      	adds	r3, #6
 801aa30:	2206      	movs	r2, #6
 801aa32:	6879      	ldr	r1, [r7, #4]
 801aa34:	4618      	mov	r0, r3
 801aa36:	f001 f8f0 	bl	801bc1a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801aa3a:	68fb      	ldr	r3, [r7, #12]
 801aa3c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801aa40:	2b06      	cmp	r3, #6
 801aa42:	d006      	beq.n	801aa52 <ethernet_output+0x66>
 801aa44:	4b0a      	ldr	r3, [pc, #40]	@ (801aa70 <ethernet_output+0x84>)
 801aa46:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801aa4a:	490a      	ldr	r1, [pc, #40]	@ (801aa74 <ethernet_output+0x88>)
 801aa4c:	480a      	ldr	r0, [pc, #40]	@ (801aa78 <ethernet_output+0x8c>)
 801aa4e:	f000 ff45 	bl	801b8dc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801aa52:	68fb      	ldr	r3, [r7, #12]
 801aa54:	699b      	ldr	r3, [r3, #24]
 801aa56:	68b9      	ldr	r1, [r7, #8]
 801aa58:	68f8      	ldr	r0, [r7, #12]
 801aa5a:	4798      	blx	r3
 801aa5c:	4603      	mov	r3, r0
 801aa5e:	e002      	b.n	801aa66 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801aa60:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801aa62:	f06f 0301 	mvn.w	r3, #1
}
 801aa66:	4618      	mov	r0, r3
 801aa68:	3718      	adds	r7, #24
 801aa6a:	46bd      	mov	sp, r7
 801aa6c:	bd80      	pop	{r7, pc}
 801aa6e:	bf00      	nop
 801aa70:	08020d74 	.word	0x08020d74
 801aa74:	08020dac 	.word	0x08020dac
 801aa78:	08020de0 	.word	0x08020de0

0801aa7c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801aa7c:	b580      	push	{r7, lr}
 801aa7e:	b086      	sub	sp, #24
 801aa80:	af00      	add	r7, sp, #0
 801aa82:	6078      	str	r0, [r7, #4]
 801aa84:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801aa86:	683b      	ldr	r3, [r7, #0]
 801aa88:	60bb      	str	r3, [r7, #8]
 801aa8a:	2304      	movs	r3, #4
 801aa8c:	60fb      	str	r3, [r7, #12]
 801aa8e:	2300      	movs	r3, #0
 801aa90:	613b      	str	r3, [r7, #16]
 801aa92:	2300      	movs	r3, #0
 801aa94:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801aa96:	f107 0308 	add.w	r3, r7, #8
 801aa9a:	2100      	movs	r1, #0
 801aa9c:	4618      	mov	r0, r3
 801aa9e:	f7f2 fc15 	bl	800d2cc <osMessageCreate>
 801aaa2:	4602      	mov	r2, r0
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d102      	bne.n	801aab6 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801aab0:	f04f 33ff 	mov.w	r3, #4294967295
 801aab4:	e000      	b.n	801aab8 <sys_mbox_new+0x3c>

  return ERR_OK;
 801aab6:	2300      	movs	r3, #0
}
 801aab8:	4618      	mov	r0, r3
 801aaba:	3718      	adds	r7, #24
 801aabc:	46bd      	mov	sp, r7
 801aabe:	bd80      	pop	{r7, pc}

0801aac0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801aac0:	b580      	push	{r7, lr}
 801aac2:	b084      	sub	sp, #16
 801aac4:	af00      	add	r7, sp, #0
 801aac6:	6078      	str	r0, [r7, #4]
 801aac8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801aaca:	687b      	ldr	r3, [r7, #4]
 801aacc:	681b      	ldr	r3, [r3, #0]
 801aace:	6839      	ldr	r1, [r7, #0]
 801aad0:	2200      	movs	r2, #0
 801aad2:	4618      	mov	r0, r3
 801aad4:	f7f2 fc22 	bl	800d31c <osMessagePut>
 801aad8:	4603      	mov	r3, r0
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d102      	bne.n	801aae4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801aade:	2300      	movs	r3, #0
 801aae0:	73fb      	strb	r3, [r7, #15]
 801aae2:	e001      	b.n	801aae8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801aae4:	23ff      	movs	r3, #255	@ 0xff
 801aae6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801aae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801aaec:	4618      	mov	r0, r3
 801aaee:	3710      	adds	r7, #16
 801aaf0:	46bd      	mov	sp, r7
 801aaf2:	bd80      	pop	{r7, pc}

0801aaf4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801aaf4:	b580      	push	{r7, lr}
 801aaf6:	b08c      	sub	sp, #48	@ 0x30
 801aaf8:	af00      	add	r7, sp, #0
 801aafa:	61f8      	str	r0, [r7, #28]
 801aafc:	61b9      	str	r1, [r7, #24]
 801aafe:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801ab00:	f7f2 fa22 	bl	800cf48 <osKernelSysTick>
 801ab04:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801ab06:	697b      	ldr	r3, [r7, #20]
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d017      	beq.n	801ab3c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801ab0c:	69fb      	ldr	r3, [r7, #28]
 801ab0e:	6819      	ldr	r1, [r3, #0]
 801ab10:	f107 0320 	add.w	r3, r7, #32
 801ab14:	697a      	ldr	r2, [r7, #20]
 801ab16:	4618      	mov	r0, r3
 801ab18:	f7f2 fc40 	bl	800d39c <osMessageGet>

    if(event.status == osEventMessage)
 801ab1c:	6a3b      	ldr	r3, [r7, #32]
 801ab1e:	2b10      	cmp	r3, #16
 801ab20:	d109      	bne.n	801ab36 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801ab22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab24:	461a      	mov	r2, r3
 801ab26:	69bb      	ldr	r3, [r7, #24]
 801ab28:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801ab2a:	f7f2 fa0d 	bl	800cf48 <osKernelSysTick>
 801ab2e:	4602      	mov	r2, r0
 801ab30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab32:	1ad3      	subs	r3, r2, r3
 801ab34:	e019      	b.n	801ab6a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ab36:	f04f 33ff 	mov.w	r3, #4294967295
 801ab3a:	e016      	b.n	801ab6a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801ab3c:	69fb      	ldr	r3, [r7, #28]
 801ab3e:	6819      	ldr	r1, [r3, #0]
 801ab40:	463b      	mov	r3, r7
 801ab42:	f04f 32ff 	mov.w	r2, #4294967295
 801ab46:	4618      	mov	r0, r3
 801ab48:	f7f2 fc28 	bl	800d39c <osMessageGet>
 801ab4c:	f107 0320 	add.w	r3, r7, #32
 801ab50:	463a      	mov	r2, r7
 801ab52:	ca07      	ldmia	r2, {r0, r1, r2}
 801ab54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801ab58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab5a:	461a      	mov	r2, r3
 801ab5c:	69bb      	ldr	r3, [r7, #24]
 801ab5e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801ab60:	f7f2 f9f2 	bl	800cf48 <osKernelSysTick>
 801ab64:	4602      	mov	r2, r0
 801ab66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab68:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801ab6a:	4618      	mov	r0, r3
 801ab6c:	3730      	adds	r7, #48	@ 0x30
 801ab6e:	46bd      	mov	sp, r7
 801ab70:	bd80      	pop	{r7, pc}

0801ab72 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801ab72:	b480      	push	{r7}
 801ab74:	b083      	sub	sp, #12
 801ab76:	af00      	add	r7, sp, #0
 801ab78:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d101      	bne.n	801ab86 <sys_mbox_valid+0x14>
    return 0;
 801ab82:	2300      	movs	r3, #0
 801ab84:	e000      	b.n	801ab88 <sys_mbox_valid+0x16>
  else
    return 1;
 801ab86:	2301      	movs	r3, #1
}
 801ab88:	4618      	mov	r0, r3
 801ab8a:	370c      	adds	r7, #12
 801ab8c:	46bd      	mov	sp, r7
 801ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab92:	4770      	bx	lr

0801ab94 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801ab94:	b580      	push	{r7, lr}
 801ab96:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801ab98:	4803      	ldr	r0, [pc, #12]	@ (801aba8 <sys_init+0x14>)
 801ab9a:	f7f2 fa45 	bl	800d028 <osMutexCreate>
 801ab9e:	4603      	mov	r3, r0
 801aba0:	4a02      	ldr	r2, [pc, #8]	@ (801abac <sys_init+0x18>)
 801aba2:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801aba4:	bf00      	nop
 801aba6:	bd80      	pop	{r7, pc}
 801aba8:	08020f98 	.word	0x08020f98
 801abac:	2000ca1c 	.word	0x2000ca1c

0801abb0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801abb0:	b580      	push	{r7, lr}
 801abb2:	b084      	sub	sp, #16
 801abb4:	af00      	add	r7, sp, #0
 801abb6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801abb8:	2300      	movs	r3, #0
 801abba:	60bb      	str	r3, [r7, #8]
 801abbc:	2300      	movs	r3, #0
 801abbe:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801abc0:	f107 0308 	add.w	r3, r7, #8
 801abc4:	4618      	mov	r0, r3
 801abc6:	f7f2 fa2f 	bl	800d028 <osMutexCreate>
 801abca:	4602      	mov	r2, r0
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	d102      	bne.n	801abde <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801abd8:	f04f 33ff 	mov.w	r3, #4294967295
 801abdc:	e000      	b.n	801abe0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801abde:	2300      	movs	r3, #0
}
 801abe0:	4618      	mov	r0, r3
 801abe2:	3710      	adds	r7, #16
 801abe4:	46bd      	mov	sp, r7
 801abe6:	bd80      	pop	{r7, pc}

0801abe8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801abe8:	b580      	push	{r7, lr}
 801abea:	b082      	sub	sp, #8
 801abec:	af00      	add	r7, sp, #0
 801abee:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	f04f 31ff 	mov.w	r1, #4294967295
 801abf8:	4618      	mov	r0, r3
 801abfa:	f7f2 fa2d 	bl	800d058 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801abfe:	bf00      	nop
 801ac00:	3708      	adds	r7, #8
 801ac02:	46bd      	mov	sp, r7
 801ac04:	bd80      	pop	{r7, pc}

0801ac06 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801ac06:	b580      	push	{r7, lr}
 801ac08:	b082      	sub	sp, #8
 801ac0a:	af00      	add	r7, sp, #0
 801ac0c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	681b      	ldr	r3, [r3, #0]
 801ac12:	4618      	mov	r0, r3
 801ac14:	f7f2 fa6e 	bl	800d0f4 <osMutexRelease>
}
 801ac18:	bf00      	nop
 801ac1a:	3708      	adds	r7, #8
 801ac1c:	46bd      	mov	sp, r7
 801ac1e:	bd80      	pop	{r7, pc}

0801ac20 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801ac20:	b580      	push	{r7, lr}
 801ac22:	b08c      	sub	sp, #48	@ 0x30
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	60f8      	str	r0, [r7, #12]
 801ac28:	60b9      	str	r1, [r7, #8]
 801ac2a:	607a      	str	r2, [r7, #4]
 801ac2c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801ac2e:	f107 0314 	add.w	r3, r7, #20
 801ac32:	2200      	movs	r2, #0
 801ac34:	601a      	str	r2, [r3, #0]
 801ac36:	605a      	str	r2, [r3, #4]
 801ac38:	609a      	str	r2, [r3, #8]
 801ac3a:	60da      	str	r2, [r3, #12]
 801ac3c:	611a      	str	r2, [r3, #16]
 801ac3e:	615a      	str	r2, [r3, #20]
 801ac40:	619a      	str	r2, [r3, #24]
 801ac42:	68fb      	ldr	r3, [r7, #12]
 801ac44:	617b      	str	r3, [r7, #20]
 801ac46:	68bb      	ldr	r3, [r7, #8]
 801ac48:	61bb      	str	r3, [r7, #24]
 801ac4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ac4c:	b21b      	sxth	r3, r3
 801ac4e:	83bb      	strh	r3, [r7, #28]
 801ac50:	683b      	ldr	r3, [r7, #0]
 801ac52:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801ac54:	f107 0314 	add.w	r3, r7, #20
 801ac58:	6879      	ldr	r1, [r7, #4]
 801ac5a:	4618      	mov	r0, r3
 801ac5c:	f7f2 f984 	bl	800cf68 <osThreadCreate>
 801ac60:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801ac62:	4618      	mov	r0, r3
 801ac64:	3730      	adds	r7, #48	@ 0x30
 801ac66:	46bd      	mov	sp, r7
 801ac68:	bd80      	pop	{r7, pc}
	...

0801ac6c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801ac6c:	b580      	push	{r7, lr}
 801ac6e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801ac70:	4b04      	ldr	r3, [pc, #16]	@ (801ac84 <sys_arch_protect+0x18>)
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	f04f 31ff 	mov.w	r1, #4294967295
 801ac78:	4618      	mov	r0, r3
 801ac7a:	f7f2 f9ed 	bl	800d058 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801ac7e:	2301      	movs	r3, #1
}
 801ac80:	4618      	mov	r0, r3
 801ac82:	bd80      	pop	{r7, pc}
 801ac84:	2000ca1c 	.word	0x2000ca1c

0801ac88 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801ac88:	b580      	push	{r7, lr}
 801ac8a:	b082      	sub	sp, #8
 801ac8c:	af00      	add	r7, sp, #0
 801ac8e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801ac90:	4b04      	ldr	r3, [pc, #16]	@ (801aca4 <sys_arch_unprotect+0x1c>)
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	4618      	mov	r0, r3
 801ac96:	f7f2 fa2d 	bl	800d0f4 <osMutexRelease>
}
 801ac9a:	bf00      	nop
 801ac9c:	3708      	adds	r7, #8
 801ac9e:	46bd      	mov	sp, r7
 801aca0:	bd80      	pop	{r7, pc}
 801aca2:	bf00      	nop
 801aca4:	2000ca1c 	.word	0x2000ca1c

0801aca8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801aca8:	b580      	push	{r7, lr}
 801acaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801acac:	2200      	movs	r2, #0
 801acae:	4912      	ldr	r1, [pc, #72]	@ (801acf8 <MX_USB_DEVICE_Init+0x50>)
 801acb0:	4812      	ldr	r0, [pc, #72]	@ (801acfc <MX_USB_DEVICE_Init+0x54>)
 801acb2:	f7f0 fdf9 	bl	800b8a8 <USBD_Init>
 801acb6:	4603      	mov	r3, r0
 801acb8:	2b00      	cmp	r3, #0
 801acba:	d001      	beq.n	801acc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801acbc:	f7e6 fa26 	bl	800110c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801acc0:	490f      	ldr	r1, [pc, #60]	@ (801ad00 <MX_USB_DEVICE_Init+0x58>)
 801acc2:	480e      	ldr	r0, [pc, #56]	@ (801acfc <MX_USB_DEVICE_Init+0x54>)
 801acc4:	f7f0 fe20 	bl	800b908 <USBD_RegisterClass>
 801acc8:	4603      	mov	r3, r0
 801acca:	2b00      	cmp	r3, #0
 801accc:	d001      	beq.n	801acd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801acce:	f7e6 fa1d 	bl	800110c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801acd2:	490c      	ldr	r1, [pc, #48]	@ (801ad04 <MX_USB_DEVICE_Init+0x5c>)
 801acd4:	4809      	ldr	r0, [pc, #36]	@ (801acfc <MX_USB_DEVICE_Init+0x54>)
 801acd6:	f7f0 fd17 	bl	800b708 <USBD_CDC_RegisterInterface>
 801acda:	4603      	mov	r3, r0
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d001      	beq.n	801ace4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801ace0:	f7e6 fa14 	bl	800110c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801ace4:	4805      	ldr	r0, [pc, #20]	@ (801acfc <MX_USB_DEVICE_Init+0x54>)
 801ace6:	f7f0 fe45 	bl	800b974 <USBD_Start>
 801acea:	4603      	mov	r3, r0
 801acec:	2b00      	cmp	r3, #0
 801acee:	d001      	beq.n	801acf4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801acf0:	f7e6 fa0c 	bl	800110c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801acf4:	bf00      	nop
 801acf6:	bd80      	pop	{r7, pc}
 801acf8:	200000bc 	.word	0x200000bc
 801acfc:	2000ca20 	.word	0x2000ca20
 801ad00:	20000018 	.word	0x20000018
 801ad04:	200000a8 	.word	0x200000a8

0801ad08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801ad08:	b580      	push	{r7, lr}
 801ad0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801ad0c:	2200      	movs	r2, #0
 801ad0e:	4905      	ldr	r1, [pc, #20]	@ (801ad24 <CDC_Init_FS+0x1c>)
 801ad10:	4805      	ldr	r0, [pc, #20]	@ (801ad28 <CDC_Init_FS+0x20>)
 801ad12:	f7f0 fd13 	bl	800b73c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801ad16:	4905      	ldr	r1, [pc, #20]	@ (801ad2c <CDC_Init_FS+0x24>)
 801ad18:	4803      	ldr	r0, [pc, #12]	@ (801ad28 <CDC_Init_FS+0x20>)
 801ad1a:	f7f0 fd31 	bl	800b780 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801ad1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801ad20:	4618      	mov	r0, r3
 801ad22:	bd80      	pop	{r7, pc}
 801ad24:	2000d4fc 	.word	0x2000d4fc
 801ad28:	2000ca20 	.word	0x2000ca20
 801ad2c:	2000ccfc 	.word	0x2000ccfc

0801ad30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801ad30:	b480      	push	{r7}
 801ad32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801ad34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801ad36:	4618      	mov	r0, r3
 801ad38:	46bd      	mov	sp, r7
 801ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad3e:	4770      	bx	lr

0801ad40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801ad40:	b480      	push	{r7}
 801ad42:	b083      	sub	sp, #12
 801ad44:	af00      	add	r7, sp, #0
 801ad46:	4603      	mov	r3, r0
 801ad48:	6039      	str	r1, [r7, #0]
 801ad4a:	71fb      	strb	r3, [r7, #7]
 801ad4c:	4613      	mov	r3, r2
 801ad4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801ad50:	79fb      	ldrb	r3, [r7, #7]
 801ad52:	2b23      	cmp	r3, #35	@ 0x23
 801ad54:	d84a      	bhi.n	801adec <CDC_Control_FS+0xac>
 801ad56:	a201      	add	r2, pc, #4	@ (adr r2, 801ad5c <CDC_Control_FS+0x1c>)
 801ad58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad5c:	0801aded 	.word	0x0801aded
 801ad60:	0801aded 	.word	0x0801aded
 801ad64:	0801aded 	.word	0x0801aded
 801ad68:	0801aded 	.word	0x0801aded
 801ad6c:	0801aded 	.word	0x0801aded
 801ad70:	0801aded 	.word	0x0801aded
 801ad74:	0801aded 	.word	0x0801aded
 801ad78:	0801aded 	.word	0x0801aded
 801ad7c:	0801aded 	.word	0x0801aded
 801ad80:	0801aded 	.word	0x0801aded
 801ad84:	0801aded 	.word	0x0801aded
 801ad88:	0801aded 	.word	0x0801aded
 801ad8c:	0801aded 	.word	0x0801aded
 801ad90:	0801aded 	.word	0x0801aded
 801ad94:	0801aded 	.word	0x0801aded
 801ad98:	0801aded 	.word	0x0801aded
 801ad9c:	0801aded 	.word	0x0801aded
 801ada0:	0801aded 	.word	0x0801aded
 801ada4:	0801aded 	.word	0x0801aded
 801ada8:	0801aded 	.word	0x0801aded
 801adac:	0801aded 	.word	0x0801aded
 801adb0:	0801aded 	.word	0x0801aded
 801adb4:	0801aded 	.word	0x0801aded
 801adb8:	0801aded 	.word	0x0801aded
 801adbc:	0801aded 	.word	0x0801aded
 801adc0:	0801aded 	.word	0x0801aded
 801adc4:	0801aded 	.word	0x0801aded
 801adc8:	0801aded 	.word	0x0801aded
 801adcc:	0801aded 	.word	0x0801aded
 801add0:	0801aded 	.word	0x0801aded
 801add4:	0801aded 	.word	0x0801aded
 801add8:	0801aded 	.word	0x0801aded
 801addc:	0801aded 	.word	0x0801aded
 801ade0:	0801aded 	.word	0x0801aded
 801ade4:	0801aded 	.word	0x0801aded
 801ade8:	0801aded 	.word	0x0801aded
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801adec:	bf00      	nop
  }

  return (USBD_OK);
 801adee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801adf0:	4618      	mov	r0, r3
 801adf2:	370c      	adds	r7, #12
 801adf4:	46bd      	mov	sp, r7
 801adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adfa:	4770      	bx	lr

0801adfc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801adfc:	b580      	push	{r7, lr}
 801adfe:	b082      	sub	sp, #8
 801ae00:	af00      	add	r7, sp, #0
 801ae02:	6078      	str	r0, [r7, #4]
 801ae04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801ae06:	6879      	ldr	r1, [r7, #4]
 801ae08:	4805      	ldr	r0, [pc, #20]	@ (801ae20 <CDC_Receive_FS+0x24>)
 801ae0a:	f7f0 fcb9 	bl	800b780 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801ae0e:	4804      	ldr	r0, [pc, #16]	@ (801ae20 <CDC_Receive_FS+0x24>)
 801ae10:	f7f0 fd14 	bl	800b83c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801ae14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801ae16:	4618      	mov	r0, r3
 801ae18:	3708      	adds	r7, #8
 801ae1a:	46bd      	mov	sp, r7
 801ae1c:	bd80      	pop	{r7, pc}
 801ae1e:	bf00      	nop
 801ae20:	2000ca20 	.word	0x2000ca20

0801ae24 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801ae24:	b580      	push	{r7, lr}
 801ae26:	b084      	sub	sp, #16
 801ae28:	af00      	add	r7, sp, #0
 801ae2a:	6078      	str	r0, [r7, #4]
 801ae2c:	460b      	mov	r3, r1
 801ae2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801ae30:	2300      	movs	r3, #0
 801ae32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801ae34:	4b0d      	ldr	r3, [pc, #52]	@ (801ae6c <CDC_Transmit_FS+0x48>)
 801ae36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801ae3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801ae3c:	68bb      	ldr	r3, [r7, #8]
 801ae3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	d001      	beq.n	801ae4a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801ae46:	2301      	movs	r3, #1
 801ae48:	e00b      	b.n	801ae62 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801ae4a:	887b      	ldrh	r3, [r7, #2]
 801ae4c:	461a      	mov	r2, r3
 801ae4e:	6879      	ldr	r1, [r7, #4]
 801ae50:	4806      	ldr	r0, [pc, #24]	@ (801ae6c <CDC_Transmit_FS+0x48>)
 801ae52:	f7f0 fc73 	bl	800b73c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801ae56:	4805      	ldr	r0, [pc, #20]	@ (801ae6c <CDC_Transmit_FS+0x48>)
 801ae58:	f7f0 fcb0 	bl	800b7bc <USBD_CDC_TransmitPacket>
 801ae5c:	4603      	mov	r3, r0
 801ae5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801ae60:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae62:	4618      	mov	r0, r3
 801ae64:	3710      	adds	r7, #16
 801ae66:	46bd      	mov	sp, r7
 801ae68:	bd80      	pop	{r7, pc}
 801ae6a:	bf00      	nop
 801ae6c:	2000ca20 	.word	0x2000ca20

0801ae70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801ae70:	b480      	push	{r7}
 801ae72:	b087      	sub	sp, #28
 801ae74:	af00      	add	r7, sp, #0
 801ae76:	60f8      	str	r0, [r7, #12]
 801ae78:	60b9      	str	r1, [r7, #8]
 801ae7a:	4613      	mov	r3, r2
 801ae7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801ae7e:	2300      	movs	r3, #0
 801ae80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801ae82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ae86:	4618      	mov	r0, r3
 801ae88:	371c      	adds	r7, #28
 801ae8a:	46bd      	mov	sp, r7
 801ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae90:	4770      	bx	lr
	...

0801ae94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ae94:	b480      	push	{r7}
 801ae96:	b083      	sub	sp, #12
 801ae98:	af00      	add	r7, sp, #0
 801ae9a:	4603      	mov	r3, r0
 801ae9c:	6039      	str	r1, [r7, #0]
 801ae9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801aea0:	683b      	ldr	r3, [r7, #0]
 801aea2:	2212      	movs	r2, #18
 801aea4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801aea6:	4b03      	ldr	r3, [pc, #12]	@ (801aeb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 801aea8:	4618      	mov	r0, r3
 801aeaa:	370c      	adds	r7, #12
 801aeac:	46bd      	mov	sp, r7
 801aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeb2:	4770      	bx	lr
 801aeb4:	200000d8 	.word	0x200000d8

0801aeb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aeb8:	b480      	push	{r7}
 801aeba:	b083      	sub	sp, #12
 801aebc:	af00      	add	r7, sp, #0
 801aebe:	4603      	mov	r3, r0
 801aec0:	6039      	str	r1, [r7, #0]
 801aec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801aec4:	683b      	ldr	r3, [r7, #0]
 801aec6:	2204      	movs	r2, #4
 801aec8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801aeca:	4b03      	ldr	r3, [pc, #12]	@ (801aed8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801aecc:	4618      	mov	r0, r3
 801aece:	370c      	adds	r7, #12
 801aed0:	46bd      	mov	sp, r7
 801aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aed6:	4770      	bx	lr
 801aed8:	200000ec 	.word	0x200000ec

0801aedc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aedc:	b580      	push	{r7, lr}
 801aede:	b082      	sub	sp, #8
 801aee0:	af00      	add	r7, sp, #0
 801aee2:	4603      	mov	r3, r0
 801aee4:	6039      	str	r1, [r7, #0]
 801aee6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801aee8:	79fb      	ldrb	r3, [r7, #7]
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	d105      	bne.n	801aefa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801aeee:	683a      	ldr	r2, [r7, #0]
 801aef0:	4907      	ldr	r1, [pc, #28]	@ (801af10 <USBD_FS_ProductStrDescriptor+0x34>)
 801aef2:	4808      	ldr	r0, [pc, #32]	@ (801af14 <USBD_FS_ProductStrDescriptor+0x38>)
 801aef4:	f7f1 ff04 	bl	800cd00 <USBD_GetString>
 801aef8:	e004      	b.n	801af04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801aefa:	683a      	ldr	r2, [r7, #0]
 801aefc:	4904      	ldr	r1, [pc, #16]	@ (801af10 <USBD_FS_ProductStrDescriptor+0x34>)
 801aefe:	4805      	ldr	r0, [pc, #20]	@ (801af14 <USBD_FS_ProductStrDescriptor+0x38>)
 801af00:	f7f1 fefe 	bl	800cd00 <USBD_GetString>
  }
  return USBD_StrDesc;
 801af04:	4b02      	ldr	r3, [pc, #8]	@ (801af10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801af06:	4618      	mov	r0, r3
 801af08:	3708      	adds	r7, #8
 801af0a:	46bd      	mov	sp, r7
 801af0c:	bd80      	pop	{r7, pc}
 801af0e:	bf00      	nop
 801af10:	2000dcfc 	.word	0x2000dcfc
 801af14:	08020e08 	.word	0x08020e08

0801af18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801af18:	b580      	push	{r7, lr}
 801af1a:	b082      	sub	sp, #8
 801af1c:	af00      	add	r7, sp, #0
 801af1e:	4603      	mov	r3, r0
 801af20:	6039      	str	r1, [r7, #0]
 801af22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801af24:	683a      	ldr	r2, [r7, #0]
 801af26:	4904      	ldr	r1, [pc, #16]	@ (801af38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801af28:	4804      	ldr	r0, [pc, #16]	@ (801af3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801af2a:	f7f1 fee9 	bl	800cd00 <USBD_GetString>
  return USBD_StrDesc;
 801af2e:	4b02      	ldr	r3, [pc, #8]	@ (801af38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801af30:	4618      	mov	r0, r3
 801af32:	3708      	adds	r7, #8
 801af34:	46bd      	mov	sp, r7
 801af36:	bd80      	pop	{r7, pc}
 801af38:	2000dcfc 	.word	0x2000dcfc
 801af3c:	08020e20 	.word	0x08020e20

0801af40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801af40:	b580      	push	{r7, lr}
 801af42:	b082      	sub	sp, #8
 801af44:	af00      	add	r7, sp, #0
 801af46:	4603      	mov	r3, r0
 801af48:	6039      	str	r1, [r7, #0]
 801af4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801af4c:	683b      	ldr	r3, [r7, #0]
 801af4e:	221a      	movs	r2, #26
 801af50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801af52:	f000 f843 	bl	801afdc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801af56:	4b02      	ldr	r3, [pc, #8]	@ (801af60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801af58:	4618      	mov	r0, r3
 801af5a:	3708      	adds	r7, #8
 801af5c:	46bd      	mov	sp, r7
 801af5e:	bd80      	pop	{r7, pc}
 801af60:	200000f0 	.word	0x200000f0

0801af64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801af64:	b580      	push	{r7, lr}
 801af66:	b082      	sub	sp, #8
 801af68:	af00      	add	r7, sp, #0
 801af6a:	4603      	mov	r3, r0
 801af6c:	6039      	str	r1, [r7, #0]
 801af6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801af70:	79fb      	ldrb	r3, [r7, #7]
 801af72:	2b00      	cmp	r3, #0
 801af74:	d105      	bne.n	801af82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801af76:	683a      	ldr	r2, [r7, #0]
 801af78:	4907      	ldr	r1, [pc, #28]	@ (801af98 <USBD_FS_ConfigStrDescriptor+0x34>)
 801af7a:	4808      	ldr	r0, [pc, #32]	@ (801af9c <USBD_FS_ConfigStrDescriptor+0x38>)
 801af7c:	f7f1 fec0 	bl	800cd00 <USBD_GetString>
 801af80:	e004      	b.n	801af8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801af82:	683a      	ldr	r2, [r7, #0]
 801af84:	4904      	ldr	r1, [pc, #16]	@ (801af98 <USBD_FS_ConfigStrDescriptor+0x34>)
 801af86:	4805      	ldr	r0, [pc, #20]	@ (801af9c <USBD_FS_ConfigStrDescriptor+0x38>)
 801af88:	f7f1 feba 	bl	800cd00 <USBD_GetString>
  }
  return USBD_StrDesc;
 801af8c:	4b02      	ldr	r3, [pc, #8]	@ (801af98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801af8e:	4618      	mov	r0, r3
 801af90:	3708      	adds	r7, #8
 801af92:	46bd      	mov	sp, r7
 801af94:	bd80      	pop	{r7, pc}
 801af96:	bf00      	nop
 801af98:	2000dcfc 	.word	0x2000dcfc
 801af9c:	08020e34 	.word	0x08020e34

0801afa0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801afa0:	b580      	push	{r7, lr}
 801afa2:	b082      	sub	sp, #8
 801afa4:	af00      	add	r7, sp, #0
 801afa6:	4603      	mov	r3, r0
 801afa8:	6039      	str	r1, [r7, #0]
 801afaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801afac:	79fb      	ldrb	r3, [r7, #7]
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d105      	bne.n	801afbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801afb2:	683a      	ldr	r2, [r7, #0]
 801afb4:	4907      	ldr	r1, [pc, #28]	@ (801afd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801afb6:	4808      	ldr	r0, [pc, #32]	@ (801afd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801afb8:	f7f1 fea2 	bl	800cd00 <USBD_GetString>
 801afbc:	e004      	b.n	801afc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801afbe:	683a      	ldr	r2, [r7, #0]
 801afc0:	4904      	ldr	r1, [pc, #16]	@ (801afd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801afc2:	4805      	ldr	r0, [pc, #20]	@ (801afd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801afc4:	f7f1 fe9c 	bl	800cd00 <USBD_GetString>
  }
  return USBD_StrDesc;
 801afc8:	4b02      	ldr	r3, [pc, #8]	@ (801afd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801afca:	4618      	mov	r0, r3
 801afcc:	3708      	adds	r7, #8
 801afce:	46bd      	mov	sp, r7
 801afd0:	bd80      	pop	{r7, pc}
 801afd2:	bf00      	nop
 801afd4:	2000dcfc 	.word	0x2000dcfc
 801afd8:	08020e40 	.word	0x08020e40

0801afdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801afdc:	b580      	push	{r7, lr}
 801afde:	b084      	sub	sp, #16
 801afe0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801afe2:	4b0f      	ldr	r3, [pc, #60]	@ (801b020 <Get_SerialNum+0x44>)
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801afe8:	4b0e      	ldr	r3, [pc, #56]	@ (801b024 <Get_SerialNum+0x48>)
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801afee:	4b0e      	ldr	r3, [pc, #56]	@ (801b028 <Get_SerialNum+0x4c>)
 801aff0:	681b      	ldr	r3, [r3, #0]
 801aff2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801aff4:	68fa      	ldr	r2, [r7, #12]
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	4413      	add	r3, r2
 801affa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801affc:	68fb      	ldr	r3, [r7, #12]
 801affe:	2b00      	cmp	r3, #0
 801b000:	d009      	beq.n	801b016 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801b002:	2208      	movs	r2, #8
 801b004:	4909      	ldr	r1, [pc, #36]	@ (801b02c <Get_SerialNum+0x50>)
 801b006:	68f8      	ldr	r0, [r7, #12]
 801b008:	f000 f814 	bl	801b034 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801b00c:	2204      	movs	r2, #4
 801b00e:	4908      	ldr	r1, [pc, #32]	@ (801b030 <Get_SerialNum+0x54>)
 801b010:	68b8      	ldr	r0, [r7, #8]
 801b012:	f000 f80f 	bl	801b034 <IntToUnicode>
  }
}
 801b016:	bf00      	nop
 801b018:	3710      	adds	r7, #16
 801b01a:	46bd      	mov	sp, r7
 801b01c:	bd80      	pop	{r7, pc}
 801b01e:	bf00      	nop
 801b020:	1fff7a10 	.word	0x1fff7a10
 801b024:	1fff7a14 	.word	0x1fff7a14
 801b028:	1fff7a18 	.word	0x1fff7a18
 801b02c:	200000f2 	.word	0x200000f2
 801b030:	20000102 	.word	0x20000102

0801b034 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801b034:	b480      	push	{r7}
 801b036:	b087      	sub	sp, #28
 801b038:	af00      	add	r7, sp, #0
 801b03a:	60f8      	str	r0, [r7, #12]
 801b03c:	60b9      	str	r1, [r7, #8]
 801b03e:	4613      	mov	r3, r2
 801b040:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801b042:	2300      	movs	r3, #0
 801b044:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801b046:	2300      	movs	r3, #0
 801b048:	75fb      	strb	r3, [r7, #23]
 801b04a:	e027      	b.n	801b09c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801b04c:	68fb      	ldr	r3, [r7, #12]
 801b04e:	0f1b      	lsrs	r3, r3, #28
 801b050:	2b09      	cmp	r3, #9
 801b052:	d80b      	bhi.n	801b06c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801b054:	68fb      	ldr	r3, [r7, #12]
 801b056:	0f1b      	lsrs	r3, r3, #28
 801b058:	b2da      	uxtb	r2, r3
 801b05a:	7dfb      	ldrb	r3, [r7, #23]
 801b05c:	005b      	lsls	r3, r3, #1
 801b05e:	4619      	mov	r1, r3
 801b060:	68bb      	ldr	r3, [r7, #8]
 801b062:	440b      	add	r3, r1
 801b064:	3230      	adds	r2, #48	@ 0x30
 801b066:	b2d2      	uxtb	r2, r2
 801b068:	701a      	strb	r2, [r3, #0]
 801b06a:	e00a      	b.n	801b082 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801b06c:	68fb      	ldr	r3, [r7, #12]
 801b06e:	0f1b      	lsrs	r3, r3, #28
 801b070:	b2da      	uxtb	r2, r3
 801b072:	7dfb      	ldrb	r3, [r7, #23]
 801b074:	005b      	lsls	r3, r3, #1
 801b076:	4619      	mov	r1, r3
 801b078:	68bb      	ldr	r3, [r7, #8]
 801b07a:	440b      	add	r3, r1
 801b07c:	3237      	adds	r2, #55	@ 0x37
 801b07e:	b2d2      	uxtb	r2, r2
 801b080:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801b082:	68fb      	ldr	r3, [r7, #12]
 801b084:	011b      	lsls	r3, r3, #4
 801b086:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801b088:	7dfb      	ldrb	r3, [r7, #23]
 801b08a:	005b      	lsls	r3, r3, #1
 801b08c:	3301      	adds	r3, #1
 801b08e:	68ba      	ldr	r2, [r7, #8]
 801b090:	4413      	add	r3, r2
 801b092:	2200      	movs	r2, #0
 801b094:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801b096:	7dfb      	ldrb	r3, [r7, #23]
 801b098:	3301      	adds	r3, #1
 801b09a:	75fb      	strb	r3, [r7, #23]
 801b09c:	7dfa      	ldrb	r2, [r7, #23]
 801b09e:	79fb      	ldrb	r3, [r7, #7]
 801b0a0:	429a      	cmp	r2, r3
 801b0a2:	d3d3      	bcc.n	801b04c <IntToUnicode+0x18>
  }
}
 801b0a4:	bf00      	nop
 801b0a6:	bf00      	nop
 801b0a8:	371c      	adds	r7, #28
 801b0aa:	46bd      	mov	sp, r7
 801b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0b0:	4770      	bx	lr
	...

0801b0b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801b0b4:	b580      	push	{r7, lr}
 801b0b6:	b08a      	sub	sp, #40	@ 0x28
 801b0b8:	af00      	add	r7, sp, #0
 801b0ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801b0bc:	f107 0314 	add.w	r3, r7, #20
 801b0c0:	2200      	movs	r2, #0
 801b0c2:	601a      	str	r2, [r3, #0]
 801b0c4:	605a      	str	r2, [r3, #4]
 801b0c6:	609a      	str	r2, [r3, #8]
 801b0c8:	60da      	str	r2, [r3, #12]
 801b0ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	681b      	ldr	r3, [r3, #0]
 801b0d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801b0d4:	d13a      	bne.n	801b14c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801b0d6:	2300      	movs	r3, #0
 801b0d8:	613b      	str	r3, [r7, #16]
 801b0da:	4b1e      	ldr	r3, [pc, #120]	@ (801b154 <HAL_PCD_MspInit+0xa0>)
 801b0dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b0de:	4a1d      	ldr	r2, [pc, #116]	@ (801b154 <HAL_PCD_MspInit+0xa0>)
 801b0e0:	f043 0301 	orr.w	r3, r3, #1
 801b0e4:	6313      	str	r3, [r2, #48]	@ 0x30
 801b0e6:	4b1b      	ldr	r3, [pc, #108]	@ (801b154 <HAL_PCD_MspInit+0xa0>)
 801b0e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b0ea:	f003 0301 	and.w	r3, r3, #1
 801b0ee:	613b      	str	r3, [r7, #16]
 801b0f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801b0f2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801b0f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b0f8:	2302      	movs	r3, #2
 801b0fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b0fc:	2300      	movs	r3, #0
 801b0fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b100:	2303      	movs	r3, #3
 801b102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801b104:	230a      	movs	r3, #10
 801b106:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b108:	f107 0314 	add.w	r3, r7, #20
 801b10c:	4619      	mov	r1, r3
 801b10e:	4812      	ldr	r0, [pc, #72]	@ (801b158 <HAL_PCD_MspInit+0xa4>)
 801b110:	f7e9 ff7a 	bl	8005008 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801b114:	4b0f      	ldr	r3, [pc, #60]	@ (801b154 <HAL_PCD_MspInit+0xa0>)
 801b116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b118:	4a0e      	ldr	r2, [pc, #56]	@ (801b154 <HAL_PCD_MspInit+0xa0>)
 801b11a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b11e:	6353      	str	r3, [r2, #52]	@ 0x34
 801b120:	2300      	movs	r3, #0
 801b122:	60fb      	str	r3, [r7, #12]
 801b124:	4b0b      	ldr	r3, [pc, #44]	@ (801b154 <HAL_PCD_MspInit+0xa0>)
 801b126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b128:	4a0a      	ldr	r2, [pc, #40]	@ (801b154 <HAL_PCD_MspInit+0xa0>)
 801b12a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801b12e:	6453      	str	r3, [r2, #68]	@ 0x44
 801b130:	4b08      	ldr	r3, [pc, #32]	@ (801b154 <HAL_PCD_MspInit+0xa0>)
 801b132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b134:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801b138:	60fb      	str	r3, [r7, #12]
 801b13a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801b13c:	2200      	movs	r2, #0
 801b13e:	2106      	movs	r1, #6
 801b140:	2043      	movs	r0, #67	@ 0x43
 801b142:	f7e8 fd03 	bl	8003b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801b146:	2043      	movs	r0, #67	@ 0x43
 801b148:	f7e8 fd1c 	bl	8003b84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801b14c:	bf00      	nop
 801b14e:	3728      	adds	r7, #40	@ 0x28
 801b150:	46bd      	mov	sp, r7
 801b152:	bd80      	pop	{r7, pc}
 801b154:	40023800 	.word	0x40023800
 801b158:	40020000 	.word	0x40020000

0801b15c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b15c:	b580      	push	{r7, lr}
 801b15e:	b082      	sub	sp, #8
 801b160:	af00      	add	r7, sp, #0
 801b162:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801b170:	4619      	mov	r1, r3
 801b172:	4610      	mov	r0, r2
 801b174:	f7f0 fc4b 	bl	800ba0e <USBD_LL_SetupStage>
}
 801b178:	bf00      	nop
 801b17a:	3708      	adds	r7, #8
 801b17c:	46bd      	mov	sp, r7
 801b17e:	bd80      	pop	{r7, pc}

0801b180 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b180:	b580      	push	{r7, lr}
 801b182:	b082      	sub	sp, #8
 801b184:	af00      	add	r7, sp, #0
 801b186:	6078      	str	r0, [r7, #4]
 801b188:	460b      	mov	r3, r1
 801b18a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801b192:	78fa      	ldrb	r2, [r7, #3]
 801b194:	6879      	ldr	r1, [r7, #4]
 801b196:	4613      	mov	r3, r2
 801b198:	00db      	lsls	r3, r3, #3
 801b19a:	4413      	add	r3, r2
 801b19c:	009b      	lsls	r3, r3, #2
 801b19e:	440b      	add	r3, r1
 801b1a0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801b1a4:	681a      	ldr	r2, [r3, #0]
 801b1a6:	78fb      	ldrb	r3, [r7, #3]
 801b1a8:	4619      	mov	r1, r3
 801b1aa:	f7f0 fc85 	bl	800bab8 <USBD_LL_DataOutStage>
}
 801b1ae:	bf00      	nop
 801b1b0:	3708      	adds	r7, #8
 801b1b2:	46bd      	mov	sp, r7
 801b1b4:	bd80      	pop	{r7, pc}

0801b1b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b1b6:	b580      	push	{r7, lr}
 801b1b8:	b082      	sub	sp, #8
 801b1ba:	af00      	add	r7, sp, #0
 801b1bc:	6078      	str	r0, [r7, #4]
 801b1be:	460b      	mov	r3, r1
 801b1c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801b1c2:	687b      	ldr	r3, [r7, #4]
 801b1c4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801b1c8:	78fa      	ldrb	r2, [r7, #3]
 801b1ca:	6879      	ldr	r1, [r7, #4]
 801b1cc:	4613      	mov	r3, r2
 801b1ce:	00db      	lsls	r3, r3, #3
 801b1d0:	4413      	add	r3, r2
 801b1d2:	009b      	lsls	r3, r3, #2
 801b1d4:	440b      	add	r3, r1
 801b1d6:	3320      	adds	r3, #32
 801b1d8:	681a      	ldr	r2, [r3, #0]
 801b1da:	78fb      	ldrb	r3, [r7, #3]
 801b1dc:	4619      	mov	r1, r3
 801b1de:	f7f0 fd27 	bl	800bc30 <USBD_LL_DataInStage>
}
 801b1e2:	bf00      	nop
 801b1e4:	3708      	adds	r7, #8
 801b1e6:	46bd      	mov	sp, r7
 801b1e8:	bd80      	pop	{r7, pc}

0801b1ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b1ea:	b580      	push	{r7, lr}
 801b1ec:	b082      	sub	sp, #8
 801b1ee:	af00      	add	r7, sp, #0
 801b1f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801b1f8:	4618      	mov	r0, r3
 801b1fa:	f7f0 fe6b 	bl	800bed4 <USBD_LL_SOF>
}
 801b1fe:	bf00      	nop
 801b200:	3708      	adds	r7, #8
 801b202:	46bd      	mov	sp, r7
 801b204:	bd80      	pop	{r7, pc}

0801b206 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b206:	b580      	push	{r7, lr}
 801b208:	b084      	sub	sp, #16
 801b20a:	af00      	add	r7, sp, #0
 801b20c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801b20e:	2301      	movs	r3, #1
 801b210:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	79db      	ldrb	r3, [r3, #7]
 801b216:	2b00      	cmp	r3, #0
 801b218:	d102      	bne.n	801b220 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801b21a:	2300      	movs	r3, #0
 801b21c:	73fb      	strb	r3, [r7, #15]
 801b21e:	e008      	b.n	801b232 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	79db      	ldrb	r3, [r3, #7]
 801b224:	2b02      	cmp	r3, #2
 801b226:	d102      	bne.n	801b22e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801b228:	2301      	movs	r3, #1
 801b22a:	73fb      	strb	r3, [r7, #15]
 801b22c:	e001      	b.n	801b232 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801b22e:	f7e5 ff6d 	bl	800110c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801b238:	7bfa      	ldrb	r2, [r7, #15]
 801b23a:	4611      	mov	r1, r2
 801b23c:	4618      	mov	r0, r3
 801b23e:	f7f0 fe05 	bl	800be4c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801b248:	4618      	mov	r0, r3
 801b24a:	f7f0 fdac 	bl	800bda6 <USBD_LL_Reset>
}
 801b24e:	bf00      	nop
 801b250:	3710      	adds	r7, #16
 801b252:	46bd      	mov	sp, r7
 801b254:	bd80      	pop	{r7, pc}
	...

0801b258 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b258:	b580      	push	{r7, lr}
 801b25a:	b082      	sub	sp, #8
 801b25c:	af00      	add	r7, sp, #0
 801b25e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801b266:	4618      	mov	r0, r3
 801b268:	f7f0 fe00 	bl	800be6c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801b274:	681b      	ldr	r3, [r3, #0]
 801b276:	687a      	ldr	r2, [r7, #4]
 801b278:	6812      	ldr	r2, [r2, #0]
 801b27a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801b27e:	f043 0301 	orr.w	r3, r3, #1
 801b282:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	7adb      	ldrb	r3, [r3, #11]
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d005      	beq.n	801b298 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801b28c:	4b04      	ldr	r3, [pc, #16]	@ (801b2a0 <HAL_PCD_SuspendCallback+0x48>)
 801b28e:	691b      	ldr	r3, [r3, #16]
 801b290:	4a03      	ldr	r2, [pc, #12]	@ (801b2a0 <HAL_PCD_SuspendCallback+0x48>)
 801b292:	f043 0306 	orr.w	r3, r3, #6
 801b296:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801b298:	bf00      	nop
 801b29a:	3708      	adds	r7, #8
 801b29c:	46bd      	mov	sp, r7
 801b29e:	bd80      	pop	{r7, pc}
 801b2a0:	e000ed00 	.word	0xe000ed00

0801b2a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b2a4:	b580      	push	{r7, lr}
 801b2a6:	b082      	sub	sp, #8
 801b2a8:	af00      	add	r7, sp, #0
 801b2aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801b2b2:	4618      	mov	r0, r3
 801b2b4:	f7f0 fdf6 	bl	800bea4 <USBD_LL_Resume>
}
 801b2b8:	bf00      	nop
 801b2ba:	3708      	adds	r7, #8
 801b2bc:	46bd      	mov	sp, r7
 801b2be:	bd80      	pop	{r7, pc}

0801b2c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b2c0:	b580      	push	{r7, lr}
 801b2c2:	b082      	sub	sp, #8
 801b2c4:	af00      	add	r7, sp, #0
 801b2c6:	6078      	str	r0, [r7, #4]
 801b2c8:	460b      	mov	r3, r1
 801b2ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801b2d2:	78fa      	ldrb	r2, [r7, #3]
 801b2d4:	4611      	mov	r1, r2
 801b2d6:	4618      	mov	r0, r3
 801b2d8:	f7f0 fe4e 	bl	800bf78 <USBD_LL_IsoOUTIncomplete>
}
 801b2dc:	bf00      	nop
 801b2de:	3708      	adds	r7, #8
 801b2e0:	46bd      	mov	sp, r7
 801b2e2:	bd80      	pop	{r7, pc}

0801b2e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b2e4:	b580      	push	{r7, lr}
 801b2e6:	b082      	sub	sp, #8
 801b2e8:	af00      	add	r7, sp, #0
 801b2ea:	6078      	str	r0, [r7, #4]
 801b2ec:	460b      	mov	r3, r1
 801b2ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801b2f6:	78fa      	ldrb	r2, [r7, #3]
 801b2f8:	4611      	mov	r1, r2
 801b2fa:	4618      	mov	r0, r3
 801b2fc:	f7f0 fe0a 	bl	800bf14 <USBD_LL_IsoINIncomplete>
}
 801b300:	bf00      	nop
 801b302:	3708      	adds	r7, #8
 801b304:	46bd      	mov	sp, r7
 801b306:	bd80      	pop	{r7, pc}

0801b308 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b308:	b580      	push	{r7, lr}
 801b30a:	b082      	sub	sp, #8
 801b30c:	af00      	add	r7, sp, #0
 801b30e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801b316:	4618      	mov	r0, r3
 801b318:	f7f0 fe60 	bl	800bfdc <USBD_LL_DevConnected>
}
 801b31c:	bf00      	nop
 801b31e:	3708      	adds	r7, #8
 801b320:	46bd      	mov	sp, r7
 801b322:	bd80      	pop	{r7, pc}

0801b324 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b324:	b580      	push	{r7, lr}
 801b326:	b082      	sub	sp, #8
 801b328:	af00      	add	r7, sp, #0
 801b32a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801b332:	4618      	mov	r0, r3
 801b334:	f7f0 fe5d 	bl	800bff2 <USBD_LL_DevDisconnected>
}
 801b338:	bf00      	nop
 801b33a:	3708      	adds	r7, #8
 801b33c:	46bd      	mov	sp, r7
 801b33e:	bd80      	pop	{r7, pc}

0801b340 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801b340:	b580      	push	{r7, lr}
 801b342:	b082      	sub	sp, #8
 801b344:	af00      	add	r7, sp, #0
 801b346:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	781b      	ldrb	r3, [r3, #0]
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	d13c      	bne.n	801b3ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801b350:	4a20      	ldr	r2, [pc, #128]	@ (801b3d4 <USBD_LL_Init+0x94>)
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	4a1e      	ldr	r2, [pc, #120]	@ (801b3d4 <USBD_LL_Init+0x94>)
 801b35c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801b360:	4b1c      	ldr	r3, [pc, #112]	@ (801b3d4 <USBD_LL_Init+0x94>)
 801b362:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801b366:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801b368:	4b1a      	ldr	r3, [pc, #104]	@ (801b3d4 <USBD_LL_Init+0x94>)
 801b36a:	2204      	movs	r2, #4
 801b36c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801b36e:	4b19      	ldr	r3, [pc, #100]	@ (801b3d4 <USBD_LL_Init+0x94>)
 801b370:	2202      	movs	r2, #2
 801b372:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801b374:	4b17      	ldr	r3, [pc, #92]	@ (801b3d4 <USBD_LL_Init+0x94>)
 801b376:	2200      	movs	r2, #0
 801b378:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801b37a:	4b16      	ldr	r3, [pc, #88]	@ (801b3d4 <USBD_LL_Init+0x94>)
 801b37c:	2202      	movs	r2, #2
 801b37e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801b380:	4b14      	ldr	r3, [pc, #80]	@ (801b3d4 <USBD_LL_Init+0x94>)
 801b382:	2200      	movs	r2, #0
 801b384:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801b386:	4b13      	ldr	r3, [pc, #76]	@ (801b3d4 <USBD_LL_Init+0x94>)
 801b388:	2200      	movs	r2, #0
 801b38a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801b38c:	4b11      	ldr	r3, [pc, #68]	@ (801b3d4 <USBD_LL_Init+0x94>)
 801b38e:	2200      	movs	r2, #0
 801b390:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801b392:	4b10      	ldr	r3, [pc, #64]	@ (801b3d4 <USBD_LL_Init+0x94>)
 801b394:	2200      	movs	r2, #0
 801b396:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801b398:	4b0e      	ldr	r3, [pc, #56]	@ (801b3d4 <USBD_LL_Init+0x94>)
 801b39a:	2200      	movs	r2, #0
 801b39c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801b39e:	480d      	ldr	r0, [pc, #52]	@ (801b3d4 <USBD_LL_Init+0x94>)
 801b3a0:	f7e9 ffe7 	bl	8005372 <HAL_PCD_Init>
 801b3a4:	4603      	mov	r3, r0
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d001      	beq.n	801b3ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801b3aa:	f7e5 feaf 	bl	800110c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801b3ae:	2180      	movs	r1, #128	@ 0x80
 801b3b0:	4808      	ldr	r0, [pc, #32]	@ (801b3d4 <USBD_LL_Init+0x94>)
 801b3b2:	f7eb fa14 	bl	80067de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801b3b6:	2240      	movs	r2, #64	@ 0x40
 801b3b8:	2100      	movs	r1, #0
 801b3ba:	4806      	ldr	r0, [pc, #24]	@ (801b3d4 <USBD_LL_Init+0x94>)
 801b3bc:	f7eb f9c8 	bl	8006750 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801b3c0:	2280      	movs	r2, #128	@ 0x80
 801b3c2:	2101      	movs	r1, #1
 801b3c4:	4803      	ldr	r0, [pc, #12]	@ (801b3d4 <USBD_LL_Init+0x94>)
 801b3c6:	f7eb f9c3 	bl	8006750 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801b3ca:	2300      	movs	r3, #0
}
 801b3cc:	4618      	mov	r0, r3
 801b3ce:	3708      	adds	r7, #8
 801b3d0:	46bd      	mov	sp, r7
 801b3d2:	bd80      	pop	{r7, pc}
 801b3d4:	2000defc 	.word	0x2000defc

0801b3d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801b3d8:	b580      	push	{r7, lr}
 801b3da:	b084      	sub	sp, #16
 801b3dc:	af00      	add	r7, sp, #0
 801b3de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b3e0:	2300      	movs	r3, #0
 801b3e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b3e4:	2300      	movs	r3, #0
 801b3e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b3ee:	4618      	mov	r0, r3
 801b3f0:	f7ea f8ce 	bl	8005590 <HAL_PCD_Start>
 801b3f4:	4603      	mov	r3, r0
 801b3f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b3f8:	7bfb      	ldrb	r3, [r7, #15]
 801b3fa:	4618      	mov	r0, r3
 801b3fc:	f000 f942 	bl	801b684 <USBD_Get_USB_Status>
 801b400:	4603      	mov	r3, r0
 801b402:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b404:	7bbb      	ldrb	r3, [r7, #14]
}
 801b406:	4618      	mov	r0, r3
 801b408:	3710      	adds	r7, #16
 801b40a:	46bd      	mov	sp, r7
 801b40c:	bd80      	pop	{r7, pc}

0801b40e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801b40e:	b580      	push	{r7, lr}
 801b410:	b084      	sub	sp, #16
 801b412:	af00      	add	r7, sp, #0
 801b414:	6078      	str	r0, [r7, #4]
 801b416:	4608      	mov	r0, r1
 801b418:	4611      	mov	r1, r2
 801b41a:	461a      	mov	r2, r3
 801b41c:	4603      	mov	r3, r0
 801b41e:	70fb      	strb	r3, [r7, #3]
 801b420:	460b      	mov	r3, r1
 801b422:	70bb      	strb	r3, [r7, #2]
 801b424:	4613      	mov	r3, r2
 801b426:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b428:	2300      	movs	r3, #0
 801b42a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b42c:	2300      	movs	r3, #0
 801b42e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801b436:	78bb      	ldrb	r3, [r7, #2]
 801b438:	883a      	ldrh	r2, [r7, #0]
 801b43a:	78f9      	ldrb	r1, [r7, #3]
 801b43c:	f7ea fda2 	bl	8005f84 <HAL_PCD_EP_Open>
 801b440:	4603      	mov	r3, r0
 801b442:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b444:	7bfb      	ldrb	r3, [r7, #15]
 801b446:	4618      	mov	r0, r3
 801b448:	f000 f91c 	bl	801b684 <USBD_Get_USB_Status>
 801b44c:	4603      	mov	r3, r0
 801b44e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b450:	7bbb      	ldrb	r3, [r7, #14]
}
 801b452:	4618      	mov	r0, r3
 801b454:	3710      	adds	r7, #16
 801b456:	46bd      	mov	sp, r7
 801b458:	bd80      	pop	{r7, pc}

0801b45a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b45a:	b580      	push	{r7, lr}
 801b45c:	b084      	sub	sp, #16
 801b45e:	af00      	add	r7, sp, #0
 801b460:	6078      	str	r0, [r7, #4]
 801b462:	460b      	mov	r3, r1
 801b464:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b466:	2300      	movs	r3, #0
 801b468:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b46a:	2300      	movs	r3, #0
 801b46c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b474:	78fa      	ldrb	r2, [r7, #3]
 801b476:	4611      	mov	r1, r2
 801b478:	4618      	mov	r0, r3
 801b47a:	f7ea fded 	bl	8006058 <HAL_PCD_EP_Close>
 801b47e:	4603      	mov	r3, r0
 801b480:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b482:	7bfb      	ldrb	r3, [r7, #15]
 801b484:	4618      	mov	r0, r3
 801b486:	f000 f8fd 	bl	801b684 <USBD_Get_USB_Status>
 801b48a:	4603      	mov	r3, r0
 801b48c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b48e:	7bbb      	ldrb	r3, [r7, #14]
}
 801b490:	4618      	mov	r0, r3
 801b492:	3710      	adds	r7, #16
 801b494:	46bd      	mov	sp, r7
 801b496:	bd80      	pop	{r7, pc}

0801b498 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b498:	b580      	push	{r7, lr}
 801b49a:	b084      	sub	sp, #16
 801b49c:	af00      	add	r7, sp, #0
 801b49e:	6078      	str	r0, [r7, #4]
 801b4a0:	460b      	mov	r3, r1
 801b4a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b4a4:	2300      	movs	r3, #0
 801b4a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b4a8:	2300      	movs	r3, #0
 801b4aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b4b2:	78fa      	ldrb	r2, [r7, #3]
 801b4b4:	4611      	mov	r1, r2
 801b4b6:	4618      	mov	r0, r3
 801b4b8:	f7ea fea5 	bl	8006206 <HAL_PCD_EP_SetStall>
 801b4bc:	4603      	mov	r3, r0
 801b4be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b4c0:	7bfb      	ldrb	r3, [r7, #15]
 801b4c2:	4618      	mov	r0, r3
 801b4c4:	f000 f8de 	bl	801b684 <USBD_Get_USB_Status>
 801b4c8:	4603      	mov	r3, r0
 801b4ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b4cc:	7bbb      	ldrb	r3, [r7, #14]
}
 801b4ce:	4618      	mov	r0, r3
 801b4d0:	3710      	adds	r7, #16
 801b4d2:	46bd      	mov	sp, r7
 801b4d4:	bd80      	pop	{r7, pc}

0801b4d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b4d6:	b580      	push	{r7, lr}
 801b4d8:	b084      	sub	sp, #16
 801b4da:	af00      	add	r7, sp, #0
 801b4dc:	6078      	str	r0, [r7, #4]
 801b4de:	460b      	mov	r3, r1
 801b4e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b4e2:	2300      	movs	r3, #0
 801b4e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b4e6:	2300      	movs	r3, #0
 801b4e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b4f0:	78fa      	ldrb	r2, [r7, #3]
 801b4f2:	4611      	mov	r1, r2
 801b4f4:	4618      	mov	r0, r3
 801b4f6:	f7ea fee9 	bl	80062cc <HAL_PCD_EP_ClrStall>
 801b4fa:	4603      	mov	r3, r0
 801b4fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b4fe:	7bfb      	ldrb	r3, [r7, #15]
 801b500:	4618      	mov	r0, r3
 801b502:	f000 f8bf 	bl	801b684 <USBD_Get_USB_Status>
 801b506:	4603      	mov	r3, r0
 801b508:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b50a:	7bbb      	ldrb	r3, [r7, #14]
}
 801b50c:	4618      	mov	r0, r3
 801b50e:	3710      	adds	r7, #16
 801b510:	46bd      	mov	sp, r7
 801b512:	bd80      	pop	{r7, pc}

0801b514 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b514:	b480      	push	{r7}
 801b516:	b085      	sub	sp, #20
 801b518:	af00      	add	r7, sp, #0
 801b51a:	6078      	str	r0, [r7, #4]
 801b51c:	460b      	mov	r3, r1
 801b51e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b526:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801b528:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	da0b      	bge.n	801b548 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801b530:	78fb      	ldrb	r3, [r7, #3]
 801b532:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801b536:	68f9      	ldr	r1, [r7, #12]
 801b538:	4613      	mov	r3, r2
 801b53a:	00db      	lsls	r3, r3, #3
 801b53c:	4413      	add	r3, r2
 801b53e:	009b      	lsls	r3, r3, #2
 801b540:	440b      	add	r3, r1
 801b542:	3316      	adds	r3, #22
 801b544:	781b      	ldrb	r3, [r3, #0]
 801b546:	e00b      	b.n	801b560 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801b548:	78fb      	ldrb	r3, [r7, #3]
 801b54a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801b54e:	68f9      	ldr	r1, [r7, #12]
 801b550:	4613      	mov	r3, r2
 801b552:	00db      	lsls	r3, r3, #3
 801b554:	4413      	add	r3, r2
 801b556:	009b      	lsls	r3, r3, #2
 801b558:	440b      	add	r3, r1
 801b55a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801b55e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801b560:	4618      	mov	r0, r3
 801b562:	3714      	adds	r7, #20
 801b564:	46bd      	mov	sp, r7
 801b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b56a:	4770      	bx	lr

0801b56c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801b56c:	b580      	push	{r7, lr}
 801b56e:	b084      	sub	sp, #16
 801b570:	af00      	add	r7, sp, #0
 801b572:	6078      	str	r0, [r7, #4]
 801b574:	460b      	mov	r3, r1
 801b576:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b578:	2300      	movs	r3, #0
 801b57a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b57c:	2300      	movs	r3, #0
 801b57e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b586:	78fa      	ldrb	r2, [r7, #3]
 801b588:	4611      	mov	r1, r2
 801b58a:	4618      	mov	r0, r3
 801b58c:	f7ea fcd6 	bl	8005f3c <HAL_PCD_SetAddress>
 801b590:	4603      	mov	r3, r0
 801b592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b594:	7bfb      	ldrb	r3, [r7, #15]
 801b596:	4618      	mov	r0, r3
 801b598:	f000 f874 	bl	801b684 <USBD_Get_USB_Status>
 801b59c:	4603      	mov	r3, r0
 801b59e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b5a0:	7bbb      	ldrb	r3, [r7, #14]
}
 801b5a2:	4618      	mov	r0, r3
 801b5a4:	3710      	adds	r7, #16
 801b5a6:	46bd      	mov	sp, r7
 801b5a8:	bd80      	pop	{r7, pc}

0801b5aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b5aa:	b580      	push	{r7, lr}
 801b5ac:	b086      	sub	sp, #24
 801b5ae:	af00      	add	r7, sp, #0
 801b5b0:	60f8      	str	r0, [r7, #12]
 801b5b2:	607a      	str	r2, [r7, #4]
 801b5b4:	603b      	str	r3, [r7, #0]
 801b5b6:	460b      	mov	r3, r1
 801b5b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b5ba:	2300      	movs	r3, #0
 801b5bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b5be:	2300      	movs	r3, #0
 801b5c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801b5c2:	68fb      	ldr	r3, [r7, #12]
 801b5c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801b5c8:	7af9      	ldrb	r1, [r7, #11]
 801b5ca:	683b      	ldr	r3, [r7, #0]
 801b5cc:	687a      	ldr	r2, [r7, #4]
 801b5ce:	f7ea fde0 	bl	8006192 <HAL_PCD_EP_Transmit>
 801b5d2:	4603      	mov	r3, r0
 801b5d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b5d6:	7dfb      	ldrb	r3, [r7, #23]
 801b5d8:	4618      	mov	r0, r3
 801b5da:	f000 f853 	bl	801b684 <USBD_Get_USB_Status>
 801b5de:	4603      	mov	r3, r0
 801b5e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b5e2:	7dbb      	ldrb	r3, [r7, #22]
}
 801b5e4:	4618      	mov	r0, r3
 801b5e6:	3718      	adds	r7, #24
 801b5e8:	46bd      	mov	sp, r7
 801b5ea:	bd80      	pop	{r7, pc}

0801b5ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b5ec:	b580      	push	{r7, lr}
 801b5ee:	b086      	sub	sp, #24
 801b5f0:	af00      	add	r7, sp, #0
 801b5f2:	60f8      	str	r0, [r7, #12]
 801b5f4:	607a      	str	r2, [r7, #4]
 801b5f6:	603b      	str	r3, [r7, #0]
 801b5f8:	460b      	mov	r3, r1
 801b5fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b5fc:	2300      	movs	r3, #0
 801b5fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b600:	2300      	movs	r3, #0
 801b602:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801b604:	68fb      	ldr	r3, [r7, #12]
 801b606:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801b60a:	7af9      	ldrb	r1, [r7, #11]
 801b60c:	683b      	ldr	r3, [r7, #0]
 801b60e:	687a      	ldr	r2, [r7, #4]
 801b610:	f7ea fd6c 	bl	80060ec <HAL_PCD_EP_Receive>
 801b614:	4603      	mov	r3, r0
 801b616:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b618:	7dfb      	ldrb	r3, [r7, #23]
 801b61a:	4618      	mov	r0, r3
 801b61c:	f000 f832 	bl	801b684 <USBD_Get_USB_Status>
 801b620:	4603      	mov	r3, r0
 801b622:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b624:	7dbb      	ldrb	r3, [r7, #22]
}
 801b626:	4618      	mov	r0, r3
 801b628:	3718      	adds	r7, #24
 801b62a:	46bd      	mov	sp, r7
 801b62c:	bd80      	pop	{r7, pc}

0801b62e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b62e:	b580      	push	{r7, lr}
 801b630:	b082      	sub	sp, #8
 801b632:	af00      	add	r7, sp, #0
 801b634:	6078      	str	r0, [r7, #4]
 801b636:	460b      	mov	r3, r1
 801b638:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801b640:	78fa      	ldrb	r2, [r7, #3]
 801b642:	4611      	mov	r1, r2
 801b644:	4618      	mov	r0, r3
 801b646:	f7ea fd8c 	bl	8006162 <HAL_PCD_EP_GetRxCount>
 801b64a:	4603      	mov	r3, r0
}
 801b64c:	4618      	mov	r0, r3
 801b64e:	3708      	adds	r7, #8
 801b650:	46bd      	mov	sp, r7
 801b652:	bd80      	pop	{r7, pc}

0801b654 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801b654:	b480      	push	{r7}
 801b656:	b083      	sub	sp, #12
 801b658:	af00      	add	r7, sp, #0
 801b65a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801b65c:	4b03      	ldr	r3, [pc, #12]	@ (801b66c <USBD_static_malloc+0x18>)
}
 801b65e:	4618      	mov	r0, r3
 801b660:	370c      	adds	r7, #12
 801b662:	46bd      	mov	sp, r7
 801b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b668:	4770      	bx	lr
 801b66a:	bf00      	nop
 801b66c:	2000e3e0 	.word	0x2000e3e0

0801b670 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801b670:	b480      	push	{r7}
 801b672:	b083      	sub	sp, #12
 801b674:	af00      	add	r7, sp, #0
 801b676:	6078      	str	r0, [r7, #4]

}
 801b678:	bf00      	nop
 801b67a:	370c      	adds	r7, #12
 801b67c:	46bd      	mov	sp, r7
 801b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b682:	4770      	bx	lr

0801b684 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801b684:	b480      	push	{r7}
 801b686:	b085      	sub	sp, #20
 801b688:	af00      	add	r7, sp, #0
 801b68a:	4603      	mov	r3, r0
 801b68c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b68e:	2300      	movs	r3, #0
 801b690:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801b692:	79fb      	ldrb	r3, [r7, #7]
 801b694:	2b03      	cmp	r3, #3
 801b696:	d817      	bhi.n	801b6c8 <USBD_Get_USB_Status+0x44>
 801b698:	a201      	add	r2, pc, #4	@ (adr r2, 801b6a0 <USBD_Get_USB_Status+0x1c>)
 801b69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b69e:	bf00      	nop
 801b6a0:	0801b6b1 	.word	0x0801b6b1
 801b6a4:	0801b6b7 	.word	0x0801b6b7
 801b6a8:	0801b6bd 	.word	0x0801b6bd
 801b6ac:	0801b6c3 	.word	0x0801b6c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801b6b0:	2300      	movs	r3, #0
 801b6b2:	73fb      	strb	r3, [r7, #15]
    break;
 801b6b4:	e00b      	b.n	801b6ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801b6b6:	2303      	movs	r3, #3
 801b6b8:	73fb      	strb	r3, [r7, #15]
    break;
 801b6ba:	e008      	b.n	801b6ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801b6bc:	2301      	movs	r3, #1
 801b6be:	73fb      	strb	r3, [r7, #15]
    break;
 801b6c0:	e005      	b.n	801b6ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801b6c2:	2303      	movs	r3, #3
 801b6c4:	73fb      	strb	r3, [r7, #15]
    break;
 801b6c6:	e002      	b.n	801b6ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801b6c8:	2303      	movs	r3, #3
 801b6ca:	73fb      	strb	r3, [r7, #15]
    break;
 801b6cc:	bf00      	nop
  }
  return usb_status;
 801b6ce:	7bfb      	ldrb	r3, [r7, #15]
}
 801b6d0:	4618      	mov	r0, r3
 801b6d2:	3714      	adds	r7, #20
 801b6d4:	46bd      	mov	sp, r7
 801b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6da:	4770      	bx	lr

0801b6dc <rand>:
 801b6dc:	4b16      	ldr	r3, [pc, #88]	@ (801b738 <rand+0x5c>)
 801b6de:	b510      	push	{r4, lr}
 801b6e0:	681c      	ldr	r4, [r3, #0]
 801b6e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b6e4:	b9b3      	cbnz	r3, 801b714 <rand+0x38>
 801b6e6:	2018      	movs	r0, #24
 801b6e8:	f000 fb0e 	bl	801bd08 <malloc>
 801b6ec:	4602      	mov	r2, r0
 801b6ee:	6320      	str	r0, [r4, #48]	@ 0x30
 801b6f0:	b920      	cbnz	r0, 801b6fc <rand+0x20>
 801b6f2:	4b12      	ldr	r3, [pc, #72]	@ (801b73c <rand+0x60>)
 801b6f4:	4812      	ldr	r0, [pc, #72]	@ (801b740 <rand+0x64>)
 801b6f6:	2152      	movs	r1, #82	@ 0x52
 801b6f8:	f000 fa9e 	bl	801bc38 <__assert_func>
 801b6fc:	4911      	ldr	r1, [pc, #68]	@ (801b744 <rand+0x68>)
 801b6fe:	4b12      	ldr	r3, [pc, #72]	@ (801b748 <rand+0x6c>)
 801b700:	e9c0 1300 	strd	r1, r3, [r0]
 801b704:	4b11      	ldr	r3, [pc, #68]	@ (801b74c <rand+0x70>)
 801b706:	6083      	str	r3, [r0, #8]
 801b708:	230b      	movs	r3, #11
 801b70a:	8183      	strh	r3, [r0, #12]
 801b70c:	2100      	movs	r1, #0
 801b70e:	2001      	movs	r0, #1
 801b710:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b714:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b716:	480e      	ldr	r0, [pc, #56]	@ (801b750 <rand+0x74>)
 801b718:	690b      	ldr	r3, [r1, #16]
 801b71a:	694c      	ldr	r4, [r1, #20]
 801b71c:	4a0d      	ldr	r2, [pc, #52]	@ (801b754 <rand+0x78>)
 801b71e:	4358      	muls	r0, r3
 801b720:	fb02 0004 	mla	r0, r2, r4, r0
 801b724:	fba3 3202 	umull	r3, r2, r3, r2
 801b728:	3301      	adds	r3, #1
 801b72a:	eb40 0002 	adc.w	r0, r0, r2
 801b72e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801b732:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801b736:	bd10      	pop	{r4, pc}
 801b738:	20000118 	.word	0x20000118
 801b73c:	08020fa0 	.word	0x08020fa0
 801b740:	08020fb7 	.word	0x08020fb7
 801b744:	abcd330e 	.word	0xabcd330e
 801b748:	e66d1234 	.word	0xe66d1234
 801b74c:	0005deec 	.word	0x0005deec
 801b750:	5851f42d 	.word	0x5851f42d
 801b754:	4c957f2d 	.word	0x4c957f2d

0801b758 <std>:
 801b758:	2300      	movs	r3, #0
 801b75a:	b510      	push	{r4, lr}
 801b75c:	4604      	mov	r4, r0
 801b75e:	e9c0 3300 	strd	r3, r3, [r0]
 801b762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b766:	6083      	str	r3, [r0, #8]
 801b768:	8181      	strh	r1, [r0, #12]
 801b76a:	6643      	str	r3, [r0, #100]	@ 0x64
 801b76c:	81c2      	strh	r2, [r0, #14]
 801b76e:	6183      	str	r3, [r0, #24]
 801b770:	4619      	mov	r1, r3
 801b772:	2208      	movs	r2, #8
 801b774:	305c      	adds	r0, #92	@ 0x5c
 801b776:	f000 f966 	bl	801ba46 <memset>
 801b77a:	4b0d      	ldr	r3, [pc, #52]	@ (801b7b0 <std+0x58>)
 801b77c:	6263      	str	r3, [r4, #36]	@ 0x24
 801b77e:	4b0d      	ldr	r3, [pc, #52]	@ (801b7b4 <std+0x5c>)
 801b780:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b782:	4b0d      	ldr	r3, [pc, #52]	@ (801b7b8 <std+0x60>)
 801b784:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b786:	4b0d      	ldr	r3, [pc, #52]	@ (801b7bc <std+0x64>)
 801b788:	6323      	str	r3, [r4, #48]	@ 0x30
 801b78a:	4b0d      	ldr	r3, [pc, #52]	@ (801b7c0 <std+0x68>)
 801b78c:	6224      	str	r4, [r4, #32]
 801b78e:	429c      	cmp	r4, r3
 801b790:	d006      	beq.n	801b7a0 <std+0x48>
 801b792:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b796:	4294      	cmp	r4, r2
 801b798:	d002      	beq.n	801b7a0 <std+0x48>
 801b79a:	33d0      	adds	r3, #208	@ 0xd0
 801b79c:	429c      	cmp	r4, r3
 801b79e:	d105      	bne.n	801b7ac <std+0x54>
 801b7a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b7a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b7a8:	f000 ba2c 	b.w	801bc04 <__retarget_lock_init_recursive>
 801b7ac:	bd10      	pop	{r4, pc}
 801b7ae:	bf00      	nop
 801b7b0:	0801b96d 	.word	0x0801b96d
 801b7b4:	0801b98f 	.word	0x0801b98f
 801b7b8:	0801b9c7 	.word	0x0801b9c7
 801b7bc:	0801b9eb 	.word	0x0801b9eb
 801b7c0:	2000e600 	.word	0x2000e600

0801b7c4 <stdio_exit_handler>:
 801b7c4:	4a02      	ldr	r2, [pc, #8]	@ (801b7d0 <stdio_exit_handler+0xc>)
 801b7c6:	4903      	ldr	r1, [pc, #12]	@ (801b7d4 <stdio_exit_handler+0x10>)
 801b7c8:	4803      	ldr	r0, [pc, #12]	@ (801b7d8 <stdio_exit_handler+0x14>)
 801b7ca:	f000 b869 	b.w	801b8a0 <_fwalk_sglue>
 801b7ce:	bf00      	nop
 801b7d0:	2000010c 	.word	0x2000010c
 801b7d4:	0801c7c9 	.word	0x0801c7c9
 801b7d8:	2000011c 	.word	0x2000011c

0801b7dc <cleanup_stdio>:
 801b7dc:	6841      	ldr	r1, [r0, #4]
 801b7de:	4b0c      	ldr	r3, [pc, #48]	@ (801b810 <cleanup_stdio+0x34>)
 801b7e0:	4299      	cmp	r1, r3
 801b7e2:	b510      	push	{r4, lr}
 801b7e4:	4604      	mov	r4, r0
 801b7e6:	d001      	beq.n	801b7ec <cleanup_stdio+0x10>
 801b7e8:	f000 ffee 	bl	801c7c8 <_fflush_r>
 801b7ec:	68a1      	ldr	r1, [r4, #8]
 801b7ee:	4b09      	ldr	r3, [pc, #36]	@ (801b814 <cleanup_stdio+0x38>)
 801b7f0:	4299      	cmp	r1, r3
 801b7f2:	d002      	beq.n	801b7fa <cleanup_stdio+0x1e>
 801b7f4:	4620      	mov	r0, r4
 801b7f6:	f000 ffe7 	bl	801c7c8 <_fflush_r>
 801b7fa:	68e1      	ldr	r1, [r4, #12]
 801b7fc:	4b06      	ldr	r3, [pc, #24]	@ (801b818 <cleanup_stdio+0x3c>)
 801b7fe:	4299      	cmp	r1, r3
 801b800:	d004      	beq.n	801b80c <cleanup_stdio+0x30>
 801b802:	4620      	mov	r0, r4
 801b804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b808:	f000 bfde 	b.w	801c7c8 <_fflush_r>
 801b80c:	bd10      	pop	{r4, pc}
 801b80e:	bf00      	nop
 801b810:	2000e600 	.word	0x2000e600
 801b814:	2000e668 	.word	0x2000e668
 801b818:	2000e6d0 	.word	0x2000e6d0

0801b81c <global_stdio_init.part.0>:
 801b81c:	b510      	push	{r4, lr}
 801b81e:	4b0b      	ldr	r3, [pc, #44]	@ (801b84c <global_stdio_init.part.0+0x30>)
 801b820:	4c0b      	ldr	r4, [pc, #44]	@ (801b850 <global_stdio_init.part.0+0x34>)
 801b822:	4a0c      	ldr	r2, [pc, #48]	@ (801b854 <global_stdio_init.part.0+0x38>)
 801b824:	601a      	str	r2, [r3, #0]
 801b826:	4620      	mov	r0, r4
 801b828:	2200      	movs	r2, #0
 801b82a:	2104      	movs	r1, #4
 801b82c:	f7ff ff94 	bl	801b758 <std>
 801b830:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b834:	2201      	movs	r2, #1
 801b836:	2109      	movs	r1, #9
 801b838:	f7ff ff8e 	bl	801b758 <std>
 801b83c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b840:	2202      	movs	r2, #2
 801b842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b846:	2112      	movs	r1, #18
 801b848:	f7ff bf86 	b.w	801b758 <std>
 801b84c:	2000e738 	.word	0x2000e738
 801b850:	2000e600 	.word	0x2000e600
 801b854:	0801b7c5 	.word	0x0801b7c5

0801b858 <__sfp_lock_acquire>:
 801b858:	4801      	ldr	r0, [pc, #4]	@ (801b860 <__sfp_lock_acquire+0x8>)
 801b85a:	f000 b9d4 	b.w	801bc06 <__retarget_lock_acquire_recursive>
 801b85e:	bf00      	nop
 801b860:	2000e741 	.word	0x2000e741

0801b864 <__sfp_lock_release>:
 801b864:	4801      	ldr	r0, [pc, #4]	@ (801b86c <__sfp_lock_release+0x8>)
 801b866:	f000 b9cf 	b.w	801bc08 <__retarget_lock_release_recursive>
 801b86a:	bf00      	nop
 801b86c:	2000e741 	.word	0x2000e741

0801b870 <__sinit>:
 801b870:	b510      	push	{r4, lr}
 801b872:	4604      	mov	r4, r0
 801b874:	f7ff fff0 	bl	801b858 <__sfp_lock_acquire>
 801b878:	6a23      	ldr	r3, [r4, #32]
 801b87a:	b11b      	cbz	r3, 801b884 <__sinit+0x14>
 801b87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b880:	f7ff bff0 	b.w	801b864 <__sfp_lock_release>
 801b884:	4b04      	ldr	r3, [pc, #16]	@ (801b898 <__sinit+0x28>)
 801b886:	6223      	str	r3, [r4, #32]
 801b888:	4b04      	ldr	r3, [pc, #16]	@ (801b89c <__sinit+0x2c>)
 801b88a:	681b      	ldr	r3, [r3, #0]
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d1f5      	bne.n	801b87c <__sinit+0xc>
 801b890:	f7ff ffc4 	bl	801b81c <global_stdio_init.part.0>
 801b894:	e7f2      	b.n	801b87c <__sinit+0xc>
 801b896:	bf00      	nop
 801b898:	0801b7dd 	.word	0x0801b7dd
 801b89c:	2000e738 	.word	0x2000e738

0801b8a0 <_fwalk_sglue>:
 801b8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b8a4:	4607      	mov	r7, r0
 801b8a6:	4688      	mov	r8, r1
 801b8a8:	4614      	mov	r4, r2
 801b8aa:	2600      	movs	r6, #0
 801b8ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b8b0:	f1b9 0901 	subs.w	r9, r9, #1
 801b8b4:	d505      	bpl.n	801b8c2 <_fwalk_sglue+0x22>
 801b8b6:	6824      	ldr	r4, [r4, #0]
 801b8b8:	2c00      	cmp	r4, #0
 801b8ba:	d1f7      	bne.n	801b8ac <_fwalk_sglue+0xc>
 801b8bc:	4630      	mov	r0, r6
 801b8be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b8c2:	89ab      	ldrh	r3, [r5, #12]
 801b8c4:	2b01      	cmp	r3, #1
 801b8c6:	d907      	bls.n	801b8d8 <_fwalk_sglue+0x38>
 801b8c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b8cc:	3301      	adds	r3, #1
 801b8ce:	d003      	beq.n	801b8d8 <_fwalk_sglue+0x38>
 801b8d0:	4629      	mov	r1, r5
 801b8d2:	4638      	mov	r0, r7
 801b8d4:	47c0      	blx	r8
 801b8d6:	4306      	orrs	r6, r0
 801b8d8:	3568      	adds	r5, #104	@ 0x68
 801b8da:	e7e9      	b.n	801b8b0 <_fwalk_sglue+0x10>

0801b8dc <iprintf>:
 801b8dc:	b40f      	push	{r0, r1, r2, r3}
 801b8de:	b507      	push	{r0, r1, r2, lr}
 801b8e0:	4906      	ldr	r1, [pc, #24]	@ (801b8fc <iprintf+0x20>)
 801b8e2:	ab04      	add	r3, sp, #16
 801b8e4:	6808      	ldr	r0, [r1, #0]
 801b8e6:	f853 2b04 	ldr.w	r2, [r3], #4
 801b8ea:	6881      	ldr	r1, [r0, #8]
 801b8ec:	9301      	str	r3, [sp, #4]
 801b8ee:	f000 fc43 	bl	801c178 <_vfiprintf_r>
 801b8f2:	b003      	add	sp, #12
 801b8f4:	f85d eb04 	ldr.w	lr, [sp], #4
 801b8f8:	b004      	add	sp, #16
 801b8fa:	4770      	bx	lr
 801b8fc:	20000118 	.word	0x20000118

0801b900 <sniprintf>:
 801b900:	b40c      	push	{r2, r3}
 801b902:	b530      	push	{r4, r5, lr}
 801b904:	4b18      	ldr	r3, [pc, #96]	@ (801b968 <sniprintf+0x68>)
 801b906:	1e0c      	subs	r4, r1, #0
 801b908:	681d      	ldr	r5, [r3, #0]
 801b90a:	b09d      	sub	sp, #116	@ 0x74
 801b90c:	da08      	bge.n	801b920 <sniprintf+0x20>
 801b90e:	238b      	movs	r3, #139	@ 0x8b
 801b910:	602b      	str	r3, [r5, #0]
 801b912:	f04f 30ff 	mov.w	r0, #4294967295
 801b916:	b01d      	add	sp, #116	@ 0x74
 801b918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b91c:	b002      	add	sp, #8
 801b91e:	4770      	bx	lr
 801b920:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b924:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b928:	f04f 0300 	mov.w	r3, #0
 801b92c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801b92e:	bf14      	ite	ne
 801b930:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b934:	4623      	moveq	r3, r4
 801b936:	9304      	str	r3, [sp, #16]
 801b938:	9307      	str	r3, [sp, #28]
 801b93a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b93e:	9002      	str	r0, [sp, #8]
 801b940:	9006      	str	r0, [sp, #24]
 801b942:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b946:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b948:	ab21      	add	r3, sp, #132	@ 0x84
 801b94a:	a902      	add	r1, sp, #8
 801b94c:	4628      	mov	r0, r5
 801b94e:	9301      	str	r3, [sp, #4]
 801b950:	f000 faec 	bl	801bf2c <_svfiprintf_r>
 801b954:	1c43      	adds	r3, r0, #1
 801b956:	bfbc      	itt	lt
 801b958:	238b      	movlt	r3, #139	@ 0x8b
 801b95a:	602b      	strlt	r3, [r5, #0]
 801b95c:	2c00      	cmp	r4, #0
 801b95e:	d0da      	beq.n	801b916 <sniprintf+0x16>
 801b960:	9b02      	ldr	r3, [sp, #8]
 801b962:	2200      	movs	r2, #0
 801b964:	701a      	strb	r2, [r3, #0]
 801b966:	e7d6      	b.n	801b916 <sniprintf+0x16>
 801b968:	20000118 	.word	0x20000118

0801b96c <__sread>:
 801b96c:	b510      	push	{r4, lr}
 801b96e:	460c      	mov	r4, r1
 801b970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b974:	f000 f8fe 	bl	801bb74 <_read_r>
 801b978:	2800      	cmp	r0, #0
 801b97a:	bfab      	itete	ge
 801b97c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b97e:	89a3      	ldrhlt	r3, [r4, #12]
 801b980:	181b      	addge	r3, r3, r0
 801b982:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b986:	bfac      	ite	ge
 801b988:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b98a:	81a3      	strhlt	r3, [r4, #12]
 801b98c:	bd10      	pop	{r4, pc}

0801b98e <__swrite>:
 801b98e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b992:	461f      	mov	r7, r3
 801b994:	898b      	ldrh	r3, [r1, #12]
 801b996:	05db      	lsls	r3, r3, #23
 801b998:	4605      	mov	r5, r0
 801b99a:	460c      	mov	r4, r1
 801b99c:	4616      	mov	r6, r2
 801b99e:	d505      	bpl.n	801b9ac <__swrite+0x1e>
 801b9a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b9a4:	2302      	movs	r3, #2
 801b9a6:	2200      	movs	r2, #0
 801b9a8:	f000 f8d2 	bl	801bb50 <_lseek_r>
 801b9ac:	89a3      	ldrh	r3, [r4, #12]
 801b9ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b9b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b9b6:	81a3      	strh	r3, [r4, #12]
 801b9b8:	4632      	mov	r2, r6
 801b9ba:	463b      	mov	r3, r7
 801b9bc:	4628      	mov	r0, r5
 801b9be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b9c2:	f000 b8e9 	b.w	801bb98 <_write_r>

0801b9c6 <__sseek>:
 801b9c6:	b510      	push	{r4, lr}
 801b9c8:	460c      	mov	r4, r1
 801b9ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b9ce:	f000 f8bf 	bl	801bb50 <_lseek_r>
 801b9d2:	1c43      	adds	r3, r0, #1
 801b9d4:	89a3      	ldrh	r3, [r4, #12]
 801b9d6:	bf15      	itete	ne
 801b9d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b9da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b9de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b9e2:	81a3      	strheq	r3, [r4, #12]
 801b9e4:	bf18      	it	ne
 801b9e6:	81a3      	strhne	r3, [r4, #12]
 801b9e8:	bd10      	pop	{r4, pc}

0801b9ea <__sclose>:
 801b9ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b9ee:	f000 b841 	b.w	801ba74 <_close_r>

0801b9f2 <memcmp>:
 801b9f2:	b510      	push	{r4, lr}
 801b9f4:	3901      	subs	r1, #1
 801b9f6:	4402      	add	r2, r0
 801b9f8:	4290      	cmp	r0, r2
 801b9fa:	d101      	bne.n	801ba00 <memcmp+0xe>
 801b9fc:	2000      	movs	r0, #0
 801b9fe:	e005      	b.n	801ba0c <memcmp+0x1a>
 801ba00:	7803      	ldrb	r3, [r0, #0]
 801ba02:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ba06:	42a3      	cmp	r3, r4
 801ba08:	d001      	beq.n	801ba0e <memcmp+0x1c>
 801ba0a:	1b18      	subs	r0, r3, r4
 801ba0c:	bd10      	pop	{r4, pc}
 801ba0e:	3001      	adds	r0, #1
 801ba10:	e7f2      	b.n	801b9f8 <memcmp+0x6>

0801ba12 <memmove>:
 801ba12:	4288      	cmp	r0, r1
 801ba14:	b510      	push	{r4, lr}
 801ba16:	eb01 0402 	add.w	r4, r1, r2
 801ba1a:	d902      	bls.n	801ba22 <memmove+0x10>
 801ba1c:	4284      	cmp	r4, r0
 801ba1e:	4623      	mov	r3, r4
 801ba20:	d807      	bhi.n	801ba32 <memmove+0x20>
 801ba22:	1e43      	subs	r3, r0, #1
 801ba24:	42a1      	cmp	r1, r4
 801ba26:	d008      	beq.n	801ba3a <memmove+0x28>
 801ba28:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ba2c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ba30:	e7f8      	b.n	801ba24 <memmove+0x12>
 801ba32:	4402      	add	r2, r0
 801ba34:	4601      	mov	r1, r0
 801ba36:	428a      	cmp	r2, r1
 801ba38:	d100      	bne.n	801ba3c <memmove+0x2a>
 801ba3a:	bd10      	pop	{r4, pc}
 801ba3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ba40:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ba44:	e7f7      	b.n	801ba36 <memmove+0x24>

0801ba46 <memset>:
 801ba46:	4402      	add	r2, r0
 801ba48:	4603      	mov	r3, r0
 801ba4a:	4293      	cmp	r3, r2
 801ba4c:	d100      	bne.n	801ba50 <memset+0xa>
 801ba4e:	4770      	bx	lr
 801ba50:	f803 1b01 	strb.w	r1, [r3], #1
 801ba54:	e7f9      	b.n	801ba4a <memset+0x4>

0801ba56 <strcat>:
 801ba56:	b510      	push	{r4, lr}
 801ba58:	4602      	mov	r2, r0
 801ba5a:	7814      	ldrb	r4, [r2, #0]
 801ba5c:	4613      	mov	r3, r2
 801ba5e:	3201      	adds	r2, #1
 801ba60:	2c00      	cmp	r4, #0
 801ba62:	d1fa      	bne.n	801ba5a <strcat+0x4>
 801ba64:	3b01      	subs	r3, #1
 801ba66:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ba6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ba6e:	2a00      	cmp	r2, #0
 801ba70:	d1f9      	bne.n	801ba66 <strcat+0x10>
 801ba72:	bd10      	pop	{r4, pc}

0801ba74 <_close_r>:
 801ba74:	b538      	push	{r3, r4, r5, lr}
 801ba76:	4d06      	ldr	r5, [pc, #24]	@ (801ba90 <_close_r+0x1c>)
 801ba78:	2300      	movs	r3, #0
 801ba7a:	4604      	mov	r4, r0
 801ba7c:	4608      	mov	r0, r1
 801ba7e:	602b      	str	r3, [r5, #0]
 801ba80:	f7e7 fb34 	bl	80030ec <_close>
 801ba84:	1c43      	adds	r3, r0, #1
 801ba86:	d102      	bne.n	801ba8e <_close_r+0x1a>
 801ba88:	682b      	ldr	r3, [r5, #0]
 801ba8a:	b103      	cbz	r3, 801ba8e <_close_r+0x1a>
 801ba8c:	6023      	str	r3, [r4, #0]
 801ba8e:	bd38      	pop	{r3, r4, r5, pc}
 801ba90:	2000e73c 	.word	0x2000e73c

0801ba94 <_reclaim_reent>:
 801ba94:	4b2d      	ldr	r3, [pc, #180]	@ (801bb4c <_reclaim_reent+0xb8>)
 801ba96:	681b      	ldr	r3, [r3, #0]
 801ba98:	4283      	cmp	r3, r0
 801ba9a:	b570      	push	{r4, r5, r6, lr}
 801ba9c:	4604      	mov	r4, r0
 801ba9e:	d053      	beq.n	801bb48 <_reclaim_reent+0xb4>
 801baa0:	69c3      	ldr	r3, [r0, #28]
 801baa2:	b31b      	cbz	r3, 801baec <_reclaim_reent+0x58>
 801baa4:	68db      	ldr	r3, [r3, #12]
 801baa6:	b163      	cbz	r3, 801bac2 <_reclaim_reent+0x2e>
 801baa8:	2500      	movs	r5, #0
 801baaa:	69e3      	ldr	r3, [r4, #28]
 801baac:	68db      	ldr	r3, [r3, #12]
 801baae:	5959      	ldr	r1, [r3, r5]
 801bab0:	b9b1      	cbnz	r1, 801bae0 <_reclaim_reent+0x4c>
 801bab2:	3504      	adds	r5, #4
 801bab4:	2d80      	cmp	r5, #128	@ 0x80
 801bab6:	d1f8      	bne.n	801baaa <_reclaim_reent+0x16>
 801bab8:	69e3      	ldr	r3, [r4, #28]
 801baba:	4620      	mov	r0, r4
 801babc:	68d9      	ldr	r1, [r3, #12]
 801babe:	f000 f8d9 	bl	801bc74 <_free_r>
 801bac2:	69e3      	ldr	r3, [r4, #28]
 801bac4:	6819      	ldr	r1, [r3, #0]
 801bac6:	b111      	cbz	r1, 801bace <_reclaim_reent+0x3a>
 801bac8:	4620      	mov	r0, r4
 801baca:	f000 f8d3 	bl	801bc74 <_free_r>
 801bace:	69e3      	ldr	r3, [r4, #28]
 801bad0:	689d      	ldr	r5, [r3, #8]
 801bad2:	b15d      	cbz	r5, 801baec <_reclaim_reent+0x58>
 801bad4:	4629      	mov	r1, r5
 801bad6:	4620      	mov	r0, r4
 801bad8:	682d      	ldr	r5, [r5, #0]
 801bada:	f000 f8cb 	bl	801bc74 <_free_r>
 801bade:	e7f8      	b.n	801bad2 <_reclaim_reent+0x3e>
 801bae0:	680e      	ldr	r6, [r1, #0]
 801bae2:	4620      	mov	r0, r4
 801bae4:	f000 f8c6 	bl	801bc74 <_free_r>
 801bae8:	4631      	mov	r1, r6
 801baea:	e7e1      	b.n	801bab0 <_reclaim_reent+0x1c>
 801baec:	6961      	ldr	r1, [r4, #20]
 801baee:	b111      	cbz	r1, 801baf6 <_reclaim_reent+0x62>
 801baf0:	4620      	mov	r0, r4
 801baf2:	f000 f8bf 	bl	801bc74 <_free_r>
 801baf6:	69e1      	ldr	r1, [r4, #28]
 801baf8:	b111      	cbz	r1, 801bb00 <_reclaim_reent+0x6c>
 801bafa:	4620      	mov	r0, r4
 801bafc:	f000 f8ba 	bl	801bc74 <_free_r>
 801bb00:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801bb02:	b111      	cbz	r1, 801bb0a <_reclaim_reent+0x76>
 801bb04:	4620      	mov	r0, r4
 801bb06:	f000 f8b5 	bl	801bc74 <_free_r>
 801bb0a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bb0c:	b111      	cbz	r1, 801bb14 <_reclaim_reent+0x80>
 801bb0e:	4620      	mov	r0, r4
 801bb10:	f000 f8b0 	bl	801bc74 <_free_r>
 801bb14:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801bb16:	b111      	cbz	r1, 801bb1e <_reclaim_reent+0x8a>
 801bb18:	4620      	mov	r0, r4
 801bb1a:	f000 f8ab 	bl	801bc74 <_free_r>
 801bb1e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801bb20:	b111      	cbz	r1, 801bb28 <_reclaim_reent+0x94>
 801bb22:	4620      	mov	r0, r4
 801bb24:	f000 f8a6 	bl	801bc74 <_free_r>
 801bb28:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801bb2a:	b111      	cbz	r1, 801bb32 <_reclaim_reent+0x9e>
 801bb2c:	4620      	mov	r0, r4
 801bb2e:	f000 f8a1 	bl	801bc74 <_free_r>
 801bb32:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801bb34:	b111      	cbz	r1, 801bb3c <_reclaim_reent+0xa8>
 801bb36:	4620      	mov	r0, r4
 801bb38:	f000 f89c 	bl	801bc74 <_free_r>
 801bb3c:	6a23      	ldr	r3, [r4, #32]
 801bb3e:	b11b      	cbz	r3, 801bb48 <_reclaim_reent+0xb4>
 801bb40:	4620      	mov	r0, r4
 801bb42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bb46:	4718      	bx	r3
 801bb48:	bd70      	pop	{r4, r5, r6, pc}
 801bb4a:	bf00      	nop
 801bb4c:	20000118 	.word	0x20000118

0801bb50 <_lseek_r>:
 801bb50:	b538      	push	{r3, r4, r5, lr}
 801bb52:	4d07      	ldr	r5, [pc, #28]	@ (801bb70 <_lseek_r+0x20>)
 801bb54:	4604      	mov	r4, r0
 801bb56:	4608      	mov	r0, r1
 801bb58:	4611      	mov	r1, r2
 801bb5a:	2200      	movs	r2, #0
 801bb5c:	602a      	str	r2, [r5, #0]
 801bb5e:	461a      	mov	r2, r3
 801bb60:	f7e7 faeb 	bl	800313a <_lseek>
 801bb64:	1c43      	adds	r3, r0, #1
 801bb66:	d102      	bne.n	801bb6e <_lseek_r+0x1e>
 801bb68:	682b      	ldr	r3, [r5, #0]
 801bb6a:	b103      	cbz	r3, 801bb6e <_lseek_r+0x1e>
 801bb6c:	6023      	str	r3, [r4, #0]
 801bb6e:	bd38      	pop	{r3, r4, r5, pc}
 801bb70:	2000e73c 	.word	0x2000e73c

0801bb74 <_read_r>:
 801bb74:	b538      	push	{r3, r4, r5, lr}
 801bb76:	4d07      	ldr	r5, [pc, #28]	@ (801bb94 <_read_r+0x20>)
 801bb78:	4604      	mov	r4, r0
 801bb7a:	4608      	mov	r0, r1
 801bb7c:	4611      	mov	r1, r2
 801bb7e:	2200      	movs	r2, #0
 801bb80:	602a      	str	r2, [r5, #0]
 801bb82:	461a      	mov	r2, r3
 801bb84:	f7e7 fa79 	bl	800307a <_read>
 801bb88:	1c43      	adds	r3, r0, #1
 801bb8a:	d102      	bne.n	801bb92 <_read_r+0x1e>
 801bb8c:	682b      	ldr	r3, [r5, #0]
 801bb8e:	b103      	cbz	r3, 801bb92 <_read_r+0x1e>
 801bb90:	6023      	str	r3, [r4, #0]
 801bb92:	bd38      	pop	{r3, r4, r5, pc}
 801bb94:	2000e73c 	.word	0x2000e73c

0801bb98 <_write_r>:
 801bb98:	b538      	push	{r3, r4, r5, lr}
 801bb9a:	4d07      	ldr	r5, [pc, #28]	@ (801bbb8 <_write_r+0x20>)
 801bb9c:	4604      	mov	r4, r0
 801bb9e:	4608      	mov	r0, r1
 801bba0:	4611      	mov	r1, r2
 801bba2:	2200      	movs	r2, #0
 801bba4:	602a      	str	r2, [r5, #0]
 801bba6:	461a      	mov	r2, r3
 801bba8:	f7e7 fa84 	bl	80030b4 <_write>
 801bbac:	1c43      	adds	r3, r0, #1
 801bbae:	d102      	bne.n	801bbb6 <_write_r+0x1e>
 801bbb0:	682b      	ldr	r3, [r5, #0]
 801bbb2:	b103      	cbz	r3, 801bbb6 <_write_r+0x1e>
 801bbb4:	6023      	str	r3, [r4, #0]
 801bbb6:	bd38      	pop	{r3, r4, r5, pc}
 801bbb8:	2000e73c 	.word	0x2000e73c

0801bbbc <__libc_init_array>:
 801bbbc:	b570      	push	{r4, r5, r6, lr}
 801bbbe:	4d0d      	ldr	r5, [pc, #52]	@ (801bbf4 <__libc_init_array+0x38>)
 801bbc0:	4c0d      	ldr	r4, [pc, #52]	@ (801bbf8 <__libc_init_array+0x3c>)
 801bbc2:	1b64      	subs	r4, r4, r5
 801bbc4:	10a4      	asrs	r4, r4, #2
 801bbc6:	2600      	movs	r6, #0
 801bbc8:	42a6      	cmp	r6, r4
 801bbca:	d109      	bne.n	801bbe0 <__libc_init_array+0x24>
 801bbcc:	4d0b      	ldr	r5, [pc, #44]	@ (801bbfc <__libc_init_array+0x40>)
 801bbce:	4c0c      	ldr	r4, [pc, #48]	@ (801bc00 <__libc_init_array+0x44>)
 801bbd0:	f000 ffde 	bl	801cb90 <_init>
 801bbd4:	1b64      	subs	r4, r4, r5
 801bbd6:	10a4      	asrs	r4, r4, #2
 801bbd8:	2600      	movs	r6, #0
 801bbda:	42a6      	cmp	r6, r4
 801bbdc:	d105      	bne.n	801bbea <__libc_init_array+0x2e>
 801bbde:	bd70      	pop	{r4, r5, r6, pc}
 801bbe0:	f855 3b04 	ldr.w	r3, [r5], #4
 801bbe4:	4798      	blx	r3
 801bbe6:	3601      	adds	r6, #1
 801bbe8:	e7ee      	b.n	801bbc8 <__libc_init_array+0xc>
 801bbea:	f855 3b04 	ldr.w	r3, [r5], #4
 801bbee:	4798      	blx	r3
 801bbf0:	3601      	adds	r6, #1
 801bbf2:	e7f2      	b.n	801bbda <__libc_init_array+0x1e>
 801bbf4:	08021088 	.word	0x08021088
 801bbf8:	08021088 	.word	0x08021088
 801bbfc:	08021088 	.word	0x08021088
 801bc00:	0802108c 	.word	0x0802108c

0801bc04 <__retarget_lock_init_recursive>:
 801bc04:	4770      	bx	lr

0801bc06 <__retarget_lock_acquire_recursive>:
 801bc06:	4770      	bx	lr

0801bc08 <__retarget_lock_release_recursive>:
 801bc08:	4770      	bx	lr

0801bc0a <strcpy>:
 801bc0a:	4603      	mov	r3, r0
 801bc0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bc10:	f803 2b01 	strb.w	r2, [r3], #1
 801bc14:	2a00      	cmp	r2, #0
 801bc16:	d1f9      	bne.n	801bc0c <strcpy+0x2>
 801bc18:	4770      	bx	lr

0801bc1a <memcpy>:
 801bc1a:	440a      	add	r2, r1
 801bc1c:	4291      	cmp	r1, r2
 801bc1e:	f100 33ff 	add.w	r3, r0, #4294967295
 801bc22:	d100      	bne.n	801bc26 <memcpy+0xc>
 801bc24:	4770      	bx	lr
 801bc26:	b510      	push	{r4, lr}
 801bc28:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bc2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bc30:	4291      	cmp	r1, r2
 801bc32:	d1f9      	bne.n	801bc28 <memcpy+0xe>
 801bc34:	bd10      	pop	{r4, pc}
	...

0801bc38 <__assert_func>:
 801bc38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bc3a:	4614      	mov	r4, r2
 801bc3c:	461a      	mov	r2, r3
 801bc3e:	4b09      	ldr	r3, [pc, #36]	@ (801bc64 <__assert_func+0x2c>)
 801bc40:	681b      	ldr	r3, [r3, #0]
 801bc42:	4605      	mov	r5, r0
 801bc44:	68d8      	ldr	r0, [r3, #12]
 801bc46:	b14c      	cbz	r4, 801bc5c <__assert_func+0x24>
 801bc48:	4b07      	ldr	r3, [pc, #28]	@ (801bc68 <__assert_func+0x30>)
 801bc4a:	9100      	str	r1, [sp, #0]
 801bc4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bc50:	4906      	ldr	r1, [pc, #24]	@ (801bc6c <__assert_func+0x34>)
 801bc52:	462b      	mov	r3, r5
 801bc54:	f000 fde0 	bl	801c818 <fiprintf>
 801bc58:	f000 fe94 	bl	801c984 <abort>
 801bc5c:	4b04      	ldr	r3, [pc, #16]	@ (801bc70 <__assert_func+0x38>)
 801bc5e:	461c      	mov	r4, r3
 801bc60:	e7f3      	b.n	801bc4a <__assert_func+0x12>
 801bc62:	bf00      	nop
 801bc64:	20000118 	.word	0x20000118
 801bc68:	0802100f 	.word	0x0802100f
 801bc6c:	0802101c 	.word	0x0802101c
 801bc70:	0802104a 	.word	0x0802104a

0801bc74 <_free_r>:
 801bc74:	b538      	push	{r3, r4, r5, lr}
 801bc76:	4605      	mov	r5, r0
 801bc78:	2900      	cmp	r1, #0
 801bc7a:	d041      	beq.n	801bd00 <_free_r+0x8c>
 801bc7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bc80:	1f0c      	subs	r4, r1, #4
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	bfb8      	it	lt
 801bc86:	18e4      	addlt	r4, r4, r3
 801bc88:	f000 f8e8 	bl	801be5c <__malloc_lock>
 801bc8c:	4a1d      	ldr	r2, [pc, #116]	@ (801bd04 <_free_r+0x90>)
 801bc8e:	6813      	ldr	r3, [r2, #0]
 801bc90:	b933      	cbnz	r3, 801bca0 <_free_r+0x2c>
 801bc92:	6063      	str	r3, [r4, #4]
 801bc94:	6014      	str	r4, [r2, #0]
 801bc96:	4628      	mov	r0, r5
 801bc98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bc9c:	f000 b8e4 	b.w	801be68 <__malloc_unlock>
 801bca0:	42a3      	cmp	r3, r4
 801bca2:	d908      	bls.n	801bcb6 <_free_r+0x42>
 801bca4:	6820      	ldr	r0, [r4, #0]
 801bca6:	1821      	adds	r1, r4, r0
 801bca8:	428b      	cmp	r3, r1
 801bcaa:	bf01      	itttt	eq
 801bcac:	6819      	ldreq	r1, [r3, #0]
 801bcae:	685b      	ldreq	r3, [r3, #4]
 801bcb0:	1809      	addeq	r1, r1, r0
 801bcb2:	6021      	streq	r1, [r4, #0]
 801bcb4:	e7ed      	b.n	801bc92 <_free_r+0x1e>
 801bcb6:	461a      	mov	r2, r3
 801bcb8:	685b      	ldr	r3, [r3, #4]
 801bcba:	b10b      	cbz	r3, 801bcc0 <_free_r+0x4c>
 801bcbc:	42a3      	cmp	r3, r4
 801bcbe:	d9fa      	bls.n	801bcb6 <_free_r+0x42>
 801bcc0:	6811      	ldr	r1, [r2, #0]
 801bcc2:	1850      	adds	r0, r2, r1
 801bcc4:	42a0      	cmp	r0, r4
 801bcc6:	d10b      	bne.n	801bce0 <_free_r+0x6c>
 801bcc8:	6820      	ldr	r0, [r4, #0]
 801bcca:	4401      	add	r1, r0
 801bccc:	1850      	adds	r0, r2, r1
 801bcce:	4283      	cmp	r3, r0
 801bcd0:	6011      	str	r1, [r2, #0]
 801bcd2:	d1e0      	bne.n	801bc96 <_free_r+0x22>
 801bcd4:	6818      	ldr	r0, [r3, #0]
 801bcd6:	685b      	ldr	r3, [r3, #4]
 801bcd8:	6053      	str	r3, [r2, #4]
 801bcda:	4408      	add	r0, r1
 801bcdc:	6010      	str	r0, [r2, #0]
 801bcde:	e7da      	b.n	801bc96 <_free_r+0x22>
 801bce0:	d902      	bls.n	801bce8 <_free_r+0x74>
 801bce2:	230c      	movs	r3, #12
 801bce4:	602b      	str	r3, [r5, #0]
 801bce6:	e7d6      	b.n	801bc96 <_free_r+0x22>
 801bce8:	6820      	ldr	r0, [r4, #0]
 801bcea:	1821      	adds	r1, r4, r0
 801bcec:	428b      	cmp	r3, r1
 801bcee:	bf04      	itt	eq
 801bcf0:	6819      	ldreq	r1, [r3, #0]
 801bcf2:	685b      	ldreq	r3, [r3, #4]
 801bcf4:	6063      	str	r3, [r4, #4]
 801bcf6:	bf04      	itt	eq
 801bcf8:	1809      	addeq	r1, r1, r0
 801bcfa:	6021      	streq	r1, [r4, #0]
 801bcfc:	6054      	str	r4, [r2, #4]
 801bcfe:	e7ca      	b.n	801bc96 <_free_r+0x22>
 801bd00:	bd38      	pop	{r3, r4, r5, pc}
 801bd02:	bf00      	nop
 801bd04:	2000e748 	.word	0x2000e748

0801bd08 <malloc>:
 801bd08:	4b02      	ldr	r3, [pc, #8]	@ (801bd14 <malloc+0xc>)
 801bd0a:	4601      	mov	r1, r0
 801bd0c:	6818      	ldr	r0, [r3, #0]
 801bd0e:	f000 b825 	b.w	801bd5c <_malloc_r>
 801bd12:	bf00      	nop
 801bd14:	20000118 	.word	0x20000118

0801bd18 <sbrk_aligned>:
 801bd18:	b570      	push	{r4, r5, r6, lr}
 801bd1a:	4e0f      	ldr	r6, [pc, #60]	@ (801bd58 <sbrk_aligned+0x40>)
 801bd1c:	460c      	mov	r4, r1
 801bd1e:	6831      	ldr	r1, [r6, #0]
 801bd20:	4605      	mov	r5, r0
 801bd22:	b911      	cbnz	r1, 801bd2a <sbrk_aligned+0x12>
 801bd24:	f000 fe1e 	bl	801c964 <_sbrk_r>
 801bd28:	6030      	str	r0, [r6, #0]
 801bd2a:	4621      	mov	r1, r4
 801bd2c:	4628      	mov	r0, r5
 801bd2e:	f000 fe19 	bl	801c964 <_sbrk_r>
 801bd32:	1c43      	adds	r3, r0, #1
 801bd34:	d103      	bne.n	801bd3e <sbrk_aligned+0x26>
 801bd36:	f04f 34ff 	mov.w	r4, #4294967295
 801bd3a:	4620      	mov	r0, r4
 801bd3c:	bd70      	pop	{r4, r5, r6, pc}
 801bd3e:	1cc4      	adds	r4, r0, #3
 801bd40:	f024 0403 	bic.w	r4, r4, #3
 801bd44:	42a0      	cmp	r0, r4
 801bd46:	d0f8      	beq.n	801bd3a <sbrk_aligned+0x22>
 801bd48:	1a21      	subs	r1, r4, r0
 801bd4a:	4628      	mov	r0, r5
 801bd4c:	f000 fe0a 	bl	801c964 <_sbrk_r>
 801bd50:	3001      	adds	r0, #1
 801bd52:	d1f2      	bne.n	801bd3a <sbrk_aligned+0x22>
 801bd54:	e7ef      	b.n	801bd36 <sbrk_aligned+0x1e>
 801bd56:	bf00      	nop
 801bd58:	2000e744 	.word	0x2000e744

0801bd5c <_malloc_r>:
 801bd5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bd60:	1ccd      	adds	r5, r1, #3
 801bd62:	f025 0503 	bic.w	r5, r5, #3
 801bd66:	3508      	adds	r5, #8
 801bd68:	2d0c      	cmp	r5, #12
 801bd6a:	bf38      	it	cc
 801bd6c:	250c      	movcc	r5, #12
 801bd6e:	2d00      	cmp	r5, #0
 801bd70:	4606      	mov	r6, r0
 801bd72:	db01      	blt.n	801bd78 <_malloc_r+0x1c>
 801bd74:	42a9      	cmp	r1, r5
 801bd76:	d904      	bls.n	801bd82 <_malloc_r+0x26>
 801bd78:	230c      	movs	r3, #12
 801bd7a:	6033      	str	r3, [r6, #0]
 801bd7c:	2000      	movs	r0, #0
 801bd7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bd82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801be58 <_malloc_r+0xfc>
 801bd86:	f000 f869 	bl	801be5c <__malloc_lock>
 801bd8a:	f8d8 3000 	ldr.w	r3, [r8]
 801bd8e:	461c      	mov	r4, r3
 801bd90:	bb44      	cbnz	r4, 801bde4 <_malloc_r+0x88>
 801bd92:	4629      	mov	r1, r5
 801bd94:	4630      	mov	r0, r6
 801bd96:	f7ff ffbf 	bl	801bd18 <sbrk_aligned>
 801bd9a:	1c43      	adds	r3, r0, #1
 801bd9c:	4604      	mov	r4, r0
 801bd9e:	d158      	bne.n	801be52 <_malloc_r+0xf6>
 801bda0:	f8d8 4000 	ldr.w	r4, [r8]
 801bda4:	4627      	mov	r7, r4
 801bda6:	2f00      	cmp	r7, #0
 801bda8:	d143      	bne.n	801be32 <_malloc_r+0xd6>
 801bdaa:	2c00      	cmp	r4, #0
 801bdac:	d04b      	beq.n	801be46 <_malloc_r+0xea>
 801bdae:	6823      	ldr	r3, [r4, #0]
 801bdb0:	4639      	mov	r1, r7
 801bdb2:	4630      	mov	r0, r6
 801bdb4:	eb04 0903 	add.w	r9, r4, r3
 801bdb8:	f000 fdd4 	bl	801c964 <_sbrk_r>
 801bdbc:	4581      	cmp	r9, r0
 801bdbe:	d142      	bne.n	801be46 <_malloc_r+0xea>
 801bdc0:	6821      	ldr	r1, [r4, #0]
 801bdc2:	1a6d      	subs	r5, r5, r1
 801bdc4:	4629      	mov	r1, r5
 801bdc6:	4630      	mov	r0, r6
 801bdc8:	f7ff ffa6 	bl	801bd18 <sbrk_aligned>
 801bdcc:	3001      	adds	r0, #1
 801bdce:	d03a      	beq.n	801be46 <_malloc_r+0xea>
 801bdd0:	6823      	ldr	r3, [r4, #0]
 801bdd2:	442b      	add	r3, r5
 801bdd4:	6023      	str	r3, [r4, #0]
 801bdd6:	f8d8 3000 	ldr.w	r3, [r8]
 801bdda:	685a      	ldr	r2, [r3, #4]
 801bddc:	bb62      	cbnz	r2, 801be38 <_malloc_r+0xdc>
 801bdde:	f8c8 7000 	str.w	r7, [r8]
 801bde2:	e00f      	b.n	801be04 <_malloc_r+0xa8>
 801bde4:	6822      	ldr	r2, [r4, #0]
 801bde6:	1b52      	subs	r2, r2, r5
 801bde8:	d420      	bmi.n	801be2c <_malloc_r+0xd0>
 801bdea:	2a0b      	cmp	r2, #11
 801bdec:	d917      	bls.n	801be1e <_malloc_r+0xc2>
 801bdee:	1961      	adds	r1, r4, r5
 801bdf0:	42a3      	cmp	r3, r4
 801bdf2:	6025      	str	r5, [r4, #0]
 801bdf4:	bf18      	it	ne
 801bdf6:	6059      	strne	r1, [r3, #4]
 801bdf8:	6863      	ldr	r3, [r4, #4]
 801bdfa:	bf08      	it	eq
 801bdfc:	f8c8 1000 	streq.w	r1, [r8]
 801be00:	5162      	str	r2, [r4, r5]
 801be02:	604b      	str	r3, [r1, #4]
 801be04:	4630      	mov	r0, r6
 801be06:	f000 f82f 	bl	801be68 <__malloc_unlock>
 801be0a:	f104 000b 	add.w	r0, r4, #11
 801be0e:	1d23      	adds	r3, r4, #4
 801be10:	f020 0007 	bic.w	r0, r0, #7
 801be14:	1ac2      	subs	r2, r0, r3
 801be16:	bf1c      	itt	ne
 801be18:	1a1b      	subne	r3, r3, r0
 801be1a:	50a3      	strne	r3, [r4, r2]
 801be1c:	e7af      	b.n	801bd7e <_malloc_r+0x22>
 801be1e:	6862      	ldr	r2, [r4, #4]
 801be20:	42a3      	cmp	r3, r4
 801be22:	bf0c      	ite	eq
 801be24:	f8c8 2000 	streq.w	r2, [r8]
 801be28:	605a      	strne	r2, [r3, #4]
 801be2a:	e7eb      	b.n	801be04 <_malloc_r+0xa8>
 801be2c:	4623      	mov	r3, r4
 801be2e:	6864      	ldr	r4, [r4, #4]
 801be30:	e7ae      	b.n	801bd90 <_malloc_r+0x34>
 801be32:	463c      	mov	r4, r7
 801be34:	687f      	ldr	r7, [r7, #4]
 801be36:	e7b6      	b.n	801bda6 <_malloc_r+0x4a>
 801be38:	461a      	mov	r2, r3
 801be3a:	685b      	ldr	r3, [r3, #4]
 801be3c:	42a3      	cmp	r3, r4
 801be3e:	d1fb      	bne.n	801be38 <_malloc_r+0xdc>
 801be40:	2300      	movs	r3, #0
 801be42:	6053      	str	r3, [r2, #4]
 801be44:	e7de      	b.n	801be04 <_malloc_r+0xa8>
 801be46:	230c      	movs	r3, #12
 801be48:	6033      	str	r3, [r6, #0]
 801be4a:	4630      	mov	r0, r6
 801be4c:	f000 f80c 	bl	801be68 <__malloc_unlock>
 801be50:	e794      	b.n	801bd7c <_malloc_r+0x20>
 801be52:	6005      	str	r5, [r0, #0]
 801be54:	e7d6      	b.n	801be04 <_malloc_r+0xa8>
 801be56:	bf00      	nop
 801be58:	2000e748 	.word	0x2000e748

0801be5c <__malloc_lock>:
 801be5c:	4801      	ldr	r0, [pc, #4]	@ (801be64 <__malloc_lock+0x8>)
 801be5e:	f7ff bed2 	b.w	801bc06 <__retarget_lock_acquire_recursive>
 801be62:	bf00      	nop
 801be64:	2000e740 	.word	0x2000e740

0801be68 <__malloc_unlock>:
 801be68:	4801      	ldr	r0, [pc, #4]	@ (801be70 <__malloc_unlock+0x8>)
 801be6a:	f7ff becd 	b.w	801bc08 <__retarget_lock_release_recursive>
 801be6e:	bf00      	nop
 801be70:	2000e740 	.word	0x2000e740

0801be74 <__ssputs_r>:
 801be74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be78:	688e      	ldr	r6, [r1, #8]
 801be7a:	461f      	mov	r7, r3
 801be7c:	42be      	cmp	r6, r7
 801be7e:	680b      	ldr	r3, [r1, #0]
 801be80:	4682      	mov	sl, r0
 801be82:	460c      	mov	r4, r1
 801be84:	4690      	mov	r8, r2
 801be86:	d82d      	bhi.n	801bee4 <__ssputs_r+0x70>
 801be88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801be8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801be90:	d026      	beq.n	801bee0 <__ssputs_r+0x6c>
 801be92:	6965      	ldr	r5, [r4, #20]
 801be94:	6909      	ldr	r1, [r1, #16]
 801be96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801be9a:	eba3 0901 	sub.w	r9, r3, r1
 801be9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bea2:	1c7b      	adds	r3, r7, #1
 801bea4:	444b      	add	r3, r9
 801bea6:	106d      	asrs	r5, r5, #1
 801bea8:	429d      	cmp	r5, r3
 801beaa:	bf38      	it	cc
 801beac:	461d      	movcc	r5, r3
 801beae:	0553      	lsls	r3, r2, #21
 801beb0:	d527      	bpl.n	801bf02 <__ssputs_r+0x8e>
 801beb2:	4629      	mov	r1, r5
 801beb4:	f7ff ff52 	bl	801bd5c <_malloc_r>
 801beb8:	4606      	mov	r6, r0
 801beba:	b360      	cbz	r0, 801bf16 <__ssputs_r+0xa2>
 801bebc:	6921      	ldr	r1, [r4, #16]
 801bebe:	464a      	mov	r2, r9
 801bec0:	f7ff feab 	bl	801bc1a <memcpy>
 801bec4:	89a3      	ldrh	r3, [r4, #12]
 801bec6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801beca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801bece:	81a3      	strh	r3, [r4, #12]
 801bed0:	6126      	str	r6, [r4, #16]
 801bed2:	6165      	str	r5, [r4, #20]
 801bed4:	444e      	add	r6, r9
 801bed6:	eba5 0509 	sub.w	r5, r5, r9
 801beda:	6026      	str	r6, [r4, #0]
 801bedc:	60a5      	str	r5, [r4, #8]
 801bede:	463e      	mov	r6, r7
 801bee0:	42be      	cmp	r6, r7
 801bee2:	d900      	bls.n	801bee6 <__ssputs_r+0x72>
 801bee4:	463e      	mov	r6, r7
 801bee6:	6820      	ldr	r0, [r4, #0]
 801bee8:	4632      	mov	r2, r6
 801beea:	4641      	mov	r1, r8
 801beec:	f7ff fd91 	bl	801ba12 <memmove>
 801bef0:	68a3      	ldr	r3, [r4, #8]
 801bef2:	1b9b      	subs	r3, r3, r6
 801bef4:	60a3      	str	r3, [r4, #8]
 801bef6:	6823      	ldr	r3, [r4, #0]
 801bef8:	4433      	add	r3, r6
 801befa:	6023      	str	r3, [r4, #0]
 801befc:	2000      	movs	r0, #0
 801befe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf02:	462a      	mov	r2, r5
 801bf04:	f000 fd45 	bl	801c992 <_realloc_r>
 801bf08:	4606      	mov	r6, r0
 801bf0a:	2800      	cmp	r0, #0
 801bf0c:	d1e0      	bne.n	801bed0 <__ssputs_r+0x5c>
 801bf0e:	6921      	ldr	r1, [r4, #16]
 801bf10:	4650      	mov	r0, sl
 801bf12:	f7ff feaf 	bl	801bc74 <_free_r>
 801bf16:	230c      	movs	r3, #12
 801bf18:	f8ca 3000 	str.w	r3, [sl]
 801bf1c:	89a3      	ldrh	r3, [r4, #12]
 801bf1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bf22:	81a3      	strh	r3, [r4, #12]
 801bf24:	f04f 30ff 	mov.w	r0, #4294967295
 801bf28:	e7e9      	b.n	801befe <__ssputs_r+0x8a>
	...

0801bf2c <_svfiprintf_r>:
 801bf2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf30:	4698      	mov	r8, r3
 801bf32:	898b      	ldrh	r3, [r1, #12]
 801bf34:	061b      	lsls	r3, r3, #24
 801bf36:	b09d      	sub	sp, #116	@ 0x74
 801bf38:	4607      	mov	r7, r0
 801bf3a:	460d      	mov	r5, r1
 801bf3c:	4614      	mov	r4, r2
 801bf3e:	d510      	bpl.n	801bf62 <_svfiprintf_r+0x36>
 801bf40:	690b      	ldr	r3, [r1, #16]
 801bf42:	b973      	cbnz	r3, 801bf62 <_svfiprintf_r+0x36>
 801bf44:	2140      	movs	r1, #64	@ 0x40
 801bf46:	f7ff ff09 	bl	801bd5c <_malloc_r>
 801bf4a:	6028      	str	r0, [r5, #0]
 801bf4c:	6128      	str	r0, [r5, #16]
 801bf4e:	b930      	cbnz	r0, 801bf5e <_svfiprintf_r+0x32>
 801bf50:	230c      	movs	r3, #12
 801bf52:	603b      	str	r3, [r7, #0]
 801bf54:	f04f 30ff 	mov.w	r0, #4294967295
 801bf58:	b01d      	add	sp, #116	@ 0x74
 801bf5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf5e:	2340      	movs	r3, #64	@ 0x40
 801bf60:	616b      	str	r3, [r5, #20]
 801bf62:	2300      	movs	r3, #0
 801bf64:	9309      	str	r3, [sp, #36]	@ 0x24
 801bf66:	2320      	movs	r3, #32
 801bf68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801bf6c:	f8cd 800c 	str.w	r8, [sp, #12]
 801bf70:	2330      	movs	r3, #48	@ 0x30
 801bf72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801c110 <_svfiprintf_r+0x1e4>
 801bf76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801bf7a:	f04f 0901 	mov.w	r9, #1
 801bf7e:	4623      	mov	r3, r4
 801bf80:	469a      	mov	sl, r3
 801bf82:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bf86:	b10a      	cbz	r2, 801bf8c <_svfiprintf_r+0x60>
 801bf88:	2a25      	cmp	r2, #37	@ 0x25
 801bf8a:	d1f9      	bne.n	801bf80 <_svfiprintf_r+0x54>
 801bf8c:	ebba 0b04 	subs.w	fp, sl, r4
 801bf90:	d00b      	beq.n	801bfaa <_svfiprintf_r+0x7e>
 801bf92:	465b      	mov	r3, fp
 801bf94:	4622      	mov	r2, r4
 801bf96:	4629      	mov	r1, r5
 801bf98:	4638      	mov	r0, r7
 801bf9a:	f7ff ff6b 	bl	801be74 <__ssputs_r>
 801bf9e:	3001      	adds	r0, #1
 801bfa0:	f000 80a7 	beq.w	801c0f2 <_svfiprintf_r+0x1c6>
 801bfa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bfa6:	445a      	add	r2, fp
 801bfa8:	9209      	str	r2, [sp, #36]	@ 0x24
 801bfaa:	f89a 3000 	ldrb.w	r3, [sl]
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	f000 809f 	beq.w	801c0f2 <_svfiprintf_r+0x1c6>
 801bfb4:	2300      	movs	r3, #0
 801bfb6:	f04f 32ff 	mov.w	r2, #4294967295
 801bfba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bfbe:	f10a 0a01 	add.w	sl, sl, #1
 801bfc2:	9304      	str	r3, [sp, #16]
 801bfc4:	9307      	str	r3, [sp, #28]
 801bfc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bfca:	931a      	str	r3, [sp, #104]	@ 0x68
 801bfcc:	4654      	mov	r4, sl
 801bfce:	2205      	movs	r2, #5
 801bfd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bfd4:	484e      	ldr	r0, [pc, #312]	@ (801c110 <_svfiprintf_r+0x1e4>)
 801bfd6:	f7e4 f903 	bl	80001e0 <memchr>
 801bfda:	9a04      	ldr	r2, [sp, #16]
 801bfdc:	b9d8      	cbnz	r0, 801c016 <_svfiprintf_r+0xea>
 801bfde:	06d0      	lsls	r0, r2, #27
 801bfe0:	bf44      	itt	mi
 801bfe2:	2320      	movmi	r3, #32
 801bfe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bfe8:	0711      	lsls	r1, r2, #28
 801bfea:	bf44      	itt	mi
 801bfec:	232b      	movmi	r3, #43	@ 0x2b
 801bfee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bff2:	f89a 3000 	ldrb.w	r3, [sl]
 801bff6:	2b2a      	cmp	r3, #42	@ 0x2a
 801bff8:	d015      	beq.n	801c026 <_svfiprintf_r+0xfa>
 801bffa:	9a07      	ldr	r2, [sp, #28]
 801bffc:	4654      	mov	r4, sl
 801bffe:	2000      	movs	r0, #0
 801c000:	f04f 0c0a 	mov.w	ip, #10
 801c004:	4621      	mov	r1, r4
 801c006:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c00a:	3b30      	subs	r3, #48	@ 0x30
 801c00c:	2b09      	cmp	r3, #9
 801c00e:	d94b      	bls.n	801c0a8 <_svfiprintf_r+0x17c>
 801c010:	b1b0      	cbz	r0, 801c040 <_svfiprintf_r+0x114>
 801c012:	9207      	str	r2, [sp, #28]
 801c014:	e014      	b.n	801c040 <_svfiprintf_r+0x114>
 801c016:	eba0 0308 	sub.w	r3, r0, r8
 801c01a:	fa09 f303 	lsl.w	r3, r9, r3
 801c01e:	4313      	orrs	r3, r2
 801c020:	9304      	str	r3, [sp, #16]
 801c022:	46a2      	mov	sl, r4
 801c024:	e7d2      	b.n	801bfcc <_svfiprintf_r+0xa0>
 801c026:	9b03      	ldr	r3, [sp, #12]
 801c028:	1d19      	adds	r1, r3, #4
 801c02a:	681b      	ldr	r3, [r3, #0]
 801c02c:	9103      	str	r1, [sp, #12]
 801c02e:	2b00      	cmp	r3, #0
 801c030:	bfbb      	ittet	lt
 801c032:	425b      	neglt	r3, r3
 801c034:	f042 0202 	orrlt.w	r2, r2, #2
 801c038:	9307      	strge	r3, [sp, #28]
 801c03a:	9307      	strlt	r3, [sp, #28]
 801c03c:	bfb8      	it	lt
 801c03e:	9204      	strlt	r2, [sp, #16]
 801c040:	7823      	ldrb	r3, [r4, #0]
 801c042:	2b2e      	cmp	r3, #46	@ 0x2e
 801c044:	d10a      	bne.n	801c05c <_svfiprintf_r+0x130>
 801c046:	7863      	ldrb	r3, [r4, #1]
 801c048:	2b2a      	cmp	r3, #42	@ 0x2a
 801c04a:	d132      	bne.n	801c0b2 <_svfiprintf_r+0x186>
 801c04c:	9b03      	ldr	r3, [sp, #12]
 801c04e:	1d1a      	adds	r2, r3, #4
 801c050:	681b      	ldr	r3, [r3, #0]
 801c052:	9203      	str	r2, [sp, #12]
 801c054:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c058:	3402      	adds	r4, #2
 801c05a:	9305      	str	r3, [sp, #20]
 801c05c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801c120 <_svfiprintf_r+0x1f4>
 801c060:	7821      	ldrb	r1, [r4, #0]
 801c062:	2203      	movs	r2, #3
 801c064:	4650      	mov	r0, sl
 801c066:	f7e4 f8bb 	bl	80001e0 <memchr>
 801c06a:	b138      	cbz	r0, 801c07c <_svfiprintf_r+0x150>
 801c06c:	9b04      	ldr	r3, [sp, #16]
 801c06e:	eba0 000a 	sub.w	r0, r0, sl
 801c072:	2240      	movs	r2, #64	@ 0x40
 801c074:	4082      	lsls	r2, r0
 801c076:	4313      	orrs	r3, r2
 801c078:	3401      	adds	r4, #1
 801c07a:	9304      	str	r3, [sp, #16]
 801c07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c080:	4824      	ldr	r0, [pc, #144]	@ (801c114 <_svfiprintf_r+0x1e8>)
 801c082:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c086:	2206      	movs	r2, #6
 801c088:	f7e4 f8aa 	bl	80001e0 <memchr>
 801c08c:	2800      	cmp	r0, #0
 801c08e:	d036      	beq.n	801c0fe <_svfiprintf_r+0x1d2>
 801c090:	4b21      	ldr	r3, [pc, #132]	@ (801c118 <_svfiprintf_r+0x1ec>)
 801c092:	bb1b      	cbnz	r3, 801c0dc <_svfiprintf_r+0x1b0>
 801c094:	9b03      	ldr	r3, [sp, #12]
 801c096:	3307      	adds	r3, #7
 801c098:	f023 0307 	bic.w	r3, r3, #7
 801c09c:	3308      	adds	r3, #8
 801c09e:	9303      	str	r3, [sp, #12]
 801c0a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c0a2:	4433      	add	r3, r6
 801c0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 801c0a6:	e76a      	b.n	801bf7e <_svfiprintf_r+0x52>
 801c0a8:	fb0c 3202 	mla	r2, ip, r2, r3
 801c0ac:	460c      	mov	r4, r1
 801c0ae:	2001      	movs	r0, #1
 801c0b0:	e7a8      	b.n	801c004 <_svfiprintf_r+0xd8>
 801c0b2:	2300      	movs	r3, #0
 801c0b4:	3401      	adds	r4, #1
 801c0b6:	9305      	str	r3, [sp, #20]
 801c0b8:	4619      	mov	r1, r3
 801c0ba:	f04f 0c0a 	mov.w	ip, #10
 801c0be:	4620      	mov	r0, r4
 801c0c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c0c4:	3a30      	subs	r2, #48	@ 0x30
 801c0c6:	2a09      	cmp	r2, #9
 801c0c8:	d903      	bls.n	801c0d2 <_svfiprintf_r+0x1a6>
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	d0c6      	beq.n	801c05c <_svfiprintf_r+0x130>
 801c0ce:	9105      	str	r1, [sp, #20]
 801c0d0:	e7c4      	b.n	801c05c <_svfiprintf_r+0x130>
 801c0d2:	fb0c 2101 	mla	r1, ip, r1, r2
 801c0d6:	4604      	mov	r4, r0
 801c0d8:	2301      	movs	r3, #1
 801c0da:	e7f0      	b.n	801c0be <_svfiprintf_r+0x192>
 801c0dc:	ab03      	add	r3, sp, #12
 801c0de:	9300      	str	r3, [sp, #0]
 801c0e0:	462a      	mov	r2, r5
 801c0e2:	4b0e      	ldr	r3, [pc, #56]	@ (801c11c <_svfiprintf_r+0x1f0>)
 801c0e4:	a904      	add	r1, sp, #16
 801c0e6:	4638      	mov	r0, r7
 801c0e8:	f3af 8000 	nop.w
 801c0ec:	1c42      	adds	r2, r0, #1
 801c0ee:	4606      	mov	r6, r0
 801c0f0:	d1d6      	bne.n	801c0a0 <_svfiprintf_r+0x174>
 801c0f2:	89ab      	ldrh	r3, [r5, #12]
 801c0f4:	065b      	lsls	r3, r3, #25
 801c0f6:	f53f af2d 	bmi.w	801bf54 <_svfiprintf_r+0x28>
 801c0fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c0fc:	e72c      	b.n	801bf58 <_svfiprintf_r+0x2c>
 801c0fe:	ab03      	add	r3, sp, #12
 801c100:	9300      	str	r3, [sp, #0]
 801c102:	462a      	mov	r2, r5
 801c104:	4b05      	ldr	r3, [pc, #20]	@ (801c11c <_svfiprintf_r+0x1f0>)
 801c106:	a904      	add	r1, sp, #16
 801c108:	4638      	mov	r0, r7
 801c10a:	f000 f9bb 	bl	801c484 <_printf_i>
 801c10e:	e7ed      	b.n	801c0ec <_svfiprintf_r+0x1c0>
 801c110:	0802104b 	.word	0x0802104b
 801c114:	08021055 	.word	0x08021055
 801c118:	00000000 	.word	0x00000000
 801c11c:	0801be75 	.word	0x0801be75
 801c120:	08021051 	.word	0x08021051

0801c124 <__sfputc_r>:
 801c124:	6893      	ldr	r3, [r2, #8]
 801c126:	3b01      	subs	r3, #1
 801c128:	2b00      	cmp	r3, #0
 801c12a:	b410      	push	{r4}
 801c12c:	6093      	str	r3, [r2, #8]
 801c12e:	da08      	bge.n	801c142 <__sfputc_r+0x1e>
 801c130:	6994      	ldr	r4, [r2, #24]
 801c132:	42a3      	cmp	r3, r4
 801c134:	db01      	blt.n	801c13a <__sfputc_r+0x16>
 801c136:	290a      	cmp	r1, #10
 801c138:	d103      	bne.n	801c142 <__sfputc_r+0x1e>
 801c13a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c13e:	f000 bb7d 	b.w	801c83c <__swbuf_r>
 801c142:	6813      	ldr	r3, [r2, #0]
 801c144:	1c58      	adds	r0, r3, #1
 801c146:	6010      	str	r0, [r2, #0]
 801c148:	7019      	strb	r1, [r3, #0]
 801c14a:	4608      	mov	r0, r1
 801c14c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c150:	4770      	bx	lr

0801c152 <__sfputs_r>:
 801c152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c154:	4606      	mov	r6, r0
 801c156:	460f      	mov	r7, r1
 801c158:	4614      	mov	r4, r2
 801c15a:	18d5      	adds	r5, r2, r3
 801c15c:	42ac      	cmp	r4, r5
 801c15e:	d101      	bne.n	801c164 <__sfputs_r+0x12>
 801c160:	2000      	movs	r0, #0
 801c162:	e007      	b.n	801c174 <__sfputs_r+0x22>
 801c164:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c168:	463a      	mov	r2, r7
 801c16a:	4630      	mov	r0, r6
 801c16c:	f7ff ffda 	bl	801c124 <__sfputc_r>
 801c170:	1c43      	adds	r3, r0, #1
 801c172:	d1f3      	bne.n	801c15c <__sfputs_r+0xa>
 801c174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c178 <_vfiprintf_r>:
 801c178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c17c:	460d      	mov	r5, r1
 801c17e:	b09d      	sub	sp, #116	@ 0x74
 801c180:	4614      	mov	r4, r2
 801c182:	4698      	mov	r8, r3
 801c184:	4606      	mov	r6, r0
 801c186:	b118      	cbz	r0, 801c190 <_vfiprintf_r+0x18>
 801c188:	6a03      	ldr	r3, [r0, #32]
 801c18a:	b90b      	cbnz	r3, 801c190 <_vfiprintf_r+0x18>
 801c18c:	f7ff fb70 	bl	801b870 <__sinit>
 801c190:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c192:	07d9      	lsls	r1, r3, #31
 801c194:	d405      	bmi.n	801c1a2 <_vfiprintf_r+0x2a>
 801c196:	89ab      	ldrh	r3, [r5, #12]
 801c198:	059a      	lsls	r2, r3, #22
 801c19a:	d402      	bmi.n	801c1a2 <_vfiprintf_r+0x2a>
 801c19c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c19e:	f7ff fd32 	bl	801bc06 <__retarget_lock_acquire_recursive>
 801c1a2:	89ab      	ldrh	r3, [r5, #12]
 801c1a4:	071b      	lsls	r3, r3, #28
 801c1a6:	d501      	bpl.n	801c1ac <_vfiprintf_r+0x34>
 801c1a8:	692b      	ldr	r3, [r5, #16]
 801c1aa:	b99b      	cbnz	r3, 801c1d4 <_vfiprintf_r+0x5c>
 801c1ac:	4629      	mov	r1, r5
 801c1ae:	4630      	mov	r0, r6
 801c1b0:	f000 fb82 	bl	801c8b8 <__swsetup_r>
 801c1b4:	b170      	cbz	r0, 801c1d4 <_vfiprintf_r+0x5c>
 801c1b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c1b8:	07dc      	lsls	r4, r3, #31
 801c1ba:	d504      	bpl.n	801c1c6 <_vfiprintf_r+0x4e>
 801c1bc:	f04f 30ff 	mov.w	r0, #4294967295
 801c1c0:	b01d      	add	sp, #116	@ 0x74
 801c1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1c6:	89ab      	ldrh	r3, [r5, #12]
 801c1c8:	0598      	lsls	r0, r3, #22
 801c1ca:	d4f7      	bmi.n	801c1bc <_vfiprintf_r+0x44>
 801c1cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c1ce:	f7ff fd1b 	bl	801bc08 <__retarget_lock_release_recursive>
 801c1d2:	e7f3      	b.n	801c1bc <_vfiprintf_r+0x44>
 801c1d4:	2300      	movs	r3, #0
 801c1d6:	9309      	str	r3, [sp, #36]	@ 0x24
 801c1d8:	2320      	movs	r3, #32
 801c1da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c1de:	f8cd 800c 	str.w	r8, [sp, #12]
 801c1e2:	2330      	movs	r3, #48	@ 0x30
 801c1e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c394 <_vfiprintf_r+0x21c>
 801c1e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c1ec:	f04f 0901 	mov.w	r9, #1
 801c1f0:	4623      	mov	r3, r4
 801c1f2:	469a      	mov	sl, r3
 801c1f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c1f8:	b10a      	cbz	r2, 801c1fe <_vfiprintf_r+0x86>
 801c1fa:	2a25      	cmp	r2, #37	@ 0x25
 801c1fc:	d1f9      	bne.n	801c1f2 <_vfiprintf_r+0x7a>
 801c1fe:	ebba 0b04 	subs.w	fp, sl, r4
 801c202:	d00b      	beq.n	801c21c <_vfiprintf_r+0xa4>
 801c204:	465b      	mov	r3, fp
 801c206:	4622      	mov	r2, r4
 801c208:	4629      	mov	r1, r5
 801c20a:	4630      	mov	r0, r6
 801c20c:	f7ff ffa1 	bl	801c152 <__sfputs_r>
 801c210:	3001      	adds	r0, #1
 801c212:	f000 80a7 	beq.w	801c364 <_vfiprintf_r+0x1ec>
 801c216:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c218:	445a      	add	r2, fp
 801c21a:	9209      	str	r2, [sp, #36]	@ 0x24
 801c21c:	f89a 3000 	ldrb.w	r3, [sl]
 801c220:	2b00      	cmp	r3, #0
 801c222:	f000 809f 	beq.w	801c364 <_vfiprintf_r+0x1ec>
 801c226:	2300      	movs	r3, #0
 801c228:	f04f 32ff 	mov.w	r2, #4294967295
 801c22c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c230:	f10a 0a01 	add.w	sl, sl, #1
 801c234:	9304      	str	r3, [sp, #16]
 801c236:	9307      	str	r3, [sp, #28]
 801c238:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c23c:	931a      	str	r3, [sp, #104]	@ 0x68
 801c23e:	4654      	mov	r4, sl
 801c240:	2205      	movs	r2, #5
 801c242:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c246:	4853      	ldr	r0, [pc, #332]	@ (801c394 <_vfiprintf_r+0x21c>)
 801c248:	f7e3 ffca 	bl	80001e0 <memchr>
 801c24c:	9a04      	ldr	r2, [sp, #16]
 801c24e:	b9d8      	cbnz	r0, 801c288 <_vfiprintf_r+0x110>
 801c250:	06d1      	lsls	r1, r2, #27
 801c252:	bf44      	itt	mi
 801c254:	2320      	movmi	r3, #32
 801c256:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c25a:	0713      	lsls	r3, r2, #28
 801c25c:	bf44      	itt	mi
 801c25e:	232b      	movmi	r3, #43	@ 0x2b
 801c260:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c264:	f89a 3000 	ldrb.w	r3, [sl]
 801c268:	2b2a      	cmp	r3, #42	@ 0x2a
 801c26a:	d015      	beq.n	801c298 <_vfiprintf_r+0x120>
 801c26c:	9a07      	ldr	r2, [sp, #28]
 801c26e:	4654      	mov	r4, sl
 801c270:	2000      	movs	r0, #0
 801c272:	f04f 0c0a 	mov.w	ip, #10
 801c276:	4621      	mov	r1, r4
 801c278:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c27c:	3b30      	subs	r3, #48	@ 0x30
 801c27e:	2b09      	cmp	r3, #9
 801c280:	d94b      	bls.n	801c31a <_vfiprintf_r+0x1a2>
 801c282:	b1b0      	cbz	r0, 801c2b2 <_vfiprintf_r+0x13a>
 801c284:	9207      	str	r2, [sp, #28]
 801c286:	e014      	b.n	801c2b2 <_vfiprintf_r+0x13a>
 801c288:	eba0 0308 	sub.w	r3, r0, r8
 801c28c:	fa09 f303 	lsl.w	r3, r9, r3
 801c290:	4313      	orrs	r3, r2
 801c292:	9304      	str	r3, [sp, #16]
 801c294:	46a2      	mov	sl, r4
 801c296:	e7d2      	b.n	801c23e <_vfiprintf_r+0xc6>
 801c298:	9b03      	ldr	r3, [sp, #12]
 801c29a:	1d19      	adds	r1, r3, #4
 801c29c:	681b      	ldr	r3, [r3, #0]
 801c29e:	9103      	str	r1, [sp, #12]
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	bfbb      	ittet	lt
 801c2a4:	425b      	neglt	r3, r3
 801c2a6:	f042 0202 	orrlt.w	r2, r2, #2
 801c2aa:	9307      	strge	r3, [sp, #28]
 801c2ac:	9307      	strlt	r3, [sp, #28]
 801c2ae:	bfb8      	it	lt
 801c2b0:	9204      	strlt	r2, [sp, #16]
 801c2b2:	7823      	ldrb	r3, [r4, #0]
 801c2b4:	2b2e      	cmp	r3, #46	@ 0x2e
 801c2b6:	d10a      	bne.n	801c2ce <_vfiprintf_r+0x156>
 801c2b8:	7863      	ldrb	r3, [r4, #1]
 801c2ba:	2b2a      	cmp	r3, #42	@ 0x2a
 801c2bc:	d132      	bne.n	801c324 <_vfiprintf_r+0x1ac>
 801c2be:	9b03      	ldr	r3, [sp, #12]
 801c2c0:	1d1a      	adds	r2, r3, #4
 801c2c2:	681b      	ldr	r3, [r3, #0]
 801c2c4:	9203      	str	r2, [sp, #12]
 801c2c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c2ca:	3402      	adds	r4, #2
 801c2cc:	9305      	str	r3, [sp, #20]
 801c2ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c3a4 <_vfiprintf_r+0x22c>
 801c2d2:	7821      	ldrb	r1, [r4, #0]
 801c2d4:	2203      	movs	r2, #3
 801c2d6:	4650      	mov	r0, sl
 801c2d8:	f7e3 ff82 	bl	80001e0 <memchr>
 801c2dc:	b138      	cbz	r0, 801c2ee <_vfiprintf_r+0x176>
 801c2de:	9b04      	ldr	r3, [sp, #16]
 801c2e0:	eba0 000a 	sub.w	r0, r0, sl
 801c2e4:	2240      	movs	r2, #64	@ 0x40
 801c2e6:	4082      	lsls	r2, r0
 801c2e8:	4313      	orrs	r3, r2
 801c2ea:	3401      	adds	r4, #1
 801c2ec:	9304      	str	r3, [sp, #16]
 801c2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c2f2:	4829      	ldr	r0, [pc, #164]	@ (801c398 <_vfiprintf_r+0x220>)
 801c2f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c2f8:	2206      	movs	r2, #6
 801c2fa:	f7e3 ff71 	bl	80001e0 <memchr>
 801c2fe:	2800      	cmp	r0, #0
 801c300:	d03f      	beq.n	801c382 <_vfiprintf_r+0x20a>
 801c302:	4b26      	ldr	r3, [pc, #152]	@ (801c39c <_vfiprintf_r+0x224>)
 801c304:	bb1b      	cbnz	r3, 801c34e <_vfiprintf_r+0x1d6>
 801c306:	9b03      	ldr	r3, [sp, #12]
 801c308:	3307      	adds	r3, #7
 801c30a:	f023 0307 	bic.w	r3, r3, #7
 801c30e:	3308      	adds	r3, #8
 801c310:	9303      	str	r3, [sp, #12]
 801c312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c314:	443b      	add	r3, r7
 801c316:	9309      	str	r3, [sp, #36]	@ 0x24
 801c318:	e76a      	b.n	801c1f0 <_vfiprintf_r+0x78>
 801c31a:	fb0c 3202 	mla	r2, ip, r2, r3
 801c31e:	460c      	mov	r4, r1
 801c320:	2001      	movs	r0, #1
 801c322:	e7a8      	b.n	801c276 <_vfiprintf_r+0xfe>
 801c324:	2300      	movs	r3, #0
 801c326:	3401      	adds	r4, #1
 801c328:	9305      	str	r3, [sp, #20]
 801c32a:	4619      	mov	r1, r3
 801c32c:	f04f 0c0a 	mov.w	ip, #10
 801c330:	4620      	mov	r0, r4
 801c332:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c336:	3a30      	subs	r2, #48	@ 0x30
 801c338:	2a09      	cmp	r2, #9
 801c33a:	d903      	bls.n	801c344 <_vfiprintf_r+0x1cc>
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d0c6      	beq.n	801c2ce <_vfiprintf_r+0x156>
 801c340:	9105      	str	r1, [sp, #20]
 801c342:	e7c4      	b.n	801c2ce <_vfiprintf_r+0x156>
 801c344:	fb0c 2101 	mla	r1, ip, r1, r2
 801c348:	4604      	mov	r4, r0
 801c34a:	2301      	movs	r3, #1
 801c34c:	e7f0      	b.n	801c330 <_vfiprintf_r+0x1b8>
 801c34e:	ab03      	add	r3, sp, #12
 801c350:	9300      	str	r3, [sp, #0]
 801c352:	462a      	mov	r2, r5
 801c354:	4b12      	ldr	r3, [pc, #72]	@ (801c3a0 <_vfiprintf_r+0x228>)
 801c356:	a904      	add	r1, sp, #16
 801c358:	4630      	mov	r0, r6
 801c35a:	f3af 8000 	nop.w
 801c35e:	4607      	mov	r7, r0
 801c360:	1c78      	adds	r0, r7, #1
 801c362:	d1d6      	bne.n	801c312 <_vfiprintf_r+0x19a>
 801c364:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c366:	07d9      	lsls	r1, r3, #31
 801c368:	d405      	bmi.n	801c376 <_vfiprintf_r+0x1fe>
 801c36a:	89ab      	ldrh	r3, [r5, #12]
 801c36c:	059a      	lsls	r2, r3, #22
 801c36e:	d402      	bmi.n	801c376 <_vfiprintf_r+0x1fe>
 801c370:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c372:	f7ff fc49 	bl	801bc08 <__retarget_lock_release_recursive>
 801c376:	89ab      	ldrh	r3, [r5, #12]
 801c378:	065b      	lsls	r3, r3, #25
 801c37a:	f53f af1f 	bmi.w	801c1bc <_vfiprintf_r+0x44>
 801c37e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c380:	e71e      	b.n	801c1c0 <_vfiprintf_r+0x48>
 801c382:	ab03      	add	r3, sp, #12
 801c384:	9300      	str	r3, [sp, #0]
 801c386:	462a      	mov	r2, r5
 801c388:	4b05      	ldr	r3, [pc, #20]	@ (801c3a0 <_vfiprintf_r+0x228>)
 801c38a:	a904      	add	r1, sp, #16
 801c38c:	4630      	mov	r0, r6
 801c38e:	f000 f879 	bl	801c484 <_printf_i>
 801c392:	e7e4      	b.n	801c35e <_vfiprintf_r+0x1e6>
 801c394:	0802104b 	.word	0x0802104b
 801c398:	08021055 	.word	0x08021055
 801c39c:	00000000 	.word	0x00000000
 801c3a0:	0801c153 	.word	0x0801c153
 801c3a4:	08021051 	.word	0x08021051

0801c3a8 <_printf_common>:
 801c3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c3ac:	4616      	mov	r6, r2
 801c3ae:	4698      	mov	r8, r3
 801c3b0:	688a      	ldr	r2, [r1, #8]
 801c3b2:	690b      	ldr	r3, [r1, #16]
 801c3b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c3b8:	4293      	cmp	r3, r2
 801c3ba:	bfb8      	it	lt
 801c3bc:	4613      	movlt	r3, r2
 801c3be:	6033      	str	r3, [r6, #0]
 801c3c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c3c4:	4607      	mov	r7, r0
 801c3c6:	460c      	mov	r4, r1
 801c3c8:	b10a      	cbz	r2, 801c3ce <_printf_common+0x26>
 801c3ca:	3301      	adds	r3, #1
 801c3cc:	6033      	str	r3, [r6, #0]
 801c3ce:	6823      	ldr	r3, [r4, #0]
 801c3d0:	0699      	lsls	r1, r3, #26
 801c3d2:	bf42      	ittt	mi
 801c3d4:	6833      	ldrmi	r3, [r6, #0]
 801c3d6:	3302      	addmi	r3, #2
 801c3d8:	6033      	strmi	r3, [r6, #0]
 801c3da:	6825      	ldr	r5, [r4, #0]
 801c3dc:	f015 0506 	ands.w	r5, r5, #6
 801c3e0:	d106      	bne.n	801c3f0 <_printf_common+0x48>
 801c3e2:	f104 0a19 	add.w	sl, r4, #25
 801c3e6:	68e3      	ldr	r3, [r4, #12]
 801c3e8:	6832      	ldr	r2, [r6, #0]
 801c3ea:	1a9b      	subs	r3, r3, r2
 801c3ec:	42ab      	cmp	r3, r5
 801c3ee:	dc26      	bgt.n	801c43e <_printf_common+0x96>
 801c3f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c3f4:	6822      	ldr	r2, [r4, #0]
 801c3f6:	3b00      	subs	r3, #0
 801c3f8:	bf18      	it	ne
 801c3fa:	2301      	movne	r3, #1
 801c3fc:	0692      	lsls	r2, r2, #26
 801c3fe:	d42b      	bmi.n	801c458 <_printf_common+0xb0>
 801c400:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c404:	4641      	mov	r1, r8
 801c406:	4638      	mov	r0, r7
 801c408:	47c8      	blx	r9
 801c40a:	3001      	adds	r0, #1
 801c40c:	d01e      	beq.n	801c44c <_printf_common+0xa4>
 801c40e:	6823      	ldr	r3, [r4, #0]
 801c410:	6922      	ldr	r2, [r4, #16]
 801c412:	f003 0306 	and.w	r3, r3, #6
 801c416:	2b04      	cmp	r3, #4
 801c418:	bf02      	ittt	eq
 801c41a:	68e5      	ldreq	r5, [r4, #12]
 801c41c:	6833      	ldreq	r3, [r6, #0]
 801c41e:	1aed      	subeq	r5, r5, r3
 801c420:	68a3      	ldr	r3, [r4, #8]
 801c422:	bf0c      	ite	eq
 801c424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c428:	2500      	movne	r5, #0
 801c42a:	4293      	cmp	r3, r2
 801c42c:	bfc4      	itt	gt
 801c42e:	1a9b      	subgt	r3, r3, r2
 801c430:	18ed      	addgt	r5, r5, r3
 801c432:	2600      	movs	r6, #0
 801c434:	341a      	adds	r4, #26
 801c436:	42b5      	cmp	r5, r6
 801c438:	d11a      	bne.n	801c470 <_printf_common+0xc8>
 801c43a:	2000      	movs	r0, #0
 801c43c:	e008      	b.n	801c450 <_printf_common+0xa8>
 801c43e:	2301      	movs	r3, #1
 801c440:	4652      	mov	r2, sl
 801c442:	4641      	mov	r1, r8
 801c444:	4638      	mov	r0, r7
 801c446:	47c8      	blx	r9
 801c448:	3001      	adds	r0, #1
 801c44a:	d103      	bne.n	801c454 <_printf_common+0xac>
 801c44c:	f04f 30ff 	mov.w	r0, #4294967295
 801c450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c454:	3501      	adds	r5, #1
 801c456:	e7c6      	b.n	801c3e6 <_printf_common+0x3e>
 801c458:	18e1      	adds	r1, r4, r3
 801c45a:	1c5a      	adds	r2, r3, #1
 801c45c:	2030      	movs	r0, #48	@ 0x30
 801c45e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c462:	4422      	add	r2, r4
 801c464:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c468:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c46c:	3302      	adds	r3, #2
 801c46e:	e7c7      	b.n	801c400 <_printf_common+0x58>
 801c470:	2301      	movs	r3, #1
 801c472:	4622      	mov	r2, r4
 801c474:	4641      	mov	r1, r8
 801c476:	4638      	mov	r0, r7
 801c478:	47c8      	blx	r9
 801c47a:	3001      	adds	r0, #1
 801c47c:	d0e6      	beq.n	801c44c <_printf_common+0xa4>
 801c47e:	3601      	adds	r6, #1
 801c480:	e7d9      	b.n	801c436 <_printf_common+0x8e>
	...

0801c484 <_printf_i>:
 801c484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c488:	7e0f      	ldrb	r7, [r1, #24]
 801c48a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c48c:	2f78      	cmp	r7, #120	@ 0x78
 801c48e:	4691      	mov	r9, r2
 801c490:	4680      	mov	r8, r0
 801c492:	460c      	mov	r4, r1
 801c494:	469a      	mov	sl, r3
 801c496:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c49a:	d807      	bhi.n	801c4ac <_printf_i+0x28>
 801c49c:	2f62      	cmp	r7, #98	@ 0x62
 801c49e:	d80a      	bhi.n	801c4b6 <_printf_i+0x32>
 801c4a0:	2f00      	cmp	r7, #0
 801c4a2:	f000 80d1 	beq.w	801c648 <_printf_i+0x1c4>
 801c4a6:	2f58      	cmp	r7, #88	@ 0x58
 801c4a8:	f000 80b8 	beq.w	801c61c <_printf_i+0x198>
 801c4ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c4b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c4b4:	e03a      	b.n	801c52c <_printf_i+0xa8>
 801c4b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c4ba:	2b15      	cmp	r3, #21
 801c4bc:	d8f6      	bhi.n	801c4ac <_printf_i+0x28>
 801c4be:	a101      	add	r1, pc, #4	@ (adr r1, 801c4c4 <_printf_i+0x40>)
 801c4c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c4c4:	0801c51d 	.word	0x0801c51d
 801c4c8:	0801c531 	.word	0x0801c531
 801c4cc:	0801c4ad 	.word	0x0801c4ad
 801c4d0:	0801c4ad 	.word	0x0801c4ad
 801c4d4:	0801c4ad 	.word	0x0801c4ad
 801c4d8:	0801c4ad 	.word	0x0801c4ad
 801c4dc:	0801c531 	.word	0x0801c531
 801c4e0:	0801c4ad 	.word	0x0801c4ad
 801c4e4:	0801c4ad 	.word	0x0801c4ad
 801c4e8:	0801c4ad 	.word	0x0801c4ad
 801c4ec:	0801c4ad 	.word	0x0801c4ad
 801c4f0:	0801c62f 	.word	0x0801c62f
 801c4f4:	0801c55b 	.word	0x0801c55b
 801c4f8:	0801c5e9 	.word	0x0801c5e9
 801c4fc:	0801c4ad 	.word	0x0801c4ad
 801c500:	0801c4ad 	.word	0x0801c4ad
 801c504:	0801c651 	.word	0x0801c651
 801c508:	0801c4ad 	.word	0x0801c4ad
 801c50c:	0801c55b 	.word	0x0801c55b
 801c510:	0801c4ad 	.word	0x0801c4ad
 801c514:	0801c4ad 	.word	0x0801c4ad
 801c518:	0801c5f1 	.word	0x0801c5f1
 801c51c:	6833      	ldr	r3, [r6, #0]
 801c51e:	1d1a      	adds	r2, r3, #4
 801c520:	681b      	ldr	r3, [r3, #0]
 801c522:	6032      	str	r2, [r6, #0]
 801c524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c528:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c52c:	2301      	movs	r3, #1
 801c52e:	e09c      	b.n	801c66a <_printf_i+0x1e6>
 801c530:	6833      	ldr	r3, [r6, #0]
 801c532:	6820      	ldr	r0, [r4, #0]
 801c534:	1d19      	adds	r1, r3, #4
 801c536:	6031      	str	r1, [r6, #0]
 801c538:	0606      	lsls	r6, r0, #24
 801c53a:	d501      	bpl.n	801c540 <_printf_i+0xbc>
 801c53c:	681d      	ldr	r5, [r3, #0]
 801c53e:	e003      	b.n	801c548 <_printf_i+0xc4>
 801c540:	0645      	lsls	r5, r0, #25
 801c542:	d5fb      	bpl.n	801c53c <_printf_i+0xb8>
 801c544:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c548:	2d00      	cmp	r5, #0
 801c54a:	da03      	bge.n	801c554 <_printf_i+0xd0>
 801c54c:	232d      	movs	r3, #45	@ 0x2d
 801c54e:	426d      	negs	r5, r5
 801c550:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c554:	4858      	ldr	r0, [pc, #352]	@ (801c6b8 <_printf_i+0x234>)
 801c556:	230a      	movs	r3, #10
 801c558:	e011      	b.n	801c57e <_printf_i+0xfa>
 801c55a:	6821      	ldr	r1, [r4, #0]
 801c55c:	6833      	ldr	r3, [r6, #0]
 801c55e:	0608      	lsls	r0, r1, #24
 801c560:	f853 5b04 	ldr.w	r5, [r3], #4
 801c564:	d402      	bmi.n	801c56c <_printf_i+0xe8>
 801c566:	0649      	lsls	r1, r1, #25
 801c568:	bf48      	it	mi
 801c56a:	b2ad      	uxthmi	r5, r5
 801c56c:	2f6f      	cmp	r7, #111	@ 0x6f
 801c56e:	4852      	ldr	r0, [pc, #328]	@ (801c6b8 <_printf_i+0x234>)
 801c570:	6033      	str	r3, [r6, #0]
 801c572:	bf14      	ite	ne
 801c574:	230a      	movne	r3, #10
 801c576:	2308      	moveq	r3, #8
 801c578:	2100      	movs	r1, #0
 801c57a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c57e:	6866      	ldr	r6, [r4, #4]
 801c580:	60a6      	str	r6, [r4, #8]
 801c582:	2e00      	cmp	r6, #0
 801c584:	db05      	blt.n	801c592 <_printf_i+0x10e>
 801c586:	6821      	ldr	r1, [r4, #0]
 801c588:	432e      	orrs	r6, r5
 801c58a:	f021 0104 	bic.w	r1, r1, #4
 801c58e:	6021      	str	r1, [r4, #0]
 801c590:	d04b      	beq.n	801c62a <_printf_i+0x1a6>
 801c592:	4616      	mov	r6, r2
 801c594:	fbb5 f1f3 	udiv	r1, r5, r3
 801c598:	fb03 5711 	mls	r7, r3, r1, r5
 801c59c:	5dc7      	ldrb	r7, [r0, r7]
 801c59e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c5a2:	462f      	mov	r7, r5
 801c5a4:	42bb      	cmp	r3, r7
 801c5a6:	460d      	mov	r5, r1
 801c5a8:	d9f4      	bls.n	801c594 <_printf_i+0x110>
 801c5aa:	2b08      	cmp	r3, #8
 801c5ac:	d10b      	bne.n	801c5c6 <_printf_i+0x142>
 801c5ae:	6823      	ldr	r3, [r4, #0]
 801c5b0:	07df      	lsls	r7, r3, #31
 801c5b2:	d508      	bpl.n	801c5c6 <_printf_i+0x142>
 801c5b4:	6923      	ldr	r3, [r4, #16]
 801c5b6:	6861      	ldr	r1, [r4, #4]
 801c5b8:	4299      	cmp	r1, r3
 801c5ba:	bfde      	ittt	le
 801c5bc:	2330      	movle	r3, #48	@ 0x30
 801c5be:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c5c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c5c6:	1b92      	subs	r2, r2, r6
 801c5c8:	6122      	str	r2, [r4, #16]
 801c5ca:	f8cd a000 	str.w	sl, [sp]
 801c5ce:	464b      	mov	r3, r9
 801c5d0:	aa03      	add	r2, sp, #12
 801c5d2:	4621      	mov	r1, r4
 801c5d4:	4640      	mov	r0, r8
 801c5d6:	f7ff fee7 	bl	801c3a8 <_printf_common>
 801c5da:	3001      	adds	r0, #1
 801c5dc:	d14a      	bne.n	801c674 <_printf_i+0x1f0>
 801c5de:	f04f 30ff 	mov.w	r0, #4294967295
 801c5e2:	b004      	add	sp, #16
 801c5e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c5e8:	6823      	ldr	r3, [r4, #0]
 801c5ea:	f043 0320 	orr.w	r3, r3, #32
 801c5ee:	6023      	str	r3, [r4, #0]
 801c5f0:	4832      	ldr	r0, [pc, #200]	@ (801c6bc <_printf_i+0x238>)
 801c5f2:	2778      	movs	r7, #120	@ 0x78
 801c5f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c5f8:	6823      	ldr	r3, [r4, #0]
 801c5fa:	6831      	ldr	r1, [r6, #0]
 801c5fc:	061f      	lsls	r7, r3, #24
 801c5fe:	f851 5b04 	ldr.w	r5, [r1], #4
 801c602:	d402      	bmi.n	801c60a <_printf_i+0x186>
 801c604:	065f      	lsls	r7, r3, #25
 801c606:	bf48      	it	mi
 801c608:	b2ad      	uxthmi	r5, r5
 801c60a:	6031      	str	r1, [r6, #0]
 801c60c:	07d9      	lsls	r1, r3, #31
 801c60e:	bf44      	itt	mi
 801c610:	f043 0320 	orrmi.w	r3, r3, #32
 801c614:	6023      	strmi	r3, [r4, #0]
 801c616:	b11d      	cbz	r5, 801c620 <_printf_i+0x19c>
 801c618:	2310      	movs	r3, #16
 801c61a:	e7ad      	b.n	801c578 <_printf_i+0xf4>
 801c61c:	4826      	ldr	r0, [pc, #152]	@ (801c6b8 <_printf_i+0x234>)
 801c61e:	e7e9      	b.n	801c5f4 <_printf_i+0x170>
 801c620:	6823      	ldr	r3, [r4, #0]
 801c622:	f023 0320 	bic.w	r3, r3, #32
 801c626:	6023      	str	r3, [r4, #0]
 801c628:	e7f6      	b.n	801c618 <_printf_i+0x194>
 801c62a:	4616      	mov	r6, r2
 801c62c:	e7bd      	b.n	801c5aa <_printf_i+0x126>
 801c62e:	6833      	ldr	r3, [r6, #0]
 801c630:	6825      	ldr	r5, [r4, #0]
 801c632:	6961      	ldr	r1, [r4, #20]
 801c634:	1d18      	adds	r0, r3, #4
 801c636:	6030      	str	r0, [r6, #0]
 801c638:	062e      	lsls	r6, r5, #24
 801c63a:	681b      	ldr	r3, [r3, #0]
 801c63c:	d501      	bpl.n	801c642 <_printf_i+0x1be>
 801c63e:	6019      	str	r1, [r3, #0]
 801c640:	e002      	b.n	801c648 <_printf_i+0x1c4>
 801c642:	0668      	lsls	r0, r5, #25
 801c644:	d5fb      	bpl.n	801c63e <_printf_i+0x1ba>
 801c646:	8019      	strh	r1, [r3, #0]
 801c648:	2300      	movs	r3, #0
 801c64a:	6123      	str	r3, [r4, #16]
 801c64c:	4616      	mov	r6, r2
 801c64e:	e7bc      	b.n	801c5ca <_printf_i+0x146>
 801c650:	6833      	ldr	r3, [r6, #0]
 801c652:	1d1a      	adds	r2, r3, #4
 801c654:	6032      	str	r2, [r6, #0]
 801c656:	681e      	ldr	r6, [r3, #0]
 801c658:	6862      	ldr	r2, [r4, #4]
 801c65a:	2100      	movs	r1, #0
 801c65c:	4630      	mov	r0, r6
 801c65e:	f7e3 fdbf 	bl	80001e0 <memchr>
 801c662:	b108      	cbz	r0, 801c668 <_printf_i+0x1e4>
 801c664:	1b80      	subs	r0, r0, r6
 801c666:	6060      	str	r0, [r4, #4]
 801c668:	6863      	ldr	r3, [r4, #4]
 801c66a:	6123      	str	r3, [r4, #16]
 801c66c:	2300      	movs	r3, #0
 801c66e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c672:	e7aa      	b.n	801c5ca <_printf_i+0x146>
 801c674:	6923      	ldr	r3, [r4, #16]
 801c676:	4632      	mov	r2, r6
 801c678:	4649      	mov	r1, r9
 801c67a:	4640      	mov	r0, r8
 801c67c:	47d0      	blx	sl
 801c67e:	3001      	adds	r0, #1
 801c680:	d0ad      	beq.n	801c5de <_printf_i+0x15a>
 801c682:	6823      	ldr	r3, [r4, #0]
 801c684:	079b      	lsls	r3, r3, #30
 801c686:	d413      	bmi.n	801c6b0 <_printf_i+0x22c>
 801c688:	68e0      	ldr	r0, [r4, #12]
 801c68a:	9b03      	ldr	r3, [sp, #12]
 801c68c:	4298      	cmp	r0, r3
 801c68e:	bfb8      	it	lt
 801c690:	4618      	movlt	r0, r3
 801c692:	e7a6      	b.n	801c5e2 <_printf_i+0x15e>
 801c694:	2301      	movs	r3, #1
 801c696:	4632      	mov	r2, r6
 801c698:	4649      	mov	r1, r9
 801c69a:	4640      	mov	r0, r8
 801c69c:	47d0      	blx	sl
 801c69e:	3001      	adds	r0, #1
 801c6a0:	d09d      	beq.n	801c5de <_printf_i+0x15a>
 801c6a2:	3501      	adds	r5, #1
 801c6a4:	68e3      	ldr	r3, [r4, #12]
 801c6a6:	9903      	ldr	r1, [sp, #12]
 801c6a8:	1a5b      	subs	r3, r3, r1
 801c6aa:	42ab      	cmp	r3, r5
 801c6ac:	dcf2      	bgt.n	801c694 <_printf_i+0x210>
 801c6ae:	e7eb      	b.n	801c688 <_printf_i+0x204>
 801c6b0:	2500      	movs	r5, #0
 801c6b2:	f104 0619 	add.w	r6, r4, #25
 801c6b6:	e7f5      	b.n	801c6a4 <_printf_i+0x220>
 801c6b8:	0802105c 	.word	0x0802105c
 801c6bc:	0802106d 	.word	0x0802106d

0801c6c0 <__sflush_r>:
 801c6c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c6c8:	0716      	lsls	r6, r2, #28
 801c6ca:	4605      	mov	r5, r0
 801c6cc:	460c      	mov	r4, r1
 801c6ce:	d454      	bmi.n	801c77a <__sflush_r+0xba>
 801c6d0:	684b      	ldr	r3, [r1, #4]
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	dc02      	bgt.n	801c6dc <__sflush_r+0x1c>
 801c6d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	dd48      	ble.n	801c76e <__sflush_r+0xae>
 801c6dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c6de:	2e00      	cmp	r6, #0
 801c6e0:	d045      	beq.n	801c76e <__sflush_r+0xae>
 801c6e2:	2300      	movs	r3, #0
 801c6e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c6e8:	682f      	ldr	r7, [r5, #0]
 801c6ea:	6a21      	ldr	r1, [r4, #32]
 801c6ec:	602b      	str	r3, [r5, #0]
 801c6ee:	d030      	beq.n	801c752 <__sflush_r+0x92>
 801c6f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c6f2:	89a3      	ldrh	r3, [r4, #12]
 801c6f4:	0759      	lsls	r1, r3, #29
 801c6f6:	d505      	bpl.n	801c704 <__sflush_r+0x44>
 801c6f8:	6863      	ldr	r3, [r4, #4]
 801c6fa:	1ad2      	subs	r2, r2, r3
 801c6fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c6fe:	b10b      	cbz	r3, 801c704 <__sflush_r+0x44>
 801c700:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c702:	1ad2      	subs	r2, r2, r3
 801c704:	2300      	movs	r3, #0
 801c706:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c708:	6a21      	ldr	r1, [r4, #32]
 801c70a:	4628      	mov	r0, r5
 801c70c:	47b0      	blx	r6
 801c70e:	1c43      	adds	r3, r0, #1
 801c710:	89a3      	ldrh	r3, [r4, #12]
 801c712:	d106      	bne.n	801c722 <__sflush_r+0x62>
 801c714:	6829      	ldr	r1, [r5, #0]
 801c716:	291d      	cmp	r1, #29
 801c718:	d82b      	bhi.n	801c772 <__sflush_r+0xb2>
 801c71a:	4a2a      	ldr	r2, [pc, #168]	@ (801c7c4 <__sflush_r+0x104>)
 801c71c:	40ca      	lsrs	r2, r1
 801c71e:	07d6      	lsls	r6, r2, #31
 801c720:	d527      	bpl.n	801c772 <__sflush_r+0xb2>
 801c722:	2200      	movs	r2, #0
 801c724:	6062      	str	r2, [r4, #4]
 801c726:	04d9      	lsls	r1, r3, #19
 801c728:	6922      	ldr	r2, [r4, #16]
 801c72a:	6022      	str	r2, [r4, #0]
 801c72c:	d504      	bpl.n	801c738 <__sflush_r+0x78>
 801c72e:	1c42      	adds	r2, r0, #1
 801c730:	d101      	bne.n	801c736 <__sflush_r+0x76>
 801c732:	682b      	ldr	r3, [r5, #0]
 801c734:	b903      	cbnz	r3, 801c738 <__sflush_r+0x78>
 801c736:	6560      	str	r0, [r4, #84]	@ 0x54
 801c738:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c73a:	602f      	str	r7, [r5, #0]
 801c73c:	b1b9      	cbz	r1, 801c76e <__sflush_r+0xae>
 801c73e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c742:	4299      	cmp	r1, r3
 801c744:	d002      	beq.n	801c74c <__sflush_r+0x8c>
 801c746:	4628      	mov	r0, r5
 801c748:	f7ff fa94 	bl	801bc74 <_free_r>
 801c74c:	2300      	movs	r3, #0
 801c74e:	6363      	str	r3, [r4, #52]	@ 0x34
 801c750:	e00d      	b.n	801c76e <__sflush_r+0xae>
 801c752:	2301      	movs	r3, #1
 801c754:	4628      	mov	r0, r5
 801c756:	47b0      	blx	r6
 801c758:	4602      	mov	r2, r0
 801c75a:	1c50      	adds	r0, r2, #1
 801c75c:	d1c9      	bne.n	801c6f2 <__sflush_r+0x32>
 801c75e:	682b      	ldr	r3, [r5, #0]
 801c760:	2b00      	cmp	r3, #0
 801c762:	d0c6      	beq.n	801c6f2 <__sflush_r+0x32>
 801c764:	2b1d      	cmp	r3, #29
 801c766:	d001      	beq.n	801c76c <__sflush_r+0xac>
 801c768:	2b16      	cmp	r3, #22
 801c76a:	d11e      	bne.n	801c7aa <__sflush_r+0xea>
 801c76c:	602f      	str	r7, [r5, #0]
 801c76e:	2000      	movs	r0, #0
 801c770:	e022      	b.n	801c7b8 <__sflush_r+0xf8>
 801c772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c776:	b21b      	sxth	r3, r3
 801c778:	e01b      	b.n	801c7b2 <__sflush_r+0xf2>
 801c77a:	690f      	ldr	r7, [r1, #16]
 801c77c:	2f00      	cmp	r7, #0
 801c77e:	d0f6      	beq.n	801c76e <__sflush_r+0xae>
 801c780:	0793      	lsls	r3, r2, #30
 801c782:	680e      	ldr	r6, [r1, #0]
 801c784:	bf08      	it	eq
 801c786:	694b      	ldreq	r3, [r1, #20]
 801c788:	600f      	str	r7, [r1, #0]
 801c78a:	bf18      	it	ne
 801c78c:	2300      	movne	r3, #0
 801c78e:	eba6 0807 	sub.w	r8, r6, r7
 801c792:	608b      	str	r3, [r1, #8]
 801c794:	f1b8 0f00 	cmp.w	r8, #0
 801c798:	dde9      	ble.n	801c76e <__sflush_r+0xae>
 801c79a:	6a21      	ldr	r1, [r4, #32]
 801c79c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c79e:	4643      	mov	r3, r8
 801c7a0:	463a      	mov	r2, r7
 801c7a2:	4628      	mov	r0, r5
 801c7a4:	47b0      	blx	r6
 801c7a6:	2800      	cmp	r0, #0
 801c7a8:	dc08      	bgt.n	801c7bc <__sflush_r+0xfc>
 801c7aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c7ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c7b2:	81a3      	strh	r3, [r4, #12]
 801c7b4:	f04f 30ff 	mov.w	r0, #4294967295
 801c7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7bc:	4407      	add	r7, r0
 801c7be:	eba8 0800 	sub.w	r8, r8, r0
 801c7c2:	e7e7      	b.n	801c794 <__sflush_r+0xd4>
 801c7c4:	20400001 	.word	0x20400001

0801c7c8 <_fflush_r>:
 801c7c8:	b538      	push	{r3, r4, r5, lr}
 801c7ca:	690b      	ldr	r3, [r1, #16]
 801c7cc:	4605      	mov	r5, r0
 801c7ce:	460c      	mov	r4, r1
 801c7d0:	b913      	cbnz	r3, 801c7d8 <_fflush_r+0x10>
 801c7d2:	2500      	movs	r5, #0
 801c7d4:	4628      	mov	r0, r5
 801c7d6:	bd38      	pop	{r3, r4, r5, pc}
 801c7d8:	b118      	cbz	r0, 801c7e2 <_fflush_r+0x1a>
 801c7da:	6a03      	ldr	r3, [r0, #32]
 801c7dc:	b90b      	cbnz	r3, 801c7e2 <_fflush_r+0x1a>
 801c7de:	f7ff f847 	bl	801b870 <__sinit>
 801c7e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	d0f3      	beq.n	801c7d2 <_fflush_r+0xa>
 801c7ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c7ec:	07d0      	lsls	r0, r2, #31
 801c7ee:	d404      	bmi.n	801c7fa <_fflush_r+0x32>
 801c7f0:	0599      	lsls	r1, r3, #22
 801c7f2:	d402      	bmi.n	801c7fa <_fflush_r+0x32>
 801c7f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c7f6:	f7ff fa06 	bl	801bc06 <__retarget_lock_acquire_recursive>
 801c7fa:	4628      	mov	r0, r5
 801c7fc:	4621      	mov	r1, r4
 801c7fe:	f7ff ff5f 	bl	801c6c0 <__sflush_r>
 801c802:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c804:	07da      	lsls	r2, r3, #31
 801c806:	4605      	mov	r5, r0
 801c808:	d4e4      	bmi.n	801c7d4 <_fflush_r+0xc>
 801c80a:	89a3      	ldrh	r3, [r4, #12]
 801c80c:	059b      	lsls	r3, r3, #22
 801c80e:	d4e1      	bmi.n	801c7d4 <_fflush_r+0xc>
 801c810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c812:	f7ff f9f9 	bl	801bc08 <__retarget_lock_release_recursive>
 801c816:	e7dd      	b.n	801c7d4 <_fflush_r+0xc>

0801c818 <fiprintf>:
 801c818:	b40e      	push	{r1, r2, r3}
 801c81a:	b503      	push	{r0, r1, lr}
 801c81c:	4601      	mov	r1, r0
 801c81e:	ab03      	add	r3, sp, #12
 801c820:	4805      	ldr	r0, [pc, #20]	@ (801c838 <fiprintf+0x20>)
 801c822:	f853 2b04 	ldr.w	r2, [r3], #4
 801c826:	6800      	ldr	r0, [r0, #0]
 801c828:	9301      	str	r3, [sp, #4]
 801c82a:	f7ff fca5 	bl	801c178 <_vfiprintf_r>
 801c82e:	b002      	add	sp, #8
 801c830:	f85d eb04 	ldr.w	lr, [sp], #4
 801c834:	b003      	add	sp, #12
 801c836:	4770      	bx	lr
 801c838:	20000118 	.word	0x20000118

0801c83c <__swbuf_r>:
 801c83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c83e:	460e      	mov	r6, r1
 801c840:	4614      	mov	r4, r2
 801c842:	4605      	mov	r5, r0
 801c844:	b118      	cbz	r0, 801c84e <__swbuf_r+0x12>
 801c846:	6a03      	ldr	r3, [r0, #32]
 801c848:	b90b      	cbnz	r3, 801c84e <__swbuf_r+0x12>
 801c84a:	f7ff f811 	bl	801b870 <__sinit>
 801c84e:	69a3      	ldr	r3, [r4, #24]
 801c850:	60a3      	str	r3, [r4, #8]
 801c852:	89a3      	ldrh	r3, [r4, #12]
 801c854:	071a      	lsls	r2, r3, #28
 801c856:	d501      	bpl.n	801c85c <__swbuf_r+0x20>
 801c858:	6923      	ldr	r3, [r4, #16]
 801c85a:	b943      	cbnz	r3, 801c86e <__swbuf_r+0x32>
 801c85c:	4621      	mov	r1, r4
 801c85e:	4628      	mov	r0, r5
 801c860:	f000 f82a 	bl	801c8b8 <__swsetup_r>
 801c864:	b118      	cbz	r0, 801c86e <__swbuf_r+0x32>
 801c866:	f04f 37ff 	mov.w	r7, #4294967295
 801c86a:	4638      	mov	r0, r7
 801c86c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c86e:	6823      	ldr	r3, [r4, #0]
 801c870:	6922      	ldr	r2, [r4, #16]
 801c872:	1a98      	subs	r0, r3, r2
 801c874:	6963      	ldr	r3, [r4, #20]
 801c876:	b2f6      	uxtb	r6, r6
 801c878:	4283      	cmp	r3, r0
 801c87a:	4637      	mov	r7, r6
 801c87c:	dc05      	bgt.n	801c88a <__swbuf_r+0x4e>
 801c87e:	4621      	mov	r1, r4
 801c880:	4628      	mov	r0, r5
 801c882:	f7ff ffa1 	bl	801c7c8 <_fflush_r>
 801c886:	2800      	cmp	r0, #0
 801c888:	d1ed      	bne.n	801c866 <__swbuf_r+0x2a>
 801c88a:	68a3      	ldr	r3, [r4, #8]
 801c88c:	3b01      	subs	r3, #1
 801c88e:	60a3      	str	r3, [r4, #8]
 801c890:	6823      	ldr	r3, [r4, #0]
 801c892:	1c5a      	adds	r2, r3, #1
 801c894:	6022      	str	r2, [r4, #0]
 801c896:	701e      	strb	r6, [r3, #0]
 801c898:	6962      	ldr	r2, [r4, #20]
 801c89a:	1c43      	adds	r3, r0, #1
 801c89c:	429a      	cmp	r2, r3
 801c89e:	d004      	beq.n	801c8aa <__swbuf_r+0x6e>
 801c8a0:	89a3      	ldrh	r3, [r4, #12]
 801c8a2:	07db      	lsls	r3, r3, #31
 801c8a4:	d5e1      	bpl.n	801c86a <__swbuf_r+0x2e>
 801c8a6:	2e0a      	cmp	r6, #10
 801c8a8:	d1df      	bne.n	801c86a <__swbuf_r+0x2e>
 801c8aa:	4621      	mov	r1, r4
 801c8ac:	4628      	mov	r0, r5
 801c8ae:	f7ff ff8b 	bl	801c7c8 <_fflush_r>
 801c8b2:	2800      	cmp	r0, #0
 801c8b4:	d0d9      	beq.n	801c86a <__swbuf_r+0x2e>
 801c8b6:	e7d6      	b.n	801c866 <__swbuf_r+0x2a>

0801c8b8 <__swsetup_r>:
 801c8b8:	b538      	push	{r3, r4, r5, lr}
 801c8ba:	4b29      	ldr	r3, [pc, #164]	@ (801c960 <__swsetup_r+0xa8>)
 801c8bc:	4605      	mov	r5, r0
 801c8be:	6818      	ldr	r0, [r3, #0]
 801c8c0:	460c      	mov	r4, r1
 801c8c2:	b118      	cbz	r0, 801c8cc <__swsetup_r+0x14>
 801c8c4:	6a03      	ldr	r3, [r0, #32]
 801c8c6:	b90b      	cbnz	r3, 801c8cc <__swsetup_r+0x14>
 801c8c8:	f7fe ffd2 	bl	801b870 <__sinit>
 801c8cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c8d0:	0719      	lsls	r1, r3, #28
 801c8d2:	d422      	bmi.n	801c91a <__swsetup_r+0x62>
 801c8d4:	06da      	lsls	r2, r3, #27
 801c8d6:	d407      	bmi.n	801c8e8 <__swsetup_r+0x30>
 801c8d8:	2209      	movs	r2, #9
 801c8da:	602a      	str	r2, [r5, #0]
 801c8dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c8e0:	81a3      	strh	r3, [r4, #12]
 801c8e2:	f04f 30ff 	mov.w	r0, #4294967295
 801c8e6:	e033      	b.n	801c950 <__swsetup_r+0x98>
 801c8e8:	0758      	lsls	r0, r3, #29
 801c8ea:	d512      	bpl.n	801c912 <__swsetup_r+0x5a>
 801c8ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c8ee:	b141      	cbz	r1, 801c902 <__swsetup_r+0x4a>
 801c8f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c8f4:	4299      	cmp	r1, r3
 801c8f6:	d002      	beq.n	801c8fe <__swsetup_r+0x46>
 801c8f8:	4628      	mov	r0, r5
 801c8fa:	f7ff f9bb 	bl	801bc74 <_free_r>
 801c8fe:	2300      	movs	r3, #0
 801c900:	6363      	str	r3, [r4, #52]	@ 0x34
 801c902:	89a3      	ldrh	r3, [r4, #12]
 801c904:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c908:	81a3      	strh	r3, [r4, #12]
 801c90a:	2300      	movs	r3, #0
 801c90c:	6063      	str	r3, [r4, #4]
 801c90e:	6923      	ldr	r3, [r4, #16]
 801c910:	6023      	str	r3, [r4, #0]
 801c912:	89a3      	ldrh	r3, [r4, #12]
 801c914:	f043 0308 	orr.w	r3, r3, #8
 801c918:	81a3      	strh	r3, [r4, #12]
 801c91a:	6923      	ldr	r3, [r4, #16]
 801c91c:	b94b      	cbnz	r3, 801c932 <__swsetup_r+0x7a>
 801c91e:	89a3      	ldrh	r3, [r4, #12]
 801c920:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c928:	d003      	beq.n	801c932 <__swsetup_r+0x7a>
 801c92a:	4621      	mov	r1, r4
 801c92c:	4628      	mov	r0, r5
 801c92e:	f000 f884 	bl	801ca3a <__smakebuf_r>
 801c932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c936:	f013 0201 	ands.w	r2, r3, #1
 801c93a:	d00a      	beq.n	801c952 <__swsetup_r+0x9a>
 801c93c:	2200      	movs	r2, #0
 801c93e:	60a2      	str	r2, [r4, #8]
 801c940:	6962      	ldr	r2, [r4, #20]
 801c942:	4252      	negs	r2, r2
 801c944:	61a2      	str	r2, [r4, #24]
 801c946:	6922      	ldr	r2, [r4, #16]
 801c948:	b942      	cbnz	r2, 801c95c <__swsetup_r+0xa4>
 801c94a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c94e:	d1c5      	bne.n	801c8dc <__swsetup_r+0x24>
 801c950:	bd38      	pop	{r3, r4, r5, pc}
 801c952:	0799      	lsls	r1, r3, #30
 801c954:	bf58      	it	pl
 801c956:	6962      	ldrpl	r2, [r4, #20]
 801c958:	60a2      	str	r2, [r4, #8]
 801c95a:	e7f4      	b.n	801c946 <__swsetup_r+0x8e>
 801c95c:	2000      	movs	r0, #0
 801c95e:	e7f7      	b.n	801c950 <__swsetup_r+0x98>
 801c960:	20000118 	.word	0x20000118

0801c964 <_sbrk_r>:
 801c964:	b538      	push	{r3, r4, r5, lr}
 801c966:	4d06      	ldr	r5, [pc, #24]	@ (801c980 <_sbrk_r+0x1c>)
 801c968:	2300      	movs	r3, #0
 801c96a:	4604      	mov	r4, r0
 801c96c:	4608      	mov	r0, r1
 801c96e:	602b      	str	r3, [r5, #0]
 801c970:	f7e6 fbf0 	bl	8003154 <_sbrk>
 801c974:	1c43      	adds	r3, r0, #1
 801c976:	d102      	bne.n	801c97e <_sbrk_r+0x1a>
 801c978:	682b      	ldr	r3, [r5, #0]
 801c97a:	b103      	cbz	r3, 801c97e <_sbrk_r+0x1a>
 801c97c:	6023      	str	r3, [r4, #0]
 801c97e:	bd38      	pop	{r3, r4, r5, pc}
 801c980:	2000e73c 	.word	0x2000e73c

0801c984 <abort>:
 801c984:	b508      	push	{r3, lr}
 801c986:	2006      	movs	r0, #6
 801c988:	f000 f8bc 	bl	801cb04 <raise>
 801c98c:	2001      	movs	r0, #1
 801c98e:	f7e6 fb69 	bl	8003064 <_exit>

0801c992 <_realloc_r>:
 801c992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c996:	4607      	mov	r7, r0
 801c998:	4614      	mov	r4, r2
 801c99a:	460d      	mov	r5, r1
 801c99c:	b921      	cbnz	r1, 801c9a8 <_realloc_r+0x16>
 801c99e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c9a2:	4611      	mov	r1, r2
 801c9a4:	f7ff b9da 	b.w	801bd5c <_malloc_r>
 801c9a8:	b92a      	cbnz	r2, 801c9b6 <_realloc_r+0x24>
 801c9aa:	f7ff f963 	bl	801bc74 <_free_r>
 801c9ae:	4625      	mov	r5, r4
 801c9b0:	4628      	mov	r0, r5
 801c9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c9b6:	f000 f8e3 	bl	801cb80 <_malloc_usable_size_r>
 801c9ba:	4284      	cmp	r4, r0
 801c9bc:	4606      	mov	r6, r0
 801c9be:	d802      	bhi.n	801c9c6 <_realloc_r+0x34>
 801c9c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c9c4:	d8f4      	bhi.n	801c9b0 <_realloc_r+0x1e>
 801c9c6:	4621      	mov	r1, r4
 801c9c8:	4638      	mov	r0, r7
 801c9ca:	f7ff f9c7 	bl	801bd5c <_malloc_r>
 801c9ce:	4680      	mov	r8, r0
 801c9d0:	b908      	cbnz	r0, 801c9d6 <_realloc_r+0x44>
 801c9d2:	4645      	mov	r5, r8
 801c9d4:	e7ec      	b.n	801c9b0 <_realloc_r+0x1e>
 801c9d6:	42b4      	cmp	r4, r6
 801c9d8:	4622      	mov	r2, r4
 801c9da:	4629      	mov	r1, r5
 801c9dc:	bf28      	it	cs
 801c9de:	4632      	movcs	r2, r6
 801c9e0:	f7ff f91b 	bl	801bc1a <memcpy>
 801c9e4:	4629      	mov	r1, r5
 801c9e6:	4638      	mov	r0, r7
 801c9e8:	f7ff f944 	bl	801bc74 <_free_r>
 801c9ec:	e7f1      	b.n	801c9d2 <_realloc_r+0x40>

0801c9ee <__swhatbuf_r>:
 801c9ee:	b570      	push	{r4, r5, r6, lr}
 801c9f0:	460c      	mov	r4, r1
 801c9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c9f6:	2900      	cmp	r1, #0
 801c9f8:	b096      	sub	sp, #88	@ 0x58
 801c9fa:	4615      	mov	r5, r2
 801c9fc:	461e      	mov	r6, r3
 801c9fe:	da0d      	bge.n	801ca1c <__swhatbuf_r+0x2e>
 801ca00:	89a3      	ldrh	r3, [r4, #12]
 801ca02:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ca06:	f04f 0100 	mov.w	r1, #0
 801ca0a:	bf14      	ite	ne
 801ca0c:	2340      	movne	r3, #64	@ 0x40
 801ca0e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ca12:	2000      	movs	r0, #0
 801ca14:	6031      	str	r1, [r6, #0]
 801ca16:	602b      	str	r3, [r5, #0]
 801ca18:	b016      	add	sp, #88	@ 0x58
 801ca1a:	bd70      	pop	{r4, r5, r6, pc}
 801ca1c:	466a      	mov	r2, sp
 801ca1e:	f000 f879 	bl	801cb14 <_fstat_r>
 801ca22:	2800      	cmp	r0, #0
 801ca24:	dbec      	blt.n	801ca00 <__swhatbuf_r+0x12>
 801ca26:	9901      	ldr	r1, [sp, #4]
 801ca28:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ca2c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ca30:	4259      	negs	r1, r3
 801ca32:	4159      	adcs	r1, r3
 801ca34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ca38:	e7eb      	b.n	801ca12 <__swhatbuf_r+0x24>

0801ca3a <__smakebuf_r>:
 801ca3a:	898b      	ldrh	r3, [r1, #12]
 801ca3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ca3e:	079d      	lsls	r5, r3, #30
 801ca40:	4606      	mov	r6, r0
 801ca42:	460c      	mov	r4, r1
 801ca44:	d507      	bpl.n	801ca56 <__smakebuf_r+0x1c>
 801ca46:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ca4a:	6023      	str	r3, [r4, #0]
 801ca4c:	6123      	str	r3, [r4, #16]
 801ca4e:	2301      	movs	r3, #1
 801ca50:	6163      	str	r3, [r4, #20]
 801ca52:	b003      	add	sp, #12
 801ca54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca56:	ab01      	add	r3, sp, #4
 801ca58:	466a      	mov	r2, sp
 801ca5a:	f7ff ffc8 	bl	801c9ee <__swhatbuf_r>
 801ca5e:	9f00      	ldr	r7, [sp, #0]
 801ca60:	4605      	mov	r5, r0
 801ca62:	4639      	mov	r1, r7
 801ca64:	4630      	mov	r0, r6
 801ca66:	f7ff f979 	bl	801bd5c <_malloc_r>
 801ca6a:	b948      	cbnz	r0, 801ca80 <__smakebuf_r+0x46>
 801ca6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ca70:	059a      	lsls	r2, r3, #22
 801ca72:	d4ee      	bmi.n	801ca52 <__smakebuf_r+0x18>
 801ca74:	f023 0303 	bic.w	r3, r3, #3
 801ca78:	f043 0302 	orr.w	r3, r3, #2
 801ca7c:	81a3      	strh	r3, [r4, #12]
 801ca7e:	e7e2      	b.n	801ca46 <__smakebuf_r+0xc>
 801ca80:	89a3      	ldrh	r3, [r4, #12]
 801ca82:	6020      	str	r0, [r4, #0]
 801ca84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ca88:	81a3      	strh	r3, [r4, #12]
 801ca8a:	9b01      	ldr	r3, [sp, #4]
 801ca8c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ca90:	b15b      	cbz	r3, 801caaa <__smakebuf_r+0x70>
 801ca92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ca96:	4630      	mov	r0, r6
 801ca98:	f000 f84e 	bl	801cb38 <_isatty_r>
 801ca9c:	b128      	cbz	r0, 801caaa <__smakebuf_r+0x70>
 801ca9e:	89a3      	ldrh	r3, [r4, #12]
 801caa0:	f023 0303 	bic.w	r3, r3, #3
 801caa4:	f043 0301 	orr.w	r3, r3, #1
 801caa8:	81a3      	strh	r3, [r4, #12]
 801caaa:	89a3      	ldrh	r3, [r4, #12]
 801caac:	431d      	orrs	r5, r3
 801caae:	81a5      	strh	r5, [r4, #12]
 801cab0:	e7cf      	b.n	801ca52 <__smakebuf_r+0x18>

0801cab2 <_raise_r>:
 801cab2:	291f      	cmp	r1, #31
 801cab4:	b538      	push	{r3, r4, r5, lr}
 801cab6:	4605      	mov	r5, r0
 801cab8:	460c      	mov	r4, r1
 801caba:	d904      	bls.n	801cac6 <_raise_r+0x14>
 801cabc:	2316      	movs	r3, #22
 801cabe:	6003      	str	r3, [r0, #0]
 801cac0:	f04f 30ff 	mov.w	r0, #4294967295
 801cac4:	bd38      	pop	{r3, r4, r5, pc}
 801cac6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801cac8:	b112      	cbz	r2, 801cad0 <_raise_r+0x1e>
 801caca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cace:	b94b      	cbnz	r3, 801cae4 <_raise_r+0x32>
 801cad0:	4628      	mov	r0, r5
 801cad2:	f000 f853 	bl	801cb7c <_getpid_r>
 801cad6:	4622      	mov	r2, r4
 801cad8:	4601      	mov	r1, r0
 801cada:	4628      	mov	r0, r5
 801cadc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cae0:	f000 b83a 	b.w	801cb58 <_kill_r>
 801cae4:	2b01      	cmp	r3, #1
 801cae6:	d00a      	beq.n	801cafe <_raise_r+0x4c>
 801cae8:	1c59      	adds	r1, r3, #1
 801caea:	d103      	bne.n	801caf4 <_raise_r+0x42>
 801caec:	2316      	movs	r3, #22
 801caee:	6003      	str	r3, [r0, #0]
 801caf0:	2001      	movs	r0, #1
 801caf2:	e7e7      	b.n	801cac4 <_raise_r+0x12>
 801caf4:	2100      	movs	r1, #0
 801caf6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801cafa:	4620      	mov	r0, r4
 801cafc:	4798      	blx	r3
 801cafe:	2000      	movs	r0, #0
 801cb00:	e7e0      	b.n	801cac4 <_raise_r+0x12>
	...

0801cb04 <raise>:
 801cb04:	4b02      	ldr	r3, [pc, #8]	@ (801cb10 <raise+0xc>)
 801cb06:	4601      	mov	r1, r0
 801cb08:	6818      	ldr	r0, [r3, #0]
 801cb0a:	f7ff bfd2 	b.w	801cab2 <_raise_r>
 801cb0e:	bf00      	nop
 801cb10:	20000118 	.word	0x20000118

0801cb14 <_fstat_r>:
 801cb14:	b538      	push	{r3, r4, r5, lr}
 801cb16:	4d07      	ldr	r5, [pc, #28]	@ (801cb34 <_fstat_r+0x20>)
 801cb18:	2300      	movs	r3, #0
 801cb1a:	4604      	mov	r4, r0
 801cb1c:	4608      	mov	r0, r1
 801cb1e:	4611      	mov	r1, r2
 801cb20:	602b      	str	r3, [r5, #0]
 801cb22:	f7e6 faef 	bl	8003104 <_fstat>
 801cb26:	1c43      	adds	r3, r0, #1
 801cb28:	d102      	bne.n	801cb30 <_fstat_r+0x1c>
 801cb2a:	682b      	ldr	r3, [r5, #0]
 801cb2c:	b103      	cbz	r3, 801cb30 <_fstat_r+0x1c>
 801cb2e:	6023      	str	r3, [r4, #0]
 801cb30:	bd38      	pop	{r3, r4, r5, pc}
 801cb32:	bf00      	nop
 801cb34:	2000e73c 	.word	0x2000e73c

0801cb38 <_isatty_r>:
 801cb38:	b538      	push	{r3, r4, r5, lr}
 801cb3a:	4d06      	ldr	r5, [pc, #24]	@ (801cb54 <_isatty_r+0x1c>)
 801cb3c:	2300      	movs	r3, #0
 801cb3e:	4604      	mov	r4, r0
 801cb40:	4608      	mov	r0, r1
 801cb42:	602b      	str	r3, [r5, #0]
 801cb44:	f7e6 faee 	bl	8003124 <_isatty>
 801cb48:	1c43      	adds	r3, r0, #1
 801cb4a:	d102      	bne.n	801cb52 <_isatty_r+0x1a>
 801cb4c:	682b      	ldr	r3, [r5, #0]
 801cb4e:	b103      	cbz	r3, 801cb52 <_isatty_r+0x1a>
 801cb50:	6023      	str	r3, [r4, #0]
 801cb52:	bd38      	pop	{r3, r4, r5, pc}
 801cb54:	2000e73c 	.word	0x2000e73c

0801cb58 <_kill_r>:
 801cb58:	b538      	push	{r3, r4, r5, lr}
 801cb5a:	4d07      	ldr	r5, [pc, #28]	@ (801cb78 <_kill_r+0x20>)
 801cb5c:	2300      	movs	r3, #0
 801cb5e:	4604      	mov	r4, r0
 801cb60:	4608      	mov	r0, r1
 801cb62:	4611      	mov	r1, r2
 801cb64:	602b      	str	r3, [r5, #0]
 801cb66:	f7e6 fa6b 	bl	8003040 <_kill>
 801cb6a:	1c43      	adds	r3, r0, #1
 801cb6c:	d102      	bne.n	801cb74 <_kill_r+0x1c>
 801cb6e:	682b      	ldr	r3, [r5, #0]
 801cb70:	b103      	cbz	r3, 801cb74 <_kill_r+0x1c>
 801cb72:	6023      	str	r3, [r4, #0]
 801cb74:	bd38      	pop	{r3, r4, r5, pc}
 801cb76:	bf00      	nop
 801cb78:	2000e73c 	.word	0x2000e73c

0801cb7c <_getpid_r>:
 801cb7c:	f7e6 ba58 	b.w	8003030 <_getpid>

0801cb80 <_malloc_usable_size_r>:
 801cb80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cb84:	1f18      	subs	r0, r3, #4
 801cb86:	2b00      	cmp	r3, #0
 801cb88:	bfbc      	itt	lt
 801cb8a:	580b      	ldrlt	r3, [r1, r0]
 801cb8c:	18c0      	addlt	r0, r0, r3
 801cb8e:	4770      	bx	lr

0801cb90 <_init>:
 801cb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb92:	bf00      	nop
 801cb94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cb96:	bc08      	pop	{r3}
 801cb98:	469e      	mov	lr, r3
 801cb9a:	4770      	bx	lr

0801cb9c <_fini>:
 801cb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb9e:	bf00      	nop
 801cba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cba2:	bc08      	pop	{r3}
 801cba4:	469e      	mov	lr, r3
 801cba6:	4770      	bx	lr
